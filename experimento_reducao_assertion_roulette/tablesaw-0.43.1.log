Antes do refactor: 


Projeto: /home/vitor-otto/opensource/tablesaw-0.43.1

Total asserts: 2899
Asserts sem descrição: 2548
Asserts com descrição: 351
Assertion Roulette: 2159

Após o refactor: 


Projeto: /home/vitor-otto/opensource/tablesaw-0.43.1

chamada antiga: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
nova chamada: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr>" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output, "Era esperado valores iguais, mas  'table' + LINE_END + ' thead' + LINE_END + '  tr' + LINE_END + '   thv/th' + LINE_END + '   thv2/th' + LINE_END + '  /tr' + LINE_END + ' /thead' + LINE_END + ' tbody' + LINE_END + '  tr' + LINE_END + '   td1/td' + LINE_END + '   td1/td' + LINE_END + '  /tr' + LINE_END + '  tr' + LINE_END + '   td2/td' + LINE_END + '   td2/td' + LINE_END + '  /tr' + LINE_END + '  tr' + LINE_END + '   td/td' + LINE_END + '   td/td' + LINE_END + '  /tr' + LINE_END + ' /tbody' + LINE_END + '/table' é diferente de " + " output")
chamada antiga: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"odd\">" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
nova chamada: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>v</th>" + LINE_END + "   <th>v2</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td>1</td>" + LINE_END + "   <td>1</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"odd\">" + LINE_END + "   <td>2</td>" + LINE_END + "   <td>2</td>" + LINE_END + "  </tr>" + LINE_END + "  <tr class=\"even\">" + LINE_END + "   <td></td>" + LINE_END + "   <td></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output, "Era esperado valores iguais, mas  'table' + LINE_END + ' thead' + LINE_END + '  tr' + LINE_END + '   thv/th' + LINE_END + '   thv2/th' + LINE_END + '  /tr' + LINE_END + ' /thead' + LINE_END + ' tbody' + LINE_END + '  tr class=\'even\'' + LINE_END + '   td1/td' + LINE_END + '   td1/td' + LINE_END + '  /tr' + LINE_END + '  tr class=\'odd\'' + LINE_END + '   td2/td' + LINE_END + '   td2/td' + LINE_END + '  /tr' + LINE_END + '  tr class=\'even\'' + LINE_END + '   td/td' + LINE_END + '   td/td' + LINE_END + '  /tr' + LINE_END + ' /tbody' + LINE_END + '/table' é diferente de " + " output")
chamada antiga: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td><p>foo</p></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
nova chamada: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td><p>foo</p></td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output, "Era esperado valores iguais, mas  'table' + LINE_END + ' thead' + LINE_END + '  tr' + LINE_END + '   thdata/th' + LINE_END + '  /tr' + LINE_END + ' /thead' + LINE_END + ' tbody' + LINE_END + '  tr' + LINE_END + '   tdpfoo/p/td' + LINE_END + '  /tr' + LINE_END + ' /tbody' + LINE_END + '/table' é diferente de " + " output")
chamada antiga: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>&lt;p&gt;foo&lt;/p&gt;</td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output)
nova chamada: assertEquals("<table>" + LINE_END + " <thead>" + LINE_END + "  <tr>" + LINE_END + "   <th>data</th>" + LINE_END + "  </tr>" + LINE_END + " </thead>" + LINE_END + " <tbody>" + LINE_END + "  <tr>" + LINE_END + "   <td>&lt;p&gt;foo&lt;/p&gt;</td>" + LINE_END + "  </tr>" + LINE_END + " </tbody>" + LINE_END + "</table>", output, "Era esperado valores iguais, mas  'table' + LINE_END + ' thead' + LINE_END + '  tr' + LINE_END + '   thdata/th' + LINE_END + '  /tr' + LINE_END + ' /thead' + LINE_END + ' tbody' + LINE_END + '  tr' + LINE_END + '   td&lt;p&gt;foo&lt;/p&gt;/td' + LINE_END + '  /tr' + LINE_END + ' /tbody' + LINE_END + '/table' é diferente de " + " output")
chamada antiga: assertEquals(json, writer.toString())
nova chamada: assertEquals(json, writer.toString(), "Era esperado valores iguais, mas  json é diferente de " + result0 + " <writer.toString()>")
chamada antiga: assertEquals(json, writer.toString())
nova chamada: assertEquals(json, writer.toString(), "Era esperado valores iguais, mas  json é diferente de " + result1 + " <writer.toString()>")
chamada antiga: assertEquals(json, output)
nova chamada: assertEquals(json, output, "Era esperado valores iguais, mas  json é diferente de " + " output")
chamada antiga: assertEquals(2, table.columnCount())
nova chamada: assertEquals(2, table.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2 + " <table.columnCount()>")
chamada antiga: assertEquals(3, table.rowCount())
nova chamada: assertEquals(3, table.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3 + " <table.rowCount()>")
chamada antiga: assertEquals("Date", table.column(0).name())
nova chamada: assertEquals("Date", table.column(0).name(), "Era esperado valores iguais, mas  'Date' é diferente de " + result4 + " <table.column(0).name()>")
chamada antiga: assertEquals("Value", table.column(1).name())
nova chamada: assertEquals("Value", table.column(1).name(), "Era esperado valores iguais, mas  'Value' é diferente de " + result5 + " <table.column(1).name()>")
chamada antiga: assertEquals(ColumnType.LONG, table.typeArray()[0])
nova chamada: assertEquals(ColumnType.LONG, table.typeArray()[0], "Era esperado valores iguais, mas  ColumnType.LONG é diferente de " + " table.typeArray()[0]")
chamada antiga: assertEquals(1453438800000L, table.column("Date").get(0))
nova chamada: assertEquals(1453438800000L, table.column("Date").get(0), "Era esperado valores iguais, mas  1453438800000L é diferente de " + result6 + " <table.column('Date').get(0)>")
chamada antiga: assertEquals(2, table.columnCount())
nova chamada: assertEquals(2, table.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result7 + " <table.columnCount()>")
chamada antiga: assertEquals(3, table.rowCount())
nova chamada: assertEquals(3, table.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result8 + " <table.rowCount()>")
chamada antiga: assertEquals(ColumnType.LONG, table.typeArray()[0])
nova chamada: assertEquals(ColumnType.LONG, table.typeArray()[0], "Era esperado valores iguais, mas  ColumnType.LONG é diferente de " + " table.typeArray()[0]")
chamada antiga: assertEquals(2, table.columnCount())
nova chamada: assertEquals(2, table.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result9 + " <table.columnCount()>")
chamada antiga: assertEquals(3, table.rowCount())
nova chamada: assertEquals(3, table.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result10 + " <table.rowCount()>")
chamada antiga: assertEquals("a", table.column(0).name())
nova chamada: assertEquals("a", table.column(0).name(), "Era esperado valores iguais, mas  'a' é diferente de " + result11 + " <table.column(0).name()>")
chamada antiga: assertEquals("b.c", table.column(1).name())
nova chamada: assertEquals("b.c", table.column(1).name(), "Era esperado valores iguais, mas  'b.c' é diferente de " + result12 + " <table.column(1).name()>")
chamada antiga: assertEquals(ColumnType.LONG, table.typeArray()[0])
nova chamada: assertEquals(ColumnType.LONG, table.typeArray()[0], "Era esperado valores iguais, mas  ColumnType.LONG é diferente de " + " table.typeArray()[0]")
chamada antiga: assertEquals(ColumnType.INTEGER, actual.typeArray()[0])
nova chamada: assertEquals(ColumnType.INTEGER, actual.typeArray()[0], "Era esperado valores iguais, mas  ColumnType.INTEGER é diferente de " + " actual.typeArray()[0]")
chamada antiga: assertEquals(expected.column("A").asList(), actual.column("A").asList())
nova chamada: assertEquals(expected.column("A").asList(), actual.column("A").asList(), "Era esperado valores iguais, mas " + result13 + " <expected.column('A').asList()> é diferente de " + result14 + " <actual.column('A').asList()>")
chamada antiga: assertEquals(expected.column("B").asList(), actual.column("B").asList())
nova chamada: assertEquals(expected.column("B").asList(), actual.column("B").asList(), "Era esperado valores iguais, mas " + result15 + " <expected.column('B').asList()> é diferente de " + result16 + " <actual.column('B').asList()>")
chamada antiga: assertEquals(expected.column("C").asList(), actual.column("C").asList())
nova chamada: assertEquals(expected.column("C").asList(), actual.column("C").asList(), "Era esperado valores iguais, mas " + result17 + " <expected.column('C').asList()> é diferente de " + result18 + " <actual.column('C').asList()>")
chamada antiga: assertArrayEquals(columnTypes, new ColumnType[] { INSTANT, DOUBLE })
nova chamada: assertArrayEquals(columnTypes, new ColumnType[] { INSTANT, DOUBLE }, "Era esperado arrays iguais, mas  columnTypes é diferente de " + " new ColumnType[] { INSTANT, DOUBLE }")
chamada antiga: assertArrayEquals(columnTypes, new ColumnType[] { STRING, STRING })
nova chamada: assertArrayEquals(columnTypes, new ColumnType[] { STRING, STRING }, "Era esperado arrays iguais, mas  columnTypes é diferente de " + " new ColumnType[] { STRING, STRING }")
chamada antiga: assertNotNull(trace.asJavascript(1))
nova chamada: assertNotNull(trace.asJavascript(1), "Era esperado não nulo, mas " + result19 + " <trace.asJavascript(1)> é nulo")
chamada antiga: assertEquals("x title", layout.getTitle())
nova chamada: assertEquals("x title", layout.getTitle(), "Era esperado valores iguais, mas  'x title' é diferente de " + result20 + " <layout.getTitle()>")
chamada antiga: assertNotNull(Scatter3DPlot.create("3D plot", data, "x", "y", "z"))
nova chamada: assertNotNull(Scatter3DPlot.create("3D plot", data, "x", "y", "z"), "Era esperado não nulo, mas " + result21 + " <Scatter3DPlot.create('3D plot', data, 'x', 'y', 'z')> é nulo")
chamada antiga: assertTrue(html.indexOf("\"" + "https://cdn.plot.ly/plotly-latest.min.js" + "\"") > 0)
nova chamada: assertTrue(html.indexOf("\"" + "https://cdn.plot.ly/plotly-latest.min.js" + "\"") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(html.indexOf("\"" + location + "\"") > 0)
nova chamada: assertTrue(html.indexOf("\"" + location + "\"") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(trace.asJavascript(1))
nova chamada: assertNotNull(trace.asJavascript(1), "Era esperado não nulo, mas " + result22 + " <trace.asJavascript(1)> é nulo")
chamada antiga: assertNotNull(figure)
nova chamada: assertNotNull(figure, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(trace)
nova chamada: assertNotNull(trace, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(xAxis, traceBuilder.xAxis)
nova chamada: assertEquals(xAxis, traceBuilder.xAxis, "Era esperado valores iguais, mas  xAxis é diferente de " + " traceBuilder.xAxis")
chamada antiga: assertEquals(yAxis, traceBuilder.yAxis)
nova chamada: assertEquals(yAxis, traceBuilder.yAxis, "Era esperado valores iguais, mas  yAxis é diferente de " + " traceBuilder.yAxis")
chamada antiga: assertEquals(javaScript, Up.upBuilder(1, 2, 3).build().asJavascript())
nova chamada: assertEquals(javaScript, Up.upBuilder(1, 2, 3).build().asJavascript(), "Era esperado valores iguais, mas  javaScript é diferente de " + result23 + " <Up.upBuilder(1, 2, 3).build().asJavascript()>")
chamada antiga: assertEquals(javaScript, Eye.eyeBuilder(1, 2, 3).build().asJavascript())
nova chamada: assertEquals(javaScript, Eye.eyeBuilder(1, 2, 3).build().asJavascript(), "Era esperado valores iguais, mas  javaScript é diferente de " + result24 + " <Eye.eyeBuilder(1, 2, 3).build().asJavascript()>")
chamada antiga: assertEquals(javaScript, Center.centerBuilder(1, 2, 3).build().asJavascript())
nova chamada: assertEquals(javaScript, Center.centerBuilder(1, 2, 3).build().asJavascript(), "Era esperado valores iguais, mas  javaScript é diferente de " + result25 + " <Center.centerBuilder(1, 2, 3).build().asJavascript()>")
chamada antiga: assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        " + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data);            </script>" + LINE_END, figure.asJavascript(divName))
nova chamada: assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        " + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data);            </script>" + LINE_END, figure.asJavascript(divName), "Era esperado valores iguais, mas  '    script' + LINE_END + '        var target_target = document.getElementById('target');' + LINE_END + '        ' + LINE_END + 'var trace0 =' + LINE_END + '{' + LINE_END + 'x: [\'1.0\',\'2.0\',\'3.0\',\'4.0\',\'5.0\'],' + LINE_END + 'y: [\'1.0\',\'4.0\',\'9.0\',\'16.0\',\'25.0\'],' + LINE_END + 'mode: 'markers',' + LINE_END + 'xaxis: 'x',' + LINE_END + 'yaxis: 'y',' + LINE_END + 'type: 'scatter',' + LINE_END + 'name: '',' + LINE_END + '};' + LINE_END + '' + LINE_END + '        var data = [ trace0];' + LINE_END + 'Plotly.newPlot(target_target, data);            /script' + LINE_END é diferente de " + result26 + " <figure.asJavascript(divName)>")
chamada antiga: assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        var layout = {" + LINE_END + "    title: 'A test title'," + LINE_END + "    height: 450," + LINE_END + "    width: 700," + LINE_END + "    showlegend: true," + LINE_END + "    margin: {" + LINE_END + "  \"autoexpand\" : true," + LINE_END + "  \"b\" : 80," + LINE_END + "  \"l\" : 200," + LINE_END + "  \"pad\" : 0," + LINE_END + "  \"r\" : 80," + LINE_END + "  \"t\" : 200" + LINE_END + "}," + LINE_END + "    xaxis: {" + LINE_END + "    title: 'x Axis 1'," + LINE_END + "        titlefont: {" + LINE_END + "  \"color\" : \"red\"," + LINE_END + "  \"family\" : \"arial\"," + LINE_END + "  \"size\" : 8" + LINE_END + "}," + LINE_END + "    }," + LINE_END + "" + LINE_END + "" + LINE_END + "};" + LINE_END + "" + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data, layout);            </script>" + LINE_END, figure.asJavascript(divName))
nova chamada: assertEquals("    <script>" + LINE_END + "        var target_target = document.getElementById('target');" + LINE_END + "        var layout = {" + LINE_END + "    title: 'A test title'," + LINE_END + "    height: 450," + LINE_END + "    width: 700," + LINE_END + "    showlegend: true," + LINE_END + "    margin: {" + LINE_END + "  \"autoexpand\" : true," + LINE_END + "  \"b\" : 80," + LINE_END + "  \"l\" : 200," + LINE_END + "  \"pad\" : 0," + LINE_END + "  \"r\" : 80," + LINE_END + "  \"t\" : 200" + LINE_END + "}," + LINE_END + "    xaxis: {" + LINE_END + "    title: 'x Axis 1'," + LINE_END + "        titlefont: {" + LINE_END + "  \"color\" : \"red\"," + LINE_END + "  \"family\" : \"arial\"," + LINE_END + "  \"size\" : 8" + LINE_END + "}," + LINE_END + "    }," + LINE_END + "" + LINE_END + "" + LINE_END + "};" + LINE_END + "" + LINE_END + "var trace0 =" + LINE_END + "{" + LINE_END + "x: [\"1.0\",\"2.0\",\"3.0\",\"4.0\",\"5.0\"]," + LINE_END + "y: [\"1.0\",\"4.0\",\"9.0\",\"16.0\",\"25.0\"]," + LINE_END + "mode: 'markers'," + LINE_END + "xaxis: 'x'," + LINE_END + "yaxis: 'y'," + LINE_END + "type: 'scatter'," + LINE_END + "name: ''," + LINE_END + "};" + LINE_END + "" + LINE_END + "        var data = [ trace0];" + LINE_END + "Plotly.newPlot(target_target, data, layout);            </script>" + LINE_END, figure.asJavascript(divName), "Era esperado valores iguais, mas  '    script' + LINE_END + '        var target_target = document.getElementById('target');' + LINE_END + '        var layout = {' + LINE_END + '    title: 'A test title',' + LINE_END + '    height: 450,' + LINE_END + '    width: 700,' + LINE_END + '    showlegend: true,' + LINE_END + '    margin: {' + LINE_END + '  \'autoexpand\' : true,' + LINE_END + '  \'b\' : 80,' + LINE_END + '  \'l\' : 200,' + LINE_END + '  \'pad\' : 0,' + LINE_END + '  \'r\' : 80,' + LINE_END + '  \'t\' : 200' + LINE_END + '},' + LINE_END + '    xaxis: {' + LINE_END + '    title: 'x Axis 1',' + LINE_END + '        titlefont: {' + LINE_END + '  \'color\' : \'red\',' + LINE_END + '  \'family\' : \'arial\',' + LINE_END + '  \'size\' : 8' + LINE_END + '},' + LINE_END + '    },' + LINE_END + '' + LINE_END + '' + LINE_END + '};' + LINE_END + '' + LINE_END + 'var trace0 =' + LINE_END + '{' + LINE_END + 'x: [\'1.0\',\'2.0\',\'3.0\',\'4.0\',\'5.0\'],' + LINE_END + 'y: [\'1.0\',\'4.0\',\'9.0\',\'16.0\',\'25.0\'],' + LINE_END + 'mode: 'markers',' + LINE_END + 'xaxis: 'x',' + LINE_END + 'yaxis: 'y',' + LINE_END + 'type: 'scatter',' + LINE_END + 'name: '',' + LINE_END + '};' + LINE_END + '' + LINE_END + '        var data = [ trace0];' + LINE_END + 'Plotly.newPlot(target_target, data, layout);            /script' + LINE_END é diferente de " + result27 + " <figure.asJavascript(divName)>")
chamada antiga: assertEquals(layout, figure.getLayout())
nova chamada: assertEquals(layout, figure.getLayout(), "Era esperado valores iguais, mas  layout é diferente de " + result28 + " <figure.getLayout()>")
chamada antiga: assertTrue(String.valueOf(figure.getContext().get("figure")).contains(title))
nova chamada: assertTrue(String.valueOf(figure.getContext().get("figure")).contains(title), "Era esperado verdadeiro, mas " + result29 + " <String.valueOf(figure.getContext().get('figure')).contains(title)> é falso")
chamada antiga: assertTrue(increasing.asJavascript().contains("line"))
nova chamada: assertTrue(increasing.asJavascript().contains("line"), "Era esperado verdadeiro, mas " + result30 + " <increasing.asJavascript().contains('line')> é falso")
chamada antiga: assertTrue(increasing.asJavascript().contains("color"))
nova chamada: assertTrue(increasing.asJavascript().contains("color"), "Era esperado verdadeiro, mas " + result31 + " <increasing.asJavascript().contains('color')> é falso")
chamada antiga: assertTrue(increasing.asJavascript().contains("width"))
nova chamada: assertTrue(increasing.asJavascript().contains("width"), "Era esperado verdadeiro, mas " + result32 + " <increasing.asJavascript().contains('width')> é falso")
chamada antiga: assertTrue(increasing.asJavascript().contains("fillcolor"))
nova chamada: assertTrue(increasing.asJavascript().contains("fillcolor"), "Era esperado verdadeiro, mas " + result33 + " <increasing.asJavascript().contains('fillcolor')> é falso")
chamada antiga: assertTrue(line.asJavascript().contains("color"))
nova chamada: assertTrue(line.asJavascript().contains("color"), "Era esperado verdadeiro, mas " + result34 + " <line.asJavascript().contains('color')> é falso")
chamada antiga: assertTrue(line.asJavascript().contains("width"))
nova chamada: assertTrue(line.asJavascript().contains("width"), "Era esperado verdadeiro, mas " + result35 + " <line.asJavascript().contains('width')> é falso")
chamada antiga: assertNotNull(trace.asJavascript(1))
nova chamada: assertNotNull(trace.asJavascript(1), "Era esperado não nulo, mas " + result36 + " <trace.asJavascript(1)> é nulo")
chamada antiga: assertNotNull(figure)
nova chamada: assertNotNull(figure, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(figure)
nova chamada: assertNotNull(figure, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(trace)
nova chamada: assertNotNull(trace, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[\"Hello\\\\\"]", s2)
nova chamada: assertEquals("[\"Hello\\\\\"]", s2, "Era esperado valores iguais, mas  '[\'Hello\\\\\']' é diferente de " + " s2")
chamada antiga: assertNotNull(figure)
nova chamada: assertNotNull(figure, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(html.indexOf(customTemplateString) < 0)
nova chamada: assertTrue(html.indexOf(customTemplateString) < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(path.lastIndexOf('/') >= 0)
nova chamada: assertTrue(path.lastIndexOf('/') >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(html.indexOf(customTemplateString) >= 0)
nova chamada: assertTrue(html.indexOf(customTemplateString) >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(x.asJavascript().contains("color"))
nova chamada: assertTrue(x.asJavascript().contains("color"), "Era esperado verdadeiro, mas " + result37 + " <x.asJavascript().contains('color')> é falso")
chamada antiga: assertTrue(x.asJavascript().contains("symbol"))
nova chamada: assertTrue(x.asJavascript().contains("symbol"), "Era esperado verdadeiro, mas " + result38 + " <x.asJavascript().contains('symbol')> é falso")
chamada antiga: assertTrue(x.asJavascript().contains("size"))
nova chamada: assertTrue(x.asJavascript().contains("size"), "Era esperado verdadeiro, mas " + result39 + " <x.asJavascript().contains('size')> é falso")
chamada antiga: assertTrue(asJavascript.contains("rows"))
nova chamada: assertTrue(asJavascript.contains("rows"), "Era esperado verdadeiro, mas " + result40 + " <asJavascript.contains('rows')> é falso")
chamada antiga: assertTrue(asJavascript.contains("columns"))
nova chamada: assertTrue(asJavascript.contains("columns"), "Era esperado verdadeiro, mas " + result41 + " <asJavascript.contains('columns')> é falso")
chamada antiga: assertTrue(asJavascript.contains("rows"))
nova chamada: assertTrue(asJavascript.contains("rows"), "Era esperado verdadeiro, mas " + result42 + " <asJavascript.contains('rows')> é falso")
chamada antiga: assertTrue(asJavascript.contains("xAxis"))
nova chamada: assertTrue(asJavascript.contains("xAxis"), "Era esperado verdadeiro, mas " + result43 + " <asJavascript.contains('xAxis')> é falso")
chamada antiga: assertTrue(asJavascript.contains("rows"))
nova chamada: assertTrue(asJavascript.contains("rows"), "Era esperado verdadeiro, mas " + result44 + " <asJavascript.contains('rows')> é falso")
chamada antiga: assertTrue(asJavascript.contains("columns"))
nova chamada: assertTrue(asJavascript.contains("columns"), "Era esperado verdadeiro, mas " + result45 + " <asJavascript.contains('columns')> é falso")
chamada antiga: assertTrue(asJavascript.contains("roworder"))
nova chamada: assertTrue(asJavascript.contains("roworder"), "Era esperado verdadeiro, mas " + result46 + " <asJavascript.contains('roworder')> é falso")
chamada antiga: assertTrue(asJavascript.contains("pattern"))
nova chamada: assertTrue(asJavascript.contains("pattern"), "Era esperado verdadeiro, mas " + result47 + " <asJavascript.contains('pattern')> é falso")
chamada antiga: assertEquals(metadata1, copy)
nova chamada: assertEquals(metadata1, copy, "Era esperado valores iguais, mas  metadata1 é diferente de " + " copy")
chamada antiga: assertEquals(table1.name(), metadata.getTableName())
nova chamada: assertEquals(table1.name(), metadata.getTableName(), "Era esperado valores iguais, mas " + result48 + " <table1.name()> é diferente de " + result49 + " <metadata.getTableName()>")
chamada antiga: assertEquals(table1.rowCount(), metadata.getRowCount())
nova chamada: assertEquals(table1.rowCount(), metadata.getRowCount(), "Era esperado valores iguais, mas " + result50 + " <table1.rowCount()> é diferente de " + result51 + " <metadata.getRowCount()>")
chamada antiga: assertEquals(table1.columnNames(), metadata.columnNames())
nova chamada: assertEquals(table1.columnNames(), metadata.columnNames(), "Era esperado valores iguais, mas " + result52 + " <table1.columnNames()> é diferente de " + result53 + " <metadata.columnNames()>")
chamada antiga: assertEquals(SNAPPY, metadata.getCompressionType())
nova chamada: assertEquals(SNAPPY, metadata.getCompressionType(), "Era esperado valores iguais, mas  SNAPPY é diferente de " + result54 + " <metadata.getCompressionType()>")
chamada antiga: assertEquals(metadata1, copy)
nova chamada: assertEquals(metadata1, copy, "Era esperado valores iguais, mas  metadata1 é diferente de " + " copy")
chamada antiga: assertEquals(table1.name(), metadata1.getTableName())
nova chamada: assertEquals(table1.name(), metadata1.getTableName(), "Era esperado valores iguais, mas " + result55 + " <table1.name()> é diferente de " + result56 + " <metadata1.getTableName()>")
chamada antiga: assertEquals(table1.rowCount(), metadata1.getRowCount())
nova chamada: assertEquals(table1.rowCount(), metadata1.getRowCount(), "Era esperado valores iguais, mas " + result57 + " <table1.rowCount()> é diferente de " + result58 + " <metadata1.getRowCount()>")
chamada antiga: assertEquals(2, metadata1.getVersion())
nova chamada: assertEquals(2, metadata1.getVersion(), "Era esperado valores iguais, mas  2 é diferente de " + result59 + " <metadata1.getVersion()>")
chamada antiga: assertEquals(table1.columnCount(), metadata1.columnCount())
nova chamada: assertEquals(table1.columnCount(), metadata1.columnCount(), "Era esperado valores iguais, mas " + result60 + " <table1.columnCount()> é diferente de " + result61 + " <metadata1.columnCount()>")
chamada antiga: assertEquals(table1.shape(), metadata1.shape())
nova chamada: assertEquals(table1.shape(), metadata1.shape(), "Era esperado valores iguais, mas " + result62 + " <table1.shape()> é diferente de " + result63 + " <metadata1.shape()>")
chamada antiga: assertEquals(table1.columnNames(), metadata1.columnNames())
nova chamada: assertEquals(table1.columnNames(), metadata1.columnNames(), "Era esperado valores iguais, mas " + result64 + " <table1.columnNames()> é diferente de " + result65 + " <metadata1.columnNames()>")
chamada antiga: assertEquals(table1.structure().toString(), metadata1.structure().toString())
nova chamada: assertEquals(table1.structure().toString(), metadata1.structure().toString(), "Era esperado valores iguais, mas " + result66 + " <table1.structure().toString()> é diferente de " + result67 + " <metadata1.structure().toString()>")
chamada antiga: assertEquals(table.columnCount(), t.columnCount())
nova chamada: assertEquals(table.columnCount(), t.columnCount(), "Era esperado valores iguais, mas " + result68 + " <table.columnCount()> é diferente de " + result69 + " <t.columnCount()>")
chamada antiga: assertEquals(table.rowCount(), t.rowCount())
nova chamada: assertEquals(table.rowCount(), t.rowCount(), "Era esperado valores iguais, mas " + result70 + " <table.rowCount()> é diferente de " + result71 + " <t.rowCount()>")
chamada antiga: assertEquals(table.columnCount(), t.columnCount())
nova chamada: assertEquals(table.columnCount(), t.columnCount(), "Era esperado valores iguais, mas " + result72 + " <table.columnCount()> é diferente de " + result73 + " <t.columnCount()>")
chamada antiga: assertEquals(table.rowCount(), t.rowCount())
nova chamada: assertEquals(table.rowCount(), t.rowCount(), "Era esperado valores iguais, mas " + result74 + " <table.rowCount()> é diferente de " + result75 + " <t.rowCount()>")
chamada antiga: assertEquals(table.name(), t.name())
nova chamada: assertEquals(table.name(), t.name(), "Era esperado valores iguais, mas " + result76 + " <table.name()> é diferente de " + result77 + " <t.name()>")
chamada antiga: assertEquals(table.rowCount(), t.rowCount())
nova chamada: assertEquals(table.rowCount(), t.rowCount(), "Era esperado valores iguais, mas " + result78 + " <table.rowCount()> é diferente de " + result79 + " <t.rowCount()>")
chamada antiga: assertEquals(table.columnCount(), t.columnCount())
nova chamada: assertEquals(table.columnCount(), t.columnCount(), "Era esperado valores iguais, mas " + result80 + " <table.columnCount()> é diferente de " + result81 + " <t.columnCount()>")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(table.columnCount() > 0)
nova chamada: assertTrue(table.columnCount() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(table.isEmpty())
nova chamada: assertTrue(table.isEmpty(), "Era esperado verdadeiro, mas " + result82 + " <table.isEmpty()> é falso")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(intsOnly.rowCount(), table.rowCount())
nova chamada: assertEquals(intsOnly.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result83 + " <intsOnly.rowCount()> é diferente de " + result84 + " <table.rowCount()>")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(intsAndStrings.rowCount(), table.rowCount())
nova chamada: assertEquals(intsAndStrings.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result85 + " <intsAndStrings.rowCount()> é diferente de " + result86 + " <table.rowCount()>")
chamada antiga: assertTrue(table.column(1).size() > 0)
nova chamada: assertTrue(table.column(1).size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(TEXT, table.column(1).type())
nova chamada: assertEquals(TEXT, table.column(1).type(), "Era esperado valores iguais, mas  TEXT é diferente de " + result87 + " <table.column(1).type()>")
chamada antiga: assertEquals(intsAndText.rowCount(), table.rowCount())
nova chamada: assertEquals(intsAndText.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result88 + " <intsAndText.rowCount()> é diferente de " + result89 + " <table.rowCount()>")
chamada antiga: assertEquals(100, table.column(0).size())
nova chamada: assertEquals(100, table.column(0).size(), "Era esperado valores iguais, mas  100 é diferente de " + result90 + " <table.column(0).size()>")
chamada antiga: assertEquals(INSTANT, table.column(1).type())
nova chamada: assertEquals(INSTANT, table.column(1).type(), "Era esperado valores iguais, mas  INSTANT é diferente de " + result91 + " <table.column(1).type()>")
chamada antiga: assertEquals(instants.rowCount(), table.rowCount())
nova chamada: assertEquals(instants.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result92 + " <instants.rowCount()> é diferente de " + result93 + " <table.rowCount()>")
chamada antiga: assertEquals(instants.instantColumn(1).get(20), table.instantColumn(1).get(20))
nova chamada: assertEquals(instants.instantColumn(1).get(20), table.instantColumn(1).get(20), "Era esperado valores iguais, mas " + result94 + " <instants.instantColumn(1).get(20)> é diferente de " + result95 + " <table.instantColumn(1).get(20)>")
chamada antiga: assertEquals(table.column(1).size(), bush.rowCount())
nova chamada: assertEquals(table.column(1).size(), bush.rowCount(), "Era esperado valores iguais, mas " + result96 + " <table.column(1).size()> é diferente de " + result97 + " <bush.rowCount()>")
chamada antiga: assertTrue(table.column(1).size() > 0)
nova chamada: assertTrue(table.column(1).size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(tornado.columnCount(), table.columnCount())
nova chamada: assertEquals(tornado.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result98 + " <tornado.columnCount()> é diferente de " + result99 + " <table.columnCount()>")
chamada antiga: assertEquals(tornado.rowCount(), table.rowCount())
nova chamada: assertEquals(tornado.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result100 + " <tornado.rowCount()> é diferente de " + result101 + " <table.rowCount()>")
chamada antiga: assertTrue(baseball.column(1).size() > 0)
nova chamada: assertTrue(baseball.column(1).size() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(baseball.columnCount(), table.columnCount())
nova chamada: assertEquals(baseball.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result102 + " <baseball.columnCount()> é diferente de " + result103 + " <table.columnCount()>")
chamada antiga: assertEquals(baseball.rowCount(), table.rowCount())
nova chamada: assertEquals(baseball.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result104 + " <baseball.rowCount()> é diferente de " + result105 + " <table.rowCount()>")
chamada antiga: assertEquals("baseball.csv: 1232 rows X 15 cols", new SawReader(path).shape())
nova chamada: assertEquals("baseball.csv: 1232 rows X 15 cols", new SawReader(path).shape(), "Era esperado valores iguais, mas  'baseball.csv: 1232 rows X 15 cols' é diferente de " + result106 + " <new SawReader(path).shape()>")
chamada antiga: assertEquals(1232, new SawReader(path).rowCount())
nova chamada: assertEquals(1232, new SawReader(path).rowCount(), "Era esperado valores iguais, mas  1232 é diferente de " + result107 + " <new SawReader(path).rowCount()>")
chamada antiga: assertEquals(15, new SawReader(path).columnCount())
nova chamada: assertEquals(15, new SawReader(path).columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result108 + " <new SawReader(path).columnCount()>")
chamada antiga: assertEquals(baseball.columnNames(), new SawReader(path).columnNames())
nova chamada: assertEquals(baseball.columnNames(), new SawReader(path).columnNames(), "Era esperado valores iguais, mas " + result109 + " <baseball.columnNames()> é diferente de " + result110 + " <new SawReader(path).columnNames()>")
chamada antiga: assertEquals(baseball.structure().printAll(), new SawReader(path).structure().printAll())
nova chamada: assertEquals(baseball.structure().printAll(), new SawReader(path).structure().printAll(), "Era esperado valores iguais, mas " + result111 + " <baseball.structure().printAll()> é diferente de " + result112 + " <new SawReader(path).structure().printAll()>")
chamada antiga: assertEquals(3, bb2.columnCount())
nova chamada: assertEquals(3, bb2.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result113 + " <bb2.columnCount()>")
chamada antiga: assertTrue(bb2.columnNames().contains("OBP"))
nova chamada: assertTrue(bb2.columnNames().contains("OBP"), "Era esperado verdadeiro, mas " + result114 + " <bb2.columnNames().contains('OBP')> é falso")
chamada antiga: assertTrue(bb2.columnNames().contains("SLG"))
nova chamada: assertTrue(bb2.columnNames().contains("SLG"), "Era esperado verdadeiro, mas " + result115 + " <bb2.columnNames().contains('SLG')> é falso")
chamada antiga: assertTrue(bb2.columnNames().contains("BA"))
nova chamada: assertTrue(bb2.columnNames().contains("BA"), "Era esperado verdadeiro, mas " + result116 + " <bb2.columnNames().contains('BA')> é falso")
chamada antiga: assertEquals(baseball.rowCount(), bb2.rowCount())
nova chamada: assertEquals(baseball.rowCount(), bb2.rowCount(), "Era esperado valores iguais, mas " + result117 + " <baseball.rowCount()> é diferente de " + result118 + " <bb2.rowCount()>")
chamada antiga: assertEquals(3, bb2.columnCount())
nova chamada: assertEquals(3, bb2.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result119 + " <bb2.columnCount()>")
chamada antiga: assertTrue(bb2.columnNames().contains("OBP"))
nova chamada: assertTrue(bb2.columnNames().contains("OBP"), "Era esperado verdadeiro, mas " + result120 + " <bb2.columnNames().contains('OBP')> é falso")
chamada antiga: assertTrue(bb2.columnNames().contains("SLG"))
nova chamada: assertTrue(bb2.columnNames().contains("SLG"), "Era esperado verdadeiro, mas " + result121 + " <bb2.columnNames().contains('SLG')> é falso")
chamada antiga: assertTrue(bb2.columnNames().contains("BA"))
nova chamada: assertTrue(bb2.columnNames().contains("BA"), "Era esperado verdadeiro, mas " + result122 + " <bb2.columnNames().contains('BA')> é falso")
chamada antiga: assertEquals(baseball.rowCount(), bb2.rowCount())
nova chamada: assertEquals(baseball.rowCount(), bb2.rowCount(), "Era esperado valores iguais, mas " + result123 + " <baseball.rowCount()> é diferente de " + result124 + " <bb2.rowCount()>")
chamada antiga: assertEquals(robereries.columnCount(), table.columnCount())
nova chamada: assertEquals(robereries.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result125 + " <robereries.columnCount()> é diferente de " + result126 + " <table.columnCount()>")
chamada antiga: assertEquals(robereries.rowCount(), table.rowCount())
nova chamada: assertEquals(robereries.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result127 + " <robereries.rowCount()> é diferente de " + result128 + " <table.rowCount()>")
chamada antiga: assertEquals(sacramento.columnCount(), table.columnCount())
nova chamada: assertEquals(sacramento.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result129 + " <sacramento.columnCount()> é diferente de " + result130 + " <table.columnCount()>")
chamada antiga: assertEquals(sacramento.rowCount(), table.rowCount())
nova chamada: assertEquals(sacramento.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result131 + " <sacramento.rowCount()> é diferente de " + result132 + " <table.rowCount()>")
chamada antiga: assertEquals(wines.columnCount(), table.columnCount())
nova chamada: assertEquals(wines.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result133 + " <wines.columnCount()> é diferente de " + result134 + " <table.columnCount()>")
chamada antiga: assertEquals(wines.rowCount(), table.rowCount())
nova chamada: assertEquals(wines.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result135 + " <wines.rowCount()> é diferente de " + result136 + " <table.rowCount()>")
chamada antiga: assertEquals(wines.stringColumn("name").getDictionary(), table.stringColumn("name").getDictionary())
nova chamada: assertEquals(wines.stringColumn("name").getDictionary(), table.stringColumn("name").getDictionary(), "Era esperado valores iguais, mas " + result137 + " <wines.stringColumn('name').getDictionary()> é diferente de " + result138 + " <table.stringColumn('name').getDictionary()>")
chamada antiga: assertEquals(wines.stringColumn("name").getDictionary(), table1.stringColumn("name").getDictionary())
nova chamada: assertEquals(wines.stringColumn("name").getDictionary(), table1.stringColumn("name").getDictionary(), "Era esperado valores iguais, mas " + result139 + " <wines.stringColumn('name').getDictionary()> é diferente de " + result140 + " <table1.stringColumn('name').getDictionary()>")
chamada antiga: assertEquals(wines.columnCount(), table.columnCount())
nova chamada: assertEquals(wines.columnCount(), table.columnCount(), "Era esperado valores iguais, mas " + result141 + " <wines.columnCount()> é diferente de " + result142 + " <table.columnCount()>")
chamada antiga: assertEquals(wines.rowCount(), table.rowCount())
nova chamada: assertEquals(wines.rowCount(), table.rowCount(), "Era esperado valores iguais, mas " + result143 + " <wines.rowCount()> é diferente de " + result144 + " <table.rowCount()>")
chamada antiga: assertEquals(wines.stringColumn("index2").getDictionary(), table.stringColumn("index2").getDictionary())
nova chamada: assertEquals(wines.stringColumn("index2").getDictionary(), table.stringColumn("index2").getDictionary(), "Era esperado valores iguais, mas " + result145 + " <wines.stringColumn('index2').getDictionary()> é diferente de " + result146 + " <table.stringColumn('index2').getDictionary()>")
chamada antiga: assertEquals(wines.stringColumn("index1").getDictionary(), table1.stringColumn("index1").getDictionary())
nova chamada: assertEquals(wines.stringColumn("index1").getDictionary(), table1.stringColumn("index1").getDictionary(), "Era esperado valores iguais, mas " + result147 + " <wines.stringColumn('index1').getDictionary()> é diferente de " + result148 + " <table1.stringColumn('index1').getDictionary()>")
chamada antiga: assertEquals(wines.stringColumn("index2").getDictionary(), table1.stringColumn("index2").getDictionary())
nova chamada: assertEquals(wines.stringColumn("index2").getDictionary(), table1.stringColumn("index2").getDictionary(), "Era esperado valores iguais, mas " + result149 + " <wines.stringColumn('index2').getDictionary()> é diferente de " + result150 + " <table1.stringColumn('index2').getDictionary()>")
chamada antiga: assertEquals(10001, options.getThreadPoolSize())
nova chamada: assertEquals(10001, options.getThreadPoolSize(), "Era esperado valores iguais, mas  10001 é diferente de " + result151 + " <options.getThreadPoolSize()>")
chamada antiga: assertEquals(nameList, options.getSelectedColumns())
nova chamada: assertEquals(nameList, options.getSelectedColumns(), "Era esperado valores iguais, mas  nameList é diferente de " + result152 + " <options.getSelectedColumns()>")
chamada antiga: assertEquals(nameList, options.getSelectedColumns())
nova chamada: assertEquals(nameList, options.getSelectedColumns(), "Era esperado valores iguais, mas  nameList é diferente de " + result153 + " <options.getSelectedColumns()>")
chamada antiga: assertEquals(4, joined.columnCount())
nova chamada: assertEquals(4, joined.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result154 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result155 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.columnCount())
nova chamada: assertEquals(4, joined.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result156 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result157 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.columnCount())
nova chamada: assertEquals(4, joined.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result158 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result159 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result160 + " <joined.columnCount()>")
chamada antiga: assertEquals(3, joined.rowCount())
nova chamada: assertEquals(3, joined.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result161 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.column("ID").size())
nova chamada: assertEquals(3, joined.column("ID").size(), "Era esperado valores iguais, mas  3 é diferente de " + result162 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result163 + " <joined.columnCount()>")
chamada antiga: assertEquals(3, joined.rowCount())
nova chamada: assertEquals(3, joined.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result164 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result165 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result166 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result167 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result168 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result169 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result170 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result171 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result172 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result173 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result174 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result175 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result176 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result177 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result178 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result179 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result180 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result181 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result182 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result183 + " <joined.column('ID').size()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name", "Cat Name")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name", "Cat Name")), "Era esperado verdadeiro, mas " + result184 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Dog Name', 'Cat Name'))> é falso")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result185 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result186 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(0, joined.column("ID").countMissing())
nova chamada: assertEquals(0, joined.column("ID").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result187 + " <joined.column('ID').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Name").size())
nova chamada: assertEquals(4, joined.column("Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result188 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(3, joined.column("Name").countMissing())
nova chamada: assertEquals(3, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result189 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Dog Name").size())
nova chamada: assertEquals(4, joined.column("Dog Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result190 + " <joined.column('Dog Name').size()>")
chamada antiga: assertEquals(3, joined.column("Dog Name").countMissing())
nova chamada: assertEquals(3, joined.column("Dog Name").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result191 + " <joined.column('Dog Name').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Cat Name").size())
nova chamada: assertEquals(4, joined.column("Cat Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result192 + " <joined.column('Cat Name').size()>")
chamada antiga: assertEquals(0, joined.column("Cat Name").countMissing())
nova chamada: assertEquals(0, joined.column("Cat Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result193 + " <joined.column('Cat Name').countMissing()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Dog Name")), "Era esperado verdadeiro, mas " + result194 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Dog Name'))> é falso")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result195 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result196 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(0, joined.column("ID").countMissing())
nova chamada: assertEquals(0, joined.column("ID").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result197 + " <joined.column('ID').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Dog Name").size())
nova chamada: assertEquals(4, joined.column("Dog Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result198 + " <joined.column('Dog Name').size()>")
chamada antiga: assertEquals(0, joined.column("Dog Name").countMissing())
nova chamada: assertEquals(0, joined.column("Dog Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result199 + " <joined.column('Dog Name').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Name").size())
nova chamada: assertEquals(4, joined.column("Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result200 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(1, joined.column("Name").countMissing())
nova chamada: assertEquals(1, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result201 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result202 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result203 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result204 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result205 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result206 + " <joined.rowCount()>")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result207 + " <joined.column('ID').size()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Dog Name", "Name", "Cat Name")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Dog Name", "Name", "Cat Name")), "Era esperado verdadeiro, mas " + result208 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Dog Name', 'Name', 'Cat Name'))> é falso")
chamada antiga: assertEquals(4, joined.column("ID").size())
nova chamada: assertEquals(4, joined.column("ID").size(), "Era esperado valores iguais, mas  4 é diferente de " + result209 + " <joined.column('ID').size()>")
chamada antiga: assertEquals(4, joined.column("Dog Name").size())
nova chamada: assertEquals(4, joined.column("Dog Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result210 + " <joined.column('Dog Name').size()>")
chamada antiga: assertEquals(0, joined.column("Dog Name").countMissing())
nova chamada: assertEquals(0, joined.column("Dog Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result211 + " <joined.column('Dog Name').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Name").size())
nova chamada: assertEquals(4, joined.column("Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result212 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(1, joined.column("Name").countMissing())
nova chamada: assertEquals(1, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result213 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(4, joined.column("Cat Name").size())
nova chamada: assertEquals(4, joined.column("Cat Name").size(), "Era esperado valores iguais, mas  4 é diferente de " + result214 + " <joined.column('Cat Name').size()>")
chamada antiga: assertEquals(3, joined.column("Cat Name").countMissing())
nova chamada: assertEquals(3, joined.column("Cat Name").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result215 + " <joined.column('Cat Name').countMissing()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result216 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result217 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result218 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result219 + " <joined.rowCount()>")
chamada antiga: assertEquals(1, joined.columnCount())
nova chamada: assertEquals(1, joined.columnCount(), "Era esperado valores iguais, mas  1 é diferente de " + result220 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result221 + " <joined.rowCount()>")
chamada antiga: assertEquals(2, joined.columnCount())
nova chamada: assertEquals(2, joined.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result222 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result223 + " <joined.rowCount()>")
chamada antiga: assertEquals(2, joined.columnCount())
nova chamada: assertEquals(2, joined.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result224 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result225 + " <joined.columnCount()>")
chamada antiga: assertEquals(32, joined.rowCount())
nova chamada: assertEquals(32, joined.rowCount(), "Era esperado valores iguais, mas  32 é diferente de " + result226 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result227 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result228 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.column("Date").size())
nova chamada: assertEquals(6, joined.column("Date").size(), "Era esperado valores iguais, mas  6 é diferente de " + result229 + " <joined.column('Date').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result230 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result231 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result232 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result233 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.column("Animal").size())
nova chamada: assertEquals(6, joined.column("Animal").size(), "Era esperado valores iguais, mas  6 é diferente de " + result234 + " <joined.column('Animal').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result235 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result236 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result237 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result238 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result239 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result240 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.column("Animal").size())
nova chamada: assertEquals(6, joined.column("Animal").size(), "Era esperado valores iguais, mas  6 é diferente de " + result241 + " <joined.column('Animal').size()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result242 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result243 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.column("Animal").size())
nova chamada: assertEquals(8, joined.column("Animal").size(), "Era esperado valores iguais, mas  8 é diferente de " + result244 + " <joined.column('Animal').size()>")
chamada antiga: assertEquals(0, joined.column("Animal").countMissing())
nova chamada: assertEquals(0, joined.column("Animal").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result245 + " <joined.column('Animal').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Name").size())
nova chamada: assertEquals(8, joined.column("Name").size(), "Era esperado valores iguais, mas  8 é diferente de " + result246 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(2, joined.column("Name").countMissing())
nova chamada: assertEquals(2, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result247 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Feed").size())
nova chamada: assertEquals(8, joined.column("Feed").size(), "Era esperado valores iguais, mas  8 é diferente de " + result248 + " <joined.column('Feed').size()>")
chamada antiga: assertEquals(2, joined.column("Feed").countMissing())
nova chamada: assertEquals(2, joined.column("Feed").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result249 + " <joined.column('Feed').countMissing()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result250 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result251 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.column("Animal").size())
nova chamada: assertEquals(8, joined.column("Animal").size(), "Era esperado valores iguais, mas  8 é diferente de " + result252 + " <joined.column('Animal').size()>")
chamada antiga: assertEquals(0, joined.column("Animal").countMissing())
nova chamada: assertEquals(0, joined.column("Animal").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result253 + " <joined.column('Animal').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Name").size())
nova chamada: assertEquals(8, joined.column("Name").size(), "Era esperado valores iguais, mas  8 é diferente de " + result254 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(2, joined.column("Name").countMissing())
nova chamada: assertEquals(2, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result255 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Feed").size())
nova chamada: assertEquals(8, joined.column("Feed").size(), "Era esperado valores iguais, mas  8 é diferente de " + result256 + " <joined.column('Feed').size()>")
chamada antiga: assertEquals(2, joined.column("Feed").countMissing())
nova chamada: assertEquals(2, joined.column("Feed").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result257 + " <joined.column('Feed').countMissing()>")
chamada antiga: assertEquals(2, joined.columnCount())
nova chamada: assertEquals(2, joined.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result258 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result259 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result260 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result261 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.column("Animal").size())
nova chamada: assertEquals(8, joined.column("Animal").size(), "Era esperado valores iguais, mas  8 é diferente de " + result262 + " <joined.column('Animal').size()>")
chamada antiga: assertEquals(0, joined.column("Animal").countMissing())
nova chamada: assertEquals(0, joined.column("Animal").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result263 + " <joined.column('Animal').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Name").size())
nova chamada: assertEquals(8, joined.column("Name").size(), "Era esperado valores iguais, mas  8 é diferente de " + result264 + " <joined.column('Name').size()>")
chamada antiga: assertEquals(2, joined.column("Name").countMissing())
nova chamada: assertEquals(2, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result265 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(8, joined.column("Feed").size())
nova chamada: assertEquals(8, joined.column("Feed").size(), "Era esperado valores iguais, mas  8 é diferente de " + result266 + " <joined.column('Feed').size()>")
chamada antiga: assertEquals(2, joined.column("Feed").countMissing())
nova chamada: assertEquals(2, joined.column("Feed").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result267 + " <joined.column('Feed').countMissing()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result268 + " <joined.columnCount()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")), "Era esperado verdadeiro, mas " + result269 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Price', 'T2.ID', 'T2.Price', 'T3.ID', 'T3.Price'))> é falso")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result270 + " <joined.rowCount()>")
chamada antiga: assertEquals(0, joined.column("ID").countMissing())
nova chamada: assertEquals(0, joined.column("ID").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result271 + " <joined.column('ID').countMissing()>")
chamada antiga: assertEquals(0, joined.column("Name").countMissing())
nova chamada: assertEquals(0, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result272 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(0, joined.column("Price").countMissing())
nova chamada: assertEquals(0, joined.column("Price").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result273 + " <joined.column('Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.ID").size())
nova chamada: assertEquals(6, joined.column("T2.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result274 + " <joined.column('T2.ID').size()>")
chamada antiga: assertEquals(2, joined.column("T2.ID").countMissing())
nova chamada: assertEquals(2, joined.column("T2.ID").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result275 + " <joined.column('T2.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.Price").size())
nova chamada: assertEquals(6, joined.column("T2.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result276 + " <joined.column('T2.Price').size()>")
chamada antiga: assertEquals(2, joined.column("T2.Price").countMissing())
nova chamada: assertEquals(2, joined.column("T2.Price").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result277 + " <joined.column('T2.Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.ID").size())
nova chamada: assertEquals(6, joined.column("T3.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result278 + " <joined.column('T3.ID').size()>")
chamada antiga: assertEquals(3, joined.column("T3.ID").countMissing())
nova chamada: assertEquals(3, joined.column("T3.ID").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result279 + " <joined.column('T3.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.Price").size())
nova chamada: assertEquals(6, joined.column("T3.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result280 + " <joined.column('T3.Price').size()>")
chamada antiga: assertEquals(3, joined.column("T3.Price").countMissing())
nova chamada: assertEquals(3, joined.column("T3.Price").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result281 + " <joined.column('T3.Price').countMissing()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result282 + " <joined.columnCount()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")), "Era esperado verdadeiro, mas " + result283 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Price', 'T2.ID', 'T2.Price', 'T3.ID', 'T3.Price'))> é falso")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result284 + " <joined.rowCount()>")
chamada antiga: assertEquals(3, joined.column("ID").countMissing())
nova chamada: assertEquals(3, joined.column("ID").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result285 + " <joined.column('ID').countMissing()>")
chamada antiga: assertEquals(0, joined.column("Name").countMissing())
nova chamada: assertEquals(0, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result286 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(3, joined.column("Price").countMissing())
nova chamada: assertEquals(3, joined.column("Price").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result287 + " <joined.column('Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.ID").size())
nova chamada: assertEquals(6, joined.column("T2.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result288 + " <joined.column('T2.ID').size()>")
chamada antiga: assertEquals(2, joined.column("T2.ID").countMissing())
nova chamada: assertEquals(2, joined.column("T2.ID").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result289 + " <joined.column('T2.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.Price").size())
nova chamada: assertEquals(6, joined.column("T2.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result290 + " <joined.column('T2.Price').size()>")
chamada antiga: assertEquals(2, joined.column("T2.Price").countMissing())
nova chamada: assertEquals(2, joined.column("T2.Price").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result291 + " <joined.column('T2.Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.ID").size())
nova chamada: assertEquals(6, joined.column("T3.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result292 + " <joined.column('T3.ID').size()>")
chamada antiga: assertEquals(0, joined.column("T3.ID").countMissing())
nova chamada: assertEquals(0, joined.column("T3.ID").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result293 + " <joined.column('T3.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.Price").size())
nova chamada: assertEquals(6, joined.column("T3.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result294 + " <joined.column('T3.Price').size()>")
chamada antiga: assertEquals(0, joined.column("T3.Price").countMissing())
nova chamada: assertEquals(0, joined.column("T3.Price").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result295 + " <joined.column('T3.Price').countMissing()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result296 + " <joined.columnCount()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")), "Era esperado verdadeiro, mas " + result297 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Price', 'T2.ID', 'T2.Price', 'T3.ID', 'T3.Price'))> é falso")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result298 + " <joined.rowCount()>")
chamada antiga: assertEquals(2, joined.column("ID").countMissing())
nova chamada: assertEquals(2, joined.column("ID").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result299 + " <joined.column('ID').countMissing()>")
chamada antiga: assertEquals(0, joined.column("Name").countMissing())
nova chamada: assertEquals(0, joined.column("Name").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result300 + " <joined.column('Name').countMissing()>")
chamada antiga: assertEquals(2, joined.column("Price").countMissing())
nova chamada: assertEquals(2, joined.column("Price").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result301 + " <joined.column('Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.ID").size())
nova chamada: assertEquals(6, joined.column("T2.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result302 + " <joined.column('T2.ID').size()>")
chamada antiga: assertEquals(3, joined.column("T2.ID").countMissing())
nova chamada: assertEquals(3, joined.column("T2.ID").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result303 + " <joined.column('T2.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T2.Price").size())
nova chamada: assertEquals(6, joined.column("T2.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result304 + " <joined.column('T2.Price').size()>")
chamada antiga: assertEquals(3, joined.column("T2.Price").countMissing())
nova chamada: assertEquals(3, joined.column("T2.Price").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result305 + " <joined.column('T2.Price').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.ID").size())
nova chamada: assertEquals(6, joined.column("T3.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result306 + " <joined.column('T3.ID').size()>")
chamada antiga: assertEquals(0, joined.column("T3.ID").countMissing())
nova chamada: assertEquals(0, joined.column("T3.ID").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result307 + " <joined.column('T3.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.Price").size())
nova chamada: assertEquals(6, joined.column("T3.Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result308 + " <joined.column('T3.Price').size()>")
chamada antiga: assertEquals(0, joined.column("T3.Price").countMissing())
nova chamada: assertEquals(0, joined.column("T3.Price").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result309 + " <joined.column('T3.Price').countMissing()>")
chamada antiga: assertEquals(16, joined.columnCount())
nova chamada: assertEquals(16, joined.columnCount(), "Era esperado valores iguais, mas  16 é diferente de " + result310 + " <joined.columnCount()>")
chamada antiga: assertEquals(14, joined.rowCount())
nova chamada: assertEquals(14, joined.rowCount(), "Era esperado valores iguais, mas  14 é diferente de " + result311 + " <joined.rowCount()>")
chamada antiga: assertEquals(originalColumns, newColumns)
nova chamada: assertEquals(originalColumns, newColumns, "Era esperado valores iguais, mas  originalColumns é diferente de " + " newColumns")
chamada antiga: assertEquals(16, joined.columnCount())
nova chamada: assertEquals(16, joined.columnCount(), "Era esperado valores iguais, mas  16 é diferente de " + result312 + " <joined.columnCount()>")
chamada antiga: assertEquals(14, joined.rowCount())
nova chamada: assertEquals(14, joined.rowCount(), "Era esperado valores iguais, mas  14 é diferente de " + result313 + " <joined.rowCount()>")
chamada antiga: assertEquals(24, joined.columnCount())
nova chamada: assertEquals(24, joined.columnCount(), "Era esperado valores iguais, mas  24 é diferente de " + result314 + " <joined.columnCount()>")
chamada antiga: assertEquals(14, joined.rowCount())
nova chamada: assertEquals(14, joined.rowCount(), "Era esperado valores iguais, mas  14 é diferente de " + result315 + " <joined.rowCount()>")
chamada antiga: assertEquals(30, joined.columnCount())
nova chamada: assertEquals(30, joined.columnCount(), "Era esperado valores iguais, mas  30 é diferente de " + result316 + " <joined.columnCount()>")
chamada antiga: assertEquals(14, joined.rowCount())
nova chamada: assertEquals(14, joined.rowCount(), "Era esperado valores iguais, mas  14 é diferente de " + result317 + " <joined.rowCount()>")
chamada antiga: assertEquals(30, joined.columnCount())
nova chamada: assertEquals(30, joined.columnCount(), "Era esperado valores iguais, mas  30 é diferente de " + result318 + " <joined.columnCount()>")
chamada antiga: assertEquals(28, joined.rowCount())
nova chamada: assertEquals(28, joined.rowCount(), "Era esperado valores iguais, mas  28 é diferente de " + result319 + " <joined.rowCount()>")
chamada antiga: assertEquals(20, joined.columnCount())
nova chamada: assertEquals(20, joined.columnCount(), "Era esperado valores iguais, mas  20 é diferente de " + result320 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result321 + " <joined.rowCount()>")
chamada antiga: assertEquals(20, joined.columnCount())
nova chamada: assertEquals(20, joined.columnCount(), "Era esperado valores iguais, mas  20 é diferente de " + result322 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result323 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result324 + " <joined.columnCount()>")
chamada antiga: assertEquals(3, joined.rowCount())
nova chamada: assertEquals(3, joined.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result325 + " <joined.rowCount()>")
chamada antiga: assertEquals(14, joined.columnCount())
nova chamada: assertEquals(14, joined.columnCount(), "Era esperado valores iguais, mas  14 é diferente de " + result326 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result327 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result328 + " <joined.columnCount()>")
chamada antiga: assertEquals(10, joined.rowCount())
nova chamada: assertEquals(10, joined.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result329 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.column("State").size())
nova chamada: assertEquals(10, joined.column("State").size(), "Era esperado valores iguais, mas  10 é diferente de " + result330 + " <joined.column('State').size()>")
chamada antiga: assertEquals(10, joined.column("Age").size())
nova chamada: assertEquals(10, joined.column("Age").size(), "Era esperado valores iguais, mas  10 é diferente de " + result331 + " <joined.column('Age').size()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result332 + " <joined.columnCount()>")
chamada antiga: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")))
nova chamada: assertTrue(joined.columnNames().containsAll(Arrays.asList("ID", "Name", "Price", "T2.ID", "T2.Price", "T3.ID", "T3.Price")), "Era esperado verdadeiro, mas " + result333 + " <joined.columnNames().containsAll(Arrays.asList('ID', 'Name', 'Price', 'T2.ID', 'T2.Price', 'T3.ID', 'T3.Price'))> é falso")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result334 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.column("Price").size())
nova chamada: assertEquals(6, joined.column("Price").size(), "Era esperado valores iguais, mas  6 é diferente de " + result335 + " <joined.column('Price').size()>")
chamada antiga: assertEquals(6, joined.column("T2.ID").size())
nova chamada: assertEquals(6, joined.column("T2.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result336 + " <joined.column('T2.ID').size()>")
chamada antiga: assertEquals(2, joined.column("T2.ID").countMissing())
nova chamada: assertEquals(2, joined.column("T2.ID").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result337 + " <joined.column('T2.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.column("T3.ID").size())
nova chamada: assertEquals(6, joined.column("T3.ID").size(), "Era esperado valores iguais, mas  6 é diferente de " + result338 + " <joined.column('T3.ID').size()>")
chamada antiga: assertEquals(3, joined.column("T3.ID").countMissing())
nova chamada: assertEquals(3, joined.column("T3.ID").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result339 + " <joined.column('T3.ID').countMissing()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result340 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result341 + " <joined.rowCount()>")
chamada antiga: assertEquals(2, joined.column("Bedrooms").size())
nova chamada: assertEquals(2, joined.column("Bedrooms").size(), "Era esperado valores iguais, mas  2 é diferente de " + result342 + " <joined.column('Bedrooms').size()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result343 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result344 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result345 + " <joined.columnCount()>")
chamada antiga: assertEquals(7, joined.rowCount())
nova chamada: assertEquals(7, joined.rowCount(), "Era esperado valores iguais, mas  7 é diferente de " + result346 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.column("Style").size())
nova chamada: assertEquals(7, joined.column("Style").size(), "Era esperado valores iguais, mas  7 é diferente de " + result347 + " <joined.column('Style').size()>")
chamada antiga: assertEquals(3, joined.column("Style").countMissing())
nova chamada: assertEquals(3, joined.column("Style").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result348 + " <joined.column('Style').countMissing()>")
chamada antiga: assertEquals(7, joined.column("Bedrooms").size())
nova chamada: assertEquals(7, joined.column("Bedrooms").size(), "Era esperado valores iguais, mas  7 é diferente de " + result349 + " <joined.column('Bedrooms').size()>")
chamada antiga: assertEquals(0, joined.column("Bedrooms").countMissing())
nova chamada: assertEquals(0, joined.column("Bedrooms").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result350 + " <joined.column('Bedrooms').countMissing()>")
chamada antiga: assertEquals(7, joined.column("BuildDate").size())
nova chamada: assertEquals(7, joined.column("BuildDate").size(), "Era esperado valores iguais, mas  7 é diferente de " + result351 + " <joined.column('BuildDate').size()>")
chamada antiga: assertEquals(3, joined.column("BuildDate").countMissing())
nova chamada: assertEquals(3, joined.column("BuildDate").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result352 + " <joined.column('BuildDate').countMissing()>")
chamada antiga: assertEquals(7, joined.column("Owner").size())
nova chamada: assertEquals(7, joined.column("Owner").size(), "Era esperado valores iguais, mas  7 é diferente de " + result353 + " <joined.column('Owner').size()>")
chamada antiga: assertEquals(0, joined.column("Owner").countMissing())
nova chamada: assertEquals(0, joined.column("Owner").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result354 + " <joined.column('Owner').countMissing()>")
chamada antiga: assertEquals(7, joined.column("Type").size())
nova chamada: assertEquals(7, joined.column("Type").size(), "Era esperado valores iguais, mas  7 é diferente de " + result355 + " <joined.column('Type').size()>")
chamada antiga: assertEquals(2, joined.column("Type").countMissing())
nova chamada: assertEquals(2, joined.column("Type").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result356 + " <joined.column('Type').countMissing()>")
chamada antiga: assertEquals(7, joined.column("SoldDate").size())
nova chamada: assertEquals(7, joined.column("SoldDate").size(), "Era esperado valores iguais, mas  7 é diferente de " + result357 + " <joined.column('SoldDate').size()>")
chamada antiga: assertEquals(2, joined.column("SoldDate").countMissing())
nova chamada: assertEquals(2, joined.column("SoldDate").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result358 + " <joined.column('SoldDate').countMissing()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result359 + " <joined.columnCount()>")
chamada antiga: assertEquals(11, joined.rowCount())
nova chamada: assertEquals(11, joined.rowCount(), "Era esperado valores iguais, mas  11 é diferente de " + result360 + " <joined.rowCount()>")
chamada antiga: assertEquals(11, joined.column("Bedrooms").size())
nova chamada: assertEquals(11, joined.column("Bedrooms").size(), "Era esperado valores iguais, mas  11 é diferente de " + result361 + " <joined.column('Bedrooms').size()>")
chamada antiga: assertEquals(0, joined.column("Bedrooms").countMissing())
nova chamada: assertEquals(0, joined.column("Bedrooms").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result362 + " <joined.column('Bedrooms').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Bedrooms").size())
nova chamada: assertEquals(11, joined.column("Bedrooms").size(), "Era esperado valores iguais, mas  11 é diferente de " + result363 + " <joined.column('Bedrooms').size()>")
chamada antiga: assertEquals(0, joined.column("Bedrooms").countMissing())
nova chamada: assertEquals(0, joined.column("Bedrooms").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result364 + " <joined.column('Bedrooms').countMissing()>")
chamada antiga: assertEquals(11, joined.column("BuildDate").size())
nova chamada: assertEquals(11, joined.column("BuildDate").size(), "Era esperado valores iguais, mas  11 é diferente de " + result365 + " <joined.column('BuildDate').size()>")
chamada antiga: assertEquals(3, joined.column("BuildDate").countMissing())
nova chamada: assertEquals(3, joined.column("BuildDate").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result366 + " <joined.column('BuildDate').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Owner").size())
nova chamada: assertEquals(11, joined.column("Owner").size(), "Era esperado valores iguais, mas  11 é diferente de " + result367 + " <joined.column('Owner').size()>")
chamada antiga: assertEquals(0, joined.column("Owner").countMissing())
nova chamada: assertEquals(0, joined.column("Owner").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result368 + " <joined.column('Owner').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Type").size())
nova chamada: assertEquals(11, joined.column("Type").size(), "Era esperado valores iguais, mas  11 é diferente de " + result369 + " <joined.column('Type').size()>")
chamada antiga: assertEquals(3, joined.column("Type").countMissing())
nova chamada: assertEquals(3, joined.column("Type").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result370 + " <joined.column('Type').countMissing()>")
chamada antiga: assertEquals(11, joined.column("SoldDate").size())
nova chamada: assertEquals(11, joined.column("SoldDate").size(), "Era esperado valores iguais, mas  11 é diferente de " + result371 + " <joined.column('SoldDate').size()>")
chamada antiga: assertEquals(3, joined.column("SoldDate").countMissing())
nova chamada: assertEquals(3, joined.column("SoldDate").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result372 + " <joined.column('SoldDate').countMissing()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result373 + " <joined.columnCount()>")
chamada antiga: assertEquals(11, joined.rowCount())
nova chamada: assertEquals(11, joined.rowCount(), "Era esperado valores iguais, mas  11 é diferente de " + result374 + " <joined.rowCount()>")
chamada antiga: assertEquals(11, joined.column("Design").size())
nova chamada: assertEquals(11, joined.column("Design").size(), "Era esperado valores iguais, mas  11 é diferente de " + result375 + " <joined.column('Design').size()>")
chamada antiga: assertEquals(6, joined.column("Design").countMissing())
nova chamada: assertEquals(6, joined.column("Design").countMissing(), "Era esperado valores iguais, mas  6 é diferente de " + result376 + " <joined.column('Design').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Bedrooms").size())
nova chamada: assertEquals(11, joined.column("Bedrooms").size(), "Era esperado valores iguais, mas  11 é diferente de " + result377 + " <joined.column('Bedrooms').size()>")
chamada antiga: assertEquals(0, joined.column("Bedrooms").countMissing())
nova chamada: assertEquals(0, joined.column("Bedrooms").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result378 + " <joined.column('Bedrooms').countMissing()>")
chamada antiga: assertEquals(11, joined.column("SoldDate").size())
nova chamada: assertEquals(11, joined.column("SoldDate").size(), "Era esperado valores iguais, mas  11 é diferente de " + result379 + " <joined.column('SoldDate').size()>")
chamada antiga: assertEquals(0, joined.column("SoldDate").countMissing())
nova chamada: assertEquals(0, joined.column("SoldDate").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result380 + " <joined.column('SoldDate').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Owner").size())
nova chamada: assertEquals(11, joined.column("Owner").size(), "Era esperado valores iguais, mas  11 é diferente de " + result381 + " <joined.column('Owner').size()>")
chamada antiga: assertEquals(6, joined.column("Owner").countMissing())
nova chamada: assertEquals(6, joined.column("Owner").countMissing(), "Era esperado valores iguais, mas  6 é diferente de " + result382 + " <joined.column('Owner').countMissing()>")
chamada antiga: assertEquals(11, joined.column("Type").size())
nova chamada: assertEquals(11, joined.column("Type").size(), "Era esperado valores iguais, mas  11 é diferente de " + result383 + " <joined.column('Type').size()>")
chamada antiga: assertEquals(3, joined.column("Type").countMissing())
nova chamada: assertEquals(3, joined.column("Type").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result384 + " <joined.column('Type').countMissing()>")
chamada antiga: assertEquals(11, joined.column("T2.Owner").size())
nova chamada: assertEquals(11, joined.column("T2.Owner").size(), "Era esperado valores iguais, mas  11 é diferente de " + result385 + " <joined.column('T2.Owner').size()>")
chamada antiga: assertEquals(3, joined.column("T2.Owner").countMissing())
nova chamada: assertEquals(3, joined.column("T2.Owner").countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result386 + " <joined.column('T2.Owner').countMissing()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result387 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result388 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result389 + " <joined.columnCount()>")
chamada antiga: assertEquals(4, joined.rowCount())
nova chamada: assertEquals(4, joined.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result390 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.columnCount())
nova chamada: assertEquals(6, joined.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result391 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result392 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.columnCount())
nova chamada: assertEquals(5, joined.columnCount(), "Era esperado valores iguais, mas  5 é diferente de " + result393 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result394 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result395 + " <joined.columnCount()>")
chamada antiga: assertEquals(10, joined.rowCount())
nova chamada: assertEquals(10, joined.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result396 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result397 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result398 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result399 + " <joined.columnCount()>")
chamada antiga: assertEquals(10, joined.rowCount())
nova chamada: assertEquals(10, joined.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result400 + " <joined.rowCount()>")
chamada antiga: assertEquals(15, joined.columnCount())
nova chamada: assertEquals(15, joined.columnCount(), "Era esperado valores iguais, mas  15 é diferente de " + result401 + " <joined.columnCount()>")
chamada antiga: assertEquals(10, joined.rowCount())
nova chamada: assertEquals(10, joined.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result402 + " <joined.rowCount()>")
chamada antiga: assertEquals(9, joined.columnCount())
nova chamada: assertEquals(9, joined.columnCount(), "Era esperado valores iguais, mas  9 é diferente de " + result403 + " <joined.columnCount()>")
chamada antiga: assertEquals(18, joined.rowCount())
nova chamada: assertEquals(18, joined.rowCount(), "Era esperado valores iguais, mas  18 é diferente de " + result404 + " <joined.rowCount()>")
chamada antiga: assertEquals(9, joined.columnCount())
nova chamada: assertEquals(9, joined.columnCount(), "Era esperado valores iguais, mas  9 é diferente de " + result405 + " <joined.columnCount()>")
chamada antiga: assertEquals(18, joined.rowCount())
nova chamada: assertEquals(18, joined.rowCount(), "Era esperado valores iguais, mas  18 é diferente de " + result406 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result407 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result408 + " <joined.rowCount()>")
chamada antiga: assertEquals(14, joined.columnCount())
nova chamada: assertEquals(14, joined.columnCount(), "Era esperado valores iguais, mas  14 é diferente de " + result409 + " <joined.columnCount()>")
chamada antiga: assertEquals(18, joined.rowCount())
nova chamada: assertEquals(18, joined.rowCount(), "Era esperado valores iguais, mas  18 é diferente de " + result410 + " <joined.rowCount()>")
chamada antiga: assertEquals(11, joined.columnCount())
nova chamada: assertEquals(11, joined.columnCount(), "Era esperado valores iguais, mas  11 é diferente de " + result411 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result412 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result413 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result414 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result415 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result416 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result417 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result418 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result419 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result420 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result421 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result422 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result423 + " <joined.columnCount()>")
chamada antiga: assertEquals(3, joined.rowCount())
nova chamada: assertEquals(3, joined.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result424 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result425 + " <joined.columnCount()>")
chamada antiga: assertEquals(9, joined.rowCount())
nova chamada: assertEquals(9, joined.rowCount(), "Era esperado valores iguais, mas  9 é diferente de " + result426 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result427 + " <joined.columnCount()>")
chamada antiga: assertEquals(9, joined.rowCount())
nova chamada: assertEquals(9, joined.rowCount(), "Era esperado valores iguais, mas  9 é diferente de " + result428 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result429 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result430 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result431 + " <joined.columnCount()>")
chamada antiga: assertEquals(12, joined.rowCount())
nova chamada: assertEquals(12, joined.rowCount(), "Era esperado valores iguais, mas  12 é diferente de " + result432 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result433 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result434 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result435 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result436 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result437 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result438 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result439 + " <joined.columnCount()>")
chamada antiga: assertEquals(3, joined.rowCount())
nova chamada: assertEquals(3, joined.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result440 + " <joined.rowCount()>")
chamada antiga: assertEquals(7, joined.columnCount())
nova chamada: assertEquals(7, joined.columnCount(), "Era esperado valores iguais, mas  7 é diferente de " + result441 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result442 + " <joined.rowCount()>")
chamada antiga: assertEquals(8, joined.columnCount())
nova chamada: assertEquals(8, joined.columnCount(), "Era esperado valores iguais, mas  8 é diferente de " + result443 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result444 + " <joined.rowCount()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result445 + " <joined.columnCount()>")
chamada antiga: assertEquals(2, joined.rowCount())
nova chamada: assertEquals(2, joined.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result446 + " <joined.rowCount()>")
chamada antiga: assertEquals(9, joined.columnCount())
nova chamada: assertEquals(9, joined.columnCount(), "Era esperado valores iguais, mas  9 é diferente de " + result447 + " <joined.columnCount()>")
chamada antiga: assertEquals(1, joined.rowCount())
nova chamada: assertEquals(1, joined.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result448 + " <joined.rowCount()>")
chamada antiga: assertEquals(9, joined.columnCount())
nova chamada: assertEquals(9, joined.columnCount(), "Era esperado valores iguais, mas  9 é diferente de " + result449 + " <joined.columnCount()>")
chamada antiga: assertEquals(6, joined.rowCount())
nova chamada: assertEquals(6, joined.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result450 + " <joined.rowCount()>")
chamada antiga: assertEquals(6, joined.column("TeamName").size())
nova chamada: assertEquals(6, joined.column("TeamName").size(), "Era esperado valores iguais, mas  6 é diferente de " + result451 + " <joined.column('TeamName').size()>")
chamada antiga: assertEquals(2, joined.column("TeamName").countMissing())
nova chamada: assertEquals(2, joined.column("TeamName").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result452 + " <joined.column('TeamName').countMissing()>")
chamada antiga: assertEquals(6, joined.column("PlayDateTime").size())
nova chamada: assertEquals(6, joined.column("PlayDateTime").size(), "Era esperado valores iguais, mas  6 é diferente de " + result453 + " <joined.column('PlayDateTime').size()>")
chamada antiga: assertEquals(0, joined.column("PlayDateTime").countMissing())
nova chamada: assertEquals(0, joined.column("PlayDateTime").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result454 + " <joined.column('PlayDateTime').countMissing()>")
chamada antiga: assertEquals(6, joined.column("Location").size())
nova chamada: assertEquals(6, joined.column("Location").size(), "Era esperado valores iguais, mas  6 é diferente de " + result455 + " <joined.column('Location').size()>")
chamada antiga: assertEquals(2, joined.column("Location").countMissing())
nova chamada: assertEquals(2, joined.column("Location").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result456 + " <joined.column('Location').countMissing()>")
chamada antiga: assertEquals(6, joined.column("HomeGame").size())
nova chamada: assertEquals(6, joined.column("HomeGame").size(), "Era esperado valores iguais, mas  6 é diferente de " + result457 + " <joined.column('HomeGame').size()>")
chamada antiga: assertEquals(2, joined.column("HomeGame").countMissing())
nova chamada: assertEquals(2, joined.column("HomeGame").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result458 + " <joined.column('HomeGame').countMissing()>")
chamada antiga: assertEquals(6, joined.column("SeasonRevenue").size())
nova chamada: assertEquals(6, joined.column("SeasonRevenue").size(), "Era esperado valores iguais, mas  6 é diferente de " + result459 + " <joined.column('SeasonRevenue').size()>")
chamada antiga: assertEquals(0, joined.column("SeasonRevenue").countMissing())
nova chamada: assertEquals(0, joined.column("SeasonRevenue").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result460 + " <joined.column('SeasonRevenue').countMissing()>")
chamada antiga: assertEquals(6, joined.column("Mascot").size())
nova chamada: assertEquals(6, joined.column("Mascot").size(), "Era esperado valores iguais, mas  6 é diferente de " + result461 + " <joined.column('Mascot').size()>")
chamada antiga: assertEquals(2, joined.column("Mascot").countMissing())
nova chamada: assertEquals(2, joined.column("Mascot").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result462 + " <joined.column('Mascot').countMissing()>")
chamada antiga: assertEquals(6, joined.column("Place").size())
nova chamada: assertEquals(6, joined.column("Place").size(), "Era esperado valores iguais, mas  6 é diferente de " + result463 + " <joined.column('Place').size()>")
chamada antiga: assertEquals(2, joined.column("Place").countMissing())
nova chamada: assertEquals(2, joined.column("Place").countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result464 + " <joined.column('Place').countMissing()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result465 + " <joined.columnCount()>")
chamada antiga: assertEquals(5, joined.rowCount())
nova chamada: assertEquals(5, joined.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result466 + " <joined.rowCount()>")
chamada antiga: assertEquals(5, joined.column("TeamName").size())
nova chamada: assertEquals(5, joined.column("TeamName").size(), "Era esperado valores iguais, mas  5 é diferente de " + result467 + " <joined.column('TeamName').size()>")
chamada antiga: assertEquals(1, joined.column("TeamName").countMissing())
nova chamada: assertEquals(1, joined.column("TeamName").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result468 + " <joined.column('TeamName').countMissing()>")
chamada antiga: assertEquals(5, joined.column("PlayDateTime").size())
nova chamada: assertEquals(5, joined.column("PlayDateTime").size(), "Era esperado valores iguais, mas  5 é diferente de " + result469 + " <joined.column('PlayDateTime').size()>")
chamada antiga: assertEquals(1, joined.column("PlayDateTime").countMissing())
nova chamada: assertEquals(1, joined.column("PlayDateTime").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result470 + " <joined.column('PlayDateTime').countMissing()>")
chamada antiga: assertEquals(5, joined.column("Location").size())
nova chamada: assertEquals(5, joined.column("Location").size(), "Era esperado valores iguais, mas  5 é diferente de " + result471 + " <joined.column('Location').size()>")
chamada antiga: assertEquals(1, joined.column("Location").countMissing())
nova chamada: assertEquals(1, joined.column("Location").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result472 + " <joined.column('Location').countMissing()>")
chamada antiga: assertEquals(5, joined.column("HomeGame").size())
nova chamada: assertEquals(5, joined.column("HomeGame").size(), "Era esperado valores iguais, mas  5 é diferente de " + result473 + " <joined.column('HomeGame').size()>")
chamada antiga: assertEquals(1, joined.column("HomeGame").countMissing())
nova chamada: assertEquals(1, joined.column("HomeGame").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result474 + " <joined.column('HomeGame').countMissing()>")
chamada antiga: assertEquals(5, joined.column("SeasonRevenue").size())
nova chamada: assertEquals(5, joined.column("SeasonRevenue").size(), "Era esperado valores iguais, mas  5 é diferente de " + result475 + " <joined.column('SeasonRevenue').size()>")
chamada antiga: assertEquals(1, joined.column("SeasonRevenue").countMissing())
nova chamada: assertEquals(1, joined.column("SeasonRevenue").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result476 + " <joined.column('SeasonRevenue').countMissing()>")
chamada antiga: assertEquals(5, joined.column("AllTimeRevenue").size())
nova chamada: assertEquals(5, joined.column("AllTimeRevenue").size(), "Era esperado valores iguais, mas  5 é diferente de " + result477 + " <joined.column('AllTimeRevenue').size()>")
chamada antiga: assertEquals(0, joined.column("AllTimeRevenue").countMissing())
nova chamada: assertEquals(0, joined.column("AllTimeRevenue").countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result478 + " <joined.column('AllTimeRevenue').countMissing()>")
chamada antiga: assertEquals(5, joined.column("Mascot").size())
nova chamada: assertEquals(5, joined.column("Mascot").size(), "Era esperado valores iguais, mas  5 é diferente de " + result479 + " <joined.column('Mascot').size()>")
chamada antiga: assertEquals(1, joined.column("Mascot").countMissing())
nova chamada: assertEquals(1, joined.column("Mascot").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result480 + " <joined.column('Mascot').countMissing()>")
chamada antiga: assertEquals(5, joined.column("T2.PlayDateTime").size())
nova chamada: assertEquals(5, joined.column("T2.PlayDateTime").size(), "Era esperado valores iguais, mas  5 é diferente de " + result481 + " <joined.column('T2.PlayDateTime').size()>")
chamada antiga: assertEquals(1, joined.column("T2.PlayDateTime").countMissing())
nova chamada: assertEquals(1, joined.column("T2.PlayDateTime").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result482 + " <joined.column('T2.PlayDateTime').countMissing()>")
chamada antiga: assertEquals(5, joined.column("Place").size())
nova chamada: assertEquals(5, joined.column("Place").size(), "Era esperado valores iguais, mas  5 é diferente de " + result483 + " <joined.column('Place').size()>")
chamada antiga: assertEquals(1, joined.column("Place").countMissing())
nova chamada: assertEquals(1, joined.column("Place").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result484 + " <joined.column('Place').countMissing()>")
chamada antiga: assertEquals(5, joined.column("T2.SeasonRevenue").size())
nova chamada: assertEquals(5, joined.column("T2.SeasonRevenue").size(), "Era esperado valores iguais, mas  5 é diferente de " + result485 + " <joined.column('T2.SeasonRevenue').size()>")
chamada antiga: assertEquals(1, joined.column("T2.SeasonRevenue").countMissing())
nova chamada: assertEquals(1, joined.column("T2.SeasonRevenue").countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result486 + " <joined.column('T2.SeasonRevenue').countMissing()>")
chamada antiga: assertEquals(10, joined.columnCount())
nova chamada: assertEquals(10, joined.columnCount(), "Era esperado valores iguais, mas  10 é diferente de " + result487 + " <joined.columnCount()>")
chamada antiga: assertEquals(8, joined.rowCount())
nova chamada: assertEquals(8, joined.rowCount(), "Era esperado valores iguais, mas  8 é diferente de " + result488 + " <joined.rowCount()>")
chamada antiga: assertEquals(0, joined.rowCount())
nova chamada: assertEquals(0, joined.rowCount(), "Era esperado valores iguais, mas  0 é diferente de " + result489 + " <joined.rowCount()>")
chamada antiga: assertEquals(0, joined.rowCount())
nova chamada: assertEquals(0, joined.rowCount(), "Era esperado valores iguais, mas  0 é diferente de " + result490 + " <joined.rowCount()>")
chamada antiga: assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").inner(orders))
nova chamada: assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").inner(orders), "Era esperado que o tempo de execução " + result491 + " <Duration.ofSeconds(1)> não fosse ultrapassado, mas foi")
chamada antiga: assertTimeout(Duration.ofSeconds(1), () -> orders.joinOn("customerId").leftOuter(customers))
nova chamada: assertTimeout(Duration.ofSeconds(1), () -> orders.joinOn("customerId").leftOuter(customers), "Era esperado que o tempo de execução " + result492 + " <Duration.ofSeconds(1)> não fosse ultrapassado, mas foi")
chamada antiga: assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").fullOuter(orders))
nova chamada: assertTimeout(Duration.ofSeconds(1), () -> customers.joinOn("customerId").fullOuter(orders), "Era esperado que o tempo de execução " + result493 + " <Duration.ofSeconds(1)> não fosse ultrapassado, mas foi")
chamada antiga: assertTrue(selection.contains(42))
nova chamada: assertTrue(selection.contains(42), "Era esperado verdadeiro, mas " + result494 + " <selection.contains(42)> é falso")
chamada antiga: assertTrue(selection.contains(53))
nova chamada: assertTrue(selection.contains(53), "Era esperado verdadeiro, mas " + result495 + " <selection.contains(53)> é falso")
chamada antiga: assertTrue(selection.contains(111))
nova chamada: assertTrue(selection.contains(111), "Era esperado verdadeiro, mas " + result496 + " <selection.contains(111)> é falso")
chamada antiga: assertFalse(selection.contains(43))
nova chamada: assertFalse(selection.contains(43), "Era esperado falso, mas " + result497 + " <selection.contains(43)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result498 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(122))
nova chamada: assertFalse(selection.contains(122), "Era esperado falso, mas " + result499 + " <selection.contains(122)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(42))
nova chamada: assertFalse(selection.contains(42), "Era esperado falso, mas " + result500 + " <selection.contains(42)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(43))
nova chamada: assertFalse(selection.contains(43), "Era esperado falso, mas " + result501 + " <selection.contains(43)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(52))
nova chamada: assertFalse(selection.contains(52), "Era esperado falso, mas " + result502 + " <selection.contains(52)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(53))
nova chamada: assertTrue(selection.contains(53), "Era esperado verdadeiro, mas " + result503 + " <selection.contains(53)> é falso")
chamada antiga: assertTrue(selection.contains(111))
nova chamada: assertTrue(selection.contains(111), "Era esperado verdadeiro, mas " + result504 + " <selection.contains(111)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result505 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(122))
nova chamada: assertTrue(selection.contains(122), "Era esperado verdadeiro, mas " + result506 + " <selection.contains(122)> é falso")
chamada antiga: assertTrue(selection.contains(42))
nova chamada: assertTrue(selection.contains(42), "Era esperado verdadeiro, mas " + result507 + " <selection.contains(42)> é falso")
chamada antiga: assertTrue(selection.contains(43))
nova chamada: assertTrue(selection.contains(43), "Era esperado verdadeiro, mas " + result508 + " <selection.contains(43)> é falso")
chamada antiga: assertTrue(selection.contains(52))
nova chamada: assertTrue(selection.contains(52), "Era esperado verdadeiro, mas " + result509 + " <selection.contains(52)> é falso")
chamada antiga: assertFalse(selection.contains(53))
nova chamada: assertFalse(selection.contains(53), "Era esperado falso, mas " + result510 + " <selection.contains(53)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(111))
nova chamada: assertFalse(selection.contains(111), "Era esperado falso, mas " + result511 + " <selection.contains(111)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result512 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(122))
nova chamada: assertFalse(selection.contains(122), "Era esperado falso, mas " + result513 + " <selection.contains(122)> é verdadeiro ")
chamada antiga: assertArrayEquals(expected, selection.toArray())
nova chamada: assertArrayEquals(expected, selection.toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result514 + " <selection.toArray()>")
chamada antiga: assertTrue(selection.contains(42))
nova chamada: assertTrue(selection.contains(42), "Era esperado verdadeiro, mas " + result515 + " <selection.contains(42)> é falso")
chamada antiga: assertFalse(selection.contains(43))
nova chamada: assertFalse(selection.contains(43), "Era esperado falso, mas " + result516 + " <selection.contains(43)> é verdadeiro ")
chamada antiga: assertTrue(selection.add(43).contains(43))
nova chamada: assertTrue(selection.add(43).contains(43), "Era esperado verdadeiro, mas " + result517 + " <selection.add(43).contains(43)> é falso")
chamada antiga: assertTrue(selection.contains(42))
nova chamada: assertTrue(selection.contains(42), "Era esperado verdadeiro, mas " + result518 + " <selection.contains(42)> é falso")
chamada antiga: assertFalse(selection.contains(43))
nova chamada: assertFalse(selection.contains(43), "Era esperado falso, mas " + result519 + " <selection.contains(43)> é verdadeiro ")
chamada antiga: assertTrue(selection.addRange(70, 80).contains(73))
nova chamada: assertTrue(selection.addRange(70, 80).contains(73), "Era esperado verdadeiro, mas " + result520 + " <selection.addRange(70, 80).contains(73)> é falso")
chamada antiga: assertTrue(selection.addRange(70, 80).contains(70))
nova chamada: assertTrue(selection.addRange(70, 80).contains(70), "Era esperado verdadeiro, mas " + result521 + " <selection.addRange(70, 80).contains(70)> é falso")
chamada antiga: assertTrue(selection.addRange(70, 80).contains(79))
nova chamada: assertTrue(selection.addRange(70, 80).contains(79), "Era esperado verdadeiro, mas " + result522 + " <selection.addRange(70, 80).contains(79)> é falso")
chamada antiga: assertFalse(selection.addRange(70, 80).contains(80))
nova chamada: assertFalse(selection.addRange(70, 80).contains(80), "Era esperado falso, mas " + result523 + " <selection.addRange(70, 80).contains(80)> é verdadeiro ")
chamada antiga: assertEquals(3, selection.size())
nova chamada: assertEquals(3, selection.size(), "Era esperado valores iguais, mas  3 é diferente de " + result524 + " <selection.size()>")
chamada antiga: assertEquals(1, selection3.size())
nova chamada: assertEquals(1, selection3.size(), "Era esperado valores iguais, mas  1 é diferente de " + result525 + " <selection3.size()>")
chamada antiga: assertEquals(53, selection3.get(0))
nova chamada: assertEquals(53, selection3.get(0), "Era esperado valores iguais, mas  53 é diferente de " + result526 + " <selection3.get(0)>")
chamada antiga: assertEquals(6, selection3.size())
nova chamada: assertEquals(6, selection3.size(), "Era esperado valores iguais, mas  6 é diferente de " + result527 + " <selection3.size()>")
chamada antiga: assertEquals(11, selection3.get(0))
nova chamada: assertEquals(11, selection3.get(0), "Era esperado valores iguais, mas  11 é diferente de " + result528 + " <selection3.get(0)>")
chamada antiga: assertEquals(42, selection3.get(1))
nova chamada: assertEquals(42, selection3.get(1), "Era esperado valores iguais, mas  42 é diferente de " + result529 + " <selection3.get(1)>")
chamada antiga: assertTrue(selection3.contains(53))
nova chamada: assertTrue(selection3.contains(53), "Era esperado verdadeiro, mas " + result530 + " <selection3.contains(53)> é falso")
chamada antiga: assertEquals(2, selection3.size())
nova chamada: assertEquals(2, selection3.size(), "Era esperado valores iguais, mas  2 é diferente de " + result531 + " <selection3.size()>")
chamada antiga: assertEquals(111, selection3.get(1))
nova chamada: assertEquals(111, selection3.get(1), "Era esperado valores iguais, mas  111 é diferente de " + result532 + " <selection3.get(1)>")
chamada antiga: assertEquals(42, selection3.get(0))
nova chamada: assertEquals(42, selection3.get(0), "Era esperado valores iguais, mas  42 é diferente de " + result533 + " <selection3.get(0)>")
chamada antiga: assertFalse(selection3.contains(53))
nova chamada: assertFalse(selection3.contains(53), "Era esperado falso, mas " + result534 + " <selection3.contains(53)> é verdadeiro ")
chamada antiga: assertTrue(selection.isEmpty())
nova chamada: assertTrue(selection.isEmpty(), "Era esperado verdadeiro, mas " + result535 + " <selection.isEmpty()> é falso")
chamada antiga: assertFalse(selection1.isEmpty())
nova chamada: assertFalse(selection1.isEmpty(), "Era esperado falso, mas " + result536 + " <selection1.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(selection1.isEmpty())
nova chamada: assertFalse(selection1.isEmpty(), "Era esperado falso, mas " + result537 + " <selection1.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(selection1.isEmpty())
nova chamada: assertTrue(selection1.isEmpty(), "Era esperado verdadeiro, mas " + result538 + " <selection1.isEmpty()> é falso")
chamada antiga: assertEquals(42, selection.get(0))
nova chamada: assertEquals(42, selection.get(0), "Era esperado valores iguais, mas  42 é diferente de " + result539 + " <selection.get(0)>")
chamada antiga: assertEquals(53, selection.get(1))
nova chamada: assertEquals(53, selection.get(1), "Era esperado valores iguais, mas  53 é diferente de " + result540 + " <selection.get(1)>")
chamada antiga: assertTrue(selection.contains(53))
nova chamada: assertTrue(selection.contains(53), "Era esperado verdadeiro, mas " + result541 + " <selection.contains(53)> é falso")
chamada antiga: assertFalse(selection.contains(53))
nova chamada: assertFalse(selection.contains(53), "Era esperado falso, mas " + result542 + " <selection.contains(53)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(111))
nova chamada: assertTrue(selection.contains(111), "Era esperado verdadeiro, mas " + result543 + " <selection.contains(111)> é falso")
chamada antiga: assertTrue(selection.contains(53))
nova chamada: assertTrue(selection.contains(53), "Era esperado verdadeiro, mas " + result544 + " <selection.contains(53)> é falso")
chamada antiga: assertTrue(selection.contains(42))
nova chamada: assertTrue(selection.contains(42), "Era esperado verdadeiro, mas " + result545 + " <selection.contains(42)> é falso")
chamada antiga: assertTrue(selection.contains(111))
nova chamada: assertTrue(selection.contains(111), "Era esperado verdadeiro, mas " + result546 + " <selection.contains(111)> é falso")
chamada antiga: assertFalse(selection.contains(53))
nova chamada: assertFalse(selection.contains(53), "Era esperado falso, mas " + result547 + " <selection.contains(53)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(42))
nova chamada: assertFalse(selection.contains(42), "Era esperado falso, mas " + result548 + " <selection.contains(42)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(111))
nova chamada: assertFalse(selection.contains(111), "Era esperado falso, mas " + result549 + " <selection.contains(111)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result550 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(110))
nova chamada: assertTrue(selection.contains(110), "Era esperado verdadeiro, mas " + result551 + " <selection.contains(110)> é falso")
chamada antiga: assertTrue(selection.contains(112))
nova chamada: assertTrue(selection.contains(112), "Era esperado verdadeiro, mas " + result552 + " <selection.contains(112)> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("Function: SUM Is not compatible with column type: STRING"))
nova chamada: assertTrue(thrown.getMessage().contains("Function: SUM Is not compatible with column type: STRING"), "Era esperado verdadeiro, mas " + result553 + " <thrown.getMessage().contains('Function: SUM Is not compatible with column type: STRING')> é falso")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(ImmutableList.of(1, 2, 2, 3, 4, 5, 6), result.intColumn("count").asList())
nova chamada: assertEquals(ImmutableList.of(1, 2, 2, 3, 4, 5, 6), result.intColumn("count").asList(), "Era esperado valores iguais, mas " + result554 + " <ImmutableList.of(1, 2, 2, 3, 4, 5, 6)> é diferente de " + result555 + " <result.intColumn('count').asList()>")
chamada antiga: assertArrayEquals(intSourceColumnAsDoubleArray("row_number"), result.intColumn("rowNumber").asDoubleArray())
nova chamada: assertArrayEquals(intSourceColumnAsDoubleArray("row_number"), result.intColumn("rowNumber").asDoubleArray(), "Era esperado arrays iguais, mas " + result556 + " <intSourceColumnAsDoubleArray('row_number')> é diferente de " + result557 + " <result.intColumn('rowNumber').asDoubleArray()>")
chamada antiga: assertArrayEquals(intSourceColumnAsDoubleArray("rank"), result.intColumn("rank").asDoubleArray())
nova chamada: assertArrayEquals(intSourceColumnAsDoubleArray("rank"), result.intColumn("rank").asDoubleArray(), "Era esperado arrays iguais, mas " + result558 + " <intSourceColumnAsDoubleArray('rank')> é diferente de " + result559 + " <result.intColumn('rank').asDoubleArray()>")
chamada antiga: assertArrayEquals(intSourceColumnAsDoubleArray("dense_rank"), result.intColumn("denseRank").asDoubleArray())
nova chamada: assertArrayEquals(intSourceColumnAsDoubleArray("dense_rank"), result.intColumn("denseRank").asDoubleArray(), "Era esperado arrays iguais, mas " + result560 + " <intSourceColumnAsDoubleArray('dense_rank')> é diferente de " + result561 + " <result.intColumn('denseRank').asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 }, result.intColumn("rowNumber").asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 }, result.intColumn("rowNumber").asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 } é diferente de " + result562 + " <result.intColumn('rowNumber').asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 4.0, 4.0, 4.0, 7.0 }, result.intColumn("rank").asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 4.0, 4.0, 4.0, 7.0 }, result.intColumn("rank").asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 2.0, 4.0, 4.0, 4.0, 7.0 } é diferente de " + result563 + " <result.intColumn('rank').asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0 }, result.intColumn("denseRank").asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0 }, result.intColumn("denseRank").asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0 } é diferente de " + result564 + " <result.intColumn('denseRank').asDoubleArray()>")
chamada antiga: assertEquals(ImmutableList.of("rowNumber", "rank", "denseRank"), result.columnNames())
nova chamada: assertEquals(ImmutableList.of("rowNumber", "rank", "denseRank"), result.columnNames(), "Era esperado valores iguais, mas " + result565 + " <ImmutableList.of('rowNumber', 'rank', 'denseRank')> é diferente de " + result566 + " <result.columnNames()>")
chamada antiga: assertEquals(WindowBoundTypes.UNBOUNDED_PRECEDING, frame.getLeftBoundType())
nova chamada: assertEquals(WindowBoundTypes.UNBOUNDED_PRECEDING, frame.getLeftBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.UNBOUNDED_PRECEDING é diferente de " + result567 + " <frame.getLeftBoundType()>")
chamada antiga: assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType())
nova chamada: assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.UNBOUNDED_FOLLOWING é diferente de " + result568 + " <frame.getRightBoundType()>")
chamada antiga: assertEquals(expectedString, frame.toSqlString())
nova chamada: assertEquals(expectedString, frame.toSqlString(), "Era esperado valores iguais, mas  expectedString é diferente de " + result569 + " <frame.toSqlString()>")
chamada antiga: assertEquals(WindowBoundTypes.PRECEDING, frame.getLeftBoundType())
nova chamada: assertEquals(WindowBoundTypes.PRECEDING, frame.getLeftBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.PRECEDING é diferente de " + result570 + " <frame.getLeftBoundType()>")
chamada antiga: assertEquals(-5, frame.getInitialLeftBound())
nova chamada: assertEquals(-5, frame.getInitialLeftBound(), "Era esperado valores iguais, mas  -5 é diferente de " + result571 + " <frame.getInitialLeftBound()>")
chamada antiga: assertEquals(WindowBoundTypes.PRECEDING, frame.getRightBoundType())
nova chamada: assertEquals(WindowBoundTypes.PRECEDING, frame.getRightBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.PRECEDING é diferente de " + result572 + " <frame.getRightBoundType()>")
chamada antiga: assertEquals(-2, frame.getInitialRightBound())
nova chamada: assertEquals(-2, frame.getInitialRightBound(), "Era esperado valores iguais, mas  -2 é diferente de " + result573 + " <frame.getInitialRightBound()>")
chamada antiga: assertEquals(expectedString, frame.toSqlString())
nova chamada: assertEquals(expectedString, frame.toSqlString(), "Era esperado valores iguais, mas  expectedString é diferente de " + result574 + " <frame.toSqlString()>")
chamada antiga: assertEquals(WindowBoundTypes.CURRENT_ROW, frame.getLeftBoundType())
nova chamada: assertEquals(WindowBoundTypes.CURRENT_ROW, frame.getLeftBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.CURRENT_ROW é diferente de " + result575 + " <frame.getLeftBoundType()>")
chamada antiga: assertEquals(0, frame.getInitialLeftBound())
nova chamada: assertEquals(0, frame.getInitialLeftBound(), "Era esperado valores iguais, mas  0 é diferente de " + result576 + " <frame.getInitialLeftBound()>")
chamada antiga: assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType())
nova chamada: assertEquals(WindowBoundTypes.UNBOUNDED_FOLLOWING, frame.getRightBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.UNBOUNDED_FOLLOWING é diferente de " + result577 + " <frame.getRightBoundType()>")
chamada antiga: assertEquals(0, frame.getInitialRightBound())
nova chamada: assertEquals(0, frame.getInitialRightBound(), "Era esperado valores iguais, mas  0 é diferente de " + result578 + " <frame.getInitialRightBound()>")
chamada antiga: assertEquals(expectedString, frame.toSqlString())
nova chamada: assertEquals(expectedString, frame.toSqlString(), "Era esperado valores iguais, mas  expectedString é diferente de " + result579 + " <frame.toSqlString()>")
chamada antiga: assertEquals(WindowBoundTypes.FOLLOWING, frame.getLeftBoundType())
nova chamada: assertEquals(WindowBoundTypes.FOLLOWING, frame.getLeftBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.FOLLOWING é diferente de " + result580 + " <frame.getLeftBoundType()>")
chamada antiga: assertEquals(2, frame.getInitialLeftBound())
nova chamada: assertEquals(2, frame.getInitialLeftBound(), "Era esperado valores iguais, mas  2 é diferente de " + result581 + " <frame.getInitialLeftBound()>")
chamada antiga: assertEquals(WindowBoundTypes.FOLLOWING, frame.getRightBoundType())
nova chamada: assertEquals(WindowBoundTypes.FOLLOWING, frame.getRightBoundType(), "Era esperado valores iguais, mas  WindowBoundTypes.FOLLOWING é diferente de " + result582 + " <frame.getRightBoundType()>")
chamada antiga: assertEquals(5, frame.getInitialRightBound())
nova chamada: assertEquals(5, frame.getInitialRightBound(), "Era esperado valores iguais, mas  5 é diferente de " + result583 + " <frame.getInitialRightBound()>")
chamada antiga: assertEquals(expectedString, frame.toSqlString())
nova chamada: assertEquals(expectedString, frame.toSqlString(), "Era esperado valores iguais, mas  expectedString é diferente de " + result584 + " <frame.toSqlString()>")
chamada antiga: assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before PRECEDING"))
nova chamada: assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before PRECEDING"), "Era esperado verdadeiro, mas " + result585 + " <thrown.getMessage().contains('FOLLOWING cannot come before PRECEDING')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before CURRENT_ROW"))
nova chamada: assertTrue(thrown.getMessage().contains("FOLLOWING cannot come before CURRENT_ROW"), "Era esperado verdadeiro, mas " + result586 + " <thrown.getMessage().contains('FOLLOWING cannot come before CURRENT_ROW')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("must be greater than the number preceding at the end of the window "))
nova chamada: assertTrue(thrown.getMessage().contains("must be greater than the number preceding at the end of the window "), "Era esperado verdadeiro, mas " + result587 + " <thrown.getMessage().contains('must be greater than the number preceding at the end of the window ')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("must be less than the number following at the end of the window"))
nova chamada: assertTrue(thrown.getMessage().contains("must be less than the number following at the end of the window"), "Era esperado verdadeiro, mas " + result588 + " <thrown.getMessage().contains('must be less than the number following at the end of the window')> é falso")
chamada antiga: assertEquals(WindowGrowthType.FIXED, growthType)
nova chamada: assertEquals(WindowGrowthType.FIXED, growthType, "Era esperado valores iguais, mas  WindowGrowthType.FIXED é diferente de " + " growthType")
chamada antiga: assertEquals(WindowGrowthType.FIXED_LEFT, growthType)
nova chamada: assertEquals(WindowGrowthType.FIXED_LEFT, growthType, "Era esperado valores iguais, mas  WindowGrowthType.FIXED_LEFT é diferente de " + " growthType")
chamada antiga: assertEquals(WindowGrowthType.FIXED_RIGHT, growthType)
nova chamada: assertEquals(WindowGrowthType.FIXED_RIGHT, growthType, "Era esperado valores iguais, mas  WindowGrowthType.FIXED_RIGHT é diferente de " + " growthType")
chamada antiga: assertEquals(WindowGrowthType.SLIDING, growthType)
nova chamada: assertEquals(WindowGrowthType.SLIDING, growthType, "Era esperado valores iguais, mas  WindowGrowthType.SLIDING é diferente de " + " growthType")
chamada antiga: assertEquals(WindowGrowthType.SLIDING, growthType)
nova chamada: assertEquals(WindowGrowthType.SLIDING, growthType, "Era esperado valores iguais, mas  WindowGrowthType.SLIDING é diferente de " + " growthType")
chamada antiga: assertEquals(expected, query.toSqlLikeString())
nova chamada: assertEquals(expected, query.toSqlLikeString(), "Era esperado valores iguais, mas  expected é diferente de " + result589 + " <query.toSqlLikeString()>")
chamada antiga: assertEquals(expectd, query.toSqlLikeString())
nova chamada: assertEquals(expectd, query.toSqlLikeString(), "Era esperado valores iguais, mas  expectd é diferente de " + result590 + " <query.toSqlLikeString()>")
chamada antiga: assertEquals(expectd, query.toSqlLikeString())
nova chamada: assertEquals(expectd, query.toSqlLikeString(), "Era esperado valores iguais, mas  expectd é diferente de " + result591 + " <query.toSqlLikeString()>")
chamada antiga: assertEquals(ImmutableList.of("col1", "rowNumber", "rank", "denseRank"), table.columnNames())
nova chamada: assertEquals(ImmutableList.of("col1", "rowNumber", "rank", "denseRank"), table.columnNames(), "Era esperado valores iguais, mas " + result592 + " <ImmutableList.of('col1', 'rowNumber', 'rank', 'denseRank')> é diferente de " + result593 + " <table.columnNames()>")
chamada antiga: assertEquals(ImmutableList.of("col1", "sum", "max"), table.columnNames())
nova chamada: assertEquals(ImmutableList.of("col1", "sum", "max"), table.columnNames(), "Era esperado valores iguais, mas " + result594 + " <ImmutableList.of('col1', 'sum', 'max')> é diferente de " + result595 + " <table.columnNames()>")
chamada antiga: assertTrue(thrown.getMessage().contains("Cannot add column with duplicate name"))
nova chamada: assertTrue(thrown.getMessage().contains("Cannot add column with duplicate name"), "Era esperado verdadeiro, mas " + result596 + " <thrown.getMessage().contains('Cannot add column with duplicate name')> é falso")
chamada antiga: assertEquals(30, function.getValue())
nova chamada: assertEquals(30, function.getValue(), "Era esperado valores iguais, mas  30 é diferente de " + result597 + " <function.getValue()>")
chamada antiga: assertEquals(120, function.getValue())
nova chamada: assertEquals(120, function.getValue(), "Era esperado valores iguais, mas  120 é diferente de " + result598 + " <function.getValue()>")
chamada antiga: assertEquals(11, function.getValue())
nova chamada: assertEquals(11, function.getValue(), "Era esperado valores iguais, mas  11 é diferente de " + result599 + " <function.getValue()>")
chamada antiga: assertEquals(10, function.getValue())
nova chamada: assertEquals(10, function.getValue(), "Era esperado valores iguais, mas  10 é diferente de " + result600 + " <function.getValue()>")
chamada antiga: assertEquals("MAX(col1) OVER w AS col1Count", argumentList.toSqlString("w"))
nova chamada: assertEquals("MAX(col1) OVER w AS col1Count", argumentList.toSqlString("w"), "Era esperado valores iguais, mas  'MAX(col1) OVER w AS col1Count' é diferente de " + result601 + " <argumentList.toSqlString('w')>")
chamada antiga: assertEquals(0, argumentList.getNumberingFunctions().size())
nova chamada: assertEquals(0, argumentList.getNumberingFunctions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result602 + " <argumentList.getNumberingFunctions().size()>")
chamada antiga: assertEquals(ImmutableList.of("col1Max", "col1Count"), argumentList.getNewColumnNames())
nova chamada: assertEquals(ImmutableList.of("col1Max", "col1Count"), argumentList.getNewColumnNames(), "Era esperado valores iguais, mas " + result603 + " <ImmutableList.of('col1Max', 'col1Count')> é diferente de " + result604 + " <argumentList.getNewColumnNames()>")
chamada antiga: assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX), "col1Count", new FunctionCall<>("col1", "col1Count", AggregateFunctions.COUNT)), argumentList.getAggregateFunctions())
nova chamada: assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX), "col1Count", new FunctionCall<>("col1", "col1Count", AggregateFunctions.COUNT)), argumentList.getAggregateFunctions(), "Era esperado valores iguais, mas " + result605 + " <ImmutableMap.of('col1Max', new FunctionCall<>('col1', 'col1Max', AggregateFunctions.MAX), 'col1Count', new FunctionCall<>('col1', 'col1Count', AggregateFunctions.COUNT))> é diferente de " + result606 + " <argumentList.getAggregateFunctions()>")
chamada antiga: assertEquals(0, argumentList.getAggregateFunctions().size())
nova chamada: assertEquals(0, argumentList.getAggregateFunctions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result607 + " <argumentList.getAggregateFunctions().size()>")
chamada antiga: assertEquals(ImmutableList.of("col1Rank", "col1DenseRank"), argumentList.getNewColumnNames())
nova chamada: assertEquals(ImmutableList.of("col1Rank", "col1DenseRank"), argumentList.getNewColumnNames(), "Era esperado valores iguais, mas " + result608 + " <ImmutableList.of('col1Rank', 'col1DenseRank')> é diferente de " + result609 + " <argumentList.getNewColumnNames()>")
chamada antiga: assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK), "col1DenseRank", new FunctionCall<>("", "col1DenseRank", NumberingFunctions.DENSE_RANK)), argumentList.getNumberingFunctions())
nova chamada: assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK), "col1DenseRank", new FunctionCall<>("", "col1DenseRank", NumberingFunctions.DENSE_RANK)), argumentList.getNumberingFunctions(), "Era esperado valores iguais, mas " + result610 + " <ImmutableMap.of('col1Rank', new FunctionCall<>('', 'col1Rank', NumberingFunctions.RANK), 'col1DenseRank', new FunctionCall<>('', 'col1DenseRank', NumberingFunctions.DENSE_RANK))> é diferente de " + result611 + " <argumentList.getNumberingFunctions()>")
chamada antiga: assertEquals(ImmutableList.of("col1Rank", "col1Max"), argumentList.getNewColumnNames())
nova chamada: assertEquals(ImmutableList.of("col1Rank", "col1Max"), argumentList.getNewColumnNames(), "Era esperado valores iguais, mas " + result612 + " <ImmutableList.of('col1Rank', 'col1Max')> é diferente de " + result613 + " <argumentList.getNewColumnNames()>")
chamada antiga: assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX)), argumentList.getAggregateFunctions())
nova chamada: assertEquals(ImmutableMap.of("col1Max", new FunctionCall<>("col1", "col1Max", AggregateFunctions.MAX)), argumentList.getAggregateFunctions(), "Era esperado valores iguais, mas " + result614 + " <ImmutableMap.of('col1Max', new FunctionCall<>('col1', 'col1Max', AggregateFunctions.MAX))> é diferente de " + result615 + " <argumentList.getAggregateFunctions()>")
chamada antiga: assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK)), argumentList.getNumberingFunctions())
nova chamada: assertEquals(ImmutableMap.of("col1Rank", new FunctionCall<>("", "col1Rank", NumberingFunctions.RANK)), argumentList.getNumberingFunctions(), "Era esperado valores iguais, mas " + result616 + " <ImmutableMap.of('col1Rank', new FunctionCall<>('', 'col1Rank', NumberingFunctions.RANK))> é diferente de " + result617 + " <argumentList.getNumberingFunctions()>")
chamada antiga: assertEquals(expected, argumentList.toSqlString("w"))
nova chamada: assertEquals(expected, argumentList.toSqlString("w"), "Era esperado valores iguais, mas  expected é diferente de " + result618 + " <argumentList.toSqlString('w')>")
chamada antiga: assertTrue(thrown.getMessage().contains("duplicate column"))
nova chamada: assertTrue(thrown.getMessage().contains("duplicate column"), "Era esperado verdadeiro, mas " + result619 + " <thrown.getMessage().contains('duplicate column')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("Cannot build when a column is staged"))
nova chamada: assertTrue(thrown.getMessage().contains("Cannot build when a column is staged"), "Era esperado verdadeiro, mas " + result620 + " <thrown.getMessage().contains('Cannot build when a column is staged')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("Cannot stage a column while another is staged"))
nova chamada: assertTrue(thrown.getMessage().contains("Cannot stage a column while another is staged"), "Era esperado verdadeiro, mas " + result621 + " <thrown.getMessage().contains('Cannot stage a column while another is staged')> é falso")
chamada antiga: assertEquals(expected, windowSpecification.toSqlString())
nova chamada: assertEquals(expected, windowSpecification.toSqlString(), "Era esperado valores iguais, mas  expected é diferente de " + result622 + " <windowSpecification.toSqlString()>")
chamada antiga: assertTrue(thrown.getMessage().contains("duplicate columns"))
nova chamada: assertTrue(thrown.getMessage().contains("duplicate columns"), "Era esperado verdadeiro, mas " + result623 + " <thrown.getMessage().contains('duplicate columns')> é falso")
chamada antiga: assertArrayEquals(new double[] { missing, missing, 0.181, 0.186, 0.186, 0.186, 0.181 }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { missing, missing, 0.181, 0.186, 0.186, 0.186, 0.181 }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { missing, missing, 0.181, 0.186, 0.186, 0.186, 0.181 } é diferente de " + result624 + " <col.asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 0.181, 0.181, 0.181, 0.186, 0.181, 0.181, missing }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 0.181, 0.181, 0.181, 0.186, 0.181, 0.181, missing }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 0.181, 0.181, 0.181, 0.186, 0.181, 0.181, missing } é diferente de " + result625 + " <col.asDoubleArray()>")
chamada antiga: assertTrue(b.get(0))
nova chamada: assertTrue(b.get(0), "Era esperado verdadeiro, mas " + result626 + " <b.get(0)> é falso")
chamada antiga: assertEquals(table.rowCount(), t.rowCount())
nova chamada: assertEquals(table.rowCount(), t.rowCount(), "Era esperado valores iguais, mas " + result627 + " <table.rowCount()> é diferente de " + result628 + " <t.rowCount()>")
chamada antiga: assertNotEquals("fox", t.stringColumn("who").get(10))
nova chamada: assertNotEquals("fox", t.stringColumn("who").get(10), "Era esperado valores diferentes, mas  'fox' é igual a " + result629 + " <t.stringColumn('who').get(10)>")
chamada antiga: assertTrue(t.intColumn("approval").get(10) < 55)
nova chamada: assertTrue(t.intColumn("approval").get(10) < 55, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, t.dateColumn("date").get(10).getMonthValue())
nova chamada: assertEquals(4, t.dateColumn("date").get(10).getMonthValue(), "Era esperado valores iguais, mas  4 é diferente de " + result630 + " <t.dateColumn('date').get(10).getMonthValue()>")
chamada antiga: assertEquals(4, t.dateColumn("date").get(10).getMonthValue())
nova chamada: assertEquals(4, t.dateColumn("date").get(10).getMonthValue(), "Era esperado valores iguais, mas  4 é diferente de " + result631 + " <t.dateColumn('date').get(10).getMonthValue()>")
chamada antiga: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(1))
nova chamada: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(1), "Era esperado verdadeiro, mas " + result632 + " <t.where(booleanColumn('A').isTrue()).intColumn(0).contains(1)> é falso")
chamada antiga: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(3))
nova chamada: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(3), "Era esperado verdadeiro, mas " + result633 + " <t.where(booleanColumn('A').isTrue()).intColumn(0).contains(3)> é falso")
chamada antiga: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(5))
nova chamada: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(5), "Era esperado verdadeiro, mas " + result634 + " <t.where(booleanColumn('A').isTrue()).intColumn(0).contains(5)> é falso")
chamada antiga: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(7))
nova chamada: assertTrue(t.where(booleanColumn("A").isTrue()).intColumn(0).contains(7), "Era esperado verdadeiro, mas " + result635 + " <t.where(booleanColumn('A').isTrue()).intColumn(0).contains(7)> é falso")
chamada antiga: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(2))
nova chamada: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(2), "Era esperado verdadeiro, mas " + result636 + " <t.where(not(booleanColumn('A').isTrue())).intColumn(0).contains(2)> é falso")
chamada antiga: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(4))
nova chamada: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(4), "Era esperado verdadeiro, mas " + result637 + " <t.where(not(booleanColumn('A').isTrue())).intColumn(0).contains(4)> é falso")
chamada antiga: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(6))
nova chamada: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(6), "Era esperado verdadeiro, mas " + result638 + " <t.where(not(booleanColumn('A').isTrue())).intColumn(0).contains(6)> é falso")
chamada antiga: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(8))
nova chamada: assertTrue(t.where(not(booleanColumn("A").isTrue())).intColumn(0).contains(8), "Era esperado verdadeiro, mas " + result639 + " <t.where(not(booleanColumn('A').isTrue())).intColumn(0).contains(8)> é falso")
chamada antiga: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(1))
nova chamada: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(1), "Era esperado verdadeiro, mas " + result640 + " <t.where(any(booleanColumn('A').isTrue())).intColumn(0).contains(1)> é falso")
chamada antiga: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(3))
nova chamada: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(3), "Era esperado verdadeiro, mas " + result641 + " <t.where(any(booleanColumn('A').isTrue())).intColumn(0).contains(3)> é falso")
chamada antiga: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(5))
nova chamada: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(5), "Era esperado verdadeiro, mas " + result642 + " <t.where(any(booleanColumn('A').isTrue())).intColumn(0).contains(5)> é falso")
chamada antiga: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(7))
nova chamada: assertTrue(t.where(any(booleanColumn("A").isTrue())).intColumn(0).contains(7), "Era esperado verdadeiro, mas " + result643 + " <t.where(any(booleanColumn('A').isTrue())).intColumn(0).contains(7)> é falso")
chamada antiga: assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado verdadeiro, mas " + result644 + " <t.where(either(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é falso")
chamada antiga: assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(3))
nova chamada: assertTrue(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(3), "Era esperado verdadeiro, mas " + result645 + " <t.where(either(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(3)> é falso")
chamada antiga: assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
nova chamada: assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6), "Era esperado verdadeiro, mas " + result646 + " <t.where(neither(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(6)> é falso")
chamada antiga: assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertTrue(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado verdadeiro, mas " + result647 + " <t.where(neither(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é falso")
chamada antiga: assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
nova chamada: assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6), "Era esperado verdadeiro, mas " + result648 + " <t.where(notAny(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(6)> é falso")
chamada antiga: assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertTrue(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado verdadeiro, mas " + result649 + " <t.where(notAny(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é falso")
chamada antiga: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
nova chamada: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2), "Era esperado verdadeiro, mas " + result650 + " <t.where(notBoth(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(2)> é falso")
chamada antiga: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
nova chamada: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6), "Era esperado verdadeiro, mas " + result651 + " <t.where(notBoth(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(6)> é falso")
chamada antiga: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertTrue(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado verdadeiro, mas " + result652 + " <t.where(notBoth(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é falso")
chamada antiga: assertTrue(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertTrue(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado verdadeiro, mas " + result653 + " <t.where(both(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é falso")
chamada antiga: assertTrue(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertTrue(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado verdadeiro, mas " + result654 + " <t.where(all(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é falso")
chamada antiga: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(2))
nova chamada: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(2), "Era esperado verdadeiro, mas " + result655 + " <t.where(notAll(booleanColumn('A').isTrue())).intColumn(0).contains(2)> é falso")
chamada antiga: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(4))
nova chamada: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(4), "Era esperado verdadeiro, mas " + result656 + " <t.where(notAll(booleanColumn('A').isTrue())).intColumn(0).contains(4)> é falso")
chamada antiga: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(6))
nova chamada: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(6), "Era esperado verdadeiro, mas " + result657 + " <t.where(notAll(booleanColumn('A').isTrue())).intColumn(0).contains(6)> é falso")
chamada antiga: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(8))
nova chamada: assertTrue(t.where(notAll(booleanColumn("A").isTrue())).intColumn(0).contains(8), "Era esperado verdadeiro, mas " + result658 + " <t.where(notAll(booleanColumn('A').isTrue())).intColumn(0).contains(8)> é falso")
chamada antiga: assertEquals(0, t1.rowCount())
nova chamada: assertEquals(0, t1.rowCount(), "Era esperado valores iguais, mas  0 é diferente de " + result659 + " <t1.rowCount()>")
chamada antiga: assertEquals(93, t2.rowCount())
nova chamada: assertEquals(93, t2.rowCount(), "Era esperado valores iguais, mas  93 é diferente de " + result660 + " <t2.rowCount()>")
chamada antiga: assertFalse(t.dateColumn("date").monthValue().contains(4))
nova chamada: assertFalse(t.dateColumn("date").monthValue().contains(4), "Era esperado falso, mas " + result661 + " <t.dateColumn('date').monthValue().contains(4)> é verdadeiro ")
chamada antiga: assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6))
nova chamada: assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(6), "Era esperado falso, mas " + result662 + " <t.where(either(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(6)> é verdadeiro ")
chamada antiga: assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertFalse(t.where(either(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado falso, mas " + result663 + " <t.where(either(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é verdadeiro ")
chamada antiga: assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado falso, mas " + result664 + " <t.where(neither(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é verdadeiro ")
chamada antiga: assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
nova chamada: assertFalse(t.where(neither(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2), "Era esperado falso, mas " + result665 + " <t.where(neither(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado falso, mas " + result666 + " <t.where(notAny(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é verdadeiro ")
chamada antiga: assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
nova chamada: assertFalse(t.where(notAny(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2), "Era esperado falso, mas " + result667 + " <t.where(notAny(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1))
nova chamada: assertFalse(t.where(notBoth(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(1), "Era esperado falso, mas " + result668 + " <t.where(notBoth(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(1)> é verdadeiro ")
chamada antiga: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
nova chamada: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2), "Era esperado falso, mas " + result669 + " <t.where(both(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5))
nova chamada: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5), "Era esperado falso, mas " + result670 + " <t.where(both(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(5)> é verdadeiro ")
chamada antiga: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertFalse(t.where(both(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado falso, mas " + result671 + " <t.where(both(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é verdadeiro ")
chamada antiga: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2))
nova chamada: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(2), "Era esperado falso, mas " + result672 + " <t.where(all(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5))
nova chamada: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(5), "Era esperado falso, mas " + result673 + " <t.where(all(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(5)> é verdadeiro ")
chamada antiga: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8))
nova chamada: assertFalse(t.where(all(booleanColumn("A").isTrue(), booleanColumn("B").isTrue())).intColumn(0).contains(8), "Era esperado falso, mas " + result674 + " <t.where(all(booleanColumn('A').isTrue(), booleanColumn('B').isTrue())).intColumn(0).contains(8)> é verdadeiro ")
chamada antiga: assertTrue(result.getString(0, "who").startsWith("f"))
nova chamada: assertTrue(result.getString(0, "who").startsWith("f"), "Era esperado verdadeiro, mas " + result675 + " <result.getString(0, 'who').startsWith('f')> é falso")
chamada antiga: assertEquals("fox", result.getString(0, "who"))
nova chamada: assertEquals("fox", result.getString(0, "who"), "Era esperado valores iguais, mas  'fox' é diferente de " + result676 + " <result.getString(0, 'who')>")
chamada antiga: assertFalse(result.getString(0, "who").startsWith("f"))
nova chamada: assertFalse(result.getString(0, "who").startsWith("f"), "Era esperado falso, mas " + result677 + " <result.getString(0, 'who').startsWith('f')> é verdadeiro ")
chamada antiga: assertTrue(result.getString(0, "who").startsWith("f"))
nova chamada: assertTrue(result.getString(0, "who").startsWith("f"), "Era esperado verdadeiro, mas " + result678 + " <result.getString(0, 'who').startsWith('f')> é falso")
chamada antiga: assertEquals(DateColumnType.missingValueIndicator(), column.getIntInternal(0))
nova chamada: assertEquals(DateColumnType.missingValueIndicator(), column.getIntInternal(0), "Era esperado valores iguais, mas " + result679 + " <DateColumnType.missingValueIndicator()> é diferente de " + result680 + " <column.getIntInternal(0)>")
chamada antiga: assertEquals(4, column1.size())
nova chamada: assertEquals(4, column1.size(), "Era esperado valores iguais, mas  4 é diferente de " + result681 + " <column1.size()>")
chamada antiga: assertEquals(5, column1.size())
nova chamada: assertEquals(5, column1.size(), "Era esperado valores iguais, mas  5 é diferente de " + result682 + " <column1.size()>")
chamada antiga: assertTrue(column1.isMissing(column1.size() - 1))
nova chamada: assertTrue(column1.isMissing(column1.size() - 1), "Era esperado verdadeiro, mas " + result683 + " <column1.isMissing(column1.size() - 1)> é falso")
chamada antiga: assertFalse(column1.isMissing(column1.size() - 1))
nova chamada: assertFalse(column1.isMissing(column1.size() - 1), "Era esperado falso, mas " + result684 + " <column1.isMissing(column1.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print())
nova chamada: assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print(), "Era esperado valores iguais, mas  'Column: Game date' + System.lineSeparator() + 'Oct~23~2013' + System.lineSeparator() + 'Dec~23~1924' + System.lineSeparator() + 'May~12~2015' + System.lineSeparator() + 'Jan~12~2015' + System.lineSeparator() é diferente de " + result685 + " <column1.print()>")
chamada antiga: assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print())
nova chamada: assertEquals("Column: Game date" + System.lineSeparator() + "Oct~23~2013" + System.lineSeparator() + "Dec~23~1924" + System.lineSeparator() + "May~12~2015" + System.lineSeparator() + "Jan~12~2015" + System.lineSeparator(), column1.print(), "Era esperado valores iguais, mas  'Column: Game date' + System.lineSeparator() + 'Oct~23~2013' + System.lineSeparator() + 'Dec~23~1924' + System.lineSeparator() + 'May~12~2015' + System.lineSeparator() + 'Jan~12~2015' + System.lineSeparator() é diferente de " + result686 + " <column1.print()>")
chamada antiga: assertEquals("2013-10", c2.get(0))
nova chamada: assertEquals("2013-10", c2.get(0), "Era esperado valores iguais, mas  '2013-10' é diferente de " + result687 + " <c2.get(0)>")
chamada antiga: assertEquals("1924-12", c2.get(1))
nova chamada: assertEquals("1924-12", c2.get(1), "Era esperado valores iguais, mas  '1924-12' é diferente de " + result688 + " <c2.get(1)>")
chamada antiga: assertEquals("2015-05", c2.get(2))
nova chamada: assertEquals("2015-05", c2.get(2), "Era esperado valores iguais, mas  '2015-05' é diferente de " + result689 + " <c2.get(2)>")
chamada antiga: assertEquals("2015-01", c2.get(3))
nova chamada: assertEquals("2015-01", c2.get(3), "Era esperado valores iguais, mas  '2015-01' é diferente de " + result690 + " <c2.get(3)>")
chamada antiga: assertEquals(4, summary.rowCount())
nova chamada: assertEquals(4, summary.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result691 + " <summary.rowCount()>")
chamada antiga: assertEquals(2, summary.columnCount())
nova chamada: assertEquals(2, summary.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result692 + " <summary.columnCount()>")
chamada antiga: assertEquals("Measure", summary.column(0).name())
nova chamada: assertEquals("Measure", summary.column(0).name(), "Era esperado valores iguais, mas  'Measure' é diferente de " + result693 + " <summary.column(0).name()>")
chamada antiga: assertEquals("Value", summary.column(1).name())
nova chamada: assertEquals("Value", summary.column(1).name(), "Era esperado valores iguais, mas  'Value' é diferente de " + result694 + " <summary.column(1).name()>")
chamada antiga: assertEquals(DateColumnType.DEFAULT_PARSER.parse("2013-10-23"), actual)
nova chamada: assertEquals(DateColumnType.DEFAULT_PARSER.parse("2013-10-23"), actual, "Era esperado valores iguais, mas " + result695 + " <DateColumnType.DEFAULT_PARSER.parse('2013-10-23')> é diferente de " + " actual")
chamada antiga: assertEquals(sorted.dateColumn("Date").asList().stream().sorted().collect(Collectors.toList()), sorted.dateColumn("Date").asList())
nova chamada: assertEquals(sorted.dateColumn("Date").asList().stream().sorted().collect(Collectors.toList()), sorted.dateColumn("Date").asList(), "Era esperado valores iguais, mas " + result696 + " <sorted.dateColumn('Date').asList().stream().sorted().collect(Collectors.toList())> é diferente de " + result697 + " <sorted.dateColumn('Date').asList()>")
chamada antiga: assertEquals(3, column1.countUnique())
nova chamada: assertEquals(3, column1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result698 + " <column1.countUnique()>")
chamada antiga: assertEquals(4, column1.size())
nova chamada: assertEquals(4, column1.size(), "Era esperado valores iguais, mas  4 é diferente de " + result699 + " <column1.size()>")
chamada antiga: assertEquals(5, column1.size())
nova chamada: assertEquals(5, column1.size(), "Era esperado valores iguais, mas  5 é diferente de " + result700 + " <column1.size()>")
chamada antiga: assertEquals(3, column1.size())
nova chamada: assertEquals(3, column1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result701 + " <column1.size()>")
chamada antiga: assertTrue(column1.isMissing(column1.size() - 1))
nova chamada: assertTrue(column1.isMissing(column1.size() - 1), "Era esperado verdadeiro, mas " + result702 + " <column1.isMissing(column1.size() - 1)> é falso")
chamada antiga: assertFalse(column1.isMissing(column1.size() - 1))
nova chamada: assertFalse(column1.isMissing(column1.size() - 1), "Era esperado falso, mas " + result703 + " <column1.isMissing(column1.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals(1, column2.size())
nova chamada: assertEquals(1, column2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result704 + " <column2.size()>")
chamada antiga: assertEquals(2017, column2.get(0).getYear())
nova chamada: assertEquals(2017, column2.get(0).getYear(), "Era esperado valores iguais, mas  2017 é diferente de " + result705 + " <column2.get(0).getYear()>")
chamada antiga: assertEquals(8, column2.get(0).getMonthValue())
nova chamada: assertEquals(8, column2.get(0).getMonthValue(), "Era esperado valores iguais, mas  8 é diferente de " + result706 + " <column2.get(0).getMonthValue()>")
chamada antiga: assertEquals(28, column2.get(0).getDayOfMonth())
nova chamada: assertEquals(28, column2.get(0).getDayOfMonth(), "Era esperado valores iguais, mas  28 é diferente de " + result707 + " <column2.get(0).getDayOfMonth()>")
chamada antiga: assertEquals(20, column2.get(0).getHour())
nova chamada: assertEquals(20, column2.get(0).getHour(), "Era esperado valores iguais, mas  20 é diferente de " + result708 + " <column2.get(0).getHour()>")
chamada antiga: assertEquals(1, millisArr.length)
nova chamada: assertEquals(1, millisArr.length, "Era esperado valores iguais, mas  1 é diferente de " + " millisArr.length")
chamada antiga: assertEquals(millis, millisArr[0])
nova chamada: assertEquals(millis, millisArr[0], "Era esperado valores iguais, mas  millis é diferente de " + " millisArr[0]")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result709 + " <result.rowCount()>")
chamada antiga: assertNull(col.get(0))
nova chamada: assertNull(col.get(0), "Era esperado nulo, mas " + result710 + " <col.get(0)> não é nulo")
chamada antiga: assertEquals(3, column1.countUnique())
nova chamada: assertEquals(3, column1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result711 + " <column1.countUnique()>")
chamada antiga: assertEquals("2000-01-01T00:00:00", column1.getString(0))
nova chamada: assertEquals("2000-01-01T00:00:00", column1.getString(0), "Era esperado valores iguais, mas  '2000-01-01T00:00:00' é diferente de " + result712 + " <column1.getString(0)>")
chamada antiga: assertEquals("NaT", column1.getString(1))
nova chamada: assertEquals("NaT", column1.getString(1), "Era esperado valores iguais, mas  'NaT' é diferente de " + result713 + " <column1.getString(1)>")
chamada antiga: assertEquals("Game date strings", sc.name())
nova chamada: assertEquals("Game date strings", sc.name(), "Era esperado valores iguais, mas  'Game date strings' é diferente de " + result714 + " <sc.name()>")
chamada antiga: assertEquals(2, sc.size())
nova chamada: assertEquals(2, sc.size(), "Era esperado valores iguais, mas  2 é diferente de " + result715 + " <sc.size()>")
chamada antiga: assertEquals("1923-10-20T10:15:30.000", sc.get(0))
nova chamada: assertEquals("1923-10-20T10:15:30.000", sc.get(0), "Era esperado valores iguais, mas  '1923-10-20T10:15:30.000' é diferente de " + result716 + " <sc.get(0)>")
chamada antiga: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
nova chamada: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1), "Era esperado valores iguais, mas " + result717 + " <StringColumnType.missingValueIndicator()> é diferente de " + result718 + " <sc.get(1)>")
chamada antiga: assertEquals(bush.columnNames(), row.columnNames())
nova chamada: assertEquals(bush.columnNames(), row.columnNames(), "Era esperado valores iguais, mas " + result719 + " <bush.columnNames()> é diferente de " + result720 + " <row.columnNames()>")
chamada antiga: assertEquals(bush.columnCount(), row.columnCount())
nova chamada: assertEquals(bush.columnCount(), row.columnCount(), "Era esperado valores iguais, mas " + result721 + " <bush.columnCount()> é diferente de " + result722 + " <row.columnCount()>")
chamada antiga: assertEquals(3, count)
nova chamada: assertEquals(3, count, "Era esperado valores iguais, mas  3 é diferente de " + " count")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals("Column col2 is not present in table myTable", thrown.getMessage())
nova chamada: assertEquals("Column col2 is not present in table myTable", thrown.getMessage(), "Era esperado valores iguais, mas  'Column col2 is not present in table myTable' é diferente de " + result723 + " <thrown.getMessage()>")
chamada antiga: assertEquals("Column col1 is of type LOCAL_DATE and cannot be cast to LOCAL_TIME." + " Use the method for LOCAL_DATE.", thrown.getMessage())
nova chamada: assertEquals("Column col1 is of type LOCAL_DATE and cannot be cast to LOCAL_TIME." + " Use the method for LOCAL_DATE.", thrown.getMessage(), "Era esperado valores iguais, mas  'Column col1 is of type LOCAL_DATE and cannot be cast to LOCAL_TIME.' + ' Use the method for LOCAL_DATE.' é diferente de " + result724 + " <thrown.getMessage()>")
chamada antiga: assertEquals(53.0, table.row(0).getNumber("approval"))
nova chamada: assertEquals(53.0, table.row(0).getNumber("approval"), "Era esperado valores iguais, mas  53.0 é diferente de " + result725 + " <table.row(0).getNumber('approval')>")
chamada antiga: assertFalse(bush.row(0).isMissing("approval"))
nova chamada: assertFalse(bush.row(0).isMissing("approval"), "Era esperado falso, mas " + result726 + " <bush.row(0).isMissing('approval')> é verdadeiro ")
chamada antiga: assertTrue(bush.row(0).isMissing("approval"))
nova chamada: assertTrue(bush.row(0).isMissing("approval"), "Era esperado verdadeiro, mas " + result727 + " <bush.row(0).isMissing('approval')> é falso")
chamada antiga: assertEquals("data 4-period Percent Change", result.name())
nova chamada: assertEquals("data 4-period Percent Change", result.name(), "Era esperado valores iguais, mas  'data 4-period Percent Change' é diferente de " + result728 + " <result.name()>")
chamada antiga: assertArrayEquals(expected, result.asDoubleArray())
nova chamada: assertArrayEquals(expected, result.asDoubleArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result729 + " <result.asDoubleArray()>")
chamada antiga: assertEquals(expected, roundOff)
nova chamada: assertEquals(expected, roundOff, "Era esperado valores iguais, mas  expected é diferente de " + " roundOff")
chamada antiga: assertEquals(expected, roundOff)
nova chamada: assertEquals(expected, roundOff, "Era esperado valores iguais, mas  expected é diferente de " + " roundOff")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertTrue(doubleParser.canParse("1.3"))
nova chamada: assertTrue(doubleParser.canParse("1.3"), "Era esperado verdadeiro, mas " + result730 + " <doubleParser.canParse('1.3')> é falso")
chamada antiga: assertTrue(doubleParser.canParse("1.3%"))
nova chamada: assertTrue(doubleParser.canParse("1.3%"), "Era esperado verdadeiro, mas " + result731 + " <doubleParser.canParse('1.3%')> é falso")
chamada antiga: assertEquals(1.3, doubleParser.parseDouble("1.3"))
nova chamada: assertEquals(1.3, doubleParser.parseDouble("1.3"), "Era esperado valores iguais, mas  1.3 é diferente de " + result732 + " <doubleParser.parseDouble('1.3')>")
chamada antiga: assertEquals(0.012, doubleParser.parseDouble("1.2%"))
nova chamada: assertEquals(0.012, doubleParser.parseDouble("1.2%"), "Era esperado valores iguais, mas  0.012 é diferente de " + result733 + " <doubleParser.parseDouble('1.2%')>")
chamada antiga: assertEquals(0, group.getInt(0))
nova chamada: assertEquals(0, group.getInt(0), "Era esperado valores iguais, mas  0 é diferente de " + result734 + " <group.getInt(0)>")
chamada antiga: assertEquals(0, group.getInt(1))
nova chamada: assertEquals(0, group.getInt(1), "Era esperado valores iguais, mas  0 é diferente de " + result735 + " <group.getInt(1)>")
chamada antiga: assertEquals(1, group.getInt(2))
nova chamada: assertEquals(1, group.getInt(2), "Era esperado valores iguais, mas  1 é diferente de " + result736 + " <group.getInt(2)>")
chamada antiga: assertEquals(2, group.getInt(3))
nova chamada: assertEquals(2, group.getInt(3), "Era esperado valores iguais, mas  2 é diferente de " + result737 + " <group.getInt(3)>")
chamada antiga: assertEquals(0, group2.getInt(0))
nova chamada: assertEquals(0, group2.getInt(0), "Era esperado valores iguais, mas  0 é diferente de " + result738 + " <group2.getInt(0)>")
chamada antiga: assertEquals(0, group2.getInt(1))
nova chamada: assertEquals(0, group2.getInt(1), "Era esperado valores iguais, mas  0 é diferente de " + result739 + " <group2.getInt(1)>")
chamada antiga: assertEquals(1, group2.getInt(2))
nova chamada: assertEquals(1, group2.getInt(2), "Era esperado valores iguais, mas  1 é diferente de " + result740 + " <group2.getInt(2)>")
chamada antiga: assertEquals(2, group2.getInt(3))
nova chamada: assertEquals(2, group2.getInt(3), "Era esperado valores iguais, mas  2 é diferente de " + result741 + " <group2.getInt(3)>")
chamada antiga: assertEquals(0, group3.getInt(0))
nova chamada: assertEquals(0, group3.getInt(0), "Era esperado valores iguais, mas  0 é diferente de " + result742 + " <group3.getInt(0)>")
chamada antiga: assertEquals(0, group3.getInt(1))
nova chamada: assertEquals(0, group3.getInt(1), "Era esperado valores iguais, mas  0 é diferente de " + result743 + " <group3.getInt(1)>")
chamada antiga: assertEquals(0, group3.getInt(2))
nova chamada: assertEquals(0, group3.getInt(2), "Era esperado valores iguais, mas  0 é diferente de " + result744 + " <group3.getInt(2)>")
chamada antiga: assertEquals(0, group3.getInt(3))
nova chamada: assertEquals(0, group3.getInt(3), "Era esperado valores iguais, mas  0 é diferente de " + result745 + " <group3.getInt(3)>")
chamada antiga: assertEquals(1, group3.getInt(4))
nova chamada: assertEquals(1, group3.getInt(4), "Era esperado valores iguais, mas  1 é diferente de " + result746 + " <group3.getInt(4)>")
chamada antiga: assertEquals(DayOfWeek.FRIDAY.name(), column1.dayOfWeek().get(0))
nova chamada: assertEquals(DayOfWeek.FRIDAY.name(), column1.dayOfWeek().get(0), "Era esperado valores iguais, mas " + result747 + " <DayOfWeek.FRIDAY.name()> é diferente de " + result748 + " <column1.dayOfWeek().get(0)>")
chamada antiga: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.DAYS), days.getInt(0))
nova chamada: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.DAYS), days.getInt(0), "Era esperado valores iguais, mas " + result749 + " <asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.DAYS)> é diferente de " + result750 + " <days.getInt(0)>")
chamada antiga: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.WEEKS), weeks.getInt(0))
nova chamada: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.WEEKS), weeks.getInt(0), "Era esperado valores iguais, mas " + result751 + " <asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.WEEKS)> é diferente de " + result752 + " <weeks.getInt(0)>")
chamada antiga: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.MONTHS), months.getInt(0))
nova chamada: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.MONTHS), months.getInt(0), "Era esperado valores iguais, mas " + result753 + " <asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.MONTHS)> é diferente de " + result754 + " <months.getInt(0)>")
chamada antiga: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.YEARS), years.getInt(0))
nova chamada: assertEquals(asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.YEARS), years.getInt(0), "Era esperado valores iguais, mas " + result755 + " <asLocalDate(day1).until(asLocalDate(day2), ChronoUnit.YEARS)> é diferente de " + result756 + " <years.getInt(0)>")
chamada antiga: assertEquals(pack(2011, 12, 21), column1.plusDays(2).getPackedDate(0))
nova chamada: assertEquals(pack(2011, 12, 21), column1.plusDays(2).getPackedDate(0), "Era esperado valores iguais, mas " + result757 + " <pack(2011, 12, 21)> é diferente de " + result758 + " <column1.plusDays(2).getPackedDate(0)>")
chamada antiga: assertEquals(pack(2012, 1, 3), column1.plusDays(2).getPackedDate(1))
nova chamada: assertEquals(pack(2012, 1, 3), column1.plusDays(2).getPackedDate(1), "Era esperado valores iguais, mas " + result759 + " <pack(2012, 1, 3)> é diferente de " + result760 + " <column1.plusDays(2).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2011, 12, 30), column1.minusDays(2).getPackedDate(1))
nova chamada: assertEquals(pack(2011, 12, 30), column1.minusDays(2).getPackedDate(1), "Era esperado valores iguais, mas " + result761 + " <pack(2011, 12, 30)> é diferente de " + result762 + " <column1.minusDays(2).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2012, 1, 8), column1.plusWeeks(1).getPackedDate(1))
nova chamada: assertEquals(pack(2012, 1, 8), column1.plusWeeks(1).getPackedDate(1), "Era esperado valores iguais, mas " + result763 + " <pack(2012, 1, 8)> é diferente de " + result764 + " <column1.plusWeeks(1).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2012, 1, 3), column1.minusWeeks(1).getPackedDate(2))
nova chamada: assertEquals(pack(2012, 1, 3), column1.minusWeeks(1).getPackedDate(2), "Era esperado valores iguais, mas " + result765 + " <pack(2012, 1, 3)> é diferente de " + result766 + " <column1.minusWeeks(1).getPackedDate(2)>")
chamada antiga: assertEquals(pack(2012, 2, 19), column1.plusMonths(2).getPackedDate(0))
nova chamada: assertEquals(pack(2012, 2, 19), column1.plusMonths(2).getPackedDate(0), "Era esperado valores iguais, mas " + result767 + " <pack(2012, 2, 19)> é diferente de " + result768 + " <column1.plusMonths(2).getPackedDate(0)>")
chamada antiga: assertEquals(pack(2012, 3, 1), column1.plusMonths(2).getPackedDate(1))
nova chamada: assertEquals(pack(2012, 3, 1), column1.plusMonths(2).getPackedDate(1), "Era esperado valores iguais, mas " + result769 + " <pack(2012, 3, 1)> é diferente de " + result770 + " <column1.plusMonths(2).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2011, 11, 1), column1.minusMonths(2).getPackedDate(1))
nova chamada: assertEquals(pack(2011, 11, 1), column1.minusMonths(2).getPackedDate(1), "Era esperado valores iguais, mas " + result771 + " <pack(2011, 11, 1)> é diferente de " + result772 + " <column1.minusMonths(2).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2013, 12, 19), column1.plusYears(2).getPackedDate(0))
nova chamada: assertEquals(pack(2013, 12, 19), column1.plusYears(2).getPackedDate(0), "Era esperado valores iguais, mas " + result773 + " <pack(2013, 12, 19)> é diferente de " + result774 + " <column1.plusYears(2).getPackedDate(0)>")
chamada antiga: assertEquals(pack(2015, 1, 1), column1.plusYears(3).getPackedDate(1))
nova chamada: assertEquals(pack(2015, 1, 1), column1.plusYears(3).getPackedDate(1), "Era esperado valores iguais, mas " + result775 + " <pack(2015, 1, 1)> é diferente de " + result776 + " <column1.plusYears(3).getPackedDate(1)>")
chamada antiga: assertEquals(pack(2011, 1, 1), column1.minusYears(1).getPackedDate(1))
nova chamada: assertEquals(pack(2011, 1, 1), column1.minusYears(1).getPackedDate(1), "Era esperado valores iguais, mas " + result777 + " <pack(2011, 1, 1)> é diferente de " + result778 + " <column1.minusYears(1).getPackedDate(1)>")
chamada antiga: assertFalse(doubleParser.canParse("%"))
nova chamada: assertFalse(doubleParser.canParse("%"), "Era esperado falso, mas " + result779 + " <doubleParser.canParse('%')> é verdadeiro ")
chamada antiga: assertFalse(doubleParser.canParse(","))
nova chamada: assertFalse(doubleParser.canParse(","), "Era esperado falso, mas " + result780 + " <doubleParser.canParse(',')> é verdadeiro ")
chamada antiga: assertTrue(column.any())
nova chamada: assertTrue(column.any(), "Era esperado verdadeiro, mas " + result781 + " <column.any()> é falso")
chamada antiga: assertFalse(column.all())
nova chamada: assertFalse(column.all(), "Era esperado falso, mas " + result782 + " <column.all()> é verdadeiro ")
chamada antiga: assertTrue(filtered.all())
nova chamada: assertTrue(filtered.all(), "Era esperado verdadeiro, mas " + result783 + " <filtered.all()> é falso")
chamada antiga: assertEquals(column.size(), doubleColumn.size())
nova chamada: assertEquals(column.size(), doubleColumn.size(), "Era esperado valores iguais, mas " + result784 + " <column.size()> é diferente de " + result785 + " <doubleColumn.size()>")
chamada antiga: assertFalse(column.all())
nova chamada: assertFalse(column.all(), "Era esperado falso, mas " + result786 + " <column.all()> é verdadeiro ")
chamada antiga: assertEquals(2, filtered.size())
nova chamada: assertEquals(2, filtered.size(), "Era esperado valores iguais, mas  2 é diferente de " + result787 + " <filtered.size()>")
chamada antiga: assertFalse(column.all())
nova chamada: assertFalse(column.all(), "Era esperado falso, mas " + result788 + " <column.all()> é verdadeiro ")
chamada antiga: assertEquals(2, column.countMissing())
nova chamada: assertEquals(2, column.countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result789 + " <column.countMissing()>")
chamada antiga: assertFalse(column.none())
nova chamada: assertFalse(column.none(), "Era esperado falso, mas " + result790 + " <column.none()> é verdadeiro ")
chamada antiga: assertTrue(filtered.none())
nova chamada: assertTrue(filtered.none(), "Era esperado verdadeiro, mas " + result791 + " <filtered.none()> é falso")
chamada antiga: assertFalse(column.none())
nova chamada: assertFalse(column.none(), "Era esperado falso, mas " + result792 + " <column.none()> é verdadeiro ")
chamada antiga: assertTrue(column.none())
nova chamada: assertTrue(column.none(), "Era esperado verdadeiro, mas " + result793 + " <column.none()> é falso")
chamada antiga: assertEquals(2 * column.size(), column1.size())
nova chamada: assertEquals(2 * column.size(), column1.size(), "Era esperado valores iguais, mas  2 * column.size() é diferente de " + result794 + " <column1.size()>")
chamada antiga: assertEquals("No", column.getString(0))
nova chamada: assertEquals("No", column.getString(0), "Era esperado valores iguais, mas  'No' é diferente de " + result795 + " <column.getString(0)>")
chamada antiga: assertEquals("Yes", column.getString(5))
nova chamada: assertEquals("Yes", column.getString(5), "Era esperado valores iguais, mas  'Yes' é diferente de " + result796 + " <column.getString(5)>")
chamada antiga: assertEquals("IDK", column.getString(column.size() - 1))
nova chamada: assertEquals("IDK", column.getString(column.size() - 1), "Era esperado valores iguais, mas  'IDK' é diferente de " + result797 + " <column.getString(column.size() - 1)>")
chamada antiga: assertEquals(7, column.size())
nova chamada: assertEquals(7, column.size(), "Era esperado valores iguais, mas  7 é diferente de " + result798 + " <column.size()>")
chamada antiga: assertEquals(7, column.size())
nova chamada: assertEquals(7, column.size(), "Era esperado valores iguais, mas  7 é diferente de " + result799 + " <column.size()>")
chamada antiga: assertEquals(7, column.countTrue() + column.countFalse())
nova chamada: assertEquals(7, column.countTrue() + column.countFalse(), "Era esperado valores iguais, mas  7 é diferente de " + " column.countTrue() + column.countFalse()")
chamada antiga: assertEquals(2, column.countTrue())
nova chamada: assertEquals(2, column.countTrue(), "Era esperado valores iguais, mas  2 é diferente de " + result800 + " <column.countTrue()>")
chamada antiga: assertEquals(8, column.size())
nova chamada: assertEquals(8, column.size(), "Era esperado valores iguais, mas  8 é diferente de " + result801 + " <column.size()>")
chamada antiga: assertTrue(lastEntry())
nova chamada: assertTrue(lastEntry(), "Era esperado verdadeiro, mas " + result802 + " <lastEntry()> é falso")
chamada antiga: assertFalse(lastEntry())
nova chamada: assertFalse(lastEntry(), "Era esperado falso, mas " + result803 + " <lastEntry()> é verdadeiro ")
chamada antiga: assertTrue(lastEntry())
nova chamada: assertTrue(lastEntry(), "Era esperado verdadeiro, mas " + result804 + " <lastEntry()> é falso")
chamada antiga: assertFalse(lastEntry())
nova chamada: assertFalse(lastEntry(), "Era esperado falso, mas " + result805 + " <lastEntry()> é verdadeiro ")
chamada antiga: assertTrue(lastEntry())
nova chamada: assertTrue(lastEntry(), "Era esperado verdadeiro, mas " + result806 + " <lastEntry()> é falso")
chamada antiga: assertFalse(lastEntry())
nova chamada: assertFalse(lastEntry(), "Era esperado falso, mas " + result807 + " <lastEntry()> é verdadeiro ")
chamada antiga: assertTrue(lastEntry())
nova chamada: assertTrue(lastEntry(), "Era esperado verdadeiro, mas " + result808 + " <lastEntry()> é falso")
chamada antiga: assertFalse(lastEntry())
nova chamada: assertFalse(lastEntry(), "Era esperado falso, mas " + result809 + " <lastEntry()> é verdadeiro ")
chamada antiga: assertNull(column.get(column.size() - 1))
nova chamada: assertNull(column.get(column.size() - 1), "Era esperado nulo, mas " + result810 + " <column.get(column.size() - 1)> não é nulo")
chamada antiga: assertTrue(column.isMissing(column.size() - 1))
nova chamada: assertTrue(column.isMissing(column.size() - 1), "Era esperado verdadeiro, mas " + result811 + " <column.isMissing(column.size() - 1)> é falso")
chamada antiga: assertFalse(column.isMissing(column.size() - 1))
nova chamada: assertFalse(column.isMissing(column.size() - 1), "Era esperado falso, mas " + result812 + " <column.isMissing(column.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals("Boolean".toUpperCase(), column.type().name())
nova chamada: assertEquals("Boolean".toUpperCase(), column.type().name(), "Era esperado valores iguais, mas " + result813 + " <'Boolean'.toUpperCase()> é diferente de " + result814 + " <column.type().name()>")
chamada antiga: assertEquals("Boolean column: " + column.name(), column.toString())
nova chamada: assertEquals("Boolean column: " + column.name(), column.toString(), "Era esperado valores iguais, mas  'Boolean column: ' + column.name() é diferente de " + result815 + " <column.toString()>")
chamada antiga: assertEquals("Column: Test" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "true" + LINE_END + "true" + LINE_END + "false" + LINE_END, column.print())
nova chamada: assertEquals("Column: Test" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "false" + LINE_END + "true" + LINE_END + "true" + LINE_END + "false" + LINE_END, column.print(), "Era esperado valores iguais, mas  'Column: Test' + LINE_END + 'false' + LINE_END + 'false' + LINE_END + 'false' + LINE_END + 'false' + LINE_END + 'true' + LINE_END + 'true' + LINE_END + 'false' + LINE_END é diferente de " + result816 + " <column.print()>")
chamada antiga: assertEquals(2, summary.columnCount())
nova chamada: assertEquals(2, summary.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result817 + " <summary.columnCount()>")
chamada antiga: assertEquals(2, summary.rowCount())
nova chamada: assertEquals(2, summary.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result818 + " <summary.rowCount()>")
chamada antiga: assertEquals("false", summary.getUnformatted(0, 0))
nova chamada: assertEquals("false", summary.getUnformatted(0, 0), "Era esperado valores iguais, mas  'false' é diferente de " + result819 + " <summary.getUnformatted(0, 0)>")
chamada antiga: assertEquals("5.0", summary.getUnformatted(0, 1))
nova chamada: assertEquals("5.0", summary.getUnformatted(0, 1), "Era esperado valores iguais, mas  '5.0' é diferente de " + result820 + " <summary.getUnformatted(0, 1)>")
chamada antiga: assertEquals("true", summary.getUnformatted(1, 0))
nova chamada: assertEquals("true", summary.getUnformatted(1, 0), "Era esperado valores iguais, mas  'true' é diferente de " + result821 + " <summary.getUnformatted(1, 0)>")
chamada antiga: assertEquals("2.0", summary.getUnformatted(1, 1))
nova chamada: assertEquals("2.0", summary.getUnformatted(1, 1), "Era esperado valores iguais, mas  '2.0' é diferente de " + result822 + " <summary.getUnformatted(1, 1)>")
chamada antiga: assertEquals(3, result)
nova chamada: assertEquals(3, result, "Era esperado valores iguais, mas  3 é diferente de " + " result")
chamada antiga: assertEquals(2, summary.columnCount())
nova chamada: assertEquals(2, summary.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result823 + " <summary.columnCount()>")
chamada antiga: assertEquals(2, summary.rowCount())
nova chamada: assertEquals(2, summary.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result824 + " <summary.rowCount()>")
chamada antiga: assertEquals("false", summary.getUnformatted(0, 0))
nova chamada: assertEquals("false", summary.getUnformatted(0, 0), "Era esperado valores iguais, mas  'false' é diferente de " + result825 + " <summary.getUnformatted(0, 0)>")
chamada antiga: assertEquals("2.0", summary.getUnformatted(0, 1))
nova chamada: assertEquals("2.0", summary.getUnformatted(0, 1), "Era esperado valores iguais, mas  '2.0' é diferente de " + result826 + " <summary.getUnformatted(0, 1)>")
chamada antiga: assertEquals("true", summary.getUnformatted(1, 0))
nova chamada: assertEquals("true", summary.getUnformatted(1, 0), "Era esperado valores iguais, mas  'true' é diferente de " + result827 + " <summary.getUnformatted(1, 0)>")
chamada antiga: assertEquals("5.0", summary.getUnformatted(1, 1))
nova chamada: assertEquals("5.0", summary.getUnformatted(1, 1), "Era esperado valores iguais, mas  '5.0' é diferente de " + result828 + " <summary.getUnformatted(1, 1)>")
chamada antiga: assertEquals(5, column.isFalse().size())
nova chamada: assertEquals(5, column.isFalse().size(), "Era esperado valores iguais, mas  5 é diferente de " + result829 + " <column.isFalse().size()>")
chamada antiga: assertEquals(2, column.isTrue().size())
nova chamada: assertEquals(2, column.isTrue().size(), "Era esperado valores iguais, mas  2 é diferente de " + result830 + " <column.isTrue().size()>")
chamada antiga: assertEquals(7, column.isNotMissing().size())
nova chamada: assertEquals(7, column.isNotMissing().size(), "Era esperado valores iguais, mas  7 é diferente de " + result831 + " <column.isNotMissing().size()>")
chamada antiga: assertEquals(0, column.isMissing().size())
nova chamada: assertEquals(0, column.isMissing().size(), "Era esperado valores iguais, mas  0 é diferente de " + result832 + " <column.isMissing().size()>")
chamada antiga: assertEquals(2, result.rowCount())
nova chamada: assertEquals(2, result.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result833 + " <result.rowCount()>")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result834 + " <result.rowCount()>")
chamada antiga: assertEquals("52", result.getString(0, "Test"))
nova chamada: assertEquals("52", result.getString(0, "Test"), "Era esperado valores iguais, mas  '52' é diferente de " + result835 + " <result.getString(0, 'Test')>")
chamada antiga: assertTrue(count < 575_000)
nova chamada: assertTrue(count < 575_000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(count > 425_000)
nova chamada: assertTrue(count > 425_000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("$48,392.29", numberColumn.getString(0))
nova chamada: assertEquals("$48,392.29", numberColumn.getString(0), "Era esperado valores iguais, mas  '$48,392.29' é diferente de " + result836 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals("48,392", numberColumn.getString(0))
nova chamada: assertEquals("48,392", numberColumn.getString(0), "Era esperado valores iguais, mas  '48,392' é diferente de " + result837 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals("test strings", sc.name())
nova chamada: assertEquals("test strings", sc.name(), "Era esperado valores iguais, mas  'test strings' é diferente de " + result838 + " <sc.name()>")
chamada antiga: assertEquals("48392.2932", sc.get(0))
nova chamada: assertEquals("48392.2932", sc.get(0), "Era esperado valores iguais, mas  '48392.2932' é diferente de " + result839 + " <sc.get(0)>")
chamada antiga: assertEquals("test strings", sc.name())
nova chamada: assertEquals("test strings", sc.name(), "Era esperado valores iguais, mas  'test strings' é diferente de " + result840 + " <sc.name()>")
chamada antiga: assertEquals("48392.2932", sc.get(0))
nova chamada: assertEquals("48392.2932", sc.get(0), "Era esperado valores iguais, mas  '48392.2932' é diferente de " + result841 + " <sc.get(0)>")
chamada antiga: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
nova chamada: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1), "Era esperado valores iguais, mas " + result842 + " <StringColumnType.missingValueIndicator()> é diferente de " + result843 + " <sc.get(1)>")
chamada antiga: assertEquals("test strings", sc.name())
nova chamada: assertEquals("test strings", sc.name(), "Era esperado valores iguais, mas  'test strings' é diferente de " + result844 + " <sc.name()>")
chamada antiga: assertEquals("48392", sc.get(0))
nova chamada: assertEquals("48392", sc.get(0), "Era esperado valores iguais, mas  '48392' é diferente de " + result845 + " <sc.get(0)>")
chamada antiga: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1))
nova chamada: assertEquals(StringColumnType.missingValueIndicator(), sc.get(1), "Era esperado valores iguais, mas " + result846 + " <StringColumnType.missingValueIndicator()> é diferente de " + result847 + " <sc.get(1)>")
chamada antiga: assertEquals("48392", numberColumn.getString(0))
nova chamada: assertEquals("48392", numberColumn.getString(0), "Era esperado valores iguais, mas  '48392' é diferente de " + result848 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals("48,392.293", numberColumn.getString(0))
nova chamada: assertEquals("48,392.293", numberColumn.getString(0), "Era esperado valores iguais, mas  '48,392.293' é diferente de " + result849 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals("29.3%", numberColumn.getString(0))
nova chamada: assertEquals("29.3%", numberColumn.getString(0), "Era esperado valores iguais, mas  '29.3%' é diferente de " + result850 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals("12423", numberColumn.getString(numberColumn.size() - 1))
nova chamada: assertEquals("12423", numberColumn.getString(numberColumn.size() - 1), "Era esperado valores iguais, mas  '12423' é diferente de " + result851 + " <numberColumn.getString(numberColumn.size() - 1)>")
chamada antiga: assertTrue(count < 575_000)
nova chamada: assertTrue(count < 575_000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(count > 425_000)
nova chamada: assertTrue(count > 425_000, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(StatUtils.min(doublesA) >= StatUtils.max(doublesB))
nova chamada: assertTrue(StatUtils.min(doublesA) >= StatUtils.max(doublesB), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(doubles.isEmpty())
nova chamada: assertFalse(doubles.isEmpty(), "Era esperado falso, mas " + result852 + " <doubles.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(doubles.isEmpty())
nova chamada: assertTrue(doubles.isEmpty(), "Era esperado verdadeiro, mas " + result853 + " <doubles.isEmpty()> é falso")
chamada antiga: assertEquals(0, doubles.countMissing())
nova chamada: assertEquals(0, doubles.countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result854 + " <doubles.countMissing()>")
chamada antiga: assertEquals(10, doubles.countMissing())
nova chamada: assertEquals(10, doubles.countMissing(), "Era esperado valores iguais, mas  10 é diferente de " + result855 + " <doubles.countMissing()>")
chamada antiga: assertEquals(uniques.length + 1, doubles.countUnique())
nova chamada: assertEquals(uniques.length + 1, doubles.countUnique(), "Era esperado valores iguais, mas  uniques.length + 1 é diferente de " + result856 + " <doubles.countUnique()>")
chamada antiga: assertEquals(notUniques.length - 1, doubles.countUnique())
nova chamada: assertEquals(notUniques.length - 1, doubles.countUnique(), "Era esperado valores iguais, mas  notUniques.length - 1 é diferente de " + result857 + " <doubles.countUnique()>")
chamada antiga: assertEquals(3, doubles.countUnique())
nova chamada: assertEquals(3, doubles.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result858 + " <doubles.countUnique()>")
chamada antiga: assertEquals(3, doubles.unique().size())
nova chamada: assertEquals(3, doubles.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result859 + " <doubles.unique().size()>")
chamada antiga: assertEquals(3, floats.countUnique())
nova chamada: assertEquals(3, floats.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result860 + " <floats.countUnique()>")
chamada antiga: assertEquals(3, floats.unique().size())
nova chamada: assertEquals(3, floats.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result861 + " <floats.unique().size()>")
chamada antiga: assertEquals(3, ints.countUnique())
nova chamada: assertEquals(3, ints.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result862 + " <ints.countUnique()>")
chamada antiga: assertEquals(3, ints.unique().size())
nova chamada: assertEquals(3, ints.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result863 + " <ints.unique().size()>")
chamada antiga: assertEquals(3, longs.countUnique())
nova chamada: assertEquals(3, longs.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result864 + " <longs.countUnique()>")
chamada antiga: assertEquals(3, longs.unique().size())
nova chamada: assertEquals(3, longs.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result865 + " <longs.unique().size()>")
chamada antiga: assertEquals(3, shorts.countUnique())
nova chamada: assertEquals(3, shorts.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result866 + " <shorts.countUnique()>")
chamada antiga: assertEquals(3, shorts.unique().size())
nova chamada: assertEquals(3, shorts.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result867 + " <shorts.unique().size()>")
chamada antiga: assertEquals(uniques.length, doubles.unique().size())
nova chamada: assertEquals(uniques.length, doubles.unique().size(), "Era esperado valores iguais, mas  uniques.length é diferente de " + result868 + " <doubles.unique().size()>")
chamada antiga: assertEquals(notUniques.length - 1, doubles.unique().size())
nova chamada: assertEquals(notUniques.length - 1, doubles.unique().size(), "Era esperado valores iguais, mas  notUniques.length - 1 é diferente de " + result869 + " <doubles.unique().size()>")
chamada antiga: assertEquals(0, doubles.isMissing().size())
nova chamada: assertEquals(0, doubles.isMissing().size(), "Era esperado valores iguais, mas  0 é diferente de " + result870 + " <doubles.isMissing().size()>")
chamada antiga: assertEquals(10, doubles.isNotMissing().size())
nova chamada: assertEquals(10, doubles.isNotMissing().size(), "Era esperado valores iguais, mas  10 é diferente de " + result871 + " <doubles.isNotMissing().size()>")
chamada antiga: assertEquals(10, doubles.isMissing().size())
nova chamada: assertEquals(10, doubles.isMissing().size(), "Era esperado valores iguais, mas  10 é diferente de " + result872 + " <doubles.isMissing().size()>")
chamada antiga: assertEquals(0, doubles.isNotMissing().size())
nova chamada: assertEquals(0, doubles.isNotMissing().size(), "Era esperado valores iguais, mas  0 é diferente de " + result873 + " <doubles.isNotMissing().size()>")
chamada antiga: assertTrue(empty.isEmpty())
nova chamada: assertTrue(empty.isEmpty(), "Era esperado verdadeiro, mas " + result874 + " <empty.isEmpty()> é falso")
chamada antiga: assertEquals(doubles.name(), empty.name())
nova chamada: assertEquals(doubles.name(), empty.name(), "Era esperado valores iguais, mas " + result875 + " <doubles.name()> é diferente de " + result876 + " <empty.name()>")
chamada antiga: assertEquals(0, doubles.size())
nova chamada: assertEquals(0, doubles.size(), "Era esperado valores iguais, mas  0 é diferente de " + result877 + " <doubles.size()>")
chamada antiga: assertEquals(100, doubles.size())
nova chamada: assertEquals(100, doubles.size(), "Era esperado valores iguais, mas  100 é diferente de " + result878 + " <doubles.size()>")
chamada antiga: assertEquals(0, doubles.size())
nova chamada: assertEquals(0, doubles.size(), "Era esperado valores iguais, mas  0 é diferente de " + result879 + " <doubles.size()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, doubles.type())
nova chamada: assertEquals(ColumnType.DOUBLE, doubles.type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result880 + " <doubles.type()>")
chamada antiga: assertTrue(computeAndValidateDifference(originalValues, expectedValues))
nova chamada: assertTrue(computeAndValidateDifference(originalValues, expectedValues), "Era esperado verdadeiro, mas " + result881 + " <computeAndValidateDifference(originalValues, expectedValues)> é falso")
chamada antiga: assertTrue(computeAndValidateDifference(originalValues, expectedValues))
nova chamada: assertTrue(computeAndValidateDifference(originalValues, expectedValues), "Era esperado verdadeiro, mas " + result882 + " <computeAndValidateDifference(originalValues, expectedValues)> é falso")
chamada antiga: assertTrue(validateEquality(expected, difference))
nova chamada: assertTrue(validateEquality(expected, difference), "Era esperado verdadeiro, mas " + result883 + " <validateEquality(expected, difference)> é falso")
chamada antiga: assertTrue(validateEquality(expected, difference))
nova chamada: assertTrue(validateEquality(expected, difference), "Era esperado verdadeiro, mas " + result884 + " <validateEquality(expected, difference)> é falso")
chamada antiga: assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD, 2))
nova chamada: assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD, 2), "Era esperado valores iguais, mas  2 é diferente de " + result885 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isPositiveOrZeroD, 2)>")
chamada antiga: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD, 2))
nova chamada: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD, 2), "Era esperado valores iguais, mas  0 é diferente de " + result886 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isNegativeD, 2)>")
chamada antiga: assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD))
nova chamada: assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZeroD), "Era esperado valores iguais, mas  3 é diferente de " + result887 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isPositiveOrZeroD)>")
chamada antiga: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD))
nova chamada: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegativeD), "Era esperado valores iguais, mas  0 é diferente de " + result888 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isNegativeD)>")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZeroD))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZeroD), "Era esperado verdadeiro, mas " + result889 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).allMatch(isPositiveOrZeroD)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZeroD))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZeroD), "Era esperado falso, mas " + result890 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).allMatch(isPositiveOrZeroD)> é verdadeiro ")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZeroD))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZeroD), "Era esperado falso, mas " + result891 + " <DoubleColumn.create('t1', new double[] { 1, 0, -1 }).allMatch(isPositiveOrZeroD)> é verdadeiro ")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZeroD))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZeroD), "Era esperado verdadeiro, mas " + result892 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZeroD)> é falso")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZeroD))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZeroD), "Era esperado verdadeiro, mas " + result893 + " <DoubleColumn.create('t1', new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZeroD)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegativeD))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegativeD), "Era esperado falso, mas " + result894 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).anyMatch(isNegativeD)> é verdadeiro ")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegativeD))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegativeD), "Era esperado verdadeiro, mas " + result895 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).noneMatch(isNegativeD)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegativeD))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegativeD), "Era esperado falso, mas " + result896 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).noneMatch(isNegativeD)> é verdadeiro ")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegativeD))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegativeD), "Era esperado falso, mas " + result897 + " <DoubleColumn.create('t1', new double[] { 1, 0, -1 }).noneMatch(isNegativeD)> é verdadeiro ")
chamada antiga: assertEquals(expected.length, column.size())
nova chamada: assertEquals(expected.length, column.size(), "Era esperado valores iguais, mas  expected.length é diferente de " + result898 + " <column.size()>")
chamada antiga: assertEquals("$48,392.29", numberColumn.getString(0))
nova chamada: assertEquals("$48,392.29", numberColumn.getString(0), "Era esperado valores iguais, mas  '$48,392.29' é diferente de " + result899 + " <numberColumn.getString(0)>")
chamada antiga: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get())
nova chamada: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get(), "Era esperado valores iguais, mas " + result900 + " <Double.valueOf(1.0)> é diferente de " + result901 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).max(Double::compare).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent(), "Era esperado falso, mas " + result902 + " <DoubleColumn.create('t1').max((d1, d2) -> (int) (d1 - d2)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get())
nova chamada: assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get(), "Era esperado valores iguais, mas " + result903 + " <Double.valueOf(-1.0)> é diferente de " + result904 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).min(Double::compare).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent(), "Era esperado falso, mas " + result905 + " <DoubleColumn.create('t1').min((d1, d2) -> (int) (d1 - d2)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sumD).get())
nova chamada: assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sumD).get(), "Era esperado valores iguais, mas " + result906 + " <Double.valueOf(0.0)> é diferente de " + result907 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).reduce(sumD).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sumD).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sumD).isPresent(), "Era esperado falso, mas " + result908 + " <DoubleColumn.create('t1', new double[] {}).reduce(sumD).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(2, instanceColumn.isAfter(baselineInst).get(0))
nova chamada: assertEquals(2, instanceColumn.isAfter(baselineInst).get(0), "Era esperado valores iguais, mas  2 é diferente de " + result909 + " <instanceColumn.isAfter(baselineInst).get(0)>")
chamada antiga: assertEquals(0, instanceColumn.isBefore(baselineInst).get(0))
nova chamada: assertEquals(0, instanceColumn.isBefore(baselineInst).get(0), "Era esperado valores iguais, mas  0 é diferente de " + result910 + " <instanceColumn.isBefore(baselineInst).get(0)>")
chamada antiga: assertEquals(1, instanceColumn.isBefore(afterInst).get(1))
nova chamada: assertEquals(1, instanceColumn.isBefore(afterInst).get(1), "Era esperado valores iguais, mas  1 é diferente de " + result911 + " <instanceColumn.isBefore(afterInst).get(1)>")
chamada antiga: assertEquals(2, instanceColumn.isEqualTo(afterInst).get(0))
nova chamada: assertEquals(2, instanceColumn.isEqualTo(afterInst).get(0), "Era esperado valores iguais, mas  2 é diferente de " + result912 + " <instanceColumn.isEqualTo(afterInst).get(0)>")
chamada antiga: assertEquals(3, instanceColumn.isMissing().get(0))
nova chamada: assertEquals(3, instanceColumn.isMissing().get(0), "Era esperado valores iguais, mas  3 é diferente de " + result913 + " <instanceColumn.isMissing().get(0)>")
chamada antiga: assertEquals(0, instanceColumn.isNotMissing().get(0))
nova chamada: assertEquals(0, instanceColumn.isNotMissing().get(0), "Era esperado valores iguais, mas  0 é diferente de " + result914 + " <instanceColumn.isNotMissing().get(0)>")
chamada antiga: assertEquals(1, instanceColumn.isNotMissing().get(1))
nova chamada: assertEquals(1, instanceColumn.isNotMissing().get(1), "Era esperado valores iguais, mas  1 é diferente de " + result915 + " <instanceColumn.isNotMissing().get(1)>")
chamada antiga: assertEquals(2, instanceColumn.isNotMissing().get(2))
nova chamada: assertEquals(2, instanceColumn.isNotMissing().get(2), "Era esperado valores iguais, mas  2 é diferente de " + result916 + " <instanceColumn.isNotMissing().get(2)>")
chamada antiga: assertEquals(3, column1.countUnique())
nova chamada: assertEquals(3, column1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result917 + " <column1.countUnique()>")
chamada antiga: assertTrue(column1.isMissing(0))
nova chamada: assertTrue(column1.isMissing(0), "Era esperado verdadeiro, mas " + result918 + " <column1.isMissing(0)> é falso")
chamada antiga: assertArrayEquals(new double[] { 2.0 }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 2.0 }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 2.0 } é diferente de " + result919 + " <col.asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 2.0, 6.0 }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 2.0, 6.0 }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 2.0, 6.0 } é diferente de " + result920 + " <col.asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, arr)
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, arr, "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 } é diferente de " + " arr")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 3.0, 4.0 } é diferente de " + result921 + " <col.asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0 }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 3.0, 4.0 } é diferente de " + result922 + " <col.asDoubleArray()>")
chamada antiga: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, uniq.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 }, uniq.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { 1.0, 2.0, 3.0, 4.0, 5.0 } é diferente de " + result923 + " <uniq.asDoubleArray()>")
chamada antiga: assertTrue(col.isMissing(col.size() - 1))
nova chamada: assertTrue(col.isMissing(col.size() - 1), "Era esperado verdadeiro, mas " + result924 + " <col.isMissing(col.size() - 1)> é falso")
chamada antiga: assertEquals(3, c.asSet().size())
nova chamada: assertEquals(3, c.asSet().size(), "Era esperado valores iguais, mas  3 é diferente de " + result925 + " <c.asSet().size()>")
chamada antiga: assertTrue(c.asSet().contains(4.0))
nova chamada: assertTrue(c.asSet().contains(4.0), "Era esperado verdadeiro, mas " + result926 + " <c.asSet().contains(4.0)> é falso")
chamada antiga: assertEquals(LocalTime.of(5, 15, 30), column1.min())
nova chamada: assertEquals(LocalTime.of(5, 15, 30), column1.min(), "Era esperado valores iguais, mas " + result927 + " <LocalTime.of(5, 15, 30)> é diferente de " + result928 + " <column1.min()>")
chamada antiga: assertEquals(LocalTime.of(10, 15, 30), column1.max())
nova chamada: assertEquals(LocalTime.of(10, 15, 30), column1.max(), "Era esperado valores iguais, mas " + result929 + " <LocalTime.of(10, 15, 30)> é diferente de " + result930 + " <column1.max()>")
chamada antiga: assertTrue(column1.contains(LocalTime.of(5, 15, 30)))
nova chamada: assertTrue(column1.contains(LocalTime.of(5, 15, 30)), "Era esperado verdadeiro, mas " + result931 + " <column1.contains(LocalTime.of(5, 15, 30))> é falso")
chamada antiga: assertTrue(column1.contains(LocalTime.of(10, 15, 30)))
nova chamada: assertTrue(column1.contains(LocalTime.of(10, 15, 30)), "Era esperado verdadeiro, mas " + result932 + " <column1.contains(LocalTime.of(10, 15, 30))> é falso")
chamada antiga: assertTrue(bottom.contains(LocalTime.of(0, 4, 2)))
nova chamada: assertTrue(bottom.contains(LocalTime.of(0, 4, 2)), "Era esperado verdadeiro, mas " + result933 + " <bottom.contains(LocalTime.of(0, 4, 2))> é falso")
chamada antiga: assertTrue(bottom.contains(LocalTime.of(3, 6, 2)))
nova chamada: assertTrue(bottom.contains(LocalTime.of(3, 6, 2)), "Era esperado verdadeiro, mas " + result934 + " <bottom.contains(LocalTime.of(3, 6, 2))> é falso")
chamada antiga: assertTrue(bottom.contains(LocalTime.of(4, 4, 2)))
nova chamada: assertTrue(bottom.contains(LocalTime.of(4, 4, 2)), "Era esperado verdadeiro, mas " + result935 + " <bottom.contains(LocalTime.of(4, 4, 2))> é falso")
chamada antiga: assertEquals(3, bottom.size())
nova chamada: assertEquals(3, bottom.size(), "Era esperado valores iguais, mas  3 é diferente de " + result936 + " <bottom.size()>")
chamada antiga: assertTrue(top.contains(LocalTime.of(18, 4, 2)))
nova chamada: assertTrue(top.contains(LocalTime.of(18, 4, 2)), "Era esperado verdadeiro, mas " + result937 + " <top.contains(LocalTime.of(18, 4, 2))> é falso")
chamada antiga: assertTrue(top.contains(LocalTime.of(14, 4, 2)))
nova chamada: assertTrue(top.contains(LocalTime.of(14, 4, 2)), "Era esperado verdadeiro, mas " + result938 + " <top.contains(LocalTime.of(14, 4, 2))> é falso")
chamada antiga: assertTrue(top.contains(LocalTime.of(15, 4, 2)))
nova chamada: assertTrue(top.contains(LocalTime.of(15, 4, 2)), "Era esperado verdadeiro, mas " + result939 + " <top.contains(LocalTime.of(15, 4, 2))> é falso")
chamada antiga: assertEquals(3, top.size())
nova chamada: assertEquals(3, top.size(), "Era esperado valores iguais, mas  3 é diferente de " + result940 + " <top.size()>")
chamada antiga: assertNull(sortedA.get(0))
nova chamada: assertNull(sortedA.get(0), "Era esperado nulo, mas " + result941 + " <sortedA.get(0)> não é nulo")
chamada antiga: assertEquals(LocalTime.of(0, 4, 2), sortedA.get(1))
nova chamada: assertEquals(LocalTime.of(0, 4, 2), sortedA.get(1), "Era esperado valores iguais, mas " + result942 + " <LocalTime.of(0, 4, 2)> é diferente de " + result943 + " <sortedA.get(1)>")
chamada antiga: assertEquals(LocalTime.of(3, 6, 2), sortedA.get(2))
nova chamada: assertEquals(LocalTime.of(3, 6, 2), sortedA.get(2), "Era esperado valores iguais, mas " + result944 + " <LocalTime.of(3, 6, 2)> é diferente de " + result945 + " <sortedA.get(2)>")
chamada antiga: assertEquals(top, sortedD)
nova chamada: assertEquals(top, sortedD, "Era esperado valores iguais, mas  top é diferente de " + " sortedD")
chamada antiga: assertEquals(10, column1.size())
nova chamada: assertEquals(10, column1.size(), "Era esperado valores iguais, mas  10 é diferente de " + result946 + " <column1.size()>")
chamada antiga: assertTrue(column1.contains(LocalTime.of(14, 4, 2)))
nova chamada: assertTrue(column1.contains(LocalTime.of(14, 4, 2)), "Era esperado verdadeiro, mas " + result947 + " <column1.contains(LocalTime.of(14, 4, 2))> é falso")
chamada antiga: assertEquals(4, column1.size())
nova chamada: assertEquals(4, column1.size(), "Era esperado valores iguais, mas  4 é diferente de " + result948 + " <column1.size()>")
chamada antiga: assertTrue(column1.isMissing(column1.size() - 1))
nova chamada: assertTrue(column1.isMissing(column1.size() - 1), "Era esperado verdadeiro, mas " + result949 + " <column1.isMissing(column1.size() - 1)> é falso")
chamada antiga: assertEquals(LocalTime.NOON, column1.get(0))
nova chamada: assertEquals(LocalTime.NOON, column1.get(0), "Era esperado valores iguais, mas  LocalTime.NOON é diferente de " + result950 + " <column1.get(0)>")
chamada antiga: assertEquals(LocalTime.NOON, column1.get(1))
nova chamada: assertEquals(LocalTime.NOON, column1.get(1), "Era esperado valores iguais, mas  LocalTime.NOON é diferente de " + result951 + " <column1.get(1)>")
chamada antiga: assertNotEquals(LocalTime.NOON, column1.get(2))
nova chamada: assertNotEquals(LocalTime.NOON, column1.get(2), "Era esperado valores diferentes, mas  LocalTime.NOON é igual a " + result952 + " <column1.get(2)>")
chamada antiga: assertNotEquals(LocalTime.NOON, column1.get(3))
nova chamada: assertNotEquals(LocalTime.NOON, column1.get(3), "Era esperado valores diferentes, mas  LocalTime.NOON é igual a " + result953 + " <column1.get(3)>")
chamada antiga: assertEquals(3, column1.size())
nova chamada: assertEquals(3, column1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result954 + " <column1.size()>")
chamada antiga: assertEquals(column1.name(), column2.name())
nova chamada: assertEquals(column1.name(), column2.name(), "Era esperado valores iguais, mas " + result955 + " <column1.name()> é diferente de " + result956 + " <column2.name()>")
chamada antiga: assertEquals(11, column1.size())
nova chamada: assertEquals(11, column1.size(), "Era esperado valores iguais, mas  11 é diferente de " + result957 + " <column1.size()>")
chamada antiga: assertEquals(0, column1.size())
nova chamada: assertEquals(0, column1.size(), "Era esperado valores iguais, mas  0 é diferente de " + result958 + " <column1.size()>")
chamada antiga: assertEquals("11", t.getString(0, "Value"))
nova chamada: assertEquals("11", t.getString(0, "Value"), "Era esperado valores iguais, mas  '11' é diferente de " + result959 + " <t.getString(0, 'Value')>")
chamada antiga: assertEquals("1", t.getString(1, "Value"))
nova chamada: assertEquals("1", t.getString(1, "Value"), "Era esperado valores iguais, mas  '1' é diferente de " + result960 + " <t.getString(1, 'Value')>")
chamada antiga: assertEquals("00:04:02", t.getString(2, "Value"))
nova chamada: assertEquals("00:04:02", t.getString(2, "Value"), "Era esperado valores iguais, mas  '00:04:02' é diferente de " + result961 + " <t.getString(2, 'Value')>")
chamada antiga: assertEquals("18:04:02", t.getString(3, "Value"))
nova chamada: assertEquals("18:04:02", t.getString(3, "Value"), "Era esperado valores iguais, mas  '18:04:02' é diferente de " + result962 + " <t.getString(3, 'Value')>")
chamada antiga: assertEquals(4, column1.byteSize())
nova chamada: assertEquals(4, column1.byteSize(), "Era esperado valores iguais, mas  4 é diferente de " + result963 + " <column1.byteSize()>")
chamada antiga: assertEquals(column1.getPackedTime(0), ByteBuffer.wrap(column1.asBytes(0)).getInt())
nova chamada: assertEquals(column1.getPackedTime(0), ByteBuffer.wrap(column1.asBytes(0)).getInt(), "Era esperado valores iguais, mas " + result964 + " <column1.getPackedTime(0)> é diferente de " + result965 + " <ByteBuffer.wrap(column1.asBytes(0)).getInt()>")
chamada antiga: assertEquals(3, column1.countMissing())
nova chamada: assertEquals(3, column1.countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result966 + " <column1.countMissing()>")
chamada antiga: assertEquals(3, s.size())
nova chamada: assertEquals(3, s.size(), "Era esperado valores iguais, mas  3 é diferente de " + result967 + " <s.size()>")
chamada antiga: assertEquals(10, s2.size())
nova chamada: assertEquals(10, s2.size(), "Era esperado valores iguais, mas  10 é diferente de " + result968 + " <s2.size()>")
chamada antiga: assertEquals(11, column1.countUnique())
nova chamada: assertEquals(11, column1.countUnique(), "Era esperado valores iguais, mas  11 é diferente de " + result969 + " <column1.countUnique()>")
chamada antiga: assertEquals(3, column1.countUnique())
nova chamada: assertEquals(3, column1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result970 + " <column1.countUnique()>")
chamada antiga: assertEquals(3, column1.unique().size())
nova chamada: assertEquals(3, column1.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result971 + " <column1.unique().size()>")
chamada antiga: assertEquals(column1.get(0).getHour(), column2.get(0).getHour())
nova chamada: assertEquals(column1.get(0).getHour(), column2.get(0).getHour(), "Era esperado valores iguais, mas " + result972 + " <column1.get(0).getHour()> é diferente de " + result973 + " <column2.get(0).getHour()>")
chamada antiga: assertEquals(0, column2.get(0).getMinute())
nova chamada: assertEquals(0, column2.get(0).getMinute(), "Era esperado valores iguais, mas  0 é diferente de " + result974 + " <column2.get(0).getMinute()>")
chamada antiga: assertEquals(0, column2.get(0).getSecond())
nova chamada: assertEquals(0, column2.get(0).getSecond(), "Era esperado valores iguais, mas  0 é diferente de " + result975 + " <column2.get(0).getSecond()>")
chamada antiga: assertEquals(0, column2.get(0).getNano())
nova chamada: assertEquals(0, column2.get(0).getNano(), "Era esperado valores iguais, mas  0 é diferente de " + result976 + " <column2.get(0).getNano()>")
chamada antiga: assertEquals(TimeColumnType.missingValueIndicator(), column2.getIntInternal(2))
nova chamada: assertEquals(TimeColumnType.missingValueIndicator(), column2.getIntInternal(2), "Era esperado valores iguais, mas " + result977 + " <TimeColumnType.missingValueIndicator()> é diferente de " + result978 + " <column2.getIntInternal(2)>")
chamada antiga: assertNull(second.get(2))
nova chamada: assertNull(second.get(2), "Era esperado nulo, mas " + result979 + " <second.get(2)> não é nulo")
chamada antiga: assertNull(minute.get(2))
nova chamada: assertNull(minute.get(2), "Era esperado nulo, mas " + result980 + " <minute.get(2)> não é nulo")
chamada antiga: assertNull(col.get(0))
nova chamada: assertNull(col.get(0), "Era esperado nulo, mas " + result981 + " <col.get(0)> não é nulo")
chamada antiga: assertEquals(column1, returned)
nova chamada: assertEquals(column1, returned, "Era esperado valores iguais, mas  column1 é diferente de " + " returned")
chamada antiga: assertEquals(1, returned.size())
nova chamada: assertEquals(1, returned.size(), "Era esperado valores iguais, mas  1 é diferente de " + result982 + " <returned.size()>")
chamada antiga: assertTrue(returned.isMissing(0))
nova chamada: assertTrue(returned.isMissing(0), "Era esperado verdadeiro, mas " + result983 + " <returned.isMissing(0)> é falso")
chamada antiga: assertEquals(column1, returned)
nova chamada: assertEquals(column1, returned, "Era esperado valores iguais, mas  column1 é diferente de " + " returned")
chamada antiga: assertEquals(1, returned.size())
nova chamada: assertEquals(1, returned.size(), "Era esperado valores iguais, mas  1 é diferente de " + result984 + " <returned.size()>")
chamada antiga: assertEquals(LocalTime.of(9, 10, 42), returned.get(0))
nova chamada: assertEquals(LocalTime.of(9, 10, 42), returned.get(0), "Era esperado valores iguais, mas " + result985 + " <LocalTime.of(9, 10, 42)> é diferente de " + result986 + " <returned.get(0)>")
chamada antiga: assertEquals(column1, returned)
nova chamada: assertEquals(column1, returned, "Era esperado valores iguais, mas  column1 é diferente de " + " returned")
chamada antiga: assertEquals(1, returned.size())
nova chamada: assertEquals(1, returned.size(), "Era esperado valores iguais, mas  1 é diferente de " + result987 + " <returned.size()>")
chamada antiga: assertEquals(LocalTime.of(9, 10, 42), returned.get(0))
nova chamada: assertEquals(LocalTime.of(9, 10, 42), returned.get(0), "Era esperado valores iguais, mas " + result988 + " <LocalTime.of(9, 10, 42)> é diferente de " + result989 + " <returned.get(0)>")
chamada antiga: assertEquals(expected, (int) numberColumn.min())
nova chamada: assertEquals(expected, (int) numberColumn.min(), "Era esperado valores iguais, mas  expected é diferente de " + " (int) numberColumn.min()")
chamada antiga: assertEquals(expected, (int) numberColumn.max())
nova chamada: assertEquals(expected, (int) numberColumn.max(), "Era esperado valores iguais, mas  expected é diferente de " + " (int) numberColumn.max()")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result990 + " <result.size()>")
chamada antiga: assertTrue(shortColumn.where(result).contains((short) 4))
nova chamada: assertTrue(shortColumn.where(result).contains((short) 4), "Era esperado verdadeiro, mas " + result991 + " <shortColumn.where(result).contains((short) 4)> é falso")
chamada antiga: assertEquals(5, result.size())
nova chamada: assertEquals(5, result.size(), "Era esperado valores iguais, mas  5 é diferente de " + result992 + " <result.size()>")
chamada antiga: assertTrue(shortColumn.where(result).contains((short) 5))
nova chamada: assertTrue(shortColumn.where(result).contains((short) 5), "Era esperado verdadeiro, mas " + result993 + " <shortColumn.where(result).contains((short) 5)> é falso")
chamada antiga: assertTrue(shortColumn.isMissing(shortColumn.size() - 1))
nova chamada: assertTrue(shortColumn.isMissing(shortColumn.size() - 1), "Era esperado verdadeiro, mas " + result994 + " <shortColumn.isMissing(shortColumn.size() - 1)> é falso")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result995 + " <result.size()>")
chamada antiga: assertTrue(longColumn.where(result).contains(4L))
nova chamada: assertTrue(longColumn.where(result).contains(4L), "Era esperado verdadeiro, mas " + result996 + " <longColumn.where(result).contains(4L)> é falso")
chamada antiga: assertEquals(5, result.size())
nova chamada: assertEquals(5, result.size(), "Era esperado valores iguais, mas  5 é diferente de " + result997 + " <result.size()>")
chamada antiga: assertTrue(longColumn.where(result).contains(5L))
nova chamada: assertTrue(longColumn.where(result).contains(5L), "Era esperado verdadeiro, mas " + result998 + " <longColumn.where(result).contains(5L)> é falso")
chamada antiga: assertTrue(longColumn.isMissing(longColumn.size() - 1))
nova chamada: assertTrue(longColumn.isMissing(longColumn.size() - 1), "Era esperado verdadeiro, mas " + result999 + " <longColumn.isMissing(longColumn.size() - 1)> é falso")
chamada antiga: assertEquals(4, column.countByCategory().nCol("Count").sum())
nova chamada: assertEquals(4, column.countByCategory().nCol("Count").sum(), "Era esperado valores iguais, mas  4 é diferente de " + result1000 + " <column.countByCategory().nCol('Count').sum()>")
chamada antiga: assertEquals(49, result.rowCount())
nova chamada: assertEquals(49, result.rowCount(), "Era esperado valores iguais, mas  49 é diferente de " + result1001 + " <result.rowCount()>")
chamada antiga: assertEquals(3, result.columnCount())
nova chamada: assertEquals(3, result.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1002 + " <result.columnCount()>")
chamada antiga: assertEquals(4.580805569368441, result.where(result.stringColumn("state").isEqualTo("AL")).doubleColumn(1).get(0))
nova chamada: assertEquals(4.580805569368441, result.where(result.stringColumn("state").isEqualTo("AL")).doubleColumn(1).get(0), "Era esperado valores iguais, mas  4.580805569368441 é diferente de " + result1003 + " <result.where(result.stringColumn('state').isEqualTo('AL')).doubleColumn(1).get(0)>")
chamada antiga: assertNotNull(column1)
nova chamada: assertNotNull(column1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, b2.columnCount())
nova chamada: assertEquals(1, b2.columnCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1004 + " <b2.columnCount()>")
chamada antiga: assertEquals("date", b2.column(0).name())
nova chamada: assertEquals("date", b2.column(0).name(), "Era esperado valores iguais, mas  'date' é diferente de " + result1005 + " <b2.column(0).name()>")
chamada antiga: assertEquals(3, types.size())
nova chamada: assertEquals(3, types.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1006 + " <types.size()>")
chamada antiga: assertTrue(types.contains(ColumnType.STRING))
nova chamada: assertTrue(types.contains(ColumnType.STRING), "Era esperado verdadeiro, mas " + result1007 + " <types.contains(ColumnType.STRING)> é falso")
chamada antiga: assertTrue(types.contains(ColumnType.LOCAL_DATE))
nova chamada: assertTrue(types.contains(ColumnType.LOCAL_DATE), "Era esperado verdadeiro, mas " + result1008 + " <types.contains(ColumnType.LOCAL_DATE)> é falso")
chamada antiga: assertTrue(types.contains(ColumnType.INTEGER))
nova chamada: assertTrue(types.contains(ColumnType.INTEGER), "Era esperado verdadeiro, mas " + result1009 + " <types.contains(ColumnType.INTEGER)> é falso")
chamada antiga: assertTrue(bush.containsColumn("who"))
nova chamada: assertTrue(bush.containsColumn("who"), "Era esperado verdadeiro, mas " + result1010 + " <bush.containsColumn('who')> é falso")
chamada antiga: assertTrue(bush.containsColumn("date"))
nova chamada: assertTrue(bush.containsColumn("date"), "Era esperado verdadeiro, mas " + result1011 + " <bush.containsColumn('date')> é falso")
chamada antiga: assertEquals(names.get(0), "date")
nova chamada: assertEquals(names.get(0), "date", "Era esperado valores iguais, mas " + result1012 + " <names.get(0)> é diferente de " + " 'date'")
chamada antiga: assertEquals(names.get(1), "approval")
nova chamada: assertEquals(names.get(1), "approval", "Era esperado valores iguais, mas " + result1013 + " <names.get(1)> é diferente de " + " 'approval'")
chamada antiga: assertEquals(names.get(2), "who")
nova chamada: assertEquals(names.get(2), "who", "Era esperado valores iguais, mas " + result1014 + " <names.get(2)> é diferente de " + " 'who'")
chamada antiga: assertEquals(reorderedNames.get(0), "who")
nova chamada: assertEquals(reorderedNames.get(0), "who", "Era esperado valores iguais, mas " + result1015 + " <reorderedNames.get(0)> é diferente de " + " 'who'")
chamada antiga: assertEquals(reorderedNames.get(1), "approval")
nova chamada: assertEquals(reorderedNames.get(1), "approval", "Era esperado valores iguais, mas " + result1016 + " <reorderedNames.get(1)> é diferente de " + " 'approval'")
chamada antiga: assertEquals(reorderedNames.get(2), "date")
nova chamada: assertEquals(reorderedNames.get(2), "date", "Era esperado valores iguais, mas " + result1017 + " <reorderedNames.get(2)> é diferente de " + " 'date'")
chamada antiga: assertTrue(t.containsColumn(sc))
nova chamada: assertTrue(t.containsColumn(sc), "Era esperado verdadeiro, mas " + result1018 + " <t.containsColumn(sc)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc2))
nova chamada: assertTrue(t.containsColumn(sc2), "Era esperado verdadeiro, mas " + result1019 + " <t.containsColumn(sc2)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc))
nova chamada: assertTrue(t.containsColumn(sc), "Era esperado verdadeiro, mas " + result1020 + " <t.containsColumn(sc)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc2))
nova chamada: assertTrue(t.containsColumn(sc2), "Era esperado verdadeiro, mas " + result1021 + " <t.containsColumn(sc2)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc1))
nova chamada: assertTrue(t.containsColumn(sc1), "Era esperado verdadeiro, mas " + result1022 + " <t.containsColumn(sc1)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc3))
nova chamada: assertTrue(t.containsColumn(sc3), "Era esperado verdadeiro, mas " + result1023 + " <t.containsColumn(sc3)> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc.name()))
nova chamada: assertTrue(t2.containsColumn(sc.name()), "Era esperado verdadeiro, mas " + result1024 + " <t2.containsColumn(sc.name())> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc2.name()))
nova chamada: assertTrue(t2.containsColumn(sc2.name()), "Era esperado verdadeiro, mas " + result1025 + " <t2.containsColumn(sc2.name())> é falso")
chamada antiga: assertTrue(t.containsColumn(sc))
nova chamada: assertTrue(t.containsColumn(sc), "Era esperado verdadeiro, mas " + result1026 + " <t.containsColumn(sc)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc2))
nova chamada: assertTrue(t.containsColumn(sc2), "Era esperado verdadeiro, mas " + result1027 + " <t.containsColumn(sc2)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc1))
nova chamada: assertTrue(t.containsColumn(sc1), "Era esperado verdadeiro, mas " + result1028 + " <t.containsColumn(sc1)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc3))
nova chamada: assertTrue(t.containsColumn(sc3), "Era esperado verdadeiro, mas " + result1029 + " <t.containsColumn(sc3)> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc.name()))
nova chamada: assertTrue(t2.containsColumn(sc.name()), "Era esperado verdadeiro, mas " + result1030 + " <t2.containsColumn(sc.name())> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc2.name()))
nova chamada: assertTrue(t2.containsColumn(sc2.name()), "Era esperado verdadeiro, mas " + result1031 + " <t2.containsColumn(sc2.name())> é falso")
chamada antiga: assertTrue(t.containsColumn(sc))
nova chamada: assertTrue(t.containsColumn(sc), "Era esperado verdadeiro, mas " + result1032 + " <t.containsColumn(sc)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc2))
nova chamada: assertTrue(t.containsColumn(sc2), "Era esperado verdadeiro, mas " + result1033 + " <t.containsColumn(sc2)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc1))
nova chamada: assertTrue(t.containsColumn(sc1), "Era esperado verdadeiro, mas " + result1034 + " <t.containsColumn(sc1)> é falso")
chamada antiga: assertTrue(t.containsColumn(sc3))
nova chamada: assertTrue(t.containsColumn(sc3), "Era esperado verdadeiro, mas " + result1035 + " <t.containsColumn(sc3)> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc.name()))
nova chamada: assertTrue(t2.containsColumn(sc.name()), "Era esperado verdadeiro, mas " + result1036 + " <t2.containsColumn(sc.name())> é falso")
chamada antiga: assertTrue(t2.containsColumn(sc2.name()))
nova chamada: assertTrue(t2.containsColumn(sc2.name()), "Era esperado verdadeiro, mas " + result1037 + " <t2.containsColumn(sc2.name())> é falso")
chamada antiga: assertEquals("Test" + LINE_END + LINE_END, t.print())
nova chamada: assertEquals("Test" + LINE_END + LINE_END, t.print(), "Era esperado valores iguais, mas  'Test' + LINE_END + LINE_END é diferente de " + result1038 + " <t.print()>")
chamada antiga: assertEquals(" Test " + LINE_END + " SC  |" + LINE_END + "------", t.print())
nova chamada: assertEquals(" Test " + LINE_END + " SC  |" + LINE_END + "------", t.print(), "Era esperado valores iguais, mas  ' Test ' + LINE_END + ' SC  |' + LINE_END + '------' é diferente de " + result1039 + " <t.print()>")
chamada antiga: assertEquals(3, bush.countBy("who", "date").columnCount())
nova chamada: assertEquals(3, bush.countBy("who", "date").columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1040 + " <bush.countBy('who', 'date').columnCount()>")
chamada antiga: assertDoesNotThrow(() -> {
    table.doubleColumn("f1").append(23);
    table.addColumns(StringColumn.create("test"));
})
nova chamada: assertDoesNotThrow(() -> {
    table.doubleColumn("f1").append(23);
    table.addColumns(StringColumn.create("test"));
}, "Era esperado que nenhuma exceção fosse lançada, mas  () - {\n    table.doubleColumn('f1').append(23);\n    table.addColumns(StringColumn.create('test'));\n} foi lançada")
chamada antiga: assertEquals(3 * rowCount, t1.rowCount())
nova chamada: assertEquals(3 * rowCount, t1.rowCount(), "Era esperado valores iguais, mas  3 * rowCount é diferente de " + result1041 + " <t1.rowCount()>")
chamada antiga: assertEquals(rowCount, t1.rowCount())
nova chamada: assertEquals(rowCount, t1.rowCount(), "Era esperado valores iguais, mas  rowCount é diferente de " + result1042 + " <t1.rowCount()>")
chamada antiga: assertEquals(2 * rowCount, t1.rowCount())
nova chamada: assertEquals(2 * rowCount, t1.rowCount(), "Era esperado valores iguais, mas  2 * rowCount é diferente de " + result1043 + " <t1.rowCount()>")
chamada antiga: assertEquals(rowCount, t1.rowCount())
nova chamada: assertEquals(rowCount, t1.rowCount(), "Era esperado valores iguais, mas  rowCount é diferente de " + result1044 + " <t1.rowCount()>")
chamada antiga: assertEquals(3, t2.rowCount())
nova chamada: assertEquals(3, t2.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1045 + " <t2.rowCount()>")
chamada antiga: assertNotNull(doubles)
nova chamada: assertNotNull(doubles, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, doubles.size())
nova chamada: assertEquals(1, doubles.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1046 + " <doubles.size()>")
chamada antiga: assertEquals(0, Table.create("t").columnCount())
nova chamada: assertEquals(0, Table.create("t").columnCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1047 + " <Table.create('t').columnCount()>")
chamada antiga: assertEquals(1, table.columnCount())
nova chamada: assertEquals(1, table.columnCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1048 + " <table.columnCount()>")
chamada antiga: assertEquals(3, t1.rowCount())
nova chamada: assertEquals(3, t1.rowCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1049 + " <t1.rowCount()>")
chamada antiga: assertEquals(LocalDate.of(2004, 2, 5), t1.dateColumn(0).get(2))
nova chamada: assertEquals(LocalDate.of(2004, 2, 5), t1.dateColumn(0).get(2), "Era esperado valores iguais, mas " + result1050 + " <LocalDate.of(2004, 2, 5)> é diferente de " + result1051 + " <t1.dateColumn(0).get(2)>")
chamada antiga: assertEquals(2, t1.columnCount())
nova chamada: assertEquals(2, t1.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1052 + " <t1.columnCount()>")
chamada antiga: assertEquals(4, t1.columnCount())
nova chamada: assertEquals(4, t1.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1053 + " <t1.columnCount()>")
chamada antiga: assertEquals("date year", t1.column(3).name())
nova chamada: assertEquals("date year", t1.column(3).name(), "Era esperado valores iguais, mas  'date year' é diferente de " + result1054 + " <t1.column(3).name()>")
chamada antiga: assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount())
nova chamada: assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount(), "Era esperado valores iguais, mas " + result1055 + " <bush.rowCount()> é diferente de " + " results[0].rowCount() + results[1].rowCount()")
chamada antiga: assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount())
nova chamada: assertEquals(bush.rowCount(), results[0].rowCount() + results[1].rowCount(), "Era esperado valores iguais, mas " + result1056 + " <bush.rowCount()> é diferente de " + " results[0].rowCount() + results[1].rowCount()")
chamada antiga: assertTrue(count.get() > 0)
nova chamada: assertTrue(count.get() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bushMinimized.stream().anyMatch(doable))
nova chamada: assertTrue(bushMinimized.stream().anyMatch(doable), "Era esperado verdadeiro, mas " + result1057 + " <bushMinimized.stream().anyMatch(doable)> é falso")
chamada antiga: assertEquals("             bush.csv              " + LINE_END + "    date     |  approval  |  who  |" + LINE_END + "-----------------------------------" + LINE_END + " 2004-02-04  |        53  |  fox  |", row.toString())
nova chamada: assertEquals("             bush.csv              " + LINE_END + "    date     |  approval  |  who  |" + LINE_END + "-----------------------------------" + LINE_END + " 2004-02-04  |        53  |  fox  |", row.toString(), "Era esperado valores iguais, mas  '             bush.csv              ' + LINE_END + '    date     |  approval  |  who  |' + LINE_END + '-----------------------------------' + LINE_END + ' 2004-02-04  |        53  |  fox  |' é diferente de " + result1058 + " <row.toString()>")
chamada antiga: assertEquals(sum1, rowConsumer.getSum())
nova chamada: assertEquals(sum1, rowConsumer.getSum(), "Era esperado valores iguais, mas  sum1 é diferente de " + result1059 + " <rowConsumer.getSum()>")
chamada antiga: assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |       age  |         |" + LINE_END + " Mary Smith  |     1  |    weight  |         |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString())
nova chamada: assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |       age  |         |" + LINE_END + " Mary Smith  |     1  |    weight  |         |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString(), "Era esperado valores iguais, mas  '                                              ' + LINE_END + '  subject    |  time  |  variable  |  value  |' + LINE_END + '----------------------------------------------' + LINE_END + ' John Smith  |     1  |       age  |     33  |' + LINE_END + ' John Smith  |     1  |    weight  |     90  |' + LINE_END + ' John Smith  |     1  |    height  |   1.87  |' + LINE_END + ' Mary Smith  |     1  |       age  |         |' + LINE_END + ' Mary Smith  |     1  |    weight  |         |' + LINE_END + ' Mary Smith  |     1  |    height  |   1.54  |' é diferente de " + result1060 + " <melted.toString()>")
chamada antiga: assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString())
nova chamada: assertEquals("                                              " + LINE_END + "  subject    |  time  |  variable  |  value  |" + LINE_END + "----------------------------------------------" + LINE_END + " John Smith  |     1  |       age  |     33  |" + LINE_END + " John Smith  |     1  |    weight  |     90  |" + LINE_END + " John Smith  |     1  |    height  |   1.87  |" + LINE_END + " Mary Smith  |     1  |    height  |   1.54  |", melted.toString(), "Era esperado valores iguais, mas  '                                              ' + LINE_END + '  subject    |  time  |  variable  |  value  |' + LINE_END + '----------------------------------------------' + LINE_END + ' John Smith  |     1  |       age  |     33  |' + LINE_END + ' John Smith  |     1  |    weight  |     90  |' + LINE_END + ' John Smith  |     1  |    height  |   1.87  |' + LINE_END + ' Mary Smith  |     1  |    height  |   1.54  |' é diferente de " + result1061 + " <melted.toString()>")
chamada antiga: assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString)
nova chamada: assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString, "Era esperado valores iguais, mas  'subject,time,weight,age,height' + LINE_END + 'John Smith,1,90.0,33.0,1.87' + LINE_END + 'Mary Smith,1,,,1.54' + LINE_END é diferente de " + " writeString")
chamada antiga: assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString)
nova chamada: assertEquals("subject,time,weight,age,height" + LINE_END + "John Smith,1,90.0,33.0,1.87" + LINE_END + "Mary Smith,1,,,1.54" + LINE_END, writeString, "Era esperado valores iguais, mas  'subject,time,weight,age,height' + LINE_END + 'John Smith,1,90.0,33.0,1.87' + LINE_END + 'Mary Smith,1,,,1.54' + LINE_END é diferente de " + " writeString")
chamada antiga: assertTrue(sums.contains((int) approval.getDouble(0) + (int) approval.getDouble(1)))
nova chamada: assertTrue(sums.contains((int) approval.getDouble(0) + (int) approval.getDouble(1)), "Era esperado verdadeiro, mas " + result1062 + " <sums.contains((int) approval.getDouble(0) + (int) approval.getDouble(1))> é falso")
chamada antiga: assertTrue(sums.contains((int) approval.getDouble(1) + (int) approval.getDouble(2)))
nova chamada: assertTrue(sums.contains((int) approval.getDouble(1) + (int) approval.getDouble(2)), "Era esperado verdadeiro, mas " + result1063 + " <sums.contains((int) approval.getDouble(1) + (int) approval.getDouble(2))> é falso")
chamada antiga: assertTrue(sums.contains((int) approval.getDouble(2) + (int) approval.getDouble(3)))
nova chamada: assertTrue(sums.contains((int) approval.getDouble(2) + (int) approval.getDouble(3)), "Era esperado verdadeiro, mas " + result1064 + " <sums.contains((int) approval.getDouble(2) + (int) approval.getDouble(3))> é falso")
chamada antiga: assertEquals(0, table.rowCount())
nova chamada: assertEquals(0, table.rowCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1065 + " <table.rowCount()>")
chamada antiga: assertEquals(1, table.rowCount())
nova chamada: assertEquals(1, table.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1066 + " <table.rowCount()>")
chamada antiga: assertEquals(2, table.rowCount())
nova chamada: assertEquals(2, table.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1067 + " <table.rowCount()>")
chamada antiga: assertTrue(table.isEmpty())
nova chamada: assertTrue(table.isEmpty(), "Era esperado verdadeiro, mas " + result1068 + " <table.isEmpty()> é falso")
chamada antiga: assertEquals(5, table.intColumn("approval").get(table.rowCount() - 1))
nova chamada: assertEquals(5, table.intColumn("approval").get(table.rowCount() - 1), "Era esperado valores iguais, mas  5 é diferente de " + result1069 + " <table.intColumn('approval').get(table.rowCount() - 1)>")
chamada antiga: assertEquals(64, t2.rowCount())
nova chamada: assertEquals(64, t2.rowCount(), "Era esperado valores iguais, mas  64 é diferente de " + result1070 + " <t2.rowCount()>")
chamada antiga: assertSame(t.column("c2"), second)
nova chamada: assertSame(t.column("c2"), second, "Era esperado objetos iguais, mas " + result1071 + " <t.column('c2')> é diferente de " + " second")
chamada antiga: assertSame(t.column("c1"), first)
nova chamada: assertSame(t.column("c1"), first, "Era esperado objetos iguais, mas " + result1072 + " <t.column('c1')> é diferente de " + " first")
chamada antiga: assertSame(t.column("c2"), replacement)
nova chamada: assertSame(t.column("c2"), replacement, "Era esperado objetos iguais, mas " + result1073 + " <t.column('c2')> é diferente de " + " replacement")
chamada antiga: assertEquals(t.columnIndex(replacement), colIndex)
nova chamada: assertEquals(t.columnIndex(replacement), colIndex, "Era esperado valores iguais, mas " + result1074 + " <t.columnIndex(replacement)> é diferente de " + " colIndex")
chamada antiga: assertEquals(expected, actual)
nova chamada: assertEquals(expected, actual, "Era esperado valores iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(floatColumn.size(), rowsCount)
nova chamada: assertEquals(floatColumn.size(), rowsCount, "Era esperado valores iguais, mas " + result1075 + " <floatColumn.size()> é diferente de " + " rowsCount")
chamada antiga: assertEquals(5, matrix.length)
nova chamada: assertEquals(5, matrix.length, "Era esperado valores iguais, mas  5 é diferente de " + " matrix.length")
chamada antiga: assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount())
nova chamada: assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount(), "Era esperado valores iguais, mas " + result1076 + " <bush.categoricalColumn('who').countUnique()> é diferente de " + result1077 + " <result.rowCount()>")
chamada antiga: assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount())
nova chamada: assertEquals(bush.categoricalColumn("who").countUnique(), result.rowCount(), "Era esperado valores iguais, mas " + result1078 + " <bush.categoricalColumn('who').countUnique()> é diferente de " + result1079 + " <result.rowCount()>")
chamada antiga: assertEquals(bush.rowCount() - 20, result.rowCount())
nova chamada: assertEquals(bush.rowCount() - 20, result.rowCount(), "Era esperado valores iguais, mas  bush.rowCount() - 20 é diferente de " + result1080 + " <result.rowCount()>")
chamada antiga: assertEquals(bush.rowCount() - 20, result.rowCount())
nova chamada: assertEquals(bush.rowCount() - 20, result.rowCount(), "Era esperado valores iguais, mas  bush.rowCount() - 20 é diferente de " + result1081 + " <result.rowCount()>")
chamada antiga: assertEquals(20, result.rowCount())
nova chamada: assertEquals(20, result.rowCount(), "Era esperado valores iguais, mas  20 é diferente de " + result1082 + " <result.rowCount()>")
chamada antiga: assertEquals(20, result.rowCount())
nova chamada: assertEquals(20, result.rowCount(), "Era esperado valores iguais, mas  20 é diferente de " + result1083 + " <result.rowCount()>")
chamada antiga: assertDoesNotThrow(() -> t.where(t.intColumn("4").isIn(1, 2)))
nova chamada: assertDoesNotThrow(() -> t.where(t.intColumn("4").isIn(1, 2)), "Era esperado que nenhuma exceção fosse lançada, mas  () - t.where(t.intColumn('4').isIn(1, 2)) foi lançada")
chamada antiga: assertFalse(column1.isMissing(1))
nova chamada: assertFalse(column1.isMissing(1), "Era esperado falso, mas " + result1084 + " <column1.isMissing(1)> é verdadeiro ")
chamada antiga: assertFalse(col.isMissing(col.size() - 1))
nova chamada: assertFalse(col.isMissing(col.size() - 1), "Era esperado falso, mas " + result1085 + " <col.isMissing(col.size() - 1)> é verdadeiro ")
chamada antiga: assertFalse(column1.contains(LocalTime.of(9, 15, 30)))
nova chamada: assertFalse(column1.contains(LocalTime.of(9, 15, 30)), "Era esperado falso, mas " + result1086 + " <column1.contains(LocalTime.of(9, 15, 30))> é verdadeiro ")
chamada antiga: assertFalse(column1.isMissing(column1.size() - 1))
nova chamada: assertFalse(column1.isMissing(column1.size() - 1), "Era esperado falso, mas " + result1087 + " <column1.isMissing(column1.size() - 1)> é verdadeiro ")
chamada antiga: assertFalse(shortColumn.isMissing(shortColumn.size() - 1))
nova chamada: assertFalse(shortColumn.isMissing(shortColumn.size() - 1), "Era esperado falso, mas " + result1088 + " <shortColumn.isMissing(shortColumn.size() - 1)> é verdadeiro ")
chamada antiga: assertFalse(longColumn.isMissing(longColumn.size() - 1))
nova chamada: assertFalse(longColumn.isMissing(longColumn.size() - 1), "Era esperado falso, mas " + result1089 + " <longColumn.isMissing(longColumn.size() - 1)> é verdadeiro ")
chamada antiga: assertFalse(t.containsColumn(sc1))
nova chamada: assertFalse(t.containsColumn(sc1), "Era esperado falso, mas " + result1090 + " <t.containsColumn(sc1)> é verdadeiro ")
chamada antiga: assertFalse(t.containsColumn(sc3))
nova chamada: assertFalse(t.containsColumn(sc3), "Era esperado falso, mas " + result1091 + " <t.containsColumn(sc3)> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc1.name()))
nova chamada: assertFalse(t2.containsColumn(sc1.name()), "Era esperado falso, mas " + result1092 + " <t2.containsColumn(sc1.name())> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc3.name()))
nova chamada: assertFalse(t2.containsColumn(sc3.name()), "Era esperado falso, mas " + result1093 + " <t2.containsColumn(sc3.name())> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc1.name()))
nova chamada: assertFalse(t2.containsColumn(sc1.name()), "Era esperado falso, mas " + result1094 + " <t2.containsColumn(sc1.name())> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc3.name()))
nova chamada: assertFalse(t2.containsColumn(sc3.name()), "Era esperado falso, mas " + result1095 + " <t2.containsColumn(sc3.name())> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc1.name()))
nova chamada: assertFalse(t2.containsColumn(sc1.name()), "Era esperado falso, mas " + result1096 + " <t2.containsColumn(sc1.name())> é verdadeiro ")
chamada antiga: assertFalse(t2.containsColumn(sc3.name()))
nova chamada: assertFalse(t2.containsColumn(sc3.name()), "Era esperado falso, mas " + result1097 + " <t2.containsColumn(sc3.name())> é verdadeiro ")
chamada antiga: assertFalse(table.isEmpty())
nova chamada: assertFalse(table.isEmpty(), "Era esperado falso, mas " + result1098 + " <table.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(table.isEmpty())
nova chamada: assertFalse(table.isEmpty(), "Era esperado falso, mas " + result1099 + " <table.isEmpty()> é verdadeiro ")
chamada antiga: assertArrayEquals(sc.asList().toArray(), sc.asObjectArray())
nova chamada: assertArrayEquals(sc.asList().toArray(), sc.asObjectArray(), "Era esperado arrays iguais, mas " + result1100 + " <sc.asList().toArray()> é diferente de " + result1101 + " <sc.asObjectArray()>")
chamada antiga: assertEquals(0, sc.countMissing())
nova chamada: assertEquals(0, sc.countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result1102 + " <sc.countMissing()>")
chamada antiga: assertEquals(0, sc.countMissing())
nova chamada: assertEquals(0, sc.countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result1103 + " <sc.countMissing()>")
chamada antiga: assertEquals(1, sc.countMissing())
nova chamada: assertEquals(1, sc.countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result1104 + " <sc.countMissing()>")
chamada antiga: assertTrue(sc.isMissing(sc.size() - 1))
nova chamada: assertTrue(sc.isMissing(sc.size() - 1), "Era esperado verdadeiro, mas " + result1105 + " <sc.isMissing(sc.size() - 1)> é falso")
chamada antiga: assertFalse(sc.isMissing(sc.size() - 1))
nova chamada: assertFalse(sc.isMissing(sc.size() - 1), "Era esperado falso, mas " + result1106 + " <sc.isMissing(sc.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals("", table1.stringColumn("id").get(4))
nova chamada: assertEquals("", table1.stringColumn("id").get(4), "Era esperado valores iguais, mas  '' é diferente de " + result1107 + " <table1.stringColumn('id').get(4)>")
chamada antiga: assertEquals("", table2.stringColumn("id").get(3))
nova chamada: assertEquals("", table2.stringColumn("id").get(3), "Era esperado valores iguais, mas  '' é diferente de " + result1108 + " <table2.stringColumn('id').get(3)>")
chamada antiga: assertNotEquals(set1.size(), set2.size())
nova chamada: assertNotEquals(set1.size(), set2.size(), "Era esperado valores diferentes, mas " + result1109 + " <set1.size()> é igual a " + result1110 + " <set2.size()>")
chamada antiga: assertEquals(3, column.size())
nova chamada: assertEquals(3, column.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1111 + " <column.size()>")
chamada antiga: assertTrue(column.contains("no Value"))
nova chamada: assertTrue(column.contains("no Value"), "Era esperado verdadeiro, mas " + result1112 + " <column.contains('no Value')> é falso")
chamada antiga: assertFalse(column.contains("Value 4"))
nova chamada: assertFalse(column.contains("Value 4"), "Era esperado falso, mas " + result1113 + " <column.contains('Value 4')> é verdadeiro ")
chamada antiga: assertEquals("", c1.get(0))
nova chamada: assertEquals("", c1.get(0), "Era esperado valores iguais, mas  '' é diferente de " + result1114 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 1", c1.get(1))
nova chamada: assertEquals("Value 1", c1.get(1), "Era esperado valores iguais, mas  'Value 1' é diferente de " + result1115 + " <c1.get(1)>")
chamada antiga: assertEquals("Value 2", c1.get(2))
nova chamada: assertEquals("Value 2", c1.get(2), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1116 + " <c1.get(2)>")
chamada antiga: assertEquals("Value 2", c1.get(0))
nova chamada: assertEquals("Value 2", c1.get(0), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1117 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 3", c1.get(1))
nova chamada: assertEquals("Value 3", c1.get(1), "Era esperado valores iguais, mas  'Value 3' é diferente de " + result1118 + " <c1.get(1)>")
chamada antiga: assertEquals("", c1.get(3))
nova chamada: assertEquals("", c1.get(3), "Era esperado valores iguais, mas  '' é diferente de " + result1119 + " <c1.get(3)>")
chamada antiga: assertEquals("Value 2", c1.get(0))
nova chamada: assertEquals("Value 2", c1.get(0), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1120 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 3", c1.get(1))
nova chamada: assertEquals("Value 3", c1.get(1), "Era esperado valores iguais, mas  'Value 3' é diferente de " + result1121 + " <c1.get(1)>")
chamada antiga: assertEquals("", c1.get(3))
nova chamada: assertEquals("", c1.get(3), "Era esperado valores iguais, mas  '' é diferente de " + result1122 + " <c1.get(3)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1123 + " <result.size()>")
chamada antiga: assertEquals(-1, column.firstIndexOf("test"))
nova chamada: assertEquals(-1, column.firstIndexOf("test"), "Era esperado valores iguais, mas  -1 é diferente de " + result1124 + " <column.firstIndexOf('test')>")
chamada antiga: assertEquals(ColumnType.STRING, column.type())
nova chamada: assertEquals(ColumnType.STRING, column.type(), "Era esperado valores iguais, mas  ColumnType.STRING é diferente de " + result1125 + " <column.type()>")
chamada antiga: assertEquals("Value 2", column.getString(1))
nova chamada: assertEquals("Value 2", column.getString(1), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1126 + " <column.getString(1)>")
chamada antiga: assertEquals(4, column.size())
nova chamada: assertEquals(4, column.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1127 + " <column.size()>")
chamada antiga: assertEquals(4, dummies.size())
nova chamada: assertEquals(4, dummies.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1128 + " <dummies.size()>")
chamada antiga: assertEquals("String column: testing", column.toString())
nova chamada: assertEquals("String column: testing", column.toString(), "Era esperado valores iguais, mas  'String column: testing' é diferente de " + result1129 + " <column.toString()>")
chamada antiga: assertEquals("Wyoming", stringColumn.top(5).get(0))
nova chamada: assertEquals("Wyoming", stringColumn.top(5).get(0), "Era esperado valores iguais, mas  'Wyoming' é diferente de " + result1130 + " <stringColumn.top(5).get(0)>")
chamada antiga: assertEquals("Alabama", stringColumn.bottom(5).get(0))
nova chamada: assertEquals("Alabama", stringColumn.bottom(5).get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1131 + " <stringColumn.bottom(5).get(0)>")
chamada antiga: assertEquals("Alabama", selection.get(0))
nova chamada: assertEquals("Alabama", selection.get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1132 + " <selection.get(0)>")
chamada antiga: assertEquals("Alaska", selection.get(1))
nova chamada: assertEquals("Alaska", selection.get(1), "Era esperado valores iguais, mas  'Alaska' é diferente de " + result1133 + " <selection.get(1)>")
chamada antiga: assertEquals("Arizona", selection.get(2))
nova chamada: assertEquals("Arizona", selection.get(2), "Era esperado valores iguais, mas  'Arizona' é diferente de " + result1134 + " <selection.get(2)>")
chamada antiga: assertEquals("Arkansas", selection.get(3))
nova chamada: assertEquals("Arkansas", selection.get(3), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1135 + " <selection.get(3)>")
chamada antiga: assertEquals("Tennessee", selection.get(0))
nova chamada: assertEquals("Tennessee", selection.get(0), "Era esperado valores iguais, mas  'Tennessee' é diferente de " + result1136 + " <selection.get(0)>")
chamada antiga: assertEquals("Texas", selection.get(1))
nova chamada: assertEquals("Texas", selection.get(1), "Era esperado valores iguais, mas  'Texas' é diferente de " + result1137 + " <selection.get(1)>")
chamada antiga: assertEquals("[[Alabama]]", stringColumn.getString(0))
nova chamada: assertEquals("[[Alabama]]", stringColumn.getString(0), "Era esperado valores iguais, mas  '[[Alabama]]' é diferente de " + result1138 + " <stringColumn.getString(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1139 + " <selection.size()>")
chamada antiga: assertEquals("Arkansas", selection.getString(0))
nova chamada: assertEquals("Arkansas", selection.getString(0), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1140 + " <selection.getString(0)>")
chamada antiga: assertEquals(result.size(), stringColumn.size() - 1)
nova chamada: assertEquals(result.size(), stringColumn.size() - 1, "Era esperado valores iguais, mas " + result1141 + " <result.size()> é diferente de " + " stringColumn.size() - 1")
chamada antiga: assertFalse(result.contains("Alabama"))
nova chamada: assertFalse(result.contains("Alabama"), "Era esperado falso, mas " + result1142 + " <result.contains('Alabama')> é verdadeiro ")
chamada antiga: assertEquals(51, stringColumn.size())
nova chamada: assertEquals(51, stringColumn.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1143 + " <stringColumn.size()>")
chamada antiga: assertFalse(other.contains("Value 3"))
nova chamada: assertFalse(other.contains("Value 3"), "Era esperado falso, mas " + result1144 + " <other.contains('Value 3')> é verdadeiro ")
chamada antiga: assertTrue(other.contains("Value 1"))
nova chamada: assertTrue(other.contains("Value 1"), "Era esperado verdadeiro, mas " + result1145 + " <other.contains('Value 1')> é falso")
chamada antiga: assertFalse(other.contains("Value 2"))
nova chamada: assertFalse(other.contains("Value 2"), "Era esperado falso, mas " + result1146 + " <other.contains('Value 2')> é verdadeiro ")
chamada antiga: assertTrue(other.contains("Some other thing"))
nova chamada: assertTrue(other.contains("Some other thing"), "Era esperado verdadeiro, mas " + result1147 + " <other.contains('Some other thing')> é falso")
chamada antiga: assertTrue(other.contains("VALUE 3"))
nova chamada: assertTrue(other.contains("VALUE 3"), "Era esperado verdadeiro, mas " + result1148 + " <other.contains('VALUE 3')> é falso")
chamada antiga: assertTrue(other.contains("Value 4"))
nova chamada: assertTrue(other.contains("Value 4"), "Era esperado verdadeiro, mas " + result1149 + " <other.contains('Value 4')> é falso")
chamada antiga: assertEquals(4, other.size())
nova chamada: assertEquals(4, other.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1150 + " <other.size()>")
chamada antiga: assertEquals(3, result.size())
nova chamada: assertEquals(3, result.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1151 + " <result.size()>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1152 + " <result.size()>")
chamada antiga: assertTrue(result.contains("Alabama"))
nova chamada: assertTrue(result.contains("Alabama"), "Era esperado verdadeiro, mas " + result1153 + " <result.contains('Alabama')> é falso")
chamada antiga: assertEquals(2, result2.size())
nova chamada: assertEquals(2, result2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1154 + " <result2.size()>")
chamada antiga: assertTrue(stringColumn.contains("Alabama"))
nova chamada: assertTrue(stringColumn.contains("Alabama"), "Era esperado verdadeiro, mas " + result1155 + " <stringColumn.contains('Alabama')> é falso")
chamada antiga: assertEquals(51, selection2.size())
nova chamada: assertEquals(51, selection2.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1156 + " <selection2.size()>")
chamada antiga: assertEquals(result2.size(), stringColumn.size())
nova chamada: assertEquals(result2.size(), stringColumn.size(), "Era esperado valores iguais, mas " + result1157 + " <result2.size()> é diferente de " + result1158 + " <stringColumn.size()>")
chamada antiga: assertEquals("Alabama", selection.get(0))
nova chamada: assertEquals("Alabama", selection.get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1159 + " <selection.get(0)>")
chamada antiga: assertEquals("Texas", selection.get(1))
nova chamada: assertEquals("Texas", selection.get(1), "Era esperado valores iguais, mas  'Texas' é diferente de " + result1160 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1161 + " <selection.size()>")
chamada antiga: assertEquals("Alaska", selection.get(0))
nova chamada: assertEquals("Alaska", selection.get(0), "Era esperado valores iguais, mas  'Alaska' é diferente de " + result1162 + " <selection.get(0)>")
chamada antiga: assertEquals("Arizona", selection.get(1))
nova chamada: assertEquals("Arizona", selection.get(1), "Era esperado valores iguais, mas  'Arizona' é diferente de " + result1163 + " <selection.get(1)>")
chamada antiga: assertEquals("Arkansas", selection.get(2))
nova chamada: assertEquals("Arkansas", selection.get(2), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1164 + " <selection.get(2)>")
chamada antiga: assertEquals(49, selection.size())
nova chamada: assertEquals(49, selection.size(), "Era esperado valores iguais, mas  49 é diferente de " + result1165 + " <selection.size()>")
chamada antiga: assertEquals(51, states.size())
nova chamada: assertEquals(51, states.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1166 + " <states.size()>")
chamada antiga: assertEquals("Name: John White", formatted.get(0))
nova chamada: assertEquals("Name: John White", formatted.get(0), "Era esperado valores iguais, mas  'Name: John White' é diferente de " + result1167 + " <formatted.get(0)>")
chamada antiga: assertEquals("ing", suffix.get(0))
nova chamada: assertEquals("ing", suffix.get(0), "Era esperado valores iguais, mas  'ing' é diferente de " + result1168 + " <suffix.get(0)>")
chamada antiga: assertEquals("cube", suffix.get(1))
nova chamada: assertEquals("cube", suffix.get(1), "Era esperado valores iguais, mas  'cube' é diferente de " + result1169 + " <suffix.get(1)>")
chamada antiga: assertEquals("e", suffix.get(3))
nova chamada: assertEquals("e", suffix.get(3), "Era esperado valores iguais, mas  'e' é diferente de " + result1170 + " <suffix.get(3)>")
chamada antiga: assertEquals("r", result.get(0))
nova chamada: assertEquals("r", result.get(0), "Era esperado valores iguais, mas  'r' é diferente de " + result1171 + " <result.get(0)>")
chamada antiga: assertEquals("ice", result.get(1))
nova chamada: assertEquals("ice", result.get(1), "Era esperado valores iguais, mas  'ice' é diferente de " + result1172 + " <result.get(1)>")
chamada antiga: assertEquals("back", result.get(2))
nova chamada: assertEquals("back", result.get(2), "Era esperado valores iguais, mas  'back' é diferente de " + result1173 + " <result.get(2)>")
chamada antiga: assertEquals(" running", result.get(0))
nova chamada: assertEquals(" running", result.get(0), "Era esperado valores iguais, mas  ' running' é diferente de " + result1174 + " <result.get(0)>")
chamada antiga: assertEquals(" icecube", result.get(1))
nova chamada: assertEquals(" icecube", result.get(1), "Era esperado valores iguais, mas  ' icecube' é diferente de " + result1175 + " <result.get(1)>")
chamada antiga: assertEquals("    back", result.get(2))
nova chamada: assertEquals("    back", result.get(2), "Era esperado valores iguais, mas  '    back' é diferente de " + result1176 + " <result.get(2)>")
chamada antiga: assertEquals("runningX", result.get(0))
nova chamada: assertEquals("runningX", result.get(0), "Era esperado valores iguais, mas  'runningX' é diferente de " + result1177 + " <result.get(0)>")
chamada antiga: assertEquals("icecubeX", result.get(1))
nova chamada: assertEquals("icecubeX", result.get(1), "Era esperado valores iguais, mas  'icecubeX' é diferente de " + result1178 + " <result.get(1)>")
chamada antiga: assertEquals("backXXXX", result.get(2))
nova chamada: assertEquals("backXXXX", result.get(2), "Era esperado valores iguais, mas  'backXXXX' é diferente de " + result1179 + " <result.get(2)>")
chamada antiga: assertEquals(4, result.get(0))
nova chamada: assertEquals(4, result.get(0), "Era esperado valores iguais, mas  4 é diferente de " + result1180 + " <result.get(0)>")
chamada antiga: assertEquals(72, result.get(1))
nova chamada: assertEquals(72, result.get(1), "Era esperado valores iguais, mas  72 é diferente de " + result1181 + " <result.get(1)>")
chamada antiga: assertEquals(132, result.get(2))
nova chamada: assertEquals(132, result.get(2), "Era esperado valores iguais, mas  132 é diferente de " + result1182 + " <result.get(2)>")
chamada antiga: assertEquals(0.4, result.get(0))
nova chamada: assertEquals(0.4, result.get(0), "Era esperado valores iguais, mas  0.4 é diferente de " + result1183 + " <result.get(0)>")
chamada antiga: assertEquals(0.72, result.get(1))
nova chamada: assertEquals(0.72, result.get(1), "Era esperado valores iguais, mas  0.72 é diferente de " + result1184 + " <result.get(1)>")
chamada antiga: assertEquals(1.132, result.get(2))
nova chamada: assertEquals(1.132, result.get(2), "Era esperado valores iguais, mas  1.132 é diferente de " + result1185 + " <result.get(2)>")
chamada antiga: assertEquals(0.4f, result.get(0))
nova chamada: assertEquals(0.4f, result.get(0), "Era esperado valores iguais, mas  0.4f é diferente de " + result1186 + " <result.get(0)>")
chamada antiga: assertEquals(0.72f, result.get(1))
nova chamada: assertEquals(0.72f, result.get(1), "Era esperado valores iguais, mas  0.72f é diferente de " + result1187 + " <result.get(1)>")
chamada antiga: assertEquals(1.132f, result.get(2))
nova chamada: assertEquals(1.132f, result.get(2), "Era esperado valores iguais, mas  1.132f é diferente de " + result1188 + " <result.get(2)>")
chamada antiga: assertEquals("ning", result.get(0))
nova chamada: assertEquals("ning", result.get(0), "Era esperado valores iguais, mas  'ning' é diferente de " + result1189 + " <result.get(0)>")
chamada antiga: assertEquals("cube", result.get(1))
nova chamada: assertEquals("cube", result.get(1), "Era esperado valores iguais, mas  'cube' é diferente de " + result1190 + " <result.get(1)>")
chamada antiga: assertEquals("k", result.get(2))
nova chamada: assertEquals("k", result.get(2), "Era esperado valores iguais, mas  'k' é diferente de " + result1191 + " <result.get(2)>")
chamada antiga: assertEquals("runningrunningrunning", result.get(0))
nova chamada: assertEquals("runningrunningrunning", result.get(0), "Era esperado valores iguais, mas  'runningrunningrunning' é diferente de " + result1192 + " <result.get(0)>")
chamada antiga: assertEquals("Running", result.get(0))
nova chamada: assertEquals("Running", result.get(0), "Era esperado valores iguais, mas  'Running' é diferente de " + result1193 + " <result.get(0)>")
chamada antiga: assertEquals("Ice cube", result.get(1))
nova chamada: assertEquals("Ice cube", result.get(1), "Era esperado valores iguais, mas  'Ice cube' é diferente de " + result1194 + " <result.get(1)>")
chamada antiga: assertEquals("Stuff4us", result.get(2))
nova chamada: assertEquals("Stuff4us", result.get(2), "Era esperado valores iguais, mas  'Stuff4us' é diferente de " + result1195 + " <result.get(2)>")
chamada antiga: assertEquals("runningrunning", result.get(0))
nova chamada: assertEquals("runningrunning", result.get(0), "Era esperado valores iguais, mas  'runningrunning' é diferente de " + result1196 + " <result.get(0)>")
chamada antiga: assertEquals("un", result.get(0))
nova chamada: assertEquals("un", result.get(0), "Era esperado valores iguais, mas  'un' é diferente de " + result1197 + " <result.get(0)>")
chamada antiga: assertEquals("ce", result.get(1))
nova chamada: assertEquals("ce", result.get(1), "Era esperado valores iguais, mas  'ce' é diferente de " + result1198 + " <result.get(1)>")
chamada antiga: assertEquals("ac", result.get(2))
nova chamada: assertEquals("ac", result.get(2), "Era esperado valores iguais, mas  'ac' é diferente de " + result1199 + " <result.get(2)>")
chamada antiga: assertEquals("walkning", result.get(0))
nova chamada: assertEquals("walkning", result.get(0), "Era esperado valores iguais, mas  'walkning' é diferente de " + result1200 + " <result.get(0)>")
chamada antiga: assertEquals("walk run run", result.get(1))
nova chamada: assertEquals("walk run run", result.get(1), "Era esperado valores iguais, mas  'walk run run' é diferente de " + result1201 + " <result.get(1)>")
chamada antiga: assertEquals("walkning", result.get(0))
nova chamada: assertEquals("walkning", result.get(0), "Era esperado valores iguais, mas  'walkning' é diferente de " + result1202 + " <result.get(0)>")
chamada antiga: assertEquals("walk walk walk", result.get(1))
nova chamada: assertEquals("walk walk walk", result.get(1), "Era esperado valores iguais, mas  'walk walk walk' é diferente de " + result1203 + " <result.get(1)>")
chamada antiga: assertEquals("ruXXXXiXXXX", result.get(0))
nova chamada: assertEquals("ruXXXXiXXXX", result.get(0), "Era esperado valores iguais, mas  'ruXXXXiXXXX' é diferente de " + result1204 + " <result.get(0)>")
chamada antiga: assertEquals("ruXX ruXX ruXX", result.get(1))
nova chamada: assertEquals("ruXX ruXX ruXX", result.get(1), "Era esperado valores iguais, mas  'ruXX ruXX ruXX' é diferente de " + result1205 + " <result.get(1)>")
chamada antiga: assertEquals("running--walking--swimming", result.get(0))
nova chamada: assertEquals("running--walking--swimming", result.get(0), "Era esperado valores iguais, mas  'running--walking--swimming' é diferente de " + result1206 + " <result.get(0)>")
chamada antiga: assertEquals("run--walk--swim", result.get(1))
nova chamada: assertEquals("run--walk--swim", result.get(1), "Era esperado valores iguais, mas  'run--walk--swim' é diferente de " + result1207 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1208 + " <result.get(0)>")
chamada antiga: assertEquals("run run run", result.get(1))
nova chamada: assertEquals("run run run", result.get(1), "Era esperado valores iguais, mas  'run run run' é diferente de " + result1209 + " <result.get(1)>")
chamada antiga: assertEquals("RUNNING", result.get(0))
nova chamada: assertEquals("RUNNING", result.get(0), "Era esperado valores iguais, mas  'RUNNING' é diferente de " + result1210 + " <result.get(0)>")
chamada antiga: assertEquals("RUN RUN RUN", result.get(1))
nova chamada: assertEquals("RUN RUN RUN", result.get(1), "Era esperado valores iguais, mas  'RUN RUN RUN' é diferente de " + result1211 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1212 + " <result.get(0)>")
chamada antiga: assertEquals("run run run", result.get(1))
nova chamada: assertEquals("run run run", result.get(1), "Era esperado valores iguais, mas  'run run run' é diferente de " + result1213 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1214 + " <result.get(0)>")
chamada antiga: assertEquals("Stop Br...", result.get(1))
nova chamada: assertEquals("Stop Br...", result.get(1), "Era esperado valores iguais, mas  'Stop Br...' é diferente de " + result1215 + " <result.get(1)>")
chamada antiga: assertEquals("Backwar...", result.get(2))
nova chamada: assertEquals("Backwar...", result.get(2), "Era esperado valores iguais, mas  'Backwar...' é diferente de " + result1216 + " <result.get(2)>")
chamada antiga: assertEquals("Breaking Down Stop", result.get(0))
nova chamada: assertEquals("Breaking Down Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking Down Stop' é diferente de " + result1217 + " <result.get(0)>")
chamada antiga: assertEquals("Backwards Writing", result.get(1))
nova chamada: assertEquals("Backwards Writing", result.get(1), "Era esperado valores iguais, mas  'Backwards Writing' é diferente de " + result1218 + " <result.get(1)>")
chamada antiga: assertEquals("Breaking,Down,Stop", result.get(0))
nova chamada: assertEquals("Breaking,Down,Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking,Down,Stop' é diferente de " + result1219 + " <result.get(0)>")
chamada antiga: assertEquals("Writing Backwards", result.get(1))
nova chamada: assertEquals("Writing Backwards", result.get(1), "Era esperado valores iguais, mas  'Writing Backwards' é diferente de " + result1220 + " <result.get(1)>")
chamada antiga: assertEquals("Stop Breaking Down", result.get(0))
nova chamada: assertEquals("Stop Breaking Down", result.get(0), "Era esperado valores iguais, mas  'Stop Breaking Down' é diferente de " + result1221 + " <result.get(0)>")
chamada antiga: assertEquals("walk run", result.get(1))
nova chamada: assertEquals("walk run", result.get(1), "Era esperado valores iguais, mas  'walk run' é diferente de " + result1222 + " <result.get(1)>")
chamada antiga: assertEquals("Breaking Down Stop", result.get(0))
nova chamada: assertEquals("Breaking Down Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking Down Stop' é diferente de " + result1223 + " <result.get(0)>")
chamada antiga: assertEquals("run walk", result.get(1))
nova chamada: assertEquals("run walk", result.get(1), "Era esperado valores iguais, mas  'run walk' é diferente de " + result1224 + " <result.get(1)>")
chamada antiga: assertEquals("foo bam", result.get(0))
nova chamada: assertEquals("foo bam", result.get(0), "Era esperado valores iguais, mas  'foo bam' é diferente de " + result1225 + " <result.get(0)>")
chamada antiga: assertEquals("bar bam", result.get(1))
nova chamada: assertEquals("bar bam", result.get(1), "Era esperado valores iguais, mas  'bar bam' é diferente de " + result1226 + " <result.get(1)>")
chamada antiga: assertEquals(3, col.countUnique())
nova chamada: assertEquals(3, col.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result1227 + " <col.countUnique()>")
chamada antiga: assertEquals(3, col.unique().size())
nova chamada: assertEquals(3, col.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1228 + " <col.unique().size()>")
chamada antiga: assertEquals(3, col.asStringColumn().unique().size())
nova chamada: assertEquals(3, col.asStringColumn().unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1229 + " <col.asStringColumn().unique().size()>")
chamada antiga: assertEquals(4, t2.rowCount())
nova chamada: assertEquals(4, t2.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1230 + " <t2.rowCount()>")
chamada antiga: assertEquals(2, t2.rowCount())
nova chamada: assertEquals(2, t2.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1231 + " <t2.rowCount()>")
chamada antiga: assertEquals(3, col1.countUnique())
nova chamada: assertEquals(3, col1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result1232 + " <col1.countUnique()>")
chamada antiga: assertEquals(3, col1.unique().size())
nova chamada: assertEquals(3, col1.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1233 + " <col1.unique().size()>")
chamada antiga: assertEquals(2, summary.columnCount())
nova chamada: assertEquals(2, summary.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1234 + " <summary.columnCount()>")
chamada antiga: assertEquals(4, summary.rowCount())
nova chamada: assertEquals(4, summary.rowCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1235 + " <summary.rowCount()>")
chamada antiga: assertEquals("Count", summary.getUnformatted(0, 0))
nova chamada: assertEquals("Count", summary.getUnformatted(0, 0), "Era esperado valores iguais, mas  'Count' é diferente de " + result1236 + " <summary.getUnformatted(0, 0)>")
chamada antiga: assertEquals("4", summary.getUnformatted(0, 1))
nova chamada: assertEquals("4", summary.getUnformatted(0, 1), "Era esperado valores iguais, mas  '4' é diferente de " + result1237 + " <summary.getUnformatted(0, 1)>")
chamada antiga: assertEquals("Unique", summary.getUnformatted(1, 0))
nova chamada: assertEquals("Unique", summary.getUnformatted(1, 0), "Era esperado valores iguais, mas  'Unique' é diferente de " + result1238 + " <summary.getUnformatted(1, 0)>")
chamada antiga: assertEquals("4", summary.getUnformatted(1, 1))
nova chamada: assertEquals("4", summary.getUnformatted(1, 1), "Era esperado valores iguais, mas  '4' é diferente de " + result1239 + " <summary.getUnformatted(1, 1)>")
chamada antiga: assertEquals("Top", summary.getUnformatted(2, 0))
nova chamada: assertEquals("Top", summary.getUnformatted(2, 0), "Era esperado valores iguais, mas  'Top' é diferente de " + result1240 + " <summary.getUnformatted(2, 0)>")
chamada antiga: assertEquals("Value 4", summary.getUnformatted(2, 1))
nova chamada: assertEquals("Value 4", summary.getUnformatted(2, 1), "Era esperado valores iguais, mas  'Value 4' é diferente de " + result1241 + " <summary.getUnformatted(2, 1)>")
chamada antiga: assertEquals("Top Freq.", summary.getUnformatted(3, 0))
nova chamada: assertEquals("Top Freq.", summary.getUnformatted(3, 0), "Era esperado valores iguais, mas  'Top Freq.' é diferente de " + result1242 + " <summary.getUnformatted(3, 0)>")
chamada antiga: assertEquals("1", summary.getUnformatted(3, 1))
nova chamada: assertEquals("1", summary.getUnformatted(3, 1), "Era esperado valores iguais, mas  '1' é diferente de " + result1243 + " <summary.getUnformatted(3, 1)>")
chamada antiga: assertEquals(1, col1.size())
nova chamada: assertEquals(1, col1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1244 + " <col1.size()>")
chamada antiga: assertEquals(2, col1.size())
nova chamada: assertEquals(2, col1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1245 + " <col1.size()>")
chamada antiga: assertEquals(3, col1.size())
nova chamada: assertEquals(3, col1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1246 + " <col1.size()>")
chamada antiga: assertEquals(3, column.size())
nova chamada: assertEquals(3, column.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1247 + " <column.size()>")
chamada antiga: assertTrue(column.contains("no Value"))
nova chamada: assertTrue(column.contains("no Value"), "Era esperado verdadeiro, mas " + result1248 + " <column.contains('no Value')> é falso")
chamada antiga: assertFalse(column.contains("Value 4"))
nova chamada: assertFalse(column.contains("Value 4"), "Era esperado falso, mas " + result1249 + " <column.contains('Value 4')> é verdadeiro ")
chamada antiga: assertEquals("", c1.get(0))
nova chamada: assertEquals("", c1.get(0), "Era esperado valores iguais, mas  '' é diferente de " + result1250 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 1", c1.get(1))
nova chamada: assertEquals("Value 1", c1.get(1), "Era esperado valores iguais, mas  'Value 1' é diferente de " + result1251 + " <c1.get(1)>")
chamada antiga: assertEquals("Value 2", c1.get(2))
nova chamada: assertEquals("Value 2", c1.get(2), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1252 + " <c1.get(2)>")
chamada antiga: assertEquals("Value 2", c1.get(0))
nova chamada: assertEquals("Value 2", c1.get(0), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1253 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 3", c1.get(1))
nova chamada: assertEquals("Value 3", c1.get(1), "Era esperado valores iguais, mas  'Value 3' é diferente de " + result1254 + " <c1.get(1)>")
chamada antiga: assertEquals("", c1.get(3))
nova chamada: assertEquals("", c1.get(3), "Era esperado valores iguais, mas  '' é diferente de " + result1255 + " <c1.get(3)>")
chamada antiga: assertEquals(3, joined.columnCount())
nova chamada: assertEquals(3, joined.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1256 + " <joined.columnCount()>")
chamada antiga: assertEquals(0, sc.countMissing())
nova chamada: assertEquals(0, sc.countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result1257 + " <sc.countMissing()>")
chamada antiga: assertEquals(0, sc.countMissing())
nova chamada: assertEquals(0, sc.countMissing(), "Era esperado valores iguais, mas  0 é diferente de " + result1258 + " <sc.countMissing()>")
chamada antiga: assertTrue(sc.isMissing(sc.size() - 1))
nova chamada: assertTrue(sc.isMissing(sc.size() - 1), "Era esperado verdadeiro, mas " + result1259 + " <sc.isMissing(sc.size() - 1)> é falso")
chamada antiga: assertFalse(sc.isMissing(sc.size() - 1))
nova chamada: assertFalse(sc.isMissing(sc.size() - 1), "Era esperado falso, mas " + result1260 + " <sc.isMissing(sc.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals("Value 2", c1.get(0))
nova chamada: assertEquals("Value 2", c1.get(0), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1261 + " <c1.get(0)>")
chamada antiga: assertEquals("Value 3", c1.get(1))
nova chamada: assertEquals("Value 3", c1.get(1), "Era esperado valores iguais, mas  'Value 3' é diferente de " + result1262 + " <c1.get(1)>")
chamada antiga: assertEquals("", c1.get(3))
nova chamada: assertEquals("", c1.get(3), "Era esperado valores iguais, mas  '' é diferente de " + result1263 + " <c1.get(3)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1264 + " <result.size()>")
chamada antiga: assertEquals(-1, column.firstIndexOf("test"))
nova chamada: assertEquals(-1, column.firstIndexOf("test"), "Era esperado valores iguais, mas  -1 é diferente de " + result1265 + " <column.firstIndexOf('test')>")
chamada antiga: assertEquals(ColumnType.TEXT, column.type())
nova chamada: assertEquals(ColumnType.TEXT, column.type(), "Era esperado valores iguais, mas  ColumnType.TEXT é diferente de " + result1266 + " <column.type()>")
chamada antiga: assertEquals("Value 2", column.getString(1))
nova chamada: assertEquals("Value 2", column.getString(1), "Era esperado valores iguais, mas  'Value 2' é diferente de " + result1267 + " <column.getString(1)>")
chamada antiga: assertEquals(4, column.size())
nova chamada: assertEquals(4, column.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1268 + " <column.size()>")
chamada antiga: assertEquals("Text column: testing", column.toString())
nova chamada: assertEquals("Text column: testing", column.toString(), "Era esperado valores iguais, mas  'Text column: testing' é diferente de " + result1269 + " <column.toString()>")
chamada antiga: assertEquals("Wyoming", stringColumn.top(5).get(0))
nova chamada: assertEquals("Wyoming", stringColumn.top(5).get(0), "Era esperado valores iguais, mas  'Wyoming' é diferente de " + result1270 + " <stringColumn.top(5).get(0)>")
chamada antiga: assertEquals("Alabama", stringColumn.bottom(5).get(0))
nova chamada: assertEquals("Alabama", stringColumn.bottom(5).get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1271 + " <stringColumn.bottom(5).get(0)>")
chamada antiga: assertEquals("Alabama", selection.get(0))
nova chamada: assertEquals("Alabama", selection.get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1272 + " <selection.get(0)>")
chamada antiga: assertEquals("Alaska", selection.get(1))
nova chamada: assertEquals("Alaska", selection.get(1), "Era esperado valores iguais, mas  'Alaska' é diferente de " + result1273 + " <selection.get(1)>")
chamada antiga: assertEquals("Arizona", selection.get(2))
nova chamada: assertEquals("Arizona", selection.get(2), "Era esperado valores iguais, mas  'Arizona' é diferente de " + result1274 + " <selection.get(2)>")
chamada antiga: assertEquals("Arkansas", selection.get(3))
nova chamada: assertEquals("Arkansas", selection.get(3), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1275 + " <selection.get(3)>")
chamada antiga: assertEquals("Tennessee", selection.get(0))
nova chamada: assertEquals("Tennessee", selection.get(0), "Era esperado valores iguais, mas  'Tennessee' é diferente de " + result1276 + " <selection.get(0)>")
chamada antiga: assertEquals("Texas", selection.get(1))
nova chamada: assertEquals("Texas", selection.get(1), "Era esperado valores iguais, mas  'Texas' é diferente de " + result1277 + " <selection.get(1)>")
chamada antiga: assertEquals("[[Alabama]]", stringColumn.getString(0))
nova chamada: assertEquals("[[Alabama]]", stringColumn.getString(0), "Era esperado valores iguais, mas  '[[Alabama]]' é diferente de " + result1278 + " <stringColumn.getString(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1279 + " <selection.size()>")
chamada antiga: assertEquals("Arkansas", selection.getString(0))
nova chamada: assertEquals("Arkansas", selection.getString(0), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1280 + " <selection.getString(0)>")
chamada antiga: assertEquals(result.size(), stringColumn.size() - 1)
nova chamada: assertEquals(result.size(), stringColumn.size() - 1, "Era esperado valores iguais, mas " + result1281 + " <result.size()> é diferente de " + " stringColumn.size() - 1")
chamada antiga: assertFalse(result.contains("Alabama"))
nova chamada: assertFalse(result.contains("Alabama"), "Era esperado falso, mas " + result1282 + " <result.contains('Alabama')> é verdadeiro ")
chamada antiga: assertEquals(51, stringColumn.size())
nova chamada: assertEquals(51, stringColumn.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1283 + " <stringColumn.size()>")
chamada antiga: assertFalse(other.contains("Value 3"))
nova chamada: assertFalse(other.contains("Value 3"), "Era esperado falso, mas " + result1284 + " <other.contains('Value 3')> é verdadeiro ")
chamada antiga: assertTrue(other.contains("Value 1"))
nova chamada: assertTrue(other.contains("Value 1"), "Era esperado verdadeiro, mas " + result1285 + " <other.contains('Value 1')> é falso")
chamada antiga: assertFalse(other.contains("Value 2"))
nova chamada: assertFalse(other.contains("Value 2"), "Era esperado falso, mas " + result1286 + " <other.contains('Value 2')> é verdadeiro ")
chamada antiga: assertTrue(other.contains("Some other thing"))
nova chamada: assertTrue(other.contains("Some other thing"), "Era esperado verdadeiro, mas " + result1287 + " <other.contains('Some other thing')> é falso")
chamada antiga: assertTrue(other.contains("VALUE 3"))
nova chamada: assertTrue(other.contains("VALUE 3"), "Era esperado verdadeiro, mas " + result1288 + " <other.contains('VALUE 3')> é falso")
chamada antiga: assertTrue(other.contains("Value 4"))
nova chamada: assertTrue(other.contains("Value 4"), "Era esperado verdadeiro, mas " + result1289 + " <other.contains('Value 4')> é falso")
chamada antiga: assertEquals(4, other.size())
nova chamada: assertEquals(4, other.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1290 + " <other.size()>")
chamada antiga: assertEquals(3, result.size())
nova chamada: assertEquals(3, result.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1291 + " <result.size()>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1292 + " <result.size()>")
chamada antiga: assertTrue(result.contains("Alabama"))
nova chamada: assertTrue(result.contains("Alabama"), "Era esperado verdadeiro, mas " + result1293 + " <result.contains('Alabama')> é falso")
chamada antiga: assertEquals(2, result2.size())
nova chamada: assertEquals(2, result2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1294 + " <result2.size()>")
chamada antiga: assertTrue(stringColumn.contains("Alabama"))
nova chamada: assertTrue(stringColumn.contains("Alabama"), "Era esperado verdadeiro, mas " + result1295 + " <stringColumn.contains('Alabama')> é falso")
chamada antiga: assertEquals(51, selection2.size())
nova chamada: assertEquals(51, selection2.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1296 + " <selection2.size()>")
chamada antiga: assertEquals(result2.size(), stringColumn.size())
nova chamada: assertEquals(result2.size(), stringColumn.size(), "Era esperado valores iguais, mas " + result1297 + " <result2.size()> é diferente de " + result1298 + " <stringColumn.size()>")
chamada antiga: assertEquals("Alabama", selection.get(0))
nova chamada: assertEquals("Alabama", selection.get(0), "Era esperado valores iguais, mas  'Alabama' é diferente de " + result1299 + " <selection.get(0)>")
chamada antiga: assertEquals("Texas", selection.get(1))
nova chamada: assertEquals("Texas", selection.get(1), "Era esperado valores iguais, mas  'Texas' é diferente de " + result1300 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1301 + " <selection.size()>")
chamada antiga: assertEquals("Alaska", selection.get(0))
nova chamada: assertEquals("Alaska", selection.get(0), "Era esperado valores iguais, mas  'Alaska' é diferente de " + result1302 + " <selection.get(0)>")
chamada antiga: assertEquals("Arizona", selection.get(1))
nova chamada: assertEquals("Arizona", selection.get(1), "Era esperado valores iguais, mas  'Arizona' é diferente de " + result1303 + " <selection.get(1)>")
chamada antiga: assertEquals("Arkansas", selection.get(2))
nova chamada: assertEquals("Arkansas", selection.get(2), "Era esperado valores iguais, mas  'Arkansas' é diferente de " + result1304 + " <selection.get(2)>")
chamada antiga: assertEquals(49, selection.size())
nova chamada: assertEquals(49, selection.size(), "Era esperado valores iguais, mas  49 é diferente de " + result1305 + " <selection.size()>")
chamada antiga: assertEquals(51, states.size())
nova chamada: assertEquals(51, states.size(), "Era esperado valores iguais, mas  51 é diferente de " + result1306 + " <states.size()>")
chamada antiga: assertEquals("Name: John White", formatted.get(0))
nova chamada: assertEquals("Name: John White", formatted.get(0), "Era esperado valores iguais, mas  'Name: John White' é diferente de " + result1307 + " <formatted.get(0)>")
chamada antiga: assertEquals("ing", suffix.get(0))
nova chamada: assertEquals("ing", suffix.get(0), "Era esperado valores iguais, mas  'ing' é diferente de " + result1308 + " <suffix.get(0)>")
chamada antiga: assertEquals("cube", suffix.get(1))
nova chamada: assertEquals("cube", suffix.get(1), "Era esperado valores iguais, mas  'cube' é diferente de " + result1309 + " <suffix.get(1)>")
chamada antiga: assertEquals("e", suffix.get(3))
nova chamada: assertEquals("e", suffix.get(3), "Era esperado valores iguais, mas  'e' é diferente de " + result1310 + " <suffix.get(3)>")
chamada antiga: assertEquals("r", result.get(0))
nova chamada: assertEquals("r", result.get(0), "Era esperado valores iguais, mas  'r' é diferente de " + result1311 + " <result.get(0)>")
chamada antiga: assertEquals("ice", result.get(1))
nova chamada: assertEquals("ice", result.get(1), "Era esperado valores iguais, mas  'ice' é diferente de " + result1312 + " <result.get(1)>")
chamada antiga: assertEquals("back", result.get(2))
nova chamada: assertEquals("back", result.get(2), "Era esperado valores iguais, mas  'back' é diferente de " + result1313 + " <result.get(2)>")
chamada antiga: assertEquals(" running", result.get(0))
nova chamada: assertEquals(" running", result.get(0), "Era esperado valores iguais, mas  ' running' é diferente de " + result1314 + " <result.get(0)>")
chamada antiga: assertEquals(" icecube", result.get(1))
nova chamada: assertEquals(" icecube", result.get(1), "Era esperado valores iguais, mas  ' icecube' é diferente de " + result1315 + " <result.get(1)>")
chamada antiga: assertEquals("    back", result.get(2))
nova chamada: assertEquals("    back", result.get(2), "Era esperado valores iguais, mas  '    back' é diferente de " + result1316 + " <result.get(2)>")
chamada antiga: assertEquals("runningX", result.get(0))
nova chamada: assertEquals("runningX", result.get(0), "Era esperado valores iguais, mas  'runningX' é diferente de " + result1317 + " <result.get(0)>")
chamada antiga: assertEquals("icecubeX", result.get(1))
nova chamada: assertEquals("icecubeX", result.get(1), "Era esperado valores iguais, mas  'icecubeX' é diferente de " + result1318 + " <result.get(1)>")
chamada antiga: assertEquals("backXXXX", result.get(2))
nova chamada: assertEquals("backXXXX", result.get(2), "Era esperado valores iguais, mas  'backXXXX' é diferente de " + result1319 + " <result.get(2)>")
chamada antiga: assertEquals("ning", result.get(0))
nova chamada: assertEquals("ning", result.get(0), "Era esperado valores iguais, mas  'ning' é diferente de " + result1320 + " <result.get(0)>")
chamada antiga: assertEquals("cube", result.get(1))
nova chamada: assertEquals("cube", result.get(1), "Era esperado valores iguais, mas  'cube' é diferente de " + result1321 + " <result.get(1)>")
chamada antiga: assertEquals("k", result.get(2))
nova chamada: assertEquals("k", result.get(2), "Era esperado valores iguais, mas  'k' é diferente de " + result1322 + " <result.get(2)>")
chamada antiga: assertEquals("un", result.get(0))
nova chamada: assertEquals("un", result.get(0), "Era esperado valores iguais, mas  'un' é diferente de " + result1323 + " <result.get(0)>")
chamada antiga: assertEquals("ce", result.get(1))
nova chamada: assertEquals("ce", result.get(1), "Era esperado valores iguais, mas  'ce' é diferente de " + result1324 + " <result.get(1)>")
chamada antiga: assertEquals("ac", result.get(2))
nova chamada: assertEquals("ac", result.get(2), "Era esperado valores iguais, mas  'ac' é diferente de " + result1325 + " <result.get(2)>")
chamada antiga: assertEquals("walkning", result.get(0))
nova chamada: assertEquals("walkning", result.get(0), "Era esperado valores iguais, mas  'walkning' é diferente de " + result1326 + " <result.get(0)>")
chamada antiga: assertEquals("walk run run", result.get(1))
nova chamada: assertEquals("walk run run", result.get(1), "Era esperado valores iguais, mas  'walk run run' é diferente de " + result1327 + " <result.get(1)>")
chamada antiga: assertEquals("walkning", result.get(0))
nova chamada: assertEquals("walkning", result.get(0), "Era esperado valores iguais, mas  'walkning' é diferente de " + result1328 + " <result.get(0)>")
chamada antiga: assertEquals("walk walk walk", result.get(1))
nova chamada: assertEquals("walk walk walk", result.get(1), "Era esperado valores iguais, mas  'walk walk walk' é diferente de " + result1329 + " <result.get(1)>")
chamada antiga: assertEquals("ruXXXXiXXXX", result.get(0))
nova chamada: assertEquals("ruXXXXiXXXX", result.get(0), "Era esperado valores iguais, mas  'ruXXXXiXXXX' é diferente de " + result1330 + " <result.get(0)>")
chamada antiga: assertEquals("ruXX ruXX ruXX", result.get(1))
nova chamada: assertEquals("ruXX ruXX ruXX", result.get(1), "Era esperado valores iguais, mas  'ruXX ruXX ruXX' é diferente de " + result1331 + " <result.get(1)>")
chamada antiga: assertEquals("running--walking--swimming", result.get(0))
nova chamada: assertEquals("running--walking--swimming", result.get(0), "Era esperado valores iguais, mas  'running--walking--swimming' é diferente de " + result1332 + " <result.get(0)>")
chamada antiga: assertEquals("run--walk--swim", result.get(1))
nova chamada: assertEquals("run--walk--swim", result.get(1), "Era esperado valores iguais, mas  'run--walk--swim' é diferente de " + result1333 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1334 + " <result.get(0)>")
chamada antiga: assertEquals("run run run", result.get(1))
nova chamada: assertEquals("run run run", result.get(1), "Era esperado valores iguais, mas  'run run run' é diferente de " + result1335 + " <result.get(1)>")
chamada antiga: assertEquals("RUNNING", result.get(0))
nova chamada: assertEquals("RUNNING", result.get(0), "Era esperado valores iguais, mas  'RUNNING' é diferente de " + result1336 + " <result.get(0)>")
chamada antiga: assertEquals("RUN RUN RUN", result.get(1))
nova chamada: assertEquals("RUN RUN RUN", result.get(1), "Era esperado valores iguais, mas  'RUN RUN RUN' é diferente de " + result1337 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1338 + " <result.get(0)>")
chamada antiga: assertEquals("run run run", result.get(1))
nova chamada: assertEquals("run run run", result.get(1), "Era esperado valores iguais, mas  'run run run' é diferente de " + result1339 + " <result.get(1)>")
chamada antiga: assertEquals("running", result.get(0))
nova chamada: assertEquals("running", result.get(0), "Era esperado valores iguais, mas  'running' é diferente de " + result1340 + " <result.get(0)>")
chamada antiga: assertEquals("Stop Br...", result.get(1))
nova chamada: assertEquals("Stop Br...", result.get(1), "Era esperado valores iguais, mas  'Stop Br...' é diferente de " + result1341 + " <result.get(1)>")
chamada antiga: assertEquals("Backwar...", result.get(2))
nova chamada: assertEquals("Backwar...", result.get(2), "Era esperado valores iguais, mas  'Backwar...' é diferente de " + result1342 + " <result.get(2)>")
chamada antiga: assertEquals("Breaking Down Stop", result.get(0))
nova chamada: assertEquals("Breaking Down Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking Down Stop' é diferente de " + result1343 + " <result.get(0)>")
chamada antiga: assertEquals("Backwards Writing", result.get(1))
nova chamada: assertEquals("Backwards Writing", result.get(1), "Era esperado valores iguais, mas  'Backwards Writing' é diferente de " + result1344 + " <result.get(1)>")
chamada antiga: assertEquals("Breaking,Down,Stop", result.get(0))
nova chamada: assertEquals("Breaking,Down,Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking,Down,Stop' é diferente de " + result1345 + " <result.get(0)>")
chamada antiga: assertEquals("Writing Backwards", result.get(1))
nova chamada: assertEquals("Writing Backwards", result.get(1), "Era esperado valores iguais, mas  'Writing Backwards' é diferente de " + result1346 + " <result.get(1)>")
chamada antiga: assertEquals("Stop Breaking Down", result.get(0))
nova chamada: assertEquals("Stop Breaking Down", result.get(0), "Era esperado valores iguais, mas  'Stop Breaking Down' é diferente de " + result1347 + " <result.get(0)>")
chamada antiga: assertEquals("walk run", result.get(1))
nova chamada: assertEquals("walk run", result.get(1), "Era esperado valores iguais, mas  'walk run' é diferente de " + result1348 + " <result.get(1)>")
chamada antiga: assertEquals("Breaking Down Stop", result.get(0))
nova chamada: assertEquals("Breaking Down Stop", result.get(0), "Era esperado valores iguais, mas  'Breaking Down Stop' é diferente de " + result1349 + " <result.get(0)>")
chamada antiga: assertEquals("run walk", result.get(1))
nova chamada: assertEquals("run walk", result.get(1), "Era esperado valores iguais, mas  'run walk' é diferente de " + result1350 + " <result.get(1)>")
chamada antiga: assertEquals("foo bam", result.get(0))
nova chamada: assertEquals("foo bam", result.get(0), "Era esperado valores iguais, mas  'foo bam' é diferente de " + result1351 + " <result.get(0)>")
chamada antiga: assertEquals("bar bam", result.get(1))
nova chamada: assertEquals("bar bam", result.get(1), "Era esperado valores iguais, mas  'bar bam' é diferente de " + result1352 + " <result.get(1)>")
chamada antiga: assertEquals(3, col1.countUnique())
nova chamada: assertEquals(3, col1.countUnique(), "Era esperado valores iguais, mas  3 é diferente de " + result1353 + " <col1.countUnique()>")
chamada antiga: assertEquals(3, col1.unique().size())
nova chamada: assertEquals(3, col1.unique().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1354 + " <col1.unique().size()>")
chamada antiga: assertEquals(1, col1.size())
nova chamada: assertEquals(1, col1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1355 + " <col1.size()>")
chamada antiga: assertEquals(2, col1.size())
nova chamada: assertEquals(2, col1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1356 + " <col1.size()>")
chamada antiga: assertEquals(3, col1.size())
nova chamada: assertEquals(3, col1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1357 + " <col1.size()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1358 + " <result.size()>")
chamada antiga: assertTrue(intColumn.where(result).contains(4))
nova chamada: assertTrue(intColumn.where(result).contains(4), "Era esperado verdadeiro, mas " + result1359 + " <intColumn.where(result).contains(4)> é falso")
chamada antiga: assertEquals(5, result.size())
nova chamada: assertEquals(5, result.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1360 + " <result.size()>")
chamada antiga: assertTrue(intColumn.where(result).contains(5))
nova chamada: assertTrue(intColumn.where(result).contains(5), "Era esperado verdadeiro, mas " + result1361 + " <intColumn.where(result).contains(5)> é falso")
chamada antiga: assertTrue(intColumn.isMissing(intColumn.size() - 1))
nova chamada: assertTrue(intColumn.isMissing(intColumn.size() - 1), "Era esperado verdadeiro, mas " + result1362 + " <intColumn.isMissing(intColumn.size() - 1)> é falso")
chamada antiga: assertFalse(intColumn.isMissing(intColumn.size() - 1))
nova chamada: assertFalse(intColumn.isMissing(intColumn.size() - 1), "Era esperado falso, mas " + result1363 + " <intColumn.isMissing(intColumn.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals(floatValue, floatColumn.get(0))
nova chamada: assertEquals(floatValue, floatColumn.get(0), "Era esperado valores iguais, mas  floatValue é diferente de " + result1364 + " <floatColumn.get(0)>")
chamada antiga: assertEquals(floatObject, floatColumn.get(0))
nova chamada: assertEquals(floatObject, floatColumn.get(0), "Era esperado valores iguais, mas  floatObject é diferente de " + result1365 + " <floatColumn.get(0)>")
chamada antiga: assertEquals(2.5f, floatColumn.get(0))
nova chamada: assertEquals(2.5f, floatColumn.get(0), "Era esperado valores iguais, mas  2.5f é diferente de " + result1366 + " <floatColumn.get(0)>")
chamada antiga: assertTrue(floatColumn.isMissing(1))
nova chamada: assertTrue(floatColumn.isMissing(1), "Era esperado verdadeiro, mas " + result1367 + " <floatColumn.isMissing(1)> é falso")
chamada antiga: assertEquals(4.0f, floatColumn.get(2))
nova chamada: assertEquals(4.0f, floatColumn.get(2), "Era esperado valores iguais, mas  4.0f é diferente de " + result1368 + " <floatColumn.get(2)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1369 + " <result.size()>")
chamada antiga: assertTrue(floatColumn.where(result).contains(4f))
nova chamada: assertTrue(floatColumn.where(result).contains(4f), "Era esperado verdadeiro, mas " + result1370 + " <floatColumn.where(result).contains(4f)> é falso")
chamada antiga: assertEquals(5, result.size())
nova chamada: assertEquals(5, result.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1371 + " <result.size()>")
chamada antiga: assertTrue(floatColumn.where(result).contains(5f))
nova chamada: assertTrue(floatColumn.where(result).contains(5f), "Era esperado verdadeiro, mas " + result1372 + " <floatColumn.where(result).contains(5f)> é falso")
chamada antiga: assertTrue(floatColumn.isMissing(floatColumn.size() - 1))
nova chamada: assertTrue(floatColumn.isMissing(floatColumn.size() - 1), "Era esperado verdadeiro, mas " + result1373 + " <floatColumn.isMissing(floatColumn.size() - 1)> é falso")
chamada antiga: assertFalse(floatColumn.isMissing(floatColumn.size() - 1))
nova chamada: assertFalse(floatColumn.isMissing(floatColumn.size() - 1), "Era esperado falso, mas " + result1374 + " <floatColumn.isMissing(floatColumn.size() - 1)> é verdadeiro ")
chamada antiga: assertEquals(3, floatColumn.asSet().size())
nova chamada: assertEquals(3, floatColumn.asSet().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1375 + " <floatColumn.asSet().size()>")
chamada antiga: assertTrue(floatColumn.asSet().contains(4f))
nova chamada: assertTrue(floatColumn.asSet().contains(4f), "Era esperado verdadeiro, mas " + result1376 + " <floatColumn.asSet().contains(4f)> é falso")
chamada antiga: assertNotNull(winsModel.toString())
nova chamada: assertNotNull(winsModel.toString(), "Era esperado não nulo, mas " + result1377 + " <winsModel.toString()> é nulo")
chamada antiga: assertEquals(2, dataframe.nrows())
nova chamada: assertEquals(2, dataframe.nrows(), "Era esperado valores iguais, mas  2 é diferente de " + result1378 + " <dataframe.nrows()>")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1379 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1380 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1381 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1382 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1383 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertTrue(Arrays.deepEquals(expected, results))
nova chamada: assertTrue(Arrays.deepEquals(expected, results), "Era esperado verdadeiro, mas " + result1384 + " <Arrays.deepEquals(expected, results)> é falso")
chamada antiga: assertArrayEquals(sma5, result.asObjectArray())
nova chamada: assertArrayEquals(sma5, result.asObjectArray(), "Era esperado arrays iguais, mas  sma5 é diferente de " + result1385 + " <result.asObjectArray()>")
chamada antiga: assertEquals("                            Data                             " + LINE_END + " Summary   |         value1         |        value2         |" + LINE_END + "-------------------------------------------------------------" + LINE_END + "    Count  |                     3  |                    3  |" + LINE_END + "      sum  |                   3.3  |                  6.3  |" + LINE_END + "     Mean  |                   1.1  |                  2.1  |" + LINE_END + "      Min  |                     1  |                    2  |" + LINE_END + "      Max  |                   1.2  |                  2.2  |" + LINE_END + "    Range  |   0.19999999999999996  |  0.20000000000000018  |" + LINE_END + " Variance  |  0.009999999999999995  |  0.01000000000000004  |" + LINE_END + " Std. Dev  |   0.09999999999999998  |   0.1000000000000002  |", result.print())
nova chamada: assertEquals("                            Data                             " + LINE_END + " Summary   |         value1         |        value2         |" + LINE_END + "-------------------------------------------------------------" + LINE_END + "    Count  |                     3  |                    3  |" + LINE_END + "      sum  |                   3.3  |                  6.3  |" + LINE_END + "     Mean  |                   1.1  |                  2.1  |" + LINE_END + "      Min  |                     1  |                    2  |" + LINE_END + "      Max  |                   1.2  |                  2.2  |" + LINE_END + "    Range  |   0.19999999999999996  |  0.20000000000000018  |" + LINE_END + " Variance  |  0.009999999999999995  |  0.01000000000000004  |" + LINE_END + " Std. Dev  |   0.09999999999999998  |   0.1000000000000002  |", result.print(), "Era esperado valores iguais, mas  '                            Data                             ' + LINE_END + ' Summary   |         value1         |        value2         |' + LINE_END + '-------------------------------------------------------------' + LINE_END + '    Count  |                     3  |                    3  |' + LINE_END + '      sum  |                   3.3  |                  6.3  |' + LINE_END + '     Mean  |                   1.1  |                  2.1  |' + LINE_END + '      Min  |                     1  |                    2  |' + LINE_END + '      Max  |                   1.2  |                  2.2  |' + LINE_END + '    Range  |   0.19999999999999996  |  0.20000000000000018  |' + LINE_END + ' Variance  |  0.009999999999999995  |  0.01000000000000004  |' + LINE_END + ' Std. Dev  |   0.09999999999999998  |   0.1000000000000002  |' é diferente de " + result1386 + " <result.print()>")
chamada antiga: assertEquals("                                   Data                                    " + LINE_END + "  Summary   |  label   |         value1         |  truthy  |    dates     |" + LINE_END + "---------------------------------------------------------------------------" + LINE_END + "     Count  |       3  |                     3  |          |           3  |" + LINE_END + "    Unique  |       2  |                        |          |              |" + LINE_END + "       Top  |  yellow  |                        |          |              |" + LINE_END + " Top Freq.  |       2  |                        |          |              |" + LINE_END + "       sum  |          |                   3.3  |          |              |" + LINE_END + "      Mean  |          |                   1.1  |          |              |" + LINE_END + "       Min  |          |                     1  |          |              |" + LINE_END + "       Max  |          |                   1.2  |          |              |" + LINE_END + "     Range  |          |   0.19999999999999996  |          |              |" + LINE_END + "  Variance  |          |  0.009999999999999995  |          |              |" + LINE_END + "  Std. Dev  |          |   0.09999999999999998  |          |              |" + LINE_END + "     false  |          |                        |       1  |              |" + LINE_END + "      true  |          |                        |       2  |              |" + LINE_END + "   Missing  |          |                        |          |           0  |" + LINE_END + "  Earliest  |          |                        |          |  2001-01-01  |" + LINE_END + "    Latest  |          |                        |          |  2002-01-01  |", result.print())
nova chamada: assertEquals("                                   Data                                    " + LINE_END + "  Summary   |  label   |         value1         |  truthy  |    dates     |" + LINE_END + "---------------------------------------------------------------------------" + LINE_END + "     Count  |       3  |                     3  |          |           3  |" + LINE_END + "    Unique  |       2  |                        |          |              |" + LINE_END + "       Top  |  yellow  |                        |          |              |" + LINE_END + " Top Freq.  |       2  |                        |          |              |" + LINE_END + "       sum  |          |                   3.3  |          |              |" + LINE_END + "      Mean  |          |                   1.1  |          |              |" + LINE_END + "       Min  |          |                     1  |          |              |" + LINE_END + "       Max  |          |                   1.2  |          |              |" + LINE_END + "     Range  |          |   0.19999999999999996  |          |              |" + LINE_END + "  Variance  |          |  0.009999999999999995  |          |              |" + LINE_END + "  Std. Dev  |          |   0.09999999999999998  |          |              |" + LINE_END + "     false  |          |                        |       1  |              |" + LINE_END + "      true  |          |                        |       2  |              |" + LINE_END + "   Missing  |          |                        |          |           0  |" + LINE_END + "  Earliest  |          |                        |          |  2001-01-01  |" + LINE_END + "    Latest  |          |                        |          |  2002-01-01  |", result.print(), "Era esperado valores iguais, mas  '                                   Data                                    ' + LINE_END + '  Summary   |  label   |         value1         |  truthy  |    dates     |' + LINE_END + '---------------------------------------------------------------------------' + LINE_END + '     Count  |       3  |                     3  |          |           3  |' + LINE_END + '    Unique  |       2  |                        |          |              |' + LINE_END + '       Top  |  yellow  |                        |          |              |' + LINE_END + ' Top Freq.  |       2  |                        |          |              |' + LINE_END + '       sum  |          |                   3.3  |          |              |' + LINE_END + '      Mean  |          |                   1.1  |          |              |' + LINE_END + '       Min  |          |                     1  |          |              |' + LINE_END + '       Max  |          |                   1.2  |          |              |' + LINE_END + '     Range  |          |   0.19999999999999996  |          |              |' + LINE_END + '  Variance  |          |  0.009999999999999995  |          |              |' + LINE_END + '  Std. Dev  |          |   0.09999999999999998  |          |              |' + LINE_END + '     false  |          |                        |       1  |              |' + LINE_END + '      true  |          |                        |       2  |              |' + LINE_END + '   Missing  |          |                        |          |           0  |' + LINE_END + '  Earliest  |          |                        |          |  2001-01-01  |' + LINE_END + '    Latest  |          |                        |          |  2002-01-01  |' é diferente de " + result1387 + " <result.print()>")
chamada antiga: assertEquals(source.column(1).name(), slice.column(1).name())
nova chamada: assertEquals(source.column(1).name(), slice.column(1).name(), "Era esperado valores iguais, mas " + result1388 + " <source.column(1).name()> é diferente de " + result1389 + " <slice.column(1).name()>")
chamada antiga: assertTrue(source.rowCount() > slice.column(1).size())
nova chamada: assertTrue(source.rowCount() > slice.column(1).size(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(source.column("date").name(), slice.column("date").name())
nova chamada: assertEquals(source.column("date").name(), slice.column("date").name(), "Era esperado valores iguais, mas " + result1390 + " <source.column('date').name()> é diferente de " + result1391 + " <slice.column('date').name()>")
chamada antiga: assertTrue(source.rowCount() > slice.column("date").size())
nova chamada: assertTrue(source.rowCount() > slice.column("date").size(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(slice.column(1).size(), slice.column("date").size())
nova chamada: assertEquals(slice.column(1).size(), slice.column("date").size(), "Era esperado valores iguais, mas " + result1392 + " <slice.column(1).size()> é diferente de " + result1393 + " <slice.column('date').size()>")
chamada antiga: assertEquals(4, slice.column("date").size())
nova chamada: assertEquals(4, slice.column("date").size(), "Era esperado valores iguais, mas  4 é diferente de " + result1394 + " <slice.column('date').size()>")
chamada antiga: assertEquals(source.columnCount(), slice.columnCount())
nova chamada: assertEquals(source.columnCount(), slice.columnCount(), "Era esperado valores iguais, mas " + result1395 + " <source.columnCount()> é diferente de " + result1396 + " <slice.columnCount()>")
chamada antiga: assertEquals(source.rowCount(), slice.rowCount())
nova chamada: assertEquals(source.rowCount(), slice.rowCount(), "Era esperado valores iguais, mas " + result1397 + " <source.rowCount()> é diferente de " + result1398 + " <slice.rowCount()>")
chamada antiga: assertEquals(100, slice1.rowCount())
nova chamada: assertEquals(100, slice1.rowCount(), "Era esperado valores iguais, mas  100 é diferente de " + result1399 + " <slice1.rowCount()>")
chamada antiga: assertEquals(source.columns().get(0).size(), slice.columns().get(0).size())
nova chamada: assertEquals(source.columns().get(0).size(), slice.columns().get(0).size(), "Era esperado valores iguais, mas " + result1400 + " <source.columns().get(0).size()> é diferente de " + result1401 + " <slice.columns().get(0).size()>")
chamada antiga: assertEquals(source.columnIndex("who"), slice.columnIndex("who"))
nova chamada: assertEquals(source.columnIndex("who"), slice.columnIndex("who"), "Era esperado valores iguais, mas " + result1402 + " <source.columnIndex('who')> é diferente de " + result1403 + " <slice.columnIndex('who')>")
chamada antiga: assertEquals(source.columnIndex(who), slice.columnIndex(who))
nova chamada: assertEquals(source.columnIndex(who), slice.columnIndex(who), "Era esperado valores iguais, mas " + result1404 + " <source.columnIndex(who)> é diferente de " + result1405 + " <slice.columnIndex(who)>")
chamada antiga: assertNotNull(slice.get(0, 1))
nova chamada: assertNotNull(slice.get(0, 1), "Era esperado não nulo, mas " + result1406 + " <slice.get(0, 1)> é nulo")
chamada antiga: assertEquals(source.get(10, 1), slice.get(0, 1))
nova chamada: assertEquals(source.get(10, 1), slice.get(0, 1), "Era esperado valores iguais, mas " + result1407 + " <source.get(10, 1)> é diferente de " + result1408 + " <slice.get(0, 1)>")
chamada antiga: assertEquals(source.name(), slice.name())
nova chamada: assertEquals(source.name(), slice.name(), "Era esperado valores iguais, mas " + result1409 + " <source.name()> é diferente de " + result1410 + " <slice.name()>")
chamada antiga: assertTrue(slice.isEmpty())
nova chamada: assertTrue(slice.isEmpty(), "Era esperado verdadeiro, mas " + result1411 + " <slice.isEmpty()> é falso")
chamada antiga: assertFalse(source.isEmpty())
nova chamada: assertFalse(source.isEmpty(), "Era esperado falso, mas " + result1412 + " <source.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(source.columnNames(), slice.columnNames())
nova chamada: assertEquals(source.columnNames(), slice.columnNames(), "Era esperado valores iguais, mas " + result1413 + " <source.columnNames()> é diferente de " + result1414 + " <slice.columnNames()>")
chamada antiga: assertTrue(thrown.getMessage().contains("Class TableSlice does not support the addColumns operation"))
nova chamada: assertTrue(thrown.getMessage().contains("Class TableSlice does not support the addColumns operation"), "Era esperado verdadeiro, mas " + result1415 + " <thrown.getMessage().contains('Class TableSlice does not support the addColumns operation')> é falso")
chamada antiga: assertTrue(thrown.getMessage().contains("Class TableSlice does not support the removeColumns operation"))
nova chamada: assertTrue(thrown.getMessage().contains("Class TableSlice does not support the removeColumns operation"), "Era esperado verdadeiro, mas " + result1416 + " <thrown.getMessage().contains('Class TableSlice does not support the removeColumns operation')> é falso")
chamada antiga: assertEquals(first.get(0, 1), slice.get(0, 1))
nova chamada: assertEquals(first.get(0, 1), slice.get(0, 1), "Era esperado valores iguais, mas " + result1417 + " <first.get(0, 1)> é diferente de " + result1418 + " <slice.get(0, 1)>")
chamada antiga: assertEquals(first.get(0, 1), source.get(2, 1))
nova chamada: assertEquals(first.get(0, 1), source.get(2, 1), "Era esperado valores iguais, mas " + result1419 + " <first.get(0, 1)> é diferente de " + result1420 + " <source.get(2, 1)>")
chamada antiga: assertEquals("foo", slice.name())
nova chamada: assertEquals("foo", slice.name(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1421 + " <slice.name()>")
chamada antiga: assertNotEquals("foo", source.name())
nova chamada: assertNotEquals("foo", source.name(), "Era esperado valores diferentes, mas  'foo' é igual a " + result1422 + " <source.name()>")
chamada antiga: assertEquals(source.print(), slice.print())
nova chamada: assertEquals(source.print(), slice.print(), "Era esperado valores iguais, mas " + result1423 + " <source.print()> é diferente de " + result1424 + " <slice.print()>")
chamada antiga: assertEquals(10, t.rowCount())
nova chamada: assertEquals(10, t.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result1425 + " <t.rowCount()>")
chamada antiga: assertEquals(source.get(1, 1), t.get(0, 1))
nova chamada: assertEquals(source.get(1, 1), t.get(0, 1), "Era esperado valores iguais, mas " + result1426 + " <source.get(1, 1)> é diferente de " + result1427 + " <t.get(0, 1)>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(tableSlice.column("approval").asList(), source.column("approval").asList())
nova chamada: assertEquals(tableSlice.column("approval").asList(), source.column("approval").asList(), "Era esperado valores iguais, mas " + result1428 + " <tableSlice.column('approval').asList()> é diferente de " + result1429 + " <source.column('approval').asList()>")
chamada antiga: assertEquals(2, tableSlice.rowCount())
nova chamada: assertEquals(2, tableSlice.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1430 + " <tableSlice.rowCount()>")
chamada antiga: assertEquals(source.rowCount(), tableSlice.rowCount())
nova chamada: assertEquals(source.rowCount(), tableSlice.rowCount(), "Era esperado valores iguais, mas " + result1431 + " <source.rowCount()> é diferente de " + result1432 + " <tableSlice.rowCount()>")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertArrayEquals(expected, actual)
nova chamada: assertArrayEquals(expected, actual, "Era esperado arrays iguais, mas  expected é diferente de " + " actual")
chamada antiga: assertEquals(6, group.size())
nova chamada: assertEquals(6, group.size(), "Era esperado valores iguais, mas  6 é diferente de " + result1433 + " <group.size()>")
chamada antiga: assertEquals(table.rowCount(), count)
nova chamada: assertEquals(table.rowCount(), count, "Era esperado valores iguais, mas " + result1434 + " <table.rowCount()> é diferente de " + " count")
chamada antiga: assertEquals(146, group.size())
nova chamada: assertEquals(146, group.size(), "Era esperado valores iguais, mas  146 é diferente de " + result1435 + " <group.size()>")
chamada antiga: assertEquals(table.rowCount(), count)
nova chamada: assertEquals(table.rowCount(), count, "Era esperado valores iguais, mas " + result1436 + " <table.rowCount()> é diferente de " + " count")
chamada antiga: assertTrue(viewNames.contains("zogby~~~45"))
nova chamada: assertTrue(viewNames.contains("zogby~~~45"), "Era esperado verdadeiro, mas " + result1437 + " <viewNames.contains('zogby~~~45')> é falso")
chamada antiga: assertEquals(table.rowCount(), count)
nova chamada: assertEquals(table.rowCount(), count, "Era esperado valores iguais, mas " + result1438 + " <table.rowCount()> é diferente de " + " count")
chamada antiga: assertTrue(group.contains("fox"))
nova chamada: assertTrue(group.contains("fox"), "Era esperado verdadeiro, mas " + result1439 + " <group.contains('fox')> é falso")
chamada antiga: assertEquals(6, tables.size())
nova chamada: assertEquals(6, tables.size(), "Era esperado valores iguais, mas  6 é diferente de " + result1440 + " <tables.size()>")
chamada antiga: assertEquals(aggregated.rowCount(), group.size())
nova chamada: assertEquals(aggregated.rowCount(), group.size(), "Era esperado valores iguais, mas " + result1441 + " <aggregated.rowCount()> é diferente de " + result1442 + " <group.size()>")
chamada antiga: assertEquals(aggregated2.rowCount(), aggregated1.rowCount())
nova chamada: assertEquals(aggregated2.rowCount(), aggregated1.rowCount(), "Era esperado valores iguais, mas " + result1443 + " <aggregated2.rowCount()> é diferente de " + result1444 + " <aggregated1.rowCount()>")
chamada antiga: assertEquals(aggregated.rowCount(), group.size())
nova chamada: assertEquals(aggregated.rowCount(), group.size(), "Era esperado valores iguais, mas " + result1445 + " <aggregated.rowCount()> é diferente de " + result1446 + " <group.size()>")
chamada antiga: assertEquals(2, aggregated.columnCount())
nova chamada: assertEquals(2, aggregated.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1447 + " <aggregated.columnCount()>")
chamada antiga: assertEquals(3, aggregated.columnCount())
nova chamada: assertEquals(3, aggregated.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1448 + " <aggregated.columnCount()>")
chamada antiga: assertEquals(singleFalse.get(0), actual.get(0))
nova chamada: assertEquals(singleFalse.get(0), actual.get(0), "Era esperado valores iguais, mas " + result1449 + " <singleFalse.get(0)> é diferente de " + result1450 + " <actual.get(0)>")
chamada antiga: assertEquals(singleTrue.get(0), actual.get(0))
nova chamada: assertEquals(singleTrue.get(0), actual.get(0), "Era esperado valores iguais, mas " + result1451 + " <singleTrue.get(0)> é diferente de " + result1452 + " <actual.get(0)>")
chamada antiga: assertEquals(singleTrue.get(0), actual.get(0))
nova chamada: assertEquals(singleTrue.get(0), actual.get(0), "Era esperado valores iguais, mas " + result1453 + " <singleTrue.get(0)> é diferente de " + result1454 + " <actual.get(0)>")
chamada antiga: assertEquals(singleFalse.get(0), actual.get(0))
nova chamada: assertEquals(singleFalse.get(0), actual.get(0), "Era esperado valores iguais, mas " + result1455 + " <singleFalse.get(0)> é diferente de " + result1456 + " <actual.get(0)>")
chamada antiga: assertEquals(expected.length, num)
nova chamada: assertEquals(expected.length, num, "Era esperado valores iguais, mas  expected.length é diferente de " + " num")
chamada antiga: assertEquals(expected.length, num)
nova chamada: assertEquals(expected.length, num, "Era esperado valores iguais, mas  expected.length é diferente de " + " num")
chamada antiga: assertTrue(localDateColumn.isSunday().contains(0))
nova chamada: assertTrue(localDateColumn.isSunday().contains(0), "Era esperado verdadeiro, mas " + result1457 + " <localDateColumn.isSunday().contains(0)> é falso")
chamada antiga: assertTrue(localDateColumn.isMonday().contains(1))
nova chamada: assertTrue(localDateColumn.isMonday().contains(1), "Era esperado verdadeiro, mas " + result1458 + " <localDateColumn.isMonday().contains(1)> é falso")
chamada antiga: assertTrue(localDateColumn.isTuesday().contains(2))
nova chamada: assertTrue(localDateColumn.isTuesday().contains(2), "Era esperado verdadeiro, mas " + result1459 + " <localDateColumn.isTuesday().contains(2)> é falso")
chamada antiga: assertTrue(localDateColumn.isWednesday().contains(3))
nova chamada: assertTrue(localDateColumn.isWednesday().contains(3), "Era esperado verdadeiro, mas " + result1460 + " <localDateColumn.isWednesday().contains(3)> é falso")
chamada antiga: assertTrue(localDateColumn.isThursday().contains(4))
nova chamada: assertTrue(localDateColumn.isThursday().contains(4), "Era esperado verdadeiro, mas " + result1461 + " <localDateColumn.isThursday().contains(4)> é falso")
chamada antiga: assertTrue(localDateColumn.isFriday().contains(7))
nova chamada: assertTrue(localDateColumn.isFriday().contains(7), "Era esperado verdadeiro, mas " + result1462 + " <localDateColumn.isFriday().contains(7)> é falso")
chamada antiga: assertTrue(localDateColumn.isSaturday().contains(8))
nova chamada: assertTrue(localDateColumn.isSaturday().contains(8), "Era esperado verdadeiro, mas " + result1463 + " <localDateColumn.isSaturday().contains(8)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1464 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1465 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1466 + " <selection.contains(2)> é falso")
chamada antiga: assertTrue(selection.contains(5))
nova chamada: assertTrue(selection.contains(5), "Era esperado verdadeiro, mas " + result1467 + " <selection.contains(5)> é falso")
chamada antiga: assertFalse(selection.contains(6))
nova chamada: assertFalse(selection.contains(6), "Era esperado falso, mas " + result1468 + " <selection.contains(6)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1469 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1470 + " <selection.contains(1)> é falso")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1471 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1472 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1473 + " <selection.contains(1)> é falso")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1474 + " <selection.contains(2)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1475 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1476 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1477 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isInJanuary().contains(0))
nova chamada: assertTrue(dateColumn.isInJanuary().contains(0), "Era esperado verdadeiro, mas " + result1478 + " <dateColumn.isInJanuary().contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isInFebruary().contains(1))
nova chamada: assertTrue(dateColumn.isInFebruary().contains(1), "Era esperado verdadeiro, mas " + result1479 + " <dateColumn.isInFebruary().contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isInMarch().contains(2))
nova chamada: assertTrue(dateColumn.isInMarch().contains(2), "Era esperado verdadeiro, mas " + result1480 + " <dateColumn.isInMarch().contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isInApril().contains(3))
nova chamada: assertTrue(dateColumn.isInApril().contains(3), "Era esperado verdadeiro, mas " + result1481 + " <dateColumn.isInApril().contains(3)> é falso")
chamada antiga: assertTrue(dateColumn.isInMay().contains(4))
nova chamada: assertTrue(dateColumn.isInMay().contains(4), "Era esperado verdadeiro, mas " + result1482 + " <dateColumn.isInMay().contains(4)> é falso")
chamada antiga: assertTrue(dateColumn.isInJune().contains(5))
nova chamada: assertTrue(dateColumn.isInJune().contains(5), "Era esperado verdadeiro, mas " + result1483 + " <dateColumn.isInJune().contains(5)> é falso")
chamada antiga: assertTrue(dateColumn.isInJuly().contains(6))
nova chamada: assertTrue(dateColumn.isInJuly().contains(6), "Era esperado verdadeiro, mas " + result1484 + " <dateColumn.isInJuly().contains(6)> é falso")
chamada antiga: assertTrue(dateColumn.isInAugust().contains(7))
nova chamada: assertTrue(dateColumn.isInAugust().contains(7), "Era esperado verdadeiro, mas " + result1485 + " <dateColumn.isInAugust().contains(7)> é falso")
chamada antiga: assertTrue(dateColumn.isInSeptember().contains(8))
nova chamada: assertTrue(dateColumn.isInSeptember().contains(8), "Era esperado verdadeiro, mas " + result1486 + " <dateColumn.isInSeptember().contains(8)> é falso")
chamada antiga: assertTrue(dateColumn.isInOctober().contains(9))
nova chamada: assertTrue(dateColumn.isInOctober().contains(9), "Era esperado verdadeiro, mas " + result1487 + " <dateColumn.isInOctober().contains(9)> é falso")
chamada antiga: assertTrue(dateColumn.isInNovember().contains(10))
nova chamada: assertTrue(dateColumn.isInNovember().contains(10), "Era esperado verdadeiro, mas " + result1488 + " <dateColumn.isInNovember().contains(10)> é falso")
chamada antiga: assertTrue(dateColumn.isInDecember().contains(11))
nova chamada: assertTrue(dateColumn.isInDecember().contains(11), "Era esperado verdadeiro, mas " + result1489 + " <dateColumn.isInDecember().contains(11)> é falso")
chamada antiga: assertTrue(dateColumn.isInQ1().contains(2))
nova chamada: assertTrue(dateColumn.isInQ1().contains(2), "Era esperado verdadeiro, mas " + result1490 + " <dateColumn.isInQ1().contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isInQ2().contains(4))
nova chamada: assertTrue(dateColumn.isInQ2().contains(4), "Era esperado verdadeiro, mas " + result1491 + " <dateColumn.isInQ2().contains(4)> é falso")
chamada antiga: assertTrue(dateColumn.isInQ3().contains(8))
nova chamada: assertTrue(dateColumn.isInQ3().contains(8), "Era esperado verdadeiro, mas " + result1492 + " <dateColumn.isInQ3().contains(8)> é falso")
chamada antiga: assertTrue(dateColumn.isInQ4().contains(11))
nova chamada: assertTrue(dateColumn.isInQ4().contains(11), "Era esperado verdadeiro, mas " + result1493 + " <dateColumn.isInQ4().contains(11)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInJanuary()).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInJanuary()).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1494 + " <t.where(t.dateColumn('test').isInJanuary()).intColumn('index').contains(0)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInFebruary()).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInFebruary()).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1495 + " <t.where(t.dateColumn('test').isInFebruary()).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInMarch()).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInMarch()).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1496 + " <t.where(t.dateColumn('test').isInMarch()).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInApril()).intColumn("index").contains(3))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInApril()).intColumn("index").contains(3), "Era esperado verdadeiro, mas " + result1497 + " <t.where(t.dateColumn('test').isInApril()).intColumn('index').contains(3)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInMay()).intColumn("index").contains(4))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInMay()).intColumn("index").contains(4), "Era esperado verdadeiro, mas " + result1498 + " <t.where(t.dateColumn('test').isInMay()).intColumn('index').contains(4)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInJune()).intColumn("index").contains(5))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInJune()).intColumn("index").contains(5), "Era esperado verdadeiro, mas " + result1499 + " <t.where(t.dateColumn('test').isInJune()).intColumn('index').contains(5)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInJuly()).intColumn("index").contains(6))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInJuly()).intColumn("index").contains(6), "Era esperado verdadeiro, mas " + result1500 + " <t.where(t.dateColumn('test').isInJuly()).intColumn('index').contains(6)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInAugust()).intColumn("index").contains(7))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInAugust()).intColumn("index").contains(7), "Era esperado verdadeiro, mas " + result1501 + " <t.where(t.dateColumn('test').isInAugust()).intColumn('index').contains(7)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInSeptember()).intColumn("index").contains(8))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInSeptember()).intColumn("index").contains(8), "Era esperado verdadeiro, mas " + result1502 + " <t.where(t.dateColumn('test').isInSeptember()).intColumn('index').contains(8)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInOctober()).intColumn("index").contains(9))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInOctober()).intColumn("index").contains(9), "Era esperado verdadeiro, mas " + result1503 + " <t.where(t.dateColumn('test').isInOctober()).intColumn('index').contains(9)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInNovember()).intColumn("index").contains(10))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInNovember()).intColumn("index").contains(10), "Era esperado verdadeiro, mas " + result1504 + " <t.where(t.dateColumn('test').isInNovember()).intColumn('index').contains(10)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInDecember()).intColumn("index").contains(11))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInDecember()).intColumn("index").contains(11), "Era esperado verdadeiro, mas " + result1505 + " <t.where(t.dateColumn('test').isInDecember()).intColumn('index').contains(11)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInQ1()).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInQ1()).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1506 + " <t.where(t.dateColumn('test').isInQ1()).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInQ2()).intColumn("index").contains(4))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInQ2()).intColumn("index").contains(4), "Era esperado verdadeiro, mas " + result1507 + " <t.where(t.dateColumn('test').isInQ2()).intColumn('index').contains(4)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInQ3()).intColumn("index").contains(8))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInQ3()).intColumn("index").contains(8), "Era esperado verdadeiro, mas " + result1508 + " <t.where(t.dateColumn('test').isInQ3()).intColumn('index').contains(8)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isInQ4()).intColumn("index").contains(11))
nova chamada: assertTrue(t.where(t.dateColumn("test").isInQ4()).intColumn("index").contains(11), "Era esperado verdadeiro, mas " + result1509 + " <t.where(t.dateColumn('test').isInQ4()).intColumn('index').contains(11)> é falso")
chamada antiga: assertTrue(dateColumn.isBefore(packed).contains(0))
nova chamada: assertTrue(dateColumn.isBefore(packed).contains(0), "Era esperado verdadeiro, mas " + result1510 + " <dateColumn.isBefore(packed).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isBefore(date).contains(0))
nova chamada: assertTrue(dateColumn.isBefore(date).contains(0), "Era esperado verdadeiro, mas " + result1511 + " <dateColumn.isBefore(date).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrBefore(date).contains(0))
nova chamada: assertTrue(dateColumn.isOnOrBefore(date).contains(0), "Era esperado verdadeiro, mas " + result1512 + " <dateColumn.isOnOrBefore(date).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isEqualTo(packed).contains(1))
nova chamada: assertTrue(dateColumn.isEqualTo(packed).contains(1), "Era esperado verdadeiro, mas " + result1513 + " <dateColumn.isEqualTo(packed).contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isEqualTo(date).contains(1))
nova chamada: assertTrue(dateColumn.isEqualTo(date).contains(1), "Era esperado verdadeiro, mas " + result1514 + " <dateColumn.isEqualTo(date).contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrBefore(date).contains(1))
nova chamada: assertTrue(dateColumn.isOnOrBefore(date).contains(1), "Era esperado verdadeiro, mas " + result1515 + " <dateColumn.isOnOrBefore(date).contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrAfter(date).contains(1))
nova chamada: assertTrue(dateColumn.isOnOrAfter(date).contains(1), "Era esperado verdadeiro, mas " + result1516 + " <dateColumn.isOnOrAfter(date).contains(1)> é falso")
chamada antiga: assertFalse(dateColumn.isOnOrBefore(date).contains(2))
nova chamada: assertFalse(dateColumn.isOnOrBefore(date).contains(2), "Era esperado falso, mas " + result1517 + " <dateColumn.isOnOrBefore(date).contains(2)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isAfter(packed).contains(2))
nova chamada: assertTrue(dateColumn.isAfter(packed).contains(2), "Era esperado verdadeiro, mas " + result1518 + " <dateColumn.isAfter(packed).contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isAfter(date).contains(2))
nova chamada: assertTrue(dateColumn.isAfter(date).contains(2), "Era esperado verdadeiro, mas " + result1519 + " <dateColumn.isAfter(date).contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrAfter(date).contains(2))
nova chamada: assertTrue(dateColumn.isOnOrAfter(date).contains(2), "Era esperado verdadeiro, mas " + result1520 + " <dateColumn.isOnOrAfter(date).contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
nova chamada: assertTrue(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(1), "Era esperado verdadeiro, mas " + result1521 + " <dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(2))
nova chamada: assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(2), "Era esperado verdadeiro, mas " + result1522 + " <dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(2)> é falso")
chamada antiga: assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(0))
nova chamada: assertTrue(dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(0), "Era esperado verdadeiro, mas " + result1523 + " <dateColumn.isBetweenIncluding(beforeDate, afterDate).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(2))
nova chamada: assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(2), "Era esperado falso, mas " + result1524 + " <dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(0))
nova chamada: assertFalse(dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(0), "Era esperado falso, mas " + result1525 + " <dateColumn.isBetweenExcluding(beforeDate, afterDate).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(t.where(dateColumn.isBefore(packed)).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(dateColumn.isBefore(packed)).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1526 + " <t.where(dateColumn.isBefore(packed)).intColumn('index').contains(0)> é falso")
chamada antiga: assertTrue(t.where(dateColumn.isEqualTo(packed)).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(dateColumn.isEqualTo(packed)).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1527 + " <t.where(dateColumn.isEqualTo(packed)).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(t.where(dateColumn.isAfter(packed)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(dateColumn.isAfter(packed)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1528 + " <t.where(dateColumn.isAfter(packed)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1529 + " <t.where(t.dateColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1530 + " <t.where(t.dateColumn('test').isBetweenIncluding(beforeDate, afterDate)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(t.dateColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1531 + " <t.where(t.dateColumn('test').isBetweenIncluding(beforeDate, afterDate)).intColumn('index').contains(0)> é falso")
chamada antiga: assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2))
nova chamada: assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2), "Era esperado falso, mas " + result1532 + " <t.where(t.dateColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0))
nova chamada: assertFalse(t.where(t.dateColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0), "Era esperado falso, mas " + result1533 + " <t.where(t.dateColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(0)> é verdadeiro ")
chamada antiga: assertTrue(column.isMissing().contains(1))
nova chamada: assertTrue(column.isMissing().contains(1), "Era esperado verdadeiro, mas " + result1534 + " <column.isMissing().contains(1)> é falso")
chamada antiga: assertTrue(column.isNotMissing().contains(0))
nova chamada: assertTrue(column.isNotMissing().contains(0), "Era esperado verdadeiro, mas " + result1535 + " <column.isNotMissing().contains(0)> é falso")
chamada antiga: assertTrue(column.isNotMissing().contains(0))
nova chamada: assertTrue(column.isNotMissing().contains(0), "Era esperado verdadeiro, mas " + result1536 + " <column.isNotMissing().contains(0)> é falso")
chamada antiga: assertTrue(column.isMissing().contains(1))
nova chamada: assertTrue(column.isMissing().contains(1), "Era esperado verdadeiro, mas " + result1537 + " <column.isMissing().contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrAfter(same).contains(0))
nova chamada: assertTrue(dateColumn.isOnOrAfter(same).contains(0), "Era esperado verdadeiro, mas " + result1538 + " <dateColumn.isOnOrAfter(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isOnOrAfter(same).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isOnOrAfter(same).contains(0), "Era esperado verdadeiro, mas " + result1539 + " <t.dateColumn('test').isOnOrAfter(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isOnOrAfter(t.dateColumn("same")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isOnOrAfter(t.dateColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1540 + " <t.dateColumn('test').isOnOrAfter(t.dateColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrBefore(same).contains(0))
nova chamada: assertTrue(dateColumn.isOnOrBefore(same).contains(0), "Era esperado verdadeiro, mas " + result1541 + " <dateColumn.isOnOrBefore(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isOnOrBefore(same).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isOnOrBefore(same).contains(0), "Era esperado verdadeiro, mas " + result1542 + " <t.dateColumn('test').isOnOrBefore(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isOnOrBefore(t.dateColumn("same")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isOnOrBefore(t.dateColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1543 + " <t.dateColumn('test').isOnOrBefore(t.dateColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isEqualTo(same).contains(0))
nova chamada: assertTrue(dateColumn.isEqualTo(same).contains(0), "Era esperado verdadeiro, mas " + result1544 + " <dateColumn.isEqualTo(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isEqualTo(same).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isEqualTo(same).contains(0), "Era esperado verdadeiro, mas " + result1545 + " <t.dateColumn('test').isEqualTo(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isEqualTo(t.dateColumn("same")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isEqualTo(t.dateColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1546 + " <t.dateColumn('test').isEqualTo(t.dateColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isBefore(after).contains(0))
nova chamada: assertTrue(dateColumn.isBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1547 + " <dateColumn.isBefore(after).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isOnOrAfter(after).contains(0))
nova chamada: assertFalse(dateColumn.isOnOrAfter(after).contains(0), "Era esperado falso, mas " + result1548 + " <dateColumn.isOnOrAfter(after).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(t.dateColumn("test").isBefore(after).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1549 + " <t.dateColumn('test').isBefore(after).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isBefore(t.dateColumn("after")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isBefore(t.dateColumn("after")).contains(0), "Era esperado verdadeiro, mas " + result1550 + " <t.dateColumn('test').isBefore(t.dateColumn('after')).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isAfter(before).contains(0))
nova chamada: assertTrue(dateColumn.isAfter(before).contains(0), "Era esperado verdadeiro, mas " + result1551 + " <dateColumn.isAfter(before).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isOnOrBefore(before).contains(0))
nova chamada: assertFalse(dateColumn.isOnOrBefore(before).contains(0), "Era esperado falso, mas " + result1552 + " <dateColumn.isOnOrBefore(before).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(t.dateColumn("test").isAfter(before).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isAfter(before).contains(0), "Era esperado verdadeiro, mas " + result1553 + " <t.dateColumn('test').isAfter(before).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isAfter(t.dateColumn("before")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isAfter(t.dateColumn("before")).contains(0), "Era esperado verdadeiro, mas " + result1554 + " <t.dateColumn('test').isAfter(t.dateColumn('before')).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isNotEqualTo(same).contains(0))
nova chamada: assertFalse(dateColumn.isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1555 + " <dateColumn.isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isNotEqualTo(dateTime).contains(0))
nova chamada: assertTrue(dateColumn.isNotEqualTo(dateTime).contains(0), "Era esperado verdadeiro, mas " + result1556 + " <dateColumn.isNotEqualTo(dateTime).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isNotEqualTo(dateTime).contains(1))
nova chamada: assertFalse(dateColumn.isNotEqualTo(dateTime).contains(1), "Era esperado falso, mas " + result1557 + " <dateColumn.isNotEqualTo(dateTime).contains(1)> é verdadeiro ")
chamada antiga: assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0))
nova chamada: assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1558 + " <t.dateColumn('test').isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0))
nova chamada: assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0), "Era esperado falso, mas " + result1559 + " <t.dateColumn('test').isNotEqualTo(t.dateColumn('same')).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isOnOrBefore(same).contains(0))
nova chamada: assertTrue(dateColumn.isOnOrBefore(same).contains(0), "Era esperado verdadeiro, mas " + result1560 + " <dateColumn.isOnOrBefore(same).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrBefore(after).contains(0))
nova chamada: assertTrue(dateColumn.isOnOrBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1561 + " <dateColumn.isOnOrBefore(after).contains(0)> é falso")
chamada antiga: assertFalse(dateColumn.isOnOrBefore(before).contains(0))
nova chamada: assertFalse(dateColumn.isOnOrBefore(before).contains(0), "Era esperado falso, mas " + result1562 + " <dateColumn.isOnOrBefore(before).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isNotEqualTo(before).contains(0))
nova chamada: assertTrue(dateColumn.isNotEqualTo(before).contains(0), "Era esperado verdadeiro, mas " + result1563 + " <dateColumn.isNotEqualTo(before).contains(0)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrAfter(same).contains(1))
nova chamada: assertTrue(dateColumn.isOnOrAfter(same).contains(1), "Era esperado verdadeiro, mas " + result1564 + " <dateColumn.isOnOrAfter(same).contains(1)> é falso")
chamada antiga: assertTrue(dateColumn.isOnOrAfter(before).contains(2))
nova chamada: assertTrue(dateColumn.isOnOrAfter(before).contains(2), "Era esperado verdadeiro, mas " + result1565 + " <dateColumn.isOnOrAfter(before).contains(2)> é falso")
chamada antiga: assertFalse(dateColumn.isOnOrAfter(after).contains(2))
nova chamada: assertFalse(dateColumn.isOnOrAfter(after).contains(2), "Era esperado falso, mas " + result1566 + " <dateColumn.isOnOrAfter(after).contains(2)> é verdadeiro ")
chamada antiga: assertTrue(dateColumn.isNotEqualTo(after).contains(0))
nova chamada: assertTrue(dateColumn.isNotEqualTo(after).contains(0), "Era esperado verdadeiro, mas " + result1567 + " <dateColumn.isNotEqualTo(after).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isNotEqualTo(t.dateColumn("before")).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isNotEqualTo(t.dateColumn("before")).contains(0), "Era esperado verdadeiro, mas " + result1568 + " <t.dateColumn('test').isNotEqualTo(t.dateColumn('before')).contains(0)> é falso")
chamada antiga: assertTrue(t.dateColumn("test").isNotEqualTo(before).contains(0))
nova chamada: assertTrue(t.dateColumn("test").isNotEqualTo(before).contains(0), "Era esperado verdadeiro, mas " + result1569 + " <t.dateColumn('test').isNotEqualTo(before).contains(0)> é falso")
chamada antiga: assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0))
nova chamada: assertFalse(t.dateColumn("test").isNotEqualTo(t.dateColumn("same")).contains(0), "Era esperado falso, mas " + result1570 + " <t.dateColumn('test').isNotEqualTo(t.dateColumn('same')).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0))
nova chamada: assertFalse(t.dateColumn("test").isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1571 + " <t.dateColumn('test').isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertEquals(9, getDayOfMonth(pack(day)))
nova chamada: assertEquals(9, getDayOfMonth(pack(day)), "Era esperado valores iguais, mas  9 é diferente de " + result1572 + " <getDayOfMonth(pack(day))>")
chamada antiga: assertEquals(4, getDayOfMonth(day2))
nova chamada: assertEquals(4, getDayOfMonth(day2), "Era esperado valores iguais, mas  4 é diferente de " + result1573 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(2011, getYear(day2))
nova chamada: assertEquals(2011, getYear(day2), "Era esperado valores iguais, mas  2011 é diferente de " + result1574 + " <getYear(day2)>")
chamada antiga: assertEquals(7, getMonthValue(day2))
nova chamada: assertEquals(7, getMonthValue(day2), "Era esperado valores iguais, mas  7 é diferente de " + result1575 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2011, getYear(day2))
nova chamada: assertEquals(2011, getYear(day2), "Era esperado valores iguais, mas  2011 é diferente de " + result1576 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1577 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(3, getMonthValue(day2))
nova chamada: assertEquals(3, getMonthValue(day2), "Era esperado valores iguais, mas  3 é diferente de " + result1578 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2020, getYear(day2))
nova chamada: assertEquals(2020, getYear(day2), "Era esperado valores iguais, mas  2020 é diferente de " + result1579 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1580 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(3, getMonthValue(day2))
nova chamada: assertEquals(3, getMonthValue(day2), "Era esperado valores iguais, mas  3 é diferente de " + result1581 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2021, getYear(day2))
nova chamada: assertEquals(2021, getYear(day2), "Era esperado valores iguais, mas  2021 é diferente de " + result1582 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1583 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(3, getMonthValue(day2))
nova chamada: assertEquals(3, getMonthValue(day2), "Era esperado valores iguais, mas  3 é diferente de " + result1584 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2001, getYear(day2))
nova chamada: assertEquals(2001, getYear(day2), "Era esperado valores iguais, mas  2001 é diferente de " + result1585 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1586 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(2, getMonthValue(day2))
nova chamada: assertEquals(2, getMonthValue(day2), "Era esperado valores iguais, mas  2 é diferente de " + result1587 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2012, getYear(day2))
nova chamada: assertEquals(2012, getYear(day2), "Era esperado valores iguais, mas  2012 é diferente de " + result1588 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1589 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(11, getMonthValue(day2))
nova chamada: assertEquals(11, getMonthValue(day2), "Era esperado valores iguais, mas  11 é diferente de " + result1590 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2010, getYear(day2))
nova chamada: assertEquals(2010, getYear(day2), "Era esperado valores iguais, mas  2010 é diferente de " + result1591 + " <getYear(day2)>")
chamada antiga: assertEquals(9, getDayOfMonth(day2))
nova chamada: assertEquals(9, getDayOfMonth(day2), "Era esperado valores iguais, mas  9 é diferente de " + result1592 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(1, getMonthValue(day2))
nova chamada: assertEquals(1, getMonthValue(day2), "Era esperado valores iguais, mas  1 é diferente de " + result1593 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2012, getYear(day2))
nova chamada: assertEquals(2012, getYear(day2), "Era esperado valores iguais, mas  2012 é diferente de " + result1594 + " <getYear(day2)>")
chamada antiga: assertEquals(10, getDayOfMonth(day2))
nova chamada: assertEquals(10, getDayOfMonth(day2), "Era esperado valores iguais, mas  10 é diferente de " + result1595 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(asLocalDate(day2), day.plusWeeks(2))
nova chamada: assertEquals(asLocalDate(day2), day.plusWeeks(2), "Era esperado valores iguais, mas " + result1596 + " <asLocalDate(day2)> é diferente de " + result1597 + " <day.plusWeeks(2)>")
chamada antiga: assertEquals(asLocalDate(day2), day.minusWeeks(5))
nova chamada: assertEquals(asLocalDate(day2), day.minusWeeks(5), "Era esperado valores iguais, mas " + result1598 + " <asLocalDate(day2)> é diferente de " + result1599 + " <day.minusWeeks(5)>")
chamada antiga: assertEquals(7, daysUntil(day2, packed))
nova chamada: assertEquals(7, daysUntil(day2, packed), "Era esperado valores iguais, mas  7 é diferente de " + result1600 + " <daysUntil(day2, packed)>")
chamada antiga: assertEquals(12, getMonthValue(day2))
nova chamada: assertEquals(12, getMonthValue(day2), "Era esperado valores iguais, mas  12 é diferente de " + result1601 + " <getMonthValue(day2)>")
chamada antiga: assertEquals(2010, getYear(day2))
nova chamada: assertEquals(2010, getYear(day2), "Era esperado valores iguais, mas  2010 é diferente de " + result1602 + " <getYear(day2)>")
chamada antiga: assertEquals(30, getDayOfMonth(day2))
nova chamada: assertEquals(30, getDayOfMonth(day2), "Era esperado valores iguais, mas  30 é diferente de " + result1603 + " <getDayOfMonth(day2)>")
chamada antiga: assertEquals(366, lengthOfYear(packed))
nova chamada: assertEquals(366, lengthOfYear(packed), "Era esperado valores iguais, mas  366 é diferente de " + result1604 + " <lengthOfYear(packed)>")
chamada antiga: assertEquals(365, lengthOfYear(packed))
nova chamada: assertEquals(365, lengthOfYear(packed), "Era esperado valores iguais, mas  365 é diferente de " + result1605 + " <lengthOfYear(packed)>")
chamada antiga: assertEquals(31, lengthOfMonth(packed))
nova chamada: assertEquals(31, lengthOfMonth(packed), "Era esperado valores iguais, mas  31 é diferente de " + result1606 + " <lengthOfMonth(packed)>")
chamada antiga: assertEquals(30, lengthOfMonth(packed))
nova chamada: assertEquals(30, lengthOfMonth(packed), "Era esperado valores iguais, mas  30 é diferente de " + result1607 + " <lengthOfMonth(packed)>")
chamada antiga: assertEquals(DayOfWeek.THURSDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.THURSDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.THURSDAY é diferente de " + result1608 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isThursday(packed))
nova chamada: assertTrue(isThursday(packed), "Era esperado verdadeiro, mas " + result1609 + " <isThursday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.FRIDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.FRIDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.FRIDAY é diferente de " + result1610 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isFriday(packed))
nova chamada: assertTrue(isFriday(packed), "Era esperado verdadeiro, mas " + result1611 + " <isFriday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.SATURDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.SATURDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.SATURDAY é diferente de " + result1612 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isSaturday(packed))
nova chamada: assertTrue(isSaturday(packed), "Era esperado verdadeiro, mas " + result1613 + " <isSaturday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.SUNDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.SUNDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.SUNDAY é diferente de " + result1614 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isSunday(packed))
nova chamada: assertTrue(isSunday(packed), "Era esperado verdadeiro, mas " + result1615 + " <isSunday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.MONDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.MONDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.MONDAY é diferente de " + result1616 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isMonday(packed))
nova chamada: assertTrue(isMonday(packed), "Era esperado verdadeiro, mas " + result1617 + " <isMonday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.TUESDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.TUESDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.TUESDAY é diferente de " + result1618 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isTuesday(packed))
nova chamada: assertTrue(isTuesday(packed), "Era esperado verdadeiro, mas " + result1619 + " <isTuesday(packed)> é falso")
chamada antiga: assertEquals(DayOfWeek.WEDNESDAY, getDayOfWeek(packed))
nova chamada: assertEquals(DayOfWeek.WEDNESDAY, getDayOfWeek(packed), "Era esperado valores iguais, mas  DayOfWeek.WEDNESDAY é diferente de " + result1620 + " <getDayOfWeek(packed)>")
chamada antiga: assertTrue(isWednesday(packed))
nova chamada: assertTrue(isWednesday(packed), "Era esperado verdadeiro, mas " + result1621 + " <isWednesday(packed)> é falso")
chamada antiga: assertTrue(isInQ1(packed))
nova chamada: assertTrue(isInQ1(packed), "Era esperado verdadeiro, mas " + result1622 + " <isInQ1(packed)> é falso")
chamada antiga: assertTrue(isInQ2(packed))
nova chamada: assertTrue(isInQ2(packed), "Era esperado verdadeiro, mas " + result1623 + " <isInQ2(packed)> é falso")
chamada antiga: assertTrue(isInQ3(packed))
nova chamada: assertTrue(isInQ3(packed), "Era esperado verdadeiro, mas " + result1624 + " <isInQ3(packed)> é falso")
chamada antiga: assertTrue(isInQ4(packed))
nova chamada: assertTrue(isInQ4(packed), "Era esperado verdadeiro, mas " + result1625 + " <isInQ4(packed)> é falso")
chamada antiga: assertEquals(today.getYear(), getYear(pack(today)))
nova chamada: assertEquals(today.getYear(), getYear(pack(today)), "Era esperado valores iguais, mas " + result1626 + " <today.getYear()> é diferente de " + result1627 + " <getYear(pack(today))>")
chamada antiga: assertTrue(isEqualTo(date, date2))
nova chamada: assertTrue(isEqualTo(date, date2), "Era esperado verdadeiro, mas " + result1628 + " <isEqualTo(date, date2)> é falso")
chamada antiga: assertTrue(isAfter(date, date2))
nova chamada: assertTrue(isAfter(date, date2), "Era esperado verdadeiro, mas " + result1629 + " <isAfter(date, date2)> é falso")
chamada antiga: assertFalse(isEqualTo(date, date2))
nova chamada: assertFalse(isEqualTo(date, date2), "Era esperado falso, mas " + result1630 + " <isEqualTo(date, date2)> é verdadeiro ")
chamada antiga: assertFalse(isBefore(date, date2))
nova chamada: assertFalse(isBefore(date, date2), "Era esperado falso, mas " + result1631 + " <isBefore(date, date2)> é verdadeiro ")
chamada antiga: assertTrue(isBefore(date, date2))
nova chamada: assertTrue(isBefore(date, date2), "Era esperado verdadeiro, mas " + result1632 + " <isBefore(date, date2)> é falso")
chamada antiga: assertFalse(isAfter(date, date2))
nova chamada: assertFalse(isAfter(date, date2), "Era esperado falso, mas " + result1633 + " <isAfter(date, date2)> é verdadeiro ")
chamada antiga: assertFalse(isEqualTo(date, date2))
nova chamada: assertFalse(isEqualTo(date, date2), "Era esperado falso, mas " + result1634 + " <isEqualTo(date, date2)> é verdadeiro ")
chamada antiga: assertEquals(date.getDayOfWeek(), getDayOfWeek(dateTime))
nova chamada: assertEquals(date.getDayOfWeek(), getDayOfWeek(dateTime), "Era esperado valores iguais, mas " + result1635 + " <date.getDayOfWeek()> é diferente de " + result1636 + " <getDayOfWeek(dateTime)>")
chamada antiga: assertNotNull(dateTimes)
nova chamada: assertNotNull(dateTimes, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON))
nova chamada: assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON), "Era esperado verdadeiro, mas " + result1637 + " <dateTimes.get(0).toLocalTime().equals(LocalTime.NOON)> é falso")
chamada antiga: assertNotNull(dateTimes)
nova chamada: assertNotNull(dateTimes, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON))
nova chamada: assertTrue(dateTimes.get(0).toLocalTime().equals(LocalTime.NOON), "Era esperado verdadeiro, mas " + result1638 + " <dateTimes.get(0).toLocalTime().equals(LocalTime.NOON)> é falso")
chamada antiga: assertEquals(scenario.col1col2Appended, scenario.col1.append(scenario.col2).asList())
nova chamada: assertEquals(scenario.col1col2Appended, scenario.col1.append(scenario.col2).asList(), "Era esperado valores iguais, mas  scenario.col1col2Appended é diferente de " + result1639 + " <scenario.col1.append(scenario.col2).asList()>")
chamada antiga: assertEquals(dc1.get(0).plusDays(100), dc2.get(0))
nova chamada: assertEquals(dc1.get(0).plusDays(100), dc2.get(0), "Era esperado valores iguais, mas " + result1640 + " <dc1.get(0).plusDays(100)> é diferente de " + result1641 + " <dc2.get(0)>")
chamada antiga: assertEquals(instant, parser.parse(instant.toString()))
nova chamada: assertEquals(instant, parser.parse(instant.toString()), "Era esperado valores iguais, mas  instant é diferente de " + result1642 + " <parser.parse(instant.toString())>")
chamada antiga: assertEquals(instant, parser.parse(col.getUnformattedString(0)))
nova chamada: assertEquals(instant, parser.parse(col.getUnformattedString(0)), "Era esperado valores iguais, mas  instant é diferente de " + result1643 + " <parser.parse(col.getUnformattedString(0))>")
chamada antiga: assertFalse(parser.canParse("foobar"))
nova chamada: assertFalse(parser.canParse("foobar"), "Era esperado falso, mas " + result1644 + " <parser.canParse('foobar')> é verdadeiro ")
chamada antiga: assertTrue(parser.canParse(Instant.now().toString()))
nova chamada: assertTrue(parser.canParse(Instant.now().toString()), "Era esperado verdadeiro, mas " + result1645 + " <parser.canParse(Instant.now().toString())> é falso")
chamada antiga: assertEquals("TUESDAY", dayOfWeek.get(0))
nova chamada: assertEquals("TUESDAY", dayOfWeek.get(0), "Era esperado valores iguais, mas  'TUESDAY' é diferente de " + result1646 + " <dayOfWeek.get(0)>")
chamada antiga: assertEquals("07:30", hourMinute.get(0))
nova chamada: assertEquals("07:30", hourMinute.get(0), "Era esperado valores iguais, mas  '07:30' é diferente de " + result1647 + " <hourMinute.get(0)>")
chamada antiga: assertEquals("2018-04", yearMonth.get(0))
nova chamada: assertEquals("2018-04", yearMonth.get(0), "Era esperado valores iguais, mas  '2018-04' é diferente de " + result1648 + " <yearMonth.get(0)>")
chamada antiga: assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.getDayOfYear()), 3, '0'), yearDay.get(0))
nova chamada: assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.getDayOfYear()), 3, '0'), yearDay.get(0), "Era esperado valores iguais, mas  '2018-' + Strings.padStart(String.valueOf(dateTime.getDayOfYear()), 3, '0') é diferente de " + result1649 + " <yearDay.get(0)>")
chamada antiga: assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.get(woy)), 2, '0'), yearWeek.get(0))
nova chamada: assertEquals("2018-" + Strings.padStart(String.valueOf(dateTime.get(woy)), 2, '0'), yearWeek.get(0), "Era esperado valores iguais, mas  '2018-' + Strings.padStart(String.valueOf(dateTime.get(woy)), 2, '0') é diferente de " + result1650 + " <yearWeek.get(0)>")
chamada antiga: assertEquals("2018-2", yearQuarter.get(0))
nova chamada: assertEquals("2018-2", yearQuarter.get(0), "Era esperado valores iguais, mas  '2018-2' é diferente de " + result1651 + " <yearQuarter.get(0)>")
chamada antiga: assertEquals("APRIL", month.get(0))
nova chamada: assertEquals("APRIL", month.get(0), "Era esperado valores iguais, mas  'APRIL' é diferente de " + result1652 + " <month.get(0)>")
chamada antiga: assertEquals(dateTime.toLocalDate(), date.get(0))
nova chamada: assertEquals(dateTime.toLocalDate(), date.get(0), "Era esperado valores iguais, mas " + result1653 + " <dateTime.toLocalDate()> é diferente de " + result1654 + " <date.get(0)>")
chamada antiga: assertEquals(dateTime.toLocalTime(), time.get(0))
nova chamada: assertEquals(dateTime.toLocalTime(), time.get(0), "Era esperado valores iguais, mas " + result1655 + " <dateTime.toLocalTime()> é diferente de " + result1656 + " <time.get(0)>")
chamada antiga: assertEquals(startCol.get(0), lag.get(1))
nova chamada: assertEquals(startCol.get(0), lag.get(1), "Era esperado valores iguais, mas " + result1657 + " <startCol.get(0)> é diferente de " + result1658 + " <lag.get(1)>")
chamada antiga: assertEquals(DateTimeColumnType.missingValueIndicator(), lag.getLongInternal(0))
nova chamada: assertEquals(DateTimeColumnType.missingValueIndicator(), lag.getLongInternal(0), "Era esperado valores iguais, mas " + result1659 + " <DateTimeColumnType.missingValueIndicator()> é diferente de " + result1660 + " <lag.getLongInternal(0)>")
chamada antiga: assertEquals(startCol.get(1), lead.get(0))
nova chamada: assertEquals(startCol.get(1), lead.get(0), "Era esperado valores iguais, mas " + result1661 + " <startCol.get(1)> é diferente de " + result1662 + " <lead.get(0)>")
chamada antiga: assertEquals(DateTimeColumnType.missingValueIndicator(), lead.getLongInternal(2))
nova chamada: assertEquals(DateTimeColumnType.missingValueIndicator(), lead.getLongInternal(2), "Era esperado valores iguais, mas " + result1663 + " <DateTimeColumnType.missingValueIndicator()> é diferente de " + result1664 + " <lead.getLongInternal(2)>")
chamada antiga: assertTrue(localDateTimeColumn.isSunday().contains(0))
nova chamada: assertTrue(localDateTimeColumn.isSunday().contains(0), "Era esperado verdadeiro, mas " + result1665 + " <localDateTimeColumn.isSunday().contains(0)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isMonday().contains(1))
nova chamada: assertTrue(localDateTimeColumn.isMonday().contains(1), "Era esperado verdadeiro, mas " + result1666 + " <localDateTimeColumn.isMonday().contains(1)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isTuesday().contains(2))
nova chamada: assertTrue(localDateTimeColumn.isTuesday().contains(2), "Era esperado verdadeiro, mas " + result1667 + " <localDateTimeColumn.isTuesday().contains(2)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isWednesday().contains(3))
nova chamada: assertTrue(localDateTimeColumn.isWednesday().contains(3), "Era esperado verdadeiro, mas " + result1668 + " <localDateTimeColumn.isWednesday().contains(3)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isThursday().contains(4))
nova chamada: assertTrue(localDateTimeColumn.isThursday().contains(4), "Era esperado verdadeiro, mas " + result1669 + " <localDateTimeColumn.isThursday().contains(4)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isFriday().contains(7))
nova chamada: assertTrue(localDateTimeColumn.isFriday().contains(7), "Era esperado verdadeiro, mas " + result1670 + " <localDateTimeColumn.isFriday().contains(7)> é falso")
chamada antiga: assertTrue(localDateTimeColumn.isSaturday().contains(8))
nova chamada: assertTrue(localDateTimeColumn.isSaturday().contains(8), "Era esperado verdadeiro, mas " + result1671 + " <localDateTimeColumn.isSaturday().contains(8)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1672 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1673 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1674 + " <selection.contains(2)> é falso")
chamada antiga: assertTrue(selection.contains(5))
nova chamada: assertTrue(selection.contains(5), "Era esperado verdadeiro, mas " + result1675 + " <selection.contains(5)> é falso")
chamada antiga: assertFalse(selection.contains(6))
nova chamada: assertFalse(selection.contains(6), "Era esperado falso, mas " + result1676 + " <selection.contains(6)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1677 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1678 + " <selection.contains(1)> é falso")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1679 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1680 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1681 + " <selection.contains(1)> é falso")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1682 + " <selection.contains(2)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1683 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1684 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1685 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(column.isMissing().contains(1))
nova chamada: assertTrue(column.isMissing().contains(1), "Era esperado verdadeiro, mas " + result1686 + " <column.isMissing().contains(1)> é falso")
chamada antiga: assertTrue(column.isNotMissing().contains(0))
nova chamada: assertTrue(column.isNotMissing().contains(0), "Era esperado verdadeiro, mas " + result1687 + " <column.isNotMissing().contains(0)> é falso")
chamada antiga: assertTrue(column.isNotMissing().contains(0))
nova chamada: assertTrue(column.isNotMissing().contains(0), "Era esperado verdadeiro, mas " + result1688 + " <column.isNotMissing().contains(0)> é falso")
chamada antiga: assertTrue(column.isMissing().contains(1))
nova chamada: assertTrue(column.isMissing().contains(1), "Era esperado verdadeiro, mas " + result1689 + " <column.isMissing().contains(1)> é falso")
chamada antiga: assertTrue(column.isMidnight().contains(0))
nova chamada: assertTrue(column.isMidnight().contains(0), "Era esperado verdadeiro, mas " + result1690 + " <column.isMidnight().contains(0)> é falso")
chamada antiga: assertFalse(column.isMidnight().contains(1))
nova chamada: assertFalse(column.isMidnight().contains(1), "Era esperado falso, mas " + result1691 + " <column.isMidnight().contains(1)> é verdadeiro ")
chamada antiga: assertTrue(column.isBeforeNoon().contains(0))
nova chamada: assertTrue(column.isBeforeNoon().contains(0), "Era esperado verdadeiro, mas " + result1692 + " <column.isBeforeNoon().contains(0)> é falso")
chamada antiga: assertTrue(column.isBeforeNoon().contains(1))
nova chamada: assertTrue(column.isBeforeNoon().contains(1), "Era esperado verdadeiro, mas " + result1693 + " <column.isBeforeNoon().contains(1)> é falso")
chamada antiga: assertTrue(column.isNoon().contains(2))
nova chamada: assertTrue(column.isNoon().contains(2), "Era esperado verdadeiro, mas " + result1694 + " <column.isNoon().contains(2)> é falso")
chamada antiga: assertFalse(column.isAfterNoon().contains(1))
nova chamada: assertFalse(column.isAfterNoon().contains(1), "Era esperado falso, mas " + result1695 + " <column.isAfterNoon().contains(1)> é verdadeiro ")
chamada antiga: assertTrue(column.isAfterNoon().contains(3))
nova chamada: assertTrue(column.isAfterNoon().contains(3), "Era esperado verdadeiro, mas " + result1696 + " <column.isAfterNoon().contains(3)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInJanuary().contains(0))
nova chamada: assertTrue(dateTimeColumn.isInJanuary().contains(0), "Era esperado verdadeiro, mas " + result1697 + " <dateTimeColumn.isInJanuary().contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInFebruary().contains(1))
nova chamada: assertTrue(dateTimeColumn.isInFebruary().contains(1), "Era esperado verdadeiro, mas " + result1698 + " <dateTimeColumn.isInFebruary().contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInMarch().contains(2))
nova chamada: assertTrue(dateTimeColumn.isInMarch().contains(2), "Era esperado verdadeiro, mas " + result1699 + " <dateTimeColumn.isInMarch().contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInApril().contains(3))
nova chamada: assertTrue(dateTimeColumn.isInApril().contains(3), "Era esperado verdadeiro, mas " + result1700 + " <dateTimeColumn.isInApril().contains(3)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInMay().contains(4))
nova chamada: assertTrue(dateTimeColumn.isInMay().contains(4), "Era esperado verdadeiro, mas " + result1701 + " <dateTimeColumn.isInMay().contains(4)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInJune().contains(5))
nova chamada: assertTrue(dateTimeColumn.isInJune().contains(5), "Era esperado verdadeiro, mas " + result1702 + " <dateTimeColumn.isInJune().contains(5)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInJuly().contains(6))
nova chamada: assertTrue(dateTimeColumn.isInJuly().contains(6), "Era esperado verdadeiro, mas " + result1703 + " <dateTimeColumn.isInJuly().contains(6)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInAugust().contains(7))
nova chamada: assertTrue(dateTimeColumn.isInAugust().contains(7), "Era esperado verdadeiro, mas " + result1704 + " <dateTimeColumn.isInAugust().contains(7)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInSeptember().contains(8))
nova chamada: assertTrue(dateTimeColumn.isInSeptember().contains(8), "Era esperado verdadeiro, mas " + result1705 + " <dateTimeColumn.isInSeptember().contains(8)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInOctober().contains(9))
nova chamada: assertTrue(dateTimeColumn.isInOctober().contains(9), "Era esperado verdadeiro, mas " + result1706 + " <dateTimeColumn.isInOctober().contains(9)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInNovember().contains(10))
nova chamada: assertTrue(dateTimeColumn.isInNovember().contains(10), "Era esperado verdadeiro, mas " + result1707 + " <dateTimeColumn.isInNovember().contains(10)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInDecember().contains(11))
nova chamada: assertTrue(dateTimeColumn.isInDecember().contains(11), "Era esperado verdadeiro, mas " + result1708 + " <dateTimeColumn.isInDecember().contains(11)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInQ1().contains(2))
nova chamada: assertTrue(dateTimeColumn.isInQ1().contains(2), "Era esperado verdadeiro, mas " + result1709 + " <dateTimeColumn.isInQ1().contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInQ2().contains(4))
nova chamada: assertTrue(dateTimeColumn.isInQ2().contains(4), "Era esperado verdadeiro, mas " + result1710 + " <dateTimeColumn.isInQ2().contains(4)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInQ3().contains(8))
nova chamada: assertTrue(dateTimeColumn.isInQ3().contains(8), "Era esperado verdadeiro, mas " + result1711 + " <dateTimeColumn.isInQ3().contains(8)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isInQ4().contains(11))
nova chamada: assertTrue(dateTimeColumn.isInQ4().contains(11), "Era esperado verdadeiro, mas " + result1712 + " <dateTimeColumn.isInQ4().contains(11)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrBefore(date).contains(0))
nova chamada: assertTrue(dateTimeColumn.isOnOrBefore(date).contains(0), "Era esperado verdadeiro, mas " + result1713 + " <dateTimeColumn.isOnOrBefore(date).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrBefore(date).contains(1))
nova chamada: assertTrue(dateTimeColumn.isOnOrBefore(date).contains(1), "Era esperado verdadeiro, mas " + result1714 + " <dateTimeColumn.isOnOrBefore(date).contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrAfter(date).contains(1))
nova chamada: assertTrue(dateTimeColumn.isOnOrAfter(date).contains(1), "Era esperado verdadeiro, mas " + result1715 + " <dateTimeColumn.isOnOrAfter(date).contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrAfter(date).contains(2))
nova chamada: assertTrue(dateTimeColumn.isOnOrAfter(date).contains(2), "Era esperado verdadeiro, mas " + result1716 + " <dateTimeColumn.isOnOrAfter(date).contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBefore(dateTime).contains(0))
nova chamada: assertTrue(dateTimeColumn.isBefore(dateTime).contains(0), "Era esperado verdadeiro, mas " + result1717 + " <dateTimeColumn.isBefore(dateTime).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBefore(date).contains(0))
nova chamada: assertTrue(dateTimeColumn.isBefore(date).contains(0), "Era esperado verdadeiro, mas " + result1718 + " <dateTimeColumn.isBefore(date).contains(0)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBefore(dateTime)).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBefore(dateTime)).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1719 + " <t.where(t.dateTimeColumn('test').isBefore(dateTime)).intColumn('index').contains(0)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBefore(date)).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBefore(date)).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1720 + " <t.where(t.dateTimeColumn('test').isBefore(date)).intColumn('index').contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isEqualTo(dateTime).contains(1))
nova chamada: assertTrue(dateTimeColumn.isEqualTo(dateTime).contains(1), "Era esperado verdadeiro, mas " + result1721 + " <dateTimeColumn.isEqualTo(dateTime).contains(1)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isEqualTo(dateTime)).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isEqualTo(dateTime)).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1722 + " <t.where(t.dateTimeColumn('test').isEqualTo(dateTime)).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isAfter(dateTime).contains(2))
nova chamada: assertTrue(dateTimeColumn.isAfter(dateTime).contains(2), "Era esperado verdadeiro, mas " + result1723 + " <dateTimeColumn.isAfter(dateTime).contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isAfter(date).contains(2))
nova chamada: assertTrue(dateTimeColumn.isAfter(date).contains(2), "Era esperado verdadeiro, mas " + result1724 + " <dateTimeColumn.isAfter(date).contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isAfter(dateTime)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isAfter(dateTime)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1725 + " <t.where(t.dateTimeColumn('test').isAfter(dateTime)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isAfter(date)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isAfter(date)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1726 + " <t.where(t.dateTimeColumn('test').isAfter(date)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isNotEqualTo(dateTime).contains(2))
nova chamada: assertTrue(dateTimeColumn.isNotEqualTo(dateTime).contains(2), "Era esperado verdadeiro, mas " + result1727 + " <dateTimeColumn.isNotEqualTo(dateTime).contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isNotEqualTo(dateTime)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isNotEqualTo(dateTime)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1728 + " <t.where(t.dateTimeColumn('test').isNotEqualTo(dateTime)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
nova chamada: assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1), "Era esperado verdadeiro, mas " + result1729 + " <dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1730 + " <t.where(t.dateTimeColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1))
nova chamada: assertTrue(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1), "Era esperado verdadeiro, mas " + result1731 + " <dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(1)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(1), "Era esperado verdadeiro, mas " + result1732 + " <t.where(t.dateTimeColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(2))
nova chamada: assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(2), "Era esperado verdadeiro, mas " + result1733 + " <dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(2)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(2), "Era esperado verdadeiro, mas " + result1734 + " <t.where(t.dateTimeColumn('test').isBetweenIncluding(beforeDate, afterDate)).intColumn('index').contains(2)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(0))
nova chamada: assertTrue(dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(0), "Era esperado verdadeiro, mas " + result1735 + " <dateTimeColumn.isBetweenIncluding(beforeDate, afterDate).contains(0)> é falso")
chamada antiga: assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0))
nova chamada: assertTrue(t.where(t.dateTimeColumn("test").isBetweenIncluding(beforeDate, afterDate)).intColumn("index").contains(0), "Era esperado verdadeiro, mas " + result1736 + " <t.where(t.dateTimeColumn('test').isBetweenIncluding(beforeDate, afterDate)).intColumn('index').contains(0)> é falso")
chamada antiga: assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(2))
nova chamada: assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(2), "Era esperado falso, mas " + result1737 + " <dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(2)> é verdadeiro ")
chamada antiga: assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2))
nova chamada: assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(2), "Era esperado falso, mas " + result1738 + " <t.where(t.dateTimeColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(2)> é verdadeiro ")
chamada antiga: assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(0))
nova chamada: assertFalse(dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(0), "Era esperado falso, mas " + result1739 + " <dateTimeColumn.isBetweenExcluding(beforeDate, afterDate).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0))
nova chamada: assertFalse(t.where(t.dateTimeColumn("test").isBetweenExcluding(beforeDate, afterDate)).intColumn("index").contains(0), "Era esperado falso, mas " + result1740 + " <t.where(t.dateTimeColumn('test').isBetweenExcluding(beforeDate, afterDate)).intColumn('index').contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateTimeColumn.isEqualTo(same).contains(0))
nova chamada: assertTrue(dateTimeColumn.isEqualTo(same).contains(0), "Era esperado verdadeiro, mas " + result1741 + " <dateTimeColumn.isEqualTo(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isEqualTo(same).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isEqualTo(same).contains(0), "Era esperado verdadeiro, mas " + result1742 + " <t.dateTimeColumn('test').isEqualTo(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isEqualTo(t.dateTimeColumn("same")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isEqualTo(t.dateTimeColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1743 + " <t.dateTimeColumn('test').isEqualTo(t.dateTimeColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isBefore(after).contains(0))
nova chamada: assertTrue(dateTimeColumn.isBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1744 + " <dateTimeColumn.isBefore(after).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isBefore(after).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1745 + " <t.dateTimeColumn('test').isBefore(after).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isBefore(t.dateTimeColumn("after")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isBefore(t.dateTimeColumn("after")).contains(0), "Era esperado verdadeiro, mas " + result1746 + " <t.dateTimeColumn('test').isBefore(t.dateTimeColumn('after')).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isAfter(before).contains(0))
nova chamada: assertTrue(dateTimeColumn.isAfter(before).contains(0), "Era esperado verdadeiro, mas " + result1747 + " <dateTimeColumn.isAfter(before).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isAfter(before).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isAfter(before).contains(0), "Era esperado verdadeiro, mas " + result1748 + " <t.dateTimeColumn('test').isAfter(before).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isAfter(t.dateTimeColumn("before")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isAfter(t.dateTimeColumn("before")).contains(0), "Era esperado verdadeiro, mas " + result1749 + " <t.dateTimeColumn('test').isAfter(t.dateTimeColumn('before')).contains(0)> é falso")
chamada antiga: assertFalse(dateTimeColumn.isNotEqualTo(same).contains(0))
nova chamada: assertFalse(dateTimeColumn.isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1750 + " <dateTimeColumn.isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1751 + " <t.dateTimeColumn('test').isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0), "Era esperado falso, mas " + result1752 + " <t.dateTimeColumn('test').isNotEqualTo(t.dateTimeColumn('same')).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateTimeColumn.isOnOrBefore(same).contains(0))
nova chamada: assertTrue(dateTimeColumn.isOnOrBefore(same).contains(0), "Era esperado verdadeiro, mas " + result1753 + " <dateTimeColumn.isOnOrBefore(same).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrBefore(after).contains(0))
nova chamada: assertTrue(dateTimeColumn.isOnOrBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1754 + " <dateTimeColumn.isOnOrBefore(after).contains(0)> é falso")
chamada antiga: assertFalse(dateTimeColumn.isOnOrBefore(before).contains(0))
nova chamada: assertFalse(dateTimeColumn.isOnOrBefore(before).contains(0), "Era esperado falso, mas " + result1755 + " <dateTimeColumn.isOnOrBefore(before).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(dateTimeColumn.isNotEqualTo(before).contains(0))
nova chamada: assertTrue(dateTimeColumn.isNotEqualTo(before).contains(0), "Era esperado verdadeiro, mas " + result1756 + " <dateTimeColumn.isNotEqualTo(before).contains(0)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrAfter(same).contains(1))
nova chamada: assertTrue(dateTimeColumn.isOnOrAfter(same).contains(1), "Era esperado verdadeiro, mas " + result1757 + " <dateTimeColumn.isOnOrAfter(same).contains(1)> é falso")
chamada antiga: assertTrue(dateTimeColumn.isOnOrAfter(before).contains(2))
nova chamada: assertTrue(dateTimeColumn.isOnOrAfter(before).contains(2), "Era esperado verdadeiro, mas " + result1758 + " <dateTimeColumn.isOnOrAfter(before).contains(2)> é falso")
chamada antiga: assertFalse(dateTimeColumn.isOnOrAfter(after).contains(2))
nova chamada: assertFalse(dateTimeColumn.isOnOrAfter(after).contains(2), "Era esperado falso, mas " + result1759 + " <dateTimeColumn.isOnOrAfter(after).contains(2)> é verdadeiro ")
chamada antiga: assertTrue(dateTimeColumn.isNotEqualTo(after).contains(0))
nova chamada: assertTrue(dateTimeColumn.isNotEqualTo(after).contains(0), "Era esperado verdadeiro, mas " + result1760 + " <dateTimeColumn.isNotEqualTo(after).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("same")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1761 + " <t.dateTimeColumn('test').isOnOrAfter(t.dateTimeColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrAfter(same).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrAfter(same).contains(0), "Era esperado verdadeiro, mas " + result1762 + " <t.dateTimeColumn('test').isOnOrAfter(same).contains(0)> é falso")
chamada antiga: assertFalse(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("after")).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isOnOrAfter(t.dateTimeColumn("after")).contains(0), "Era esperado falso, mas " + result1763 + " <t.dateTimeColumn('test').isOnOrAfter(t.dateTimeColumn('after')).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateTimeColumn("test").isOnOrAfter(after).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isOnOrAfter(after).contains(0), "Era esperado falso, mas " + result1764 + " <t.dateTimeColumn('test').isOnOrAfter(after).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("same")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("same")).contains(0), "Era esperado verdadeiro, mas " + result1765 + " <t.dateTimeColumn('test').isOnOrBefore(t.dateTimeColumn('same')).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrBefore(same).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrBefore(same).contains(0), "Era esperado verdadeiro, mas " + result1766 + " <t.dateTimeColumn('test').isOnOrBefore(same).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("after")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("after")).contains(0), "Era esperado verdadeiro, mas " + result1767 + " <t.dateTimeColumn('test').isOnOrBefore(t.dateTimeColumn('after')).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isOnOrBefore(after).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isOnOrBefore(after).contains(0), "Era esperado verdadeiro, mas " + result1768 + " <t.dateTimeColumn('test').isOnOrBefore(after).contains(0)> é falso")
chamada antiga: assertFalse(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("before")).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isOnOrBefore(t.dateTimeColumn("before")).contains(0), "Era esperado falso, mas " + result1769 + " <t.dateTimeColumn('test').isOnOrBefore(t.dateTimeColumn('before')).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateTimeColumn("test").isOnOrBefore(before).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isOnOrBefore(before).contains(0), "Era esperado falso, mas " + result1770 + " <t.dateTimeColumn('test').isOnOrBefore(before).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("before")).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("before")).contains(0), "Era esperado verdadeiro, mas " + result1771 + " <t.dateTimeColumn('test').isNotEqualTo(t.dateTimeColumn('before')).contains(0)> é falso")
chamada antiga: assertTrue(t.dateTimeColumn("test").isNotEqualTo(before).contains(0))
nova chamada: assertTrue(t.dateTimeColumn("test").isNotEqualTo(before).contains(0), "Era esperado verdadeiro, mas " + result1772 + " <t.dateTimeColumn('test').isNotEqualTo(before).contains(0)> é falso")
chamada antiga: assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isNotEqualTo(t.dateTimeColumn("same")).contains(0), "Era esperado falso, mas " + result1773 + " <t.dateTimeColumn('test').isNotEqualTo(t.dateTimeColumn('same')).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0))
nova chamada: assertFalse(t.dateTimeColumn("test").isNotEqualTo(same).contains(0), "Era esperado falso, mas " + result1774 + " <t.dateTimeColumn('test').isNotEqualTo(same).contains(0)> é verdadeiro ")
chamada antiga: assertEquals(today.getDayOfMonth(), getDayOfMonth(pack(today)))
nova chamada: assertEquals(today.getDayOfMonth(), getDayOfMonth(pack(today)), "Era esperado valores iguais, mas " + result1775 + " <today.getDayOfMonth()> é diferente de " + result1776 + " <getDayOfMonth(pack(today))>")
chamada antiga: assertEquals(today.getYear(), getYear(pack(today)))
nova chamada: assertEquals(today.getYear(), getYear(pack(today)), "Era esperado valores iguais, mas " + result1777 + " <today.getYear()> é diferente de " + result1778 + " <getYear(pack(today))>")
chamada antiga: assertEquals(dateTime.getDayOfYear(), upacked.getDayOfYear())
nova chamada: assertEquals(dateTime.getDayOfYear(), upacked.getDayOfYear(), "Era esperado valores iguais, mas " + result1779 + " <dateTime.getDayOfYear()> é diferente de " + result1780 + " <upacked.getDayOfYear()>")
chamada antiga: assertEquals(dateTime.getHour(), upacked.getHour())
nova chamada: assertEquals(dateTime.getHour(), upacked.getHour(), "Era esperado valores iguais, mas " + result1781 + " <dateTime.getHour()> é diferente de " + result1782 + " <upacked.getHour()>")
chamada antiga: assertEquals(dateTime.getMinute(), upacked.getMinute())
nova chamada: assertEquals(dateTime.getMinute(), upacked.getMinute(), "Era esperado valores iguais, mas " + result1783 + " <dateTime.getMinute()> é diferente de " + result1784 + " <upacked.getMinute()>")
chamada antiga: assertEquals(dateTime.getSecond(), upacked.getSecond())
nova chamada: assertEquals(dateTime.getSecond(), upacked.getSecond(), "Era esperado valores iguais, mas " + result1785 + " <dateTime.getSecond()> é diferente de " + result1786 + " <upacked.getSecond()>")
chamada antiga: assertEquals(12, getMonthValue(dateTime))
nova chamada: assertEquals(12, getMonthValue(dateTime), "Era esperado valores iguais, mas  12 é diferente de " + result1787 + " <getMonthValue(dateTime)>")
chamada antiga: assertNotNull(d1)
nova chamada: assertNotNull(d1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(t1)
nova chamada: assertNotNull(t1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(date.toString(), d1.toString())
nova chamada: assertEquals(date.toString(), d1.toString(), "Era esperado valores iguais, mas " + result1788 + " <date.toString()> é diferente de " + result1789 + " <d1.toString()>")
chamada antiga: assertEquals(now.getHour(), getHour(pack(now)))
nova chamada: assertEquals(now.getHour(), getHour(pack(now)), "Era esperado valores iguais, mas " + result1790 + " <now.getHour()> é diferente de " + result1791 + " <getHour(pack(now))>")
chamada antiga: assertEquals(now.getMinute(), getMinute(pack(now)))
nova chamada: assertEquals(now.getMinute(), getMinute(pack(now)), "Era esperado valores iguais, mas " + result1792 + " <now.getMinute()> é diferente de " + result1793 + " <getMinute(pack(now))>")
chamada antiga: assertEquals(now.getSecond(), getSecond(pack(now)))
nova chamada: assertEquals(now.getSecond(), getSecond(pack(now)), "Era esperado valores iguais, mas " + result1794 + " <now.getSecond()> é diferente de " + result1795 + " <getSecond(pack(now))>")
chamada antiga: assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)))
nova chamada: assertEquals(now.get(ChronoField.MINUTE_OF_DAY), getMinuteOfDay(pack(now)), "Era esperado valores iguais, mas " + result1796 + " <now.get(ChronoField.MINUTE_OF_DAY)> é diferente de " + result1797 + " <getMinuteOfDay(pack(now))>")
chamada antiga: assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)))
nova chamada: assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)), "Era esperado valores iguais, mas " + result1798 + " <now.get(ChronoField.MILLI_OF_DAY)> é diferente de " + result1799 + " <getMillisecondOfDay(pack(now))>")
chamada antiga: assertEquals(now.get(ChronoField.DAY_OF_WEEK), getDayOfWeek(pack(now)).getValue())
nova chamada: assertEquals(now.get(ChronoField.DAY_OF_WEEK), getDayOfWeek(pack(now)).getValue(), "Era esperado valores iguais, mas " + result1800 + " <now.get(ChronoField.DAY_OF_WEEK)> é diferente de " + result1801 + " <getDayOfWeek(pack(now)).getValue()>")
chamada antiga: assertEquals(expected.length, num)
nova chamada: assertEquals(expected.length, num, "Era esperado valores iguais, mas  expected.length é diferente de " + " num")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1802 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1803 + " <selection.contains(0)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1804 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1805 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1806 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1807 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1808 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1809 + " <selection.contains(0)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1810 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1811 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1812 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1813 + " <selection.contains(0)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1814 + " <selection.contains(0)> é falso")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1815 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1816 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(3))
nova chamada: assertTrue(selection.contains(3), "Era esperado verdadeiro, mas " + result1817 + " <selection.contains(3)> é falso")
chamada antiga: assertTrue(selection.contains(0))
nova chamada: assertTrue(selection.contains(0), "Era esperado verdadeiro, mas " + result1818 + " <selection.contains(0)> é falso")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1819 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1820 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(3))
nova chamada: assertTrue(selection.contains(3), "Era esperado verdadeiro, mas " + result1821 + " <selection.contains(3)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1822 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1823 + " <selection.contains(1)> é falso")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1824 + " <selection.contains(2)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1825 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1826 + " <selection.contains(1)> é falso")
chamada antiga: assertTrue(selection.contains(2))
nova chamada: assertTrue(selection.contains(2), "Era esperado verdadeiro, mas " + result1827 + " <selection.contains(2)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1828 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1829 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1830 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(3))
nova chamada: assertTrue(selection.contains(3), "Era esperado verdadeiro, mas " + result1831 + " <selection.contains(3)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1832 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1833 + " <selection.contains(1)> é falso")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1834 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(3))
nova chamada: assertFalse(selection.contains(3), "Era esperado falso, mas " + result1835 + " <selection.contains(3)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1836 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(1))
nova chamada: assertFalse(selection.contains(1), "Era esperado falso, mas " + result1837 + " <selection.contains(1)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1838 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(3))
nova chamada: assertTrue(selection.contains(3), "Era esperado verdadeiro, mas " + result1839 + " <selection.contains(3)> é falso")
chamada antiga: assertFalse(selection.contains(0))
nova chamada: assertFalse(selection.contains(0), "Era esperado falso, mas " + result1840 + " <selection.contains(0)> é verdadeiro ")
chamada antiga: assertTrue(selection.contains(1))
nova chamada: assertTrue(selection.contains(1), "Era esperado verdadeiro, mas " + result1841 + " <selection.contains(1)> é falso")
chamada antiga: assertFalse(selection.contains(2))
nova chamada: assertFalse(selection.contains(2), "Era esperado falso, mas " + result1842 + " <selection.contains(2)> é verdadeiro ")
chamada antiga: assertFalse(selection.contains(3))
nova chamada: assertFalse(selection.contains(3), "Era esperado falso, mas " + result1843 + " <selection.contains(3)> é verdadeiro ")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1844 + " <result.rowCount()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1845 + " <result.size()>")
chamada antiga: assertEquals(1, result.get(0))
nova chamada: assertEquals(1, result.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result1846 + " <result.get(0)>")
chamada antiga: assertEquals(result.rowCount(), 1)
nova chamada: assertEquals(result.rowCount(), 1, "Era esperado valores iguais, mas " + result1847 + " <result.rowCount()> é diferente de " + " 1")
chamada antiga: assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
nova chamada: assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))), "Era esperado valores iguais, mas " + result1848 + " <result.getUnformatted(0, 0)> é diferente de " + result1849 + " <toShortTimeString(pack(LocalTime.of(7, 4, 2)))>")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1850 + " <result.rowCount()>")
chamada antiga: assertNotEquals(result.get(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
nova chamada: assertNotEquals(result.get(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))), "Era esperado valores diferentes, mas " + result1851 + " <result.get(0, 0)> é igual a " + result1852 + " <toShortTimeString(pack(LocalTime.of(7, 4, 2)))>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1853 + " <result.size()>")
chamada antiga: assertEquals(0, result.get(0))
nova chamada: assertEquals(0, result.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result1854 + " <result.get(0)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1855 + " <result.size()>")
chamada antiga: assertEquals(1, result.get(0))
nova chamada: assertEquals(1, result.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result1856 + " <result.get(0)>")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1857 + " <result.rowCount()>")
chamada antiga: assertEquals(LocalTime.of(5, 15, 30), column1.get(0))
nova chamada: assertEquals(LocalTime.of(5, 15, 30), column1.get(0), "Era esperado valores iguais, mas " + result1858 + " <LocalTime.of(5, 15, 30)> é diferente de " + result1859 + " <column1.get(0)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1860 + " <result.size()>")
chamada antiga: assertEquals(0, result.get(0))
nova chamada: assertEquals(0, result.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result1861 + " <result.get(0)>")
chamada antiga: assertEquals(2, result.rowCount())
nova chamada: assertEquals(2, result.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1862 + " <result.rowCount()>")
chamada antiga: assertEquals(1, result.rowCount())
nova chamada: assertEquals(1, result.rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1863 + " <result.rowCount()>")
chamada antiga: assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))))
nova chamada: assertEquals(result.getUnformatted(0, 0), toShortTimeString(pack(LocalTime.of(7, 4, 2))), "Era esperado valores iguais, mas " + result1864 + " <result.getUnformatted(0, 0)> é diferente de " + result1865 + " <toShortTimeString(pack(LocalTime.of(7, 4, 2)))>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1866 + " <result.size()>")
chamada antiga: assertEquals(result.get(0), 0)
nova chamada: assertEquals(result.get(0), 0, "Era esperado valores iguais, mas " + result1867 + " <result.get(0)> é diferente de " + " 0")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1868 + " <selection.size()>")
chamada antiga: assertEquals(expected.length, num)
nova chamada: assertEquals(expected.length, num, "Era esperado valores iguais, mas  expected.length é diferente de " + " num")
chamada antiga: assertEquals(now.getHour(), getHour(pack(now)))
nova chamada: assertEquals(now.getHour(), getHour(pack(now)), "Era esperado valores iguais, mas " + result1869 + " <now.getHour()> é diferente de " + result1870 + " <getHour(pack(now))>")
chamada antiga: assertEquals(now.getMinute(), getMinute(pack(now)))
nova chamada: assertEquals(now.getMinute(), getMinute(pack(now)), "Era esperado valores iguais, mas " + result1871 + " <now.getMinute()> é diferente de " + result1872 + " <getMinute(pack(now))>")
chamada antiga: assertEquals(now.getSecond(), getSecond(pack(now)))
nova chamada: assertEquals(now.getSecond(), getSecond(pack(now)), "Era esperado valores iguais, mas " + result1873 + " <now.getSecond()> é diferente de " + result1874 + " <getSecond(pack(now))>")
chamada antiga: assertEquals(time.getLong(ChronoField.NANO_OF_DAY), toNanoOfDay(pTime))
nova chamada: assertEquals(time.getLong(ChronoField.NANO_OF_DAY), toNanoOfDay(pTime), "Era esperado valores iguais, mas " + result1875 + " <time.getLong(ChronoField.NANO_OF_DAY)> é diferente de " + result1876 + " <toNanoOfDay(pTime)>")
chamada antiga: assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)))
nova chamada: assertEquals(now.get(ChronoField.MILLI_OF_DAY), getMillisecondOfDay(pack(now)), "Era esperado valores iguais, mas " + result1877 + " <now.get(ChronoField.MILLI_OF_DAY)> é diferente de " + result1878 + " <getMillisecondOfDay(pack(now))>")
chamada antiga: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
nova chamada: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2), "Era esperado valores iguais, mas " + result1879 + " <getMillisecondOfDay(packedTime)> é diferente de " + result1880 + " <getMillisecondOfDay(packedTime2)>")
chamada antiga: assertEquals(localTime.getHour(), getHour(packedTime2))
nova chamada: assertEquals(localTime.getHour(), getHour(packedTime2), "Era esperado valores iguais, mas " + result1881 + " <localTime.getHour()> é diferente de " + result1882 + " <getHour(packedTime2)>")
chamada antiga: assertEquals(localTime.getMinute(), getMinute(packedTime2))
nova chamada: assertEquals(localTime.getMinute(), getMinute(packedTime2), "Era esperado valores iguais, mas " + result1883 + " <localTime.getMinute()> é diferente de " + result1884 + " <getMinute(packedTime2)>")
chamada antiga: assertEquals(localTime.getSecond(), getSecond(packedTime2))
nova chamada: assertEquals(localTime.getSecond(), getSecond(packedTime2), "Era esperado valores iguais, mas " + result1885 + " <localTime.getSecond()> é diferente de " + result1886 + " <getSecond(packedTime2)>")
chamada antiga: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
nova chamada: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2), "Era esperado valores iguais, mas " + result1887 + " <getMillisecondOfDay(packedTime)> é diferente de " + result1888 + " <getMillisecondOfDay(packedTime2)>")
chamada antiga: assertEquals(localTime.getHour(), getHour(packedTime2))
nova chamada: assertEquals(localTime.getHour(), getHour(packedTime2), "Era esperado valores iguais, mas " + result1889 + " <localTime.getHour()> é diferente de " + result1890 + " <getHour(packedTime2)>")
chamada antiga: assertEquals(localTime.getMinute(), getMinute(packedTime2))
nova chamada: assertEquals(localTime.getMinute(), getMinute(packedTime2), "Era esperado valores iguais, mas " + result1891 + " <localTime.getMinute()> é diferente de " + result1892 + " <getMinute(packedTime2)>")
chamada antiga: assertEquals(localTime.getSecond(), getSecond(packedTime2))
nova chamada: assertEquals(localTime.getSecond(), getSecond(packedTime2), "Era esperado valores iguais, mas " + result1893 + " <localTime.getSecond()> é diferente de " + result1894 + " <getSecond(packedTime2)>")
chamada antiga: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2))
nova chamada: assertEquals(getMillisecondOfDay(packedTime), getMillisecondOfDay(packedTime2), "Era esperado valores iguais, mas " + result1895 + " <getMillisecondOfDay(packedTime)> é diferente de " + result1896 + " <getMillisecondOfDay(packedTime2)>")
chamada antiga: assertEquals(localTime.until(localTime2, SECONDS), secondsUntil(packedTime2, packedTime))
nova chamada: assertEquals(localTime.until(localTime2, SECONDS), secondsUntil(packedTime2, packedTime), "Era esperado valores iguais, mas " + result1897 + " <localTime.until(localTime2, SECONDS)> é diferente de " + result1898 + " <secondsUntil(packedTime2, packedTime)>")
chamada antiga: assertEquals(localTime.until(localTime2, MINUTES), minutesUntil(packedTime2, packedTime))
nova chamada: assertEquals(localTime.until(localTime2, MINUTES), minutesUntil(packedTime2, packedTime), "Era esperado valores iguais, mas " + result1899 + " <localTime.until(localTime2, MINUTES)> é diferente de " + result1900 + " <minutesUntil(packedTime2, packedTime)>")
chamada antiga: assertEquals(localTime.until(localTime2, HOURS), hoursUntil(packedTime2, packedTime))
nova chamada: assertEquals(localTime.until(localTime2, HOURS), hoursUntil(packedTime2, packedTime), "Era esperado valores iguais, mas " + result1901 + " <localTime.until(localTime2, HOURS)> é diferente de " + result1902 + " <hoursUntil(packedTime2, packedTime)>")
chamada antiga: assertNotNull(t1)
nova chamada: assertNotNull(t1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(time.getHour(), t1.getHour())
nova chamada: assertEquals(time.getHour(), t1.getHour(), "Era esperado valores iguais, mas " + result1903 + " <time.getHour()> é diferente de " + result1904 + " <t1.getHour()>")
chamada antiga: assertEquals(time.getMinute(), t1.getMinute())
nova chamada: assertEquals(time.getMinute(), t1.getMinute(), "Era esperado valores iguais, mas " + result1905 + " <time.getMinute()> é diferente de " + result1906 + " <t1.getMinute()>")
chamada antiga: assertEquals(time.getSecond(), t1.getSecond())
nova chamada: assertEquals(time.getSecond(), t1.getSecond(), "Era esperado valores iguais, mas " + result1907 + " <time.getSecond()> é diferente de " + result1908 + " <t1.getSecond()>")
chamada antiga: assertEquals(time.get(ChronoField.MILLI_OF_SECOND), t1.get(ChronoField.MILLI_OF_SECOND))
nova chamada: assertEquals(time.get(ChronoField.MILLI_OF_SECOND), t1.get(ChronoField.MILLI_OF_SECOND), "Era esperado valores iguais, mas " + result1909 + " <time.get(ChronoField.MILLI_OF_SECOND)> é diferente de " + result1910 + " <t1.get(ChronoField.MILLI_OF_SECOND)>")
chamada antiga: assertEquals(localTime2.getHour(), getHour(packedTime2))
nova chamada: assertEquals(localTime2.getHour(), getHour(packedTime2), "Era esperado valores iguais, mas " + result1911 + " <localTime2.getHour()> é diferente de " + result1912 + " <getHour(packedTime2)>")
chamada antiga: assertEquals(localTime2.getMinute(), getMinute(packedTime2))
nova chamada: assertEquals(localTime2.getMinute(), getMinute(packedTime2), "Era esperado valores iguais, mas " + result1913 + " <localTime2.getMinute()> é diferente de " + result1914 + " <getMinute(packedTime2)>")
chamada antiga: assertEquals(localTime2.getSecond(), getSecond(packedTime2))
nova chamada: assertEquals(localTime2.getSecond(), getSecond(packedTime2), "Era esperado valores iguais, mas " + result1915 + " <localTime2.getSecond()> é diferente de " + result1916 + " <getSecond(packedTime2)>")
chamada antiga: assertEquals(localTime2.getNano(), getNano(packedTime2))
nova chamada: assertEquals(localTime2.getNano(), getNano(packedTime2), "Era esperado valores iguais, mas " + result1917 + " <localTime2.getNano()> é diferente de " + result1918 + " <getNano(packedTime2)>")
chamada antiga: assertEquals(LocalDate.parse("2004-02-04"), first.get(0))
nova chamada: assertEquals(LocalDate.parse("2004-02-04"), first.get(0), "Era esperado valores iguais, mas " + result1919 + " <LocalDate.parse('2004-02-04')> é diferente de " + result1920 + " <first.get(0)>")
chamada antiga: assertEquals(LocalDate.parse("2004-01-21"), first.get(1))
nova chamada: assertEquals(LocalDate.parse("2004-01-21"), first.get(1), "Era esperado valores iguais, mas " + result1921 + " <LocalDate.parse('2004-01-21')> é diferente de " + result1922 + " <first.get(1)>")
chamada antiga: assertEquals(LocalDate.parse("2004-01-07"), first.get(2))
nova chamada: assertEquals(LocalDate.parse("2004-01-07"), first.get(2), "Era esperado valores iguais, mas " + result1923 + " <LocalDate.parse('2004-01-07')> é diferente de " + result1924 + " <first.get(2)>")
chamada antiga: assertEquals("fox", first3.get(0))
nova chamada: assertEquals("fox", first3.get(0), "Era esperado valores iguais, mas  'fox' é diferente de " + result1925 + " <first3.get(0)>")
chamada antiga: assertEquals("fox", first3.get(1))
nova chamada: assertEquals("fox", first3.get(1), "Era esperado valores iguais, mas  'fox' é diferente de " + result1926 + " <first3.get(1)>")
chamada antiga: assertEquals("fox", first3.get(2))
nova chamada: assertEquals("fox", first3.get(2), "Era esperado valores iguais, mas  'fox' é diferente de " + result1927 + " <first3.get(2)>")
chamada antiga: assertEquals(LocalDate.parse("2001-03-27"), last.get(0))
nova chamada: assertEquals(LocalDate.parse("2001-03-27"), last.get(0), "Era esperado valores iguais, mas " + result1928 + " <LocalDate.parse('2001-03-27')> é diferente de " + result1929 + " <last.get(0)>")
chamada antiga: assertEquals(LocalDate.parse("2001-02-27"), last.get(1))
nova chamada: assertEquals(LocalDate.parse("2001-02-27"), last.get(1), "Era esperado valores iguais, mas " + result1930 + " <LocalDate.parse('2001-02-27')> é diferente de " + result1931 + " <last.get(1)>")
chamada antiga: assertEquals(LocalDate.parse("2001-02-09"), last.get(2))
nova chamada: assertEquals(LocalDate.parse("2001-02-09"), last.get(2), "Era esperado valores iguais, mas " + result1932 + " <LocalDate.parse('2001-02-09')> é diferente de " + result1933 + " <last.get(2)>")
chamada antiga: assertEquals("zogby", last3.get(0))
nova chamada: assertEquals("zogby", last3.get(0), "Era esperado valores iguais, mas  'zogby' é diferente de " + result1934 + " <last3.get(0)>")
chamada antiga: assertEquals("zogby", last3.get(1))
nova chamada: assertEquals("zogby", last3.get(1), "Era esperado valores iguais, mas  'zogby' é diferente de " + result1935 + " <last3.get(1)>")
chamada antiga: assertEquals("zogby", last3.get(2))
nova chamada: assertEquals("zogby", last3.get(2), "Era esperado valores iguais, mas  'zogby' é diferente de " + result1936 + " <last3.get(2)>")
chamada antiga: assertEquals("approval", c.name())
nova chamada: assertEquals("approval", c.name(), "Era esperado valores iguais, mas  'approval' é diferente de " + result1937 + " <c.name()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, c.type())
nova chamada: assertEquals(ColumnType.DOUBLE, c.type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result1938 + " <c.type()>")
chamada antiga: assertTrue(c.contains("fox"))
nova chamada: assertTrue(c.contains("fox"), "Era esperado verdadeiro, mas " + result1939 + " <c.contains('fox')> é falso")
chamada antiga: assertFalse(c.contains("foxes"))
nova chamada: assertFalse(c.contains("foxes"), "Era esperado falso, mas " + result1940 + " <c.contains('foxes')> é verdadeiro ")
chamada antiga: assertEquals(3, table.columnCount())
nova chamada: assertEquals(3, table.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1941 + " <table.columnCount()>")
chamada antiga: assertEquals(2, table.columnCount())
nova chamada: assertEquals(2, table.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1942 + " <table.columnCount()>")
chamada antiga: assertEquals(whos.size(), whoColumn.size())
nova chamada: assertEquals(whos.size(), whoColumn.size(), "Era esperado valores iguais, mas " + result1943 + " <whos.size()> é diferente de " + result1944 + " <whoColumn.size()>")
chamada antiga: assertTrue(dc3.contains(1.0))
nova chamada: assertTrue(dc3.contains(1.0), "Era esperado verdadeiro, mas " + result1945 + " <dc3.contains(1.0)> é falso")
chamada antiga: assertTrue(dc3.contains(-4.0))
nova chamada: assertTrue(dc3.contains(-4.0), "Era esperado verdadeiro, mas " + result1946 + " <dc3.contains(-4.0)> é falso")
chamada antiga: assertTrue(dc3.contains(-1.0))
nova chamada: assertTrue(dc3.contains(-1.0), "Era esperado verdadeiro, mas " + result1947 + " <dc3.contains(-1.0)> é falso")
chamada antiga: assertTrue(dc1.contains(-34.2))
nova chamada: assertTrue(dc1.contains(-34.2), "Era esperado verdadeiro, mas " + result1948 + " <dc1.contains(-34.2)> é falso")
chamada antiga: assertTrue(ic1.contains(-34))
nova chamada: assertTrue(ic1.contains(-34), "Era esperado verdadeiro, mas " + result1949 + " <ic1.contains(-34)> é falso")
chamada antiga: assertTrue(sc1.contains("missing"))
nova chamada: assertTrue(sc1.contains("missing"), "Era esperado verdadeiro, mas " + result1950 + " <sc1.contains('missing')> é falso")
chamada antiga: assertTrue(dtc1.contains(LocalDate.of(2001, 1, 1)))
nova chamada: assertTrue(dtc1.contains(LocalDate.of(2001, 1, 1)), "Era esperado verdadeiro, mas " + result1951 + " <dtc1.contains(LocalDate.of(2001, 1, 1))> é falso")
chamada antiga: assertTrue(dc3.contains(2.0))
nova chamada: assertTrue(dc3.contains(2.0), "Era esperado verdadeiro, mas " + result1952 + " <dc3.contains(2.0)> é falso")
chamada antiga: assertTrue(dc3.contains(0.0))
nova chamada: assertTrue(dc3.contains(0.0), "Era esperado verdadeiro, mas " + result1953 + " <dc3.contains(0.0)> é falso")
chamada antiga: assertTrue(dc3.contains(3.0))
nova chamada: assertTrue(dc3.contains(3.0), "Era esperado verdadeiro, mas " + result1954 + " <dc3.contains(3.0)> é falso")
chamada antiga: assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero, 2))
nova chamada: assertEquals(2, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero, 2), "Era esperado valores iguais, mas  2 é diferente de " + result1955 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isPositiveOrZero, 2)>")
chamada antiga: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative, 2))
nova chamada: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative, 2), "Era esperado valores iguais, mas  0 é diferente de " + result1956 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isNegative, 2)>")
chamada antiga: assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero))
nova chamada: assertEquals(3, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isPositiveOrZero), "Era esperado valores iguais, mas  3 é diferente de " + result1957 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isPositiveOrZero)>")
chamada antiga: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative))
nova chamada: assertEquals(0, DoubleColumn.create("t1", new double[] { 0, 1, 2 }).count(isNegative), "Era esperado valores iguais, mas  0 é diferente de " + result1958 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).count(isNegative)>")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZero))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).allMatch(isPositiveOrZero), "Era esperado verdadeiro, mas " + result1959 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).allMatch(isPositiveOrZero)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZero))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).allMatch(isPositiveOrZero), "Era esperado falso, mas " + result1960 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).allMatch(isPositiveOrZero)> é verdadeiro ")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZero))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).allMatch(isPositiveOrZero), "Era esperado falso, mas " + result1961 + " <DoubleColumn.create('t1', new double[] { 1, 0, -1 }).allMatch(isPositiveOrZero)> é verdadeiro ")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZero))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZero), "Era esperado verdadeiro, mas " + result1962 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).anyMatch(isPositiveOrZero)> é falso")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZero))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZero), "Era esperado verdadeiro, mas " + result1963 + " <DoubleColumn.create('t1', new double[] { -1, 0, -1 }).anyMatch(isPositiveOrZero)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegative))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).anyMatch(isNegative), "Era esperado falso, mas " + result1964 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).anyMatch(isNegative)> é verdadeiro ")
chamada antiga: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegative))
nova chamada: assertTrue(DoubleColumn.create("t1", new double[] { 0, 1, 2 }).noneMatch(isNegative), "Era esperado verdadeiro, mas " + result1965 + " <DoubleColumn.create('t1', new double[] { 0, 1, 2 }).noneMatch(isNegative)> é falso")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegative))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { -1, 0, 1 }).noneMatch(isNegative), "Era esperado falso, mas " + result1966 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).noneMatch(isNegative)> é verdadeiro ")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegative))
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] { 1, 0, -1 }).noneMatch(isNegative), "Era esperado falso, mas " + result1967 + " <DoubleColumn.create('t1', new double[] { 1, 0, -1 }).noneMatch(isNegative)> é verdadeiro ")
chamada antiga: assertEquals(ts.length, column.size())
nova chamada: assertEquals(ts.length, column.size(), "Era esperado valores iguais, mas  ts.length é diferente de " + result1968 + " <column.size()>")
chamada antiga: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get())
nova chamada: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).max(Double::compare).get(), "Era esperado valores iguais, mas " + result1969 + " <Double.valueOf(1.0)> é diferente de " + result1970 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).max(Double::compare).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1").max((d1, d2) -> (int) (d1 - d2)).isPresent(), "Era esperado falso, mas " + result1971 + " <DoubleColumn.create('t1').max((d1, d2) -> (int) (d1 - d2)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get())
nova chamada: assertEquals(Double.valueOf(-1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).min(Double::compare).get(), "Era esperado valores iguais, mas " + result1972 + " <Double.valueOf(-1.0)> é diferente de " + result1973 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).min(Double::compare).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1").min((d1, d2) -> (int) (d1 - d2)).isPresent(), "Era esperado falso, mas " + result1974 + " <DoubleColumn.create('t1').min((d1, d2) -> (int) (d1 - d2)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(1.0, sum))
nova chamada: assertEquals(Double.valueOf(1.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(1.0, sum), "Era esperado valores iguais, mas " + result1975 + " <Double.valueOf(1.0)> é diferente de " + result1976 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).reduce(1.0, sum)>")
chamada antiga: assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sum).get())
nova chamada: assertEquals(Double.valueOf(0.0), DoubleColumn.create("t1", new double[] { -1, 0, 1 }).reduce(sum).get(), "Era esperado valores iguais, mas " + result1977 + " <Double.valueOf(0.0)> é diferente de " + result1978 + " <DoubleColumn.create('t1', new double[] { -1, 0, 1 }).reduce(sum).get()>")
chamada antiga: assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sum).isPresent())
nova chamada: assertFalse(DoubleColumn.create("t1", new double[] {}).reduce(sum).isPresent(), "Era esperado falso, mas " + result1979 + " <DoubleColumn.create('t1', new double[] {}).reduce(sum).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(-1, testDoubleCol.indexOf(2))
nova chamada: assertEquals(-1, testDoubleCol.indexOf(2), "Era esperado valores iguais, mas  -1 é diferente de " + result1980 + " <testDoubleCol.indexOf(2)>")
chamada antiga: assertEquals(-1, testDoubleCol.indexOf(0))
nova chamada: assertEquals(-1, testDoubleCol.indexOf(0), "Era esperado valores iguais, mas  -1 é diferente de " + result1981 + " <testDoubleCol.indexOf(0)>")
chamada antiga: assertEquals(0, testDoubleCol.indexOf(0.0))
nova chamada: assertEquals(0, testDoubleCol.indexOf(0.0), "Era esperado valores iguais, mas  0 é diferente de " + result1982 + " <testDoubleCol.indexOf(0.0)>")
chamada antiga: assertEquals(1, testDoubleCol.indexOf(1.0))
nova chamada: assertEquals(1, testDoubleCol.indexOf(1.0), "Era esperado valores iguais, mas  1 é diferente de " + result1983 + " <testDoubleCol.indexOf(1.0)>")
chamada antiga: assertEquals(expected.length, num)
nova chamada: assertEquals(expected.length, num, "Era esperado valores iguais, mas  expected.length é diferente de " + " num")
chamada antiga: assertEquals("            tst            " + LINE_END + " index  |  index lag(-2)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              2  |" + LINE_END + "     1  |              3  |" + LINE_END + "     2  |                 |" + LINE_END + "     3  |                 |", t.print())
nova chamada: assertEquals("            tst            " + LINE_END + " index  |  index lag(-2)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              2  |" + LINE_END + "     1  |              3  |" + LINE_END + "     2  |                 |" + LINE_END + "     3  |                 |", t.print(), "Era esperado valores iguais, mas  '            tst            ' + LINE_END + ' index  |  index lag(-2)  |' + LINE_END + '---------------------------' + LINE_END + '     0  |              2  |' + LINE_END + '     1  |              3  |' + LINE_END + '     2  |                 |' + LINE_END + '     3  |                 |' é diferente de " + result1984 + " <t.print()>")
chamada antiga: assertEquals("            tst            " + LINE_END + " index  |  index lead(1)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              1  |" + LINE_END + "     1  |              2  |" + LINE_END + "     2  |              3  |" + LINE_END + "     3  |                 |", t.print())
nova chamada: assertEquals("            tst            " + LINE_END + " index  |  index lead(1)  |" + LINE_END + "---------------------------" + LINE_END + "     0  |              1  |" + LINE_END + "     1  |              2  |" + LINE_END + "     2  |              3  |" + LINE_END + "     3  |                 |", t.print(), "Era esperado valores iguais, mas  '            tst            ' + LINE_END + ' index  |  index lead(1)  |' + LINE_END + '---------------------------' + LINE_END + '     0  |              1  |' + LINE_END + '     1  |              2  |' + LINE_END + '     2  |              3  |' + LINE_END + '     3  |                 |' é diferente de " + result1985 + " <t.print()>")
chamada antiga: assertFalse(newDoubles.isEmpty())
nova chamada: assertFalse(newDoubles.isEmpty(), "Era esperado falso, mas " + result1986 + " <newDoubles.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(newDoubles.isEmpty())
nova chamada: assertFalse(newDoubles.isEmpty(), "Era esperado falso, mas " + result1987 + " <newDoubles.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(newDoubles.isEmpty())
nova chamada: assertFalse(newDoubles.isEmpty(), "Era esperado falso, mas " + result1988 + " <newDoubles.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(newDoubles.isEmpty())
nova chamada: assertFalse(newDoubles.isEmpty(), "Era esperado falso, mas " + result1989 + " <newDoubles.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(newDoubles.isEmpty())
nova chamada: assertFalse(newDoubles.isEmpty(), "Era esperado falso, mas " + result1990 + " <newDoubles.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(Long.toString(value), ncf.format(value))
nova chamada: assertEquals(Long.toString(value), ncf.format(value), "Era esperado valores iguais, mas " + result1991 + " <Long.toString(value)> é diferente de " + result1992 + " <ncf.format(value)>")
chamada antiga: assertEquals("data 5-period Mean", result.name())
nova chamada: assertEquals("data 5-period Mean", result.name(), "Era esperado valores iguais, mas  'data 5-period Mean' é diferente de " + result1993 + " <result.name()>")
chamada antiga: assertEquals(1, selection.get(0))
nova chamada: assertEquals(1, selection.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result1994 + " <selection.get(0)>")
chamada antiga: assertEquals(2, selection.get(1))
nova chamada: assertEquals(2, selection.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result1995 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1996 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result1997 + " <selection.get(0)>")
chamada antiga: assertEquals(3, selection.get(1))
nova chamada: assertEquals(3, selection.get(1), "Era esperado valores iguais, mas  3 é diferente de " + result1998 + " <selection.get(1)>")
chamada antiga: assertEquals(4, selection.get(2))
nova chamada: assertEquals(4, selection.get(2), "Era esperado valores iguais, mas  4 é diferente de " + result1999 + " <selection.get(2)>")
chamada antiga: assertEquals(3, selection.size())
nova chamada: assertEquals(3, selection.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2000 + " <selection.size()>")
chamada antiga: assertEquals(1, selection.get(0))
nova chamada: assertEquals(1, selection.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2001 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2002 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2003 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2004 + " <selection.size()>")
chamada antiga: assertArrayEquals(values, int1.asIntArray())
nova chamada: assertArrayEquals(values, int1.asIntArray(), "Era esperado arrays iguais, mas  values é diferente de " + result2005 + " <int1.asIntArray()>")
chamada antiga: assertArrayEquals(values, c1.asFloatArray())
nova chamada: assertArrayEquals(values, c1.asFloatArray(), "Era esperado arrays iguais, mas  values é diferente de " + result2006 + " <c1.asFloatArray()>")
chamada antiga: assertArrayEquals(values, c1.asDoubleArray())
nova chamada: assertArrayEquals(values, c1.asDoubleArray(), "Era esperado arrays iguais, mas  values é diferente de " + result2007 + " <c1.asDoubleArray()>")
chamada antiga: assertEquals(2, selection.get(0))
nova chamada: assertEquals(2, selection.get(0), "Era esperado valores iguais, mas  2 é diferente de " + result2008 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2009 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2010 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.get(1))
nova chamada: assertEquals(1, selection.get(1), "Era esperado valores iguais, mas  1 é diferente de " + result2011 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2012 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2013 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.get(1))
nova chamada: assertEquals(1, selection.get(1), "Era esperado valores iguais, mas  1 é diferente de " + result2014 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2015 + " <selection.size()>")
chamada antiga: assertEquals(0, selection1.get(0))
nova chamada: assertEquals(0, selection1.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2016 + " <selection1.get(0)>")
chamada antiga: assertEquals(1, selection1.get(1))
nova chamada: assertEquals(1, selection1.get(1), "Era esperado valores iguais, mas  1 é diferente de " + result2017 + " <selection1.get(1)>")
chamada antiga: assertEquals(2, selection1.size())
nova chamada: assertEquals(2, selection1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2018 + " <selection1.size()>")
chamada antiga: assertEquals(1, selection.get(0))
nova chamada: assertEquals(1, selection.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2019 + " <selection.get(0)>")
chamada antiga: assertEquals(2, selection.get(1))
nova chamada: assertEquals(2, selection.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result2020 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2021 + " <selection.size()>")
chamada antiga: assertEquals(0, selection1.get(0))
nova chamada: assertEquals(0, selection1.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2022 + " <selection1.get(0)>")
chamada antiga: assertEquals(2, selection1.get(1))
nova chamada: assertEquals(2, selection1.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result2023 + " <selection1.get(1)>")
chamada antiga: assertEquals(2, selection1.size())
nova chamada: assertEquals(2, selection1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2024 + " <selection1.size()>")
chamada antiga: assertEquals(1, selection.get(0))
nova chamada: assertEquals(1, selection.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2025 + " <selection.get(0)>")
chamada antiga: assertEquals(3, selection.get(1))
nova chamada: assertEquals(3, selection.get(1), "Era esperado valores iguais, mas  3 é diferente de " + result2026 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2027 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2028 + " <selection.get(0)>")
chamada antiga: assertEquals(3, selection.get(1))
nova chamada: assertEquals(3, selection.get(1), "Era esperado valores iguais, mas  3 é diferente de " + result2029 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2030 + " <selection.size()>")
chamada antiga: assertEquals(1, selection1.get(0))
nova chamada: assertEquals(1, selection1.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2031 + " <selection1.get(0)>")
chamada antiga: assertEquals(1, selection1.size())
nova chamada: assertEquals(1, selection1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2032 + " <selection1.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2033 + " <selection.get(0)>")
chamada antiga: assertEquals(4, selection.get(1))
nova chamada: assertEquals(4, selection.get(1), "Era esperado valores iguais, mas  4 é diferente de " + result2034 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2035 + " <selection.size()>")
chamada antiga: assertEquals(1, selection.get(0))
nova chamada: assertEquals(1, selection.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2036 + " <selection.get(0)>")
chamada antiga: assertEquals(2, selection.get(1))
nova chamada: assertEquals(2, selection.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result2037 + " <selection.get(1)>")
chamada antiga: assertEquals(3, selection.get(2))
nova chamada: assertEquals(3, selection.get(2), "Era esperado valores iguais, mas  3 é diferente de " + result2038 + " <selection.get(2)>")
chamada antiga: assertEquals(3, selection.size())
nova chamada: assertEquals(3, selection.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2039 + " <selection.size()>")
chamada antiga: assertEquals(1, selection1.get(0))
nova chamada: assertEquals(1, selection1.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result2040 + " <selection1.get(0)>")
chamada antiga: assertEquals(2, selection1.get(1))
nova chamada: assertEquals(2, selection1.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result2041 + " <selection1.get(1)>")
chamada antiga: assertEquals(3, selection1.get(2))
nova chamada: assertEquals(3, selection1.get(2), "Era esperado valores iguais, mas  3 é diferente de " + result2042 + " <selection1.get(2)>")
chamada antiga: assertEquals(3, selection1.size())
nova chamada: assertEquals(3, selection1.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2043 + " <selection1.size()>")
chamada antiga: assertEquals(2, selection.get(0))
nova chamada: assertEquals(2, selection.get(0), "Era esperado valores iguais, mas  2 é diferente de " + result2044 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.size())
nova chamada: assertEquals(1, selection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2045 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2046 + " <selection.get(0)>")
chamada antiga: assertEquals(1, selection.get(1))
nova chamada: assertEquals(1, selection.get(1), "Era esperado valores iguais, mas  1 é diferente de " + result2047 + " <selection.get(1)>")
chamada antiga: assertEquals(4, selection.size())
nova chamada: assertEquals(4, selection.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2048 + " <selection.size()>")
chamada antiga: assertEquals(0, selection.get(0))
nova chamada: assertEquals(0, selection.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result2049 + " <selection.get(0)>")
chamada antiga: assertEquals(2, selection.get(1))
nova chamada: assertEquals(2, selection.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result2050 + " <selection.get(1)>")
chamada antiga: assertEquals(2, selection.size())
nova chamada: assertEquals(2, selection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2051 + " <selection.size()>")
chamada antiga: assertEquals(10, result.rowCount())
nova chamada: assertEquals(10, result.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result2052 + " <result.rowCount()>")
chamada antiga: assertArrayEquals(new double[] { missing, 1.0, 2.0, 3.0, 4.0, 5.0, missing }, col.asDoubleArray())
nova chamada: assertArrayEquals(new double[] { missing, 1.0, 2.0, 3.0, 4.0, 5.0, missing }, col.asDoubleArray(), "Era esperado arrays iguais, mas  new double[] { missing, 1.0, 2.0, 3.0, 4.0, 5.0, missing } é diferente de " + result2053 + " <col.asDoubleArray()>")
chamada antiga: assertTrue(sc1.equalsIgnoreCase("APPLE").contains(0))
nova chamada: assertTrue(sc1.equalsIgnoreCase("APPLE").contains(0), "Era esperado verdadeiro, mas " + result2054 + " <sc1.equalsIgnoreCase('APPLE').contains(0)> é falso")
chamada antiga: assertTrue(sc1.equalsIgnoreCase(sc2).contains(0))
nova chamada: assertTrue(sc1.equalsIgnoreCase(sc2).contains(0), "Era esperado verdadeiro, mas " + result2055 + " <sc1.equalsIgnoreCase(sc2).contains(0)> é falso")
chamada antiga: assertTrue(sc1.startsWith("dog").contains(9))
nova chamada: assertTrue(sc1.startsWith("dog").contains(9), "Era esperado verdadeiro, mas " + result2056 + " <sc1.startsWith('dog').contains(9)> é falso")
chamada antiga: assertTrue(sc1.startsWith("dog").contains(10))
nova chamada: assertTrue(sc1.startsWith("dog").contains(10), "Era esperado verdadeiro, mas " + result2057 + " <sc1.startsWith('dog').contains(10)> é falso")
chamada antiga: assertTrue(sc1.endsWith("dog").contains(9))
nova chamada: assertTrue(sc1.endsWith("dog").contains(9), "Era esperado verdadeiro, mas " + result2058 + " <sc1.endsWith('dog').contains(9)> é falso")
chamada antiga: assertFalse(sc1.endsWith("dog").contains(10))
nova chamada: assertFalse(sc1.endsWith("dog").contains(10), "Era esperado falso, mas " + result2059 + " <sc1.endsWith('dog').contains(10)> é verdadeiro ")
chamada antiga: assertTrue(sc1.containsString("eph").contains(4))
nova chamada: assertTrue(sc1.containsString("eph").contains(4), "Era esperado verdadeiro, mas " + result2060 + " <sc1.containsString('eph').contains(4)> é falso")
chamada antiga: assertFalse(sc1.containsString("eph").contains(10))
nova chamada: assertFalse(sc1.containsString("eph").contains(10), "Era esperado falso, mas " + result2061 + " <sc1.containsString('eph').contains(10)> é verdadeiro ")
chamada antiga: assertTrue(sc1.matchesRegex("^apple").contains(0))
nova chamada: assertTrue(sc1.matchesRegex("^apple").contains(0), "Era esperado verdadeiro, mas " + result2062 + " <sc1.matchesRegex('^apple').contains(0)> é falso")
chamada antiga: assertFalse(sc1.matchesRegex("^apple").contains(7))
nova chamada: assertFalse(sc1.matchesRegex("^apple").contains(7), "Era esperado falso, mas " + result2063 + " <sc1.matchesRegex('^apple').contains(7)> é verdadeiro ")
chamada antiga: assertFalse(sc1.matchesRegex("^apple").contains(10))
nova chamada: assertFalse(sc1.matchesRegex("^apple").contains(10), "Era esperado falso, mas " + result2064 + " <sc1.matchesRegex('^apple').contains(10)> é verdadeiro ")
chamada antiga: assertFalse(sc1.matchesRegex("^apple").contains(14))
nova chamada: assertFalse(sc1.matchesRegex("^apple").contains(14), "Era esperado falso, mas " + result2065 + " <sc1.matchesRegex('^apple').contains(14)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isAlpha().contains(4))
nova chamada: assertTrue(sc1.isAlpha().contains(4), "Era esperado verdadeiro, mas " + result2066 + " <sc1.isAlpha().contains(4)> é falso")
chamada antiga: assertFalse(sc1.isAlpha().contains(11))
nova chamada: assertFalse(sc1.isAlpha().contains(11), "Era esperado falso, mas " + result2067 + " <sc1.isAlpha().contains(11)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isAlpha().contains(13))
nova chamada: assertFalse(sc1.isAlpha().contains(13), "Era esperado falso, mas " + result2068 + " <sc1.isAlpha().contains(13)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isNumeric().contains(4))
nova chamada: assertFalse(sc1.isNumeric().contains(4), "Era esperado falso, mas " + result2069 + " <sc1.isNumeric().contains(4)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isNumeric().contains(11))
nova chamada: assertTrue(sc1.isNumeric().contains(11), "Era esperado verdadeiro, mas " + result2070 + " <sc1.isNumeric().contains(11)> é falso")
chamada antiga: assertFalse(sc1.isNumeric().contains(13))
nova chamada: assertFalse(sc1.isNumeric().contains(13), "Era esperado falso, mas " + result2071 + " <sc1.isNumeric().contains(13)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isAlphaNumeric().contains(4))
nova chamada: assertTrue(sc1.isAlphaNumeric().contains(4), "Era esperado verdadeiro, mas " + result2072 + " <sc1.isAlphaNumeric().contains(4)> é falso")
chamada antiga: assertTrue(sc1.isAlphaNumeric().contains(11))
nova chamada: assertTrue(sc1.isAlphaNumeric().contains(11), "Era esperado verdadeiro, mas " + result2073 + " <sc1.isAlphaNumeric().contains(11)> é falso")
chamada antiga: assertFalse(sc1.isAlphaNumeric().contains(13))
nova chamada: assertFalse(sc1.isAlphaNumeric().contains(13), "Era esperado falso, mas " + result2074 + " <sc1.isAlphaNumeric().contains(13)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isAlphaNumeric().contains(15))
nova chamada: assertFalse(sc1.isAlphaNumeric().contains(15), "Era esperado falso, mas " + result2075 + " <sc1.isAlphaNumeric().contains(15)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isAlphaNumeric().contains(16))
nova chamada: assertTrue(sc1.isAlphaNumeric().contains(16), "Era esperado verdadeiro, mas " + result2076 + " <sc1.isAlphaNumeric().contains(16)> é falso")
chamada antiga: assertFalse(sc1.isUpperCase().contains(4))
nova chamada: assertFalse(sc1.isUpperCase().contains(4), "Era esperado falso, mas " + result2077 + " <sc1.isUpperCase().contains(4)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isUpperCase().contains(13))
nova chamada: assertFalse(sc1.isUpperCase().contains(13), "Era esperado falso, mas " + result2078 + " <sc1.isUpperCase().contains(13)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isUpperCase().contains(17))
nova chamada: assertTrue(sc1.isUpperCase().contains(17), "Era esperado verdadeiro, mas " + result2079 + " <sc1.isUpperCase().contains(17)> é falso")
chamada antiga: assertTrue(sc1.isLowerCase().contains(4))
nova chamada: assertTrue(sc1.isLowerCase().contains(4), "Era esperado verdadeiro, mas " + result2080 + " <sc1.isLowerCase().contains(4)> é falso")
chamada antiga: assertFalse(sc1.isLowerCase().contains(17))
nova chamada: assertFalse(sc1.isLowerCase().contains(17), "Era esperado falso, mas " + result2081 + " <sc1.isLowerCase().contains(17)> é verdadeiro ")
chamada antiga: assertTrue(sc1.lengthEquals(5).contains(0))
nova chamada: assertTrue(sc1.lengthEquals(5).contains(0), "Era esperado verdadeiro, mas " + result2082 + " <sc1.lengthEquals(5).contains(0)> é falso")
chamada antiga: assertFalse(sc1.lengthEquals(5).contains(8))
nova chamada: assertFalse(sc1.lengthEquals(5).contains(8), "Era esperado falso, mas " + result2083 + " <sc1.lengthEquals(5).contains(8)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isShorterThan(5).contains(6))
nova chamada: assertTrue(sc1.isShorterThan(5).contains(6), "Era esperado verdadeiro, mas " + result2084 + " <sc1.isShorterThan(5).contains(6)> é falso")
chamada antiga: assertFalse(sc1.isShorterThan(5).contains(0))
nova chamada: assertFalse(sc1.isShorterThan(5).contains(0), "Era esperado falso, mas " + result2085 + " <sc1.isShorterThan(5).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isLongerThan(5).contains(1))
nova chamada: assertTrue(sc1.isLongerThan(5).contains(1), "Era esperado verdadeiro, mas " + result2086 + " <sc1.isLongerThan(5).contains(1)> é falso")
chamada antiga: assertFalse(sc1.isLongerThan(5).contains(0))
nova chamada: assertFalse(sc1.isLongerThan(5).contains(0), "Era esperado falso, mas " + result2087 + " <sc1.isLongerThan(5).contains(0)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isIn("diamond", "dog", "canary").contains(3))
nova chamada: assertTrue(sc1.isIn("diamond", "dog", "canary").contains(3), "Era esperado verdadeiro, mas " + result2088 + " <sc1.isIn('diamond', 'dog', 'canary').contains(3)> é falso")
chamada antiga: assertFalse(sc1.isIn("diamond", "dog", "canary").contains(8))
nova chamada: assertFalse(sc1.isIn("diamond", "dog", "canary").contains(8), "Era esperado falso, mas " + result2089 + " <sc1.isIn('diamond', 'dog', 'canary').contains(8)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isIn("diamond", "dog", "canary").contains(9))
nova chamada: assertTrue(sc1.isIn("diamond", "dog", "canary").contains(9), "Era esperado verdadeiro, mas " + result2090 + " <sc1.isIn('diamond', 'dog', 'canary').contains(9)> é falso")
chamada antiga: assertTrue(sc1.isIn(candidates).contains(3))
nova chamada: assertTrue(sc1.isIn(candidates).contains(3), "Era esperado verdadeiro, mas " + result2091 + " <sc1.isIn(candidates).contains(3)> é falso")
chamada antiga: assertFalse(sc1.isIn(candidates).contains(8))
nova chamada: assertFalse(sc1.isIn(candidates).contains(8), "Era esperado falso, mas " + result2092 + " <sc1.isIn(candidates).contains(8)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isIn(candidates).contains(9))
nova chamada: assertTrue(sc1.isIn(candidates).contains(9), "Era esperado verdadeiro, mas " + result2093 + " <sc1.isIn(candidates).contains(9)> é falso")
chamada antiga: assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(3))
nova chamada: assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(3), "Era esperado falso, mas " + result2094 + " <sc1.isNotIn('diamond', 'dog', 'canary').contains(3)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isNotIn("diamond", "dog", "canary").contains(8))
nova chamada: assertTrue(sc1.isNotIn("diamond", "dog", "canary").contains(8), "Era esperado verdadeiro, mas " + result2095 + " <sc1.isNotIn('diamond', 'dog', 'canary').contains(8)> é falso")
chamada antiga: assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(9))
nova chamada: assertFalse(sc1.isNotIn("diamond", "dog", "canary").contains(9), "Era esperado falso, mas " + result2096 + " <sc1.isNotIn('diamond', 'dog', 'canary').contains(9)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isNotIn(candidates).contains(3))
nova chamada: assertFalse(sc1.isNotIn(candidates).contains(3), "Era esperado falso, mas " + result2097 + " <sc1.isNotIn(candidates).contains(3)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isNotIn(candidates).contains(8))
nova chamada: assertTrue(sc1.isNotIn(candidates).contains(8), "Era esperado verdadeiro, mas " + result2098 + " <sc1.isNotIn(candidates).contains(8)> é falso")
chamada antiga: assertFalse(sc1.isNotIn(candidates).contains(9))
nova chamada: assertFalse(sc1.isNotIn(candidates).contains(9), "Era esperado falso, mas " + result2099 + " <sc1.isNotIn(candidates).contains(9)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isMissing().contains(3))
nova chamada: assertFalse(sc1.isMissing().contains(3), "Era esperado falso, mas " + result2100 + " <sc1.isMissing().contains(3)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isMissing().contains(18))
nova chamada: assertTrue(sc1.isMissing().contains(18), "Era esperado verdadeiro, mas " + result2101 + " <sc1.isMissing().contains(18)> é falso")
chamada antiga: assertFalse(sc1.isEmptyString().contains(3))
nova chamada: assertFalse(sc1.isEmptyString().contains(3), "Era esperado falso, mas " + result2102 + " <sc1.isEmptyString().contains(3)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isEmptyString().contains(18))
nova chamada: assertTrue(sc1.isEmptyString().contains(18), "Era esperado verdadeiro, mas " + result2103 + " <sc1.isEmptyString().contains(18)> é falso")
chamada antiga: assertTrue(sc1.isNotMissing().contains(3))
nova chamada: assertTrue(sc1.isNotMissing().contains(3), "Era esperado verdadeiro, mas " + result2104 + " <sc1.isNotMissing().contains(3)> é falso")
chamada antiga: assertFalse(sc1.isNotMissing().contains(18))
nova chamada: assertFalse(sc1.isNotMissing().contains(18), "Era esperado falso, mas " + result2105 + " <sc1.isNotMissing().contains(18)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isEqualTo("10").contains(12))
nova chamada: assertTrue(sc1.isEqualTo("10").contains(12), "Era esperado verdadeiro, mas " + result2106 + " <sc1.isEqualTo('10').contains(12)> é falso")
chamada antiga: assertFalse(sc1.isEqualTo("10").contains(13))
nova chamada: assertFalse(sc1.isEqualTo("10").contains(13), "Era esperado falso, mas " + result2107 + " <sc1.isEqualTo('10').contains(13)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isEqualTo(sc2).contains(9))
nova chamada: assertTrue(sc1.isEqualTo(sc2).contains(9), "Era esperado verdadeiro, mas " + result2108 + " <sc1.isEqualTo(sc2).contains(9)> é falso")
chamada antiga: assertFalse(sc1.isEqualTo(sc2).contains(0))
nova chamada: assertFalse(sc1.isEqualTo(sc2).contains(0), "Era esperado falso, mas " + result2109 + " <sc1.isEqualTo(sc2).contains(0)> é verdadeiro ")
chamada antiga: assertFalse(sc1.isNotEqualTo("10").contains(12))
nova chamada: assertFalse(sc1.isNotEqualTo("10").contains(12), "Era esperado falso, mas " + result2110 + " <sc1.isNotEqualTo('10').contains(12)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isNotEqualTo("10").contains(13))
nova chamada: assertTrue(sc1.isNotEqualTo("10").contains(13), "Era esperado verdadeiro, mas " + result2111 + " <sc1.isNotEqualTo('10').contains(13)> é falso")
chamada antiga: assertFalse(sc1.isNotEqualTo(sc2).contains(9))
nova chamada: assertFalse(sc1.isNotEqualTo(sc2).contains(9), "Era esperado falso, mas " + result2112 + " <sc1.isNotEqualTo(sc2).contains(9)> é verdadeiro ")
chamada antiga: assertTrue(sc1.isNotEqualTo(sc2).contains(0))
nova chamada: assertTrue(sc1.isNotEqualTo(sc2).contains(0), "Era esperado verdadeiro, mas " + result2113 + " <sc1.isNotEqualTo(sc2).contains(0)> é falso")
chamada antiga: assertEquals(2, result.rowCount())
nova chamada: assertEquals(2, result.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2114 + " <result.rowCount()>")
chamada antiga: assertEquals("a", result.stringColumn("s").get(0))
nova chamada: assertEquals("a", result.stringColumn("s").get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result2115 + " <result.stringColumn('s').get(0)>")
chamada antiga: assertEquals("d", result.stringColumn("s").get(1))
nova chamada: assertEquals("d", result.stringColumn("s").get(1), "Era esperado valores iguais, mas  'd' é diferente de " + result2116 + " <result.stringColumn('s').get(1)>")
chamada antiga: assertEquals(10, result.rowCount())
nova chamada: assertEquals(10, result.rowCount(), "Era esperado valores iguais, mas  10 é diferente de " + result2117 + " <result.rowCount()>")
chamada antiga: assertEquals(2, result.rowCount())
nova chamada: assertEquals(2, result.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2118 + " <result.rowCount()>")
chamada antiga: assertEquals(20, result.rowCount())
nova chamada: assertEquals(20, result.rowCount(), "Era esperado valores iguais, mas  20 é diferente de " + result2119 + " <result.rowCount()>")
chamada antiga: assertEquals(32, result.rowCount())
nova chamada: assertEquals(32, result.rowCount(), "Era esperado valores iguais, mas  32 é diferente de " + result2120 + " <result.rowCount()>")
chamada antiga: assertEquals(table.rowCount() - 2, result.rowCount())
nova chamada: assertEquals(table.rowCount() - 2, result.rowCount(), "Era esperado valores iguais, mas  table.rowCount() - 2 é diferente de " + result2121 + " <result.rowCount()>")
chamada antiga: assertEquals(table.rowCount() - 10, result.rowCount())
nova chamada: assertEquals(table.rowCount() - 10, result.rowCount(), "Era esperado valores iguais, mas  table.rowCount() - 10 é diferente de " + result2122 + " <result.rowCount()>")
chamada antiga: assertEquals(2, result.columnCount())
nova chamada: assertEquals(2, result.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2123 + " <result.columnCount()>")
chamada antiga: assertTrue(result.columnNames().contains("who"))
nova chamada: assertTrue(result.columnNames().contains("who"), "Era esperado verdadeiro, mas " + result2124 + " <result.columnNames().contains('who')> é falso")
chamada antiga: assertTrue(result.columnNames().contains("approval"))
nova chamada: assertTrue(result.columnNames().contains("approval"), "Era esperado verdadeiro, mas " + result2125 + " <result.columnNames().contains('approval')> é falso")
chamada antiga: assertTrue(counts.numberColumn("[labels]").isMissing(counts.rowCount() - 1))
nova chamada: assertTrue(counts.numberColumn("[labels]").isMissing(counts.rowCount() - 1), "Era esperado verdadeiro, mas " + result2126 + " <counts.numberColumn('[labels]').isMissing(counts.rowCount() - 1)> é falso")
chamada antiga: assertEquals(6, xtab.columnCount())
nova chamada: assertEquals(6, xtab.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result2127 + " <xtab.columnCount()>")
chamada antiga: assertEquals(3, result.columnCount())
nova chamada: assertEquals(3, result.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2128 + " <result.columnCount()>")
chamada antiga: assertEquals("who", result.column(0).name())
nova chamada: assertEquals("who", result.column(0).name(), "Era esperado valores iguais, mas  'who' é diferente de " + result2129 + " <result.column(0).name()>")
chamada antiga: assertEquals(6, result.rowCount())
nova chamada: assertEquals(6, result.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result2130 + " <result.rowCount()>")
chamada antiga: assertEquals("65.671875", result.getUnformatted(0, 1))
nova chamada: assertEquals("65.671875", result.getUnformatted(0, 1), "Era esperado valores iguais, mas  '65.671875' é diferente de " + result2131 + " <result.getUnformatted(0, 1)>")
chamada antiga: assertEquals("10.648876067826901", result.getUnformatted(0, 2))
nova chamada: assertEquals("10.648876067826901", result.getUnformatted(0, 2), "Era esperado valores iguais, mas  '10.648876067826901' é diferente de " + result2132 + " <result.getUnformatted(0, 2)>")
chamada antiga: assertEquals(3, result.columnCount())
nova chamada: assertEquals(3, result.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2133 + " <result.columnCount()>")
chamada antiga: assertEquals(13, result.rowCount())
nova chamada: assertEquals(13, result.rowCount(), "Era esperado valores iguais, mas  13 é diferente de " + result2134 + " <result.rowCount()>")
chamada antiga: assertEquals(i1, minI.get(0, 0))
nova chamada: assertEquals(i1, minI.get(0, 0), "Era esperado valores iguais, mas  i1 é diferente de " + result2135 + " <minI.get(0, 0)>")
chamada antiga: assertEquals(i3, maxI.get(0, 0))
nova chamada: assertEquals(i3, maxI.get(0, 0), "Era esperado valores iguais, mas  i3 é diferente de " + result2136 + " <maxI.get(0, 0)>")
chamada antiga: assertEquals(i2, ic1.min())
nova chamada: assertEquals(i2, ic1.min(), "Era esperado valores iguais, mas  i2 é diferente de " + result2137 + " <ic1.min()>")
chamada antiga: assertEquals(i2, ic2.min())
nova chamada: assertEquals(i2, ic2.min(), "Era esperado valores iguais, mas  i2 é diferente de " + result2138 + " <ic2.min()>")
chamada antiga: assertEquals(i3, ic1.max())
nova chamada: assertEquals(i3, ic1.max(), "Era esperado valores iguais, mas  i3 é diferente de " + result2139 + " <ic1.max()>")
chamada antiga: assertEquals(i3, ic2.max())
nova chamada: assertEquals(i3, ic2.max(), "Era esperado valores iguais, mas  i3 é diferente de " + result2140 + " <ic2.max()>")
chamada antiga: assertEquals(7, result.rowCount())
nova chamada: assertEquals(7, result.rowCount(), "Era esperado valores iguais, mas  7 é diferente de " + result2141 + " <result.rowCount()>")
chamada antiga: assertEquals(13, result.rowCount())
nova chamada: assertEquals(13, result.rowCount(), "Era esperado valores iguais, mas  13 é diferente de " + result2142 + " <result.rowCount()>")
chamada antiga: assertEquals(13, result.rowCount())
nova chamada: assertEquals(13, result.rowCount(), "Era esperado valores iguais, mas  13 é diferente de " + result2143 + " <result.rowCount()>")
chamada antiga: assertEquals(13, result.rowCount())
nova chamada: assertEquals(13, result.rowCount(), "Era esperado valores iguais, mas  13 é diferente de " + result2144 + " <result.rowCount()>")
chamada antiga: assertTrue(anyTrue.summarize(bc))
nova chamada: assertTrue(anyTrue.summarize(bc), "Era esperado verdadeiro, mas " + result2145 + " <anyTrue.summarize(bc)> é falso")
chamada antiga: assertFalse(noneTrue.summarize(bc))
nova chamada: assertFalse(noneTrue.summarize(bc), "Era esperado falso, mas " + result2146 + " <noneTrue.summarize(bc)> é verdadeiro ")
chamada antiga: assertFalse(allTrue.summarize(bc))
nova chamada: assertFalse(allTrue.summarize(bc), "Era esperado falso, mas " + result2147 + " <allTrue.summarize(bc)> é verdadeiro ")
chamada antiga: assertEquals(0.25, proportionTrue.summarize(bc))
nova chamada: assertEquals(0.25, proportionTrue.summarize(bc), "Era esperado valores iguais, mas  0.25 é diferente de " + result2148 + " <proportionTrue.summarize(bc)>")
chamada antiga: assertEquals(0.75, proportionFalse.summarize(bc))
nova chamada: assertEquals(0.75, proportionFalse.summarize(bc), "Era esperado valores iguais, mas  0.75 é diferente de " + result2149 + " <proportionFalse.summarize(bc)>")
chamada antiga: assertEquals(2, summarized.rowCount())
nova chamada: assertEquals(2, summarized.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2150 + " <summarized.rowCount()>")
chamada antiga: assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("a")).rowCount())
nova chamada: assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("a")).rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2151 + " <summarized.where(summarized.stringColumn('group_key').isEqualTo('a')).rowCount()>")
chamada antiga: assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("b")).rowCount())
nova chamada: assertEquals(1, summarized.where(summarized.stringColumn("group_key").isEqualTo("b")).rowCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2152 + " <summarized.where(summarized.stringColumn('group_key').isEqualTo('b')).rowCount()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(1).type())
nova chamada: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(1).type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result2153 + " <summarized.where(summarized.stringColumn(0).isEqualTo('a')).column(1).type()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(2).type())
nova chamada: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("a")).column(2).type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result2154 + " <summarized.where(summarized.stringColumn(0).isEqualTo('a')).column(2).type()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(1).type())
nova chamada: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(1).type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result2155 + " <summarized.where(summarized.stringColumn(0).isEqualTo('b')).column(1).type()>")
chamada antiga: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(2).type())
nova chamada: assertEquals(ColumnType.DOUBLE, summarized.where(summarized.stringColumn(0).isEqualTo("b")).column(2).type(), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result2156 + " <summarized.where(summarized.stringColumn(0).isEqualTo('b')).column(2).type()>")
chamada antiga: assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(1).get(0))
nova chamada: assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(1).get(0), "Era esperado valores iguais, mas  0.25 é diferente de " + result2157 + " <summarized.where(summarized.stringColumn(0).isEqualTo('a')).doubleColumn(1).get(0)>")
chamada antiga: assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(2).get(0))
nova chamada: assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("a")).doubleColumn(2).get(0), "Era esperado valores iguais, mas  0.75 é diferente de " + result2158 + " <summarized.where(summarized.stringColumn(0).isEqualTo('a')).doubleColumn(2).get(0)>")
chamada antiga: assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(1).get(0))
nova chamada: assertEquals(0.75, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(1).get(0), "Era esperado valores iguais, mas  0.75 é diferente de " + result2159 + " <summarized.where(summarized.stringColumn(0).isEqualTo('b')).doubleColumn(1).get(0)>")
chamada antiga: assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(2).get(0))
nova chamada: assertEquals(0.25, summarized.where(summarized.stringColumn(0).isEqualTo("b")).doubleColumn(2).get(0), "Era esperado valores iguais, mas  0.25 é diferente de " + result2160 + " <summarized.where(summarized.stringColumn(0).isEqualTo('b')).doubleColumn(2).get(0)>")
chamada antiga: assertEquals(2, result.columnCount())
nova chamada: assertEquals(2, result.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2161 + " <result.columnCount()>")
chamada antiga: assertEquals(2, result.columnCount())
nova chamada: assertEquals(2, result.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2162 + " <result.columnCount()>")
chamada antiga: assertEquals(32, result.rowCount())
nova chamada: assertEquals(32, result.rowCount(), "Era esperado valores iguais, mas  32 é diferente de " + result2163 + " <result.rowCount()>")
chamada antiga: assertEquals(32, result.rowCount())
nova chamada: assertEquals(32, result.rowCount(), "Era esperado valores iguais, mas  32 é diferente de " + result2164 + " <result.rowCount()>")
chamada antiga: assertEquals(21, result.rowCount())
nova chamada: assertEquals(21, result.rowCount(), "Era esperado valores iguais, mas  21 é diferente de " + result2165 + " <result.rowCount()>")
chamada antiga: assertEquals(4, result.columnCount())
nova chamada: assertEquals(4, result.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2166 + " <result.columnCount()>")
chamada antiga: assertEquals(3, result.columnCount())
nova chamada: assertEquals(3, result.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2167 + " <result.columnCount()>")
chamada antiga: assertEquals("53.6", result.getUnformatted(0, 1))
nova chamada: assertEquals("53.6", result.getUnformatted(0, 1), "Era esperado valores iguais, mas  '53.6' é diferente de " + result2168 + " <result.getUnformatted(0, 1)>")
chamada antiga: assertEquals("2.5099800796022267", result.getUnformatted(0, 2))
nova chamada: assertEquals("2.5099800796022267", result.getUnformatted(0, 2), "Era esperado valores iguais, mas  '2.5099800796022267' é diferente de " + result2169 + " <result.getUnformatted(0, 2)>")
chamada antiga: assertTrue(avg > 2002 && avg < 2003)
nova chamada: assertTrue(avg > 2002 && avg < 2003, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(4, result.columnCount())
nova chamada: assertEquals(4, result.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2170 + " <result.columnCount()>")
chamada antiga: assertEquals("who", result.column(0).name())
nova chamada: assertEquals("who", result.column(0).name(), "Era esperado valores iguais, mas  'who' é diferente de " + result2171 + " <result.column(0).name()>")
chamada antiga: assertEquals(323, result.rowCount())
nova chamada: assertEquals(323, result.rowCount(), "Era esperado valores iguais, mas  323 é diferente de " + result2172 + " <result.rowCount()>")
chamada antiga: assertEquals("46.0", result.where(and(str("who").isEqualTo("fox"), date("date").isEqualTo(LocalDate.of(2001, 1, 24)))).getUnformatted(0, 2))
nova chamada: assertEquals("46.0", result.where(and(str("who").isEqualTo("fox"), date("date").isEqualTo(LocalDate.of(2001, 1, 24)))).getUnformatted(0, 2), "Era esperado valores iguais, mas  '46.0' é diferente de " + result2173 + " <result.where(and(str('who').isEqualTo('fox'), date('date').isEqualTo(LocalDate.of(2001, 1, 24)))).getUnformatted(0, 2)>")
chamada antiga: assertEquals(6, result.columnCount())
nova chamada: assertEquals(6, result.columnCount(), "Era esperado valores iguais, mas  6 é diferente de " + result2174 + " <result.columnCount()>")
chamada antiga: assertEquals("who", result.column(0).name())
nova chamada: assertEquals("who", result.column(0).name(), "Era esperado valores iguais, mas  'who' é diferente de " + result2175 + " <result.column(0).name()>")
chamada antiga: assertEquals("date year & month", result.column(1).name())
nova chamada: assertEquals("date year & month", result.column(1).name(), "Era esperado valores iguais, mas  'date year & month' é diferente de " + result2176 + " <result.column(1).name()>")
chamada antiga: assertTrue(pivot.columnNames().contains("who"))
nova chamada: assertTrue(pivot.columnNames().contains("who"), "Era esperado verdadeiro, mas " + result2177 + " <pivot.columnNames().contains('who')> é falso")
chamada antiga: assertTrue(pivot.columnNames().contains("2001"))
nova chamada: assertTrue(pivot.columnNames().contains("2001"), "Era esperado verdadeiro, mas " + result2178 + " <pivot.columnNames().contains('2001')> é falso")
chamada antiga: assertTrue(pivot.columnNames().contains("2002"))
nova chamada: assertTrue(pivot.columnNames().contains("2002"), "Era esperado verdadeiro, mas " + result2179 + " <pivot.columnNames().contains('2002')> é falso")
chamada antiga: assertTrue(pivot.columnNames().contains("2003"))
nova chamada: assertTrue(pivot.columnNames().contains("2003"), "Era esperado verdadeiro, mas " + result2180 + " <pivot.columnNames().contains('2003')> é falso")
chamada antiga: assertTrue(pivot.columnNames().contains("2004"))
nova chamada: assertTrue(pivot.columnNames().contains("2004"), "Era esperado verdadeiro, mas " + result2181 + " <pivot.columnNames().contains('2004')> é falso")
chamada antiga: assertEquals(6, pivot.rowCount())
nova chamada: assertEquals(6, pivot.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result2182 + " <pivot.rowCount()>")
chamada antiga: assertEquals(TextColumnType.instance(), types[0])
nova chamada: assertEquals(TextColumnType.instance(), types[0], "Era esperado valores iguais, mas " + result2183 + " <TextColumnType.instance()> é diferente de " + " types[0]")
chamada antiga: assertEquals(DateColumnType.instance(), types[1])
nova chamada: assertEquals(DateColumnType.instance(), types[1], "Era esperado valores iguais, mas " + result2184 + " <DateColumnType.instance()> é diferente de " + " types[1]")
chamada antiga: assertEquals(StringColumnType.instance(), types[2])
nova chamada: assertEquals(StringColumnType.instance(), types[2], "Era esperado valores iguais, mas " + result2185 + " <StringColumnType.instance()> é diferente de " + " types[2]")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(out.contains("          "))
nova chamada: assertTrue(out.contains("          "), "Era esperado verdadeiro, mas " + result2186 + " <out.contains('          ')> é falso")
chamada antiga: assertTrue(out.contains("2004-02-04"))
nova chamada: assertTrue(out.contains("2004-02-04"), "Era esperado verdadeiro, mas " + result2187 + " <out.contains('2004-02-04')> é falso")
chamada antiga: assertTrue(out.contains("53"))
nova chamada: assertTrue(out.contains("53"), "Era esperado verdadeiro, mas " + result2188 + " <out.contains('53')> é falso")
chamada antiga: assertTrue(out.contains("fox"))
nova chamada: assertTrue(out.contains("fox"), "Era esperado verdadeiro, mas " + result2189 + " <out.contains('fox')> é falso")
chamada antiga: assertTrue(out.contains("0.000003"))
nova chamada: assertTrue(out.contains("0.000003"), "Era esperado verdadeiro, mas " + result2190 + " <out.contains('0.000003')> é falso")
chamada antiga: assertTrue(out.contains("0.000003"))
nova chamada: assertTrue(out.contains("0.000003"), "Era esperado verdadeiro, mas " + result2191 + " <out.contains('0.000003')> é falso")
chamada antiga: assertTrue(out.contains("3.0E-6"))
nova chamada: assertTrue(out.contains("3.0E-6"), "Era esperado verdadeiro, mas " + result2192 + " <out.contains('3.0E-6')> é falso")
chamada antiga: assertTrue(out.contains("123.000003"))
nova chamada: assertTrue(out.contains("123.000003"), "Era esperado verdadeiro, mas " + result2193 + " <out.contains('123.000003')> é falso")
chamada antiga: assertTrue(out.contains("33.3333333333333"))
nova chamada: assertTrue(out.contains("33.3333333333333"), "Era esperado verdadeiro, mas " + result2194 + " <out.contains('33.3333333333333')> é falso")
chamada antiga: assertTrue(out.contains("9007199254740992"))
nova chamada: assertTrue(out.contains("9007199254740992"), "Era esperado verdadeiro, mas " + result2195 + " <out.contains('9007199254740992')> é falso")
chamada antiga: assertTrue(out.contains("900719925474099.1"))
nova chamada: assertTrue(out.contains("900719925474099.1"), "Era esperado verdadeiro, mas " + result2196 + " <out.contains('900719925474099.1')> é falso")
chamada antiga: assertTrue(out.contains("90071992547409.11"))
nova chamada: assertTrue(out.contains("90071992547409.11"), "Era esperado verdadeiro, mas " + result2197 + " <out.contains('90071992547409.11')> é falso")
chamada antiga: assertTrue(out.contains("33.33333206176758"))
nova chamada: assertTrue(out.contains("33.33333206176758"), "Era esperado verdadeiro, mas " + result2198 + " <out.contains('33.33333206176758')> é falso")
chamada antiga: assertTrue(out.contains("900719902720"))
nova chamada: assertTrue(out.contains("900719902720"), "Era esperado verdadeiro, mas " + result2199 + " <out.contains('900719902720')> é falso")
chamada antiga: assertTrue(out.contains("9007199232"))
nova chamada: assertTrue(out.contains("9007199232"), "Era esperado verdadeiro, mas " + result2200 + " <out.contains('9007199232')> é falso")
chamada antiga: assertTrue(out.contains("90071992"))
nova chamada: assertTrue(out.contains("90071992"), "Era esperado verdadeiro, mas " + result2201 + " <out.contains('90071992')> é falso")
chamada antiga: assertTrue(out.contains("90071.109375"))
nova chamada: assertTrue(out.contains("90071.109375"), "Era esperado verdadeiro, mas " + result2202 + " <out.contains('90071.109375')> é falso")
chamada antiga: assertEquals(ColumnType.DOUBLE, SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0))
nova chamada: assertEquals(ColumnType.DOUBLE, SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0), "Era esperado valores iguais, mas  ColumnType.DOUBLE é diferente de " + result2203 + " <SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0)>")
chamada antiga: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
nova chamada: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output, "Era esperado valores iguais, mas  'v,v2' + LINE_END + '1.0,1.0' + LINE_END + '2.0,2.0' + LINE_END + ',' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
nova chamada: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output, "Era esperado valores iguais, mas  'v,v2' + LINE_END + '1.0,1.0' + LINE_END + '2.0,2.0' + LINE_END + ',' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
nova chamada: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output, "Era esperado valores iguais, mas  'v,v2' + LINE_END + '1.0,1.0' + LINE_END + '2.0,2.0' + LINE_END + ',' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output)
nova chamada: assertEquals("v,v2" + LINE_END + "1.0,1.0" + LINE_END + "2.0,2.0" + LINE_END + "," + LINE_END + "", output, "Era esperado valores iguais, mas  'v,v2' + LINE_END + '1.0,1.0' + LINE_END + '2.0,2.0' + LINE_END + ',' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2204 + " <table.columnNames().toArray()>")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2205 + " <table.columnNames().toArray()>")
chamada antiga: assertEquals(4, table.columnCount())
nova chamada: assertEquals(4, table.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2206 + " <table.columnCount()>")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2207 + " <table.columnNames().toArray()>")
chamada antiga: assertEquals(4, table.columnCount())
nova chamada: assertEquals(4, table.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2208 + " <table.columnCount()>")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2209 + " <table.columnNames().toArray()>")
chamada antiga: assertArrayEquals(car_types, columnTypes)
nova chamada: assertArrayEquals(car_types, columnTypes, "Era esperado arrays iguais, mas  car_types é diferente de " + " columnTypes")
chamada antiga: assertEquals(2, t.shortColumn(0).countMissing())
nova chamada: assertEquals(2, t.shortColumn(0).countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result2210 + " <t.shortColumn(0).countMissing()>")
chamada antiga: assertEquals(2, t.stringColumn(1).countMissing())
nova chamada: assertEquals(2, t.stringColumn(1).countMissing(), "Era esperado valores iguais, mas  2 é diferente de " + result2211 + " <t.stringColumn(1).countMissing()>")
chamada antiga: assertEquals(1, t.stringColumn(2).countMissing())
nova chamada: assertEquals(1, t.stringColumn(2).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2212 + " <t.stringColumn(2).countMissing()>")
chamada antiga: assertEquals(3, t.stringColumn(3).countMissing())
nova chamada: assertEquals(3, t.stringColumn(3).countMissing(), "Era esperado valores iguais, mas  3 é diferente de " + result2213 + " <t.stringColumn(3).countMissing()>")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2214 + " <table.columnNames().toArray()>")
chamada antiga: assertArrayEquals(expected, table.columnNames().toArray())
nova chamada: assertArrayEquals(expected, table.columnNames().toArray(), "Era esperado arrays iguais, mas  expected é diferente de " + result2215 + " <table.columnNames().toArray()>")
chamada antiga: assertArrayEquals(expectedTypes, columnTypes)
nova chamada: assertArrayEquals(expectedTypes, columnTypes, "Era esperado arrays iguais, mas  expectedTypes é diferente de " + " columnTypes")
chamada antiga: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
nova chamada: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)), "Era esperado verdadeiro, mas " + result2216 + " <Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING))> é falso")
chamada antiga: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
nova chamada: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output, "Era esperado valores iguais, mas  'v1________v2________' + LINE_END + '1.0_______1.0_______' + LINE_END + '2.0_______2.0_______' + LINE_END + '____________________' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
nova chamada: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output, "Era esperado valores iguais, mas  'v1________v2________' + LINE_END + '1.0_______1.0_______' + LINE_END + '2.0_______2.0_______' + LINE_END + '____________________' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output)
nova chamada: assertEquals("v1________v2________" + LINE_END + "1.0_______1.0_______" + LINE_END + "2.0_______2.0_______" + LINE_END + "____________________" + LINE_END + "", output, "Era esperado valores iguais, mas  'v1________v2________' + LINE_END + '1.0_______1.0_______' + LINE_END + '2.0_______2.0_______' + LINE_END + '____________________' + LINE_END + '' é diferente de " + " output")
chamada antiga: assertTrue(options.header())
nova chamada: assertTrue(options.header(), "Era esperado verdadeiro, mas " + result2217 + " <options.header()> é falso")
chamada antiga: assertEquals("\r\n", format.getLineSeparatorString())
nova chamada: assertEquals("\r\n", format.getLineSeparatorString(), "Era esperado valores iguais, mas  '\r\n' é diferente de " + result2218 + " <format.getLineSeparatorString()>")
chamada antiga: assertEquals('~', format.getPadding())
nova chamada: assertEquals('~', format.getPadding(), "Era esperado valores iguais, mas  '~' é diferente de " + result2219 + " <format.getPadding()>")
chamada antiga: assertEquals('~', options.escapeChar())
nova chamada: assertEquals('~', options.escapeChar(), "Era esperado valores iguais, mas  '~' é diferente de " + result2220 + " <options.escapeChar()>")
chamada antiga: assertTrue(options.header())
nova chamada: assertTrue(options.header(), "Era esperado verdadeiro, mas " + result2221 + " <options.header()> é falso")
chamada antiga: assertEquals('"', options.quoteChar())
nova chamada: assertEquals('"', options.quoteChar(), "Era esperado valores iguais, mas  ''' é diferente de " + result2222 + " <options.quoteChar()>")
chamada antiga: assertEquals('.', options.separator())
nova chamada: assertEquals('.', options.separator(), "Era esperado valores iguais, mas  '.' é diferente de " + result2223 + " <options.separator()>")
chamada antiga: assertTrue(options.ignoreLeadingWhitespaces())
nova chamada: assertTrue(options.ignoreLeadingWhitespaces(), "Era esperado verdadeiro, mas " + result2224 + " <options.ignoreLeadingWhitespaces()> é falso")
chamada antiga: assertTrue(options.ignoreTrailingWhitespaces())
nova chamada: assertTrue(options.ignoreTrailingWhitespaces(), "Era esperado verdadeiro, mas " + result2225 + " <options.ignoreTrailingWhitespaces()> é falso")
chamada antiga: assertTrue(options.quoteAllFields())
nova chamada: assertTrue(options.quoteAllFields(), "Era esperado verdadeiro, mas " + result2226 + " <options.quoteAllFields()> é falso")
chamada antiga: assertTrue(settings.getQuoteAllFields())
nova chamada: assertTrue(settings.getQuoteAllFields(), "Era esperado verdadeiro, mas " + result2227 + " <settings.getQuoteAllFields()> é falso")
chamada antiga: assertEquals('~', settings.getFormat().getQuoteEscape())
nova chamada: assertEquals('~', settings.getFormat().getQuoteEscape(), "Era esperado valores iguais, mas  '~' é diferente de " + result2228 + " <settings.getFormat().getQuoteEscape()>")
chamada antiga: assertEquals("\r\n", settings.getFormat().getLineSeparatorString())
nova chamada: assertEquals("\r\n", settings.getFormat().getLineSeparatorString(), "Era esperado valores iguais, mas  '\r\n' é diferente de " + result2229 + " <settings.getFormat().getLineSeparatorString()>")
chamada antiga: assertEquals('"', settings.getFormat().getQuote())
nova chamada: assertEquals('"', settings.getFormat().getQuote(), "Era esperado valores iguais, mas  ''' é diferente de " + result2230 + " <settings.getFormat().getQuote()>")
chamada antiga: assertEquals('.', settings.getFormat().getDelimiter())
nova chamada: assertEquals('.', settings.getFormat().getDelimiter(), "Era esperado valores iguais, mas  '.' é diferente de " + result2231 + " <settings.getFormat().getDelimiter()>")
chamada antiga: assertEquals(options.ignoreLeadingWhitespaces(), settings.getIgnoreLeadingWhitespaces())
nova chamada: assertEquals(options.ignoreLeadingWhitespaces(), settings.getIgnoreLeadingWhitespaces(), "Era esperado valores iguais, mas " + result2232 + " <options.ignoreLeadingWhitespaces()> é diferente de " + result2233 + " <settings.getIgnoreLeadingWhitespaces()>")
chamada antiga: assertEquals(options.ignoreTrailingWhitespaces(), settings.getIgnoreTrailingWhitespaces())
nova chamada: assertEquals(options.ignoreTrailingWhitespaces(), settings.getIgnoreTrailingWhitespaces(), "Era esperado valores iguais, mas " + result2234 + " <options.ignoreTrailingWhitespaces()> é diferente de " + result2235 + " <settings.getIgnoreTrailingWhitespaces()>")
chamada antiga: assertEquals(1, t.get(0, 0))
nova chamada: assertEquals(1, t.get(0, 0), "Era esperado valores iguais, mas  1 é diferente de " + result2236 + " <t.get(0, 0)>")
chamada antiga: assertEquals(1, t.get(0, 0))
nova chamada: assertEquals(1, t.get(0, 0), "Era esperado valores iguais, mas  1 é diferente de " + result2237 + " <t.get(0, 0)>")
chamada antiga: assertEquals("colA,colB\na,1\nb,2\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("colA,colB\na,1\nb,2\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'colA,colB\na,1\nb,2\n' é diferente de " + result2238 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("\"colA\",\"colB\"\n\"a\",\"1\"\n\"b\",\"2\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("\"colA\",\"colB\"\n\"a\",\"1\"\n\"b\",\"2\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  '\'colA\',\'colB\'\n\'a\',\'1\'\n\'b\',\'2\'\n' é diferente de " + result2239 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("date,approval,who\n" + "\"Jan 21, 2004\",53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("date,approval,who\n" + "\"Jan 21, 2004\",53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'date,approval,who\n' + '\'Jan 21, 2004\',53,fox\n' é diferente de " + result2240 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("percents\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("percents\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'percents\n' + '32.30%\n' + '11.92%\n' + '100.00%\n' é diferente de " + result2241 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("percents\n" + "NA\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("percents\n" + "NA\n" + "32.30%\n" + "11.92%\n" + "100.00%\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'percents\n' + 'NA\n' + '32.30%\n' + '11.92%\n' + '100.00%\n' é diferente de " + result2242 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("dates\n" + "2021-03-Nov\n" + "WHAT?\n" + "2021-11-Mar\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("dates\n" + "2021-03-Nov\n" + "WHAT?\n" + "2021-11-Mar\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'dates\n' + '2021-03-Nov\n' + 'WHAT?\n' + '2021-11-Mar\n' é diferente de " + result2243 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("ints\n" + "\"102,123\"\n" + "2\n" + "\"-1,232,132\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("ints\n" + "\"102,123\"\n" + "2\n" + "\"-1,232,132\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'ints\n' + '\'102,123\'\n' + '2\n' + '\'-1,232,132\'\n' é diferente de " + result2244 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("ints\n" + "102123\n" + "2\n" + "NA\n" + "-1232132\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("ints\n" + "102123\n" + "2\n" + "NA\n" + "-1232132\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'ints\n' + '102123\n' + '2\n' + 'NA\n' + '-1232132\n' é diferente de " + result2245 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("floats\n" + "32.30\n" + "0.12\n" + "\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("floats\n" + "32.30\n" + "0.12\n" + "\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'floats\n' + '32.30\n' + '0.12\n' + '\n' + '\'1,001.00\'\n' é diferente de " + result2246 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("floats\n" + "32.30\n" + "0.12\n" + "NA\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("floats\n" + "32.30\n" + "0.12\n" + "NA\n" + "\"1,001.00\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'floats\n' + '32.30\n' + '0.12\n' + 'NA\n' + '\'1,001.00\'\n' é diferente de " + result2247 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("dates\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("dates\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'dates\n' + '\'Jan 1, 2011 - 04:30\'\n' é diferente de " + result2248 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("bools\n" + "Yes\n" + "No\n" + "IDK\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("bools\n" + "Yes\n" + "No\n" + "IDK\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'bools\n' + 'Yes\n' + 'No\n' + 'IDK\n' é diferente de " + result2249 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'strings\n' + '[hey]\n' + '[you]\n' + 'N/A\n' é diferente de " + result2250 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("strings\n" + "[hey]\n" + "[you]\n" + "N/A\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'strings\n' + '[hey]\n' + '[you]\n' + 'N/A\n' é diferente de " + result2251 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("ints\n" + "102\n" + "\"12,132\"\n" + "\"-1,234\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("ints\n" + "102\n" + "\"12,132\"\n" + "\"-1,234\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'ints\n' + '102\n' + '\'12,132\'\n' + '\'-1,234\'\n' é diferente de " + result2252 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("dates\n" + "\"Dec 3, 2007 - 10:15\"\n" + "WHAT?\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("dates\n" + "\"Dec 3, 2007 - 10:15\"\n" + "WHAT?\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'dates\n' + '\'Dec 3, 2007 - 10:15\'\n' + 'WHAT?\n' é diferente de " + result2253 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("doubles\n" + "32.32342489123\n" + "0.1192342224\n" + "\n" + "1001\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("doubles\n" + "32.32342489123\n" + "0.1192342224\n" + "\n" + "1001\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'doubles\n' + '32.32342489123\n' + '0.1192342224\n' + '\n' + '1001\n' é diferente de " + result2254 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("dt\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("dt\n" + "\"Jan 1, 2011 - 04:30\"\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'dt\n' + '\'Jan 1, 2011 - 04:30\'\n' é diferente de " + result2255 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals("date,popularity,pollster\n" + "2004-01-21,53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"))
nova chamada: assertEquals("date,popularity,pollster\n" + "2004-01-21,53,fox\n", writer.toString().replaceAll("\\r\\n", "\n"), "Era esperado valores iguais, mas  'date,popularity,pollster\n' + '2004-01-21,53,fox\n' é diferente de " + result2256 + " <writer.toString().replaceAll('\\r\\n', '\n')>")
chamada antiga: assertEquals(2, result.rowCount())
nova chamada: assertEquals(2, result.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2257 + " <result.rowCount()>")
chamada antiga: assertEquals("[stop_id, stop_name, stop_desc, stop_lat, stop_lon]", table.columnNames().toString())
nova chamada: assertEquals("[stop_id, stop_name, stop_desc, stop_lat, stop_lon]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[stop_id, stop_name, stop_desc, stop_lat, stop_lon]' é diferente de " + result2258 + " <table.columnNames().toString()>")
chamada antiga: assertEquals(table.column("WorldRegion").type(), TEXT)
nova chamada: assertEquals(table.column("WorldRegion").type(), TEXT, "Era esperado valores iguais, mas " + result2259 + " <table.column('WorldRegion').type()> é diferente de " + " TEXT")
chamada antiga: assertEquals(table2.column("WorldRegion").type(), STRING)
nova chamada: assertEquals(table2.column("WorldRegion").type(), STRING, "Era esperado valores iguais, mas " + result2260 + " <table2.column('WorldRegion').type()> é diferente de " + " STRING")
chamada antiga: assertEquals(4, table.columnCount())
nova chamada: assertEquals(4, table.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2261 + " <table.columnCount()>")
chamada antiga: assertEquals("[stop_id, stop_name, stop_lat, stop_lon]", table.columnNames().toString())
nova chamada: assertEquals("[stop_id, stop_name, stop_lat, stop_lon]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[stop_id, stop_name, stop_lat, stop_lon]' é diferente de " + result2262 + " <table.columnNames().toString()>")
chamada antiga: assertEquals("Col1", noDupes.columnNames().get(0))
nova chamada: assertEquals("Col1", noDupes.columnNames().get(0), "Era esperado valores iguais, mas  'Col1' é diferente de " + result2263 + " <noDupes.columnNames().get(0)>")
chamada antiga: assertEquals("Col2", noDupes.columnNames().get(1))
nova chamada: assertEquals("Col2", noDupes.columnNames().get(1), "Era esperado valores iguais, mas  'Col2' é diferente de " + result2264 + " <noDupes.columnNames().get(1)>")
chamada antiga: assertEquals("Col1", dupes.columnNames().get(0))
nova chamada: assertEquals("Col1", dupes.columnNames().get(0), "Era esperado valores iguais, mas  'Col1' é diferente de " + result2265 + " <dupes.columnNames().get(0)>")
chamada antiga: assertEquals("Col1-2", dupes.columnNames().get(1))
nova chamada: assertEquals("Col1-2", dupes.columnNames().get(1), "Era esperado valores iguais, mas  'Col1-2' é diferente de " + result2266 + " <dupes.columnNames().get(1)>")
chamada antiga: assertEquals(4, table.columnCount())
nova chamada: assertEquals(4, table.columnCount(), "Era esperado valores iguais, mas  4 é diferente de " + result2267 + " <table.columnCount()>")
chamada antiga: assertEquals("[C0, C1, C3, C4]", table.columnNames().toString())
nova chamada: assertEquals("[C0, C1, C3, C4]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[C0, C1, C3, C4]' é diferente de " + result2268 + " <table.columnNames().toString()>")
chamada antiga: assertEquals(323, table.rowCount())
nova chamada: assertEquals(323, table.rowCount(), "Era esperado valores iguais, mas  323 é diferente de " + result2269 + " <table.rowCount()>")
chamada antiga: assertEquals("[date, approval, who]", table.columnNames().toString())
nova chamada: assertEquals("[date, approval, who]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[date, approval, who]' é diferente de " + result2270 + " <table.columnNames().toString()>")
chamada antiga: assertEquals(323, table.rowCount())
nova chamada: assertEquals(323, table.rowCount(), "Era esperado valores iguais, mas  323 é diferente de " + result2271 + " <table.rowCount()>")
chamada antiga: assertEquals("[date, approval, who]", table.columnNames().toString())
nova chamada: assertEquals("[date, approval, who]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[date, approval, who]' é diferente de " + result2272 + " <table.columnNames().toString()>")
chamada antiga: assertArrayEquals(bus_types, columnTypes)
nova chamada: assertArrayEquals(bus_types, columnTypes, "Era esperado arrays iguais, mas  bus_types é diferente de " + " columnTypes")
chamada antiga: assertEquals(INTEGER, columnTypes[3])
nova chamada: assertEquals(INTEGER, columnTypes[3], "Era esperado valores iguais, mas  INTEGER é diferente de " + " columnTypes[3]")
chamada antiga: assertEquals(INTEGER, columnTypes[7])
nova chamada: assertEquals(INTEGER, columnTypes[7], "Era esperado valores iguais, mas  INTEGER é diferente de " + " columnTypes[7]")
chamada antiga: assertEquals(DOUBLE, columnTypes[3])
nova chamada: assertEquals(DOUBLE, columnTypes[3], "Era esperado valores iguais, mas  DOUBLE é diferente de " + " columnTypes[3]")
chamada antiga: assertEquals(DOUBLE, columnTypes[7])
nova chamada: assertEquals(DOUBLE, columnTypes[7], "Era esperado valores iguais, mas  DOUBLE é diferente de " + " columnTypes[7]")
chamada antiga: assertEquals(1530486314124L, column.get(0).toInstant(ZoneOffset.UTC).toEpochMilli())
nova chamada: assertEquals(1530486314124L, column.get(0).toInstant(ZoneOffset.UTC).toEpochMilli(), "Era esperado valores iguais, mas  1530486314124L é diferente de " + result2273 + " <column.get(0).toInstant(ZoneOffset.UTC).toEpochMilli()>")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE), actual, "Era esperado valores iguais, mas " + result2274 + " <Collections.singletonList(LOCAL_DATE)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual, "Era esperado valores iguais, mas " + result2275 + " <Collections.singletonList(LOCAL_DATE_TIME)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual, "Era esperado valores iguais, mas " + result2276 + " <Collections.singletonList(LOCAL_DATE_TIME)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual, "Era esperado valores iguais, mas " + result2277 + " <Collections.singletonList(LOCAL_DATE_TIME)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_TIME), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_TIME), actual, "Era esperado valores iguais, mas " + result2278 + " <Collections.singletonList(LOCAL_TIME)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE), actual, "Era esperado valores iguais, mas " + result2279 + " <Collections.singletonList(LOCAL_DATE)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE), actual, "Era esperado valores iguais, mas " + result2280 + " <Collections.singletonList(LOCAL_DATE)> é diferente de " + " actual")
chamada antiga: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual)
nova chamada: assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual, "Era esperado valores iguais, mas " + result2281 + " <Collections.singletonList(LOCAL_DATE_TIME)> é diferente de " + " actual")
chamada antiga: assertEquals(1, t.stringColumn(0).countMissing())
nova chamada: assertEquals(1, t.stringColumn(0).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2282 + " <t.stringColumn(0).countMissing()>")
chamada antiga: assertEquals(1, t.numberColumn(1).countMissing())
nova chamada: assertEquals(1, t.numberColumn(1).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2283 + " <t.numberColumn(1).countMissing()>")
chamada antiga: assertEquals(1, t.numberColumn(2).countMissing())
nova chamada: assertEquals(1, t.numberColumn(2).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2284 + " <t.numberColumn(2).countMissing()>")
chamada antiga: assertEquals(1, t.stringColumn(0).countMissing())
nova chamada: assertEquals(1, t.stringColumn(0).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2285 + " <t.stringColumn(0).countMissing()>")
chamada antiga: assertEquals(1, t.stringColumn(1).countMissing())
nova chamada: assertEquals(1, t.stringColumn(1).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2286 + " <t.stringColumn(1).countMissing()>")
chamada antiga: assertEquals(1, t.stringColumn(2).countMissing())
nova chamada: assertEquals(1, t.stringColumn(2).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2287 + " <t.stringColumn(2).countMissing()>")
chamada antiga: assertEquals(1, t.stringColumn(0).countMissing())
nova chamada: assertEquals(1, t.stringColumn(0).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2288 + " <t.stringColumn(0).countMissing()>")
chamada antiga: assertEquals(1, t.numberColumn(1).countMissing())
nova chamada: assertEquals(1, t.numberColumn(1).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2289 + " <t.numberColumn(1).countMissing()>")
chamada antiga: assertEquals(1, t.numberColumn(2).countMissing())
nova chamada: assertEquals(1, t.numberColumn(2).countMissing(), "Era esperado valores iguais, mas  1 é diferente de " + result2290 + " <t.numberColumn(2).countMissing()>")
chamada antiga: assertEquals(1, t.columnCount())
nova chamada: assertEquals(1, t.columnCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2291 + " <t.columnCount()>")
chamada antiga: assertEquals(6, t.rowCount())
nova chamada: assertEquals(6, t.rowCount(), "Era esperado valores iguais, mas  6 é diferente de " + result2292 + " <t.rowCount()>")
chamada antiga: assertEquals(2, t.columnCount())
nova chamada: assertEquals(2, t.columnCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2293 + " <t.columnCount()>")
chamada antiga: assertEquals(2, t.rowCount())
nova chamada: assertEquals(2, t.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2294 + " <t.rowCount()>")
chamada antiga: assertFalse(date.isEmpty())
nova chamada: assertFalse(date.isEmpty(), "Era esperado falso, mas " + result2295 + " <date.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(date.isEmpty())
nova chamada: assertFalse(date.isEmpty(), "Era esperado falso, mas " + result2296 + " <date.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(output, new CsvReader().printColumnTypes(CsvReadOptions.builder("../data/bush.csv").header(true).separator(',').locale(Locale.getDefault()).sample(true).build()))
nova chamada: assertEquals(output, new CsvReader().printColumnTypes(CsvReadOptions.builder("../data/bush.csv").header(true).separator(',').locale(Locale.getDefault()).sample(true).build()), "Era esperado valores iguais, mas  output é diferente de " + result2297 + " <new CsvReader().printColumnTypes(CsvReadOptions.builder('../data/bush.csv').header(true).separator(',').locale(Locale.getDefault()).sample(true).build())>")
chamada antiga: assertEquals(LOCAL_DATE, columnTypes[0])
nova chamada: assertEquals(LOCAL_DATE, columnTypes[0], "Era esperado valores iguais, mas  LOCAL_DATE é diferente de " + " columnTypes[0]")
chamada antiga: assertEquals(INTEGER, columnTypes[1])
nova chamada: assertEquals(INTEGER, columnTypes[1], "Era esperado valores iguais, mas  INTEGER é diferente de " + " columnTypes[1]")
chamada antiga: assertEquals(STRING, columnTypes[2])
nova chamada: assertEquals(STRING, columnTypes[2], "Era esperado valores iguais, mas  STRING é diferente de " + " columnTypes[2]")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, table.columnCount())
nova chamada: assertEquals(3, table.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2298 + " <table.columnCount()>")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, table.columnCount())
nova chamada: assertEquals(3, table.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2299 + " <table.columnCount()>")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, table.columnCount())
nova chamada: assertEquals(3, table.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2300 + " <table.columnCount()>")
chamada antiga: assertNotNull(table)
nova chamada: assertNotNull(table, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, table.columnCount())
nova chamada: assertEquals(3, table.columnCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2301 + " <table.columnCount()>")
chamada antiga: assertEquals(5, table.rowCount())
nova chamada: assertEquals(5, table.rowCount(), "Era esperado valores iguais, mas  5 é diferente de " + result2302 + " <table.rowCount()>")
chamada antiga: assertEquals(2, table.rowCount())
nova chamada: assertEquals(2, table.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2303 + " <table.rowCount()>")
chamada antiga: assertEquals(2, table.rowCount())
nova chamada: assertEquals(2, table.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2304 + " <table.rowCount()>")
chamada antiga: assertNotNull(test.summary())
nova chamada: assertNotNull(test.summary(), "Era esperado não nulo, mas " + result2305 + " <test.summary()> é nulo")
chamada antiga: assertNotNull(test.summary())
nova chamada: assertNotNull(test.summary(), "Era esperado não nulo, mas " + result2306 + " <test.summary()> é nulo")
chamada antiga: assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape())
nova chamada: assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape(), "Era esperado valores iguais, mas  'empty_file.csv: 0 rows X 0 cols' é diferente de " + result2307 + " <table1.shape()>")
chamada antiga: assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape())
nova chamada: assertEquals("empty_file.csv: 0 rows X 0 cols", table1.shape(), "Era esperado valores iguais, mas  'empty_file.csv: 0 rows X 0 cols' é diferente de " + result2308 + " <table1.shape()>")
chamada antiga: assertEquals("10001_columns.csv: 1 rows X 10001 cols", table1.shape())
nova chamada: assertEquals("10001_columns.csv: 1 rows X 10001 cols", table1.shape(), "Era esperado valores iguais, mas  '10001_columns.csv: 1 rows X 10001 cols' é diferente de " + result2309 + " <table1.shape()>")
chamada antiga: assertEquals("with_comments.csv: 3 rows X 3 cols", table1.shape())
nova chamada: assertEquals("with_comments.csv: 3 rows X 3 cols", table1.shape(), "Era esperado valores iguais, mas  'with_comments.csv: 3 rows X 3 cols' é diferente de " + result2310 + " <table1.shape()>")
chamada antiga: assertEquals(985, table.rowCount())
nova chamada: assertEquals(985, table.rowCount(), "Era esperado valores iguais, mas  985 é diferente de " + result2311 + " <table.rowCount()>")
chamada antiga: assertEquals(expectedSampleSize, table.rowCount())
nova chamada: assertEquals(expectedSampleSize, table.rowCount(), "Era esperado valores iguais, mas  expectedSampleSize é diferente de " + result2312 + " <table.rowCount()>")
chamada antiga: assertEquals("[recipe, mix, temp, y]", table.columnNames().toString())
nova chamada: assertEquals("[recipe, mix, temp, y]", table.columnNames().toString(), "Era esperado valores iguais, mas  '[recipe, mix, temp, y]' é diferente de " + result2313 + " <table.columnNames().toString()>")
chamada antiga: assertEquals(1, t.columnCount())
nova chamada: assertEquals(1, t.columnCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2314 + " <t.columnCount()>")
chamada antiga: assertEquals(expectedSampleSize, t.rowCount())
nova chamada: assertEquals(expectedSampleSize, t.rowCount(), "Era esperado valores iguais, mas  expectedSampleSize é diferente de " + result2315 + " <t.rowCount()>")
chamada antiga: assertEquals(INTEGER, t.column(0).type())
nova chamada: assertEquals(INTEGER, t.column(0).type(), "Era esperado valores iguais, mas  INTEGER é diferente de " + result2316 + " <t.column(0).type()>")
chamada antiga: assertEquals(true, values.containsAll(intValues))
nova chamada: assertEquals(true, values.containsAll(intValues), "Era esperado valores iguais, mas  true é diferente de " + result2317 + " <values.containsAll(intValues)>")
chamada antiga: assertEquals(table.get(0, 0), out.get(0, 0))
nova chamada: assertEquals(table.get(0, 0), out.get(0, 0), "Era esperado valores iguais, mas " + result2318 + " <table.get(0, 0)> é diferente de " + result2319 + " <out.get(0, 0)>")
chamada antiga: assertEquals(DoubleColumnType.instance(), table.typeArray()[1])
nova chamada: assertEquals(DoubleColumnType.instance(), table.typeArray()[1], "Era esperado valores iguais, mas " + result2320 + " <DoubleColumnType.instance()> é diferente de " + " table.typeArray()[1]")
chamada antiga: assertEquals(DoubleColumnType.instance(), table.typeArray()[2])
nova chamada: assertEquals(DoubleColumnType.instance(), table.typeArray()[2], "Era esperado valores iguais, mas " + result2321 + " <DoubleColumnType.instance()> é diferente de " + " table.typeArray()[2]")
chamada antiga: assertEquals("0.0132", column.getString(0))
nova chamada: assertEquals("0.0132", column.getString(0), "Era esperado valores iguais, mas  '0.0132' é diferente de " + result2322 + " <column.getString(0)>")
chamada antiga: assertEquals("0.32768", column.getString(1))
nova chamada: assertEquals("0.32768", column.getString(1), "Era esperado valores iguais, mas  '0.32768' é diferente de " + result2323 + " <column.getString(1)>")
chamada antiga: assertEquals("1", column.getString(2))
nova chamada: assertEquals("1", column.getString(2), "Era esperado valores iguais, mas  '1' é diferente de " + result2324 + " <column.getString(2)>")
chamada antiga: assertEquals("1.32%", column.getString(0))
nova chamada: assertEquals("1.32%", column.getString(0), "Era esperado valores iguais, mas  '1.32%' é diferente de " + result2325 + " <column.getString(0)>")
chamada antiga: assertEquals("32.77%", column.getString(1))
nova chamada: assertEquals("32.77%", column.getString(1), "Era esperado valores iguais, mas  '32.77%' é diferente de " + result2326 + " <column.getString(1)>")
chamada antiga: assertEquals("100.00%", column.getString(2))
nova chamada: assertEquals("100.00%", column.getString(2), "Era esperado valores iguais, mas  '100.00%' é diferente de " + result2327 + " <column.getString(2)>")
chamada antiga: assertEquals(2, table.rowCount())
nova chamada: assertEquals(2, table.rowCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2328 + " <table.rowCount()>")
chamada antiga: assertArrayEquals(expectedTypes, columnTypes)
nova chamada: assertArrayEquals(expectedTypes, columnTypes, "Era esperado arrays iguais, mas  expectedTypes é diferente de " + " columnTypes")
chamada antiga: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
nova chamada: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)), "Era esperado verdadeiro, mas " + result2329 + " <Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING))> é falso")
chamada antiga: assertArrayEquals(bus_types, columnTypes)
nova chamada: assertArrayEquals(bus_types, columnTypes, "Era esperado arrays iguais, mas  bus_types é diferente de " + " columnTypes")
chamada antiga: assertArrayEquals(bus_types, columnTypes)
nova chamada: assertArrayEquals(bus_types, columnTypes, "Era esperado arrays iguais, mas  bus_types é diferente de " + " columnTypes")
chamada antiga: assertArrayEquals(new ColumnType[] { SHORT, STRING }, columnTypes)
nova chamada: assertArrayEquals(new ColumnType[] { SHORT, STRING }, columnTypes, "Era esperado arrays iguais, mas  new ColumnType[] { SHORT, STRING } é diferente de " + " columnTypes")
chamada antiga: assertEquals("ISO-8859-1", Source.getCharSet(Paths.get("../data", "urb_cpop1_1_Data.csv").toFile()).name())
nova chamada: assertEquals("ISO-8859-1", Source.getCharSet(Paths.get("../data", "urb_cpop1_1_Data.csv").toFile()).name(), "Era esperado valores iguais, mas  'ISO-8859-1' é diferente de " + result2330 + " <Source.getCharSet(Paths.get('../data', 'urb_cpop1_1_Data.csv').toFile()).name()>")
chamada antiga: assertEquals(expected.columnNames(), actual.columnNames())
nova chamada: assertEquals(expected.columnNames(), actual.columnNames(), "Era esperado valores iguais, mas " + result2331 + " <expected.columnNames()> é diferente de " + result2332 + " <actual.columnNames()>")
chamada antiga: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
nova chamada: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList(), "Era esperado valores iguais, mas " + result2333 + " <expected.stringColumn(0).asList()> é diferente de " + result2334 + " <actual.stringColumn(0).asList()>")
chamada antiga: assertEquals(expected.columnNames(), actual.columnNames())
nova chamada: assertEquals(expected.columnNames(), actual.columnNames(), "Era esperado valores iguais, mas " + result2335 + " <expected.columnNames()> é diferente de " + result2336 + " <actual.columnNames()>")
chamada antiga: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
nova chamada: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList(), "Era esperado valores iguais, mas " + result2337 + " <expected.stringColumn(0).asList()> é diferente de " + result2338 + " <actual.stringColumn(0).asList()>")
chamada antiga: assertEquals(expected.columnNames(), actual.columnNames())
nova chamada: assertEquals(expected.columnNames(), actual.columnNames(), "Era esperado valores iguais, mas " + result2339 + " <expected.columnNames()> é diferente de " + result2340 + " <actual.columnNames()>")
chamada antiga: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList())
nova chamada: assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList(), "Era esperado valores iguais, mas " + result2341 + " <expected.stringColumn(0).asList()> é diferente de " + result2342 + " <actual.stringColumn(0).asList()>")
chamada antiga: assertTrue(thrown.getMessage().contains("No reader registered for mime-type application/octet-stream"))
nova chamada: assertTrue(thrown.getMessage().contains("No reader registered for mime-type application/octet-stream"), "Era esperado verdadeiro, mas " + result2343 + " <thrown.getMessage().contains('No reader registered for mime-type application/octet-stream')> é falso")
chamada antiga: assertNotNull(t)
nova chamada: assertNotNull(t, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("Column prefix: < is unknown.", thrown.getMessage())
nova chamada: assertEquals("Column prefix: < is unknown.", thrown.getMessage(), "Era esperado valores iguais, mas  'Column prefix:  is unknown.' é diferente de " + result2344 + " <thrown.getMessage()>")
chamada antiga: assertEquals("Column col2 does not exist in table t", thrown.getMessage())
nova chamada: assertEquals("Column col2 does not exist in table t", thrown.getMessage(), "Era esperado valores iguais, mas  'Column col2 does not exist in table t' é diferente de " + result2345 + " <thrown.getMessage()>")
chamada antiga: assertEquals("Unrecognized Column: '>col2'", thrown.getMessage())
nova chamada: assertEquals("Unrecognized Column: '>col2'", thrown.getMessage(), "Era esperado valores iguais, mas  'Unrecognized Column: 'col2'' é diferente de " + result2346 + " <thrown.getMessage()>")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx1)
nova chamada: assertEquals(fromCol, fromIdx1, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx1")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx1)
nova chamada: assertEquals(fromCol, fromIdx1, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx1")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertFalse(fromIdx.isEmpty())
nova chamada: assertFalse(fromIdx.isEmpty(), "Era esperado falso, mas " + result2347 + " <fromIdx.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(fromCol, fromIdx)
nova chamada: assertEquals(fromCol, fromIdx, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx")
chamada antiga: assertEquals(fromCol, fromIdx1)
nova chamada: assertEquals(fromCol, fromIdx1, "Era esperado valores iguais, mas  fromCol é diferente de " + " fromIdx1")
chamada antiga: assertEquals("246", StringUtils.removeZeroDecimal("246.0"))
nova chamada: assertEquals("246", StringUtils.removeZeroDecimal("246.0"), "Era esperado valores iguais, mas  '246' é diferente de " + result2348 + " <StringUtils.removeZeroDecimal('246.0')>")
chamada antiga: assertEquals("146", StringUtils.removeZeroDecimal("146.00"))
nova chamada: assertEquals("146", StringUtils.removeZeroDecimal("146.00"), "Era esperado valores iguais, mas  '146' é diferente de " + result2349 + " <StringUtils.removeZeroDecimal('146.00')>")
chamada antiga: assertEquals("357", StringUtils.removeZeroDecimal("357.000"))
nova chamada: assertEquals("357", StringUtils.removeZeroDecimal("357.000"), "Era esperado valores iguais, mas  '357' é diferente de " + result2350 + " <StringUtils.removeZeroDecimal('357.000')>")
chamada antiga: assertEquals("347", StringUtils.removeZeroDecimal("347.0000"))
nova chamada: assertEquals("347", StringUtils.removeZeroDecimal("347.0000"), "Era esperado valores iguais, mas  '347' é diferente de " + result2351 + " <StringUtils.removeZeroDecimal('347.0000')>")
chamada antiga: assertEquals("468", StringUtils.removeZeroDecimal("468"))
nova chamada: assertEquals("468", StringUtils.removeZeroDecimal("468"), "Era esperado valores iguais, mas  '468' é diferente de " + result2352 + " <StringUtils.removeZeroDecimal('468')>")
chamada antiga: assertEquals("24", StringUtils.removeZeroDecimal("24"))
nova chamada: assertEquals("24", StringUtils.removeZeroDecimal("24"), "Era esperado valores iguais, mas  '24' é diferente de " + result2353 + " <StringUtils.removeZeroDecimal('24')>")
chamada antiga: assertEquals("468.02", StringUtils.removeZeroDecimal("468.02"))
nova chamada: assertEquals("468.02", StringUtils.removeZeroDecimal("468.02"), "Era esperado valores iguais, mas  '468.02' é diferente de " + result2354 + " <StringUtils.removeZeroDecimal('468.02')>")
chamada antiga: assertEquals("246.004", StringUtils.removeZeroDecimal("246.004"))
nova chamada: assertEquals("246.004", StringUtils.removeZeroDecimal("246.004"), "Era esperado valores iguais, mas  '246.004' é diferente de " + result2355 + " <StringUtils.removeZeroDecimal('246.004')>")
chamada antiga: assertEquals("246.4000", StringUtils.removeZeroDecimal("246.4000"))
nova chamada: assertEquals("246.4000", StringUtils.removeZeroDecimal("246.4000"), "Era esperado valores iguais, mas  '246.4000' é diferente de " + result2356 + " <StringUtils.removeZeroDecimal('246.4000')>")
chamada antiga: assertEquals("", StringUtils.removeZeroDecimal(""))
nova chamada: assertEquals("", StringUtils.removeZeroDecimal(""), "Era esperado valores iguais, mas  '' é diferente de " + result2357 + " <StringUtils.removeZeroDecimal('')>")
chamada antiga: assertNull(StringUtils.removeZeroDecimal(null))
nova chamada: assertNull(StringUtils.removeZeroDecimal(null), "Era esperado nulo, mas " + result2358 + " <StringUtils.removeZeroDecimal(null)> não é nulo")
chamada antiga: assertTrue(Arrays.equals(array, DoubleArrays.toN(3)))
nova chamada: assertTrue(Arrays.equals(array, DoubleArrays.toN(3)), "Era esperado verdadeiro, mas " + result2359 + " <Arrays.equals(array, DoubleArrays.toN(3))> é falso")
chamada antiga: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
nova chamada: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""), "Era esperado valores iguais, mas " + result2360 + " <table.column('mixed').asList()> é diferente de " + result2361 + " <Lists.newArrayList('123.00', 'abc', '')>")
chamada antiga: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
nova chamada: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""), "Era esperado valores iguais, mas " + result2362 + " <table.column('mixed2').asList()> é diferente de " + result2363 + " <Lists.newArrayList('abc', '123', '')>")
chamada antiga: assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234))
nova chamada: assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234), "Era esperado valores iguais, mas " + result2364 + " <table.column('intcol2').asList()> é diferente de " + result2365 + " <Lists.newArrayList(null, 1234, 1234)>")
chamada antiga: assertArrayEquals(columnTypes, new ColumnType[] { STRING, DOUBLE, LONG, LONG, DOUBLE, BOOLEAN, LOCAL_DATE_TIME, FLOAT, STRING, STRING, INTEGER })
nova chamada: assertArrayEquals(columnTypes, new ColumnType[] { STRING, DOUBLE, LONG, LONG, DOUBLE, BOOLEAN, LOCAL_DATE_TIME, FLOAT, STRING, STRING, INTEGER }, "Era esperado arrays iguais, mas  columnTypes é diferente de " + " new ColumnType[] { STRING, DOUBLE, LONG, LONG, DOUBLE, BOOLEAN, LOCAL_DATE_TIME, FLOAT, STRING, STRING, INTEGER }")
chamada antiga: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
nova chamada: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""), "Era esperado valores iguais, mas " + result2366 + " <table.column('mixed').asList()> é diferente de " + result2367 + " <Lists.newArrayList('123.00', 'abc', '')>")
chamada antiga: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
nova chamada: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""), "Era esperado valores iguais, mas " + result2368 + " <table.column('mixed2').asList()> é diferente de " + result2369 + " <Lists.newArrayList('abc', '123', '')>")
chamada antiga: assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234))
nova chamada: assertEquals(table.column("intcol2").asList(), Lists.newArrayList(null, 1234, 1234), "Era esperado valores iguais, mas " + result2370 + " <table.column('intcol2').asList()> é diferente de " + result2371 + " <Lists.newArrayList(null, 1234, 1234)>")
chamada antiga: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)))
nova chamada: assertTrue(Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING)), "Era esperado verdadeiro, mas " + result2372 + " <Arrays.stream(columnTypes).allMatch(columnType -> columnType.equals(STRING))> é falso")
chamada antiga: assertEquals(table.column("stringcol").asList(), Lists.newArrayList("Hallvard", "Marit", "Quentin"))
nova chamada: assertEquals(table.column("stringcol").asList(), Lists.newArrayList("Hallvard", "Marit", "Quentin"), "Era esperado valores iguais, mas " + result2373 + " <table.column('stringcol').asList()> é diferente de " + result2374 + " <Lists.newArrayList('Hallvard', 'Marit', 'Quentin')>")
chamada antiga: assertEquals(table.column("intcol").asList(), Lists.newArrayList("12345678", "12345679", "12345679"))
nova chamada: assertEquals(table.column("intcol").asList(), Lists.newArrayList("12345678", "12345679", "12345679"), "Era esperado valores iguais, mas " + result2375 + " <table.column('intcol').asList()> é diferente de " + result2376 + " <Lists.newArrayList('12345678', '12345679', '12345679')>")
chamada antiga: assertEquals(table.column("longcol").asList(), Lists.newArrayList("1.23457E+10", "1.23457E+10", "1.23457E+10"))
nova chamada: assertEquals(table.column("longcol").asList(), Lists.newArrayList("1.23457E+10", "1.23457E+10", "1.23457E+10"), "Era esperado valores iguais, mas " + result2377 + " <table.column('longcol').asList()> é diferente de " + result2378 + " <Lists.newArrayList('1.23457E+10', '1.23457E+10', '1.23457E+10')>")
chamada antiga: assertEquals(table.column("doublecol").asList(), Lists.newArrayList("12.34", "13.35", "13.35"))
nova chamada: assertEquals(table.column("doublecol").asList(), Lists.newArrayList("12.34", "13.35", "13.35"), "Era esperado valores iguais, mas " + result2379 + " <table.column('doublecol').asList()> é diferente de " + result2380 + " <Lists.newArrayList('12.34', '13.35', '13.35')>")
chamada antiga: assertEquals(table.column("booleancol").asList(), Lists.newArrayList("TRUE", "FALSE", "FALSE"))
nova chamada: assertEquals(table.column("booleancol").asList(), Lists.newArrayList("TRUE", "FALSE", "FALSE"), "Era esperado valores iguais, mas " + result2381 + " <table.column('booleancol').asList()> é diferente de " + result2382 + " <Lists.newArrayList('TRUE', 'FALSE', 'FALSE')>")
chamada antiga: assertEquals(table.column("datecol").asList(), Lists.newArrayList("22/02/2019 20:54:09", "23/03/2020 21:55:10", "23/03/2020 21:55:10"))
nova chamada: assertEquals(table.column("datecol").asList(), Lists.newArrayList("22/02/2019 20:54:09", "23/03/2020 21:55:10", "23/03/2020 21:55:10"), "Era esperado valores iguais, mas " + result2383 + " <table.column('datecol').asList()> é diferente de " + result2384 + " <Lists.newArrayList('22/02/2019 20:54:09', '23/03/2020 21:55:10', '23/03/2020 21:55:10')>")
chamada antiga: assertEquals(table.column("formulacol").asList(), Lists.newArrayList("135.34", "137.35", "138.35"))
nova chamada: assertEquals(table.column("formulacol").asList(), Lists.newArrayList("135.34", "137.35", "138.35"), "Era esperado valores iguais, mas " + result2385 + " <table.column('formulacol').asList()> é diferente de " + result2386 + " <Lists.newArrayList('135.34', '137.35', '138.35')>")
chamada antiga: assertEquals(table.column("empty").asList(), Lists.newArrayList("", "", ""))
nova chamada: assertEquals(table.column("empty").asList(), Lists.newArrayList("", "", ""), "Era esperado valores iguais, mas " + result2387 + " <table.column('empty').asList()> é diferente de " + result2388 + " <Lists.newArrayList('', '', '')>")
chamada antiga: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""))
nova chamada: assertEquals(table.column("mixed").asList(), Lists.newArrayList("123.00", "abc", ""), "Era esperado valores iguais, mas " + result2389 + " <table.column('mixed').asList()> é diferente de " + result2390 + " <Lists.newArrayList('123.00', 'abc', '')>")
chamada antiga: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""))
nova chamada: assertEquals(table.column("mixed2").asList(), Lists.newArrayList("abc", "123", ""), "Era esperado valores iguais, mas " + result2391 + " <table.column('mixed2').asList()> é diferente de " + result2392 + " <Lists.newArrayList('abc', '123', '')>")
chamada antiga: assertEquals(table.column("intcol2").asList(), Lists.newArrayList("", "1234", "1234"))
nova chamada: assertEquals(table.column("intcol2").asList(), Lists.newArrayList("", "1234", "1234"), "Era esperado valores iguais, mas " + result2393 + " <table.column('intcol2').asList()> é diferente de " + result2394 + " <Lists.newArrayList('', '1234', '1234')>")
Total asserts: 2899
Asserts sem descrição: 2548
Asserts com descrição: 351
Assertion Roulette: 2159
