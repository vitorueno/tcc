Antes do refactor: 


Projeto: /home/vitor-otto/opensource/fastjson2-2.0.24

Total asserts: 20392
Asserts sem descrição: 18920
Asserts com descrição: 1472
Assertion Roulette: 16241

Após o refactor: 


Projeto: /home/vitor-otto/opensource/fastjson2-2.0.24

chamada antiga: assertEquals("sun.misc.Unsafe", c.getCanonicalName())
nova chamada: assertEquals("Era esperado valores iguais, mas  'sun.misc.Unsafe' é diferente de " + result0 + " <c.getCanonicalName()>", "sun.misc.Unsafe", c.getCanonicalName())
chamada antiga: assertEquals(1, user.id)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " user.id", 1, user.id)
chamada antiga: assertEquals("kraity", user.name)
nova chamada: assertEquals("Era esperado valores iguais, mas  'kraity' é diferente de " + " user.name", "kraity", user.name)
chamada antiga: assertEquals(1, user.id)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " user.id", 1, user.id)
chamada antiga: assertEquals("kraity", user.name)
nova chamada: assertEquals("Era esperado valores iguais, mas  'kraity' é diferente de " + " user.name", "kraity", user.name)
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals("Era esperado valores iguais, mas  123 é diferente de " + " bean.value", 123, bean.value)
chamada antiga: assertSame(jsonFactory, objectMapper.getFactory())
nova chamada: assertSame(jsonFactory, objectMapper.getFactory(), "Era esperado objetos iguais, mas  jsonFactory é diferente de " + result1 + " <objectMapper.getFactory()>")
chamada antiga: assertEquals(3, products.size())
nova chamada: assertEquals(3, products.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2 + " <products.size()>")
chamada antiga: assertEquals(1, products.get(0).id)
nova chamada: assertEquals(1, products.get(0).id, "Era esperado valores iguais, mas  1 é diferente de " + " products.get(0).id")
chamada antiga: assertEquals(2, products.get(1).id)
nova chamada: assertEquals(2, products.get(1).id, "Era esperado valores iguais, mas  2 é diferente de " + " products.get(1).id")
chamada antiga: assertEquals(3, products.get(2).id)
nova chamada: assertEquals(3, products.get(2).id, "Era esperado valores iguais, mas  3 é diferente de " + " products.get(2).id")
chamada antiga: assertTrue(SerializationFeature.values().length > 0)
nova chamada: assertTrue(SerializationFeature.values().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(new InvalidDefinitionException(null).getType())
nova chamada: assertNull(new InvalidDefinitionException(null).getType(), "Era esperado nulo, mas " + result3 + " <new InvalidDefinitionException(null).getType()> não é nulo")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals(instantCsv, writer.writeValueAsString(bean))
nova chamada: assertEquals(instantCsv, writer.writeValueAsString(bean), "Era esperado valores iguais, mas  instantCsv é diferente de " + result4 + " <writer.writeValueAsString(bean)>")
chamada antiga: assertEquals(bean.data, bean1.data)
nova chamada: assertEquals(bean.data, bean1.data, "Era esperado valores iguais, mas  bean.data é diferente de " + " bean1.data")
chamada antiga: assertEquals(instantCsv, str)
nova chamada: assertEquals(instantCsv, str, "Era esperado valores iguais, mas  instantCsv é diferente de " + " str")
chamada antiga: assertEquals(bean.data, bean1.data)
nova chamada: assertEquals(bean.data, bean1.data, "Era esperado valores iguais, mas  bean.data é diferente de " + " bean1.data")
chamada antiga: assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))))
nova chamada: assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))), "Era esperado valores iguais, mas  'value\n' é diferente de " + result5 + " <writer.writeValueAsString(new TypeWithOptional(Optional.of('value')))>")
chamada antiga: assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())))
nova chamada: assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())), "Era esperado valores iguais, mas  '\n' é diferente de " + result6 + " <writer.writeValueAsString(new TypeWithOptional(Optional.empty()))>")
chamada antiga: assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"))
nova chamada: assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"), "Era esperado verdadeiro, mas " + result7 + " <(reader.readValue('value\n', TypeWithOptional.class).data).get().contains('value')> é falso")
chamada antiga: assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"))
nova chamada: assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"), "Era esperado verdadeiro, mas " + result8 + " <(reader.readValue('null\n', TypeWithOptional.class).data).get().contains('null')> é falso")
chamada antiga: assertEquals(instantCsv, str)
nova chamada: assertEquals(instantCsv, str, "Era esperado valores iguais, mas  instantCsv é diferente de " + " str")
chamada antiga: assertEquals(bean.data, bean1.data)
nova chamada: assertEquals(bean.data, bean1.data, "Era esperado valores iguais, mas  bean.data é diferente de " + " bean1.data")
chamada antiga: assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))))
nova chamada: assertEquals("value\n", writer.writeValueAsString(new TypeWithOptional(Optional.of("value"))), "Era esperado valores iguais, mas  'value\n' é diferente de " + result9 + " <writer.writeValueAsString(new TypeWithOptional(Optional.of('value')))>")
chamada antiga: assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())))
nova chamada: assertEquals("\n", writer.writeValueAsString(new TypeWithOptional(Optional.empty())), "Era esperado valores iguais, mas  '\n' é diferente de " + result10 + " <writer.writeValueAsString(new TypeWithOptional(Optional.empty()))>")
chamada antiga: assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"))
nova chamada: assertTrue((reader.readValue("value\n", TypeWithOptional.class).data).get().contains("value"), "Era esperado verdadeiro, mas " + result11 + " <(reader.readValue('value\n', TypeWithOptional.class).data).get().contains('value')> é falso")
chamada antiga: assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"))
nova chamada: assertTrue((reader.readValue("null\n", TypeWithOptional.class).data).get().contains("null"), "Era esperado verdadeiro, mas " + result12 + " <(reader.readValue('null\n', TypeWithOptional.class).data).get().contains('null')> é falso")
chamada antiga: assertTrue((reader.readValue("\n", TypeWithOptional.class).data).get().isEmpty())
nova chamada: assertTrue((reader.readValue("\n", TypeWithOptional.class).data).get().isEmpty(), "Era esperado verdadeiro, mas " + result13 + " <(reader.readValue('\n', TypeWithOptional.class).data).get().isEmpty()> é falso")
chamada antiga: assertNotNull(entry)
nova chamada: assertNotNull(entry, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, entry.getJobResult().id)
nova chamada: assertEquals(123, entry.getJobResult().id, "Era esperado valores iguais, mas  123 é diferente de " + " entry.getJobResult().id")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals(123, bean1.id)
nova chamada: assertEquals(123, bean1.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean1.id")
chamada antiga: assertEquals(123, bean2.id)
nova chamada: assertEquals(123, bean2.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean2.id")
chamada antiga: assertEquals(123, bean3.id)
nova chamada: assertEquals(123, bean3.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean3.id")
chamada antiga: assertEquals(MapperFeature.USE_ANNOTATIONS.getMask(), MapperFeature.USE_ANNOTATIONS.getLongMask())
nova chamada: assertEquals(MapperFeature.USE_ANNOTATIONS.getMask(), MapperFeature.USE_ANNOTATIONS.getLongMask(), "Era esperado valores iguais, mas " + result14 + " <MapperFeature.USE_ANNOTATIONS.getMask()> é diferente de " + result15 + " <MapperFeature.USE_ANNOTATIONS.getLongMask()>")
chamada antiga: assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getMask()))
nova chamada: assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getMask()), "Era esperado verdadeiro, mas " + result16 + " <MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getMask())> é falso")
chamada antiga: assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getLongMask()))
nova chamada: assertTrue(MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getLongMask()), "Era esperado verdadeiro, mas " + result17 + " <MapperFeature.USE_ANNOTATIONS.enabledIn(MapperFeature.USE_ANNOTATIONS.getLongMask())> é falso")
chamada antiga: assertEquals("{\"color\":\"yellow\",\"type\":\"renault\"}", json)
nova chamada: assertEquals("{\"color\":\"yellow\",\"type\":\"renault\"}", json, "Era esperado valores iguais, mas  '{\'color\':\'yellow\',\'type\':\'renault\'}' é diferente de " + " json")
chamada antiga: assertEquals(car.color, car1.color)
nova chamada: assertEquals(car.color, car1.color, "Era esperado valores iguais, mas  car.color é diferente de " + " car1.color")
chamada antiga: assertEquals(car.type, car1.type)
nova chamada: assertEquals(car.type, car1.type, "Era esperado valores iguais, mas  car.type é diferente de " + " car1.type")
chamada antiga: assertEquals("Black", map.get("color"))
nova chamada: assertEquals("Black", map.get("color"), "Era esperado valores iguais, mas  'Black' é diferente de " + result18 + " <map.get('color')>")
chamada antiga: assertEquals(bean.id, node.get("id").asInt())
nova chamada: assertEquals(bean.id, node.get("id").asInt(), "Era esperado valores iguais, mas  bean.id é diferente de " + result19 + " <node.get('id').asInt()>")
chamada antiga: assertEquals(bean.name, node.get("name").asText())
nova chamada: assertEquals(bean.name, node.get("name").asText(), "Era esperado valores iguais, mas  bean.name é diferente de " + result20 + " <node.get('name').asText()>")
chamada antiga: assertEquals(123, mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt())
nova chamada: assertEquals(123, mapper.readTree(new ByteArrayInputStream(str.getBytes())).get("id").asInt(), "Era esperado valores iguais, mas  123 é diferente de " + result21 + " <mapper.readTree(new ByteArrayInputStream(str.getBytes())).get('id').asInt()>")
chamada antiga: assertEquals(123, mapper.readTree(new StringReader(str)).get("id").asInt())
nova chamada: assertEquals(123, mapper.readTree(new StringReader(str)).get("id").asInt(), "Era esperado valores iguais, mas  123 é diferente de " + result22 + " <mapper.readTree(new StringReader(str)).get('id').asInt()>")
chamada antiga: assertEquals(123, mapper.readTree(str).get("id").asInt())
nova chamada: assertEquals(123, mapper.readTree(str).get("id").asInt(), "Era esperado valores iguais, mas  123 é diferente de " + result23 + " <mapper.readTree(str).get('id').asInt()>")
chamada antiga: assertEquals(123, ((JsonNode) mapper.readTree(mapper.factory.createParser(str))).get("id").asInt())
nova chamada: assertEquals(123, ((JsonNode) mapper.readTree(mapper.factory.createParser(str))).get("id").asInt(), "Era esperado valores iguais, mas  123 é diferente de " + result24 + " <((JsonNode) mapper.readTree(mapper.factory.createParser(str))).get('id').asInt()>")
chamada antiga: assertNull(arrayNode.get(0))
nova chamada: assertNull(arrayNode.get(0), "Era esperado nulo, mas " + result25 + " <arrayNode.get(0)> não é nulo")
chamada antiga: assertEquals(JsonNodeType.ARRAY, arrayNode.getNodeType())
nova chamada: assertEquals(JsonNodeType.ARRAY, arrayNode.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.ARRAY é diferente de " + result26 + " <arrayNode.getNodeType()>")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101,\"name\":null}", str)
nova chamada: assertEquals("{\"id\":101,\"name\":null}", str, "Era esperado valores iguais, mas  '{\'id\':101,\'name\':null}' é diferente de " + " str")
chamada antiga: assertEquals("{\"bean_id\":1001}", str)
nova chamada: assertEquals("{\"bean_id\":1001}", str, "Era esperado valores iguais, mas  '{\'bean_id\':1001}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(str, new String(bytes, StandardCharsets.UTF_8))
nova chamada: assertEquals(str, new String(bytes, StandardCharsets.UTF_8), "Era esperado valores iguais, mas  str é diferente de " + " new String(bytes, StandardCharsets.UTF_8)")
chamada antiga: assertEquals(bean.id, bean2.id)
nova chamada: assertEquals(bean.id, bean2.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean2.id")
chamada antiga: assertEquals(bean.id, bean3.id)
nova chamada: assertEquals(bean.id, bean3.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean3.id")
chamada antiga: assertEquals("{\"bean_id\":1001}", str)
nova chamada: assertEquals("{\"bean_id\":1001}", str, "Era esperado valores iguais, mas  '{\'bean_id\':1001}' é diferente de " + " str")
chamada antiga: assertEquals(expected, carJson)
nova chamada: assertEquals(expected, carJson, "Era esperado valores iguais, mas  expected é diferente de " + " carJson")
chamada antiga: assertEquals(expected, new String(byteOut.toByteArray(), StandardCharsets.UTF_8))
nova chamada: assertEquals(expected, new String(byteOut.toByteArray(), StandardCharsets.UTF_8), "Era esperado valores iguais, mas  expected é diferente de " + " new String(byteOut.toByteArray(), StandardCharsets.UTF_8)")
chamada antiga: assertEquals(expected, strWriter.toString())
nova chamada: assertEquals(expected, strWriter.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result27 + " <strWriter.toString()>")
chamada antiga: assertEquals(car.type, car1.type)
nova chamada: assertEquals(car.type, car1.type, "Era esperado valores iguais, mas  car.type é diferente de " + " car1.type")
chamada antiga: assertNotNull(car)
nova chamada: assertNotNull(car, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("Black", car.getColor())
nova chamada: assertEquals("Black", car.getColor(), "Era esperado valores iguais, mas  'Black' é diferente de " + result28 + " <car.getColor()>")
chamada antiga: assertNotNull(car)
nova chamada: assertNotNull(car, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("red", car.color)
nova chamada: assertEquals("red", car.color, "Era esperado valores iguais, mas  'red' é diferente de " + " car.color")
chamada antiga: assertNotNull(javaType)
nova chamada: assertNotNull(javaType, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, values.size())
nova chamada: assertEquals(1, values.size(), "Era esperado valores iguais, mas  1 é diferente de " + result29 + " <values.size()>")
chamada antiga: assertEquals(123, values.get(0).id)
nova chamada: assertEquals(123, values.get(0).id, "Era esperado valores iguais, mas  123 é diferente de " + " values.get(0).id")
chamada antiga: assertEquals("XX", values.get(0).name)
nova chamada: assertEquals("XX", values.get(0).name, "Era esperado valores iguais, mas  'XX' é diferente de " + " values.get(0).name")
chamada antiga: assertEquals(1, values.size())
nova chamada: assertEquals(1, values.size(), "Era esperado valores iguais, mas  1 é diferente de " + result30 + " <values.size()>")
chamada antiga: assertEquals(123, values.get(0).id)
nova chamada: assertEquals(123, values.get(0).id, "Era esperado valores iguais, mas  123 é diferente de " + " values.get(0).id")
chamada antiga: assertEquals("XX", values.get(0).name)
nova chamada: assertEquals("XX", values.get(0).name, "Era esperado valores iguais, mas  'XX' é diferente de " + " values.get(0).name")
chamada antiga: assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result31 + " <map.size()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertTrue(node.isBigInteger())
nova chamada: assertTrue(node.isBigInteger(), "Era esperado verdadeiro, mas " + result32 + " <node.isBigInteger()> é falso")
chamada antiga: assertEquals(JsonParser.NumberType.BIG_INTEGER, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.BIG_INTEGER, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.BIG_INTEGER é diferente de " + result33 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result34 + " <node.getNodeType()>")
chamada antiga: assertEquals(bigInt.intValue(), node.asInt())
nova chamada: assertEquals(bigInt.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result35 + " <bigInt.intValue()> é diferente de " + result36 + " <node.asInt()>")
chamada antiga: assertEquals(bigInt.intValue(), node.asInt(2))
nova chamada: assertEquals(bigInt.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result37 + " <bigInt.intValue()> é diferente de " + result38 + " <node.asInt(2)>")
chamada antiga: assertEquals(bigInt.intValue(), node.intValue())
nova chamada: assertEquals(bigInt.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result39 + " <bigInt.intValue()> é diferente de " + result40 + " <node.intValue()>")
chamada antiga: assertEquals(bigInt.longValue(), node.longValue())
nova chamada: assertEquals(bigInt.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result41 + " <bigInt.longValue()> é diferente de " + result42 + " <node.longValue()>")
chamada antiga: assertEquals(bigInt.doubleValue(), node.asDouble())
nova chamada: assertEquals(bigInt.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result43 + " <bigInt.doubleValue()> é diferente de " + result44 + " <node.asDouble()>")
chamada antiga: assertFalse((reader.readValue("\n", TypeWithOptional.class).data).isPresent())
nova chamada: assertFalse((reader.readValue("\n", TypeWithOptional.class).data).isPresent(), "Era esperado falso, mas " + result45 + " <(reader.readValue('\n', TypeWithOptional.class).data).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(arrayNode.elements().hasNext())
nova chamada: assertFalse(arrayNode.elements().hasNext(), "Era esperado falso, mas " + result46 + " <arrayNode.elements().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(arrayNode.iterator().hasNext())
nova chamada: assertFalse(arrayNode.iterator().hasNext(), "Era esperado falso, mas " + result47 + " <arrayNode.iterator().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigDecimal())
nova chamada: assertFalse(node.isBigDecimal(), "Era esperado falso, mas " + result48 + " <node.isBigDecimal()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigInteger())
nova chamada: assertFalse(node.isBigInteger(), "Era esperado falso, mas " + result49 + " <node.isBigInteger()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigDecimal())
nova chamada: assertFalse(node.isBigDecimal(), "Era esperado falso, mas " + result50 + " <node.isBigDecimal()> é verdadeiro ")
chamada antiga: assertFalse(node.isFloat())
nova chamada: assertFalse(node.isFloat(), "Era esperado falso, mas " + result51 + " <node.isFloat()> é verdadeiro ")
chamada antiga: assertFalse(node.isDouble())
nova chamada: assertFalse(node.isDouble(), "Era esperado falso, mas " + result52 + " <node.isDouble()> é verdadeiro ")
chamada antiga: assertEquals(JsonParser.NumberType.INT, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.INT, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.INT é diferente de " + result53 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result54 + " <node.getNodeType()>")
chamada antiga: assertEquals(val.intValue(), node.asInt())
nova chamada: assertEquals(val.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result55 + " <val.intValue()> é diferente de " + result56 + " <node.asInt()>")
chamada antiga: assertEquals(val.intValue(), node.asInt(2))
nova chamada: assertEquals(val.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result57 + " <val.intValue()> é diferente de " + result58 + " <node.asInt(2)>")
chamada antiga: assertEquals(val.intValue(), node.intValue())
nova chamada: assertEquals(val.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result59 + " <val.intValue()> é diferente de " + result60 + " <node.intValue()>")
chamada antiga: assertEquals(val.longValue(), node.longValue())
nova chamada: assertEquals(val.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result61 + " <val.longValue()> é diferente de " + result62 + " <node.longValue()>")
chamada antiga: assertEquals(val.floatValue(), node.floatValue())
nova chamada: assertEquals(val.floatValue(), node.floatValue(), "Era esperado valores iguais, mas " + result63 + " <val.floatValue()> é diferente de " + result64 + " <node.floatValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.doubleValue())
nova chamada: assertEquals(val.doubleValue(), node.doubleValue(), "Era esperado valores iguais, mas " + result65 + " <val.doubleValue()> é diferente de " + result66 + " <node.doubleValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.asDouble())
nova chamada: assertEquals(val.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result67 + " <val.doubleValue()> é diferente de " + result68 + " <node.asDouble()>")
chamada antiga: assertEquals(BigInteger.ONE, node.bigIntegerValue())
nova chamada: assertEquals(BigInteger.ONE, node.bigIntegerValue(), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result69 + " <node.bigIntegerValue()>")
chamada antiga: assertEquals("null", new POJONode(null).asText())
nova chamada: assertEquals("null", new POJONode(null).asText(), "Era esperado valores iguais, mas  'null' é diferente de " + result70 + " <new POJONode(null).asText()>")
chamada antiga: assertEquals("{}", object.getJSONObject().toString())
nova chamada: assertEquals("{}", object.getJSONObject().toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result71 + " <object.getJSONObject().toString()>")
chamada antiga: assertEquals("{}", object.asText())
nova chamada: assertEquals("{}", object.asText(), "Era esperado valores iguais, mas  '{}' é diferente de " + result72 + " <object.asText()>")
chamada antiga: assertEquals(0, object.size())
nova chamada: assertEquals(0, object.size(), "Era esperado valores iguais, mas  0 é diferente de " + result73 + " <object.size()>")
chamada antiga: assertTrue(flag.booleanValue())
nova chamada: assertTrue(flag.booleanValue(), "Era esperado verdadeiro, mas " + result74 + " <flag.booleanValue()> é falso")
chamada antiga: assertEquals("true", flag.asText())
nova chamada: assertEquals("true", flag.asText(), "Era esperado valores iguais, mas  'true' é diferente de " + result75 + " <flag.asText()>")
chamada antiga: assertEquals("true", flag.toString())
nova chamada: assertEquals("true", flag.toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result76 + " <flag.toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result77 + " <object.size()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result78 + " <node.getValue()>")
chamada antiga: assertEquals(Short.toString(value), node.asText())
nova chamada: assertEquals(Short.toString(value), node.asText(), "Era esperado valores iguais, mas " + result79 + " <Short.toString(value)> é diferente de " + result80 + " <node.asText()>")
chamada antiga: assertEquals(Short.toString(value), node.toString())
nova chamada: assertEquals(Short.toString(value), node.toString(), "Era esperado valores iguais, mas " + result81 + " <Short.toString(value)> é diferente de " + result82 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result83 + " <node.getValue()>")
chamada antiga: assertEquals(Integer.toString(value), node.asText())
nova chamada: assertEquals(Integer.toString(value), node.asText(), "Era esperado valores iguais, mas " + result84 + " <Integer.toString(value)> é diferente de " + result85 + " <node.asText()>")
chamada antiga: assertEquals(Integer.toString(value), node.toString())
nova chamada: assertEquals(Integer.toString(value), node.toString(), "Era esperado valores iguais, mas " + result86 + " <Integer.toString(value)> é diferente de " + result87 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result88 + " <node.getValue()>")
chamada antiga: assertEquals(Long.toString(value), node.asText())
nova chamada: assertEquals(Long.toString(value), node.asText(), "Era esperado valores iguais, mas " + result89 + " <Long.toString(value)> é diferente de " + result90 + " <node.asText()>")
chamada antiga: assertEquals(Long.toString(value), node.toString())
nova chamada: assertEquals(Long.toString(value), node.toString(), "Era esperado valores iguais, mas " + result91 + " <Long.toString(value)> é diferente de " + result92 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result93 + " <node.getValue()>")
chamada antiga: assertEquals(Float.toString(value), node.asText())
nova chamada: assertEquals(Float.toString(value), node.asText(), "Era esperado valores iguais, mas " + result94 + " <Float.toString(value)> é diferente de " + result95 + " <node.asText()>")
chamada antiga: assertEquals(Float.toString(value), node.toString())
nova chamada: assertEquals(Float.toString(value), node.toString(), "Era esperado valores iguais, mas " + result96 + " <Float.toString(value)> é diferente de " + result97 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result98 + " <node.getValue()>")
chamada antiga: assertEquals(Double.toString(value), node.asText())
nova chamada: assertEquals(Double.toString(value), node.asText(), "Era esperado valores iguais, mas " + result99 + " <Double.toString(value)> é diferente de " + result100 + " <node.asText()>")
chamada antiga: assertEquals(Double.toString(value), node.toString())
nova chamada: assertEquals(Double.toString(value), node.toString(), "Era esperado valores iguais, mas " + result101 + " <Double.toString(value)> é diferente de " + result102 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result103 + " <node.getValue()>")
chamada antiga: assertEquals(value.toPlainString(), node.asText())
nova chamada: assertEquals(value.toPlainString(), node.asText(), "Era esperado valores iguais, mas " + result104 + " <value.toPlainString()> é diferente de " + result105 + " <node.asText()>")
chamada antiga: assertEquals(value.toString(), node.toString())
nova chamada: assertEquals(value.toString(), node.toString(), "Era esperado valores iguais, mas " + result106 + " <value.toString()> é diferente de " + result107 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result108 + " <node.getValue()>")
chamada antiga: assertEquals(value.toString(), node.asText())
nova chamada: assertEquals(value.toString(), node.asText(), "Era esperado valores iguais, mas " + result109 + " <value.toString()> é diferente de " + result110 + " <node.asText()>")
chamada antiga: assertEquals(value.toString(), node.toString())
nova chamada: assertEquals(value.toString(), node.toString(), "Era esperado valores iguais, mas " + result111 + " <value.toString()> é diferente de " + result112 + " <node.toString()>")
chamada antiga: assertEquals(value, node.getValue())
nova chamada: assertEquals(value, node.getValue(), "Era esperado valores iguais, mas  value é diferente de " + result113 + " <node.getValue()>")
chamada antiga: assertEquals(value, node.asText())
nova chamada: assertEquals(value, node.asText(), "Era esperado valores iguais, mas  value é diferente de " + result114 + " <node.asText()>")
chamada antiga: assertEquals(JSON.toJSONString(value), node.toString())
nova chamada: assertEquals(JSON.toJSONString(value), node.toString(), "Era esperado valores iguais, mas " + result115 + " <JSON.toJSONString(value)> é diferente de " + result116 + " <node.toString()>")
chamada antiga: assertTrue(node.isDouble())
nova chamada: assertTrue(node.isDouble(), "Era esperado verdadeiro, mas " + result117 + " <node.isDouble()> é falso")
chamada antiga: assertEquals(JsonParser.NumberType.DOUBLE, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.DOUBLE, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.DOUBLE é diferente de " + result118 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result119 + " <node.getNodeType()>")
chamada antiga: assertEquals(val.intValue(), node.asInt())
nova chamada: assertEquals(val.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result120 + " <val.intValue()> é diferente de " + result121 + " <node.asInt()>")
chamada antiga: assertEquals(val.intValue(), node.asInt(2))
nova chamada: assertEquals(val.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result122 + " <val.intValue()> é diferente de " + result123 + " <node.asInt(2)>")
chamada antiga: assertEquals(val.intValue(), node.intValue())
nova chamada: assertEquals(val.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result124 + " <val.intValue()> é diferente de " + result125 + " <node.intValue()>")
chamada antiga: assertEquals(val.longValue(), node.longValue())
nova chamada: assertEquals(val.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result126 + " <val.longValue()> é diferente de " + result127 + " <node.longValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.asDouble())
nova chamada: assertEquals(val.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result128 + " <val.doubleValue()> é diferente de " + result129 + " <node.asDouble()>")
chamada antiga: assertEquals(123, node.asInt())
nova chamada: assertEquals(123, node.asInt(), "Era esperado valores iguais, mas  123 é diferente de " + result130 + " <node.asInt()>")
chamada antiga: assertEquals("123", node.asText())
nova chamada: assertEquals("123", node.asText(), "Era esperado valores iguais, mas  '123' é diferente de " + result131 + " <node.asText()>")
chamada antiga: assertEquals(123, node.getValue())
nova chamada: assertEquals(123, node.getValue(), "Era esperado valores iguais, mas  123 é diferente de " + result132 + " <node.getValue()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result133 + " <node.getNodeType()>")
chamada antiga: assertNull(node.binaryValue())
nova chamada: assertNull(node.binaryValue(), "Era esperado nulo, mas " + result134 + " <node.binaryValue()> não é nulo")
chamada antiga: assertNull(node.textValue())
nova chamada: assertNull(node.textValue(), "Era esperado nulo, mas " + result135 + " <node.textValue()> não é nulo")
chamada antiga: assertSame(bytes, node.binaryValue())
nova chamada: assertSame(bytes, node.binaryValue(), "Era esperado objetos iguais, mas  bytes é diferente de " + result136 + " <node.binaryValue()>")
chamada antiga: assertEquals(0, node.asInt())
nova chamada: assertEquals(0, node.asInt(), "Era esperado valores iguais, mas  0 é diferente de " + result137 + " <node.asInt()>")
chamada antiga: assertTrue(node.isFloat())
nova chamada: assertTrue(node.isFloat(), "Era esperado verdadeiro, mas " + result138 + " <node.isFloat()> é falso")
chamada antiga: assertEquals(JsonParser.NumberType.FLOAT, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.FLOAT, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.FLOAT é diferente de " + result139 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result140 + " <node.getNodeType()>")
chamada antiga: assertEquals(val.intValue(), node.asInt())
nova chamada: assertEquals(val.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result141 + " <val.intValue()> é diferente de " + result142 + " <node.asInt()>")
chamada antiga: assertEquals(val.intValue(), node.asInt(2))
nova chamada: assertEquals(val.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result143 + " <val.intValue()> é diferente de " + result144 + " <node.asInt(2)>")
chamada antiga: assertEquals(val.intValue(), node.intValue())
nova chamada: assertEquals(val.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result145 + " <val.intValue()> é diferente de " + result146 + " <node.intValue()>")
chamada antiga: assertEquals(val.longValue(), node.longValue())
nova chamada: assertEquals(val.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result147 + " <val.longValue()> é diferente de " + result148 + " <node.longValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.asDouble())
nova chamada: assertEquals(val.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result149 + " <val.doubleValue()> é diferente de " + result150 + " <node.asDouble()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result151 + " <array.size()>")
chamada antiga: assertEquals("[]", array.asText())
nova chamada: assertEquals("[]", array.asText(), "Era esperado valores iguais, mas  '[]' é diferente de " + result152 + " <array.asText()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result153 + " <array.toString()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result154 + " <array.toString()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result155 + " <array.toString()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result156 + " <array.toString()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result157 + " <array.toString()>")
chamada antiga: assertEquals("[1]", array.toString())
nova chamada: assertEquals("[1]", array.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result158 + " <array.toString()>")
chamada antiga: assertEquals("[true]", array.toString())
nova chamada: assertEquals("[true]", array.toString(), "Era esperado valores iguais, mas  '[true]' é diferente de " + result159 + " <array.toString()>")
chamada antiga: assertEquals("[true]", array.toString())
nova chamada: assertEquals("[true]", array.toString(), "Era esperado valores iguais, mas  '[true]' é diferente de " + result160 + " <array.toString()>")
chamada antiga: assertEquals("[12.34]", array.toString())
nova chamada: assertEquals("[12.34]", array.toString(), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result161 + " <array.toString()>")
chamada antiga: assertEquals("[12.34]", array.toString())
nova chamada: assertEquals("[12.34]", array.toString(), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result162 + " <array.toString()>")
chamada antiga: assertEquals("[\"abc\"]", array.toString())
nova chamada: assertEquals("[\"abc\"]", array.toString(), "Era esperado valores iguais, mas  '[\'abc\']' é diferente de " + result163 + " <array.toString()>")
chamada antiga: assertEquals(JsonParser.NumberType.LONG, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.LONG, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.LONG é diferente de " + result164 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result165 + " <node.getNodeType()>")
chamada antiga: assertEquals(val.intValue(), node.asInt())
nova chamada: assertEquals(val.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result166 + " <val.intValue()> é diferente de " + result167 + " <node.asInt()>")
chamada antiga: assertEquals(val.intValue(), node.asInt(2))
nova chamada: assertEquals(val.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result168 + " <val.intValue()> é diferente de " + result169 + " <node.asInt(2)>")
chamada antiga: assertEquals(val.intValue(), node.intValue())
nova chamada: assertEquals(val.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result170 + " <val.intValue()> é diferente de " + result171 + " <node.intValue()>")
chamada antiga: assertEquals(val.longValue(), node.longValue())
nova chamada: assertEquals(val.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result172 + " <val.longValue()> é diferente de " + result173 + " <node.longValue()>")
chamada antiga: assertEquals(val.floatValue(), node.floatValue())
nova chamada: assertEquals(val.floatValue(), node.floatValue(), "Era esperado valores iguais, mas " + result174 + " <val.floatValue()> é diferente de " + result175 + " <node.floatValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.doubleValue())
nova chamada: assertEquals(val.doubleValue(), node.doubleValue(), "Era esperado valores iguais, mas " + result176 + " <val.doubleValue()> é diferente de " + result177 + " <node.doubleValue()>")
chamada antiga: assertEquals(val.doubleValue(), node.asDouble())
nova chamada: assertEquals(val.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result178 + " <val.doubleValue()> é diferente de " + result179 + " <node.asDouble()>")
chamada antiga: assertEquals(BigInteger.ONE, node.bigIntegerValue())
nova chamada: assertEquals(BigInteger.ONE, node.bigIntegerValue(), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result180 + " <node.bigIntegerValue()>")
chamada antiga: assertTrue(node.isBigDecimal())
nova chamada: assertTrue(node.isBigDecimal(), "Era esperado verdadeiro, mas " + result181 + " <node.isBigDecimal()> é falso")
chamada antiga: assertEquals(JsonParser.NumberType.BIG_DECIMAL, node.numberType())
nova chamada: assertEquals(JsonParser.NumberType.BIG_DECIMAL, node.numberType(), "Era esperado valores iguais, mas  JsonParser.NumberType.BIG_DECIMAL é diferente de " + result182 + " <node.numberType()>")
chamada antiga: assertEquals(JsonNodeType.NUMBER, node.getNodeType())
nova chamada: assertEquals(JsonNodeType.NUMBER, node.getNodeType(), "Era esperado valores iguais, mas  JsonNodeType.NUMBER é diferente de " + result183 + " <node.getNodeType()>")
chamada antiga: assertEquals(dec.intValue(), node.asInt())
nova chamada: assertEquals(dec.intValue(), node.asInt(), "Era esperado valores iguais, mas " + result184 + " <dec.intValue()> é diferente de " + result185 + " <node.asInt()>")
chamada antiga: assertEquals(dec.intValue(), node.asInt(2))
nova chamada: assertEquals(dec.intValue(), node.asInt(2), "Era esperado valores iguais, mas " + result186 + " <dec.intValue()> é diferente de " + result187 + " <node.asInt(2)>")
chamada antiga: assertEquals(dec.intValue(), node.intValue())
nova chamada: assertEquals(dec.intValue(), node.intValue(), "Era esperado valores iguais, mas " + result188 + " <dec.intValue()> é diferente de " + result189 + " <node.intValue()>")
chamada antiga: assertEquals(dec.longValue(), node.longValue())
nova chamada: assertEquals(dec.longValue(), node.longValue(), "Era esperado valores iguais, mas " + result190 + " <dec.longValue()> é diferente de " + result191 + " <node.longValue()>")
chamada antiga: assertEquals(dec.doubleValue(), node.asDouble())
nova chamada: assertEquals(dec.doubleValue(), node.asDouble(), "Era esperado valores iguais, mas " + result192 + " <dec.doubleValue()> é diferente de " + result193 + " <node.asDouble()>")
chamada antiga: assertNull(mapper.getNodeFactory().nullNode().asText())
nova chamada: assertNull(mapper.getNodeFactory().nullNode().asText(), "Era esperado nulo, mas " + result194 + " <mapper.getNodeFactory().nullNode().asText()> não é nulo")
chamada antiga: assertEquals("abc", strValue.value)
nova chamada: assertEquals("abc", strValue.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " strValue.value")
chamada antiga: assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':\'1001\'}' é diferente de " + result195 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":\"1001\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':\'1001\'}' é diferente de " + result196 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str)
nova chamada: assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str, "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'circle\',\n' + '\t\'name\':\'CustomCircle\',\n' + '\t\'radius\':1.0\n' + '}' é diferente de " + " str")
chamada antiga: assertEquals(shape.getClass(), shape1.getClass())
nova chamada: assertEquals(shape.getClass(), shape1.getClass(), "Era esperado valores iguais, mas " + result197 + " <shape.getClass()> é diferente de " + result198 + " <shape1.getClass()>")
chamada antiga: assertEquals(cycle.name, cycle1.name)
nova chamada: assertEquals(cycle.name, cycle1.name, "Era esperado valores iguais, mas  cycle.name é diferente de " + " cycle1.name")
chamada antiga: assertEquals(cycle.radius, cycle1.radius)
nova chamada: assertEquals(cycle.radius, cycle1.radius, "Era esperado valores iguais, mas  cycle.radius é diferente de " + " cycle1.radius")
chamada antiga: assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'rollNo\':1,\'name\':\'Mark\'}' é diferente de " + result199 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + result200 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("\"Hangzhou\"", str)
nova chamada: assertEquals("\"Hangzhou\"", str, "Era esperado valores iguais, mas  '\'Hangzhou\'' é diferente de " + " str")
chamada antiga: assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1))
nova chamada: assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1), "Era esperado valores iguais, mas  '\'Type A\'' é diferente de " + result201 + " <JSON.toJSONString(TypeEnumWithValue.TYPE1)>")
chamada antiga: assertEquals("{\"id\":123}", json)
nova chamada: assertEquals("{\"id\":123}", json, "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + " json")
chamada antiga: assertEquals(123, bean1.id)
nova chamada: assertEquals(123, bean1.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean1.id")
chamada antiga: assertEquals("XXX", bean1.name)
nova chamada: assertEquals("XXX", bean1.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertNull(bean1.name)
nova chamada: assertNull(bean1.name, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"jid\":\"abc\"}", str)
nova chamada: assertEquals("{\"jid\":\"abc\"}", str, "Era esperado valores iguais, mas  '{\'jid\':\'abc\'}' é diferente de " + " str")
chamada antiga: assertEquals("My bean", bean.name)
nova chamada: assertEquals("My bean", bean.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean.name")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bean_id\":1001}", str)
nova chamada: assertEquals("{\"bean_id\":1001}", str, "Era esperado valores iguais, mas  '{\'bean_id\':1001}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("My bean", bean2.name)
nova chamada: assertEquals("My bean", bean2.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean2.name")
chamada antiga: assertEquals("val1", bean2.properties.get("attr1"))
nova chamada: assertEquals("val1", bean2.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result202 + " <bean2.properties.get('attr1')>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result203 + " <JSON.toJSONString(new A('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A1("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A1("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result204 + " <JSON.toJSONString(new A1('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A2("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A2("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result205 + " <JSON.toJSONString(new A2('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A3("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A3("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result206 + " <JSON.toJSONString(new A3('101'))>")
chamada antiga: assertNull(JSON.parseObject(str, A.class).id)
nova chamada: assertNull(JSON.parseObject(str, A.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject(str, A1.class).id)
nova chamada: assertNull(JSON.parseObject(str, A1.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject(str, A2.class).id)
nova chamada: assertNull(JSON.parseObject(str, A2.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
nova chamada: assertEquals("\"ok\"", JSON.toJSONString(Type.OK), "Era esperado valores iguais, mas  '\'ok\'' é diferente de " + result207 + " <JSON.toJSONString(Type.OK)>")
chamada antiga: assertEquals("{\"values\":{\"123\":123}}", str)
nova chamada: assertEquals("{\"values\":{\"123\":123}}", str, "Era esperado valores iguais, mas  '{\'values\':{\'123\':123}}' é diferente de " + " str")
chamada antiga: assertEquals(123, key.value)
nova chamada: assertEquals(123, key.value, "Era esperado valores iguais, mas  123 é diferente de " + " key.value")
chamada antiga: assertEquals("f", jsonp.getFunction())
nova chamada: assertEquals("f", jsonp.getFunction(), "Era esperado valores iguais, mas  'f' é diferente de " + result208 + " <jsonp.getFunction()>")
chamada antiga: assertEquals(123, jsonp.getValue())
nova chamada: assertEquals(123, jsonp.getValue(), "Era esperado valores iguais, mas  123 é diferente de " + result209 + " <jsonp.getValue()>")
chamada antiga: assertEquals("f(123)", str)
nova chamada: assertEquals("f(123)", str, "Era esperado valores iguais, mas  'f(123)' é diferente de " + " str")
chamada antiga: assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
nova chamada: assertEquals("\"ok\"", JSON.toJSONString(Type.OK), "Era esperado valores iguais, mas  '\'ok\'' é diferente de " + result210 + " <JSON.toJSONString(Type.OK)>")
chamada antiga: assertEquals(123, mapper.readValue(factory.createParser(new StringReader(str)), Bean.class).id)
nova chamada: assertEquals(123, mapper.readValue(factory.createParser(new StringReader(str)), Bean.class).id, "Era esperado valores iguais, mas  123 é diferente de " + " mapper.readValue(factory.createParser(new StringReader(str)), Bean.class).id")
chamada antiga: assertEquals(123, mapper.readValue(factory.createParser(new ByteArrayInputStream(strBytes)), Bean.class).id)
nova chamada: assertEquals(123, mapper.readValue(factory.createParser(new ByteArrayInputStream(strBytes)), Bean.class).id, "Era esperado valores iguais, mas  123 é diferente de " + " mapper.readValue(factory.createParser(new ByteArrayInputStream(strBytes)), Bean.class).id")
chamada antiga: assertEquals(123, mapper.readValue(tempFile, Bean.class).id)
nova chamada: assertEquals(123, mapper.readValue(tempFile, Bean.class).id, "Era esperado valores iguais, mas  123 é diferente de " + " mapper.readValue(tempFile, Bean.class).id")
chamada antiga: assertEquals(str, writer.toString())
nova chamada: assertEquals(str, writer.toString(), "Era esperado valores iguais, mas  str é diferente de " + result211 + " <writer.toString()>")
chamada antiga: assertEquals(str, new String(out.toByteArray()))
nova chamada: assertEquals(str, new String(out.toByteArray()), "Era esperado valores iguais, mas  str é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("{\"id\":\"zhuan2quan\",\"name\":\"程序新视界\",\"interest\":[\"Java\",\"Spring Boot\",\"JVM\"]}", json)
nova chamada: assertEquals("{\"id\":\"zhuan2quan\",\"name\":\"程序新视界\",\"interest\":[\"Java\",\"Spring Boot\",\"JVM\"]}", json, "Era esperado valores iguais, mas  '{\'id\':\'zhuan2quan\',\'name\':\'程序新视界\',\'interest\':[\'Java\',\'Spring Boot\',\'JVM\']}' é diferente de " + " json")
chamada antiga: assertEquals(0, interest.size())
nova chamada: assertEquals(0, interest.size(), "Era esperado valores iguais, mas  0 é diferente de " + result212 + " <interest.size()>")
chamada antiga: assertTrue(interest.isEmpty())
nova chamada: assertTrue(interest.isEmpty(), "Era esperado verdadeiro, mas " + result213 + " <interest.isEmpty()> é falso")
chamada antiga: assertEquals(0, interest.doubleValue())
nova chamada: assertEquals(0, interest.doubleValue(), "Era esperado valores iguais, mas  0 é diferente de " + result214 + " <interest.doubleValue()>")
chamada antiga: assertEquals(0, interest.floatValue())
nova chamada: assertEquals(0, interest.floatValue(), "Era esperado valores iguais, mas  0 é diferente de " + result215 + " <interest.floatValue()>")
chamada antiga: assertEquals(0, interest.intValue())
nova chamada: assertEquals(0, interest.intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result216 + " <interest.intValue()>")
chamada antiga: assertEquals(0, interest.longValue())
nova chamada: assertEquals(0, interest.longValue(), "Era esperado valores iguais, mas  0 é diferente de " + result217 + " <interest.longValue()>")
chamada antiga: assertTrue(interestNode.isArray())
nova chamada: assertTrue(interestNode.isArray(), "Era esperado verdadeiro, mas " + result218 + " <interestNode.isArray()> é falso")
chamada antiga: assertNotNull(pointer)
nova chamada: assertNotNull(pointer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(feature.mappedFeature())
nova chamada: assertNotNull(feature.mappedFeature(), "Era esperado não nulo, mas " + result219 + " <feature.mappedFeature()> é nulo")
chamada antiga: assertTrue(JsonEncoding.UTF16_BE.isBigEndian())
nova chamada: assertTrue(JsonEncoding.UTF16_BE.isBigEndian(), "Era esperado verdadeiro, mas " + result220 + " <JsonEncoding.UTF16_BE.isBigEndian()> é falso")
chamada antiga: assertTrue(JsonEncoding.UTF16_BE.bits() != 0)
nova chamada: assertTrue(JsonEncoding.UTF16_BE.bits() != 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(node.isBigInteger())
nova chamada: assertFalse(node.isBigInteger(), "Era esperado falso, mas " + result221 + " <node.isBigInteger()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigDecimal())
nova chamada: assertFalse(node.isBigDecimal(), "Era esperado falso, mas " + result222 + " <node.isBigDecimal()> é verdadeiro ")
chamada antiga: assertFalse(node.isFloat())
nova chamada: assertFalse(node.isFloat(), "Era esperado falso, mas " + result223 + " <node.isFloat()> é verdadeiro ")
chamada antiga: assertFalse(node.isTextual())
nova chamada: assertFalse(node.isTextual(), "Era esperado falso, mas " + result224 + " <node.isTextual()> é verdadeiro ")
chamada antiga: assertFalse(node.has(1))
nova chamada: assertFalse(node.has(1), "Era esperado falso, mas " + result225 + " <node.has(1)> é verdadeiro ")
chamada antiga: assertFalse(node.has("1"))
nova chamada: assertFalse(node.has("1"), "Era esperado falso, mas " + result226 + " <node.has('1')> é verdadeiro ")
chamada antiga: assertFalse(node.isBigInteger())
nova chamada: assertFalse(node.isBigInteger(), "Era esperado falso, mas " + result227 + " <node.isBigInteger()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigDecimal())
nova chamada: assertFalse(node.isBigDecimal(), "Era esperado falso, mas " + result228 + " <node.isBigDecimal()> é verdadeiro ")
chamada antiga: assertFalse(node.isDouble())
nova chamada: assertFalse(node.isDouble(), "Era esperado falso, mas " + result229 + " <node.isDouble()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigInteger())
nova chamada: assertFalse(node.isBigInteger(), "Era esperado falso, mas " + result230 + " <node.isBigInteger()> é verdadeiro ")
chamada antiga: assertFalse(node.isBigDecimal())
nova chamada: assertFalse(node.isBigDecimal(), "Era esperado falso, mas " + result231 + " <node.isBigDecimal()> é verdadeiro ")
chamada antiga: assertFalse(node.isFloat())
nova chamada: assertFalse(node.isFloat(), "Era esperado falso, mas " + result232 + " <node.isFloat()> é verdadeiro ")
chamada antiga: assertFalse(node.isDouble())
nova chamada: assertFalse(node.isDouble(), "Era esperado falso, mas " + result233 + " <node.isDouble()> é verdadeiro ")
chamada antiga: assertFalse(interest.isValueNode())
nova chamada: assertFalse(interest.isValueNode(), "Era esperado falso, mas " + result234 + " <interest.isValueNode()> é verdadeiro ")
chamada antiga: assertFalse(nameNode.isArray())
nova chamada: assertFalse(nameNode.isArray(), "Era esperado falso, mas " + result235 + " <nameNode.isArray()> é verdadeiro ")
chamada antiga: assertEquals(version0, version1)
nova chamada: assertEquals(version0, version1, "Era esperado valores iguais, mas  version0 é diferente de " + " version1")
chamada antiga: assertEquals(version0, version0)
nova chamada: assertEquals(version0, version0, "Era esperado valores iguais, mas  version0 é diferente de " + " version0")
chamada antiga: assertEquals(version0.hashCode(), version1.hashCode())
nova chamada: assertEquals(version0.hashCode(), version1.hashCode(), "Era esperado valores iguais, mas " + result236 + " <version0.hashCode()> é diferente de " + result237 + " <version1.hashCode()>")
chamada antiga: assertEquals(version0.toString(), version1.toString())
nova chamada: assertEquals(version0.toString(), version1.toString(), "Era esperado valores iguais, mas " + result238 + " <version0.toString()> é diferente de " + result239 + " <version1.toString()>")
chamada antiga: assertEquals(0, version0.compareTo(version1))
nova chamada: assertEquals(0, version0.compareTo(version1), "Era esperado valores iguais, mas  0 é diferente de " + result240 + " <version0.compareTo(version1)>")
chamada antiga: assertEquals(version0, version1)
nova chamada: assertEquals(version0, version1, "Era esperado valores iguais, mas  version0 é diferente de " + " version1")
chamada antiga: assertEquals(version0.hashCode(), version1.hashCode())
nova chamada: assertEquals(version0.hashCode(), version1.hashCode(), "Era esperado valores iguais, mas " + result241 + " <version0.hashCode()> é diferente de " + result242 + " <version1.hashCode()>")
chamada antiga: assertEquals(version0.toString(), version1.toString())
nova chamada: assertEquals(version0.toString(), version1.toString(), "Era esperado valores iguais, mas " + result243 + " <version0.toString()> é diferente de " + result244 + " <version1.toString()>")
chamada antiga: assertEquals(0, version0.compareTo(version1))
nova chamada: assertEquals(0, version0.compareTo(version1), "Era esperado valores iguais, mas  0 é diferente de " + result245 + " <version0.compareTo(version1)>")
chamada antiga: assertEquals(3, v.getMajorVersion())
nova chamada: assertEquals(3, v.getMajorVersion(), "Era esperado valores iguais, mas  3 é diferente de " + result246 + " <v.getMajorVersion()>")
chamada antiga: assertEquals(2, v.getMinorVersion())
nova chamada: assertEquals(2, v.getMinorVersion(), "Era esperado valores iguais, mas  2 é diferente de " + result247 + " <v.getMinorVersion()>")
chamada antiga: assertEquals(1, v.getPatchLevel())
nova chamada: assertEquals(1, v.getPatchLevel(), "Era esperado valores iguais, mas  1 é diferente de " + result248 + " <v.getPatchLevel()>")
chamada antiga: assertEquals("b", v.getGroupId())
nova chamada: assertEquals("b", v.getGroupId(), "Era esperado valores iguais, mas  'b' é diferente de " + result249 + " <v.getGroupId()>")
chamada antiga: assertEquals("c", v.getArtifactId())
nova chamada: assertEquals("c", v.getArtifactId(), "Era esperado valores iguais, mas  'c' é diferente de " + result250 + " <v.getArtifactId()>")
chamada antiga: assertEquals("b/c/3.2.1-a", v.toFullString())
nova chamada: assertEquals("b/c/3.2.1-a", v.toFullString(), "Era esperado valores iguais, mas  'b/c/3.2.1-a' é diferente de " + result251 + " <v.toFullString()>")
chamada antiga: assertFalse(v.isUnknownVersion())
nova chamada: assertFalse(v.isUnknownVersion(), "Era esperado falso, mas " + result252 + " <v.isUnknownVersion()> é verdadeiro ")
chamada antiga: assertFalse(v.isUknownVersion())
nova chamada: assertFalse(v.isUknownVersion(), "Era esperado falso, mas " + result253 + " <v.isUknownVersion()> é verdadeiro ")
chamada antiga: assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"Jobs\"\n" + "}", json)
nova chamada: assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"Jobs\"\n" + "}", json, "Era esperado valores iguais, mas  '{\n' + '\t\'id\':1001,\n' + '\t\'name\':\'Jobs\'\n' + '}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":1001,\"name\":\"Jobs\"}", mapper.writeValueAsString(staff))
nova chamada: assertEquals("{\"id\":1001,\"name\":\"Jobs\"}", mapper.writeValueAsString(staff), "Era esperado valores iguais, mas  '{\'id\':1001,\'name\':\'Jobs\'}' é diferente de " + result254 + " <mapper.writeValueAsString(staff)>")
chamada antiga: assertTrue(JsonParser.Feature.collectDefaults() > 0)
nova chamada: assertTrue(JsonParser.Feature.collectDefaults() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"brand\":\"Mercedes\",\"doors\":5}", new String(bytes, StandardCharsets.UTF_8))
nova chamada: assertEquals("{\"brand\":\"Mercedes\",\"doors\":5}", new String(bytes, StandardCharsets.UTF_8), "Era esperado valores iguais, mas  '{\'brand\':\'Mercedes\',\'doors\':5}' é diferente de " + " new String(bytes, StandardCharsets.UTF_8)")
chamada antiga: assertEquals("{\"value\":null}", out.toString())
nova chamada: assertEquals("{\"value\":null}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + result255 + " <out.toString()>")
chamada antiga: assertEquals("{\"f0\":1,\"f1\":1,\"f2\":1.0,\"f3\":1.0,\"f4\":1}", out.toString())
nova chamada: assertEquals("{\"f0\":1,\"f1\":1,\"f2\":1.0,\"f3\":1.0,\"f4\":1}", out.toString(), "Era esperado valores iguais, mas  '{\'f0\':1,\'f1\':1,\'f2\':1.0,\'f3\':1.0,\'f4\':1}' é diferente de " + result256 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":[]}", out.toString())
nova chamada: assertEquals("{\"value\":[]}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result257 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":[]}", out.toString())
nova chamada: assertEquals("{\"value\":[]}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result258 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":null}", out.toString())
nova chamada: assertEquals("{\"value\":null}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + result259 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":true}", out.toString())
nova chamada: assertEquals("{\"value\":true}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + result260 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":{}}", out.toString())
nova chamada: assertEquals("{\"value\":{}}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':{}}' é diferente de " + result261 + " <out.toString()>")
chamada antiga: assertEquals("{\"value\":1}", out.toString())
nova chamada: assertEquals("{\"value\":1}", out.toString(), "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + result262 + " <out.toString()>")
chamada antiga: assertEquals("red", car.color)
nova chamada: assertEquals("red", car.color, "Era esperado valores iguais, mas  'red' é diferente de " + " car.color")
chamada antiga: assertEquals("{\"color\":\"red\"}", gson.toJson(car))
nova chamada: assertEquals("{\"color\":\"red\"}", gson.toJson(car), "Era esperado valores iguais, mas  '{\'color\':\'red\'}' é diferente de " + result263 + " <gson.toJson(car)>")
chamada antiga: assertEquals("red", car.color)
nova chamada: assertEquals("red", car.color, "Era esperado valores iguais, mas  'red' é diferente de " + " car.color")
chamada antiga: assertEquals(1, cars.size())
nova chamada: assertEquals(1, cars.size(), "Era esperado valores iguais, mas  1 é diferente de " + result264 + " <cars.size()>")
chamada antiga: assertEquals("blue", cars.get(0).color)
nova chamada: assertEquals("blue", cars.get(0).color, "Era esperado valores iguais, mas  'blue' é diferente de " + " cars.get(0).color")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertNotNull(str1)
nova chamada: assertNotNull(str1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(object instanceof Map)
nova chamada: assertTrue(object instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parse(str, JSONReader.Feature.SupportAutoType) instanceof Map)
nova chamada: assertTrue(JSON.parse(str, JSONReader.Feature.SupportAutoType) instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Throwable.class, e1.getClass())
nova chamada: assertEquals(Throwable.class, e1.getClass(), "Era esperado valores iguais, mas  Throwable.class é diferente de " + result265 + " <e1.getClass()>")
chamada antiga: assertEquals(Throwable.class, e2.getClass())
nova chamada: assertEquals(Throwable.class, e2.getClass(), "Era esperado valores iguais, mas  Throwable.class é diferente de " + result266 + " <e2.getClass()>")
chamada antiga: assertEquals("\"01234567890012345678900123456789001234567890\"", jsonWriter.toString())
nova chamada: assertEquals("\"01234567890012345678900123456789001234567890\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'01234567890012345678900123456789001234567890\'' é diferente de " + result267 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString())
nova chamada: assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'01234567890012345678900123456789001234567890中国\'' é diferente de " + result268 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString())
nova chamada: assertEquals("\"01234567890012345678900123456789001234567890中国\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'01234567890012345678900123456789001234567890中国\'' é diferente de " + result269 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult)
nova chamada: assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult, "Era esperado valores iguais, mas  'a[\'a0\\\'\',\'a1\']' é diferente de " + " fastjsonResult")
chamada antiga: assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result270 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: assertTrue(view.isExtractValueFromSingleKeyModel())
nova chamada: assertTrue(view.isExtractValueFromSingleKeyModel(), "Era esperado verdadeiro, mas " + result271 + " <view.isExtractValueFromSingleKeyModel()> é falso")
chamada antiga: assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result272 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: assertTrue(view.isExtractValueFromSingleKeyModel())
nova chamada: assertTrue(view.isExtractValueFromSingleKeyModel(), "Era esperado verdadeiro, mas " + result273 + " <view.isExtractValueFromSingleKeyModel()> é falso")
chamada antiga: assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length)
nova chamada: assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length, "Era esperado valores iguais, mas  contentLength é diferente de " + " contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length")
chamada antiga: assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result274 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: assertTrue(view.isExtractValueFromSingleKeyModel())
nova chamada: assertTrue(view.isExtractValueFromSingleKeyModel(), "Era esperado verdadeiro, mas " + result275 + " <view.isExtractValueFromSingleKeyModel()> é falso")
chamada antiga: assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"))
nova chamada: assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"), "Era esperado verdadeiro, mas " + result276 + " <contentAsString.startsWith('{\'abc\':\'cde中文\'}')> é falso")
chamada antiga: assertTrue(user.getId().equals(1))
nova chamada: assertTrue(user.getId().equals(1), "Era esperado verdadeiro, mas " + result277 + " <user.getId().equals(1)> é falso")
chamada antiga: assertTrue(user.getName().equals("土豆"))
nova chamada: assertTrue(user.getName().equals("土豆"), "Era esperado verdadeiro, mas " + result278 + " <user.getName().equals('土豆')> é falso")
chamada antiga: assertTrue(user.getAge().equals(25))
nova chamada: assertTrue(user.getAge().equals(25), "Era esperado verdadeiro, mas " + result279 + " <user.getAge().equals(25)> é falso")
chamada antiga: assertEquals(baseResult2.getCode(), "1000")
nova chamada: assertEquals(baseResult2.getCode(), "1000", "Era esperado valores iguais, mas " + result280 + " <baseResult2.getCode()> é diferente de " + " '1000'")
chamada antiga: assertEquals(baseResult2.getMsg(), "success")
nova chamada: assertEquals(baseResult2.getMsg(), "success", "Era esperado valores iguais, mas " + result281 + " <baseResult2.getMsg()> é diferente de " + " 'success'")
chamada antiga: assertEquals(baseResult2.getData().size(), 3)
nova chamada: assertEquals(baseResult2.getData().size(), 3, "Era esperado valores iguais, mas " + result282 + " <baseResult2.getData().size()> é diferente de " + " 3")
chamada antiga: assertEquals(baseResult2.getData().get(0), "测试1")
nova chamada: assertEquals(baseResult2.getData().get(0), "测试1", "Era esperado valores iguais, mas " + result283 + " <baseResult2.getData().get(0)> é diferente de " + " '测试1'")
chamada antiga: assertNotNull(converter.getFastJsonConfig())
nova chamada: assertNotNull(converter.getFastJsonConfig(), "Era esperado não nulo, mas " + result284 + " <converter.getFastJsonConfig()> é nulo")
chamada antiga: assertEquals(1, vo.getId())
nova chamada: assertEquals(1, vo.getId(), "Era esperado valores iguais, mas  1 é diferente de " + result285 + " <vo.getId()>")
chamada antiga: assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()))
nova chamada: assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + " new String((byte[]) message1.getPayload())")
chamada antiga: assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()))
nova chamada: assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + " new String((byte[]) message2.getPayload())")
chamada antiga: assertEquals("{\"id\":1}", message3.getPayload())
nova chamada: assertEquals("{\"id\":1}", message3.getPayload(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result286 + " <message3.getPayload()>")
chamada antiga: assertEquals("{\"id\":1}", message4.getPayload())
nova chamada: assertEquals("{\"id\":1}", message4.getPayload(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result287 + " <message4.getPayload()>")
chamada antiga: assertTrue(listDes instanceof JSONArray)
nova chamada: assertTrue(listDes instanceof JSONArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listDes.get(0) instanceof User)
nova chamada: assertTrue(listDes.get(0) instanceof User, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listDes.size() == 2)
nova chamada: assertTrue(listDes.size() == 2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listDes instanceof List)
nova chamada: assertTrue(listDes instanceof List, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listDes.get(0) instanceof BaseResult)
nova chamada: assertTrue(listDes.get(0) instanceof BaseResult, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(bean.gpsAddress)
nova chamada: assertNotNull(bean.gpsAddress, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(114.027285886961D, bean.gpsAddress.getX())
nova chamada: assertEquals(114.027285886961D, bean.gpsAddress.getX(), "Era esperado valores iguais, mas  114.027285886961D é diferente de " + result288 + " <bean.gpsAddress.getX()>")
chamada antiga: assertEquals(22.6741582981732D, bean.gpsAddress.getY())
nova chamada: assertEquals(22.6741582981732D, bean.gpsAddress.getY(), "Era esperado valores iguais, mas  22.6741582981732D é diferente de " + result289 + " <bean.gpsAddress.getY()>")
chamada antiga: assertEquals("{\"gpsAddress\":{\"type\":\"Point\",\"coordinates\":[114.027285886961,22.6741582981732]}}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"gpsAddress\":{\"type\":\"Point\",\"coordinates\":[114.027285886961,22.6741582981732]}}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'gpsAddress\':{\'type\':\'Point\',\'coordinates\':[114.027285886961,22.6741582981732]}}' é diferente de " + result290 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(100, point.getX())
nova chamada: assertEquals(100, point.getX(), "Era esperado valores iguais, mas  100 é diferente de " + result291 + " <point.getX()>")
chamada antiga: assertEquals(0, point.getY())
nova chamada: assertEquals(0, point.getY(), "Era esperado valores iguais, mas  0 é diferente de " + result292 + " <point.getY()>")
chamada antiga: assertEquals("[100.0,0.0]", JSON.toJSONString(point))
nova chamada: assertEquals("[100.0,0.0]", JSON.toJSONString(point), "Era esperado valores iguais, mas  '[100.0,0.0]' é diferente de " + result293 + " <JSON.toJSONString(point)>")
chamada antiga: assertEquals(100, point.getX())
nova chamada: assertEquals(100, point.getX(), "Era esperado valores iguais, mas  100 é diferente de " + result294 + " <point.getX()>")
chamada antiga: assertEquals(0, point.getY())
nova chamada: assertEquals(0, point.getY(), "Era esperado valores iguais, mas  0 é diferente de " + result295 + " <point.getY()>")
chamada antiga: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0]]]}", JSON.toJSONString(polygon))
nova chamada: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0]]]}", JSON.toJSONString(polygon), "Era esperado valores iguais, mas  '{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0],[100.0,0.0]]]}' é diferente de " + result296 + " <JSON.toJSONString(polygon)>")
chamada antiga: assertEquals(2, lineString.getCoordinates().size())
nova chamada: assertEquals(2, lineString.getCoordinates().size(), "Era esperado valores iguais, mas  2 é diferente de " + result297 + " <lineString.getCoordinates().size()>")
chamada antiga: assertEquals(100, lineString.getCoordinates().get(0).getX())
nova chamada: assertEquals(100, lineString.getCoordinates().get(0).getX(), "Era esperado valores iguais, mas  100 é diferente de " + result298 + " <lineString.getCoordinates().get(0).getX()>")
chamada antiga: assertEquals(0, lineString.getCoordinates().get(0).getY())
nova chamada: assertEquals(0, lineString.getCoordinates().get(0).getY(), "Era esperado valores iguais, mas  0 é diferente de " + result299 + " <lineString.getCoordinates().get(0).getY()>")
chamada antiga: assertEquals(101, lineString.getCoordinates().get(1).getX())
nova chamada: assertEquals(101, lineString.getCoordinates().get(1).getX(), "Era esperado valores iguais, mas  101 é diferente de " + result300 + " <lineString.getCoordinates().get(1).getX()>")
chamada antiga: assertEquals(1, lineString.getCoordinates().get(1).getY())
nova chamada: assertEquals(1, lineString.getCoordinates().get(1).getY(), "Era esperado valores iguais, mas  1 é diferente de " + result301 + " <lineString.getCoordinates().get(1).getY()>")
chamada antiga: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(lineString))
nova chamada: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(lineString), "Era esperado valores iguais, mas  '{\'type\':\'LineString\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result302 + " <JSON.toJSONString(lineString)>")
chamada antiga: assertEquals(2, multiPoint.getCoordinates().size())
nova chamada: assertEquals(2, multiPoint.getCoordinates().size(), "Era esperado valores iguais, mas  2 é diferente de " + result303 + " <multiPoint.getCoordinates().size()>")
chamada antiga: assertEquals(100, multiPoint.getCoordinates().get(0).getX())
nova chamada: assertEquals(100, multiPoint.getCoordinates().get(0).getX(), "Era esperado valores iguais, mas  100 é diferente de " + result304 + " <multiPoint.getCoordinates().get(0).getX()>")
chamada antiga: assertEquals(0, multiPoint.getCoordinates().get(0).getY())
nova chamada: assertEquals(0, multiPoint.getCoordinates().get(0).getY(), "Era esperado valores iguais, mas  0 é diferente de " + result305 + " <multiPoint.getCoordinates().get(0).getY()>")
chamada antiga: assertEquals(101, multiPoint.getCoordinates().get(1).getX())
nova chamada: assertEquals(101, multiPoint.getCoordinates().get(1).getX(), "Era esperado valores iguais, mas  101 é diferente de " + result306 + " <multiPoint.getCoordinates().get(1).getX()>")
chamada antiga: assertEquals(1, multiPoint.getCoordinates().get(1).getY())
nova chamada: assertEquals(1, multiPoint.getCoordinates().get(1).getY(), "Era esperado valores iguais, mas  1 é diferente de " + result307 + " <multiPoint.getCoordinates().get(1).getY()>")
chamada antiga: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(multiPoint))
nova chamada: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(multiPoint), "Era esperado valores iguais, mas  '{\'type\':\'MultiPoint\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result308 + " <JSON.toJSONString(multiPoint)>")
chamada antiga: assertEquals(context.getClass(), deserialized.getClass())
nova chamada: assertEquals(context.getClass(), deserialized.getClass(), "Era esperado valores iguais, mas " + result309 + " <context.getClass()> é diferente de " + result310 + " <deserialized.getClass()>")
chamada antiga: assertTrue(user.getId().equals(1))
nova chamada: assertTrue(user.getId().equals(1), "Era esperado verdadeiro, mas " + result311 + " <user.getId().equals(1)> é falso")
chamada antiga: assertTrue(user.getName().equals("土豆"))
nova chamada: assertTrue(user.getName().equals("土豆"), "Era esperado verdadeiro, mas " + result312 + " <user.getName().equals('土豆')> é falso")
chamada antiga: assertTrue(user.getAge().equals(25))
nova chamada: assertTrue(user.getAge().equals(25), "Era esperado verdadeiro, mas " + result313 + " <user.getAge().equals(25)> é falso")
chamada antiga: assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
nova chamada: assertNotNull(fastJsonRedisSerializer.getFastJsonConfig(), "Era esperado não nulo, mas " + result314 + " <fastJsonRedisSerializer.getFastJsonConfig()> é nulo")
chamada antiga: assertEquals(userDes.getName(), "土豆")
nova chamada: assertEquals(userDes.getName(), "土豆", "Era esperado valores iguais, mas " + result315 + " <userDes.getName()> é diferente de " + " '土豆'")
chamada antiga: assertTrue(user.getId().equals(1))
nova chamada: assertTrue(user.getId().equals(1), "Era esperado verdadeiro, mas " + result316 + " <user.getId().equals(1)> é falso")
chamada antiga: assertTrue(user.getName().equals("土豆"))
nova chamada: assertTrue(user.getName().equals("土豆"), "Era esperado verdadeiro, mas " + result317 + " <user.getName().equals('土豆')> é falso")
chamada antiga: assertTrue(user.getAge().equals(25))
nova chamada: assertTrue(user.getAge().equals(25), "Era esperado verdadeiro, mas " + result318 + " <user.getAge().equals(25)> é falso")
chamada antiga: assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
nova chamada: assertNotNull(fastJsonRedisSerializer.getFastJsonConfig(), "Era esperado não nulo, mas " + result319 + " <fastJsonRedisSerializer.getFastJsonConfig()> é nulo")
chamada antiga: assertEquals(userDes.getName(), "土豆")
nova chamada: assertEquals(userDes.getName(), "土豆", "Era esperado valores iguais, mas " + result320 + " <userDes.getName()> é diferente de " + " '土豆'")
chamada antiga: assertNotNull(messageConverter.getFastJsonConfig())
nova chamada: assertNotNull(messageConverter.getFastJsonConfig(), "Era esperado não nulo, mas " + result321 + " <messageConverter.getFastJsonConfig()> é nulo")
chamada antiga: assertTrue(messageConverter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON))
nova chamada: assertTrue(messageConverter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON), "Era esperado verdadeiro, mas " + result322 + " <messageConverter.canRead(VO.class, VO.class, MediaType.APPLICATION_JSON)> é falso")
chamada antiga: assertTrue(messageConverter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON))
nova chamada: assertTrue(messageConverter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON), "Era esperado verdadeiro, mas " + result323 + " <messageConverter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON)> é falso")
chamada antiga: assertEquals(1, messageConverter.getSupportedMediaTypes().size())
nova chamada: assertEquals(1, messageConverter.getSupportedMediaTypes().size(), "Era esperado valores iguais, mas  1 é diferente de " + result324 + " <messageConverter.getSupportedMediaTypes().size()>")
chamada antiga: assertEquals(vo.getId(), 123)
nova chamada: assertEquals(vo.getId(), 123, "Era esperado valores iguais, mas " + result325 + " <vo.getId()> é diferente de " + " 123")
chamada antiga: assertTrue(user.getId().equals(1))
nova chamada: assertTrue(user.getId().equals(1), "Era esperado verdadeiro, mas " + result326 + " <user.getId().equals(1)> é falso")
chamada antiga: assertTrue(user.getName().equals("土豆"))
nova chamada: assertTrue(user.getName().equals("土豆"), "Era esperado verdadeiro, mas " + result327 + " <user.getName().equals('土豆')> é falso")
chamada antiga: assertTrue(user.getAge().equals(25))
nova chamada: assertTrue(user.getAge().equals(25), "Era esperado verdadeiro, mas " + result328 + " <user.getAge().equals(25)> é falso")
chamada antiga: assertEquals(baseResult2.getCode(), "1000")
nova chamada: assertEquals(baseResult2.getCode(), "1000", "Era esperado valores iguais, mas " + result329 + " <baseResult2.getCode()> é diferente de " + " '1000'")
chamada antiga: assertEquals(baseResult2.getData().size(), 3)
nova chamada: assertEquals(baseResult2.getData().size(), 3, "Era esperado valores iguais, mas " + result330 + " <baseResult2.getData().size()> é diferente de " + " 3")
chamada antiga: assertEquals(baseResult3.getCode(), "1000")
nova chamada: assertEquals(baseResult3.getCode(), "1000", "Era esperado valores iguais, mas " + result331 + " <baseResult3.getCode()> é diferente de " + " '1000'")
chamada antiga: assertEquals(baseResult3.getData().size(), 6)
nova chamada: assertEquals(baseResult3.getData().size(), 6, "Era esperado valores iguais, mas " + result332 + " <baseResult3.getData().size()> é diferente de " + " 6")
chamada antiga: assertNotNull(converter.getFastJsonConfig())
nova chamada: assertNotNull(converter.getFastJsonConfig(), "Era esperado não nulo, mas " + result333 + " <converter.getFastJsonConfig()> é nulo")
chamada antiga: assertEquals(1, vo.getId())
nova chamada: assertEquals(1, vo.getId(), "Era esperado valores iguais, mas  1 é diferente de " + result334 + " <vo.getId()>")
chamada antiga: assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message1.getPayload()).toString())
nova chamada: assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message1.getPayload()).toString(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result335 + " <JSONB.parseObject((byte[]) message1.getPayload()).toString()>")
chamada antiga: assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message2.getPayload()).toString())
nova chamada: assertEquals("{\"id\":1}", JSONB.parseObject((byte[]) message2.getPayload()).toString(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result336 + " <JSONB.parseObject((byte[]) message2.getPayload()).toString()>")
chamada antiga: assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, object.getClass())
nova chamada: assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, object.getClass(), "Era esperado valores iguais, mas  org.springframework.security.core.authority.SimpleGrantedAuthority.class é diferente de " + result337 + " <object.getClass()>")
chamada antiga: assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, object.getClass())
nova chamada: assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, object.getClass(), "Era esperado valores iguais, mas  org.springframework.util.LinkedCaseInsensitiveMap.class é diferente de " + result338 + " <object.getClass()>")
chamada antiga: assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, bean.value.getClass())
nova chamada: assertEquals(org.springframework.util.LinkedCaseInsensitiveMap.class, bean.value.getClass(), "Era esperado valores iguais, mas  org.springframework.util.LinkedCaseInsensitiveMap.class é diferente de " + result339 + " <bean.value.getClass()>")
chamada antiga: assertEquals(113.92966694974888D, dispatchPositionInfoMO.gpsAddress.getX())
nova chamada: assertEquals(113.92966694974888D, dispatchPositionInfoMO.gpsAddress.getX(), "Era esperado valores iguais, mas  113.92966694974888D é diferente de " + result340 + " <dispatchPositionInfoMO.gpsAddress.getX()>")
chamada antiga: assertEquals(22.543470524848683D, dispatchPositionInfoMO.gpsAddress.getY())
nova chamada: assertEquals(22.543470524848683D, dispatchPositionInfoMO.gpsAddress.getY(), "Era esperado valores iguais, mas  22.543470524848683D é diferente de " + result341 + " <dispatchPositionInfoMO.gpsAddress.getY()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(configs))
nova chamada: assertEquals("{}", JSON.toJSONString(configs), "Era esperado valores iguais, mas  '{}' é diferente de " + result342 + " <JSON.toJSONString(configs)>")
chamada antiga: assertNotNull(parsed)
nova chamada: assertNotNull(parsed, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, parsed.get(0).getClass())
nova chamada: assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, parsed.get(0).getClass(), "Era esperado valores iguais, mas  org.springframework.security.core.authority.SimpleGrantedAuthority.class é diferente de " + result343 + " <parsed.get(0).getClass()>")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(new Json(jsonStr)))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(new Json(jsonStr)), "Era esperado valores iguais, mas  jsonStr é diferente de " + result344 + " <JSON.toJSONString(new Json(jsonStr))>")
chamada antiga: assertEquals(jsonStr, new String(bytes, StandardCharsets.UTF_8))
nova chamada: assertEquals(jsonStr, new String(bytes, StandardCharsets.UTF_8), "Era esperado valores iguais, mas  jsonStr é diferente de " + " new String(bytes, StandardCharsets.UTF_8)")
chamada antiga: assertEquals("\"USD\"", str)
nova chamada: assertEquals("\"USD\"", str, "Era esperado valores iguais, mas  '\'USD\'' é diferente de " + " str")
chamada antiga: assertEquals(usd, usd2)
nova chamada: assertEquals(usd, usd2, "Era esperado valores iguais, mas  usd é diferente de " + " usd2")
chamada antiga: assertEquals("{\"currency\":\"USD\",\"number\":200}", str)
nova chamada: assertEquals("{\"currency\":\"USD\",\"number\":200}", str, "Era esperado valores iguais, mas  '{\'currency\':\'USD\',\'number\':200}' é diferente de " + " str")
chamada antiga: assertEquals(amount, amount2)
nova chamada: assertEquals(amount, amount2, "Era esperado valores iguais, mas  amount é diferente de " + " amount2")
chamada antiga: assertEquals(oneEuro, money)
nova chamada: assertEquals(oneEuro, money, "Era esperado valores iguais, mas  oneEuro é diferente de " + " money")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals("{\"User Id\":123}", str)
nova chamada: assertEquals("{\"User Id\":123}", str, "Era esperado valores iguais, mas  '{\'User Id\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_Some Field Name\":123}", str)
nova chamada: assertEquals("{\"_Some Field Name\":123}", str, "Era esperado valores iguais, mas  '{\'_Some Field Name\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"a String Field\":123}", str)
nova chamada: assertEquals("{\"a String Field\":123}", str, "Era esperado valores iguais, mas  '{\'a String Field\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"a URL\":123}", str)
nova chamada: assertEquals("{\"a URL\":123}", str, "Era esperado valores iguais, mas  '{\'a URL\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertEquals("{\"user-id\":123}", str)
nova chamada: assertEquals("{\"user-id\":123}", str, "Era esperado valores iguais, mas  '{\'user-id\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_some-field-name\":123}", str)
nova chamada: assertEquals("{\"_some-field-name\":123}", str, "Era esperado valores iguais, mas  '{\'_some-field-name\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"a-string-field\":123}", str)
nova chamada: assertEquals("{\"a-string-field\":123}", str, "Era esperado valores iguais, mas  '{\'a-string-field\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"a-u-r-l\":123}", str)
nova chamada: assertEquals("{\"a-u-r-l\":123}", str, "Era esperado valores iguais, mas  '{\'a-u-r-l\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertEquals("{\"user-id\":123}", str)
nova chamada: assertEquals("{\"user-id\":123}", str, "Era esperado valores iguais, mas  '{\'user-id\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_some-field-name\":123}", str)
nova chamada: assertEquals("{\"_some-field-name\":123}", str, "Era esperado valores iguais, mas  '{\'_some-field-name\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"a-string-field\":123}", str)
nova chamada: assertEquals("{\"a-string-field\":123}", str, "Era esperado valores iguais, mas  '{\'a-string-field\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"a-u-r-l\":123}", str)
nova chamada: assertEquals("{\"a-u-r-l\":123}", str, "Era esperado valores iguais, mas  '{\'a-u-r-l\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertEquals("{\"USER_ID\":123}", str)
nova chamada: assertEquals("{\"USER_ID\":123}", str, "Era esperado valores iguais, mas  '{\'USER_ID\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_SOME_FIELD_NAME\":123}", str)
nova chamada: assertEquals("{\"_SOME_FIELD_NAME\":123}", str, "Era esperado valores iguais, mas  '{\'_SOME_FIELD_NAME\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"A_STRING_FIELD\":123}", str)
nova chamada: assertEquals("{\"A_STRING_FIELD\":123}", str, "Era esperado valores iguais, mas  '{\'A_STRING_FIELD\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"A_U_R_L\":123}", str)
nova chamada: assertEquals("{\"A_U_R_L\":123}", str, "Era esperado valores iguais, mas  '{\'A_U_R_L\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertEquals("{\"UserId\":123}", str)
nova chamada: assertEquals("{\"UserId\":123}", str, "Era esperado valores iguais, mas  '{\'UserId\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_SomeFieldName\":123}", str)
nova chamada: assertEquals("{\"_SomeFieldName\":123}", str, "Era esperado valores iguais, mas  '{\'_SomeFieldName\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"_SomeFieldName\":123}", str)
nova chamada: assertEquals("{\"_SomeFieldName\":123}", str, "Era esperado valores iguais, mas  '{\'_SomeFieldName\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"UserId\":123}", str)
nova chamada: assertEquals("{\"UserId\":123}", str, "Era esperado valores iguais, mas  '{\'UserId\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"user_id\":123}", str)
nova chamada: assertEquals("{\"user_id\":123}", str, "Era esperado valores iguais, mas  '{\'user_id\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_some_field_name\":123}", str)
nova chamada: assertEquals("{\"_some_field_name\":123}", str, "Era esperado valores iguais, mas  '{\'_some_field_name\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"a_string_field\":123}", str)
nova chamada: assertEquals("{\"a_string_field\":123}", str, "Era esperado valores iguais, mas  '{\'a_string_field\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"a_u_r_l\":123}", str)
nova chamada: assertEquals("{\"a_u_r_l\":123}", str, "Era esperado valores iguais, mas  '{\'a_u_r_l\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertEquals("{\"user.id\":123}", str)
nova chamada: assertEquals("{\"user.id\":123}", str, "Era esperado valores iguais, mas  '{\'user.id\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals("{\"_some.field.name\":123}", str)
nova chamada: assertEquals("{\"_some.field.name\":123}", str, "Era esperado valores iguais, mas  '{\'_some.field.name\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean._someFieldName, bean1._someFieldName)
nova chamada: assertEquals(bean._someFieldName, bean1._someFieldName, "Era esperado valores iguais, mas  bean._someFieldName é diferente de " + " bean1._someFieldName")
chamada antiga: assertEquals("{\"a.string.field\":123}", str)
nova chamada: assertEquals("{\"a.string.field\":123}", str, "Era esperado valores iguais, mas  '{\'a.string.field\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aStringField, bean1.aStringField)
nova chamada: assertEquals(bean.aStringField, bean1.aStringField, "Era esperado valores iguais, mas  bean.aStringField é diferente de " + " bean1.aStringField")
chamada antiga: assertEquals("{\"a.u.r.l\":123}", str)
nova chamada: assertEquals("{\"a.u.r.l\":123}", str, "Era esperado valores iguais, mas  '{\'a.u.r.l\':123}' é diferente de " + " str")
chamada antiga: assertEquals(bean.aURL, bean1.aURL)
nova chamada: assertEquals(bean.aURL, bean1.aURL, "Era esperado valores iguais, mas  bean.aURL é diferente de " + " bean1.aURL")
chamada antiga: assertTrue(path.isRef())
nova chamada: assertTrue(path.isRef(), "Era esperado verdadeiro, mas " + result345 + " <path.isRef()> é falso")
chamada antiga: assertTrue(path.contains(bean))
nova chamada: assertTrue(path.contains(bean), "Era esperado verdadeiro, mas " + result346 + " <path.contains(bean)> é falso")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals(200, bean.id)
nova chamada: assertEquals(200, bean.id, "Era esperado valores iguais, mas  200 é diferente de " + " bean.id")
chamada antiga: assertEquals(200, path.eval(bean))
nova chamada: assertEquals(200, path.eval(bean), "Era esperado valores iguais, mas  200 é diferente de " + result347 + " <path.eval(bean)>")
chamada antiga: assertEquals(202, path.eval(bean))
nova chamada: assertEquals(202, path.eval(bean), "Era esperado valores iguais, mas  202 é diferente de " + result348 + " <path.eval(bean)>")
chamada antiga: assertEquals(1001, bean.item.id)
nova chamada: assertEquals(1001, bean.item.id, "Era esperado valores iguais, mas  1001 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(1002, bean.item.id)
nova chamada: assertEquals(1002, bean.item.id, "Era esperado valores iguais, mas  1002 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(1003, bean.item.id)
nova chamada: assertEquals(1003, bean.item.id, "Era esperado valores iguais, mas  1003 é diferente de " + " bean.item.id")
chamada antiga: assertNull(path.eval(bean))
nova chamada: assertNull(path.eval(bean), "Era esperado nulo, mas " + result349 + " <path.eval(bean)> não é nulo")
chamada antiga: assertEquals(101, path.eval(bean))
nova chamada: assertEquals(101, path.eval(bean), "Era esperado valores iguais, mas  101 é diferente de " + result350 + " <path.eval(bean)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.321", JSONObject.of("date", new Date(1664010843321L)).getString("date"))
nova chamada: assertEquals("2022-09-24 17:14:03.321", JSONObject.of("date", new Date(1664010843321L)).getString("date"), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.321' é diferente de " + result351 + " <JSONObject.of('date', new Date(1664010843321L)).getString('date')>")
chamada antiga: assertEquals("2022-09-24 17:14:03.32", JSONObject.of("date", new Date(1664010843320L)).getString("date"))
nova chamada: assertEquals("2022-09-24 17:14:03.32", JSONObject.of("date", new Date(1664010843320L)).getString("date"), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.32' é diferente de " + result352 + " <JSONObject.of('date', new Date(1664010843320L)).getString('date')>")
chamada antiga: assertEquals("2022-09-24 17:14:03.3", JSONObject.of("date", new Date(1664010843300L)).getString("date"))
nova chamada: assertEquals("2022-09-24 17:14:03.3", JSONObject.of("date", new Date(1664010843300L)).getString("date"), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.3' é diferente de " + result353 + " <JSONObject.of('date', new Date(1664010843300L)).getString('date')>")
chamada antiga: assertEquals("2022-09-24 17:14:03", JSONObject.of("date", new Date(1664010843000L)).getString("date"))
nova chamada: assertEquals("2022-09-24 17:14:03", JSONObject.of("date", new Date(1664010843000L)).getString("date"), "Era esperado valores iguais, mas  '2022-09-24 17:14:03' é diferente de " + result354 + " <JSONObject.of('date', new Date(1664010843000L)).getString('date')>")
chamada antiga: assertEquals(101, JSONObject.of("itemId", 101).toJavaObject(Item.class).itemId)
nova chamada: assertEquals(101, JSONObject.of("itemId", 101).toJavaObject(Item.class).itemId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('itemId', 101).toJavaObject(Item.class).itemId")
chamada antiga: assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean.class).items.get(0).itemId)
nova chamada: assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean.class).items.get(0).itemId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('items', JSONArray.of(JSONObject.of('itemId', 101))).toJavaObject(Bean.class).items.get(0).itemId")
chamada antiga: assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean1.class).items.get(0).itemId)
nova chamada: assertEquals(101, JSONObject.of("items", JSONArray.of(JSONObject.of("itemId", 101))).toJavaObject(Bean1.class).items.get(0).itemId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('items', JSONArray.of(JSONObject.of('itemId', 101))).toJavaObject(Bean1.class).items.get(0).itemId")
chamada antiga: assertEquals(101, items.get(0).itemId)
nova chamada: assertEquals(101, items.get(0).itemId, "Era esperado valores iguais, mas  101 é diferente de " + " items.get(0).itemId")
chamada antiga: assertEquals(101, JSONObject.of("items", JSONObject.of("first", JSONObject.of("itemId", 101))).toJavaObject(Bean3.class).items.get("first").itemId)
nova chamada: assertEquals(101, JSONObject.of("items", JSONObject.of("first", JSONObject.of("itemId", 101))).toJavaObject(Bean3.class).items.get("first").itemId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('items', JSONObject.of('first', JSONObject.of('itemId', 101))).toJavaObject(Bean3.class).items.get('first').itemId")
chamada antiga: assertNull(module.getAnnotationProcessor())
nova chamada: assertNull(module.getAnnotationProcessor(), "Era esperado nulo, mas " + result355 + " <module.getAnnotationProcessor()> não é nulo")
chamada antiga: assertNull(module.getProvider())
nova chamada: assertNull(module.getProvider(), "Era esperado nulo, mas " + result356 + " <module.getProvider()> não é nulo")
chamada antiga: assertNull(module.getObjectReader(null, null))
nova chamada: assertNull(module.getObjectReader(null, null), "Era esperado nulo, mas " + result357 + " <module.getObjectReader(null, null)> não é nulo")
chamada antiga: assertNull(module.getAnnotationProcessor())
nova chamada: assertNull(module.getAnnotationProcessor(), "Era esperado nulo, mas " + result358 + " <module.getAnnotationProcessor()> não é nulo")
chamada antiga: assertNull(module.getObjectWriter(null, null))
nova chamada: assertNull(module.getObjectWriter(null, null), "Era esperado nulo, mas " + result359 + " <module.getObjectWriter(null, null)> não é nulo")
chamada antiga: assertTrue(jsonPath.isRef())
nova chamada: assertTrue(jsonPath.isRef(), "Era esperado verdadeiro, mas " + result360 + " <jsonPath.isRef()> é falso")
chamada antiga: assertTrue(jsonPath.contains(object))
nova chamada: assertTrue(jsonPath.contains(object), "Era esperado verdadeiro, mas " + result361 + " <jsonPath.contains(object)> é falso")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertEquals("[1001,\"DataWorks\",\"2017-07-14 00:00:00\"]", jsonPath.extractScalar(JSONReader.of(object.toString())))
nova chamada: assertEquals("[1001,\"DataWorks\",\"2017-07-14 00:00:00\"]", jsonPath.extractScalar(JSONReader.of(object.toString())), "Era esperado valores iguais, mas  '[1001,\'DataWorks\',\'2017-07-14 00:00:00\']' é diferente de " + result362 + " <jsonPath.extractScalar(JSONReader.of(object.toString()))>")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertArrayEquals(expected, result)
nova chamada: assertArrayEquals(expected, result, "Era esperado arrays iguais, mas  expected é diferente de " + " result")
chamada antiga: assertTrue(jsonPath.isRef())
nova chamada: assertTrue(jsonPath.isRef(), "Era esperado verdadeiro, mas " + result363 + " <jsonPath.isRef()> é falso")
chamada antiga: assertTrue(jsonPath.contains(object))
nova chamada: assertTrue(jsonPath.contains(object), "Era esperado verdadeiro, mas " + result364 + " <jsonPath.contains(object)> é falso")
chamada antiga: assertTrue(jsonPath.isRef())
nova chamada: assertTrue(jsonPath.isRef(), "Era esperado verdadeiro, mas " + result365 + " <jsonPath.isRef()> é falso")
chamada antiga: assertEquals(Integer.class, jsonPath.getType())
nova chamada: assertEquals(Integer.class, jsonPath.getType(), "Era esperado valores iguais, mas  Integer.class é diferente de " + result366 + " <jsonPath.getType()>")
chamada antiga: assertTrue(jsonPath.contains(object))
nova chamada: assertTrue(jsonPath.contains(object), "Era esperado verdadeiro, mas " + result367 + " <jsonPath.contains(object)> é falso")
chamada antiga: assertEquals("123", jsonPath.extractScalar(JSONReader.of(object.toString())))
nova chamada: assertEquals("123", jsonPath.extractScalar(JSONReader.of(object.toString())), "Era esperado valores iguais, mas  '123' é diferente de " + result368 + " <jsonPath.extractScalar(JSONReader.of(object.toString()))>")
chamada antiga: assertEquals(id2, object.get("id"))
nova chamada: assertEquals(id2, object.get("id"), "Era esperado valores iguais, mas  id2 é diferente de " + result369 + " <object.get('id')>")
chamada antiga: assertEquals(id3, object.get("id"))
nova chamada: assertEquals(id3, object.get("id"), "Era esperado valores iguais, mas  id3 é diferente de " + result370 + " <object.get('id')>")
chamada antiga: assertEquals(101, object.get("id"))
nova chamada: assertEquals(101, object.get("id"), "Era esperado valores iguais, mas  101 é diferente de " + result371 + " <object.get('id')>")
chamada antiga: assertEquals(102L, object.get("id"))
nova chamada: assertEquals(102L, object.get("id"), "Era esperado valores iguais, mas  102L é diferente de " + result372 + " <object.get('id')>")
chamada antiga: assertEquals(103, object.get("id"))
nova chamada: assertEquals(103, object.get("id"), "Era esperado valores iguais, mas  103 é diferente de " + result373 + " <object.get('id')>")
chamada antiga: assertEquals(0, object.size())
nova chamada: assertEquals(0, object.size(), "Era esperado valores iguais, mas  0 é diferente de " + result374 + " <object.size()>")
chamada antiga: assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", (Type) null))
nova chamada: assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", (Type) null), "Era esperado objetos iguais, mas  JSONPath.RootPath.INSTANCE é diferente de " + result375 + " <JSONPath.of('$', (Type) null)>")
chamada antiga: assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", Object.class))
nova chamada: assertSame(JSONPath.RootPath.INSTANCE, JSONPath.of("$", Object.class), "Era esperado objetos iguais, mas  JSONPath.RootPath.INSTANCE é diferente de " + result376 + " <JSONPath.of('$', Object.class)>")
chamada antiga: assertSame(jsonPath, JSONPathTyped.of(jsonPath, Integer.class))
nova chamada: assertSame(jsonPath, JSONPathTyped.of(jsonPath, Integer.class), "Era esperado objetos iguais, mas  jsonPath é diferente de " + result377 + " <JSONPathTyped.of(jsonPath, Integer.class)>")
chamada antiga: assertEquals(Long.class, jsonPath1.getType())
nova chamada: assertEquals(Long.class, jsonPath1.getType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result378 + " <jsonPath1.getType()>")
chamada antiga: assertEquals("\"2018-07-05 12:13:14\"", jsonWriter.toString())
nova chamada: assertEquals("\"2018-07-05 12:13:14\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'2018-07-05 12:13:14\'' é diferente de " + result379 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"2018-07-05T12:13:14Z\"", jsonWriter.toString())
nova chamada: assertEquals("\"2018-07-05T12:13:14Z\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'2018-07-05T12:13:14Z\'' é diferente de " + result380 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"2018-07-05\"", jsonWriter.toString())
nova chamada: assertEquals("\"2018-07-05\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'2018-07-05\'' é diferente de " + result381 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"12:13:14\"", jsonWriter.toString())
nova chamada: assertEquals("\"12:13:14\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'12:13:14\'' é diferente de " + result382 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("A", jsonWriter.toString())
nova chamada: assertEquals("A", jsonWriter.toString(), "Era esperado valores iguais, mas  'A' é diferente de " + result383 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("A", jsonWriter.toString())
nova chamada: assertEquals("A", jsonWriter.toString(), "Era esperado valores iguais, mas  'A' é diferente de " + result384 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(",A", jsonWriter.toString())
nova chamada: assertEquals(",A", jsonWriter.toString(), "Era esperado valores iguais, mas  ',A' é diferente de " + result385 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(",A", jsonWriter.toString())
nova chamada: assertEquals(",A", jsonWriter.toString(), "Era esperado valores iguais, mas  ',A' é diferente de " + result386 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(",A", new String(out.toByteArray()))
nova chamada: assertEquals(",A", new String(out.toByteArray()), "Era esperado valores iguais, mas  ',A' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("[1,2]", jsonWriter.toString())
nova chamada: assertEquals("[1,2]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result387 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[1,2]", new String(out.toByteArray()))
nova chamada: assertEquals("[1,2]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("A", jsonWriter.toString())
nova chamada: assertEquals("A", jsonWriter.toString(), "Era esperado valores iguais, mas  'A' é diferente de " + result388 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"HangZhou\"", str)
nova chamada: assertEquals("\"HangZhou\"", str, "Era esperado valores iguais, mas  '\'HangZhou\'' é diferente de " + " str")
chamada antiga: assertEquals(address.getAddress(), address1.getAddress())
nova chamada: assertEquals(address.getAddress(), address1.getAddress(), "Era esperado valores iguais, mas " + result389 + " <address.getAddress()> é diferente de " + result390 + " <address1.getAddress()>")
chamada antiga: assertEquals("{\"apple\":1,\"banana\":2}", str)
nova chamada: assertEquals("{\"apple\":1,\"banana\":2}", str, "Era esperado valores iguais, mas  '{\'apple\':1,\'banana\':2}' é diferente de " + " str")
chamada antiga: assertEquals(base.a, base2.a)
nova chamada: assertEquals(base.a, base2.a, "Era esperado valores iguais, mas  base.a é diferente de " + " base2.a")
chamada antiga: assertEquals(base.b, base2.b)
nova chamada: assertEquals(base.b, base2.b, "Era esperado valores iguais, mas  base.b é diferente de " + " base2.b")
chamada antiga: assertEquals("{\"apple\":1,\"banana\":2}", str)
nova chamada: assertEquals("{\"apple\":1,\"banana\":2}", str, "Era esperado valores iguais, mas  '{\'apple\':1,\'banana\':2}' é diferente de " + " str")
chamada antiga: assertEquals(base.a, base2.a)
nova chamada: assertEquals(base.a, base2.a, "Era esperado valores iguais, mas  base.a é diferente de " + " base2.a")
chamada antiga: assertEquals(base.b, base2.b)
nova chamada: assertEquals(base.b, base2.b, "Era esperado valores iguais, mas  base.b é diferente de " + " base2.b")
chamada antiga: assertEquals("{\"apple\":1,\"banana\":2}", str)
nova chamada: assertEquals("{\"apple\":1,\"banana\":2}", str, "Era esperado valores iguais, mas  '{\'apple\':1,\'banana\':2}' é diferente de " + " str")
chamada antiga: assertEquals(base.a, base2.a)
nova chamada: assertEquals(base.a, base2.a, "Era esperado valores iguais, mas  base.a é diferente de " + " base2.a")
chamada antiga: assertEquals(base.b, base2.b)
nova chamada: assertEquals(base.b, base2.b, "Era esperado valores iguais, mas  base.b é diferente de " + " base2.b")
chamada antiga: assertEquals("{\"apple\":1,\"banana\":2}", str)
nova chamada: assertEquals("{\"apple\":1,\"banana\":2}", str, "Era esperado valores iguais, mas  '{\'apple\':1,\'banana\':2}' é diferente de " + " str")
chamada antiga: assertEquals(base.a, base2.a)
nova chamada: assertEquals(base.a, base2.a, "Era esperado valores iguais, mas  base.a é diferente de " + " base2.a")
chamada antiga: assertEquals(base.b, base2.b)
nova chamada: assertEquals(base.b, base2.b, "Era esperado valores iguais, mas  base.b é diferente de " + " base2.b")
chamada antiga: assertEquals("{\"productName\":\"DataWorks\"}", JSON.toJSONString(product))
nova chamada: assertEquals("{\"productName\":\"DataWorks\"}", JSON.toJSONString(product), "Era esperado valores iguais, mas  '{\'productName\':\'DataWorks\'}' é diferente de " + result391 + " <JSON.toJSONString(product)>")
chamada antiga: assertEquals("DataWorks", productParsed.name)
nova chamada: assertEquals("DataWorks", productParsed.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " productParsed.name")
chamada antiga: assertEquals(base.a, base2.a)
nova chamada: assertEquals(base.a, base2.a, "Era esperado valores iguais, mas  base.a é diferente de " + " base2.a")
chamada antiga: assertEquals(base.b, base2.b)
nova chamada: assertEquals(base.b, base2.b, "Era esperado valores iguais, mas  base.b é diferente de " + " base2.b")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result392 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\"", jsonWriter.toString())
nova chamada: assertEquals("\"\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\'' é diferente de " + result393 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcdefghijk1234567890abcdefghijk1234567890\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcdefghijk1234567890abcdefghijk1234567890\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcdefghijk1234567890abcdefghijk1234567890\'' é diferente de " + result394 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcdefghijk1234567890\\\\\\\"abcdefghijk1234567890\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcdefghijk1234567890\\\\\\\"abcdefghijk1234567890\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcdefghijk1234567890\\\\\\\'abcdefghijk1234567890\'' é diferente de " + result395 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[1.0,2.0]", jsonWriter.toString())
nova chamada: assertEquals("[1.0,2.0]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[1.0,2.0]' é diferente de " + result396 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result397 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result398 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result399 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result400 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result401 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result402 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result403 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result404 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result405 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result406 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result407 + " <string.length()>")
chamada antiga: assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString())
nova chamada: assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[\'9007199254740992\',\'-9007199254740992\']' é diferente de " + result408 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString())
nova chamada: assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]' é diferente de " + result409 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"$\"}", writer.toString())
nova chamada: assertEquals("{\"$ref\":\"$\"}", writer.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'$\'}' é diferente de " + result410 + " <writer.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString())
nova chamada: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'$\'}{\'$ref\':\'中\'}' é diferente de " + result411 + " <writer.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}{\"$ref\":\"1234567890\"}", writer.toString())
nova chamada: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}{\"$ref\":\"1234567890\"}", writer.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'$\'}{\'$ref\':\'中\'}{\'$ref\':\'1234567890\'}' é diferente de " + result412 + " <writer.toString()>")
chamada antiga: assertEquals("\"中\"", writer.toString())
nova chamada: assertEquals("\"中\"", writer.toString(), "Era esperado valores iguais, mas  '\'中\'' é diferente de " + result413 + " <writer.toString()>")
chamada antiga: assertEquals("\"中\"\"中\"", writer.toString())
nova chamada: assertEquals("\"中\"\"中\"", writer.toString(), "Era esperado valores iguais, mas  '\'中\'\'中\'' é diferente de " + result414 + " <writer.toString()>")
chamada antiga: assertEquals("\"中\"\"中\"\"1234567890\"", writer.toString())
nova chamada: assertEquals("\"中\"\"中\"\"1234567890\"", writer.toString(), "Era esperado valores iguais, mas  '\'中\'\'中\'\'1234567890\'' é diferente de " + result415 + " <writer.toString()>")
chamada antiga: assertEquals("{", writer.toString())
nova chamada: assertEquals("{", writer.toString(), "Era esperado valores iguais, mas  '{' é diferente de " + result416 + " <writer.toString()>")
chamada antiga: assertEquals("[", writer.toString())
nova chamada: assertEquals("[", writer.toString(), "Era esperado valores iguais, mas  '[' é diferente de " + result417 + " <writer.toString()>")
chamada antiga: assertEquals(":", writer.toString())
nova chamada: assertEquals(":", writer.toString(), "Era esperado valores iguais, mas  ':' é diferente de " + result418 + " <writer.toString()>")
chamada antiga: assertEquals(",", writer.toString())
nova chamada: assertEquals(",", writer.toString(), "Era esperado valores iguais, mas  ',' é diferente de " + result419 + " <writer.toString()>")
chamada antiga: assertEquals(":", writer.toString())
nova chamada: assertEquals(":", writer.toString(), "Era esperado valores iguais, mas  ':' é diferente de " + result420 + " <writer.toString()>")
chamada antiga: assertEquals("}", writer.toString())
nova chamada: assertEquals("}", writer.toString(), "Era esperado valores iguais, mas  '}' é diferente de " + result421 + " <writer.toString()>")
chamada antiga: assertEquals("]", writer.toString())
nova chamada: assertEquals("]", writer.toString(), "Era esperado valores iguais, mas  ']' é diferente de " + result422 + " <writer.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result423 + " <writer.toString()>")
chamada antiga: assertEquals("0.0", vo.getProperties().get("prop1"))
nova chamada: assertEquals("0.0", vo.getProperties().get("prop1"), "Era esperado valores iguais, mas  '0.0' é diferente de " + result424 + " <vo.getProperties().get('prop1')>")
chamada antiga: assertEquals(str, JSON.toJSONString(vo))
nova chamada: assertEquals(str, JSON.toJSONString(vo), "Era esperado valores iguais, mas  str é diferente de " + result425 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals(104, object.get("id"))
nova chamada: assertEquals(104, object.get("id"), "Era esperado valores iguais, mas  104 é diferente de " + result426 + " <object.get('id')>")
chamada antiga: assertNull(JSONB.parseObject(JSONB.toBytes(null)))
nova chamada: assertNull(JSONB.parseObject(JSONB.toBytes(null)), "Era esperado nulo, mas " + result427 + " <JSONB.parseObject(JSONB.toBytes(null))> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null))).size())
nova chamada: assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null))).size(), "Era esperado valores iguais, mas  0 é diferente de " + result428 + " <JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut('id', null))).size()>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.BeanToArray)).size())
nova chamada: assertEquals(0, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.BeanToArray)).size(), "Era esperado valores iguais, mas  0 é diferente de " + result429 + " <JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut('id', null), JSONWriter.Feature.BeanToArray)).size()>")
chamada antiga: assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls)).size())
nova chamada: assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls)).size(), "Era esperado valores iguais, mas  1 é diferente de " + result430 + " <JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut('id', null), JSONWriter.Feature.WriteNulls)).size()>")
chamada antiga: assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size())
nova chamada: assertEquals(1, JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut("id", null), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size(), "Era esperado valores iguais, mas  1 é diferente de " + result431 + " <JSONB.parseObject(JSONB.toBytes(new JSONObject().fluentPut('id', null), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size()>")
chamada antiga: assertEquals(20, JSONB.parseObject(JSONB.toBytes(object, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size())
nova chamada: assertEquals(20, JSONB.parseObject(JSONB.toBytes(object, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size(), "Era esperado valores iguais, mas  20 é diferente de " + result432 + " <JSONB.parseObject(JSONB.toBytes(object, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.BeanToArray)).size()>")
chamada antiga: assertSame(parsed, parsed.get("root"))
nova chamada: assertSame(parsed, parsed.get("root"), "Era esperado objetos iguais, mas  parsed é diferente de " + result433 + " <parsed.get('root')>")
chamada antiga: assertSame(parsed, parsed.getJSONArray("root").get(0))
nova chamada: assertSame(parsed, parsed.getJSONArray("root").get(0), "Era esperado objetos iguais, mas  parsed é diferente de " + result434 + " <parsed.getJSONArray('root').get(0)>")
chamada antiga: assertSame(parsed, parsed.getJSONObject("child").get("root"))
nova chamada: assertSame(parsed, parsed.getJSONObject("child").get("root"), "Era esperado objetos iguais, mas  parsed é diferente de " + result435 + " <parsed.getJSONObject('child').get('root')>")
chamada antiga: assertSame(parsed.getJSONObject("child1"), parsed.getJSONObject("child2"))
nova chamada: assertSame(parsed.getJSONObject("child1"), parsed.getJSONObject("child2"), "Era esperado objetos iguais, mas " + result436 + " <parsed.getJSONObject('child1')> é diferente de " + result437 + " <parsed.getJSONObject('child2')>")
chamada antiga: assertEquals(1, JSON.parseObject(str).get(key))
nova chamada: assertEquals(1, JSON.parseObject(str).get(key), "Era esperado valores iguais, mas  1 é diferente de " + result438 + " <JSON.parseObject(str).get(key)>")
chamada antiga: assertEquals(1, JSON.parseObject(utf8Bytes).get(key))
nova chamada: assertEquals(1, JSON.parseObject(utf8Bytes).get(key), "Era esperado valores iguais, mas  1 é diferente de " + result439 + " <JSON.parseObject(utf8Bytes).get(key)>")
chamada antiga: assertEquals(1, JSON.parseObject(str).get(key))
nova chamada: assertEquals(1, JSON.parseObject(str).get(key), "Era esperado valores iguais, mas  1 é diferente de " + result440 + " <JSON.parseObject(str).get(key)>")
chamada antiga: assertEquals(1, JSON.parseObject(utf8Bytes).get(key))
nova chamada: assertEquals(1, JSON.parseObject(utf8Bytes).get(key), "Era esperado valores iguais, mas  1 é diferente de " + result441 + " <JSON.parseObject(utf8Bytes).get(key)>")
chamada antiga: assertEquals(object.size(), object2.size())
nova chamada: assertEquals(object.size(), object2.size(), "Era esperado valores iguais, mas " + result442 + " <object.size()> é diferente de " + result443 + " <object2.size()>")
chamada antiga: assertTrue(object2.containsKey("id"))
nova chamada: assertTrue(object2.containsKey("id"), "Era esperado verdadeiro, mas " + result444 + " <object2.containsKey('id')> é falso")
chamada antiga: assertEquals(list.size(), list2.size())
nova chamada: assertEquals(list.size(), list2.size(), "Era esperado valores iguais, mas " + result445 + " <list.size()> é diferente de " + result446 + " <list2.size()>")
chamada antiga: assertEquals(list.get(0).getClass(), list2.get(0).getClass())
nova chamada: assertEquals(list.get(0).getClass(), list2.get(0).getClass(), "Era esperado valores iguais, mas " + result447 + " <list.get(0).getClass()> é diferente de " + result448 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getObjectClass())
nova chamada: assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getObjectClass(), "Era esperado valores iguais, mas  Map.class é diferente de " + result449 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getObjectClass()>")
chamada antiga: assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(new TypeReference<Map<String, String>>() {
}.getType()).getObjectClass())
nova chamada: assertEquals(Map.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(new TypeReference<Map<String, String>>() {
}.getType()).getObjectClass(), "Era esperado valores iguais, mas  Map.class é diferente de " + result450 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(new TypeReference<Map<String, String>>() {\n}.getType()).getObjectClass()>")
chamada antiga: assertNull(JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getBuildFunction())
nova chamada: assertNull(JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getBuildFunction(), "Era esperado nulo, mas " + result451 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Map.class).getBuildFunction()> não é nulo")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result452 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result453 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("null", JSON.toJSONString(decimal))
nova chamada: assertEquals("null", JSON.toJSONString(decimal), "Era esperado valores iguais, mas  'null' é diferente de " + result454 + " <JSON.toJSONString(decimal)>")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(decimal)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(decimal)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(decimal))")
chamada antiga: assertEquals("\"90071992547409910\"", JSON.toJSONString(decimal, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("\"90071992547409910\"", JSON.toJSONString(decimal, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '\'90071992547409910\'' é diferente de " + result455 + " <JSON.toJSONString(decimal, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("\"90071992547409910\"", new String(JSON.toJSONBytes(decimal, JSONWriter.Feature.BrowserCompatible)))
nova chamada: assertEquals("\"90071992547409910\"", new String(JSON.toJSONBytes(decimal, JSONWriter.Feature.BrowserCompatible)), "Era esperado valores iguais, mas  '\'90071992547409910\'' é diferente de " + " new String(JSON.toJSONBytes(decimal, JSONWriter.Feature.BrowserCompatible))")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result456 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result457 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(3, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(3, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  3 é diferente de " + result458 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result459 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result460 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result461 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result462 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result463 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result464 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result465 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result466 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result467 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result468 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result469 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result470 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result471 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result472 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result473 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result474 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result475 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(21, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(21, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  21 é diferente de " + result476 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result477 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result478 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(21, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(21, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  21 é diferente de " + result479 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result480 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result481 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result482 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result483 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result484 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result485 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result486 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result487 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result488 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result489 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result490 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result491 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result492 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result493 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result494 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result495 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result496 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result497 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result498 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result499 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result500 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result501 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result502 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result503 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result504 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result505 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result506 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result507 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result508 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result509 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result510 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result511 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result512 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result513 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result514 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result515 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result516 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result517 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(13, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(13, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  13 é diferente de " + result518 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result519 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result520 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(0, vo.getDate().getSecond())
nova chamada: assertEquals(0, vo.getDate().getSecond(), "Era esperado valores iguais, mas  0 é diferente de " + result521 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result522 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result523 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(13, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(13, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  13 é diferente de " + result524 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result525 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result526 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(0, vo.getDate().getSecond())
nova chamada: assertEquals(0, vo.getDate().getSecond(), "Era esperado valores iguais, mas  0 é diferente de " + result527 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result528 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result529 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(2, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(2, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  2 é diferente de " + result530 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result531 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result532 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result533 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result534 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result535 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(2, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(2, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  2 é diferente de " + result536 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result537 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result538 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result539 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result540 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result541 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(13, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(13, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  13 é diferente de " + result542 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result543 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result544 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(0, vo.getDate().getSecond())
nova chamada: assertEquals(0, vo.getDate().getSecond(), "Era esperado valores iguais, mas  0 é diferente de " + result545 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result546 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result547 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(13, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(13, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  13 é diferente de " + result548 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result549 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result550 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(0, vo.getDate().getSecond())
nova chamada: assertEquals(0, vo.getDate().getSecond(), "Era esperado valores iguais, mas  0 é diferente de " + result551 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result552 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result553 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result554 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result555 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result556 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result557 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result558 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(1, vo.getDate().getMonthValue())
nova chamada: assertEquals(1, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  1 é diferente de " + result559 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result560 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result561 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result562 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result563 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result564 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result565 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(3, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(3, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  3 é diferente de " + result566 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result567 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result568 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result569 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result570 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result571 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(3, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(3, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  3 é diferente de " + result572 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(12, vo.getDate().getHour())
nova chamada: assertEquals(12, vo.getDate().getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result573 + " <vo.getDate().getHour()>")
chamada antiga: assertEquals(13, vo.getDate().getMinute())
nova chamada: assertEquals(13, vo.getDate().getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result574 + " <vo.getDate().getMinute()>")
chamada antiga: assertEquals(14, vo.getDate().getSecond())
nova chamada: assertEquals(14, vo.getDate().getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result575 + " <vo.getDate().getSecond()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result576 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result577 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result578 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result579 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result580 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result581 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result582 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result583 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result584 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result585 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result586 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result587 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101, bytes[0])
nova chamada: assertEquals(101, bytes[0], "Era esperado valores iguais, mas  101 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102, bytes[1])
nova chamada: assertEquals(102, bytes[1], "Era esperado valores iguais, mas  102 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(101, array[0])
nova chamada: assertEquals(101, array[0], "Era esperado valores iguais, mas  101 é diferente de " + " array[0]")
chamada antiga: assertEquals(102, array[1])
nova chamada: assertEquals(102, array[1], "Era esperado valores iguais, mas  102 é diferente de " + " array[1]")
chamada antiga: assertEquals(expected, JSON.parseObject(str).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(str).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result588 + " <JSON.parseObject(str).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(bytes).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result589 + " <JSON.parseObject(bytes).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result590 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result591 + " <JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get('val')>")
chamada antiga: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"))
nova chamada: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result592 + " <TestUtils.createJSONReaderStr(str).read(JSONObject.class).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, Bean.class).val)
nova chamada: assertEquals(expected, JSON.parseObject(bytes, Bean.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " JSON.parseObject(bytes, Bean.class).val")
chamada antiga: assertEquals(expected, JSON.parseObject(str, Bean.class).val)
nova chamada: assertEquals(expected, JSON.parseObject(str, Bean.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " JSON.parseObject(str, Bean.class).val")
chamada antiga: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean.class).val)
nova chamada: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " TestUtils.createJSONReaderStr(str).read(Bean.class).val")
chamada antiga: assertEquals(expected, JSON.parseObject(str).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(str).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result593 + " <JSON.parseObject(str).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(bytes).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result594 + " <JSON.parseObject(bytes).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result595 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"))
nova chamada: assertEquals(expected, JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result596 + " <JSON.parseObject(utf16, 0, utf16.length, StandardCharsets.UTF_16).get('val')>")
chamada antiga: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"))
nova chamada: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(JSONObject.class).get("val"), "Era esperado valores iguais, mas  expected é diferente de " + result597 + " <TestUtils.createJSONReaderStr(str).read(JSONObject.class).get('val')>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, Bean1.class).val)
nova chamada: assertEquals(expected, JSON.parseObject(bytes, Bean1.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " JSON.parseObject(bytes, Bean1.class).val")
chamada antiga: assertEquals(expected, JSON.parseObject(str, Bean1.class).val)
nova chamada: assertEquals(expected, JSON.parseObject(str, Bean1.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " JSON.parseObject(str, Bean1.class).val")
chamada antiga: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean1.class).val)
nova chamada: assertEquals(expected, TestUtils.createJSONReaderStr(str).read(Bean1.class).val, "Era esperado valores iguais, mas  expected é diferente de " + " TestUtils.createJSONReaderStr(str).read(Bean1.class).val")
chamada antiga: assertEquals(expectedDec, JSON.parseObject(bytes, Bean.class).val)
nova chamada: assertEquals(expectedDec, JSON.parseObject(bytes, Bean.class).val, "Era esperado valores iguais, mas  expectedDec é diferente de " + " JSON.parseObject(bytes, Bean.class).val")
chamada antiga: assertEquals(expectedDec, JSON.parseObject(str, Bean.class).val)
nova chamada: assertEquals(expectedDec, JSON.parseObject(str, Bean.class).val, "Era esperado valores iguais, mas  expectedDec é diferente de " + " JSON.parseObject(str, Bean.class).val")
chamada antiga: assertEquals(expectedDec, TestUtils.createJSONReaderStr(str).read(Bean.class).val)
nova chamada: assertEquals(expectedDec, TestUtils.createJSONReaderStr(str).read(Bean.class).val, "Era esperado valores iguais, mas  expectedDec é diferente de " + " TestUtils.createJSONReaderStr(str).read(Bean.class).val")
chamada antiga: assertEquals(expectedDoubleValue, JSON.parseObject(bytes, Bean2.class).val)
nova chamada: assertEquals(expectedDoubleValue, JSON.parseObject(bytes, Bean2.class).val, "Era esperado valores iguais, mas  expectedDoubleValue é diferente de " + " JSON.parseObject(bytes, Bean2.class).val")
chamada antiga: assertEquals(expectedDoubleValue, JSON.parseObject(str, Bean2.class).val)
nova chamada: assertEquals(expectedDoubleValue, JSON.parseObject(str, Bean2.class).val, "Era esperado valores iguais, mas  expectedDoubleValue é diferente de " + " JSON.parseObject(str, Bean2.class).val")
chamada antiga: assertEquals(expectedDoubleValue, TestUtils.createJSONReaderStr(str).read(Bean2.class).val)
nova chamada: assertEquals(expectedDoubleValue, TestUtils.createJSONReaderStr(str).read(Bean2.class).val, "Era esperado valores iguais, mas  expectedDoubleValue é diferente de " + " TestUtils.createJSONReaderStr(str).read(Bean2.class).val")
chamada antiga: assertEquals(str, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(str, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  str é diferente de " + result598 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result599 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(str, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(str, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  str é diferente de " + result600 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result601 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(str, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(str, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  str é diferente de " + result602 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result603 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(str, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(str, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  str é diferente de " + result604 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result605 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(str, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(str, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  str é diferente de " + result606 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result607 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(bean.id, bean2.id)
nova chamada: assertEquals(bean.id, bean2.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean2.id")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(bean.type, bean2.type)
nova chamada: assertEquals(bean.type, bean2.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean2.type")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0D, v1.v0000)
nova chamada: assertEquals(0D, v1.v0000, "Era esperado valores iguais, mas  0D é diferente de " + " v1.v0000")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0D, v1.v0000)
nova chamada: assertEquals(0D, v1.v0000, "Era esperado valores iguais, mas  0D é diferente de " + " v1.v0000")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0D, v1.v0000)
nova chamada: assertEquals(0D, v1.v0000, "Era esperado valores iguais, mas  0D é diferente de " + " v1.v0000")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertNull(bytes)
nova chamada: assertNull(bytes, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(5, array.length)
nova chamada: assertEquals(5, array.length, "Era esperado valores iguais, mas  5 é diferente de " + " array.length")
chamada antiga: assertEquals(Boolean.TRUE, array[0])
nova chamada: assertEquals(Boolean.TRUE, array[0], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " array[0]")
chamada antiga: assertEquals(Boolean.FALSE, array[1])
nova chamada: assertEquals(Boolean.FALSE, array[1], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " array[1]")
chamada antiga: assertNull(array[2])
nova chamada: assertNull(array[2], "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(Boolean.TRUE, array[3])
nova chamada: assertEquals(Boolean.TRUE, array[3], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " array[3]")
chamada antiga: assertEquals(Boolean.FALSE, array[4])
nova chamada: assertEquals(Boolean.FALSE, array[4], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " array[4]")
chamada antiga: assertEquals(Boolean.TRUE, array[0])
nova chamada: assertEquals(Boolean.TRUE, array[0], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " array[0]")
chamada antiga: assertEquals(Boolean.FALSE, array[1])
nova chamada: assertEquals(Boolean.FALSE, array[1], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " array[1]")
chamada antiga: assertNull(array[2])
nova chamada: assertNull(array[2], "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(Boolean.TRUE, array[3])
nova chamada: assertEquals(Boolean.TRUE, array[3], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " array[3]")
chamada antiga: assertEquals(Boolean.FALSE, array[4])
nova chamada: assertEquals(Boolean.FALSE, array[4], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " array[4]")
chamada antiga: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result608 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean\',\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result609 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result610 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.primitves.BooleanArrayTest$Bean1\',\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result611 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\"value\":true}", str)
nova chamada: assertEquals("{\"value\":true}", str, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " str")
chamada antiga: assertEquals(a.value, a1.value)
nova chamada: assertEquals(a.value, a1.value, "Era esperado valores iguais, mas  a.value é diferente de " + " a1.value")
chamada antiga: assertEquals("{\"value\":true}", str)
nova chamada: assertEquals("{\"value\":true}", str, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " str")
chamada antiga: assertEquals(b.value, b1.value)
nova chamada: assertEquals(b.value, b1.value, "Era esperado valores iguais, mas  b.value é diferente de " + " b1.value")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, map2.get("date"))
nova chamada: assertEquals(date, map2.get("date"), "Era esperado valores iguais, mas  date é diferente de " + result612 + " <map2.get('date')>")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(date, map2.get("date"))
nova chamada: assertEquals(date, map2.get("date"), "Era esperado valores iguais, mas  date é diferente de " + result613 + " <map2.get('date')>")
chamada antiga: assertEquals(date, date2)
nova chamada: assertEquals(date, date2, "Era esperado valores iguais, mas  date é diferente de " + " date2")
chamada antiga: assertEquals(str, str_utf16be)
nova chamada: assertEquals(str, str_utf16be, "Era esperado valores iguais, mas  str é diferente de " + " str_utf16be")
chamada antiga: assertEquals(String.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(String.class).getObjectClass())
nova chamada: assertEquals(String.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(String.class).getObjectClass(), "Era esperado valores iguais, mas  String.class é diferente de " + result614 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(String.class).getObjectClass()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals("{\"size\":101}", str)
nova chamada: assertEquals("{\"size\":101}", str, "Era esperado valores iguais, mas  '{\'size\':101}' é diferente de " + " str")
chamada antiga: assertEquals(bean.size, bean1.size)
nova chamada: assertEquals(bean.size, bean1.size, "Era esperado valores iguais, mas  bean.size é diferente de " + " bean1.size")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, Long.class).longValue())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, Long.class).longValue(), "Era esperado valores iguais, mas  0 é diferente de " + result615 + " <JSONB.parseObject(jsonbBytes, Long.class).longValue()>")
chamada antiga: assertEquals(-8388608L, JSONB.parseObject(jsonbBytes, Long.class).longValue())
nova chamada: assertEquals(-8388608L, JSONB.parseObject(jsonbBytes, Long.class).longValue(), "Era esperado valores iguais, mas  -8388608L é diferente de " + result616 + " <JSONB.parseObject(jsonbBytes, Long.class).longValue()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(Long.valueOf(1001), v1.getV0000())
nova chamada: assertEquals(Long.valueOf(1001), v1.getV0000(), "Era esperado valores iguais, mas " + result617 + " <Long.valueOf(1001)> é diferente de " + result618 + " <v1.getV0000()>")
chamada antiga: assertEquals(Long.valueOf(1), v1.getV0000())
nova chamada: assertEquals(Long.valueOf(1), v1.getV0000(), "Era esperado valores iguais, mas " + result619 + " <Long.valueOf(1)> é diferente de " + result620 + " <v1.getV0000()>")
chamada antiga: assertEquals(Long.valueOf(0), v1.getV0000())
nova chamada: assertEquals(Long.valueOf(0), v1.getV0000(), "Era esperado valores iguais, mas " + result621 + " <Long.valueOf(0)> é diferente de " + result622 + " <v1.getV0000()>")
chamada antiga: assertNull(v1.getV0000())
nova chamada: assertNull(v1.getV0000(), "Era esperado nulo, mas " + result623 + " <v1.getV0000()> não é nulo")
chamada antiga: assertEquals(Long.valueOf(1001), v1.getV0000())
nova chamada: assertEquals(Long.valueOf(1001), v1.getV0000(), "Era esperado valores iguais, mas " + result624 + " <Long.valueOf(1001)> é diferente de " + result625 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals("[0,0,0,0,0,0]", str)
nova chamada: assertEquals("[0,0,0,0,0,0]", str, "Era esperado valores iguais, mas  '[0,0,0,0,0,0]' é diferente de " + " str")
chamada antiga: assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())))
nova chamada: assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())), "Era esperado valores iguais, mas " + result626 + " <Arrays.toString(array)> é diferente de " + result627 + " <Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass()))>")
chamada antiga: assertEquals("[0,0,0,0,0,0]", str)
nova chamada: assertEquals("[0,0,0,0,0,0]", str, "Era esperado valores iguais, mas  '[0,0,0,0,0,0]' é diferente de " + " str")
chamada antiga: assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())))
nova chamada: assertEquals(Arrays.toString(array), Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass())), "Era esperado valores iguais, mas " + result628 + " <Arrays.toString(array)> é diferente de " + result629 + " <Arrays.toString((Object[]) JSONReader.of(str).read(array.getClass()))>")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result630 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result631 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result632 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result633 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result634 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result635 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[[0,1,2,3,4],[5,6],[7,8]]", str)
nova chamada: assertEquals("[[0,1,2,3,4],[5,6],[7,8]]", str, "Era esperado valores iguais, mas  '[[0,1,2,3,4],[5,6],[7,8]]' é diferente de " + " str")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result636 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result637 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result638 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0,1,2,3,4]", str)
nova chamada: assertEquals("[0,1,2,3,4]", str, "Era esperado valores iguais, mas  '[0,1,2,3,4]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result639 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
nova chamada: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str, "Era esperado valores iguais, mas  '[0.0,1.0,2.0,3.0,4.0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result640 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
nova chamada: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str, "Era esperado valores iguais, mas  '[0.0,1.0,2.0,3.0,4.0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result641 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
nova chamada: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str, "Era esperado valores iguais, mas  '[0.0,1.0,2.0,3.0,4.0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result642 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str)
nova chamada: assertEquals("[0.0,1.0,2.0,3.0,4.0]", str, "Era esperado valores iguais, mas  '[0.0,1.0,2.0,3.0,4.0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result643 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals(123.0D, vo.value.getAsDouble())
nova chamada: assertEquals(123.0D, vo.value.getAsDouble(), "Era esperado valores iguais, mas  123.0D é diferente de " + result644 + " <vo.value.getAsDouble()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(123D, vo.value.getAsDouble())
nova chamada: assertEquals(123D, vo.value.getAsDouble(), "Era esperado valores iguais, mas  123D é diferente de " + result645 + " <vo.value.getAsDouble()>")
chamada antiga: assertEquals(vo.value, vo2.value)
nova chamada: assertEquals(vo.value, vo2.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " vo2.value")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result646 + " <vo.value.isPresent()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result647 + " <vo.value.isPresent()>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101D, bytes[0])
nova chamada: assertEquals(101D, bytes[0], "Era esperado valores iguais, mas  101D é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102D, bytes[1])
nova chamada: assertEquals(102D, bytes[1], "Era esperado valores iguais, mas  102D é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(101D, array[0])
nova chamada: assertEquals(101D, array[0], "Era esperado valores iguais, mas  101D é diferente de " + " array[0]")
chamada antiga: assertEquals(102D, array[1])
nova chamada: assertEquals(102D, array[1], "Era esperado valores iguais, mas  102D é diferente de " + " array[1]")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO()), "Era esperado valores iguais, mas  '{}' é diferente de " + result648 + " <JSON.toJSONString(new VO())>")
chamada antiga: assertEquals("{}", new String(JSON.toJSONBytes(new VO())))
nova chamada: assertEquals("{}", new String(JSON.toJSONBytes(new VO())), "Era esperado valores iguais, mas  '{}' é diferente de " + " new String(JSON.toJSONBytes(new VO()))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result649 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result650 + " <JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result651 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result652 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result653 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result654 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result655 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result656 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result657 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result658 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result659 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result660 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result661 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result662 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result663 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result664 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result665 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result666 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result667 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result668 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result669 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result670 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result671 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result672 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result673 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result674 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.TRUE, v1.getV0000())
nova chamada: assertEquals(Boolean.TRUE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result675 + " <v1.getV0000()>")
chamada antiga: assertEquals(Boolean.FALSE, v1.getV0000())
nova chamada: assertEquals(Boolean.FALSE, v1.getV0000(), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result676 + " <v1.getV0000()>")
chamada antiga: assertNull(bytes)
nova chamada: assertNull(bytes, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, chars.length)
nova chamada: assertEquals(2, chars.length, "Era esperado valores iguais, mas  2 é diferente de " + " chars.length")
chamada antiga: assertEquals(101, chars[0])
nova chamada: assertEquals(101, chars[0], "Era esperado valores iguais, mas  101 é diferente de " + " chars[0]")
chamada antiga: assertEquals(102, chars[1])
nova chamada: assertEquals(102, chars[1], "Era esperado valores iguais, mas  102 é diferente de " + " chars[1]")
chamada antiga: assertEquals(2, chars.length)
nova chamada: assertEquals(2, chars.length, "Era esperado valores iguais, mas  2 é diferente de " + " chars.length")
chamada antiga: assertEquals(101, chars[0])
nova chamada: assertEquals(101, chars[0], "Era esperado valores iguais, mas  101 é diferente de " + " chars[0]")
chamada antiga: assertEquals(102, chars[1])
nova chamada: assertEquals(102, chars[1], "Era esperado valores iguais, mas  102 é diferente de " + " chars[1]")
chamada antiga: assertEquals(1, chars.length)
nova chamada: assertEquals(1, chars.length, "Era esperado valores iguais, mas  1 é diferente de " + " chars.length")
chamada antiga: assertEquals('A', chars[0])
nova chamada: assertEquals('A', chars[0], "Era esperado valores iguais, mas  'A' é diferente de " + " chars[0]")
chamada antiga: assertEquals(1, chars.length)
nova chamada: assertEquals(1, chars.length, "Era esperado valores iguais, mas  1 é diferente de " + " chars.length")
chamada antiga: assertEquals('A', chars[0])
nova chamada: assertEquals('A', chars[0], "Era esperado valores iguais, mas  'A' é diferente de " + " chars[0]")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result677 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result678 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("id", entry.getKey())
nova chamada: assertEquals("id", entry.getKey(), "Era esperado valores iguais, mas  'id' é diferente de " + result679 + " <entry.getKey()>")
chamada antiga: assertEquals(101, entry.getValue())
nova chamada: assertEquals(101, entry.getValue(), "Era esperado valores iguais, mas  101 é diferente de " + result680 + " <entry.getValue()>")
chamada antiga: assertEquals(102, entry.getValue())
nova chamada: assertEquals(102, entry.getValue(), "Era esperado valores iguais, mas  102 é diferente de " + result681 + " <entry.getValue()>")
chamada antiga: assertEquals("id", entry.getKey())
nova chamada: assertEquals("id", entry.getKey(), "Era esperado valores iguais, mas  'id' é diferente de " + result682 + " <entry.getKey()>")
chamada antiga: assertEquals(101, ((Number) entry.getValue()).intValue())
nova chamada: assertEquals(101, ((Number) entry.getValue()).intValue(), "Era esperado valores iguais, mas  101 é diferente de " + result683 + " <((Number) entry.getValue()).intValue()>")
chamada antiga: assertEquals(102, entry.getValue())
nova chamada: assertEquals(102, entry.getValue(), "Era esperado valores iguais, mas  102 é diferente de " + result684 + " <entry.getValue()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(BigDecimal.ZERO, decimal)
nova chamada: assertEquals(BigDecimal.ZERO, decimal, "Era esperado valores iguais, mas  BigDecimal.ZERO é diferente de " + " decimal")
chamada antiga: assertEquals(BigDecimal.valueOf(-8388608), decimal)
nova chamada: assertEquals(BigDecimal.valueOf(-8388608), decimal, "Era esperado valores iguais, mas " + result685 + " <BigDecimal.valueOf(-8388608)> é diferente de " + " decimal")
chamada antiga: assertEquals(BigDecimal.ONE, vo.getId())
nova chamada: assertEquals(BigDecimal.ONE, vo.getId(), "Era esperado valores iguais, mas  BigDecimal.ONE é diferente de " + result686 + " <vo.getId()>")
chamada antiga: assertEquals(BigDecimal.ZERO, vo.getId())
nova chamada: assertEquals(BigDecimal.ZERO, vo.getId(), "Era esperado valores iguais, mas  BigDecimal.ZERO é diferente de " + result687 + " <vo.getId()>")
chamada antiga: assertEquals(new BigDecimal("638860.1"), vo.getId())
nova chamada: assertEquals(new BigDecimal("638860.1"), vo.getId(), "Era esperado valores iguais, mas  new BigDecimal('638860.1') é diferente de " + result688 + " <vo.getId()>")
chamada antiga: assertEquals("{\"v0000\":[],\"v0001\":[]}", str)
nova chamada: assertEquals("{\"v0000\":[],\"v0001\":[]}", str, "Era esperado valores iguais, mas  '{\'v0000\':[],\'v0001\':[]}' é diferente de " + " str")
chamada antiga: assertEquals(123, vo.value.getAsLong())
nova chamada: assertEquals(123, vo.value.getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result689 + " <vo.value.getAsLong()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(123, vo.value.getAsLong())
nova chamada: assertEquals(123, vo.value.getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result690 + " <vo.value.getAsLong()>")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result691 + " <vo.value.isPresent()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result692 + " <vo.value.isPresent()>")
chamada antiga: assertEquals("{\"size\":101}", str)
nova chamada: assertEquals("{\"size\":101}", str, "Era esperado valores iguais, mas  '{\'size\':101}' é diferente de " + " str")
chamada antiga: assertEquals(bean.size, bean1.size)
nova chamada: assertEquals(bean.size, bean1.size, "Era esperado valores iguais, mas  bean.size é diferente de " + " bean1.size")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result693 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result694 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result695 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)))
nova chamada: assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result696 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result697 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result698 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result699 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}' é diferente de " + result700 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890,12345678901,123456789012]}' é diferente de " + result701 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, Short.class).shortValue())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, Short.class).shortValue(), "Era esperado valores iguais, mas  0 é diferente de " + result702 + " <JSONB.parseObject(jsonbBytes, Short.class).shortValue()>")
chamada antiga: assertEquals((short) -8388608, JSONB.parseObject(jsonbBytes, Short.class).shortValue())
nova chamada: assertEquals((short) -8388608, JSONB.parseObject(jsonbBytes, Short.class).shortValue(), "Era esperado valores iguais, mas  (short) -8388608 é diferente de " + result703 + " <JSONB.parseObject(jsonbBytes, Short.class).shortValue()>")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result704 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result705 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result706 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)))
nova chamada: assertEquals("{\"values\":[]}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result707 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result708 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NullAsDefaultValue)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result709 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result710 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}' é diferente de " + result711 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3,123,1234,12345,123456,1234567,12345678,123456789,1234567890]}' é diferente de " + result712 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals(vo.getDate(), v1.getDate())
nova chamada: assertEquals(vo.getDate(), v1.getDate(), "Era esperado valores iguais, mas " + result713 + " <vo.getDate()> é diferente de " + result714 + " <v1.getDate()>")
chamada antiga: assertEquals(now, localDate)
nova chamada: assertEquals(now, localDate, "Era esperado valores iguais, mas  now é diferente de " + " localDate")
chamada antiga: assertEquals(now, localDate)
nova chamada: assertEquals(now, localDate, "Era esperado valores iguais, mas  now é diferente de " + " localDate")
chamada antiga: assertEquals(vo.getDate(), v1.getDate())
nova chamada: assertEquals(vo.getDate(), v1.getDate(), "Era esperado valores iguais, mas " + result715 + " <vo.getDate()> é diferente de " + result716 + " <v1.getDate()>")
chamada antiga: assertEquals(vo.getDate(), v1.getDate())
nova chamada: assertEquals(vo.getDate(), v1.getDate(), "Era esperado valores iguais, mas " + result717 + " <vo.getDate()> é diferente de " + result718 + " <v1.getDate()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result719 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result720 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(3, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(3, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  3 é diferente de " + result721 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result722 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result723 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result724 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result725 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result726 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result727 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result728 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result729 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result730 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result731 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result732 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result733 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result734 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result735 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result736 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result737 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(12, vo.getDate().getMonthValue())
nova chamada: assertEquals(12, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result738 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(11, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(11, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  11 é diferente de " + result739 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result740 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result741 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result742 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result743 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result744 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result745 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result746 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result747 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result748 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals(2021, vo.getDate().getYear())
nova chamada: assertEquals(2021, vo.getDate().getYear(), "Era esperado valores iguais, mas  2021 é diferente de " + result749 + " <vo.getDate().getYear()>")
chamada antiga: assertEquals(2, vo.getDate().getMonthValue())
nova chamada: assertEquals(2, vo.getDate().getMonthValue(), "Era esperado valores iguais, mas  2 é diferente de " + result750 + " <vo.getDate().getMonthValue()>")
chamada antiga: assertEquals(1, vo.getDate().getDayOfMonth())
nova chamada: assertEquals(1, vo.getDate().getDayOfMonth(), "Era esperado valores iguais, mas  1 é diferente de " + result751 + " <vo.getDate().getDayOfMonth()>")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result752 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result753 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result754 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result755 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(new VO2(), JSONWriter.Feature.WriteNulls)), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result756 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result757 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result758 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))))
nova chamada: assertEquals("{\"values\":[1,2,3]}", JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo))), "Era esperado valores iguais, mas  '{\'values\':[1,2,3]}' é diferente de " + result759 + " <JSON.toJSONString(JSONB.parseObject(JSONB.toBytes(vo)))>")
chamada antiga: assertEquals("1", array.get(0))
nova chamada: assertEquals("1", array.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result760 + " <array.get(0)>")
chamada antiga: assertEquals("[\"1\",\"2\",\"3\"]", jsonWriter.toString())
nova chamada: assertEquals("[\"1\",\"2\",\"3\"]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[\'1\',\'2\',\'3\']' é diferente de " + result761 + " <jsonWriter.toString()>")
chamada antiga: assertNotNull(vo.getV0000())
nova chamada: assertNotNull(vo.getV0000(), "Era esperado não nulo, mas " + result762 + " <vo.getV0000()> é nulo")
chamada antiga: assertEquals(1, vo.getV0000().size())
nova chamada: assertEquals(1, vo.getV0000().size(), "Era esperado valores iguais, mas  1 é diferente de " + result763 + " <vo.getV0000().size()>")
chamada antiga: assertEquals("1001", vo.getV0000().get(0))
nova chamada: assertEquals("1001", vo.getV0000().get(0), "Era esperado valores iguais, mas  '1001' é diferente de " + result764 + " <vo.getV0000().get(0)>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(3, array.length())
nova chamada: assertEquals(3, array.length(), "Era esperado valores iguais, mas  3 é diferente de " + result765 + " <array.length()>")
chamada antiga: assertEquals(101, array.get(0))
nova chamada: assertEquals(101, array.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result766 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.get(1))
nova chamada: assertEquals(0, array.get(1), "Era esperado valores iguais, mas  0 é diferente de " + result767 + " <array.get(1)>")
chamada antiga: assertEquals(102, array.get(2))
nova chamada: assertEquals(102, array.get(2), "Era esperado valores iguais, mas  102 é diferente de " + result768 + " <array.get(2)>")
chamada antiga: assertEquals(3, array.length())
nova chamada: assertEquals(3, array.length(), "Era esperado valores iguais, mas  3 é diferente de " + result769 + " <array.length()>")
chamada antiga: assertEquals(101, array.get(0))
nova chamada: assertEquals(101, array.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result770 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.get(1))
nova chamada: assertEquals(0, array.get(1), "Era esperado valores iguais, mas  0 é diferente de " + result771 + " <array.get(1)>")
chamada antiga: assertEquals(102, array.get(2))
nova chamada: assertEquals(102, array.get(2), "Era esperado valores iguais, mas  102 é diferente de " + result772 + " <array.get(2)>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101, bytes[0])
nova chamada: assertEquals(101, bytes[0], "Era esperado valores iguais, mas  101 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102, bytes[1])
nova chamada: assertEquals(102, bytes[1], "Era esperado valores iguais, mas  102 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(5, array.length)
nova chamada: assertEquals(5, array.length, "Era esperado valores iguais, mas  5 é diferente de " + " array.length")
chamada antiga: assertEquals(0, array[0])
nova chamada: assertEquals(0, array[0], "Era esperado valores iguais, mas  0 é diferente de " + " array[0]")
chamada antiga: assertEquals(1, array[1])
nova chamada: assertEquals(1, array[1], "Era esperado valores iguais, mas  1 é diferente de " + " array[1]")
chamada antiga: assertEquals(null, array[2])
nova chamada: assertEquals(null, array[2], "Era esperado valores iguais, mas  null é diferente de " + " array[2]")
chamada antiga: assertEquals(102, array[3])
nova chamada: assertEquals(102, array[3], "Era esperado valores iguais, mas  102 é diferente de " + " array[3]")
chamada antiga: assertEquals(1001, array[4])
nova chamada: assertEquals(1001, array[4], "Era esperado valores iguais, mas  1001 é diferente de " + " array[4]")
chamada antiga: assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()))
nova chamada: assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()), "Era esperado valores iguais, mas  '12345678901234567890123456789012345678901234567890123456789012345678901234567890' é diferente de " + result773 + " <JSON.toJSONString(vo2.getValue())>")
chamada antiga: assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()))
nova chamada: assertEquals("12345678901234567890123456789012345678901234567890123456789012345678901234567890", JSON.toJSONString(vo2.getValue()), "Era esperado valores iguais, mas  '12345678901234567890123456789012345678901234567890123456789012345678901234567890' é diferente de " + result774 + " <JSON.toJSONString(vo2.getValue())>")
chamada antiga: assertEquals(Integer.valueOf(100), vo.getValue())
nova chamada: assertEquals(Integer.valueOf(100), vo.getValue(), "Era esperado valores iguais, mas " + result775 + " <Integer.valueOf(100)> é diferente de " + result776 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("1.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("1.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('1.1') é diferente de " + result777 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("200.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("200.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('200.1') é diferente de " + result778 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("65536.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("65536.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('65536.1') é diferente de " + result779 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("6388607.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("6388607.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('6388607.1') é diferente de " + result780 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("2147483648.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("2147483648.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('2147483648.1') é diferente de " + result781 + " <vo.getValue()>")
chamada antiga: assertEquals(new BigDecimal("9223372036854775807.1"), vo.getValue())
nova chamada: assertEquals(new BigDecimal("9223372036854775807.1"), vo.getValue(), "Era esperado valores iguais, mas  new BigDecimal('9223372036854775807.1') é diferente de " + result782 + " <vo.getValue()>")
chamada antiga: assertNull(bytes)
nova chamada: assertNull(bytes, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101, bytes[0])
nova chamada: assertEquals(101, bytes[0], "Era esperado valores iguais, mas  101 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102, bytes[1])
nova chamada: assertEquals(102, bytes[1], "Era esperado valores iguais, mas  102 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, chars.length)
nova chamada: assertEquals(2, chars.length, "Era esperado valores iguais, mas  2 é diferente de " + " chars.length")
chamada antiga: assertEquals(101, chars[0])
nova chamada: assertEquals(101, chars[0], "Era esperado valores iguais, mas  101 é diferente de " + " chars[0]")
chamada antiga: assertEquals(102, chars[1])
nova chamada: assertEquals(102, chars[1], "Era esperado valores iguais, mas  102 é diferente de " + " chars[1]")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(BigInteger.ZERO, integer)
nova chamada: assertEquals(BigInteger.ZERO, integer, "Era esperado valores iguais, mas  BigInteger.ZERO é diferente de " + " integer")
chamada antiga: assertEquals(BigInteger.valueOf(-8388608), integer)
nova chamada: assertEquals(BigInteger.valueOf(-8388608), integer, "Era esperado valores iguais, mas " + result783 + " <BigInteger.valueOf(-8388608)> é diferente de " + " integer")
chamada antiga: assertEquals("0", JSON.toJSONString(BigInteger.ZERO))
nova chamada: assertEquals("0", JSON.toJSONString(BigInteger.ZERO), "Era esperado valores iguais, mas  '0' é diferente de " + result784 + " <JSON.toJSONString(BigInteger.ZERO)>")
chamada antiga: assertEquals(BigInteger.ZERO, JSONB.parse(jsonbBytes))
nova chamada: assertEquals(BigInteger.ZERO, JSONB.parse(jsonbBytes), "Era esperado valores iguais, mas  BigInteger.ZERO é diferente de " + result785 + " <JSONB.parse(jsonbBytes)>")
chamada antiga: assertEquals(BigInteger.ONE, vo.getId())
nova chamada: assertEquals(BigInteger.ONE, vo.getId(), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result786 + " <vo.getId()>")
chamada antiga: assertEquals(BigInteger.ZERO, vo.getId())
nova chamada: assertEquals(BigInteger.ZERO, vo.getId(), "Era esperado valores iguais, mas  BigInteger.ZERO é diferente de " + result787 + " <vo.getId()>")
chamada antiga: assertEquals("{\"locale\":\"zh_CN\"}", str)
nova chamada: assertEquals("{\"locale\":\"zh_CN\"}", str, "Era esperado valores iguais, mas  '{\'locale\':\'zh_CN\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.locale, v2.locale)
nova chamada: assertEquals(vo.locale, v2.locale, "Era esperado valores iguais, mas  vo.locale é diferente de " + " v2.locale")
chamada antiga: assertEquals(vo.locale, v2.locale)
nova chamada: assertEquals(vo.locale, v2.locale, "Era esperado valores iguais, mas  vo.locale é diferente de " + " v2.locale")
chamada antiga: assertEquals("{\"units\":[\"SECONDS\",\"DAYS\"]}", json)
nova chamada: assertEquals("{\"units\":[\"SECONDS\",\"DAYS\"]}", json, "Era esperado valores iguais, mas  '{\'units\':[\'SECONDS\',\'DAYS\']}' é diferente de " + " json")
chamada antiga: assertEquals(bean.units.size(), bean1.units.size())
nova chamada: assertEquals(bean.units.size(), bean1.units.size(), "Era esperado valores iguais, mas " + result788 + " <bean.units.size()> é diferente de " + result789 + " <bean1.units.size()>")
chamada antiga: assertEquals(bean.units.size(), bean1.units.size())
nova chamada: assertEquals(bean.units.size(), bean1.units.size(), "Era esperado valores iguais, mas " + result790 + " <bean.units.size()> é diferente de " + result791 + " <bean1.units.size()>")
chamada antiga: assertEquals("-128", o.value.toString())
nova chamada: assertEquals("-128", o.value.toString(), "Era esperado valores iguais, mas  '-128' é diferente de " + result792 + " <o.value.toString()>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101, bytes[0])
nova chamada: assertEquals(101, bytes[0], "Era esperado valores iguais, mas  101 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102, bytes[1])
nova chamada: assertEquals(102, bytes[1], "Era esperado valores iguais, mas  102 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(101, array[0])
nova chamada: assertEquals(101, array[0], "Era esperado valores iguais, mas  101 é diferente de " + " array[0]")
chamada antiga: assertEquals(102, array[1])
nova chamada: assertEquals(102, array[1], "Era esperado valores iguais, mas  102 é diferente de " + " array[1]")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("20171213"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("20171213"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result793 + " <JSONB.parseObject(JSONB.toBytes('20171213'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(1, JSONB.parseObject(JSONB.toBytes("2017-2-3"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(1, JSONB.parseObject(JSONB.toBytes("2017-2-3"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  1 é diferente de " + result794 + " <JSONB.parseObject(JSONB.toBytes('2017-2-3'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-13"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-13"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result795 + " <JSONB.parseObject(JSONB.toBytes('2017-12-13'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-3"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017-12-3"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result796 + " <JSONB.parseObject(JSONB.toBytes('2017-12-3'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(6, JSONB.parseObject(JSONB.toBytes("2017-7-13"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(6, JSONB.parseObject(JSONB.toBytes("2017-7-13"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result797 + " <JSONB.parseObject(JSONB.toBytes('2017-7-13'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017/12/13"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("2017/12/13"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result798 + " <JSONB.parseObject(JSONB.toBytes('2017/12/13'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("13.12.2017"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("13.12.2017"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result799 + " <JSONB.parseObject(JSONB.toBytes('13.12.2017'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSONB.parseObject(JSONB.toBytes("13-12-2017"), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSONB.parseObject(JSONB.toBytes("13-12-2017"), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result800 + " <JSONB.parseObject(JSONB.toBytes('13-12-2017'), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017-12-13 00:00:00"), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017-12-13 00:00:00"), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result801 + " <JSONB.parseObject(JSONB.toBytes('2017-12-13 00:00:00'), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017/12/13 00:00:00"), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSONB.parseObject(JSONB.toBytes("2017/12/13 00:00:00"), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result802 + " <JSONB.parseObject(JSONB.toBytes('2017/12/13 00:00:00'), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(6, JSON.parseObject("\"2017년7월3일\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(6, JSON.parseObject("\"2017년7월3일\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result803 + " <JSON.parseObject('\'2017년7월3일\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(6, JSON.parseObject("\"2017년7월13일\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(6, JSON.parseObject("\"2017년7월13일\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result804 + " <JSON.parseObject('\'2017년7월13일\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(6, JSON.parseObject("\"2017-7-13\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(6, JSON.parseObject("\"2017-7-13\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result805 + " <JSON.parseObject('\'2017-7-13\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSON.parseObject("\"2017-12-7\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSON.parseObject("\"2017-12-7\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result806 + " <JSON.parseObject('\'2017-12-7\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSON.parseObject("\"2017-12-17\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSON.parseObject("\"2017-12-17\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result807 + " <JSON.parseObject('\'2017-12-17\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(11, JSON.parseObject("\"2017年12月17日\"", Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSON.parseObject("\"2017年12月17日\"", Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result808 + " <JSON.parseObject('\'2017年12月17日\'', Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(2017, JSON.parseObject("\"20171213\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSON.parseObject("\"20171213\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result809 + " <JSON.parseObject('\'20171213\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(2017, JSON.parseObject("\"2017-2-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSON.parseObject("\"2017-2-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result810 + " <JSON.parseObject('\'2017-2-3\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(11, JSON.parseObject("\"2017-12-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSON.parseObject("\"2017-12-3\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result811 + " <JSON.parseObject('\'2017-12-3\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(2, JSON.parseObject("\"2017-3-13\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(2, JSON.parseObject("\"2017-3-13\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  2 é diferente de " + result812 + " <JSON.parseObject('\'2017-3-13\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(2017, JSON.parseObject("\"2017年1月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSON.parseObject("\"2017年1月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result813 + " <JSON.parseObject('\'2017年1月13日\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(11, JSON.parseObject("\"2017年12月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH))
nova chamada: assertEquals(11, JSON.parseObject("\"2017年12月13日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH), "Era esperado valores iguais, mas  11 é diferente de " + result814 + " <JSON.parseObject('\'2017年12月13日\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.MONTH)>")
chamada antiga: assertEquals(2017, JSON.parseObject("\"2017年11月9日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR))
nova chamada: assertEquals(2017, JSON.parseObject("\"2017年11月9日\"".getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result815 + " <JSON.parseObject('\'2017年11月9日\''.getBytes(StandardCharsets.UTF_8), Calendar.class).get(Calendar.YEAR)>")
chamada antiga: assertEquals(dates.length, date2.length)
nova chamada: assertEquals(dates.length, date2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " date2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals("-128", o.value.toString())
nova chamada: assertEquals("-128", o.value.toString(), "Era esperado valores iguais, mas  '-128' é diferente de " + result816 + " <o.value.toString()>")
chamada antiga: assertEquals("{\"size\":101}", str)
nova chamada: assertEquals("{\"size\":101}", str, "Era esperado valores iguais, mas  '{\'size\':101}' é diferente de " + " str")
chamada antiga: assertEquals(bean.size, bean1.size)
nova chamada: assertEquals(bean.size, bean1.size, "Era esperado valores iguais, mas  bean.size é diferente de " + " bean1.size")
chamada antiga: assertEquals("{\"size\":101}", str)
nova chamada: assertEquals("{\"size\":101}", str, "Era esperado valores iguais, mas  '{\'size\':101}' é diferente de " + " str")
chamada antiga: assertEquals(bean.size, bean1.size)
nova chamada: assertEquals(bean.size, bean1.size, "Era esperado valores iguais, mas  bean.size é diferente de " + " bean1.size")
chamada antiga: assertEquals(123, bean.items.get(0).id)
nova chamada: assertEquals(123, bean.items.get(0).id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.items.get(0).id")
chamada antiga: assertEquals(123, bean.items.get(0))
nova chamada: assertEquals(123, bean.items.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result817 + " <bean.items.get(0)>")
chamada antiga: assertEquals(dates.length, date2.length)
nova chamada: assertEquals(dates.length, date2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " date2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertEquals(dates.length, id2.length)
nova chamada: assertEquals(dates.length, id2.length, "Era esperado valores iguais, mas  dates.length é diferente de " + " id2.length")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101F, bytes[0])
nova chamada: assertEquals(101F, bytes[0], "Era esperado valores iguais, mas  101F é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102F, bytes[1])
nova chamada: assertEquals(102F, bytes[1], "Era esperado valores iguais, mas  102F é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(101F, array[0])
nova chamada: assertEquals(101F, array[0], "Era esperado valores iguais, mas  101F é diferente de " + " array[0]")
chamada antiga: assertEquals(102F, array[1])
nova chamada: assertEquals(102F, array[1], "Era esperado valores iguais, mas  102F é diferente de " + " array[1]")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result818 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO2()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO2()), "Era esperado valores iguais, mas  '{}' é diferente de " + result819 + " <JSON.toJSONString(new VO2())>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertNull(bytes)
nova chamada: assertNull(bytes, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(5, array.length)
nova chamada: assertEquals(5, array.length, "Era esperado valores iguais, mas  5 é diferente de " + " array.length")
chamada antiga: assertEquals(true, array[0])
nova chamada: assertEquals(true, array[0], "Era esperado valores iguais, mas  true é diferente de " + " array[0]")
chamada antiga: assertEquals(false, array[1])
nova chamada: assertEquals(false, array[1], "Era esperado valores iguais, mas  false é diferente de " + " array[1]")
chamada antiga: assertEquals(false, array[2])
nova chamada: assertEquals(false, array[2], "Era esperado valores iguais, mas  false é diferente de " + " array[2]")
chamada antiga: assertEquals(true, array[3])
nova chamada: assertEquals(true, array[3], "Era esperado valores iguais, mas  true é diferente de " + " array[3]")
chamada antiga: assertEquals(false, array[4])
nova chamada: assertEquals(false, array[4], "Era esperado valores iguais, mas  false é diferente de " + " array[4]")
chamada antiga: assertEquals(true, array[0])
nova chamada: assertEquals(true, array[0], "Era esperado valores iguais, mas  true é diferente de " + " array[0]")
chamada antiga: assertEquals(false, array[1])
nova chamada: assertEquals(false, array[1], "Era esperado valores iguais, mas  false é diferente de " + " array[1]")
chamada antiga: assertEquals(false, array[2])
nova chamada: assertEquals(false, array[2], "Era esperado valores iguais, mas  false é diferente de " + " array[2]")
chamada antiga: assertEquals(true, array[3])
nova chamada: assertEquals(true, array[3], "Era esperado valores iguais, mas  true é diferente de " + " array[3]")
chamada antiga: assertEquals(false, array[4])
nova chamada: assertEquals(false, array[4], "Era esperado valores iguais, mas  false é diferente de " + " array[4]")
chamada antiga: assertEquals("{}", JSON.toJSONString(new VO()))
nova chamada: assertEquals("{}", JSON.toJSONString(new VO()), "Era esperado valores iguais, mas  '{}' é diferente de " + result820 + " <JSON.toJSONString(new VO())>")
chamada antiga: assertEquals("{}", new String(JSON.toJSONBytes(new VO())))
nova chamada: assertEquals("{}", new String(JSON.toJSONBytes(new VO())), "Era esperado valores iguais, mas  '{}' é diferente de " + " new String(JSON.toJSONBytes(new VO()))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result821 + " <JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":null}", JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + result822 + " <JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("{\"values\":null}", new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '{\'values\':null}' é diferente de " + " new String(JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result823 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean\',\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result824 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result825 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean1\",\n" + "\t\"values\":[\n" + "\t\ttrue,\n" + "\t\tfalse\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.primitves.BooleanValueArrayTest$Bean1\',\n' + '\t\'values\':[\n' + '\t\ttrue,\n' + '\t\tfalse\n' + '\t]\n' + '}' é diferente de " + result826 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.values, parsed.values)
nova chamada: assertArrayEquals(bean.values, parsed.values, "Era esperado arrays iguais, mas  bean.values é diferente de " + " parsed.values")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, Float.class).floatValue())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, Float.class).floatValue(), "Era esperado valores iguais, mas  0 é diferente de " + result827 + " <JSONB.parseObject(jsonbBytes, Float.class).floatValue()>")
chamada antiga: assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Float.class).floatValue())
nova chamada: assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Float.class).floatValue(), "Era esperado valores iguais, mas  -8388608F é diferente de " + result828 + " <JSONB.parseObject(jsonbBytes, Float.class).floatValue()>")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, Double.class).doubleValue())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, Double.class).doubleValue(), "Era esperado valores iguais, mas  0 é diferente de " + result829 + " <JSONB.parseObject(jsonbBytes, Double.class).doubleValue()>")
chamada antiga: assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Double.class).doubleValue())
nova chamada: assertEquals(-8388608F, JSONB.parseObject(jsonbBytes, Double.class).doubleValue(), "Era esperado valores iguais, mas  -8388608F é diferente de " + result830 + " <JSONB.parseObject(jsonbBytes, Double.class).doubleValue()>")
chamada antiga: assertEquals(0D, v1.getV0000())
nova chamada: assertEquals(0D, v1.getV0000(), "Era esperado valores iguais, mas  0D é diferente de " + result831 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0D, v1.getV0000())
nova chamada: assertEquals(0D, v1.getV0000(), "Era esperado valores iguais, mas  0D é diferente de " + result832 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0D, v1.getV0000())
nova chamada: assertEquals(0D, v1.getV0000(), "Era esperado valores iguais, mas  0D é diferente de " + result833 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(123, vo.value.getAsInt())
nova chamada: assertEquals(123, vo.value.getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result834 + " <vo.value.getAsInt()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(123, vo.value.getAsInt())
nova chamada: assertEquals(123, vo.value.getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result835 + " <vo.value.getAsInt()>")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result836 + " <vo.value.isPresent()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result837 + " <vo.value.isPresent()>")
chamada antiga: assertEquals("\"HOURS\"", JSON.toJSONString(TimeUnit.HOURS))
nova chamada: assertEquals("\"HOURS\"", JSON.toJSONString(TimeUnit.HOURS), "Era esperado valores iguais, mas  '\'HOURS\'' é diferente de " + result838 + " <JSON.toJSONString(TimeUnit.HOURS)>")
chamada antiga: assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumsUsingName))
nova chamada: assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumsUsingName), "Era esperado valores iguais, mas  '{\'unit\':\'' + bean.unit.name() + '\'}' é diferente de " + result839 + " <JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumsUsingName)>")
chamada antiga: assertEquals("{\"unit\":" + bean.unit.ordinal() + "}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"unit\":" + bean.unit.ordinal() + "}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'unit\':' + bean.unit.ordinal() + '}' é diferente de " + result840 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}", Bean.class).unit)
nova chamada: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}", Bean.class).unit, "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + " JSON.parseObject('{\'unit\':6}', Bean.class).unit")
chamada antiga: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}").to(Bean.class).unit)
nova chamada: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}").to(Bean.class).unit, "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + " JSON.parseObject('{\'unit\':6}').to(Bean.class).unit")
chamada antiga: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}", Bean.class).unit)
nova chamada: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}", Bean.class).unit, "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + " JSON.parseObject('{\'unit\':\'DAYS\'}', Bean.class).unit")
chamada antiga: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}").to(Bean.class).unit)
nova chamada: assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":\"DAYS\"}").to(Bean.class).unit, "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + " JSON.parseObject('{\'unit\':\'DAYS\'}').to(Bean.class).unit")
chamada antiga: assertEquals(TimeUnit.DAYS, JSONArray.of("DAYS").getObject(0, TimeUnit.class))
nova chamada: assertEquals(TimeUnit.DAYS, JSONArray.of("DAYS").getObject(0, TimeUnit.class), "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + result841 + " <JSONArray.of('DAYS').getObject(0, TimeUnit.class)>")
chamada antiga: assertEquals(TimeUnit.DAYS, JSONArray.of(6).getObject(0, TimeUnit.class))
nova chamada: assertEquals(TimeUnit.DAYS, JSONArray.of(6).getObject(0, TimeUnit.class), "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + result842 + " <JSONArray.of(6).getObject(0, TimeUnit.class)>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(3, array.length())
nova chamada: assertEquals(3, array.length(), "Era esperado valores iguais, mas  3 é diferente de " + result843 + " <array.length()>")
chamada antiga: assertEquals(101, array.get(0))
nova chamada: assertEquals(101, array.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result844 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.get(1))
nova chamada: assertEquals(0, array.get(1), "Era esperado valores iguais, mas  0 é diferente de " + result845 + " <array.get(1)>")
chamada antiga: assertEquals(102, array.get(2))
nova chamada: assertEquals(102, array.get(2), "Era esperado valores iguais, mas  102 é diferente de " + result846 + " <array.get(2)>")
chamada antiga: assertEquals(3, array.length())
nova chamada: assertEquals(3, array.length(), "Era esperado valores iguais, mas  3 é diferente de " + result847 + " <array.length()>")
chamada antiga: assertEquals(101, array.get(0))
nova chamada: assertEquals(101, array.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result848 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.get(1))
nova chamada: assertEquals(0, array.get(1), "Era esperado valores iguais, mas  0 é diferente de " + result849 + " <array.get(1)>")
chamada antiga: assertEquals(102, array.get(2))
nova chamada: assertEquals(102, array.get(2), "Era esperado valores iguais, mas  102 é diferente de " + result850 + " <array.get(2)>")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(values)
nova chamada: assertNull(values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(101, bytes[0])
nova chamada: assertEquals(101, bytes[0], "Era esperado valores iguais, mas  101 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(102, bytes[1])
nova chamada: assertEquals(102, bytes[1], "Era esperado valores iguais, mas  102 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(101, array[0])
nova chamada: assertEquals(101, array[0], "Era esperado valores iguais, mas  101 é diferente de " + " array[0]")
chamada antiga: assertEquals(102, array[1])
nova chamada: assertEquals(102, array[1], "Era esperado valores iguais, mas  102 é diferente de " + " array[1]")
chamada antiga: assertEquals(123L, vo.getValue().longValue())
nova chamada: assertEquals(123L, vo.getValue().longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result851 + " <vo.getValue().longValue()>")
chamada antiga: assertEquals("123", vo.value.get())
nova chamada: assertEquals("123", vo.value.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result852 + " <vo.value.get()>")
chamada antiga: assertEquals("{\"value\":\"123\"}", str2)
nova chamada: assertEquals("{\"value\":\"123\"}", str2, "Era esperado valores iguais, mas  '{\'value\':\'123\'}' é diferente de " + " str2")
chamada antiga: assertEquals("123", vo.value.get())
nova chamada: assertEquals("123", vo.value.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result853 + " <vo.value.get()>")
chamada antiga: assertEquals("{\"value\":\"123\"}", str2)
nova chamada: assertEquals("{\"value\":\"123\"}", str2, "Era esperado valores iguais, mas  '{\'value\':\'123\'}' é diferente de " + " str2")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result854 + " <vo.value.isPresent()>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(false, vo.value.isPresent())
nova chamada: assertEquals(false, vo.value.isPresent(), "Era esperado valores iguais, mas  false é diferente de " + result855 + " <vo.value.isPresent()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(Integer.valueOf(1001), v1.getV0000())
nova chamada: assertEquals(Integer.valueOf(1001), v1.getV0000(), "Era esperado valores iguais, mas " + result856 + " <Integer.valueOf(1001)> é diferente de " + result857 + " <v1.getV0000()>")
chamada antiga: assertEquals(Integer.valueOf(1), v1.getV0000())
nova chamada: assertEquals(Integer.valueOf(1), v1.getV0000(), "Era esperado valores iguais, mas " + result858 + " <Integer.valueOf(1)> é diferente de " + result859 + " <v1.getV0000()>")
chamada antiga: assertEquals(Integer.valueOf(0), v1.getV0000())
nova chamada: assertEquals(Integer.valueOf(0), v1.getV0000(), "Era esperado valores iguais, mas " + result860 + " <Integer.valueOf(0)> é diferente de " + result861 + " <v1.getV0000()>")
chamada antiga: assertNull(v1.getV0000())
nova chamada: assertNull(v1.getV0000(), "Era esperado nulo, mas " + result862 + " <v1.getV0000()> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(1001), v1.getV0000())
nova chamada: assertEquals(Integer.valueOf(1001), v1.getV0000(), "Era esperado valores iguais, mas " + result863 + " <Integer.valueOf(1001)> é diferente de " + result864 + " <v1.getV0000()>")
chamada antiga: assertEquals("{\"value\":\"CNY\"}", str)
nova chamada: assertEquals("{\"value\":\"CNY\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'CNY\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.value, v2.value)
nova chamada: assertEquals(vo.value, v2.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " v2.value")
chamada antiga: assertEquals(vo.value, v2.value)
nova chamada: assertEquals(vo.value, v2.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " v2.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals(vo.value, o.value)
nova chamada: assertEquals(vo.value, o.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " o.value")
chamada antiga: assertEquals("{\"v0000\":\"Asia/Shanghai\"}", str)
nova chamada: assertEquals("{\"v0000\":\"Asia/Shanghai\"}", str, "Era esperado valores iguais, mas  '{\'v0000\':\'Asia/Shanghai\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.getV0000(), v2.getV0000())
nova chamada: assertEquals(vo.getV0000(), v2.getV0000(), "Era esperado valores iguais, mas " + result865 + " <vo.getV0000()> é diferente de " + result866 + " <v2.getV0000()>")
chamada antiga: assertEquals(vo.getV0000(), v2.getV0000())
nova chamada: assertEquals(vo.getV0000(), v2.getV0000(), "Era esperado valores iguais, mas " + result867 + " <vo.getV0000()> é diferente de " + result868 + " <v2.getV0000()>")
chamada antiga: assertEquals("\"abc\"", str)
nova chamada: assertEquals("\"abc\"", str, "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result869 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[\"a\",\"b\",\"c\"]", str)
nova chamada: assertEquals("[\"a\",\"b\",\"c\"]", str, "Era esperado valores iguais, mas  '[\'a\',\'b\',\'c\']' é diferente de " + " str")
chamada antiga: assertNotNull(instant)
nova chamada: assertNotNull(instant, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(instant)
nova chamada: assertNotNull(instant, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0F, v1.getV0000())
nova chamada: assertEquals(0F, v1.getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result870 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0F, v1.getV0000())
nova chamada: assertEquals(0F, v1.getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result871 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(0F, v1.getV0000())
nova chamada: assertEquals(0F, v1.getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result872 + " <v1.getV0000()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals("{\"value\":\"Asia/Shanghai\"}", str)
nova chamada: assertEquals("{\"value\":\"Asia/Shanghai\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'Asia/Shanghai\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.value, v2.value)
nova chamada: assertEquals(vo.value, v2.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " v2.value")
chamada antiga: assertEquals(vo.value, v2.value)
nova chamada: assertEquals(vo.value, v2.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " v2.value")
chamada antiga: assertEquals("true", str)
nova chamada: assertEquals("true", str, "Era esperado valores iguais, mas  'true' é diferente de " + " str")
chamada antiga: assertEquals(value, JSONReader.of(str).readBoolValue())
nova chamada: assertEquals(value, JSONReader.of(str).readBoolValue(), "Era esperado valores iguais, mas  value é diferente de " + result873 + " <JSONReader.of(str).readBoolValue()>")
chamada antiga: assertEquals(Boolean.TRUE, JSONB.parseObject(jsonbBytes, Boolean.class))
nova chamada: assertEquals(Boolean.TRUE, JSONB.parseObject(jsonbBytes, Boolean.class), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result874 + " <JSONB.parseObject(jsonbBytes, Boolean.class)>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Boolean.class))
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Boolean.class), "Era esperado nulo, mas " + result875 + " <JSONB.parseObject(jsonbBytes, Boolean.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Boolean.class))
nova chamada: assertNull(JSON.parseObject("null", Boolean.class), "Era esperado nulo, mas " + result876 + " <JSON.parseObject('null', Boolean.class)> não é nulo")
chamada antiga: assertEquals("1", str)
nova chamada: assertEquals("1", str, "Era esperado valores iguais, mas  '1' é diferente de " + " str")
chamada antiga: assertEquals(value, JSONReader.of(str).readBoolValue())
nova chamada: assertEquals(value, JSONReader.of(str).readBoolValue(), "Era esperado valores iguais, mas  value é diferente de " + result877 + " <JSONReader.of(str).readBoolValue()>")
chamada antiga: assertEquals("false", str)
nova chamada: assertEquals("false", str, "Era esperado valores iguais, mas  'false' é diferente de " + " str")
chamada antiga: assertEquals(value, JSONReader.of(str).readBoolValue())
nova chamada: assertEquals(value, JSONReader.of(str).readBoolValue(), "Era esperado valores iguais, mas  value é diferente de " + result878 + " <JSONReader.of(str).readBoolValue()>")
chamada antiga: assertEquals("0", str)
nova chamada: assertEquals("0", str, "Era esperado valores iguais, mas  '0' é diferente de " + " str")
chamada antiga: assertEquals(value, JSONReader.of(str).readBoolValue())
nova chamada: assertEquals(value, JSONReader.of(str).readBoolValue(), "Era esperado valores iguais, mas  value é diferente de " + result879 + " <JSONReader.of(str).readBoolValue()>")
chamada antiga: assertEquals("[true,false]", str)
nova chamada: assertEquals("[true,false]", str, "Era esperado valores iguais, mas  '[true,false]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result880 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[[true,false,true],[false,true],[true,false]]", str)
nova chamada: assertEquals("[[true,false,true],[false,true],[true,false]]", str, "Era esperado valores iguais, mas  '[[true,false,true],[false,true],[true,false]]' é diferente de " + " str")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertEquals("[true,false]", str)
nova chamada: assertEquals("[true,false]", str, "Era esperado valores iguais, mas  '[true,false]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result881 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[1,0]", str)
nova chamada: assertEquals("[1,0]", str, "Era esperado valores iguais, mas  '[1,0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result882 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("[1,0]", str)
nova chamada: assertEquals("[1,0]", str, "Era esperado valores iguais, mas  '[1,0]' é diferente de " + " str")
chamada antiga: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())))
nova chamada: assertTrue(Arrays.equals(array, JSONReader.of(str).read(array.getClass())), "Era esperado verdadeiro, mas " + result883 + " <Arrays.equals(array, JSONReader.of(str).read(array.getClass()))> é falso")
chamada antiga: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'Id\':101,\'Name\':\'DataWorks\'}' é diferente de " + result884 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'Id\':101,\'Name\':\'DataWorks\'}' é diferente de " + result885 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'ID\':101,\'NAME\':\'DataWorks\'}' é diferente de " + result886 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'ID\':101,\'NAME\':\'DataWorks\'}' é diferente de " + result887 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: assertEquals("{}", jsonWriter.toString())
nova chamada: assertEquals("{}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result888 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"Hangzhou\"", str)
nova chamada: assertEquals("\"Hangzhou\"", str, "Era esperado valores iguais, mas  '\'Hangzhou\'' é diferente de " + " str")
chamada antiga: assertEquals("[1001,\"DataWorks\"]", str)
nova chamada: assertEquals("[1001,\"DataWorks\"]", str, "Era esperado valores iguais, mas  '[1001,\'DataWorks\']' é diferente de " + " str")
chamada antiga: assertEquals(vo.id, vo2.id)
nova chamada: assertEquals(vo.id, vo2.id, "Era esperado valores iguais, mas  vo.id é diferente de " + " vo2.id")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'bean-id\':101,\'bean-name\':\'DataWorks\'}' é diferente de " + result889 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'bean-id\':101,\'bean-name\':\'DataWorks\'}' é diferente de " + result890 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'bean_id\':101,\'bean_name\':\'DataWorks\'}' é diferente de " + result891 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'bean_id\':101,\'bean_name\':\'DataWorks\'}' é diferente de " + result892 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"value\":[1001,\"DataWorks\"]}", str)
nova chamada: assertEquals("{\"value\":[1001,\"DataWorks\"]}", str, "Era esperado valores iguais, mas  '{\'value\':[1001,\'DataWorks\']}' é diferente de " + " str")
chamada antiga: assertEquals(vo.id, vo2.id)
nova chamada: assertEquals(vo.id, vo2.id, "Era esperado valores iguais, mas  vo.id é diferente de " + " vo2.id")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertNotNull(jsonTypeFromClass)
nova chamada: assertNotNull(jsonTypeFromClass, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(jsonTypeFromAnnotation.isPresent())
nova chamada: assertTrue(jsonTypeFromAnnotation.isPresent(), "Era esperado verdadeiro, mas " + result893 + " <jsonTypeFromAnnotation.isPresent()> é falso")
chamada antiga: assertNotNull(jsonTypeFromClass)
nova chamada: assertNotNull(jsonTypeFromClass, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(jsonTypeFromAnnotation.isPresent())
nova chamada: assertTrue(jsonTypeFromAnnotation.isPresent(), "Era esperado verdadeiro, mas " + result894 + " <jsonTypeFromAnnotation.isPresent()> é falso")
chamada antiga: assertEquals(bean.f0, bean1.f0)
nova chamada: assertEquals(bean.f0, bean1.f0, "Era esperado valores iguais, mas  bean.f0 é diferente de " + " bean1.f0")
chamada antiga: assertEquals(bean.f1, bean1.f1)
nova chamada: assertEquals(bean.f1, bean1.f1, "Era esperado valores iguais, mas  bean.f1 é diferente de " + " bean1.f1")
chamada antiga: assertEquals(bean.f2, bean1.f2)
nova chamada: assertEquals(bean.f2, bean1.f2, "Era esperado valores iguais, mas  bean.f2 é diferente de " + " bean1.f2")
chamada antiga: assertEquals(bean.f3, bean1.f3)
nova chamada: assertEquals(bean.f3, bean1.f3, "Era esperado valores iguais, mas  bean.f3 é diferente de " + " bean1.f3")
chamada antiga: assertEquals(bean.f0, bean1.f0)
nova chamada: assertEquals(bean.f0, bean1.f0, "Era esperado valores iguais, mas  bean.f0 é diferente de " + " bean1.f0")
chamada antiga: assertEquals(bean.f1, bean1.f1)
nova chamada: assertEquals(bean.f1, bean1.f1, "Era esperado valores iguais, mas  bean.f1 é diferente de " + " bean1.f1")
chamada antiga: assertEquals(bean.f2, bean1.f2)
nova chamada: assertEquals(bean.f2, bean1.f2, "Era esperado valores iguais, mas  bean.f2 é diferente de " + " bean1.f2")
chamada antiga: assertEquals(bean.f3, bean1.f3)
nova chamada: assertEquals(bean.f3, bean1.f3, "Era esperado valores iguais, mas  bean.f3 é diferente de " + " bean1.f3")
chamada antiga: assertTrue(jsonCreator.isPresent())
nova chamada: assertTrue(jsonCreator.isPresent(), "Era esperado verdadeiro, mas " + result895 + " <jsonCreator.isPresent()> é falso")
chamada antiga: assertTrue(jsonCreator.isPresent())
nova chamada: assertTrue(jsonCreator.isPresent(), "Era esperado verdadeiro, mas " + result896 + " <jsonCreator.isPresent()> é falso")
chamada antiga: assertNotNull(jsonType)
nova chamada: assertNotNull(jsonType, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jsonType)
nova chamada: assertNotNull(jsonType, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"id\":123}", json)
nova chamada: assertEquals("{\"id\":123}", json, "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + " json")
chamada antiga: assertNotNull(bean.localTime)
nova chamada: assertNotNull(bean.localTime, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(11, bean.localTime.getHour())
nova chamada: assertEquals(11, bean.localTime.getHour(), "Era esperado valores iguais, mas  11 é diferente de " + result897 + " <bean.localTime.getHour()>")
chamada antiga: assertEquals(36, bean.localTime.getMinute())
nova chamada: assertEquals(36, bean.localTime.getMinute(), "Era esperado valores iguais, mas  36 é diferente de " + result898 + " <bean.localTime.getMinute()>")
chamada antiga: assertEquals(11, bean.localTime.getSecond())
nova chamada: assertEquals(11, bean.localTime.getSecond(), "Era esperado valores iguais, mas  11 é diferente de " + result899 + " <bean.localTime.getSecond()>")
chamada antiga: assertNotNull(bean.localTime)
nova chamada: assertNotNull(bean.localTime, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(11, bean.localTime.getHour())
nova chamada: assertEquals(11, bean.localTime.getHour(), "Era esperado valores iguais, mas  11 é diferente de " + result900 + " <bean.localTime.getHour()>")
chamada antiga: assertEquals(36, bean.localTime.getMinute())
nova chamada: assertEquals(36, bean.localTime.getMinute(), "Era esperado valores iguais, mas  36 é diferente de " + result901 + " <bean.localTime.getMinute()>")
chamada antiga: assertEquals(11, bean.localTime.getSecond())
nova chamada: assertEquals(11, bean.localTime.getSecond(), "Era esperado valores iguais, mas  11 é diferente de " + result902 + " <bean.localTime.getSecond()>")
chamada antiga: assertNotNull(bean.localTime)
nova chamada: assertNotNull(bean.localTime, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(11, bean.localTime.getHour())
nova chamada: assertEquals(11, bean.localTime.getHour(), "Era esperado valores iguais, mas  11 é diferente de " + result903 + " <bean.localTime.getHour()>")
chamada antiga: assertEquals(36, bean.localTime.getMinute())
nova chamada: assertEquals(36, bean.localTime.getMinute(), "Era esperado valores iguais, mas  36 é diferente de " + result904 + " <bean.localTime.getMinute()>")
chamada antiga: assertEquals(11, bean.localTime.getSecond())
nova chamada: assertEquals(11, bean.localTime.getSecond(), "Era esperado valores iguais, mas  11 é diferente de " + result905 + " <bean.localTime.getSecond()>")
chamada antiga: assertTrue(jsonField.isPresent())
nova chamada: assertTrue(jsonField.isPresent(), "Era esperado verdadeiro, mas " + result906 + " <jsonField.isPresent()> é falso")
chamada antiga: assertEquals("{\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result907 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result908 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":\"100\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":\"100\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':\'100\'}' é diferente de " + result909 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"type\":102}", str)
nova chamada: assertEquals("{\"type\":102}", str, "Era esperado valores iguais, mas  '{\'type\':102}' é diferente de " + " str")
chamada antiga: assertEquals(bean.type, bean1.type)
nova chamada: assertEquals(bean.type, bean1.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean1.type")
chamada antiga: assertEquals("101", str)
nova chamada: assertEquals("101", str, "Era esperado valores iguais, mas  '101' é diferente de " + " str")
chamada antiga: assertEquals(bean.code, bean1.code)
nova chamada: assertEquals(bean.code, bean1.code, "Era esperado valores iguais, mas  bean.code é diferente de " + " bean1.code")
chamada antiga: assertEquals("{\"bean_id\":1001}", str)
nova chamada: assertEquals("{\"bean_id\":1001}", str, "Era esperado valores iguais, mas  '{\'bean_id\':1001}' é diferente de " + " str")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result910 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result911 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result912 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result913 + " <vo.getName()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'name\':\'DataWorks\',\'id\':101}' é diferente de " + result914 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'name\':\'DataWorks\',\'id\':101}' é diferente de " + result915 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(8, vo.id8)
nova chamada: assertEquals(8, vo.id8, "Era esperado valores iguais, mas  8 é diferente de " + " vo.id8")
chamada antiga: assertEquals(16, vo.id16)
nova chamada: assertEquals(16, vo.id16, "Era esperado valores iguais, mas  16 é diferente de " + " vo.id16")
chamada antiga: assertEquals(32, vo.id32)
nova chamada: assertEquals(32, vo.id32, "Era esperado valores iguais, mas  32 é diferente de " + " vo.id32")
chamada antiga: assertEquals(64, vo.id64)
nova chamada: assertEquals(64, vo.id64, "Era esperado valores iguais, mas  64 é diferente de " + " vo.id64")
chamada antiga: assertEquals(8, vo.id8.byteValue())
nova chamada: assertEquals(8, vo.id8.byteValue(), "Era esperado valores iguais, mas  8 é diferente de " + result916 + " <vo.id8.byteValue()>")
chamada antiga: assertEquals(16, vo.id16.shortValue())
nova chamada: assertEquals(16, vo.id16.shortValue(), "Era esperado valores iguais, mas  16 é diferente de " + result917 + " <vo.id16.shortValue()>")
chamada antiga: assertEquals(32, vo.id32.intValue())
nova chamada: assertEquals(32, vo.id32.intValue(), "Era esperado valores iguais, mas  32 é diferente de " + result918 + " <vo.id32.intValue()>")
chamada antiga: assertEquals(64, vo.id64.longValue())
nova chamada: assertEquals(64, vo.id64.longValue(), "Era esperado valores iguais, mas  64 é diferente de " + result919 + " <vo.id64.longValue()>")
chamada antiga: assertEquals(true, vo.flag)
nova chamada: assertEquals(true, vo.flag, "Era esperado valores iguais, mas  true é diferente de " + " vo.flag")
chamada antiga: assertEquals(32F, vo.floatValue)
nova chamada: assertEquals(32F, vo.floatValue, "Era esperado valores iguais, mas  32F é diferente de " + " vo.floatValue")
chamada antiga: assertEquals(64D, vo.doubleValue)
nova chamada: assertEquals(64D, vo.doubleValue, "Era esperado valores iguais, mas  64D é diferente de " + " vo.doubleValue")
chamada antiga: assertEquals(true, vo.flag.booleanValue())
nova chamada: assertEquals(true, vo.flag.booleanValue(), "Era esperado valores iguais, mas  true é diferente de " + result920 + " <vo.flag.booleanValue()>")
chamada antiga: assertEquals(32F, vo.floatValue)
nova chamada: assertEquals(32F, vo.floatValue, "Era esperado valores iguais, mas  32F é diferente de " + " vo.floatValue")
chamada antiga: assertEquals(64D, vo.doubleValue)
nova chamada: assertEquals(64D, vo.doubleValue, "Era esperado valores iguais, mas  64D é diferente de " + " vo.doubleValue")
chamada antiga: assertNull(vo.id)
nova chamada: assertNull(vo.id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(BigDecimal.valueOf(32), vo.decimalValue)
nova chamada: assertEquals(BigDecimal.valueOf(32), vo.decimalValue, "Era esperado valores iguais, mas " + result921 + " <BigDecimal.valueOf(32)> é diferente de " + " vo.decimalValue")
chamada antiga: assertEquals(BigInteger.valueOf(64), vo.bigIntValue)
nova chamada: assertEquals(BigInteger.valueOf(64), vo.bigIntValue, "Era esperado valores iguais, mas " + result922 + " <BigInteger.valueOf(64)> é diferente de " + " vo.bigIntValue")
chamada antiga: assertEquals("xx", vo.strValue)
nova chamada: assertEquals("xx", vo.strValue, "Era esperado valores iguais, mas  'xx' é diferente de " + " vo.strValue")
chamada antiga: assertEquals(101, vo.id)
nova chamada: assertEquals(101, vo.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo.id")
chamada antiga: assertEquals(101, vo2.id)
nova chamada: assertEquals(101, vo2.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo2.id")
chamada antiga: assertEquals(101, vo.id)
nova chamada: assertEquals(101, vo.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo.id")
chamada antiga: assertEquals(101, vo2.id)
nova chamada: assertEquals(101, vo2.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo2.id")
chamada antiga: assertEquals(101, vo.id)
nova chamada: assertEquals(101, vo.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo.id")
chamada antiga: assertEquals(101, vo2.id)
nova chamada: assertEquals(101, vo2.id, "Era esperado valores iguais, mas  101 é diferente de " + " vo2.id")
chamada antiga: assertEquals(Boolean.TRUE, JSON.parseObject("{}", Bean0.class).value)
nova chamada: assertEquals(Boolean.TRUE, JSON.parseObject("{}", Bean0.class).value, "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " JSON.parseObject('{}', Bean0.class).value")
chamada antiga: assertEquals(Boolean.TRUE, JSONB.parseObject(JSONB.toBytes(new HashMap<>()), Bean0.class).value)
nova chamada: assertEquals(Boolean.TRUE, JSONB.parseObject(JSONB.toBytes(new HashMap<>()), Bean0.class).value, "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " JSONB.parseObject(JSONB.toBytes(new HashMap()), Bean0.class).value")
chamada antiga: assertEquals(Byte.valueOf((byte) 1), JSON.parseObject("{}", Bean1.class).value)
nova chamada: assertEquals(Byte.valueOf((byte) 1), JSON.parseObject("{}", Bean1.class).value, "Era esperado valores iguais, mas " + result923 + " <Byte.valueOf((byte) 1)> é diferente de " + " JSON.parseObject('{}', Bean1.class).value")
chamada antiga: assertEquals(Short.valueOf((short) 2), JSON.parseObject("{}", Bean2.class).value)
nova chamada: assertEquals(Short.valueOf((short) 2), JSON.parseObject("{}", Bean2.class).value, "Era esperado valores iguais, mas " + result924 + " <Short.valueOf((short) 2)> é diferente de " + " JSON.parseObject('{}', Bean2.class).value")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals("xx", bean.value5)
nova chamada: assertEquals("xx", bean.value5, "Era esperado valores iguais, mas  'xx' é diferente de " + " bean.value5")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals("xx", bean.value5)
nova chamada: assertEquals("xx", bean.value5, "Era esperado valores iguais, mas  'xx' é diferente de " + " bean.value5")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals("xx", bean.value5)
nova chamada: assertEquals("xx", bean.value5, "Era esperado valores iguais, mas  'xx' é diferente de " + " bean.value5")
chamada antiga: assertEquals(new BigDecimal(123.5), bean.value6)
nova chamada: assertEquals(new BigDecimal(123.5), bean.value6, "Era esperado valores iguais, mas  new BigDecimal(123.5) é diferente de " + " bean.value6")
chamada antiga: assertEquals(1, bean.value0)
nova chamada: assertEquals(1, bean.value0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.value0")
chamada antiga: assertEquals(2, bean.value1)
nova chamada: assertEquals(2, bean.value1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.value1")
chamada antiga: assertEquals(3.1f, bean.value2)
nova chamada: assertEquals(3.1f, bean.value2, "Era esperado valores iguais, mas  3.1f é diferente de " + " bean.value2")
chamada antiga: assertEquals(4.2D, bean.value3)
nova chamada: assertEquals(4.2D, bean.value3, "Era esperado valores iguais, mas  4.2D é diferente de " + " bean.value3")
chamada antiga: assertEquals(6.3D, bean.value4)
nova chamada: assertEquals(6.3D, bean.value4, "Era esperado valores iguais, mas  6.3D é diferente de " + " bean.value4")
chamada antiga: assertEquals("xx", bean.value5)
nova chamada: assertEquals("xx", bean.value5, "Era esperado valores iguais, mas  'xx' é diferente de " + " bean.value5")
chamada antiga: assertEquals(new BigDecimal(123.5), bean.value6)
nova chamada: assertEquals(new BigDecimal(123.5), bean.value6, "Era esperado valores iguais, mas  new BigDecimal(123.5) é diferente de " + " bean.value6")
chamada antiga: assertNotNull(bean.list)
nova chamada: assertNotNull(bean.list, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(bean.list.isEmpty())
nova chamada: assertTrue(bean.list.isEmpty(), "Era esperado verdadeiro, mas " + result925 + " <bean.list.isEmpty()> é falso")
chamada antiga: assertEquals("{\"ID\":123}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"ID\":123}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'ID\':123}' é diferente de " + result926 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result927 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":101}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result928 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":\"123元\"}", str)
nova chamada: assertEquals("{\"id\":\"123元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123元\"}", str)
nova chamada: assertEquals("{\"id\":\"123元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123元\"}", str)
nova chamada: assertEquals("{\"id\":\"123元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123元\"}", str)
nova chamada: assertEquals("{\"id\":\"123元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123元\"}", str)
nova chamada: assertEquals("{\"id\":\"123元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123.0元\"}", str)
nova chamada: assertEquals("{\"id\":\"123.0元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123.0元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":\"123.0元\"}", str)
nova chamada: assertEquals("{\"id\":\"123.0元\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'123.0元\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101,\'name\':\'DataWorks\'}' é diferente de " + result929 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101,\'name\':\'DataWorks\'}' é diferente de " + result930 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":1001,\"value\":{}}", json)
nova chamada: assertEquals("{\"id\":1001,\"value\":{}}", json, "Era esperado valores iguais, mas  '{\'id\':1001,\'value\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":1001,\"value\":{}}", json)
nova chamada: assertEquals("{\"id\":1001,\"value\":{}}", json, "Era esperado valores iguais, mas  '{\'id\':1001,\'value\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":1001,\"value\":{}}", json)
nova chamada: assertEquals("{\"id\":1001,\"value\":{}}", json, "Era esperado valores iguais, mas  '{\'id\':1001,\'value\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":1001,\"value\":{}}", json)
nova chamada: assertEquals("{\"id\":1001,\"value\":{}}", json, "Era esperado valores iguais, mas  '{\'id\':1001,\'value\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{}", json)
nova chamada: assertEquals("{}", json, "Era esperado valores iguais, mas  '{}' é diferente de " + " json")
chamada antiga: assertEquals("{}", json)
nova chamada: assertEquals("{}", json, "Era esperado valores iguais, mas  '{}' é diferente de " + " json")
chamada antiga: assertEquals(123, integer.get())
nova chamada: assertEquals(123, integer.get(), "Era esperado valores iguais, mas  123 é diferente de " + result931 + " <integer.get()>")
chamada antiga: assertEquals(123, integer.get())
nova chamada: assertEquals(123, integer.get(), "Era esperado valores iguais, mas  123 é diferente de " + result932 + " <integer.get()>")
chamada antiga: assertEquals("\"123\"", ref.get())
nova chamada: assertEquals("\"123\"", ref.get(), "Era esperado valores iguais, mas  '\'123\'' é diferente de " + result933 + " <ref.get()>")
chamada antiga: assertEquals("\"123\"", ref.get())
nova chamada: assertEquals("\"123\"", ref.get(), "Era esperado valores iguais, mas  '\'123\'' é diferente de " + result934 + " <ref.get()>")
chamada antiga: assertEquals(true, ref.get())
nova chamada: assertEquals(true, ref.get(), "Era esperado valores iguais, mas  true é diferente de " + result935 + " <ref.get()>")
chamada antiga: assertEquals(false, ref.get())
nova chamada: assertEquals(false, ref.get(), "Era esperado valores iguais, mas  false é diferente de " + result936 + " <ref.get()>")
chamada antiga: assertEquals(null, ref.get())
nova chamada: assertEquals(null, ref.get(), "Era esperado valores iguais, mas  null é diferente de " + result937 + " <ref.get()>")
chamada antiga: assertEquals(new JSONArray(), ref.get())
nova chamada: assertEquals(new JSONArray(), ref.get(), "Era esperado valores iguais, mas  new JSONArray() é diferente de " + result938 + " <ref.get()>")
chamada antiga: assertEquals(new JSONObject(), ref.get())
nova chamada: assertEquals(new JSONObject(), ref.get(), "Era esperado valores iguais, mas  new JSONObject() é diferente de " + result939 + " <ref.get()>")
chamada antiga: assertEquals(101, vo.getV0000())
nova chamada: assertEquals(101, vo.getV0000(), "Era esperado valores iguais, mas  101 é diferente de " + result940 + " <vo.getV0000()>")
chamada antiga: assertEquals(101, map.get("v0000"))
nova chamada: assertEquals(101, map.get("v0000"), "Era esperado valores iguais, mas  101 é diferente de " + result941 + " <map.get('v0000')>")
chamada antiga: assertEquals("$", resolveTask.toString())
nova chamada: assertEquals("$", resolveTask.toString(), "Era esperado valores iguais, mas  '$' é diferente de " + result942 + " <resolveTask.toString()>")
chamada antiga: assertSame(filter, jsonReader.getContext().getContextAutoTypeBeforeHandler())
nova chamada: assertSame(filter, jsonReader.getContext().getContextAutoTypeBeforeHandler(), "Era esperado objetos iguais, mas  filter é diferente de " + result943 + " <jsonReader.getContext().getContextAutoTypeBeforeHandler()>")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(values.length, id2.length)
nova chamada: assertEquals(values.length, id2.length, "Era esperado valores iguais, mas  values.length é diferente de " + " id2.length")
chamada antiga: assertEquals(Double.valueOf(1), vo.getV0000())
nova chamada: assertEquals(Double.valueOf(1), vo.getV0000(), "Era esperado valores iguais, mas " + result944 + " <Double.valueOf(1)> é diferente de " + result945 + " <vo.getV0000()>")
chamada antiga: assertEquals(Double.parseDouble(str), d0)
nova chamada: assertEquals(Double.parseDouble(str), d0, "Era esperado valores iguais, mas " + result946 + " <Double.parseDouble(str)> é diferente de " + " d0")
chamada antiga: assertEquals(expected, JSON.parseObject(str, Double.class))
nova chamada: assertEquals(expected, JSON.parseObject(str, Double.class), "Era esperado valores iguais, mas  expected é diferente de " + result947 + " <JSON.parseObject(str, Double.class)>")
chamada antiga: assertEquals(expected, (Double) JSON.parse(str))
nova chamada: assertEquals(expected, (Double) JSON.parse(str), "Era esperado valores iguais, mas  expected é diferente de " + " (Double) JSON.parse(str)")
chamada antiga: assertEquals(expected, JSON.parseObject(str, BigDecimal.class).doubleValue())
nova chamada: assertEquals(expected, JSON.parseObject(str, BigDecimal.class).doubleValue(), "Era esperado valores iguais, mas  expected é diferente de " + result948 + " <JSON.parseObject(str, BigDecimal.class).doubleValue()>")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, Double.class))
nova chamada: assertEquals(expected, JSON.parseObject(bytes, Double.class), "Era esperado valores iguais, mas  expected é diferente de " + result949 + " <JSON.parseObject(bytes, Double.class)>")
chamada antiga: assertEquals(expected, (Double) JSON.parse(bytes))
nova chamada: assertEquals(expected, (Double) JSON.parse(bytes), "Era esperado valores iguais, mas  expected é diferente de " + " (Double) JSON.parse(bytes)")
chamada antiga: assertEquals(expected, JSON.parseObject(bytes, BigDecimal.class).doubleValue())
nova chamada: assertEquals(expected, JSON.parseObject(bytes, BigDecimal.class).doubleValue(), "Era esperado valores iguais, mas  expected é diferente de " + result950 + " <JSON.parseObject(bytes, BigDecimal.class).doubleValue()>")
chamada antiga: assertEquals(expected, JSONReader.of(chars).readDoubleValue())
nova chamada: assertEquals(expected, JSONReader.of(chars).readDoubleValue(), "Era esperado valores iguais, mas  expected é diferente de " + result951 + " <JSONReader.of(chars).readDoubleValue()>")
chamada antiga: assertEquals(expected, (Double) JSONReader.of(chars).readNumber())
nova chamada: assertEquals(expected, (Double) JSONReader.of(chars).readNumber(), "Era esperado valores iguais, mas  expected é diferente de " + " (Double) JSONReader.of(chars).readNumber()")
chamada antiga: assertEquals(expected, JSONReader.of(chars).readBigDecimal().doubleValue())
nova chamada: assertEquals(expected, JSONReader.of(chars).readBigDecimal().doubleValue(), "Era esperado valores iguais, mas  expected é diferente de " + result952 + " <JSONReader.of(chars).readBigDecimal().doubleValue()>")
chamada antiga: assertArrayEquals(new Object[] { "John", 27 }, values)
nova chamada: assertArrayEquals(new Object[] { "John", 27 }, values, "Era esperado arrays iguais, mas  new Object[] { 'John', 27 } é diferente de " + " values")
chamada antiga: assertArrayEquals(new Object[] { "New York", "NY" }, values)
nova chamada: assertArrayEquals(new Object[] { "New York", "NY" }, values, "Era esperado arrays iguais, mas  new Object[] { 'New York', 'NY' } é diferente de " + " values")
chamada antiga: assertEquals(map.size(), map1.size())
nova chamada: assertEquals(map.size(), map1.size(), "Era esperado valores iguais, mas " + result953 + " <map.size()> é diferente de " + result954 + " <map1.size()>")
chamada antiga: assertTrue(map1.containsKey(null))
nova chamada: assertTrue(map1.containsKey(null), "Era esperado verdadeiro, mas " + result955 + " <map1.containsKey(null)> é falso")
chamada antiga: assertEquals(map.get(null), map1.get(null))
nova chamada: assertEquals(map.get(null), map1.get(null), "Era esperado valores iguais, mas " + result956 + " <map.get(null)> é diferente de " + result957 + " <map1.get(null)>")
chamada antiga: assertEquals(map.size(), map2.size())
nova chamada: assertEquals(map.size(), map2.size(), "Era esperado valores iguais, mas " + result958 + " <map.size()> é diferente de " + result959 + " <map2.size()>")
chamada antiga: assertEquals(objects.length, parsed.length)
nova chamada: assertEquals(objects.length, parsed.length, "Era esperado valores iguais, mas  objects.length é diferente de " + " parsed.length")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[1])
nova chamada: assertEquals(BC_OBJECT_END, bytes[1], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[1]")
chamada antiga: assertEquals(0, parsed.size())
nova chamada: assertEquals(0, parsed.size(), "Era esperado valores iguais, mas  0 é diferente de " + result960 + " <parsed.size()>")
chamada antiga: assertEquals(6, bytes.length)
nova chamada: assertEquals(6, bytes.length, "Era esperado valores iguais, mas  6 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
nova chamada: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[bytes.length - 1]")
chamada antiga: assertEquals(1, parsed.size())
nova chamada: assertEquals(1, parsed.size(), "Era esperado valores iguais, mas  1 é diferente de " + result961 + " <parsed.size()>")
chamada antiga: assertEquals(value, parsed.get(key))
nova chamada: assertEquals(value, parsed.get(key), "Era esperado valores iguais, mas  value é diferente de " + result962 + " <parsed.get(key)>")
chamada antiga: assertEquals(21, bytes.length)
nova chamada: assertEquals(21, bytes.length, "Era esperado valores iguais, mas  21 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
nova chamada: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[bytes.length - 1]")
chamada antiga: assertEquals(bytes.length, 2 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
nova chamada: assertEquals(bytes.length, 2 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 2 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length")
chamada antiga: assertEquals(2, parsed.size())
nova chamada: assertEquals(2, parsed.size(), "Era esperado valores iguais, mas  2 é diferente de " + result963 + " <parsed.size()>")
chamada antiga: assertEquals(v1, parsed.get(k1))
nova chamada: assertEquals(v1, parsed.get(k1), "Era esperado valores iguais, mas  v1 é diferente de " + result964 + " <parsed.get(k1)>")
chamada antiga: assertEquals(v2, parsed.get(k2))
nova chamada: assertEquals(v2, parsed.get(k2), "Era esperado valores iguais, mas  v2 é diferente de " + result965 + " <parsed.get(k2)>")
chamada antiga: assertEquals(2, bytes.length)
nova chamada: assertEquals(2, bytes.length, "Era esperado valores iguais, mas  2 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_BINARY, bytes[0])
nova chamada: assertEquals(BC_BINARY, bytes[0], "Era esperado valores iguais, mas  BC_BINARY é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_INT32_NUM_0, bytes[1])
nova chamada: assertEquals(BC_INT32_NUM_0, bytes[1], "Era esperado valores iguais, mas  BC_INT32_NUM_0 é diferente de " + " bytes[1]")
chamada antiga: assertEquals(0, parsed.length)
nova chamada: assertEquals(0, parsed.length, "Era esperado valores iguais, mas  0 é diferente de " + " parsed.length")
chamada antiga: assertEquals(17, bytes.length)
nova chamada: assertEquals(17, bytes.length, "Era esperado valores iguais, mas  17 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
nova chamada: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[bytes.length - 1]")
chamada antiga: assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
nova chamada: assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length")
chamada antiga: assertEquals(BC_SYMBOL, bytes[1])
nova chamada: assertEquals(BC_SYMBOL, bytes[1], "Era esperado valores iguais, mas  BC_SYMBOL é diferente de " + " bytes[1]")
chamada antiga: assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length])
nova chamada: assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length], "Era esperado valores iguais, mas  BC_SYMBOL é diferente de " + " bytes[2 + k1Bytes.length + v1Bytes.length]")
chamada antiga: assertEquals(2, parsed.size())
nova chamada: assertEquals(2, parsed.size(), "Era esperado valores iguais, mas  2 é diferente de " + result966 + " <parsed.size()>")
chamada antiga: assertEquals(v1, parsed.get(k1))
nova chamada: assertEquals(v1, parsed.get(k1), "Era esperado valores iguais, mas  v1 é diferente de " + result967 + " <parsed.get(k1)>")
chamada antiga: assertEquals(v2, parsed.get(k2))
nova chamada: assertEquals(v2, parsed.get(k2), "Era esperado valores iguais, mas  v2 é diferente de " + result968 + " <parsed.get(k2)>")
chamada antiga: assertEquals(17, bytes.length)
nova chamada: assertEquals(17, bytes.length, "Era esperado valores iguais, mas  17 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1])
nova chamada: assertEquals(BC_OBJECT_END, bytes[bytes.length - 1], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[bytes.length - 1]")
chamada antiga: assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length)
nova chamada: assertEquals(bytes.length, 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 4 + k1Bytes.length + v1Bytes.length + k2Bytes.length + v2Bytes.length")
chamada antiga: assertEquals(BC_SYMBOL, bytes[1])
nova chamada: assertEquals(BC_SYMBOL, bytes[1], "Era esperado valores iguais, mas  BC_SYMBOL é diferente de " + " bytes[1]")
chamada antiga: assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length])
nova chamada: assertEquals(BC_SYMBOL, bytes[2 + k1Bytes.length + v1Bytes.length], "Era esperado valores iguais, mas  BC_SYMBOL é diferente de " + " bytes[2 + k1Bytes.length + v1Bytes.length]")
chamada antiga: assertEquals(2, parsed.size())
nova chamada: assertEquals(2, parsed.size(), "Era esperado valores iguais, mas  2 é diferente de " + result969 + " <parsed.size()>")
chamada antiga: assertEquals(v1, parsed.get(k1))
nova chamada: assertEquals(v1, parsed.get(k1), "Era esperado valores iguais, mas  v1 é diferente de " + result970 + " <parsed.get(k1)>")
chamada antiga: assertEquals(v2, parsed.get(k2))
nova chamada: assertEquals(v2, parsed.get(k2), "Era esperado valores iguais, mas  v2 é diferente de " + result971 + " <parsed.get(k2)>")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_DOUBLE_NUM_0, bytes[0])
nova chamada: assertEquals(BC_DOUBLE_NUM_0, bytes[0], "Era esperado valores iguais, mas  BC_DOUBLE_NUM_0 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(zero, parsed.doubleValue())
nova chamada: assertEquals(zero, parsed.doubleValue(), "Era esperado valores iguais, mas  zero é diferente de " + result972 + " <parsed.doubleValue()>")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_DOUBLE_NUM_1, bytes[0])
nova chamada: assertEquals(BC_DOUBLE_NUM_1, bytes[0], "Era esperado valores iguais, mas  BC_DOUBLE_NUM_1 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(one, parsed.doubleValue())
nova chamada: assertEquals(one, parsed.doubleValue(), "Era esperado valores iguais, mas  one é diferente de " + result973 + " <parsed.doubleValue()>")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_STR_ASCII_FIX_0, bytes[0])
nova chamada: assertEquals(BC_STR_ASCII_FIX_0, bytes[0], "Era esperado valores iguais, mas  BC_STR_ASCII_FIX_0 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_ARRAY_FIX_0, bytes[0])
nova chamada: assertEquals(BC_ARRAY_FIX_0, bytes[0], "Era esperado valores iguais, mas  BC_ARRAY_FIX_0 é diferente de " + " bytes[0]")
chamada antiga: assertEquals(18, bytes.length)
nova chamada: assertEquals(18, bytes.length, "Era esperado valores iguais, mas  18 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
nova chamada: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[1 + k1Bytes.length]")
chamada antiga: assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length])
nova chamada: assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length], "Era esperado valores iguais, mas  BC_REFERENCE é diferente de " + " bytes[2 + k1Bytes.length + k2Bytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length]")
chamada antiga: assertSame(parsed, ((Map) parsed.get("value")).get("root"))
nova chamada: assertSame(parsed, ((Map) parsed.get("value")).get("root"), "Era esperado objetos iguais, mas  parsed é diferente de " + result974 + " <((Map) parsed.get('value')).get('root')>")
chamada antiga: assertEquals(21, bytes.length)
nova chamada: assertEquals(21, bytes.length, "Era esperado valores iguais, mas  21 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
nova chamada: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[1 + k1Bytes.length]")
chamada antiga: assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length])
nova chamada: assertEquals(BC_REFERENCE, bytes[2 + k1Bytes.length + k2Bytes.length], "Era esperado valores iguais, mas  BC_REFERENCE é diferente de " + " bytes[2 + k1Bytes.length + k2Bytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[3 + k1Bytes.length + k2Bytes.length + refBytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[4 + k1Bytes.length + k2Bytes.length + refBytes.length]")
chamada antiga: assertSame(parsed.get("value"), ((Map) parsed.get("value")).get("parent"))
nova chamada: assertSame(parsed.get("value"), ((Map) parsed.get("value")).get("parent"), "Era esperado objetos iguais, mas " + result975 + " <parsed.get('value')> é diferente de " + result976 + " <((Map) parsed.get('value')).get('parent')>")
chamada antiga: assertEquals(34, bytes.length)
nova chamada: assertEquals(34, bytes.length, "Era esperado valores iguais, mas  34 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_OBJECT, bytes[0])
nova chamada: assertEquals(BC_OBJECT, bytes[0], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[0]")
chamada antiga: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length])
nova chamada: assertEquals(BC_OBJECT, bytes[1 + k1Bytes.length], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[1 + k1Bytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[2 + k1Bytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[2 + k1Bytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[2 + k1Bytes.length]")
chamada antiga: assertEquals(BC_OBJECT, bytes[3 + k1Bytes.length + k2Bytes.length])
nova chamada: assertEquals(BC_OBJECT, bytes[3 + k1Bytes.length + k2Bytes.length], "Era esperado valores iguais, mas  BC_OBJECT é diferente de " + " bytes[3 + k1Bytes.length + k2Bytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[5 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[5 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[5 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length]")
chamada antiga: assertEquals(BC_OBJECT_END, bytes[6 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length])
nova chamada: assertEquals(BC_OBJECT_END, bytes[6 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length], "Era esperado valores iguais, mas  BC_OBJECT_END é diferente de " + " bytes[6 + k1Bytes.length + k2Bytes.length + k3Bytes.length + refBytes.length]")
chamada antiga: assertSame(parsed.get("value0"), ((Map) parsed.get("value1")).get("ref"))
nova chamada: assertSame(parsed.get("value0"), ((Map) parsed.get("value1")).get("ref"), "Era esperado objetos iguais, mas " + result977 + " <parsed.get('value0')> é diferente de " + result978 + " <((Map) parsed.get('value1')).get('ref')>")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_NULL, bytes[0])
nova chamada: assertEquals(BC_NULL, bytes[0], "Era esperado valores iguais, mas  BC_NULL é diferente de " + " bytes[0]")
chamada antiga: assertEquals(11, bytes.length)
nova chamada: assertEquals(11, bytes.length, "Era esperado valores iguais, mas  11 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TIMESTAMP, bytes[0])
nova chamada: assertEquals(BC_TIMESTAMP, bytes[0], "Era esperado valores iguais, mas  BC_TIMESTAMP é diferente de " + " bytes[0]")
chamada antiga: assertEquals(bytes.length, 1 + secondBytes.length + nanoBytes.length)
nova chamada: assertEquals(bytes.length, 1 + secondBytes.length + nanoBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 1 + secondBytes.length + nanoBytes.length")
chamada antiga: assertEquals(instant, parsed)
nova chamada: assertEquals(instant, parsed, "Era esperado valores iguais, mas  instant é diferente de " + " parsed")
chamada antiga: assertEquals(5, bytes.length)
nova chamada: assertEquals(5, bytes.length, "Era esperado valores iguais, mas  5 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TIMESTAMP_SECONDS, bytes[0])
nova chamada: assertEquals(BC_TIMESTAMP_SECONDS, bytes[0], "Era esperado valores iguais, mas  BC_TIMESTAMP_SECONDS é diferente de " + " bytes[0]")
chamada antiga: assertEquals(millis, parsed.getTime())
nova chamada: assertEquals(millis, parsed.getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result979 + " <parsed.getTime()>")
chamada antiga: assertEquals(5, bytes.length)
nova chamada: assertEquals(5, bytes.length, "Era esperado valores iguais, mas  5 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TIMESTAMP_MINUTES, bytes[0])
nova chamada: assertEquals(BC_TIMESTAMP_MINUTES, bytes[0], "Era esperado valores iguais, mas  BC_TIMESTAMP_MINUTES é diferente de " + " bytes[0]")
chamada antiga: assertEquals(millis, parsed.getTime())
nova chamada: assertEquals(millis, parsed.getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result980 + " <parsed.getTime()>")
chamada antiga: assertEquals(9, bytes.length)
nova chamada: assertEquals(9, bytes.length, "Era esperado valores iguais, mas  9 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TIMESTAMP_MILLIS, bytes[0])
nova chamada: assertEquals(BC_TIMESTAMP_MILLIS, bytes[0], "Era esperado valores iguais, mas  BC_TIMESTAMP_MILLIS é diferente de " + " bytes[0]")
chamada antiga: assertEquals(millis, parsed.getTime())
nova chamada: assertEquals(millis, parsed.getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result981 + " <parsed.getTime()>")
chamada antiga: assertEquals(15, bytes.length)
nova chamada: assertEquals(15, bytes.length, "Era esperado valores iguais, mas  15 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TIMESTAMP_WITH_TIMEZONE, bytes[0])
nova chamada: assertEquals(BC_TIMESTAMP_WITH_TIMEZONE, bytes[0], "Era esperado valores iguais, mas  BC_TIMESTAMP_WITH_TIMEZONE é diferente de " + " bytes[0]")
chamada antiga: assertEquals(ldt.getYear(), year)
nova chamada: assertEquals(ldt.getYear(), year, "Era esperado valores iguais, mas " + result982 + " <ldt.getYear()> é diferente de " + " year")
chamada antiga: assertEquals(ldt.getMonthValue(), month)
nova chamada: assertEquals(ldt.getMonthValue(), month, "Era esperado valores iguais, mas " + result983 + " <ldt.getMonthValue()> é diferente de " + " month")
chamada antiga: assertEquals(ldt.getDayOfMonth(), dayOfMonth)
nova chamada: assertEquals(ldt.getDayOfMonth(), dayOfMonth, "Era esperado valores iguais, mas " + result984 + " <ldt.getDayOfMonth()> é diferente de " + " dayOfMonth")
chamada antiga: assertEquals(ldt.getHour(), hour)
nova chamada: assertEquals(ldt.getHour(), hour, "Era esperado valores iguais, mas " + result985 + " <ldt.getHour()> é diferente de " + " hour")
chamada antiga: assertEquals(ldt.getMinute(), minute)
nova chamada: assertEquals(ldt.getMinute(), minute, "Era esperado valores iguais, mas " + result986 + " <ldt.getMinute()> é diferente de " + " minute")
chamada antiga: assertEquals(ldt.getSecond(), second)
nova chamada: assertEquals(ldt.getSecond(), second, "Era esperado valores iguais, mas " + result987 + " <ldt.getSecond()> é diferente de " + " second")
chamada antiga: assertEquals(bytes.length, 8 + nanoBytes.length + zoneIdBytes.length)
nova chamada: assertEquals(bytes.length, 8 + nanoBytes.length + zoneIdBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 8 + nanoBytes.length + zoneIdBytes.length")
chamada antiga: assertEquals(zdt, parsed)
nova chamada: assertEquals(zdt, parsed, "Era esperado valores iguais, mas  zdt é diferente de " + " parsed")
chamada antiga: assertEquals(5, bytes.length)
nova chamada: assertEquals(5, bytes.length, "Era esperado valores iguais, mas  5 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_LOCAL_DATE, bytes[0])
nova chamada: assertEquals(BC_LOCAL_DATE, bytes[0], "Era esperado valores iguais, mas  BC_LOCAL_DATE é diferente de " + " bytes[0]")
chamada antiga: assertEquals(localDate.getYear(), year)
nova chamada: assertEquals(localDate.getYear(), year, "Era esperado valores iguais, mas " + result988 + " <localDate.getYear()> é diferente de " + " year")
chamada antiga: assertEquals(localDate.getMonthValue(), month)
nova chamada: assertEquals(localDate.getMonthValue(), month, "Era esperado valores iguais, mas " + result989 + " <localDate.getMonthValue()> é diferente de " + " month")
chamada antiga: assertEquals(localDate.getDayOfMonth(), dayOfMonth)
nova chamada: assertEquals(localDate.getDayOfMonth(), dayOfMonth, "Era esperado valores iguais, mas " + result990 + " <localDate.getDayOfMonth()> é diferente de " + " dayOfMonth")
chamada antiga: assertEquals(localDate, parsed)
nova chamada: assertEquals(localDate, parsed, "Era esperado valores iguais, mas  localDate é diferente de " + " parsed")
chamada antiga: assertEquals(13, bytes.length)
nova chamada: assertEquals(13, bytes.length, "Era esperado valores iguais, mas  13 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_LOCAL_DATETIME, bytes[0])
nova chamada: assertEquals(BC_LOCAL_DATETIME, bytes[0], "Era esperado valores iguais, mas  BC_LOCAL_DATETIME é diferente de " + " bytes[0]")
chamada antiga: assertEquals(ldt.getYear(), year)
nova chamada: assertEquals(ldt.getYear(), year, "Era esperado valores iguais, mas " + result991 + " <ldt.getYear()> é diferente de " + " year")
chamada antiga: assertEquals(ldt.getMonthValue(), month)
nova chamada: assertEquals(ldt.getMonthValue(), month, "Era esperado valores iguais, mas " + result992 + " <ldt.getMonthValue()> é diferente de " + " month")
chamada antiga: assertEquals(ldt.getDayOfMonth(), dayOfMonth)
nova chamada: assertEquals(ldt.getDayOfMonth(), dayOfMonth, "Era esperado valores iguais, mas " + result993 + " <ldt.getDayOfMonth()> é diferente de " + " dayOfMonth")
chamada antiga: assertEquals(ldt.getHour(), hour)
nova chamada: assertEquals(ldt.getHour(), hour, "Era esperado valores iguais, mas " + result994 + " <ldt.getHour()> é diferente de " + " hour")
chamada antiga: assertEquals(ldt.getMinute(), minute)
nova chamada: assertEquals(ldt.getMinute(), minute, "Era esperado valores iguais, mas " + result995 + " <ldt.getMinute()> é diferente de " + " minute")
chamada antiga: assertEquals(ldt.getSecond(), second)
nova chamada: assertEquals(ldt.getSecond(), second, "Era esperado valores iguais, mas " + result996 + " <ldt.getSecond()> é diferente de " + " second")
chamada antiga: assertEquals(bytes.length, 8 + nanoBytes.length)
nova chamada: assertEquals(bytes.length, 8 + nanoBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 8 + nanoBytes.length")
chamada antiga: assertEquals(ldt, parsed)
nova chamada: assertEquals(ldt, parsed, "Era esperado valores iguais, mas  ldt é diferente de " + " parsed")
chamada antiga: assertEquals(9, bytes.length)
nova chamada: assertEquals(9, bytes.length, "Era esperado valores iguais, mas  9 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_LOCAL_DATETIME, bytes[0])
nova chamada: assertEquals(BC_LOCAL_DATETIME, bytes[0], "Era esperado valores iguais, mas  BC_LOCAL_DATETIME é diferente de " + " bytes[0]")
chamada antiga: assertEquals(ldt.getYear(), year)
nova chamada: assertEquals(ldt.getYear(), year, "Era esperado valores iguais, mas " + result997 + " <ldt.getYear()> é diferente de " + " year")
chamada antiga: assertEquals(ldt.getMonthValue(), month)
nova chamada: assertEquals(ldt.getMonthValue(), month, "Era esperado valores iguais, mas " + result998 + " <ldt.getMonthValue()> é diferente de " + " month")
chamada antiga: assertEquals(ldt.getDayOfMonth(), dayOfMonth)
nova chamada: assertEquals(ldt.getDayOfMonth(), dayOfMonth, "Era esperado valores iguais, mas " + result999 + " <ldt.getDayOfMonth()> é diferente de " + " dayOfMonth")
chamada antiga: assertEquals(ldt.getHour(), hour)
nova chamada: assertEquals(ldt.getHour(), hour, "Era esperado valores iguais, mas " + result1000 + " <ldt.getHour()> é diferente de " + " hour")
chamada antiga: assertEquals(ldt.getMinute(), minute)
nova chamada: assertEquals(ldt.getMinute(), minute, "Era esperado valores iguais, mas " + result1001 + " <ldt.getMinute()> é diferente de " + " minute")
chamada antiga: assertEquals(ldt.getSecond(), second)
nova chamada: assertEquals(ldt.getSecond(), second, "Era esperado valores iguais, mas " + result1002 + " <ldt.getSecond()> é diferente de " + " second")
chamada antiga: assertEquals(bytes.length, 8 + nanoBytes.length)
nova chamada: assertEquals(bytes.length, 8 + nanoBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 8 + nanoBytes.length")
chamada antiga: assertEquals(ldt, parsed)
nova chamada: assertEquals(ldt, parsed, "Era esperado valores iguais, mas  ldt é diferente de " + " parsed")
chamada antiga: assertEquals(9, bytes.length)
nova chamada: assertEquals(9, bytes.length, "Era esperado valores iguais, mas  9 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_LOCAL_TIME, bytes[0])
nova chamada: assertEquals(BC_LOCAL_TIME, bytes[0], "Era esperado valores iguais, mas  BC_LOCAL_TIME é diferente de " + " bytes[0]")
chamada antiga: assertEquals(localTime.getHour(), hour)
nova chamada: assertEquals(localTime.getHour(), hour, "Era esperado valores iguais, mas " + result1003 + " <localTime.getHour()> é diferente de " + " hour")
chamada antiga: assertEquals(localTime.getMinute(), minute)
nova chamada: assertEquals(localTime.getMinute(), minute, "Era esperado valores iguais, mas " + result1004 + " <localTime.getMinute()> é diferente de " + " minute")
chamada antiga: assertEquals(localTime.getSecond(), second)
nova chamada: assertEquals(localTime.getSecond(), second, "Era esperado valores iguais, mas " + result1005 + " <localTime.getSecond()> é diferente de " + " second")
chamada antiga: assertEquals(bytes.length, 4 + nanoBytes.length)
nova chamada: assertEquals(bytes.length, 4 + nanoBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 4 + nanoBytes.length")
chamada antiga: assertEquals(localTime, parsed)
nova chamada: assertEquals(localTime, parsed, "Era esperado valores iguais, mas  localTime é diferente de " + " parsed")
chamada antiga: assertEquals(5, bytes.length)
nova chamada: assertEquals(5, bytes.length, "Era esperado valores iguais, mas  5 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_LOCAL_TIME, bytes[0])
nova chamada: assertEquals(BC_LOCAL_TIME, bytes[0], "Era esperado valores iguais, mas  BC_LOCAL_TIME é diferente de " + " bytes[0]")
chamada antiga: assertEquals(localTime.getHour(), hour)
nova chamada: assertEquals(localTime.getHour(), hour, "Era esperado valores iguais, mas " + result1006 + " <localTime.getHour()> é diferente de " + " hour")
chamada antiga: assertEquals(localTime.getMinute(), minute)
nova chamada: assertEquals(localTime.getMinute(), minute, "Era esperado valores iguais, mas " + result1007 + " <localTime.getMinute()> é diferente de " + " minute")
chamada antiga: assertEquals(localTime.getSecond(), second)
nova chamada: assertEquals(localTime.getSecond(), second, "Era esperado valores iguais, mas " + result1008 + " <localTime.getSecond()> é diferente de " + " second")
chamada antiga: assertEquals(bytes.length, 4 + nanoBytes.length)
nova chamada: assertEquals(bytes.length, 4 + nanoBytes.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " 4 + nanoBytes.length")
chamada antiga: assertEquals(localTime, parsed)
nova chamada: assertEquals(localTime, parsed, "Era esperado valores iguais, mas  localTime é diferente de " + " parsed")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_TRUE, bytes[0])
nova chamada: assertEquals(BC_TRUE, bytes[0], "Era esperado valores iguais, mas  BC_TRUE é diferente de " + " bytes[0]")
chamada antiga: assertTrue(parsed.booleanValue())
nova chamada: assertTrue(parsed.booleanValue(), "Era esperado verdadeiro, mas " + result1009 + " <parsed.booleanValue()> é falso")
chamada antiga: assertEquals(1, bytes.length)
nova chamada: assertEquals(1, bytes.length, "Era esperado valores iguais, mas  1 é diferente de " + " bytes.length")
chamada antiga: assertEquals(BC_FALSE, bytes[0])
nova chamada: assertEquals(BC_FALSE, bytes[0], "Era esperado valores iguais, mas  BC_FALSE é diferente de " + " bytes[0]")
chamada antiga: assertEquals(bitSet1, bitSet2)
nova chamada: assertEquals(bitSet1, bitSet2, "Era esperado valores iguais, mas  bitSet1 é diferente de " + " bitSet2")
chamada antiga: assertEquals(bitSet1, bitSet2)
nova chamada: assertEquals(bitSet1, bitSet2, "Era esperado valores iguais, mas  bitSet1 é diferente de " + " bitSet2")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2_vo.Int1\"\n" + "}", JSONB.toJSONString(jsonbBytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2_vo.Int1\"\n" + "}", JSONB.toJSONString(jsonbBytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2_vo.Int1\'\n' + '}' é diferente de " + result1010 + " <JSONB.toJSONString(jsonbBytes)>")
chamada antiga: assertEquals("{}", JSONB.toJSONString(jsonbBytes))
nova chamada: assertEquals("{}", JSONB.toJSONString(jsonbBytes), "Era esperado valores iguais, mas  '{}' é diferente de " + result1011 + " <JSONB.toJSONString(jsonbBytes)>")
chamada antiga: assertEquals("INT32 0", typeName((byte) 0))
nova chamada: assertEquals("INT32 0", typeName((byte) 0), "Era esperado valores iguais, mas  'INT32 0' é diferente de " + result1012 + " <typeName((byte) 0)>")
chamada antiga: assertEquals("INT32 1", typeName((byte) 1))
nova chamada: assertEquals("INT32 1", typeName((byte) 1), "Era esperado valores iguais, mas  'INT32 1' é diferente de " + result1013 + " <typeName((byte) 1)>")
chamada antiga: assertEquals("INT32 2", typeName((byte) 2))
nova chamada: assertEquals("INT32 2", typeName((byte) 2), "Era esperado valores iguais, mas  'INT32 2' é diferente de " + result1014 + " <typeName((byte) 2)>")
chamada antiga: assertEquals("INT32 3", typeName((byte) 3))
nova chamada: assertEquals("INT32 3", typeName((byte) 3), "Era esperado valores iguais, mas  'INT32 3' é diferente de " + result1015 + " <typeName((byte) 3)>")
chamada antiga: assertEquals("INT32 4", typeName((byte) 4))
nova chamada: assertEquals("INT32 4", typeName((byte) 4), "Era esperado valores iguais, mas  'INT32 4' é diferente de " + result1016 + " <typeName((byte) 4)>")
chamada antiga: assertEquals("INT32 5", typeName((byte) 5))
nova chamada: assertEquals("INT32 5", typeName((byte) 5), "Era esperado valores iguais, mas  'INT32 5' é diferente de " + result1017 + " <typeName((byte) 5)>")
chamada antiga: assertEquals("INT32 6", typeName((byte) 6))
nova chamada: assertEquals("INT32 6", typeName((byte) 6), "Era esperado valores iguais, mas  'INT32 6' é diferente de " + result1018 + " <typeName((byte) 6)>")
chamada antiga: assertEquals("INT32 7", typeName((byte) 7))
nova chamada: assertEquals("INT32 7", typeName((byte) 7), "Era esperado valores iguais, mas  'INT32 7' é diferente de " + result1019 + " <typeName((byte) 7)>")
chamada antiga: assertEquals("INT32 8", typeName((byte) 8))
nova chamada: assertEquals("INT32 8", typeName((byte) 8), "Era esperado valores iguais, mas  'INT32 8' é diferente de " + result1020 + " <typeName((byte) 8)>")
chamada antiga: assertEquals("INT32 9", typeName((byte) 9))
nova chamada: assertEquals("INT32 9", typeName((byte) 9), "Era esperado valores iguais, mas  'INT32 9' é diferente de " + result1021 + " <typeName((byte) 9)>")
chamada antiga: assertEquals("INT32 10", typeName((byte) 10))
nova chamada: assertEquals("INT32 10", typeName((byte) 10), "Era esperado valores iguais, mas  'INT32 10' é diferente de " + result1022 + " <typeName((byte) 10)>")
chamada antiga: assertEquals("STR_ASCII " + BC_STR_ASCII, typeName(BC_STR_ASCII))
nova chamada: assertEquals("STR_ASCII " + BC_STR_ASCII, typeName(BC_STR_ASCII), "Era esperado valores iguais, mas  'STR_ASCII ' + BC_STR_ASCII é diferente de " + result1023 + " <typeName(BC_STR_ASCII)>")
chamada antiga: assertEquals("STR_UTF8 " + BC_STR_UTF8, typeName(BC_STR_UTF8))
nova chamada: assertEquals("STR_UTF8 " + BC_STR_UTF8, typeName(BC_STR_UTF8), "Era esperado valores iguais, mas  'STR_UTF8 ' + BC_STR_UTF8 é diferente de " + result1024 + " <typeName(BC_STR_UTF8)>")
chamada antiga: assertEquals("STR_UTF16 " + BC_STR_UTF16, typeName(BC_STR_UTF16))
nova chamada: assertEquals("STR_UTF16 " + BC_STR_UTF16, typeName(BC_STR_UTF16), "Era esperado valores iguais, mas  'STR_UTF16 ' + BC_STR_UTF16 é diferente de " + result1025 + " <typeName(BC_STR_UTF16)>")
chamada antiga: assertEquals("STR_UTF16LE " + BC_STR_UTF16LE, typeName(BC_STR_UTF16LE))
nova chamada: assertEquals("STR_UTF16LE " + BC_STR_UTF16LE, typeName(BC_STR_UTF16LE), "Era esperado valores iguais, mas  'STR_UTF16LE ' + BC_STR_UTF16LE é diferente de " + result1026 + " <typeName(BC_STR_UTF16LE)>")
chamada antiga: assertEquals("STR_UTF16BE " + BC_STR_UTF16BE, typeName(BC_STR_UTF16BE))
nova chamada: assertEquals("STR_UTF16BE " + BC_STR_UTF16BE, typeName(BC_STR_UTF16BE), "Era esperado valores iguais, mas  'STR_UTF16BE ' + BC_STR_UTF16BE é diferente de " + result1027 + " <typeName(BC_STR_UTF16BE)>")
chamada antiga: assertEquals("BINARY " + BC_BINARY, typeName(BC_BINARY))
nova chamada: assertEquals("BINARY " + BC_BINARY, typeName(BC_BINARY), "Era esperado valores iguais, mas  'BINARY ' + BC_BINARY é diferente de " + result1028 + " <typeName(BC_BINARY)>")
chamada antiga: assertEquals("NULL " + BC_NULL, typeName(BC_NULL))
nova chamada: assertEquals("NULL " + BC_NULL, typeName(BC_NULL), "Era esperado valores iguais, mas  'NULL ' + BC_NULL é diferente de " + result1029 + " <typeName(BC_NULL)>")
chamada antiga: assertEquals("TRUE " + BC_TRUE, typeName(BC_TRUE))
nova chamada: assertEquals("TRUE " + BC_TRUE, typeName(BC_TRUE), "Era esperado valores iguais, mas  'TRUE ' + BC_TRUE é diferente de " + result1030 + " <typeName(BC_TRUE)>")
chamada antiga: assertEquals("FALSE " + BC_FALSE, typeName(BC_FALSE))
nova chamada: assertEquals("FALSE " + BC_FALSE, typeName(BC_FALSE), "Era esperado valores iguais, mas  'FALSE ' + BC_FALSE é diferente de " + result1031 + " <typeName(BC_FALSE)>")
chamada antiga: assertEquals("INT32 " + BC_INT32_BYTE_MIN, typeName(BC_INT32_BYTE_MIN))
nova chamada: assertEquals("INT32 " + BC_INT32_BYTE_MIN, typeName(BC_INT32_BYTE_MIN), "Era esperado valores iguais, mas  'INT32 ' + BC_INT32_BYTE_MIN é diferente de " + result1032 + " <typeName(BC_INT32_BYTE_MIN)>")
chamada antiga: assertEquals("INT32 " + BC_INT32_BYTE_MAX, typeName(BC_INT32_BYTE_MAX))
nova chamada: assertEquals("INT32 " + BC_INT32_BYTE_MAX, typeName(BC_INT32_BYTE_MAX), "Era esperado valores iguais, mas  'INT32 ' + BC_INT32_BYTE_MAX é diferente de " + result1033 + " <typeName(BC_INT32_BYTE_MAX)>")
chamada antiga: assertEquals("INT32 " + BC_INT32_SHORT_MIN, typeName(BC_INT32_SHORT_MIN))
nova chamada: assertEquals("INT32 " + BC_INT32_SHORT_MIN, typeName(BC_INT32_SHORT_MIN), "Era esperado valores iguais, mas  'INT32 ' + BC_INT32_SHORT_MIN é diferente de " + result1034 + " <typeName(BC_INT32_SHORT_MIN)>")
chamada antiga: assertEquals("INT32 " + BC_INT32_SHORT_MAX, typeName(BC_INT32_SHORT_MAX))
nova chamada: assertEquals("INT32 " + BC_INT32_SHORT_MAX, typeName(BC_INT32_SHORT_MAX), "Era esperado valores iguais, mas  'INT32 ' + BC_INT32_SHORT_MAX é diferente de " + result1035 + " <typeName(BC_INT32_SHORT_MAX)>")
chamada antiga: assertEquals("INT32 " + BC_INT32, typeName(BC_INT32))
nova chamada: assertEquals("INT32 " + BC_INT32, typeName(BC_INT32), "Era esperado valores iguais, mas  'INT32 ' + BC_INT32 é diferente de " + result1036 + " <typeName(BC_INT32)>")
chamada antiga: assertEquals("INT64 " + BC_INT64, typeName(BC_INT64))
nova chamada: assertEquals("INT64 " + BC_INT64, typeName(BC_INT64), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64 é diferente de " + result1037 + " <typeName(BC_INT64)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_NUM_MIN, typeName(BC_INT64_NUM_MIN))
nova chamada: assertEquals("INT64 " + BC_INT64_NUM_MIN, typeName(BC_INT64_NUM_MIN), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_NUM_MIN é diferente de " + result1038 + " <typeName(BC_INT64_NUM_MIN)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_NUM_MAX, typeName(BC_INT64_NUM_MAX))
nova chamada: assertEquals("INT64 " + BC_INT64_NUM_MAX, typeName(BC_INT64_NUM_MAX), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_NUM_MAX é diferente de " + result1039 + " <typeName(BC_INT64_NUM_MAX)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_BYTE_MIN, typeName(BC_INT64_BYTE_MIN))
nova chamada: assertEquals("INT64 " + BC_INT64_BYTE_MIN, typeName(BC_INT64_BYTE_MIN), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_BYTE_MIN é diferente de " + result1040 + " <typeName(BC_INT64_BYTE_MIN)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_BYTE_MAX, typeName(BC_INT64_BYTE_MAX))
nova chamada: assertEquals("INT64 " + BC_INT64_BYTE_MAX, typeName(BC_INT64_BYTE_MAX), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_BYTE_MAX é diferente de " + result1041 + " <typeName(BC_INT64_BYTE_MAX)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_SHORT_MIN, typeName(BC_INT64_SHORT_MIN))
nova chamada: assertEquals("INT64 " + BC_INT64_SHORT_MIN, typeName(BC_INT64_SHORT_MIN), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_SHORT_MIN é diferente de " + result1042 + " <typeName(BC_INT64_SHORT_MIN)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_SHORT_MAX, typeName(BC_INT64_SHORT_MAX))
nova chamada: assertEquals("INT64 " + BC_INT64_SHORT_MAX, typeName(BC_INT64_SHORT_MAX), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_SHORT_MAX é diferente de " + result1043 + " <typeName(BC_INT64_SHORT_MAX)>")
chamada antiga: assertEquals("INT64 " + BC_INT64_INT, typeName(BC_INT64_INT))
nova chamada: assertEquals("INT64 " + BC_INT64_INT, typeName(BC_INT64_INT), "Era esperado valores iguais, mas  'INT64 ' + BC_INT64_INT é diferente de " + result1044 + " <typeName(BC_INT64_INT)>")
chamada antiga: assertEquals("BIGINT " + BC_BIGINT, typeName(BC_BIGINT))
nova chamada: assertEquals("BIGINT " + BC_BIGINT, typeName(BC_BIGINT), "Era esperado valores iguais, mas  'BIGINT ' + BC_BIGINT é diferente de " + result1045 + " <typeName(BC_BIGINT)>")
chamada antiga: assertEquals("BIGINT " + BC_BIGINT_LONG, typeName(BC_BIGINT_LONG))
nova chamada: assertEquals("BIGINT " + BC_BIGINT_LONG, typeName(BC_BIGINT_LONG), "Era esperado valores iguais, mas  'BIGINT ' + BC_BIGINT_LONG é diferente de " + result1046 + " <typeName(BC_BIGINT_LONG)>")
chamada antiga: assertEquals("INT8 " + BC_INT8, typeName(BC_INT8))
nova chamada: assertEquals("INT8 " + BC_INT8, typeName(BC_INT8), "Era esperado valores iguais, mas  'INT8 ' + BC_INT8 é diferente de " + result1047 + " <typeName(BC_INT8)>")
chamada antiga: assertEquals("INT16 " + BC_INT16, typeName(BC_INT16))
nova chamada: assertEquals("INT16 " + BC_INT16, typeName(BC_INT16), "Era esperado valores iguais, mas  'INT16 ' + BC_INT16 é diferente de " + result1048 + " <typeName(BC_INT16)>")
chamada antiga: assertEquals("FLOAT " + BC_FLOAT, typeName(BC_FLOAT))
nova chamada: assertEquals("FLOAT " + BC_FLOAT, typeName(BC_FLOAT), "Era esperado valores iguais, mas  'FLOAT ' + BC_FLOAT é diferente de " + result1049 + " <typeName(BC_FLOAT)>")
chamada antiga: assertEquals("FLOAT " + BC_FLOAT_INT, typeName(BC_FLOAT_INT))
nova chamada: assertEquals("FLOAT " + BC_FLOAT_INT, typeName(BC_FLOAT_INT), "Era esperado valores iguais, mas  'FLOAT ' + BC_FLOAT_INT é diferente de " + result1050 + " <typeName(BC_FLOAT_INT)>")
chamada antiga: assertEquals("DOUBLE " + BC_DOUBLE, typeName(BC_DOUBLE))
nova chamada: assertEquals("DOUBLE " + BC_DOUBLE, typeName(BC_DOUBLE), "Era esperado valores iguais, mas  'DOUBLE ' + BC_DOUBLE é diferente de " + result1051 + " <typeName(BC_DOUBLE)>")
chamada antiga: assertEquals("DOUBLE " + BC_DOUBLE_LONG, typeName(BC_DOUBLE_LONG))
nova chamada: assertEquals("DOUBLE " + BC_DOUBLE_LONG, typeName(BC_DOUBLE_LONG), "Era esperado valores iguais, mas  'DOUBLE ' + BC_DOUBLE_LONG é diferente de " + result1052 + " <typeName(BC_DOUBLE_LONG)>")
chamada antiga: assertEquals("DOUBLE " + BC_DOUBLE_NUM_0, typeName(BC_DOUBLE_NUM_0))
nova chamada: assertEquals("DOUBLE " + BC_DOUBLE_NUM_0, typeName(BC_DOUBLE_NUM_0), "Era esperado valores iguais, mas  'DOUBLE ' + BC_DOUBLE_NUM_0 é diferente de " + result1053 + " <typeName(BC_DOUBLE_NUM_0)>")
chamada antiga: assertEquals("DOUBLE " + BC_DOUBLE_NUM_1, typeName(BC_DOUBLE_NUM_1))
nova chamada: assertEquals("DOUBLE " + BC_DOUBLE_NUM_1, typeName(BC_DOUBLE_NUM_1), "Era esperado valores iguais, mas  'DOUBLE ' + BC_DOUBLE_NUM_1 é diferente de " + result1054 + " <typeName(BC_DOUBLE_NUM_1)>")
chamada antiga: assertEquals("DECIMAL " + BC_DECIMAL, typeName(BC_DECIMAL))
nova chamada: assertEquals("DECIMAL " + BC_DECIMAL, typeName(BC_DECIMAL), "Era esperado valores iguais, mas  'DECIMAL ' + BC_DECIMAL é diferente de " + result1055 + " <typeName(BC_DECIMAL)>")
chamada antiga: assertEquals("DECIMAL " + BC_DECIMAL_LONG, typeName(BC_DECIMAL_LONG))
nova chamada: assertEquals("DECIMAL " + BC_DECIMAL_LONG, typeName(BC_DECIMAL_LONG), "Era esperado valores iguais, mas  'DECIMAL ' + BC_DECIMAL_LONG é diferente de " + result1056 + " <typeName(BC_DECIMAL_LONG)>")
chamada antiga: assertEquals("LOCAL_TIME " + BC_LOCAL_TIME, typeName(BC_LOCAL_TIME))
nova chamada: assertEquals("LOCAL_TIME " + BC_LOCAL_TIME, typeName(BC_LOCAL_TIME), "Era esperado valores iguais, mas  'LOCAL_TIME ' + BC_LOCAL_TIME é diferente de " + result1057 + " <typeName(BC_LOCAL_TIME)>")
chamada antiga: assertEquals("LOCAL_DATETIME " + BC_LOCAL_DATETIME, typeName(BC_LOCAL_DATETIME))
nova chamada: assertEquals("LOCAL_DATETIME " + BC_LOCAL_DATETIME, typeName(BC_LOCAL_DATETIME), "Era esperado valores iguais, mas  'LOCAL_DATETIME ' + BC_LOCAL_DATETIME é diferente de " + result1058 + " <typeName(BC_LOCAL_DATETIME)>")
chamada antiga: assertEquals("TIMESTAMP " + BC_TIMESTAMP, typeName(BC_TIMESTAMP))
nova chamada: assertEquals("TIMESTAMP " + BC_TIMESTAMP, typeName(BC_TIMESTAMP), "Era esperado valores iguais, mas  'TIMESTAMP ' + BC_TIMESTAMP é diferente de " + result1059 + " <typeName(BC_TIMESTAMP)>")
chamada antiga: assertEquals("TIMESTAMP_MINUTES " + BC_TIMESTAMP_MINUTES, typeName(BC_TIMESTAMP_MINUTES))
nova chamada: assertEquals("TIMESTAMP_MINUTES " + BC_TIMESTAMP_MINUTES, typeName(BC_TIMESTAMP_MINUTES), "Era esperado valores iguais, mas  'TIMESTAMP_MINUTES ' + BC_TIMESTAMP_MINUTES é diferente de " + result1060 + " <typeName(BC_TIMESTAMP_MINUTES)>")
chamada antiga: assertEquals("TIMESTAMP_SECONDS " + BC_TIMESTAMP_SECONDS, typeName(BC_TIMESTAMP_SECONDS))
nova chamada: assertEquals("TIMESTAMP_SECONDS " + BC_TIMESTAMP_SECONDS, typeName(BC_TIMESTAMP_SECONDS), "Era esperado valores iguais, mas  'TIMESTAMP_SECONDS ' + BC_TIMESTAMP_SECONDS é diferente de " + result1061 + " <typeName(BC_TIMESTAMP_SECONDS)>")
chamada antiga: assertEquals("TIMESTAMP_MILLIS " + BC_TIMESTAMP_MILLIS, typeName(BC_TIMESTAMP_MILLIS))
nova chamada: assertEquals("TIMESTAMP_MILLIS " + BC_TIMESTAMP_MILLIS, typeName(BC_TIMESTAMP_MILLIS), "Era esperado valores iguais, mas  'TIMESTAMP_MILLIS ' + BC_TIMESTAMP_MILLIS é diferente de " + result1062 + " <typeName(BC_TIMESTAMP_MILLIS)>")
chamada antiga: assertEquals("TIMESTAMP_WITH_TIMEZONE " + BC_TIMESTAMP_WITH_TIMEZONE, typeName(BC_TIMESTAMP_WITH_TIMEZONE))
nova chamada: assertEquals("TIMESTAMP_WITH_TIMEZONE " + BC_TIMESTAMP_WITH_TIMEZONE, typeName(BC_TIMESTAMP_WITH_TIMEZONE), "Era esperado valores iguais, mas  'TIMESTAMP_WITH_TIMEZONE ' + BC_TIMESTAMP_WITH_TIMEZONE é diferente de " + result1063 + " <typeName(BC_TIMESTAMP_WITH_TIMEZONE)>")
chamada antiga: assertEquals("LOCAL_DATE " + BC_LOCAL_DATE, typeName(BC_LOCAL_DATE))
nova chamada: assertEquals("LOCAL_DATE " + BC_LOCAL_DATE, typeName(BC_LOCAL_DATE), "Era esperado valores iguais, mas  'LOCAL_DATE ' + BC_LOCAL_DATE é diferente de " + result1064 + " <typeName(BC_LOCAL_DATE)>")
chamada antiga: assertEquals("TYPED_ANY " + BC_TYPED_ANY, typeName(BC_TYPED_ANY))
nova chamada: assertEquals("TYPED_ANY " + BC_TYPED_ANY, typeName(BC_TYPED_ANY), "Era esperado valores iguais, mas  'TYPED_ANY ' + BC_TYPED_ANY é diferente de " + result1065 + " <typeName(BC_TYPED_ANY)>")
chamada antiga: assertEquals("ARRAY " + BC_ARRAY, typeName(BC_ARRAY))
nova chamada: assertEquals("ARRAY " + BC_ARRAY, typeName(BC_ARRAY), "Era esperado valores iguais, mas  'ARRAY ' + BC_ARRAY é diferente de " + result1066 + " <typeName(BC_ARRAY)>")
chamada antiga: assertEquals("ARRAY " + BC_ARRAY_FIX_MIN, typeName(BC_ARRAY_FIX_MIN))
nova chamada: assertEquals("ARRAY " + BC_ARRAY_FIX_MIN, typeName(BC_ARRAY_FIX_MIN), "Era esperado valores iguais, mas  'ARRAY ' + BC_ARRAY_FIX_MIN é diferente de " + result1067 + " <typeName(BC_ARRAY_FIX_MIN)>")
chamada antiga: assertEquals("REFERENCE " + BC_REFERENCE, typeName(BC_REFERENCE))
nova chamada: assertEquals("REFERENCE " + BC_REFERENCE, typeName(BC_REFERENCE), "Era esperado valores iguais, mas  'REFERENCE ' + BC_REFERENCE é diferente de " + result1068 + " <typeName(BC_REFERENCE)>")
chamada antiga: assertEquals("OBJECT " + BC_OBJECT, typeName(BC_OBJECT))
nova chamada: assertEquals("OBJECT " + BC_OBJECT, typeName(BC_OBJECT), "Era esperado valores iguais, mas  'OBJECT ' + BC_OBJECT é diferente de " + result1069 + " <typeName(BC_OBJECT)>")
chamada antiga: assertEquals("OBJECT_END " + BC_OBJECT_END, typeName(BC_OBJECT_END))
nova chamada: assertEquals("OBJECT_END " + BC_OBJECT_END, typeName(BC_OBJECT_END), "Era esperado valores iguais, mas  'OBJECT_END ' + BC_OBJECT_END é diferente de " + result1070 + " <typeName(BC_OBJECT_END)>")
chamada antiga: assertEquals("SYMBOL " + BC_SYMBOL, typeName(BC_SYMBOL))
nova chamada: assertEquals("SYMBOL " + BC_SYMBOL, typeName(BC_SYMBOL), "Era esperado valores iguais, mas  'SYMBOL ' + BC_SYMBOL é diferente de " + result1071 + " <typeName(BC_SYMBOL)>")
chamada antiga: assertEquals("-128", typeName((byte) -128))
nova chamada: assertEquals("-128", typeName((byte) -128), "Era esperado valores iguais, mas  '-128' é diferente de " + result1072 + " <typeName((byte) -128)>")
chamada antiga: assertNotNull(a)
nova chamada: assertNotNull(a, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(value, JSONB.parse(bytes, JSONReader.Feature.SupportAutoType))
nova chamada: assertEquals(value, JSONB.parse(bytes, JSONReader.Feature.SupportAutoType), "Era esperado valores iguais, mas  value é diferente de " + result1073 + " <JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)>")
chamada antiga: assertEquals(value, JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertEquals(value, JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType), "Era esperado valores iguais, mas  value é diferente de " + result1074 + " <JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)>")
chamada antiga: assertEquals(bean.value, ((Bean) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value)
nova chamada: assertEquals(bean.value, ((Bean) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " ((Bean) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value")
chamada antiga: assertEquals(bean.value, ((Bean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value)
nova chamada: assertEquals(bean.value, ((Bean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " ((Bean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value")
chamada antiga: assertEquals(bean.value, ((Bean2) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value)
nova chamada: assertEquals(bean.value, ((Bean2) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " ((Bean2) JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)).value")
chamada antiga: assertEquals(bean.value, ((Bean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value)
nova chamada: assertEquals(bean.value, ((Bean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " ((Bean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType)).value")
chamada antiga: assertEquals(bean.value, JSONB.parseObject(bytes, Bean3.class, JSONReader.Feature.SupportAutoType).value)
nova chamada: assertEquals(bean.value, JSONB.parseObject(bytes, Bean3.class, JSONReader.Feature.SupportAutoType).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " JSONB.parseObject(bytes, Bean3.class, JSONReader.Feature.SupportAutoType).value")
chamada antiga: assertEquals(bean.value, JSONB.parseObject(bytes, Bean4.class, JSONReader.Feature.SupportAutoType).value)
nova chamada: assertEquals(bean.value, JSONB.parseObject(bytes, Bean4.class, JSONReader.Feature.SupportAutoType).value, "Era esperado valores iguais, mas  bean.value é diferente de " + " JSONB.parseObject(bytes, Bean4.class, JSONReader.Feature.SupportAutoType).value")
chamada antiga: assertTrue(target.getAtomicBoolean() == null || !target.getAtomicBoolean().get())
nova chamada: assertTrue(target.getAtomicBoolean() == null || !target.getAtomicBoolean().get(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(target2.getAtomicBoolean())
nova chamada: assertNotNull(target2.getAtomicBoolean(), "Era esperado não nulo, mas " + result1075 + " <target2.getAtomicBoolean()> é nulo")
chamada antiga: assertNull(jsonWriter.symbolTable)
nova chamada: assertNull(jsonWriter.symbolTable, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(size, bytes.length)
nova chamada: assertEquals(size, bytes.length, "Era esperado valores iguais, mas  size é diferente de " + " bytes.length")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals("{\"id\":100}", JSON.toJSONString(userActivity))
nova chamada: assertEquals("{\"id\":100}", JSON.toJSONString(userActivity), "Era esperado valores iguais, mas  '{\'id\':100}' é diferente de " + result1076 + " <JSON.toJSONString(userActivity)>")
chamada antiga: assertEquals(0, JSONArray.from(new Integer[] { 0, 1, 2, 3, 4, 5 }).get(0))
nova chamada: assertEquals(0, JSONArray.from(new Integer[] { 0, 1, 2, 3, 4, 5 }).get(0), "Era esperado valores iguais, mas  0 é diferente de " + result1077 + " <JSONArray.from(new Integer[] { 0, 1, 2, 3, 4, 5 }).get(0)>")
chamada antiga: assertEquals(0, JSONArray.from(nums).get(0))
nova chamada: assertEquals(0, JSONArray.from(nums).get(0), "Era esperado valores iguais, mas  0 é diferente de " + result1078 + " <JSONArray.from(nums).get(0)>")
chamada antiga: assertEquals("abc", jsonPath.eval("ABC"))
nova chamada: assertEquals("abc", jsonPath.eval("ABC"), "Era esperado valores iguais, mas  'abc' é diferente de " + result1079 + " <jsonPath.eval('ABC')>")
chamada antiga: assertEquals("1", jsonPath.eval(1))
nova chamada: assertEquals("1", jsonPath.eval(1), "Era esperado valores iguais, mas  '1' é diferente de " + result1080 + " <jsonPath.eval(1)>")
chamada antiga: assertNull(jsonPath.eval(null))
nova chamada: assertNull(jsonPath.eval(null), "Era esperado nulo, mas " + result1081 + " <jsonPath.eval(null)> não é nulo")
chamada antiga: assertEquals("ABC", jsonPath.eval("ABC"))
nova chamada: assertEquals("ABC", jsonPath.eval("ABC"), "Era esperado valores iguais, mas  'ABC' é diferente de " + result1082 + " <jsonPath.eval('ABC')>")
chamada antiga: assertEquals("1", jsonPath.eval(1))
nova chamada: assertEquals("1", jsonPath.eval(1), "Era esperado valores iguais, mas  '1' é diferente de " + result1083 + " <jsonPath.eval(1)>")
chamada antiga: assertNull(jsonPath.eval(null))
nova chamada: assertNull(jsonPath.eval(null), "Era esperado nulo, mas " + result1084 + " <jsonPath.eval(null)> não é nulo")
chamada antiga: assertEquals("ABC", jsonPath.eval(" ABC "))
nova chamada: assertEquals("ABC", jsonPath.eval(" ABC "), "Era esperado valores iguais, mas  'ABC' é diferente de " + result1085 + " <jsonPath.eval(' ABC ')>")
chamada antiga: assertEquals("1", jsonPath.eval(1))
nova chamada: assertEquals("1", jsonPath.eval(1), "Era esperado valores iguais, mas  '1' é diferente de " + result1086 + " <jsonPath.eval(1)>")
chamada antiga: assertNull(jsonPath.eval(null))
nova chamada: assertNull(jsonPath.eval(null), "Era esperado nulo, mas " + result1087 + " <jsonPath.eval(null)> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", BigDecimal.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", BigDecimal.class).extract("{}"), "Era esperado nulo, mas " + result1088 + " <JSONPath.of('$.value', BigDecimal.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Integer.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Integer.class).extract("{}"), "Era esperado nulo, mas " + result1089 + " <JSONPath.of('$.value', Integer.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Long.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Long.class).extract("{}"), "Era esperado nulo, mas " + result1090 + " <JSONPath.of('$.value', Long.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", String.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", String.class).extract("{}"), "Era esperado nulo, mas " + result1091 + " <JSONPath.of('$.value', String.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Float.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Float.class).extract("{}"), "Era esperado nulo, mas " + result1092 + " <JSONPath.of('$.value', Float.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Double.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Double.class).extract("{}"), "Era esperado nulo, mas " + result1093 + " <JSONPath.of('$.value', Double.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Boolean.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Boolean.class).extract("{}"), "Era esperado nulo, mas " + result1094 + " <JSONPath.of('$.value', Boolean.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Short.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Short.class).extract("{}"), "Era esperado nulo, mas " + result1095 + " <JSONPath.of('$.value', Short.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", Byte.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", Byte.class).extract("{}"), "Era esperado nulo, mas " + result1096 + " <JSONPath.of('$.value', Byte.class).extract('{}')> não é nulo")
chamada antiga: assertNull(JSONPath.of("$.value", UUID.class).extract("{}"))
nova chamada: assertNull(JSONPath.of("$.value", UUID.class).extract("{}"), "Era esperado nulo, mas " + result1097 + " <JSONPath.of('$.value', UUID.class).extract('{}')> não é nulo")
chamada antiga: assertEquals(4, path.eval(JSONArray.of(1, 2, 3, 4)))
nova chamada: assertEquals(4, path.eval(JSONArray.of(1, 2, 3, 4)), "Era esperado valores iguais, mas  4 é diferente de " + result1098 + " <path.eval(JSONArray.of(1, 2, 3, 4))>")
chamada antiga: assertEquals(4, path.eval(new Integer[] { 1, 2, 3, 4 }))
nova chamada: assertEquals(4, path.eval(new Integer[] { 1, 2, 3, 4 }), "Era esperado valores iguais, mas  4 é diferente de " + result1099 + " <path.eval(new Integer[] { 1, 2, 3, 4 })>")
chamada antiga: assertNull(path.eval(null))
nova chamada: assertNull(path.eval(null), "Era esperado nulo, mas " + result1100 + " <path.eval(null)> não é nulo")
chamada antiga: assertEquals(4, path.extract("[1,2,3,4]"))
nova chamada: assertEquals(4, path.extract("[1,2,3,4]"), "Era esperado valores iguais, mas  4 é diferente de " + result1101 + " <path.extract('[1,2,3,4]')>")
chamada antiga: assertEquals(4, path.eval(Collections.singleton(4)))
nova chamada: assertEquals(4, path.eval(Collections.singleton(4)), "Era esperado valores iguais, mas  4 é diferente de " + result1102 + " <path.eval(Collections.singleton(4))>")
chamada antiga: assertEquals(1, path.extract("[1,2,3,4]"))
nova chamada: assertEquals(1, path.extract("[1,2,3,4]"), "Era esperado valores iguais, mas  1 é diferente de " + result1103 + " <path.extract('[1,2,3,4]')>")
chamada antiga: assertNull(path.extract("null"))
nova chamada: assertNull(path.extract("null"), "Era esperado nulo, mas " + result1104 + " <path.extract('null')> não é nulo")
chamada antiga: assertEquals(2, path.extract("[1,2,3,4]"))
nova chamada: assertEquals(2, path.extract("[1,2,3,4]"), "Era esperado valores iguais, mas  2 é diferente de " + result1105 + " <path.extract('[1,2,3,4]')>")
chamada antiga: assertNull(path.eval(null))
nova chamada: assertNull(path.eval(null), "Era esperado nulo, mas " + result1106 + " <path.eval(null)> não é nulo")
chamada antiga: assertEquals(0, value.size())
nova chamada: assertEquals(0, value.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1107 + " <value.size()>")
chamada antiga: assertEquals(1001, value.getId())
nova chamada: assertEquals(1001, value.getId(), "Era esperado valores iguais, mas  1001 é diferente de " + result1108 + " <value.getId()>")
chamada antiga: assertEquals(123, JSONObject.of("bean", JSONObject.of("id", 123)).getObject("bean", Bean::new).id)
nova chamada: assertEquals(123, JSONObject.of("bean", JSONObject.of("id", 123)).getObject("bean", Bean::new).id, "Era esperado valores iguais, mas  123 é diferente de " + " JSONObject.of('bean', JSONObject.of('id', 123)).getObject('bean', Bean::new).id")
chamada antiga: assertEquals(123, JSONArray.of(JSONObject.of("id", 123)).getObject(0, Bean::new).id)
nova chamada: assertEquals(123, JSONArray.of(JSONObject.of("id", 123)).getObject(0, Bean::new).id, "Era esperado valores iguais, mas  123 é diferente de " + " JSONArray.of(JSONObject.of('id', 123)).getObject(0, Bean::new).id")
chamada antiga: assertEquals(12.34D, object.to(Bean1.class).value)
nova chamada: assertEquals(12.34D, object.to(Bean1.class).value, "Era esperado valores iguais, mas  12.34D é diferente de " + " object.to(Bean1.class).value")
chamada antiga: assertEquals(12.34D, object.getObject("value", Double.class))
nova chamada: assertEquals(12.34D, object.getObject("value", Double.class), "Era esperado valores iguais, mas  12.34D é diferente de " + result1109 + " <object.getObject('value', Double.class)>")
chamada antiga: assertEquals(12.34D, TypeUtils.cast(new BigDecimal("12.34"), Double.class))
nova chamada: assertEquals(12.34D, TypeUtils.cast(new BigDecimal("12.34"), Double.class), "Era esperado valores iguais, mas  12.34D é diferente de " + result1110 + " <TypeUtils.cast(new BigDecimal('12.34'), Double.class)>")
chamada antiga: assertEquals("a", to.websiteList[0])
nova chamada: assertEquals("a", to.websiteList[0], "Era esperado valores iguais, mas  'a' é diferente de " + " to.websiteList[0]")
chamada antiga: assertEquals("b", to.websiteList[1])
nova chamada: assertEquals("b", to.websiteList[1], "Era esperado valores iguais, mas  'b' é diferente de " + " to.websiteList[1]")
chamada antiga: assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to(String.class))
nova chamada: assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to(String.class), "Era esperado valores iguais, mas  '{\'websiteList\':[\'a\',\'b\']}' é diferente de " + result1111 + " <object.to(String.class)>")
chamada antiga: assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to((Type) String.class))
nova chamada: assertEquals("{\"websiteList\":[\"a\",\"b\"]}", object.to((Type) String.class), "Era esperado valores iguais, mas  '{\'websiteList\':[\'a\',\'b\']}' é diferente de " + result1112 + " <object.to((Type) String.class)>")
chamada antiga: assertEquals("[]", JSONArray.of().to(String.class))
nova chamada: assertEquals("[]", JSONArray.of().to(String.class), "Era esperado valores iguais, mas  '[]' é diferente de " + result1113 + " <JSONArray.of().to(String.class)>")
chamada antiga: assertEquals("[]", JSONArray.of().to((Type) String.class))
nova chamada: assertEquals("[]", JSONArray.of().to((Type) String.class), "Era esperado valores iguais, mas  '[]' é diferente de " + result1114 + " <JSONArray.of().to((Type) String.class)>")
chamada antiga: assertEquals("{}", JSONObject.toJSONString(JSONObject.of()))
nova chamada: assertEquals("{}", JSONObject.toJSONString(JSONObject.of()), "Era esperado valores iguais, mas  '{}' é diferente de " + result1115 + " <JSONObject.toJSONString(JSONObject.of())>")
chamada antiga: assertEquals(0, JSONObject.of().size())
nova chamada: assertEquals(0, JSONObject.of().size(), "Era esperado valores iguais, mas  0 é diferente de " + result1116 + " <JSONObject.of().size()>")
chamada antiga: assertEquals(1, JSONObject.of("k0", 0).size())
nova chamada: assertEquals(1, JSONObject.of("k0", 0).size(), "Era esperado valores iguais, mas  1 é diferente de " + result1117 + " <JSONObject.of('k0', 0).size()>")
chamada antiga: assertEquals(2, JSONObject.of("k0", 0, "k1", 1).size())
nova chamada: assertEquals(2, JSONObject.of("k0", 0, "k1", 1).size(), "Era esperado valores iguais, mas  2 é diferente de " + result1118 + " <JSONObject.of('k0', 0, 'k1', 1).size()>")
chamada antiga: assertEquals(3, JSONObject.of("k0", 0, "k1", 1, "k2", 2).size())
nova chamada: assertEquals(3, JSONObject.of("k0", 0, "k1", 1, "k2", 2).size(), "Era esperado valores iguais, mas  3 é diferente de " + result1119 + " <JSONObject.of('k0', 0, 'k1', 1, 'k2', 2).size()>")
chamada antiga: assertEquals(4, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3).size())
nova chamada: assertEquals(4, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3).size(), "Era esperado valores iguais, mas  4 é diferente de " + result1120 + " <JSONObject.of('k0', 0, 'k1', 1, 'k2', 2, 'k3', 3).size()>")
chamada antiga: assertEquals(5, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3, "k4", 4).size())
nova chamada: assertEquals(5, JSONObject.of("k0", 0, "k1", 1, "k2", 2, "k3", 3, "k4", 4).size(), "Era esperado valores iguais, mas  5 é diferente de " + result1121 + " <JSONObject.of('k0', 0, 'k1', 1, 'k2', 2, 'k3', 3, 'k4', 4).size()>")
chamada antiga: assertEquals(5, jsonObject.size())
nova chamada: assertEquals(5, jsonObject.size(), "Era esperado valores iguais, mas  5 é diferente de " + result1122 + " <jsonObject.size()>")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v0", false))
nova chamada: assertTrue(jsonObject.getBooleanValue("v0", false), "Era esperado verdadeiro, mas " + result1123 + " <jsonObject.getBooleanValue('v0', false)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v1", false))
nova chamada: assertTrue(jsonObject.getBooleanValue("v1", false), "Era esperado verdadeiro, mas " + result1124 + " <jsonObject.getBooleanValue('v1', false)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v1", true))
nova chamada: assertTrue(jsonObject.getBooleanValue("v1", true), "Era esperado verdadeiro, mas " + result1125 + " <jsonObject.getBooleanValue('v1', true)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v2", false))
nova chamada: assertTrue(jsonObject.getBooleanValue("v2", false), "Era esperado verdadeiro, mas " + result1126 + " <jsonObject.getBooleanValue('v2', false)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v2", true))
nova chamada: assertTrue(jsonObject.getBooleanValue("v2", true), "Era esperado verdadeiro, mas " + result1127 + " <jsonObject.getBooleanValue('v2', true)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v4", false))
nova chamada: assertTrue(jsonObject.getBooleanValue("v4", false), "Era esperado verdadeiro, mas " + result1128 + " <jsonObject.getBooleanValue('v4', false)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v4", true))
nova chamada: assertTrue(jsonObject.getBooleanValue("v4", true), "Era esperado verdadeiro, mas " + result1129 + " <jsonObject.getBooleanValue('v4', true)> é falso")
chamada antiga: assertTrue(jsonObject.getBooleanValue("v100", true))
nova chamada: assertTrue(jsonObject.getBooleanValue("v100", true), "Era esperado verdadeiro, mas " + result1130 + " <jsonObject.getBooleanValue('v100', true)> é falso")
chamada antiga: assertEquals(1, jsonObject.getIntValue("v0", 2))
nova chamada: assertEquals(1, jsonObject.getIntValue("v0", 2), "Era esperado valores iguais, mas  1 é diferente de " + result1131 + " <jsonObject.getIntValue('v0', 2)>")
chamada antiga: assertEquals(999, jsonObject.getIntValue("v1", 999))
nova chamada: assertEquals(999, jsonObject.getIntValue("v1", 999), "Era esperado valores iguais, mas  999 é diferente de " + result1132 + " <jsonObject.getIntValue('v1', 999)>")
chamada antiga: assertEquals(1, jsonObject.getIntValue("v2", 999))
nova chamada: assertEquals(1, jsonObject.getIntValue("v2", 999), "Era esperado valores iguais, mas  1 é diferente de " + result1133 + " <jsonObject.getIntValue('v2', 999)>")
chamada antiga: assertEquals(999, jsonObject.getIntValue("v100", 999))
nova chamada: assertEquals(999, jsonObject.getIntValue("v100", 999), "Era esperado valores iguais, mas  999 é diferente de " + result1134 + " <jsonObject.getIntValue('v100', 999)>")
chamada antiga: assertEquals(object, object2)
nova chamada: assertEquals(object, object2, "Era esperado valores iguais, mas  object é diferente de " + " object2")
chamada antiga: assertEquals(object, object3)
nova chamada: assertEquals(object, object3, "Era esperado valores iguais, mas  object é diferente de " + " object3")
chamada antiga: assertEquals(object, object2)
nova chamada: assertEquals(object, object2, "Era esperado valores iguais, mas  object é diferente de " + " object2")
chamada antiga: assertEquals(object, object3)
nova chamada: assertEquals(object, object3, "Era esperado valores iguais, mas  object é diferente de " + " object3")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1135 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1136 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1137 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1138 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1139 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1140 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1141 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1142 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1143 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1144 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1145 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1146 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1147 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1148 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1149 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1150 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1151 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1152 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1153 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1154 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1155 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1156 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1157 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1158 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1159 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1160 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1161 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1162 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1163 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1164 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1165 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1166 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1167 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1168 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1169 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1170 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1171 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1172 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1173 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1174 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1175 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1176 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1177 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1178 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1179 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1180 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1181 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1182 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1183 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1184 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1185 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1186 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1187 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1188 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str2)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1189 + " <path.extract(JSONReader.of(str2)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1190 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str2.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str2)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1191 + " <path.eval(JSON.parseObject(str2)).toString()>")
chamada antiga: assertEquals(object, object2)
nova chamada: assertEquals(object, object2, "Era esperado valores iguais, mas  object é diferente de " + " object2")
chamada antiga: assertEquals(object, object3)
nova chamada: assertEquals(object, object3, "Era esperado valores iguais, mas  object é diferente de " + " object3")
chamada antiga: assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\']' é diferente de " + result1192 + " <JSONPath.of('$.phoneNumbers[:1].type').extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\"]", JSONPath.of("$.phoneNumbers[:1].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\']' é diferente de " + result1193 + " <JSONPath.of('$.phoneNumbers[:1].type').extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\"]", path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\"]", path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\']' é diferente de " + result1194 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\']' é diferente de " + result1195 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\"]", path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals("[\"iPhone\"]", path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\']' é diferente de " + result1196 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1197 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1198 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1199 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1200 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1201 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1202 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1203 + " <JSONPath.of('$.phoneNumbers[*].type').extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers[*].type").extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result1204 + " <JSONPath.of('$.phoneNumbers[*].type').extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'0123-4567-8888\']' é diferente de " + result1205 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'0123-4567-8888\']' é diferente de " + result1206 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals("[\"iPhone\",\"0123-4567-8888\"]", path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'0123-4567-8888\']' é diferente de " + result1207 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals("[\"home\"]", path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals("[\"home\"]", path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  '[\'home\']' é diferente de " + result1208 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals("[\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals("[\"home\"]", path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  '[\'home\']' é diferente de " + result1209 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals("[\"home\"]", path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals("[\"home\"]", path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  '[\'home\']' é diferente de " + result1210 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1211 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1212 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1213 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.of(str3))))
nova chamada: assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.of(str3))), "Era esperado valores iguais, mas  expected é diferente de " + result1214 + " <JSON.toJSONString(path.extract(JSONReader.of(str3)))>")
chamada antiga: assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8))))))
nova chamada: assertEquals(expected, JSON.toJSONString(path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8))))), "Era esperado valores iguais, mas  expected é diferente de " + result1215 + " <JSON.toJSONString(path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))))>")
chamada antiga: assertEquals(expected, JSON.toJSONString(path.eval(JSON.parseObject(str3))))
nova chamada: assertEquals(expected, JSON.toJSONString(path.eval(JSON.parseObject(str3))), "Era esperado valores iguais, mas  expected é diferente de " + result1216 + " <JSON.toJSONString(path.eval(JSON.parseObject(str3)))>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.of(str3)).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.of(str3)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1217 + " <path.extract(JSONReader.of(str3)).toString()>")
chamada antiga: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString())
nova chamada: assertEquals(expected, path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1218 + " <path.extract(JSONReader.ofJSONB(JSONB.fromJSONBytes(str3.getBytes(StandardCharsets.UTF_8)))).toString()>")
chamada antiga: assertEquals(expected, path.eval(JSON.parseObject(str3)).toString())
nova chamada: assertEquals(expected, path.eval(JSON.parseObject(str3)).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result1219 + " <path.eval(JSON.parseObject(str3)).toString()>")
chamada antiga: assertEquals("$[0].id", path.toString())
nova chamada: assertEquals("$[0].id", path.toString(), "Era esperado valores iguais, mas  '$[0].id' é diferente de " + result1220 + " <path.toString()>")
chamada antiga: assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("[{\"id\":123}]")))
nova chamada: assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("[{\"id\":123}]")), "Era esperado valores iguais, mas " + result1221 + " <Long.valueOf(123)> é diferente de " + result1222 + " <path.extractInt64(JSONReader.of('[{\'id\':123}]'))>")
chamada antiga: assertEquals(123, path.extractInt64Value(JSONReader.of("[{\"id\":123}]")))
nova chamada: assertEquals(123, path.extractInt64Value(JSONReader.of("[{\"id\":123}]")), "Era esperado valores iguais, mas  123 é diferente de " + result1223 + " <path.extractInt64Value(JSONReader.of('[{\'id\':123}]'))>")
chamada antiga: assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("[{\"id\":123}]")))
nova chamada: assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("[{\"id\":123}]")), "Era esperado valores iguais, mas " + result1224 + " <Integer.valueOf(123)> é diferente de " + result1225 + " <path.extractInt32(JSONReader.of('[{\'id\':123}]'))>")
chamada antiga: assertEquals(123, path.extractInt32Value(JSONReader.of("[{\"id\":123}]")))
nova chamada: assertEquals(123, path.extractInt32Value(JSONReader.of("[{\"id\":123}]")), "Era esperado valores iguais, mas  123 é diferente de " + result1226 + " <path.extractInt32Value(JSONReader.of('[{\'id\':123}]'))>")
chamada antiga: assertEquals("123", path.extractScalar(JSONReader.of("[{\"id\":123}]")))
nova chamada: assertEquals("123", path.extractScalar(JSONReader.of("[{\"id\":123}]")), "Era esperado valores iguais, mas  '123' é diferente de " + result1227 + " <path.extractScalar(JSONReader.of('[{\'id\':123}]'))>")
chamada antiga: assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1228 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1229 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertNull(path.extractInt32(JSONReader.of(json)))
nova chamada: assertNull(path.extractInt32(JSONReader.of(json)), "Era esperado nulo, mas " + result1230 + " <path.extractInt32(JSONReader.of(json))> não é nulo")
chamada antiga: assertNull(path.extractInt64(JSONReader.of(json)))
nova chamada: assertNull(path.extractInt64(JSONReader.of(json)), "Era esperado nulo, mas " + result1231 + " <path.extractInt64(JSONReader.of(json))> não é nulo")
chamada antiga: assertNull(path.extract(JSONReader.of(json)))
nova chamada: assertNull(path.extract(JSONReader.of(json)), "Era esperado nulo, mas " + result1232 + " <path.extract(JSONReader.of(json))> não é nulo")
chamada antiga: assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1233 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1234 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1235 + " <Integer.valueOf(1)> é diferente de " + result1236 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1237 + " <Long.valueOf(1)> é diferente de " + result1238 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1239 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1240 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1241 + " <Integer.valueOf(0)> é diferente de " + result1242 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1243 + " <Long.valueOf(0)> é diferente de " + result1244 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1245 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1246 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1247 + " <Integer.valueOf(1)> é diferente de " + result1248 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1249 + " <Long.valueOf(1)> é diferente de " + result1250 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1251 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1252 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1253 + " <Integer.valueOf(1)> é diferente de " + result1254 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1255 + " <Long.valueOf(1)> é diferente de " + result1256 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt32Value(JSONReader.of(utf8)))
nova chamada: assertEquals(1, path.extractInt32Value(JSONReader.of(utf8)), "Era esperado valores iguais, mas  1 é diferente de " + result1257 + " <path.extractInt32Value(JSONReader.of(utf8))>")
chamada antiga: assertEquals(1, path.extractInt64Value(JSONReader.of(utf8)))
nova chamada: assertEquals(1, path.extractInt64Value(JSONReader.of(utf8)), "Era esperado valores iguais, mas  1 é diferente de " + result1258 + " <path.extractInt64Value(JSONReader.of(utf8))>")
chamada antiga: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(utf8)))
nova chamada: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(utf8)), "Era esperado valores iguais, mas " + result1259 + " <Integer.valueOf(1)> é diferente de " + result1260 + " <path.extractInt32(JSONReader.of(utf8))>")
chamada antiga: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(utf8)))
nova chamada: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(utf8)), "Era esperado valores iguais, mas " + result1261 + " <Long.valueOf(1)> é diferente de " + result1262 + " <path.extractInt64(JSONReader.of(utf8))>")
chamada antiga: assertEquals(object, parsed)
nova chamada: assertEquals(object, parsed, "Era esperado valores iguais, mas  object é diferente de " + " parsed")
chamada antiga: assertEquals(object, parsed)
nova chamada: assertEquals(object, parsed, "Era esperado valores iguais, mas  object é diferente de " + " parsed")
chamada antiga: assertEquals("$.id", path.toString())
nova chamada: assertEquals("$.id", path.toString(), "Era esperado valores iguais, mas  '$.id' é diferente de " + result1263 + " <path.toString()>")
chamada antiga: assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals(Long.valueOf(123), path.extractInt64(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas " + result1264 + " <Long.valueOf(123)> é diferente de " + result1265 + " <path.extractInt64(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals(123, path.extractInt64Value(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals(123, path.extractInt64Value(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas  123 é diferente de " + result1266 + " <path.extractInt64Value(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals(Integer.valueOf(123), path.extractInt32(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas " + result1267 + " <Integer.valueOf(123)> é diferente de " + result1268 + " <path.extractInt32(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals(123, path.extractInt32Value(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals(123, path.extractInt32Value(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas  123 é diferente de " + result1269 + " <path.extractInt32Value(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals("123", path.extractScalar(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals("123", path.extractScalar(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas  '123' é diferente de " + result1270 + " <path.extractScalar(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1271 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1272 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertNull(path.extractInt32(JSONReader.of(json)))
nova chamada: assertNull(path.extractInt32(JSONReader.of(json)), "Era esperado nulo, mas " + result1273 + " <path.extractInt32(JSONReader.of(json))> não é nulo")
chamada antiga: assertNull(path.extractInt64(JSONReader.of(json)))
nova chamada: assertNull(path.extractInt64(JSONReader.of(json)), "Era esperado nulo, mas " + result1274 + " <path.extractInt64(JSONReader.of(json))> não é nulo")
chamada antiga: assertNull(path.extract(JSONReader.of(json)))
nova chamada: assertNull(path.extract(JSONReader.of(json)), "Era esperado nulo, mas " + result1275 + " <path.extract(JSONReader.of(json))> não é nulo")
chamada antiga: assertEquals("null", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("null", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  'null' é diferente de " + result1276 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1277 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(1, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(1, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  1 é diferente de " + result1278 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(1), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1279 + " <Integer.valueOf(1)> é diferente de " + result1280 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(1), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1281 + " <Long.valueOf(1)> é diferente de " + result1282 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(Boolean.TRUE, path.extract(JSONReader.of(json)))
nova chamada: assertEquals(Boolean.TRUE, path.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result1283 + " <path.extract(JSONReader.of(json))>")
chamada antiga: assertEquals("true", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("true", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  'true' é diferente de " + result1284 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt32Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt32Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1285 + " <path.extractInt32Value(JSONReader.of(json))>")
chamada antiga: assertEquals(0, path.extractInt64Value(JSONReader.of(json)))
nova chamada: assertEquals(0, path.extractInt64Value(JSONReader.of(json)), "Era esperado valores iguais, mas  0 é diferente de " + result1286 + " <path.extractInt64Value(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(0), path.extractInt32(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1287 + " <Integer.valueOf(0)> é diferente de " + result1288 + " <path.extractInt32(JSONReader.of(json))>")
chamada antiga: assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)))
nova chamada: assertEquals(Long.valueOf(0), path.extractInt64(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1289 + " <Long.valueOf(0)> é diferente de " + result1290 + " <path.extractInt64(JSONReader.of(json))>")
chamada antiga: assertEquals(Boolean.FALSE, path.extract(JSONReader.of(json)))
nova chamada: assertEquals(Boolean.FALSE, path.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result1291 + " <path.extract(JSONReader.of(json))>")
chamada antiga: assertEquals("false", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("false", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  'false' é diferente de " + result1292 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals("\"abc\"", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("\"abc\"", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result1293 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals("{}", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("{}", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  '{}' é diferente de " + result1294 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals("[]", path.extractScalar(JSONReader.of(json)))
nova chamada: assertEquals("[]", path.extractScalar(JSONReader.of(json)), "Era esperado valores iguais, mas  '[]' é diferente de " + result1295 + " <path.extractScalar(JSONReader.of(json))>")
chamada antiga: assertEquals(2, eval.size())
nova chamada: assertEquals(2, eval.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1296 + " <eval.size()>")
chamada antiga: assertEquals(Boolean.TRUE, JSONPath.of("$[4]").extract(JSONReader.of(json)))
nova chamada: assertEquals(Boolean.TRUE, JSONPath.of("$[4]").extract(JSONReader.of(json)), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result1297 + " <JSONPath.of('$[4]').extract(JSONReader.of(json))>")
chamada antiga: assertEquals(Boolean.FALSE, JSONPath.of("$[3]").extract(JSONReader.of(json)))
nova chamada: assertEquals(Boolean.FALSE, JSONPath.of("$[3]").extract(JSONReader.of(json)), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result1298 + " <JSONPath.of('$[3]').extract(JSONReader.of(json))>")
chamada antiga: assertEquals(null, JSONPath.of("$[2]").extract(JSONReader.of(json)))
nova chamada: assertEquals(null, JSONPath.of("$[2]").extract(JSONReader.of(json)), "Era esperado valores iguais, mas  null é diferente de " + result1299 + " <JSONPath.of('$[2]').extract(JSONReader.of(json))>")
chamada antiga: assertEquals("0", JSONPath.of("$[0]").extract(JSONReader.of(json)))
nova chamada: assertEquals("0", JSONPath.of("$[0]").extract(JSONReader.of(json)), "Era esperado valores iguais, mas  '0' é diferente de " + result1300 + " <JSONPath.of('$[0]').extract(JSONReader.of(json))>")
chamada antiga: assertEquals(Integer.valueOf(1), JSONPath.of("$[1]").extract(JSONReader.of(json)))
nova chamada: assertEquals(Integer.valueOf(1), JSONPath.of("$[1]").extract(JSONReader.of(json)), "Era esperado valores iguais, mas " + result1301 + " <Integer.valueOf(1)> é diferente de " + result1302 + " <JSONPath.of('$[1]').extract(JSONReader.of(json))>")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONPath.of("$[5]").extract(JSONReader.of(json))))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONPath.of("$[5]").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[]' é diferente de " + result1303 + " <JSON.toJSONString(JSONPath.of('$[5]').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(JSONPath.of("$[6]").extract(JSONReader.of(json))))
nova chamada: assertEquals("{}", JSON.toJSONString(JSONPath.of("$[6]").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '{}' é diferente de " + result1304 + " <JSON.toJSONString(JSONPath.of('$[6]').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[0,\"1\",true,false,null]", JSON.toJSONString(JSONPath.of("$.*").extract(JSONReader.of(json))))
nova chamada: assertEquals("[0,\"1\",true,false,null]", JSON.toJSONString(JSONPath.of("$.*").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[0,\'1\',true,false,null]' é diferente de " + result1305 + " <JSON.toJSONString(JSONPath.of('$.*').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[0]", JSON.toJSONString(JSONPath.of("$..v0").extract(JSONReader.of(json))))
nova chamada: assertEquals("[0]", JSON.toJSONString(JSONPath.of("$..v0").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[0]' é diferente de " + result1306 + " <JSON.toJSONString(JSONPath.of('$..v0').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[\"1\"]", JSON.toJSONString(JSONPath.of("$..v1").extract(JSONReader.of(json))))
nova chamada: assertEquals("[\"1\"]", JSON.toJSONString(JSONPath.of("$..v1").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[\'1\']' é diferente de " + result1307 + " <JSON.toJSONString(JSONPath.of('$..v1').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[true]", JSON.toJSONString(JSONPath.of("$..v2").extract(JSONReader.of(json))))
nova chamada: assertEquals("[true]", JSON.toJSONString(JSONPath.of("$..v2").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[true]' é diferente de " + result1308 + " <JSON.toJSONString(JSONPath.of('$..v2').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[false]", JSON.toJSONString(JSONPath.of("$..v3").extract(JSONReader.of(json))))
nova chamada: assertEquals("[false]", JSON.toJSONString(JSONPath.of("$..v3").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[false]' é diferente de " + result1309 + " <JSON.toJSONString(JSONPath.of('$..v3').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals("[null]", JSON.toJSONString(JSONPath.of("$..v4").extract(JSONReader.of(json))))
nova chamada: assertEquals("[null]", JSON.toJSONString(JSONPath.of("$..v4").extract(JSONReader.of(json))), "Era esperado valores iguais, mas  '[null]' é diferente de " + result1310 + " <JSON.toJSONString(JSONPath.of('$..v4').extract(JSONReader.of(json)))>")
chamada antiga: assertEquals(true, paths.get("$.f0"))
nova chamada: assertEquals(true, paths.get("$.f0"), "Era esperado valores iguais, mas  true é diferente de " + result1311 + " <paths.get('$.f0')>")
chamada antiga: assertEquals(Boolean.TRUE, JSONPath.paths(Boolean.TRUE).get("$"))
nova chamada: assertEquals(Boolean.TRUE, JSONPath.paths(Boolean.TRUE).get("$"), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result1312 + " <JSONPath.paths(Boolean.TRUE).get('$')>")
chamada antiga: assertEquals(BigDecimal.ONE, JSONPath.paths(BigDecimal.ONE).get("$"))
nova chamada: assertEquals(BigDecimal.ONE, JSONPath.paths(BigDecimal.ONE).get("$"), "Era esperado valores iguais, mas  BigDecimal.ONE é diferente de " + result1313 + " <JSONPath.paths(BigDecimal.ONE).get('$')>")
chamada antiga: assertEquals(16, paths.size())
nova chamada: assertEquals(16, paths.size(), "Era esperado valores iguais, mas  16 é diferente de " + result1314 + " <paths.size()>")
chamada antiga: assertEquals("{\"v0\":0,\"v1\":0.0,\"v10\":[],\"v2\":0.0,\"v3\":\"A\",\"v4\":0,\"v5\":0,\"v6\":false,\"v7\":[101],\"v8\":[],\"v9\":{}}", str)
nova chamada: assertEquals("{\"v0\":0,\"v1\":0.0,\"v10\":[],\"v2\":0.0,\"v3\":\"A\",\"v4\":0,\"v5\":0,\"v6\":false,\"v7\":[101],\"v8\":[],\"v9\":{}}", str, "Era esperado valores iguais, mas  '{\'v0\':0,\'v1\':0.0,\'v10\':[],\'v2\':0.0,\'v3\':\'A\',\'v4\':0,\'v5\':0,\'v6\':false,\'v7\':[101],\'v8\':[],\'v9\':{}}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101}", json)
nova chamada: assertEquals("{\"id\":101}", json, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " json")
chamada antiga: assertEquals(a.id, a1.id)
nova chamada: assertEquals(a.id, a1.id, "Era esperado valores iguais, mas  a.id é diferente de " + " a1.id")
chamada antiga: assertEquals("{\"id\":101}", json)
nova chamada: assertEquals("{\"id\":101}", json, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " json")
chamada antiga: assertEquals(a.id, a1.id)
nova chamada: assertEquals(a.id, a1.id, "Era esperado valores iguais, mas  a.id é diferente de " + " a1.id")
chamada antiga: assertEquals("{\"id\":101}", JSONB.parseObject(jsonbBytes).toString())
nova chamada: assertEquals("{\"id\":101}", JSONB.parseObject(jsonbBytes).toString(), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result1315 + " <JSONB.parseObject(jsonbBytes).toString()>")
chamada antiga: assertEquals(a.id, a1.id)
nova chamada: assertEquals(a.id, a1.id, "Era esperado valores iguais, mas  a.id é diferente de " + " a1.id")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals(a.id, a1.id)
nova chamada: assertEquals(a.id, a1.id, "Era esperado valores iguais, mas  a.id é diferente de " + " a1.id")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(101, JSONObject.of("id", 101).toJavaObject(Bean2.class, JSONReader.Feature.FieldBased).id)
nova chamada: assertEquals(101, JSONObject.of("id", 101).toJavaObject(Bean2.class, JSONReader.Feature.FieldBased).id, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('id', 101).toJavaObject(Bean2.class, JSONReader.Feature.FieldBased).id")
chamada antiga: assertEquals(101, JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", Bean2.class, JSONReader.Feature.FieldBased).id)
nova chamada: assertEquals(101, JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", Bean2.class, JSONReader.Feature.FieldBased).id, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.of('root', JSONObject.of('id', 101)).getObject('root', Bean2.class, JSONReader.Feature.FieldBased).id")
chamada antiga: assertEquals(101, ((Bean2) JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", (Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
nova chamada: assertEquals(101, ((Bean2) JSONObject.of("root", JSONObject.of("id", 101)).getObject("root", (Type) Bean2.class, JSONReader.Feature.FieldBased)).id, "Era esperado valores iguais, mas  101 é diferente de " + " ((Bean2) JSONObject.of('root', JSONObject.of('id', 101)).getObject('root', (Type) Bean2.class, JSONReader.Feature.FieldBased)).id")
chamada antiga: assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, Bean2.class, JSONReader.Feature.FieldBased)).id)
nova chamada: assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, Bean2.class, JSONReader.Feature.FieldBased)).id, "Era esperado valores iguais, mas  101 é diferente de " + " ((Bean2) JSONArray.of(JSONObject.of('id', 101)).getObject(0, Bean2.class, JSONReader.Feature.FieldBased)).id")
chamada antiga: assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, (Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
nova chamada: assertEquals(101, ((Bean2) JSONArray.of(JSONObject.of("id", 101)).getObject(0, (Type) Bean2.class, JSONReader.Feature.FieldBased)).id, "Era esperado valores iguais, mas  101 é diferente de " + " ((Bean2) JSONArray.of(JSONObject.of('id', 101)).getObject(0, (Type) Bean2.class, JSONReader.Feature.FieldBased)).id")
chamada antiga: assertEquals(101, ((Bean2) JSONObject.of("id", 101).toJavaObject((Type) Bean2.class, JSONReader.Feature.FieldBased)).id)
nova chamada: assertEquals(101, ((Bean2) JSONObject.of("id", 101).toJavaObject((Type) Bean2.class, JSONReader.Feature.FieldBased)).id, "Era esperado valores iguais, mas  101 é diferente de " + " ((Bean2) JSONObject.of('id', 101).toJavaObject((Type) Bean2.class, JSONReader.Feature.FieldBased)).id")
chamada antiga: assertEquals(101, JSONArray.of(JSONObject.of("id", 101)).toJavaList(Bean2.class, JSONReader.Feature.FieldBased).get(0).id)
nova chamada: assertEquals(101, JSONArray.of(JSONObject.of("id", 101)).toJavaList(Bean2.class, JSONReader.Feature.FieldBased).get(0).id, "Era esperado valores iguais, mas  101 é diferente de " + " JSONArray.of(JSONObject.of('id', 101)).toJavaList(Bean2.class, JSONReader.Feature.FieldBased).get(0).id")
chamada antiga: assertEquals("{\"UserId\":102,\"userId\":101}", str)
nova chamada: assertEquals("{\"UserId\":102,\"userId\":101}", str, "Era esperado valores iguais, mas  '{\'UserId\':102,\'userId\':101}' é diferente de " + " str")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals(bean.UserId, bean1.UserId)
nova chamada: assertEquals(bean.UserId, bean1.UserId, "Era esperado valores iguais, mas  bean.UserId é diferente de " + " bean1.UserId")
chamada antiga: assertEquals("[102,101]", str)
nova chamada: assertEquals("[102,101]", str, "Era esperado valores iguais, mas  '[102,101]' é diferente de " + " str")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals(bean.UserId, bean1.UserId)
nova chamada: assertEquals(bean.UserId, bean1.UserId, "Era esperado valores iguais, mas  bean.UserId é diferente de " + " bean1.UserId")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals(bean.UserId, bean1.UserId)
nova chamada: assertEquals(bean.UserId, bean1.UserId, "Era esperado valores iguais, mas  bean.UserId é diferente de " + " bean1.UserId")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals(bean.UserId, bean1.UserId)
nova chamada: assertEquals(bean.UserId, bean1.UserId, "Era esperado valores iguais, mas  bean.UserId é diferente de " + " bean1.UserId")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.userId, bean1.userId)
nova chamada: assertEquals(bean.userId, bean1.userId, "Era esperado valores iguais, mas  bean.userId é diferente de " + " bean1.userId")
chamada antiga: assertEquals(bean.UserId, bean1.UserId)
nova chamada: assertEquals(bean.UserId, bean1.UserId, "Era esperado valores iguais, mas  bean.UserId é diferente de " + " bean1.UserId")
chamada antiga: assertEquals("[100]", jsonWriter.toString())
nova chamada: assertEquals("[100]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[100]' é diferente de " + result1316 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[100]", jsonWriter.toString())
nova chamada: assertEquals("[100]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[100]' é diferente de " + result1317 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[100]", jsonWriter.toString())
nova chamada: assertEquals("[100]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[100]' é diferente de " + result1318 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':100\n' + '}' é diferente de " + result1319 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':100\n' + '}' é diferente de " + result1320 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':100.0\n' + '}' é diferente de " + result1321 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":100.0\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':100.0\n' + '}' é diferente de " + result1322 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':100\n' + '}' é diferente de " + result1323 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"id\":100\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':100\n' + '}' é diferente de " + result1324 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"id\":\"" + v.getId().toString() + "\"\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"id\":\"" + v.getId().toString() + "\"\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':\'' + v.getId().toString() + '\'\n' + '}' é diferente de " + result1325 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":100\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':100\n' + '}' é diferente de " + result1326 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':1234567890\n' + '}' é diferente de " + result1327 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":1234567890\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':1234567890\n' + '}' é diferente de " + result1328 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"v0000\":1000\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"v0000\":1000\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'v0000\':1000\n' + '}' é diferente de " + result1329 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\n' + '}' é diferente de " + result1330 + " <jw.toString()>")
chamada antiga: assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"DataWorks\",\n" + "\t\"array\":[\n" + "\t\t\n" + "\t],\n" + "\t\"object\":{\n" + "\t\t\n" + "\t}\n" + "}", jw.toString())
nova chamada: assertEquals("{\n" + "\t\"id\":1001,\n" + "\t\"name\":\"DataWorks\",\n" + "\t\"array\":[\n" + "\t\t\n" + "\t],\n" + "\t\"object\":{\n" + "\t\t\n" + "\t}\n" + "}", jw.toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':1001,\n' + '\t\'name\':\'DataWorks\',\n' + '\t\'array\':[\n' + '\t\t\n' + '\t],\n' + '\t\'object\':{\n' + '\t\t\n' + '\t}\n' + '}' é diferente de " + result1331 + " <jw.toString()>")
chamada antiga: assertEquals("[\n\t\n]", jw.toString())
nova chamada: assertEquals("[\n\t\n]", jw.toString(), "Era esperado valores iguais, mas  '[\n\t\n]' é diferente de " + result1332 + " <jw.toString()>")
chamada antiga: assertEquals("[\n" + "\t1001\n" + "]", jw.toString())
nova chamada: assertEquals("[\n" + "\t1001\n" + "]", jw.toString(), "Era esperado valores iguais, mas  '[\n' + '\t1001\n' + ']' é diferente de " + result1333 + " <jw.toString()>")
chamada antiga: assertEquals("[\n" + "\t1001,\n" + "\t1002\n" + "]", jw.toString())
nova chamada: assertEquals("[\n" + "\t1001,\n" + "\t1002\n" + "]", jw.toString(), "Era esperado valores iguais, mas  '[\n' + '\t1001,\n' + '\t1002\n' + ']' é diferente de " + result1334 + " <jw.toString()>")
chamada antiga: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':101,\'name\':\'DataWorks\'}' é diferente de " + result1335 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean))
nova chamada: assertEquals("{}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{}' é diferente de " + result1336 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean))
nova chamada: assertEquals("{}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{}' é diferente de " + result1337 + " <JSON.toJSONString(bean)>")
chamada antiga: assertNull(provider.register(Bean.class, writer))
nova chamada: assertNull(provider.register(Bean.class, writer), "Era esperado nulo, mas " + result1338 + " <provider.register(Bean.class, writer)> não é nulo")
chamada antiga: assertSame(writer, provider.register(Bean.class, writer))
nova chamada: assertSame(writer, provider.register(Bean.class, writer), "Era esperado objetos iguais, mas  writer é diferente de " + result1339 + " <provider.register(Bean.class, writer)>")
chamada antiga: assertSame(writer, provider.register(Bean.class, writer1))
nova chamada: assertSame(writer, provider.register(Bean.class, writer1), "Era esperado objetos iguais, mas  writer é diferente de " + result1340 + " <provider.register(Bean.class, writer1)>")
chamada antiga: assertSame(writer1, provider.register(Bean.class, writer1))
nova chamada: assertSame(writer1, provider.register(Bean.class, writer1), "Era esperado objetos iguais, mas  writer1 é diferente de " + result1341 + " <provider.register(Bean.class, writer1)>")
chamada antiga: assertTrue(provider.unregister(Bean.class, writer1))
nova chamada: assertTrue(provider.unregister(Bean.class, writer1), "Era esperado verdadeiro, mas " + result1342 + " <provider.unregister(Bean.class, writer1)> é falso")
chamada antiga: assertNull(provider.register(Bean.class, writer))
nova chamada: assertNull(provider.register(Bean.class, writer), "Era esperado nulo, mas " + result1343 + " <provider.register(Bean.class, writer)> não é nulo")
chamada antiga: assertTrue(provider.unregister(Bean.class, writer))
nova chamada: assertTrue(provider.unregister(Bean.class, writer), "Era esperado verdadeiro, mas " + result1344 + " <provider.unregister(Bean.class, writer)> é falso")
chamada antiga: assertNull(provider.registerIfAbsent(Bean.class, writer))
nova chamada: assertNull(provider.registerIfAbsent(Bean.class, writer), "Era esperado nulo, mas " + result1345 + " <provider.registerIfAbsent(Bean.class, writer)> não é nulo")
chamada antiga: assertSame(writer, provider.registerIfAbsent(Bean.class, writer))
nova chamada: assertSame(writer, provider.registerIfAbsent(Bean.class, writer), "Era esperado objetos iguais, mas  writer é diferente de " + result1346 + " <provider.registerIfAbsent(Bean.class, writer)>")
chamada antiga: assertSame(writer, provider.registerIfAbsent(Bean.class, writer1))
nova chamada: assertSame(writer, provider.registerIfAbsent(Bean.class, writer1), "Era esperado objetos iguais, mas  writer é diferente de " + result1347 + " <provider.registerIfAbsent(Bean.class, writer1)>")
chamada antiga: assertSame(writer, provider.registerIfAbsent(Bean.class, writer1))
nova chamada: assertSame(writer, provider.registerIfAbsent(Bean.class, writer1), "Era esperado objetos iguais, mas  writer é diferente de " + result1348 + " <provider.registerIfAbsent(Bean.class, writer1)>")
chamada antiga: assertNull(JSON.register(Bean.class, writer))
nova chamada: assertNull(JSON.register(Bean.class, writer), "Era esperado nulo, mas " + result1349 + " <JSON.register(Bean.class, writer)> não é nulo")
chamada antiga: assertSame(writer, JSON.register(Bean.class, writer))
nova chamada: assertSame(writer, JSON.register(Bean.class, writer), "Era esperado objetos iguais, mas  writer é diferente de " + result1350 + " <JSON.register(Bean.class, writer)>")
chamada antiga: assertSame(writer, JSON.register(Bean.class, writer1))
nova chamada: assertSame(writer, JSON.register(Bean.class, writer1), "Era esperado objetos iguais, mas  writer é diferente de " + result1351 + " <JSON.register(Bean.class, writer1)>")
chamada antiga: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer1))
nova chamada: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer1), "Era esperado objetos iguais, mas  writer1 é diferente de " + result1352 + " <JSON.registerIfAbsent(Bean.class, writer1)>")
chamada antiga: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer))
nova chamada: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer), "Era esperado objetos iguais, mas  writer1 é diferente de " + result1353 + " <JSON.registerIfAbsent(Bean.class, writer)>")
chamada antiga: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer))
nova chamada: assertSame(writer1, JSON.registerIfAbsent(Bean.class, writer), "Era esperado objetos iguais, mas  writer1 é diferente de " + result1354 + " <JSON.registerIfAbsent(Bean.class, writer)>")
chamada antiga: assertTrue(provider.register(modoule))
nova chamada: assertTrue(provider.register(modoule), "Era esperado verdadeiro, mas " + result1355 + " <provider.register(modoule)> é falso")
chamada antiga: assertTrue(provider.register(modoule1))
nova chamada: assertTrue(provider.register(modoule1), "Era esperado verdadeiro, mas " + result1356 + " <provider.register(modoule1)> é falso")
chamada antiga: assertTrue(provider.unregister(modoule))
nova chamada: assertTrue(provider.unregister(modoule), "Era esperado verdadeiro, mas " + result1357 + " <provider.unregister(modoule)> é falso")
chamada antiga: assertTrue(provider.unregister(modoule1))
nova chamada: assertTrue(provider.unregister(modoule1), "Era esperado verdadeiro, mas " + result1358 + " <provider.unregister(modoule1)> é falso")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id5, bean1.id5)
nova chamada: assertEquals(bean.id5, bean1.id5, "Era esperado valores iguais, mas  bean.id5 é diferente de " + " bean1.id5")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id5, bean1.id5)
nova chamada: assertEquals(bean.id5, bean1.id5, "Era esperado valores iguais, mas  bean.id5 é diferente de " + " bean1.id5")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id5, bean1.id5)
nova chamada: assertEquals(bean.id5, bean1.id5, "Era esperado valores iguais, mas  bean.id5 é diferente de " + " bean1.id5")
chamada antiga: assertEquals(bean.id6, bean1.id6)
nova chamada: assertEquals(bean.id6, bean1.id6, "Era esperado valores iguais, mas  bean.id6 é diferente de " + " bean1.id6")
chamada antiga: assertEquals(bean.id0, bean1.id0)
nova chamada: assertEquals(bean.id0, bean1.id0, "Era esperado valores iguais, mas  bean.id0 é diferente de " + " bean1.id0")
chamada antiga: assertEquals(bean.id1, bean1.id1)
nova chamada: assertEquals(bean.id1, bean1.id1, "Era esperado valores iguais, mas  bean.id1 é diferente de " + " bean1.id1")
chamada antiga: assertEquals(bean.id2, bean1.id2)
nova chamada: assertEquals(bean.id2, bean1.id2, "Era esperado valores iguais, mas  bean.id2 é diferente de " + " bean1.id2")
chamada antiga: assertEquals(bean.id3, bean1.id3)
nova chamada: assertEquals(bean.id3, bean1.id3, "Era esperado valores iguais, mas  bean.id3 é diferente de " + " bean1.id3")
chamada antiga: assertEquals(bean.id4, bean1.id4)
nova chamada: assertEquals(bean.id4, bean1.id4, "Era esperado valores iguais, mas  bean.id4 é diferente de " + " bean1.id4")
chamada antiga: assertEquals(bean.id5, bean1.id5)
nova chamada: assertEquals(bean.id5, bean1.id5, "Era esperado valores iguais, mas  bean.id5 é diferente de " + " bean1.id5")
chamada antiga: assertEquals(bean.id6, bean1.id6)
nova chamada: assertEquals(bean.id6, bean1.id6, "Era esperado valores iguais, mas  bean.id6 é diferente de " + " bean1.id6")
chamada antiga: assertEquals(object, object1)
nova chamada: assertEquals(object, object1, "Era esperado valores iguais, mas  object é diferente de " + " object1")
chamada antiga: assertEquals(sample, sample1)
nova chamada: assertEquals(sample, sample1, "Era esperado valores iguais, mas  sample é diferente de " + " sample1")
chamada antiga: assertEquals((short) 0, new ToShort((short) 0).apply(null))
nova chamada: assertEquals((short) 0, new ToShort((short) 0).apply(null), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result1359 + " <new ToShort((short) 0).apply(null)>")
chamada antiga: assertNull(new ToString().apply(null))
nova chamada: assertNull(new ToString().apply(null), "Era esperado nulo, mas " + result1360 + " <new ToString().apply(null)> não é nulo")
chamada antiga: assertNull(new ToNumber(null).apply(null))
nova chamada: assertNull(new ToNumber(null).apply(null), "Era esperado nulo, mas " + result1361 + " <new ToNumber(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToLong(null).apply(null))
nova chamada: assertNull(new ToLong(null).apply(null), "Era esperado nulo, mas " + result1362 + " <new ToLong(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToInteger(null).apply(null))
nova chamada: assertNull(new ToInteger(null).apply(null), "Era esperado nulo, mas " + result1363 + " <new ToInteger(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToFloat(null).apply(null))
nova chamada: assertNull(new ToFloat(null).apply(null), "Era esperado nulo, mas " + result1364 + " <new ToFloat(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToDouble(null).apply(null))
nova chamada: assertNull(new ToDouble(null).apply(null), "Era esperado nulo, mas " + result1365 + " <new ToDouble(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToByte(null).apply(null))
nova chamada: assertNull(new ToByte(null).apply(null), "Era esperado nulo, mas " + result1366 + " <new ToByte(null).apply(null)> não é nulo")
chamada antiga: assertNull(new ToBigInteger().apply(null))
nova chamada: assertNull(new ToBigInteger().apply(null), "Era esperado nulo, mas " + result1367 + " <new ToBigInteger().apply(null)> não é nulo")
chamada antiga: assertNull(new ToBigDecimal().apply(null))
nova chamada: assertNull(new ToBigDecimal().apply(null), "Era esperado nulo, mas " + result1368 + " <new ToBigDecimal().apply(null)> não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("offset 33"))
nova chamada: assertTrue(error.getMessage().contains("offset 33"), "Era esperado verdadeiro, mas " + result1369 + " <error.getMessage().contains('offset 33')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("character {"))
nova chamada: assertTrue(error.getMessage().contains("character {"), "Era esperado verdadeiro, mas " + result1370 + " <error.getMessage().contains('character {')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("line 3"))
nova chamada: assertTrue(error.getMessage().contains("line 3"), "Era esperado verdadeiro, mas " + result1371 + " <error.getMessage().contains('line 3')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("column 19"))
nova chamada: assertTrue(error.getMessage().contains("column 19"), "Era esperado verdadeiro, mas " + result1372 + " <error.getMessage().contains('column 19')> é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("offset 33"))
nova chamada: assertTrue(error.getMessage().contains("offset 33"), "Era esperado verdadeiro, mas " + result1373 + " <error.getMessage().contains('offset 33')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("character {"))
nova chamada: assertTrue(error.getMessage().contains("character {"), "Era esperado verdadeiro, mas " + result1374 + " <error.getMessage().contains('character {')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("line 3"))
nova chamada: assertTrue(error.getMessage().contains("line 3"), "Era esperado verdadeiro, mas " + result1375 + " <error.getMessage().contains('line 3')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("column 19"))
nova chamada: assertTrue(error.getMessage().contains("column 19"), "Era esperado verdadeiro, mas " + result1376 + " <error.getMessage().contains('column 19')> é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("offset 33"))
nova chamada: assertTrue(error.getMessage().contains("offset 33"), "Era esperado verdadeiro, mas " + result1377 + " <error.getMessage().contains('offset 33')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("character {"))
nova chamada: assertTrue(error.getMessage().contains("character {"), "Era esperado verdadeiro, mas " + result1378 + " <error.getMessage().contains('character {')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("line 3"))
nova chamada: assertTrue(error.getMessage().contains("line 3"), "Era esperado verdadeiro, mas " + result1379 + " <error.getMessage().contains('line 3')> é falso")
chamada antiga: assertTrue(error.getMessage().contains("column 19"))
nova chamada: assertTrue(error.getMessage().contains("column 19"), "Era esperado verdadeiro, mas " + result1380 + " <error.getMessage().contains('column 19')> é falso")
chamada antiga: assertEquals(JSONSchema.Type.Const, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.Const, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Const é diferente de " + result1381 + " <schema.getType()>")
chamada antiga: assertTrue(schema.isValid((Object) null))
nova chamada: assertTrue(schema.isValid((Object) null), "Era esperado verdadeiro, mas " + result1382 + " <schema.isValid((Object) null)> é falso")
chamada antiga: assertTrue(schema.validate((Object) null).isSuccess())
nova chamada: assertTrue(schema.validate((Object) null).isSuccess(), "Era esperado verdadeiro, mas " + result1383 + " <schema.validate((Object) null).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Object) Long.valueOf(123)).isSuccess())
nova chamada: assertTrue(schema.validate((Object) Long.valueOf(123)).isSuccess(), "Era esperado verdadeiro, mas " + result1384 + " <schema.validate((Object) Long.valueOf(123)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Object) Float.valueOf(123)).isSuccess())
nova chamada: assertTrue(schema.validate((Object) Float.valueOf(123)).isSuccess(), "Era esperado verdadeiro, mas " + result1385 + " <schema.validate((Object) Float.valueOf(123)).isSuccess()> é falso")
chamada antiga: assertFalse(jsonPath.isPrevious())
nova chamada: assertFalse(jsonPath.isPrevious(), "Era esperado falso, mas " + result1386 + " <jsonPath.isPrevious()> é verdadeiro ")
chamada antiga: assertFalse(jsonPath.contains(JSONObject.of()))
nova chamada: assertFalse(jsonPath.contains(JSONObject.of()), "Era esperado falso, mas " + result1387 + " <jsonPath.contains(JSONObject.of())> é verdadeiro ")
chamada antiga: assertFalse(jsonPath.contains(object))
nova chamada: assertFalse(jsonPath.contains(object), "Era esperado falso, mas " + result1388 + " <jsonPath.contains(object)> é verdadeiro ")
chamada antiga: assertFalse(jsonPath.isRef())
nova chamada: assertFalse(jsonPath.isRef(), "Era esperado falso, mas " + result1389 + " <jsonPath.isRef()> é verdadeiro ")
chamada antiga: assertFalse(parsed.booleanValue())
nova chamada: assertFalse(parsed.booleanValue(), "Era esperado falso, mas " + result1390 + " <parsed.booleanValue()> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.getBooleanValue("v3", false))
nova chamada: assertFalse(jsonObject.getBooleanValue("v3", false), "Era esperado falso, mas " + result1391 + " <jsonObject.getBooleanValue('v3', false)> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.getBooleanValue("v3", true))
nova chamada: assertFalse(jsonObject.getBooleanValue("v3", true), "Era esperado falso, mas " + result1392 + " <jsonObject.getBooleanValue('v3', true)> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.getBooleanValue("v100", false))
nova chamada: assertFalse(jsonObject.getBooleanValue("v100", false), "Era esperado falso, mas " + result1393 + " <jsonObject.getBooleanValue('v100', false)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(Bean.class, writer))
nova chamada: assertFalse(provider.unregister(Bean.class, writer), "Era esperado falso, mas " + result1394 + " <provider.unregister(Bean.class, writer)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(Bean.class, writer1))
nova chamada: assertFalse(provider.unregister(Bean.class, writer1), "Era esperado falso, mas " + result1395 + " <provider.unregister(Bean.class, writer1)> é verdadeiro ")
chamada antiga: assertFalse(provider.register(modoule))
nova chamada: assertFalse(provider.register(modoule), "Era esperado falso, mas " + result1396 + " <provider.register(modoule)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule1))
nova chamada: assertFalse(provider.unregister(modoule1), "Era esperado falso, mas " + result1397 + " <provider.unregister(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(provider.register(modoule1))
nova chamada: assertFalse(provider.register(modoule1), "Era esperado falso, mas " + result1398 + " <provider.register(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule))
nova chamada: assertFalse(provider.unregister(modoule), "Era esperado falso, mas " + result1399 + " <provider.unregister(modoule)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule1))
nova chamada: assertFalse(provider.unregister(modoule1), "Era esperado falso, mas " + result1400 + " <provider.unregister(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(schema.validate((Object) Float.valueOf(123.123F)).isSuccess())
nova chamada: assertFalse(schema.validate((Object) Float.valueOf(123.123F)).isSuccess(), "Era esperado falso, mas " + result1401 + " <schema.validate((Object) Float.valueOf(123.123F)).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(schema.validate((Object) "abc").isSuccess())
nova chamada: assertFalse(schema.validate((Object) "abc").isSuccess(), "Era esperado falso, mas " + result1402 + " <schema.validate((Object) 'abc').isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid(null))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid(null), "Era esperado falso, mas " + result1403 + " <DateValidator.INSTANCE.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid(""))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid(""), "Era esperado falso, mas " + result1404 + " <DateValidator.INSTANCE.isValid('')> é verdadeiro ")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid("2022-02-30"))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid("2022-02-30"), "Era esperado falso, mas " + result1405 + " <DateValidator.INSTANCE.isValid('2022-02-30')> é verdadeiro ")
chamada antiga: assertTrue(DateValidator.INSTANCE.isValid("2022-02-18"))
nova chamada: assertTrue(DateValidator.INSTANCE.isValid("2022-02-18"), "Era esperado verdadeiro, mas " + result1406 + " <DateValidator.INSTANCE.isValid('2022-02-18')> é falso")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid("2022-04-31"))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid("2022-04-31"), "Era esperado falso, mas " + result1407 + " <DateValidator.INSTANCE.isValid('2022-04-31')> é verdadeiro ")
chamada antiga: assertTrue(DateValidator.INSTANCE.isValid("2022-04-30"))
nova chamada: assertTrue(DateValidator.INSTANCE.isValid("2022-04-30"), "Era esperado verdadeiro, mas " + result1408 + " <DateValidator.INSTANCE.isValid('2022-04-30')> é falso")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid("2022"))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid("2022"), "Era esperado falso, mas " + result1409 + " <DateValidator.INSTANCE.isValid('2022')> é verdadeiro ")
chamada antiga: assertFalse(DateValidator.INSTANCE.isValid("https://github.com/alibaba/fastjson2/issues"))
nova chamada: assertFalse(DateValidator.INSTANCE.isValid("https://github.com/alibaba/fastjson2/issues"), "Era esperado falso, mas " + result1410 + " <DateValidator.INSTANCE.isValid('https://github.com/alibaba/fastjson2/issues')> é verdadeiro ")
chamada antiga: assertTrue(schema.equals(schema))
nova chamada: assertTrue(schema.equals(schema), "Era esperado verdadeiro, mas " + result1411 + " <schema.equals(schema)> é falso")
chamada antiga: assertFalse(schema.equals(null))
nova chamada: assertFalse(schema.equals(null), "Era esperado falso, mas " + result1412 + " <schema.equals(null)> é verdadeiro ")
chamada antiga: assertFalse(schema.equals(new Object()))
nova chamada: assertFalse(schema.equals(new Object()), "Era esperado falso, mas " + result1413 + " <schema.equals(new Object())> é verdadeiro ")
chamada antiga: assertFalse(schema.validate(Long.valueOf(9)).isSuccess())
nova chamada: assertFalse(schema.validate(Long.valueOf(9)).isSuccess(), "Era esperado falso, mas " + result1414 + " <schema.validate(Long.valueOf(9)).isSuccess()> é verdadeiro ")
chamada antiga: assertTrue(schema.validate(Long.valueOf(10)).isSuccess())
nova chamada: assertTrue(schema.validate(Long.valueOf(10)).isSuccess(), "Era esperado verdadeiro, mas " + result1415 + " <schema.validate(Long.valueOf(10)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Long) null).isSuccess())
nova chamada: assertTrue(schema.validate((Long) null).isSuccess(), "Era esperado verdadeiro, mas " + result1416 + " <schema.validate((Long) null).isSuccess()> é falso")
chamada antiga: assertFalse(schema.validate(Integer.valueOf(9)).isSuccess())
nova chamada: assertFalse(schema.validate(Integer.valueOf(9)).isSuccess(), "Era esperado falso, mas " + result1417 + " <schema.validate(Integer.valueOf(9)).isSuccess()> é verdadeiro ")
chamada antiga: assertTrue(schema.validate(Integer.valueOf(10)).isSuccess())
nova chamada: assertTrue(schema.validate(Integer.valueOf(10)).isSuccess(), "Era esperado verdadeiro, mas " + result1418 + " <schema.validate(Integer.valueOf(10)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Integer) null).isSuccess())
nova chamada: assertTrue(schema.validate((Integer) null).isSuccess(), "Era esperado verdadeiro, mas " + result1419 + " <schema.validate((Integer) null).isSuccess()> é falso")
chamada antiga: assertFalse(schema.validate(Float.valueOf(9)).isSuccess())
nova chamada: assertFalse(schema.validate(Float.valueOf(9)).isSuccess(), "Era esperado falso, mas " + result1420 + " <schema.validate(Float.valueOf(9)).isSuccess()> é verdadeiro ")
chamada antiga: assertTrue(schema.validate(Float.valueOf(10)).isSuccess())
nova chamada: assertTrue(schema.validate(Float.valueOf(10)).isSuccess(), "Era esperado verdadeiro, mas " + result1421 + " <schema.validate(Float.valueOf(10)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Float) null).isSuccess())
nova chamada: assertTrue(schema.validate((Float) null).isSuccess(), "Era esperado verdadeiro, mas " + result1422 + " <schema.validate((Float) null).isSuccess()> é falso")
chamada antiga: assertFalse(schema.validate(Double.valueOf(9)).isSuccess())
nova chamada: assertFalse(schema.validate(Double.valueOf(9)).isSuccess(), "Era esperado falso, mas " + result1423 + " <schema.validate(Double.valueOf(9)).isSuccess()> é verdadeiro ")
chamada antiga: assertTrue(schema.validate(Double.valueOf(10)).isSuccess())
nova chamada: assertTrue(schema.validate(Double.valueOf(10)).isSuccess(), "Era esperado verdadeiro, mas " + result1424 + " <schema.validate(Double.valueOf(10)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate((Double) null).isSuccess())
nova chamada: assertTrue(schema.validate((Double) null).isSuccess(), "Era esperado verdadeiro, mas " + result1425 + " <schema.validate((Double) null).isSuccess()> é falso")
chamada antiga: assertFalse(IPAddressValidator.IPV4.isValid(null))
nova chamada: assertFalse(IPAddressValidator.IPV4.isValid(null), "Era esperado falso, mas " + result1426 + " <IPAddressValidator.IPV4.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(IPAddressValidator.IPV4.isValid(""))
nova chamada: assertFalse(IPAddressValidator.IPV4.isValid(""), "Era esperado falso, mas " + result1427 + " <IPAddressValidator.IPV4.isValid('')> é verdadeiro ")
chamada antiga: assertTrue(IPAddressValidator.IPV4.isValid("192.168.1.1"))
nova chamada: assertTrue(IPAddressValidator.IPV4.isValid("192.168.1.1"), "Era esperado verdadeiro, mas " + result1428 + " <IPAddressValidator.IPV4.isValid('192.168.1.1')> é falso")
chamada antiga: assertFalse(IPAddressValidator.IPV4.isValid("::1"))
nova chamada: assertFalse(IPAddressValidator.IPV4.isValid("::1"), "Era esperado falso, mas " + result1429 + " <IPAddressValidator.IPV4.isValid('::1')> é verdadeiro ")
chamada antiga: assertFalse(IPAddressValidator.IPV6.isValid("192.168.1.1"))
nova chamada: assertFalse(IPAddressValidator.IPV6.isValid("192.168.1.1"), "Era esperado falso, mas " + result1430 + " <IPAddressValidator.IPV6.isValid('192.168.1.1')> é verdadeiro ")
chamada antiga: assertTrue(IPAddressValidator.IPV6.isValid("::1"))
nova chamada: assertTrue(IPAddressValidator.IPV6.isValid("::1"), "Era esperado verdadeiro, mas " + result1431 + " <IPAddressValidator.IPV6.isValid('::1')> é falso")
chamada antiga: assertFalse(IPAddressValidator.IPV6.isValid("1002:003B:456C:678D:890E:0012:234F:56G7"))
nova chamada: assertFalse(IPAddressValidator.IPV6.isValid("1002:003B:456C:678D:890E:0012:234F:56G7"), "Era esperado falso, mas " + result1432 + " <IPAddressValidator.IPV6.isValid('1002:003B:456C:678D:890E:0012:234F:56G7')> é verdadeiro ")
chamada antiga: assertTrue(IPAddressValidator.IPV6.isValid("2408:84e4:404:f993:4ff1:48f5:2c71:a41"))
nova chamada: assertTrue(IPAddressValidator.IPV6.isValid("2408:84e4:404:f993:4ff1:48f5:2c71:a41"), "Era esperado verdadeiro, mas " + result1433 + " <IPAddressValidator.IPV6.isValid('2408:84e4:404:f993:4ff1:48f5:2c71:a41')> é falso")
chamada antiga: assertEquals(JSONSchema.Type.OneOf, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.OneOf, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.OneOf é diferente de " + result1434 + " <schema.getType()>")
chamada antiga: assertEquals(JSONSchema.Type.Enum, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.Enum, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Enum é diferente de " + result1435 + " <schema.getType()>")
chamada antiga: assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess())
nova chamada: assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess(), "Era esperado verdadeiro, mas " + result1436 + " <schema.validate(BigDecimal.valueOf(12)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(2147483649L).isSuccess())
nova chamada: assertTrue(schema.validate(2147483649L).isSuccess(), "Era esperado verdadeiro, mas " + result1437 + " <schema.validate(2147483649L).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(BigDecimal.valueOf(2147483649L)).isSuccess())
nova chamada: assertTrue(schema.validate(BigDecimal.valueOf(2147483649L)).isSuccess(), "Era esperado verdadeiro, mas " + result1438 + " <schema.validate(BigDecimal.valueOf(2147483649L)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(BigInteger.valueOf(2147483649L)).isSuccess())
nova chamada: assertTrue(schema.validate(BigInteger.valueOf(2147483649L)).isSuccess(), "Era esperado verdadeiro, mas " + result1439 + " <schema.validate(BigInteger.valueOf(2147483649L)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(12).isSuccess())
nova chamada: assertTrue(schema.validate(12).isSuccess(), "Era esperado verdadeiro, mas " + result1440 + " <schema.validate(12).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(12L).isSuccess())
nova chamada: assertTrue(schema.validate(12L).isSuccess(), "Era esperado verdadeiro, mas " + result1441 + " <schema.validate(12L).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess())
nova chamada: assertTrue(schema.validate(BigDecimal.valueOf(12)).isSuccess(), "Era esperado verdadeiro, mas " + result1442 + " <schema.validate(BigDecimal.valueOf(12)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(BigInteger.valueOf(12)).isSuccess())
nova chamada: assertTrue(schema.validate(BigInteger.valueOf(12)).isSuccess(), "Era esperado verdadeiro, mas " + result1443 + " <schema.validate(BigInteger.valueOf(12)).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(new BigInteger("214748364921474836492147483649")).isSuccess())
nova chamada: assertTrue(schema.validate(new BigInteger("214748364921474836492147483649")).isSuccess(), "Era esperado verdadeiro, mas " + result1444 + " <schema.validate(new BigInteger('214748364921474836492147483649')).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(new BigDecimal("214748364921474836492147483649")).isSuccess())
nova chamada: assertTrue(schema.validate(new BigDecimal("214748364921474836492147483649")).isSuccess(), "Era esperado verdadeiro, mas " + result1445 + " <schema.validate(new BigDecimal('214748364921474836492147483649')).isSuccess()> é falso")
chamada antiga: assertTrue(schema.validate(new BigDecimal("12.34")).isSuccess())
nova chamada: assertTrue(schema.validate(new BigDecimal("12.34")).isSuccess(), "Era esperado verdadeiro, mas " + result1446 + " <schema.validate(new BigDecimal('12.34')).isSuccess()> é falso")
chamada antiga: assertFalse(validator.isValid(null))
nova chamada: assertFalse(validator.isValid(null), "Era esperado falso, mas " + result1447 + " <validator.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid(""))
nova chamada: assertFalse(validator.isValid(""), "Era esperado falso, mas " + result1448 + " <validator.isValid('')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("A000-00-00 00:00:00"))
nova chamada: assertFalse(validator.isValid("A000-00-00 00:00:00"), "Era esperado falso, mas " + result1449 + " <validator.isValid('A000-00-00 00:00:00')> é verdadeiro ")
chamada antiga: assertTrue(validator.isValid("2000-04-30 00:00:00"))
nova chamada: assertTrue(validator.isValid("2000-04-30 00:00:00"), "Era esperado verdadeiro, mas " + result1450 + " <validator.isValid('2000-04-30 00:00:00')> é falso")
chamada antiga: assertTrue(validator.isValid("2000-05-31 00:00:00"))
nova chamada: assertTrue(validator.isValid("2000-05-31 00:00:00"), "Era esperado verdadeiro, mas " + result1451 + " <validator.isValid('2000-05-31 00:00:00')> é falso")
chamada antiga: assertFalse(validator.isValid("2000-04-31 00:00:00"))
nova chamada: assertFalse(validator.isValid("2000-04-31 00:00:00"), "Era esperado falso, mas " + result1452 + " <validator.isValid('2000-04-31 00:00:00')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-41 00:00:00"))
nova chamada: assertFalse(validator.isValid("2000-05-41 00:00:00"), "Era esperado falso, mas " + result1453 + " <validator.isValid('2000-05-41 00:00:00')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-01 25:00:00"))
nova chamada: assertFalse(validator.isValid("2000-05-01 25:00:00"), "Era esperado falso, mas " + result1454 + " <validator.isValid('2000-05-01 25:00:00')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-01 00:61:00"))
nova chamada: assertFalse(validator.isValid("2000-05-01 00:61:00"), "Era esperado falso, mas " + result1455 + " <validator.isValid('2000-05-01 00:61:00')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-01 00:00:62"))
nova chamada: assertFalse(validator.isValid("2000-05-01 00:00:62"), "Era esperado falso, mas " + result1456 + " <validator.isValid('2000-05-01 00:00:62')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-01 00:00:620"))
nova chamada: assertFalse(validator.isValid("2000-05-01 00:00:620"), "Era esperado falso, mas " + result1457 + " <validator.isValid('2000-05-01 00:00:620')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("2000-05-01 00:00:62.0"))
nova chamada: assertFalse(validator.isValid("2000-05-01 00:00:62.0"), "Era esperado falso, mas " + result1458 + " <validator.isValid('2000-05-01 00:00:62.0')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid(null))
nova chamada: assertFalse(validator.isValid(null), "Era esperado falso, mas " + result1459 + " <validator.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a."))
nova chamada: assertFalse(validator.isValid("a."), "Era esperado falso, mas " + result1460 + " <validator.isValid('a.')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("@b.c"))
nova chamada: assertFalse(validator.isValid("@b.c"), "Era esperado falso, mas " + result1461 + " <validator.isValid('@b.c')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("1@b.c"))
nova chamada: assertFalse(validator.isValid("1@b.c"), "Era esperado falso, mas " + result1462 + " <validator.isValid('1@b.c')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789@b.c"))
nova chamada: assertFalse(validator.isValid("a01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789@b.c"), "Era esperado falso, mas " + result1463 + " <validator.isValid('a01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789@b.c')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a@192.168.0.1"))
nova chamada: assertFalse(validator.isValid("a@192.168.0.1"), "Era esperado falso, mas " + result1464 + " <validator.isValid('a@192.168.0.1')> é verdadeiro ")
chamada antiga: assertTrue(validator.isValid("a@[192.168.0.1]"))
nova chamada: assertTrue(validator.isValid("a@[192.168.0.1]"), "Era esperado verdadeiro, mas " + result1465 + " <validator.isValid('a@[192.168.0.1]')> é falso")
chamada antiga: assertFalse(validator.isValid("a@[192.a.0.1]"))
nova chamada: assertFalse(validator.isValid("a@[192.a.0.1]"), "Era esperado falso, mas " + result1466 + " <validator.isValid('a@[192.a.0.1]')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a@[192..0.1]"))
nova chamada: assertFalse(validator.isValid("a@[192..0.1]"), "Era esperado falso, mas " + result1467 + " <validator.isValid('a@[192..0.1]')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a@[256.0.0.1]"))
nova chamada: assertFalse(validator.isValid("a@[256.0.0.1]"), "Era esperado falso, mas " + result1468 + " <validator.isValid('a@[256.0.0.1]')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a@[192.01.0.1]"))
nova chamada: assertFalse(validator.isValid("a@[192.01.0.1]"), "Era esperado falso, mas " + result1469 + " <validator.isValid('a@[192.01.0.1]')> é verdadeiro ")
chamada antiga: assertTrue(validator.isValid("a@[fe80::1]"))
nova chamada: assertTrue(validator.isValid("a@[fe80::1]"), "Era esperado verdadeiro, mas " + result1470 + " <validator.isValid('a@[fe80::1]')> é falso")
chamada antiga: assertFalse(validator.isValid("a@[fe80::1234567]"))
nova chamada: assertFalse(validator.isValid("a@[fe80::1234567]"), "Era esperado falso, mas " + result1471 + " <validator.isValid('a@[fe80::1234567]')> é verdadeiro ")
chamada antiga: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b]"))
nova chamada: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b]"), "Era esperado verdadeiro, mas " + result1472 + " <validator.isValid('a@[fe80::f490:7eff:fe22:7f8b]')> é falso")
chamada antiga: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b]"))
nova chamada: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b]"), "Era esperado verdadeiro, mas " + result1473 + " <validator.isValid('a@[fe80::f490:7eff:fe22:7f8b:7f8b]')> é falso")
chamada antiga: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b]"))
nova chamada: assertTrue(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b]"), "Era esperado verdadeiro, mas " + result1474 + " <validator.isValid('a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b]')> é falso")
chamada antiga: assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b:7f8b]"))
nova chamada: assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b:7f8b]"), "Era esperado falso, mas " + result1475 + " <validator.isValid('a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8b:7f8b]')> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8k]"))
nova chamada: assertFalse(validator.isValid("a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8k]"), "Era esperado falso, mas " + result1476 + " <validator.isValid('a@[fe80::f490:7eff:fe22:7f8b:7f8b:7f8k]')> é verdadeiro ")
chamada antiga: assertEquals(JSONSchema.Type.AnyOf, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.AnyOf, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.AnyOf é diferente de " + result1477 + " <schema.getType()>")
chamada antiga: assertEquals(JSONSchema.Type.Const, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.Const, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Const é diferente de " + result1478 + " <schema.getType()>")
chamada antiga: assertTrue(schema.isValid((Object) null))
nova chamada: assertTrue(schema.isValid((Object) null), "Era esperado verdadeiro, mas " + result1479 + " <schema.isValid((Object) null)> é falso")
chamada antiga: assertTrue(schema.validate((Object) null).isSuccess())
nova chamada: assertTrue(schema.validate((Object) null).isSuccess(), "Era esperado verdadeiro, mas " + result1480 + " <schema.validate((Object) null).isSuccess()> é falso")
chamada antiga: assertFalse(validator.isValid(null))
nova chamada: assertFalse(validator.isValid(null), "Era esperado falso, mas " + result1481 + " <validator.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(validator.isValid(""))
nova chamada: assertFalse(validator.isValid(""), "Era esperado falso, mas " + result1482 + " <validator.isValid('')> é verdadeiro ")
chamada antiga: assertTrue(validator.isValid("P2D"))
nova chamada: assertTrue(validator.isValid("P2D"), "Era esperado verdadeiro, mas " + result1483 + " <validator.isValid('P2D')> é falso")
chamada antiga: assertFalse(validator.isValid("1 days"))
nova chamada: assertFalse(validator.isValid("1 days"), "Era esperado falso, mas " + result1484 + " <validator.isValid('1 days')> é verdadeiro ")
chamada antiga: Assertions.assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean1.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean2.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean3.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1485 + " <JSON.parseObject('{\'value\':123}', Bean4.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1486 + " <JSON.parseObject('{\'value\':123}', Bean5.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1487 + " <JSON.parseObject('{\'value\':123}', Bean6.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1488 + " <JSON.parseObject('{\'value\':123}', Bean7.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1489 + " <JSON.parseObject('{\'value\':123}', Bean8.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1490 + " <JSON.parseObject('{\'value\':123}', Bean9.class).value.intValue()>")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean10.class).value")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean11.class).value")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean12.class).value")
chamada antiga: assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value)
nova chamada: assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value, "Era esperado valores iguais, mas  123D é diferente de " + " JSON.parseObject('{\'value\':123}', Bean13.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1491 + " <JSON.parseObject('{\'value\':123}', Bean14.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1492 + " <JSON.parseObject('{\'value\':123}', Bean15.class).value.intValue()>")
chamada antiga: assertEquals(schema.hashCode(), schema1.hashCode())
nova chamada: assertEquals(schema.hashCode(), schema1.hashCode(), "Era esperado valores iguais, mas " + result1493 + " <schema.hashCode()> é diferente de " + result1494 + " <schema1.hashCode()>")
chamada antiga: assertEquals(schema, schema1)
nova chamada: assertEquals(schema, schema1, "Era esperado valores iguais, mas  schema é diferente de " + " schema1")
chamada antiga: assertEquals("Product", schema.getTitle())
nova chamada: assertEquals("Product", schema.getTitle(), "Era esperado valores iguais, mas  'Product' é diferente de " + result1495 + " <schema.getTitle()>")
chamada antiga: assertEquals("A product from Acme's catalog", schema.getDescription())
nova chamada: assertEquals("A product from Acme's catalog", schema.getDescription(), "Era esperado valores iguais, mas  'A product from Acme's catalog' é diferente de " + result1496 + " <schema.getDescription()>")
chamada antiga: assertEquals(JSONSchema.Type.Object, schema.getType())
nova chamada: assertEquals(JSONSchema.Type.Object, schema.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Object é diferente de " + result1497 + " <schema.getType()>")
chamada antiga: assertEquals(3, schema.getProperties().size())
nova chamada: assertEquals(3, schema.getProperties().size(), "Era esperado valores iguais, mas  3 é diferente de " + result1498 + " <schema.getProperties().size()>")
chamada antiga: assertEquals("The unique identifier for a product", propertyId.getDescription())
nova chamada: assertEquals("The unique identifier for a product", propertyId.getDescription(), "Era esperado valores iguais, mas  'The unique identifier for a product' é diferente de " + result1499 + " <propertyId.getDescription()>")
chamada antiga: assertEquals(JSONSchema.Type.Integer, propertyId.getType())
nova chamada: assertEquals(JSONSchema.Type.Integer, propertyId.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Integer é diferente de " + result1500 + " <propertyId.getType()>")
chamada antiga: assertEquals("Name of the product", propertyName.getDescription())
nova chamada: assertEquals("Name of the product", propertyName.getDescription(), "Era esperado valores iguais, mas  'Name of the product' é diferente de " + result1501 + " <propertyName.getDescription()>")
chamada antiga: assertEquals(JSONSchema.Type.String, propertyName.getType())
nova chamada: assertEquals(JSONSchema.Type.String, propertyName.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.String é diferente de " + result1502 + " <propertyName.getType()>")
chamada antiga: assertNull(propertyPrice.getDescription())
nova chamada: assertNull(propertyPrice.getDescription(), "Era esperado nulo, mas " + result1503 + " <propertyPrice.getDescription()> não é nulo")
chamada antiga: assertEquals(JSONSchema.Type.Number, propertyPrice.getType())
nova chamada: assertEquals(JSONSchema.Type.Number, propertyPrice.getType(), "Era esperado valores iguais, mas  JSONSchema.Type.Number é diferente de " + result1504 + " <propertyPrice.getType()>")
chamada antiga: assertEquals(3, required.size())
nova chamada: assertEquals(3, required.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1505 + " <required.size()>")
chamada antiga: assertTrue(required.contains("id"))
nova chamada: assertTrue(required.contains("id"), "Era esperado verdadeiro, mas " + result1506 + " <required.contains('id')> é falso")
chamada antiga: assertTrue(required.contains("name"))
nova chamada: assertTrue(required.contains("name"), "Era esperado verdadeiro, mas " + result1507 + " <required.contains('name')> é falso")
chamada antiga: assertTrue(required.contains("price"))
nova chamada: assertTrue(required.contains("price"), "Era esperado verdadeiro, mas " + result1508 + " <required.contains('price')> é falso")
chamada antiga: assertTrue(schema.isValid(JSONObject.of("id", 1, "name", "", "price", 1)))
nova chamada: assertTrue(schema.isValid(JSONObject.of("id", 1, "name", "", "price", 1)), "Era esperado verdadeiro, mas " + result1509 + " <schema.isValid(JSONObject.of('id', 1, 'name', '', 'price', 1))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("aa"))
nova chamada: assertTrue(jsonSchema.isValid("aa"), "Era esperado verdadeiro, mas " + result1510 + " <jsonSchema.isValid('aa')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("aa"))
nova chamada: assertTrue(jsonSchema.isValid("aa"), "Era esperado verdadeiro, mas " + result1511 + " <jsonSchema.isValid('aa')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("abc@alibaba-inc.com"))
nova chamada: assertTrue(jsonSchema.isValid("abc@alibaba-inc.com"), "Era esperado verdadeiro, mas " + result1512 + " <jsonSchema.isValid('abc@alibaba-inc.com')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("xxx@hotmail.com"))
nova chamada: assertTrue(jsonSchema.isValid("xxx@hotmail.com"), "Era esperado verdadeiro, mas " + result1513 + " <jsonSchema.isValid('xxx@hotmail.com')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("2018-07-12"))
nova chamada: assertTrue(jsonSchema.isValid("2018-07-12"), "Era esperado verdadeiro, mas " + result1514 + " <jsonSchema.isValid('2018-07-12')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("1970-11-13"))
nova chamada: assertTrue(jsonSchema.isValid("1970-11-13"), "Era esperado verdadeiro, mas " + result1515 + " <jsonSchema.isValid('1970-11-13')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("2018-07-12 12:13:14"))
nova chamada: assertTrue(jsonSchema.isValid("2018-07-12 12:13:14"), "Era esperado verdadeiro, mas " + result1516 + " <jsonSchema.isValid('2018-07-12 12:13:14')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("1970-11-13 12:13:14"))
nova chamada: assertTrue(jsonSchema.isValid("1970-11-13 12:13:14"), "Era esperado verdadeiro, mas " + result1517 + " <jsonSchema.isValid('1970-11-13 12:13:14')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("12:13:14"))
nova chamada: assertTrue(jsonSchema.isValid("12:13:14"), "Era esperado verdadeiro, mas " + result1518 + " <jsonSchema.isValid('12:13:14')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("12:13:14"))
nova chamada: assertTrue(jsonSchema.isValid("12:13:14"), "Era esperado verdadeiro, mas " + result1519 + " <jsonSchema.isValid('12:13:14')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("a7f41390-39a9-4ca6-a13b-88cf07a41108"))
nova chamada: assertTrue(jsonSchema.isValid("a7f41390-39a9-4ca6-a13b-88cf07a41108"), "Era esperado verdadeiro, mas " + result1520 + " <jsonSchema.isValid('a7f41390-39a9-4ca6-a13b-88cf07a41108')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("A7F41390-39A9-4CA6-A13B-88CF07A41108"))
nova chamada: assertTrue(jsonSchema.isValid("A7F41390-39A9-4CA6-A13B-88CF07A41108"), "Era esperado verdadeiro, mas " + result1521 + " <jsonSchema.isValid('A7F41390-39A9-4CA6-A13B-88CF07A41108')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("a7f4139039a94ca6a13b88cf07a41108"))
nova chamada: assertTrue(jsonSchema.isValid("a7f4139039a94ca6a13b88cf07a41108"), "Era esperado verdadeiro, mas " + result1522 + " <jsonSchema.isValid('a7f4139039a94ca6a13b88cf07a41108')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("A7F4139039A94CA6A13B88CF07A41108"))
nova chamada: assertTrue(jsonSchema.isValid("A7F4139039A94CA6A13B88CF07A41108"), "Era esperado verdadeiro, mas " + result1523 + " <jsonSchema.isValid('A7F4139039A94CA6A13B88CF07A41108')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("http://github.com/alibaba/fastjson"))
nova chamada: assertTrue(jsonSchema.isValid("http://github.com/alibaba/fastjson"), "Era esperado verdadeiro, mas " + result1524 + " <jsonSchema.isValid('http://github.com/alibaba/fastjson')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("555-1212"))
nova chamada: assertTrue(jsonSchema.isValid("555-1212"), "Era esperado verdadeiro, mas " + result1525 + " <jsonSchema.isValid('555-1212')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("(888)555-1212"))
nova chamada: assertTrue(jsonSchema.isValid("(888)555-1212"), "Era esperado verdadeiro, mas " + result1526 + " <jsonSchema.isValid('(888)555-1212')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(1))
nova chamada: assertTrue(jsonSchema.isValid(1), "Era esperado verdadeiro, mas " + result1527 + " <jsonSchema.isValid(1)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Byte.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Byte.MIN_VALUE), "Era esperado verdadeiro, mas " + result1528 + " <jsonSchema.isValid(Byte.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Short.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Short.MIN_VALUE), "Era esperado verdadeiro, mas " + result1529 + " <jsonSchema.isValid(Short.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Integer.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Integer.MIN_VALUE), "Era esperado verdadeiro, mas " + result1530 + " <jsonSchema.isValid(Integer.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Long.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Long.MIN_VALUE), "Era esperado verdadeiro, mas " + result1531 + " <jsonSchema.isValid(Long.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(BigInteger.ONE))
nova chamada: assertTrue(jsonSchema.isValid(BigInteger.ONE), "Era esperado verdadeiro, mas " + result1532 + " <jsonSchema.isValid(BigInteger.ONE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1533 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1534 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1535 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1536 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1537 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1538 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1539 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1540 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(0))
nova chamada: assertTrue(jsonSchema.isValid(0), "Era esperado verdadeiro, mas " + result1541 + " <jsonSchema.isValid(0)> é falso")
chamada antiga: assertTrue(jsonSchema.validate(10).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(10).isSuccess(), "Era esperado verdadeiro, mas " + result1542 + " <jsonSchema.validate(10).isSuccess()> é falso")
chamada antiga: assertTrue(jsonSchema.validate(99).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(99).isSuccess(), "Era esperado verdadeiro, mas " + result1543 + " <jsonSchema.validate(99).isSuccess()> é falso")
chamada antiga: assertTrue(jsonSchema.validate(0).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(0).isSuccess(), "Era esperado verdadeiro, mas " + result1544 + " <jsonSchema.validate(0).isSuccess()> é falso")
chamada antiga: assertTrue(jsonSchema.validate(10).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(10).isSuccess(), "Era esperado verdadeiro, mas " + result1545 + " <jsonSchema.validate(10).isSuccess()> é falso")
chamada antiga: assertTrue(jsonSchema.isValid("a"))
nova chamada: assertTrue(jsonSchema.isValid("a"), "Era esperado verdadeiro, mas " + result1546 + " <jsonSchema.isValid('a')> é falso")
chamada antiga: assertTrue(jsonSchema.isValid((Object) null))
nova chamada: assertTrue(jsonSchema.isValid((Object) null), "Era esperado verdadeiro, mas " + result1547 + " <jsonSchema.isValid((Object) null)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(1))
nova chamada: assertTrue(jsonSchema.isValid(1), "Era esperado verdadeiro, mas " + result1548 + " <jsonSchema.isValid(1)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(1.1F))
nova chamada: assertTrue(jsonSchema.isValid(1.1F), "Era esperado verdadeiro, mas " + result1549 + " <jsonSchema.isValid(1.1F)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(1.1D))
nova chamada: assertTrue(jsonSchema.isValid(1.1D), "Era esperado verdadeiro, mas " + result1550 + " <jsonSchema.isValid(1.1D)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Byte.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Byte.MIN_VALUE), "Era esperado verdadeiro, mas " + result1551 + " <jsonSchema.isValid(Byte.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Short.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Short.MIN_VALUE), "Era esperado verdadeiro, mas " + result1552 + " <jsonSchema.isValid(Short.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Integer.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Integer.MIN_VALUE), "Era esperado verdadeiro, mas " + result1553 + " <jsonSchema.isValid(Integer.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(Long.MIN_VALUE))
nova chamada: assertTrue(jsonSchema.isValid(Long.MIN_VALUE), "Era esperado verdadeiro, mas " + result1554 + " <jsonSchema.isValid(Long.MIN_VALUE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(BigInteger.ONE))
nova chamada: assertTrue(jsonSchema.isValid(BigInteger.ONE), "Era esperado verdadeiro, mas " + result1555 + " <jsonSchema.isValid(BigInteger.ONE)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1556 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1557 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1558 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(11))
nova chamada: assertTrue(jsonSchema.isValid(11), "Era esperado verdadeiro, mas " + result1559 + " <jsonSchema.isValid(11)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1560 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1561 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1562 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(9))
nova chamada: assertTrue(jsonSchema.isValid(9), "Era esperado verdadeiro, mas " + result1563 + " <jsonSchema.isValid(9)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(0))
nova chamada: assertTrue(jsonSchema.isValid(0), "Era esperado verdadeiro, mas " + result1564 + " <jsonSchema.isValid(0)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1565 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(99))
nova chamada: assertTrue(jsonSchema.isValid(99), "Era esperado verdadeiro, mas " + result1566 + " <jsonSchema.isValid(99)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(0))
nova chamada: assertTrue(jsonSchema.isValid(0), "Era esperado verdadeiro, mas " + result1567 + " <jsonSchema.isValid(0)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(10))
nova chamada: assertTrue(jsonSchema.isValid(10), "Era esperado verdadeiro, mas " + result1568 + " <jsonSchema.isValid(10)> é falso")
chamada antiga: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
nova chamada: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode(), "Era esperado valores iguais, mas " + result1569 + " <jsonSchema.hashCode()> é diferente de " + result1570 + " <jsonSchema1.hashCode()>")
chamada antiga: assertEquals(jsonSchema, jsonSchema1)
nova chamada: assertEquals(jsonSchema, jsonSchema1, "Era esperado valores iguais, mas  jsonSchema é diferente de " + " jsonSchema1")
chamada antiga: assertEquals(jsonSchema.getType(), jsonSchema1.getType())
nova chamada: assertEquals(jsonSchema.getType(), jsonSchema1.getType(), "Era esperado valores iguais, mas " + result1571 + " <jsonSchema.getType()> é diferente de " + result1572 + " <jsonSchema1.getType()>")
chamada antiga: assertTrue(jsonSchema.isValid(true))
nova chamada: assertTrue(jsonSchema.isValid(true), "Era esperado verdadeiro, mas " + result1573 + " <jsonSchema.isValid(true)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(false))
nova chamada: assertTrue(jsonSchema.isValid(false), "Era esperado verdadeiro, mas " + result1574 + " <jsonSchema.isValid(false)> é falso")
chamada antiga: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
nova chamada: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode(), "Era esperado valores iguais, mas " + result1575 + " <jsonSchema.hashCode()> é diferente de " + result1576 + " <jsonSchema1.hashCode()>")
chamada antiga: assertEquals(jsonSchema, jsonSchema1)
nova chamada: assertEquals(jsonSchema, jsonSchema1, "Era esperado valores iguais, mas  jsonSchema é diferente de " + " jsonSchema1")
chamada antiga: assertEquals(jsonSchema.getType(), jsonSchema1.getType())
nova chamada: assertEquals(jsonSchema.getType(), jsonSchema1.getType(), "Era esperado valores iguais, mas " + result1577 + " <jsonSchema.getType()> é diferente de " + result1578 + " <jsonSchema1.getType()>")
chamada antiga: assertTrue(jsonSchema.isValid((Long) null))
nova chamada: assertTrue(jsonSchema.isValid((Long) null), "Era esperado verdadeiro, mas " + result1579 + " <jsonSchema.isValid((Long) null)> é falso")
chamada antiga: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode())
nova chamada: assertEquals(jsonSchema.hashCode(), jsonSchema1.hashCode(), "Era esperado valores iguais, mas " + result1580 + " <jsonSchema.hashCode()> é diferente de " + result1581 + " <jsonSchema1.hashCode()>")
chamada antiga: assertEquals(jsonSchema, jsonSchema1)
nova chamada: assertEquals(jsonSchema, jsonSchema1, "Era esperado valores iguais, mas  jsonSchema é diferente de " + " jsonSchema1")
chamada antiga: assertEquals(jsonSchema.getType(), jsonSchema1.getType())
nova chamada: assertEquals(jsonSchema.getType(), jsonSchema1.getType(), "Era esperado valores iguais, mas " + result1582 + " <jsonSchema.getType()> é diferente de " + result1583 + " <jsonSchema1.getType()>")
chamada antiga: assertTrue(jsonSchema.isValid((Integer) null))
nova chamada: assertTrue(jsonSchema.isValid((Integer) null), "Era esperado verdadeiro, mas " + result1584 + " <jsonSchema.isValid((Integer) null)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[0]))
nova chamada: assertTrue(jsonSchema.isValid(new Object[0]), "Era esperado verdadeiro, mas " + result1585 + " <jsonSchema.isValid(new Object[0])> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(1))
nova chamada: assertTrue(jsonSchema.isValid(1), "Era esperado verdadeiro, mas " + result1586 + " <jsonSchema.isValid(1)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[0]))
nova chamada: assertTrue(jsonSchema.isValid(new Object[0]), "Era esperado verdadeiro, mas " + result1587 + " <jsonSchema.isValid(new Object[0])> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2 }), "Era esperado verdadeiro, mas " + result1588 + " <jsonSchema.isValid(new Object[] { 0, 1, 2 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }), "Era esperado verdadeiro, mas " + result1589 + " <jsonSchema.isValid(new Object[] { 0, 1, 2, 3 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")), "Era esperado verdadeiro, mas " + result1590 + " <jsonSchema.isValid(JSON.parse('[1, 2, 3, 4, 5]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[3, \"different\", { \"types\" : \"of values\" }]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[3, \"different\", { \"types\" : \"of values\" }]")), "Era esperado verdadeiro, mas " + result1591 + " <jsonSchema.isValid(JSON.parse('[3, \'different\', { \'types\' : \'of values\' }]'))> é falso")
chamada antiga: assertTrue(JSON.parseArray("[1, 2, 3, 4, 5]").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseArray("[1, 2, 3, 4, 5]").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1592 + " <JSON.parseArray('[1, 2, 3, 4, 5]').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")), "Era esperado verdadeiro, mas " + result1593 + " <jsonSchema.isValid(JSON.parse('[1, 2, 3, 4, 5]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[]")), "Era esperado verdadeiro, mas " + result1594 + " <jsonSchema.isValid(JSON.parse('[]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")), "Era esperado verdadeiro, mas " + result1595 + " <jsonSchema.isValid(JSON.parse('[1600, \'Pennsylvania\', \'Avenue\', \'NW\']'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")), "Era esperado verdadeiro, mas " + result1596 + " <jsonSchema.isValid(JSON.parse('[10, \'Downing\', \'Street\']'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")), "Era esperado verdadeiro, mas " + result1597 + " <jsonSchema.isValid(JSON.parse('[1600, \'Pennsylvania\', \'Avenue\', \'NW\', \'Washington\']'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }), "Era esperado verdadeiro, mas " + result1598 + " <jsonSchema.isValid(new Object[] { 10, 'Downing', 'Street' })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\"]")), "Era esperado verdadeiro, mas " + result1599 + " <jsonSchema.isValid(JSON.parse('[1600, \'Pennsylvania\', \'Avenue\', \'NW\']'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[10, \"Downing\", \"Street\"]")), "Era esperado verdadeiro, mas " + result1600 + " <jsonSchema.isValid(JSON.parse('[10, \'Downing\', \'Street\']'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }), "Era esperado verdadeiro, mas " + result1601 + " <jsonSchema.isValid(new Object[] { 10, 'Downing', 'Street' })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", 42]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", 42]")), "Era esperado verdadeiro, mas " + result1602 + " <jsonSchema.isValid(JSON.parse('[\'life\', \'universe\', \'everything\', 42]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")), "Era esperado verdadeiro, mas " + result1603 + " <jsonSchema.isValid(JSON.parse('[1, 2, 3, 4, 5]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 10, "Downing", "Street" }), "Era esperado verdadeiro, mas " + result1604 + " <jsonSchema.isValid(new Object[] { 10, 'Downing', 'Street' })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { "Downing", "Street", 10 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { "Downing", "Street", 10 }), "Era esperado verdadeiro, mas " + result1605 + " <jsonSchema.isValid(new Object[] { 'Downing', 'Street', 10 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4]")), "Era esperado verdadeiro, mas " + result1606 + " <jsonSchema.isValid(JSON.parse('[\'apple\', \'orange\', 2, 4]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8]")), "Era esperado verdadeiro, mas " + result1607 + " <jsonSchema.isValid(JSON.parse('[\'apple\', \'orange\', 2, 4, 8]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4 }), "Era esperado verdadeiro, mas " + result1608 + " <jsonSchema.isValid(new Object[] { 'apple', 'orange', 2, 4 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8 }), "Era esperado verdadeiro, mas " + result1609 + " <jsonSchema.isValid(new Object[] { 'apple', 'orange', 2, 4, 8 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[1, 2, 3, 4, 5]")), "Era esperado verdadeiro, mas " + result1610 + " <jsonSchema.isValid(JSON.parse('[1, 2, 3, 4, 5]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[]")), "Era esperado verdadeiro, mas " + result1611 + " <jsonSchema.isValid(JSON.parse('[]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] { 1, 2, 3, 4, 5 }))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] { 1, 2, 3, 4, 5 }), "Era esperado verdadeiro, mas " + result1612 + " <jsonSchema.isValid(new Object[] { 1, 2, 3, 4, 5 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Object[] {}))
nova chamada: assertTrue(jsonSchema.isValid(new Object[] {}), "Era esperado verdadeiro, mas " + result1613 + " <jsonSchema.isValid(new Object[] {})> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new int[] {}))
nova chamada: assertTrue(jsonSchema.isValid(new int[] {}), "Era esperado verdadeiro, mas " + result1614 + " <jsonSchema.isValid(new int[] {})> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new int[] { 1, 2, 3, 4, 5 }))
nova chamada: assertTrue(jsonSchema.isValid(new int[] { 1, 2, 3, 4, 5 }), "Era esperado verdadeiro, mas " + result1615 + " <jsonSchema.isValid(new int[] { 1, 2, 3, 4, 5 })> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSONObject.of()))
nova chamada: assertTrue(jsonSchema.isValid(JSONObject.of()), "Era esperado verdadeiro, mas " + result1616 + " <jsonSchema.isValid(JSONObject.of())> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new Bean()))
nova chamada: assertTrue(jsonSchema.isValid(new Bean()), "Era esperado verdadeiro, mas " + result1617 + " <jsonSchema.isValid(new Bean())> é falso")
chamada antiga: assertTrue(jsonSchema.validate(JSONObject.of("id", 101)).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(JSONObject.of("id", 101)).isSuccess(), "Era esperado verdadeiro, mas " + result1618 + " <jsonSchema.validate(JSONObject.of('id', 101)).isSuccess()> é falso")
chamada antiga: assertTrue(jsonSchema.validate(JSONObject.of("id", 101).toJavaObject(Bean1.class)).isSuccess())
nova chamada: assertTrue(jsonSchema.validate(JSONObject.of("id", 101).toJavaObject(Bean1.class)).isSuccess(), "Era esperado verdadeiro, mas " + result1619 + " <jsonSchema.validate(JSONObject.of('id', 101).toJavaObject(Bean1.class)).isSuccess()> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1620 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1621 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{}").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{}").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1622 + " <JSON.parseObject('{}').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1623 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\', \'direction\': \'NW\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{}").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{}").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1624 + " <JSON.parseObject('{}').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"S_25\": \"This is a string\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"S_25\": \"This is a string\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1625 + " <JSON.parseObject('{ \'S_25\': \'This is a string\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"I_0\": 42 }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"I_0\": 42 }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1626 + " <JSON.parseObject('{ \'I_0\': 42 }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"keyword\": \"value\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"keyword\": \"value\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1627 + " <JSON.parseObject('{ \'keyword\': \'value\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1628 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }\n").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }\n").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1629 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\' }\n').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1630 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\', \'direction\': \'NW\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\"\n" + "}").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\"\n" + "}").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1631 + " <JSON.parseObject('{\n' + '  \'name\': \'William Shakespeare\',\n' + '  \'email\': \'bill@stratford-upon-avon.co.uk\'\n' + '}').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"authorship\": \"in question\"\n" + "}").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"email\": \"bill@stratford-upon-avon.co.uk\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"authorship\": \"in question\"\n" + "}").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1632 + " <JSON.parseObject('{\n' + '  \'name\': \'William Shakespeare\',\n' + '  \'email\': \'bill@stratford-upon-avon.co.uk\',\n' + '  \'address\': \'Henley Street, Stratford-upon-Avon, Warwickshire, England\',\n' + '  \'authorship\': \'in question\'\n' + '}').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{\n" + "  \"_a_proper_token_001\": \"value\"\n" + "}").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{\n" + "  \"_a_proper_token_001\": \"value\"\n" + "}").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1633 + " <JSON.parseObject('{\n' + '  \'_a_proper_token_001\': \'value\'\n' + '}').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1 }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1 }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1634 + " <JSON.parseObject('{ \'a\': 0, \'b\': 1 }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2 }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2 }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1635 + " <JSON.parseObject('{ \'a\': 0, \'b\': 1, \'c\': 2 }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(JSON.parseObject("{ \"country\": \"United States of America\" }").isValid(jsonSchema))
nova chamada: assertTrue(JSON.parseObject("{ \"country\": \"United States of America\" }").isValid(jsonSchema), "Era esperado verdadeiro, mas " + result1636 + " <JSON.parseObject('{ \'country\': \'United States of America\' }').isValid(jsonSchema)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(2))
nova chamada: assertTrue(jsonSchema.isValid(2), "Era esperado verdadeiro, mas " + result1637 + " <jsonSchema.isValid(2)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(2F))
nova chamada: assertTrue(jsonSchema.isValid(2F), "Era esperado verdadeiro, mas " + result1638 + " <jsonSchema.isValid(2F)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(2D))
nova chamada: assertTrue(jsonSchema.isValid(2D), "Era esperado verdadeiro, mas " + result1639 + " <jsonSchema.isValid(2D)> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new BigDecimal("2.0")))
nova chamada: assertTrue(jsonSchema.isValid(new BigDecimal("2.0")), "Era esperado verdadeiro, mas " + result1640 + " <jsonSchema.isValid(new BigDecimal('2.0'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(new BigInteger("2")))
nova chamada: assertTrue(jsonSchema.isValid(new BigInteger("2")), "Era esperado verdadeiro, mas " + result1641 + " <jsonSchema.isValid(new BigInteger('2'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")), "Era esperado verdadeiro, mas " + result1642 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555,\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\"\n" + "}")), "Era esperado verdadeiro, mas " + result1643 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")), "Era esperado verdadeiro, mas " + result1644 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)), "Era esperado verdadeiro, mas " + result1645 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555,\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}', Bean2.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\"\n" + "}", Bean2.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\"\n" + "}", Bean2.class)), "Era esperado verdadeiro, mas " + result1646 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\'\n' + '}', Bean2.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)), "Era esperado verdadeiro, mas " + result1647 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}', Bean2.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")), "Era esperado verdadeiro, mas " + result1648 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555,\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")), "Era esperado verdadeiro, mas " + result1649 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555,\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)), "Era esperado verdadeiro, mas " + result1650 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555,\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}', Bean2.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}", Bean2.class)), "Era esperado verdadeiro, mas " + result1651 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}', Bean2.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")), "Era esperado verdadeiro, mas " + result1652 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'country\': \'United States of America\',\n' + '  \'postal_code\': \'20500\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")), "Era esperado verdadeiro, mas " + result1653 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'20500\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")), "Era esperado verdadeiro, mas " + result1654 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)), "Era esperado verdadeiro, mas " + result1655 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'country\': \'United States of America\',\n' + '  \'postal_code\': \'20500\'\n' + '}', Bean3.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}", Bean3.class)), "Era esperado verdadeiro, mas " + result1656 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'20500\'\n' + '}', Bean3.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)), "Era esperado verdadeiro, mas " + result1657 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}', Bean3.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"country\": \"United States of America\",\n" + "  \"postal_code\": \"20500\"\n" + "}")), "Era esperado verdadeiro, mas " + result1658 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'country\': \'United States of America\',\n' + '  \'postal_code\': \'20500\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"20500\"\n" + "}")), "Era esperado verdadeiro, mas " + result1659 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'20500\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")), "Era esperado verdadeiro, mas " + result1660 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"Adriaan Goekooplaan\",\n" + "  \"country\": \"Netherlands\",\n" + "  \"postal_code\": \"2517 JX\"\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"Adriaan Goekooplaan\",\n" + "  \"country\": \"Netherlands\",\n" + "  \"postal_code\": \"2517 JX\"\n" + "}")), "Era esperado verdadeiro, mas " + result1661 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'Adriaan Goekooplaan\',\n' + '  \'country\': \'Netherlands\',\n' + '  \'postal_code\': \'2517 JX\'\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")), "Era esperado verdadeiro, mas " + result1662 + " <jsonSchema.isValid(JSON.parse('\'short\''))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("\"foo\"")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("\"foo\"")), "Era esperado verdadeiro, mas " + result1663 + " <jsonSchema.isValid(JSON.parse('\'foo\''))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("\"short\"")), "Era esperado verdadeiro, mas " + result1664 + " <jsonSchema.isValid(JSON.parse('\'short\''))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("12")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("12")), "Era esperado verdadeiro, mas " + result1665 + " <jsonSchema.isValid(JSON.parse('12'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("10")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("10")), "Era esperado verdadeiro, mas " + result1666 + " <jsonSchema.isValid(JSON.parse('10'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("9")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("9")), "Era esperado verdadeiro, mas " + result1667 + " <jsonSchema.isValid(JSON.parse('9'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("42")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("42")), "Era esperado verdadeiro, mas " + result1668 + " <jsonSchema.isValid(JSON.parse('42'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")), "Era esperado verdadeiro, mas " + result1669 + " <jsonSchema.isValid(JSON.parse('{ \'key\': \'value\' }'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}")), "Era esperado verdadeiro, mas " + result1670 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'restaurantType\': \'sit-down\',\n' + '  \'total\': 16.99,\n' + '  \'tip\': 3.4\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}")), "Era esperado verdadeiro, mas " + result1671 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'restaurantType\': \'fast-food\',\n' + '  \'total\': 6.99\n' + '}'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("{ \"total\": 5.25 }")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("{ \"total\": 5.25 }")), "Era esperado verdadeiro, mas " + result1672 + " <jsonSchema.isValid(JSON.parse('{ \'total\': 5.25 }'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}", Bean4.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99,\n" + "  \"tip\": 3.4\n" + "}", Bean4.class)), "Era esperado verdadeiro, mas " + result1673 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'restaurantType\': \'sit-down\',\n' + '  \'total\': 16.99,\n' + '  \'tip\': 3.4\n' + '}', Bean4.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}", Bean4.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"fast-food\",\n" + "  \"total\": 6.99\n" + "}", Bean4.class)), "Era esperado verdadeiro, mas " + result1674 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'restaurantType\': \'fast-food\',\n' + '  \'total\': 6.99\n' + '}', Bean4.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parseObject("{ \"total\": 5.25 }", Bean4.class)))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parseObject("{ \"total\": 5.25 }", Bean4.class)), "Era esperado verdadeiro, mas " + result1675 + " <jsonSchema.isValid(JSON.parseObject('{ \'total\': 5.25 }', Bean4.class))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")), "Era esperado verdadeiro, mas " + result1676 + " <jsonSchema.isValid(JSON.parse('[ 1, 2, 3, 4, 5 ]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[ 1, 2, 3, 4, 5 ]")), "Era esperado verdadeiro, mas " + result1677 + " <jsonSchema.isValid(JSON.parse('[ 1, 2, 3, 4, 5 ]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ]\n" + "                ]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ],\n" + "                    [ {\"foo\": null}, {\"foo\": null} ]\n" + "                ]")), "Era esperado verdadeiro, mas " + result1678 + " <jsonSchema.isValid(JSON.parse('[\n' + '                    [ {\'foo\': null}, {\'foo\': null} ],\n' + '                    [ {\'foo\': null}, {\'foo\': null} ],\n' + '                    [ {\'foo\': null}, {\'foo\': null} ]\n' + '                ]'))> é falso")
chamada antiga: assertTrue(jsonSchema.isValid(JSON.parse("[\"x\",2,3]")))
nova chamada: assertTrue(jsonSchema.isValid(JSON.parse("[\"x\",2,3]")), "Era esperado verdadeiro, mas " + result1679 + " <jsonSchema.isValid(JSON.parse('[\'x\',2,3]'))> é falso")
chamada antiga: Assertions.assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean1.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean1.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean2.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean2.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value)
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean3.class).value, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'value\':123}', Bean3.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean4.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1680 + " <JSON.parseObject('{\'value\':123}', Bean4.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean5.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1681 + " <JSON.parseObject('{\'value\':123}', Bean5.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean6.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1682 + " <JSON.parseObject('{\'value\':123}', Bean6.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean7.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1683 + " <JSON.parseObject('{\'value\':123}', Bean7.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean8.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1684 + " <JSON.parseObject('{\'value\':123}', Bean8.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean9.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1685 + " <JSON.parseObject('{\'value\':123}', Bean9.class).value.intValue()>")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean10.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean10.class).value")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean11.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean11.class).value")
chamada antiga: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value)
nova chamada: assertEquals(123F, JSON.parseObject("{\"value\":123}", Bean12.class).value, "Era esperado valores iguais, mas  123F é diferente de " + " JSON.parseObject('{\'value\':123}', Bean12.class).value")
chamada antiga: assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value)
nova chamada: assertEquals(123D, JSON.parseObject("{\"value\":123}", Bean13.class).value, "Era esperado valores iguais, mas  123D é diferente de " + " JSON.parseObject('{\'value\':123}', Bean13.class).value")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean14.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1686 + " <JSON.parseObject('{\'value\':123}', Bean14.class).value.intValue()>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue())
nova chamada: assertEquals(123, JSON.parseObject("{\"value\":123}", Bean15.class).value.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1687 + " <JSON.parseObject('{\'value\':123}', Bean15.class).value.intValue()>")
chamada antiga: assertTrue(result.getMessage().contains("age"))
nova chamada: assertTrue(result.getMessage().contains("age"), "Era esperado verdadeiro, mas " + result1688 + " <result.getMessage().contains('age')> é falso")
chamada antiga: assertTrue(result.getMessage().contains("age"))
nova chamada: assertTrue(result.getMessage().contains("age"), "Era esperado verdadeiro, mas " + result1689 + " <result.getMessage().contains('age')> é falso")
chamada antiga: assertEquals(list_map_st_obj, JSON.toJSONString(temp))
nova chamada: assertEquals(list_map_st_obj, JSON.toJSONString(temp), "Era esperado valores iguais, mas  list_map_st_obj é diferente de " + result1690 + " <JSON.toJSONString(temp)>")
chamada antiga: assertTrue(JSON.isValid(json))
nova chamada: assertTrue(JSON.isValid(json), "Era esperado verdadeiro, mas " + result1691 + " <JSON.isValid(json)> é falso")
chamada antiga: assertTrue(JSON.isValid(utf8))
nova chamada: assertTrue(JSON.isValid(utf8), "Era esperado verdadeiro, mas " + result1692 + " <JSON.isValid(utf8)> é falso")
chamada antiga: assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8))
nova chamada: assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8), "Era esperado verdadeiro, mas " + result1693 + " <JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8)> é falso")
chamada antiga: assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII))
nova chamada: assertTrue(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII), "Era esperado verdadeiro, mas " + result1694 + " <JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII)> é falso")
chamada antiga: assertEquals(jsonStr, result)
nova chamada: assertEquals(jsonStr, result, "Era esperado valores iguais, mas  jsonStr é diferente de " + " result")
chamada antiga: assertEquals(jsonStr, result)
nova chamada: assertEquals(jsonStr, result, "Era esperado valores iguais, mas  jsonStr é diferente de " + " result")
chamada antiga: assertNotNull(m)
nova chamada: assertNotNull(m, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result1695 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals(str, JSON.toJSONString(m))
nova chamada: assertEquals(str, JSON.toJSONString(m), "Era esperado valores iguais, mas  str é diferente de " + result1696 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result1697 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
nova chamada: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'info\':\'fofo\',\'name\':\'wenshao\'}' é diferente de " + " text")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result1698 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals(str, JSON.toJSONString(m))
nova chamada: assertEquals(str, JSON.toJSONString(m), "Era esperado valores iguais, mas  str é diferente de " + result1699 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result1700 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
nova chamada: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'info\':\'fofo\',\'name\':\'wenshao\'}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1701 + " <v1.getValue()> é diferente de " + result1702 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1703 + " <v1.getValue()> é diferente de " + result1704 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1705 + " <v1.getValue()> é diferente de " + result1706 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), v1.getValue())
nova chamada: assertEquals(Byte.valueOf((byte) 0), v1.getValue(), "Era esperado valores iguais, mas " + result1707 + " <Byte.valueOf((byte) 0)> é diferente de " + result1708 + " <v1.getValue()>")
chamada antiga: assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json)
nova chamada: assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json, "Era esperado valores iguais, mas  '{\'admin\':[\'admin.create\',\'admin.update\',\'admin.delete\'],\'user\':[\'user.create\',\'user.delete\']}' é diferente de " + " json")
chamada antiga: assertEquals(multimap.size(), multimap1.size())
nova chamada: assertEquals(multimap.size(), multimap1.size(), "Era esperado valores iguais, mas " + result1709 + " <multimap.size()> é diferente de " + result1710 + " <multimap1.size()>")
chamada antiga: assertEquals(json, JSON.toJSONString(multimap1))
nova chamada: assertEquals(json, JSON.toJSONString(multimap1), "Era esperado valores iguais, mas  json é diferente de " + result1711 + " <JSON.toJSONString(multimap1)>")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result1712 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result1713 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", getType()))
nova chamada: assertNull(obj.getObject("value", getType()), "Era esperado nulo, mas " + result1714 + " <obj.getObject('value', getType())> não é nulo")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1715 + " <v1.getValue()> é diferente de " + result1716 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
nova chamada: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }), "Era esperado valores iguais, mas  '[true]' é diferente de " + result1717 + " <JSON.toJSONString(new boolean[] { true })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1718 + " <v1.getValue()> é diferente de " + result1719 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals(123, tb.getAb())
nova chamada: assertEquals(123, tb.getAb(), "Era esperado valores iguais, mas  123 é diferente de " + result1720 + " <tb.getAb()>")
chamada antiga: assertTrue(model.flag)
nova chamada: assertTrue(model.flag, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"userId\":\"456\"}", json)
nova chamada: assertEquals("{\"userId\":\"456\"}", json, "Era esperado valores iguais, mas  '{\'userId\':\'456\'}' é diferente de " + " json")
chamada antiga: assertEquals(123, tb.getAb())
nova chamada: assertEquals(123, tb.getAb(), "Era esperado valores iguais, mas  123 é diferente de " + result1721 + " <tb.getAb()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("\"2017-03-17\"", json)
nova chamada: assertEquals("\"2017-03-17\"", json, "Era esperado valores iguais, mas  '\'2017-03-17\'' é diferente de " + " json")
chamada antiga: assertEquals("\"2017-03-07\"", json)
nova chamada: assertEquals("\"2017-03-07\"", json, "Era esperado valores iguais, mas  '\'2017-03-07\'' é diferente de " + " json")
chamada antiga: assertEquals(123, model.id)
nova chamada: assertEquals(123, model.id, "Era esperado valores iguais, mas  123 é diferente de " + " model.id")
chamada antiga: assertEquals(123, model.id)
nova chamada: assertEquals(123, model.id, "Era esperado valores iguais, mas  123 é diferente de " + " model.id")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1722 + " <list.size()>")
chamada antiga: assertEquals(Model.class, list.get(0).getClass())
nova chamada: assertEquals(Model.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Model.class é diferente de " + result1723 + " <list.get(0).getClass()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1724 + " <list.size()>")
chamada antiga: assertEquals(Model.class, list.get(0).getClass())
nova chamada: assertEquals(Model.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Model.class é diferente de " + result1725 + " <list.get(0).getClass()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1726 + " <v1.getValue()> é diferente de " + result1727 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertNotNull(child)
nova chamada: assertNotNull(child, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("\"黑色\"", JSON.toJSONString(vo.type))
nova chamada: assertEquals("\"黑色\"", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '\'黑色\'' é diferente de " + result1728 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":\"黑色\"}", str)
nova chamada: assertEquals("{\"type\":\"黑色\"}", str, "Era esperado valores iguais, mas  '{\'type\':\'黑色\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result1729 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result1730 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
nova chamada: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}", "Era esperado valores iguais, mas " + result1731 + " <JSON.toJSONString(vo)> é diferente de " + " '{\'date\':\'2020-05-30\'}'")
chamada antiga: assertEquals("{\"date\":\"2020-05-30\"}", str)
nova chamada: assertEquals("{\"date\":\"2020-05-30\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2020-05-30\'}' é diferente de " + " str")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result1732 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result1733 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str)
nova chamada: assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str, "Era esperado valores iguais, mas  '{\'v0\':\'1001\',\'v1\':\'101\'}' é diferente de " + " str")
chamada antiga: assertEquals("1001", object.get("v0"))
nova chamada: assertEquals("1001", object.get("v0"), "Era esperado valores iguais, mas  '1001' é diferente de " + result1734 + " <object.get('v0')>")
chamada antiga: assertEquals("101", object.get("v1"))
nova chamada: assertEquals("101", object.get("v1"), "Era esperado valores iguais, mas  '101' é diferente de " + result1735 + " <object.get('v1')>")
chamada antiga: assertEquals("{\"v0\":\"19007199254740991\"}", str)
nova chamada: assertEquals("{\"v0\":\"19007199254740991\"}", str, "Era esperado valores iguais, mas  '{\'v0\':\'19007199254740991\'}' é diferente de " + " str")
chamada antiga: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
nova chamada: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}", "Era esperado valores iguais, mas " + result1736 + " <JSON.toJSONString(vo)> é diferente de " + " '{\'date\':\'2020-05-30\'}'")
chamada antiga: assertEquals("{\"date\":\"2020-05-30\"}", str)
nova chamada: assertEquals("{\"date\":\"2020-05-30\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2020-05-30\'}' é diferente de " + " str")
chamada antiga: assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }, "base64"))
nova chamada: assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }, "base64"), "Era esperado valores iguais, mas  '\'AQ==\'' é diferente de " + result1737 + " <JSON.toJSONString(new byte[] { 1 }, 'base64')>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1738 + " <v1.getValue()> é diferente de " + result1739 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("123", bean.getValue())
nova chamada: assertEquals("123", bean.getValue(), "Era esperado valores iguais, mas  '123' é diferente de " + result1740 + " <bean.getValue()>")
chamada antiga: assertEquals(false, bean.isBig())
nova chamada: assertEquals(false, bean.isBig(), "Era esperado valores iguais, mas  false é diferente de " + result1741 + " <bean.isBig()>")
chamada antiga: assertEquals(123, bean.getIntValue())
nova chamada: assertEquals(123, bean.getIntValue(), "Era esperado valores iguais, mas  123 é diferente de " + result1742 + " <bean.getIntValue()>")
chamada antiga: assertEquals(true, bean.isBig())
nova chamada: assertEquals(true, bean.isBig(), "Era esperado valores iguais, mas  true é diferente de " + result1743 + " <bean.isBig()>")
chamada antiga: assertEquals(567, bean.getID())
nova chamada: assertEquals(567, bean.getID(), "Era esperado valores iguais, mas  567 é diferente de " + result1744 + " <bean.getID()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTime())
nova chamada: assertEquals(1548166745000L, o.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result1745 + " <o.createTime.getTime()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTimeInMillis())
nova chamada: assertEquals(1548166745000L, o.createTime.getTimeInMillis(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result1746 + " <o.createTime.getTimeInMillis()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1531579788000L, o.createTime.getTimeInMillis())
nova chamada: assertEquals(1531579788000L, o.createTime.getTimeInMillis(), "Era esperado valores iguais, mas  1531579788000L é diferente de " + result1747 + " <o.createTime.getTimeInMillis()>")
chamada antiga: assertEquals("{\"createTime\":\"20180714224948\"}", json)
nova chamada: assertEquals("{\"createTime\":\"20180714224948\"}", json, "Era esperado valores iguais, mas  '{\'createTime\':\'20180714224948\'}' é diferente de " + " json")
chamada antiga: assertEquals(ZonedDateTime.class, o.createTime.getClass())
nova chamada: assertEquals(ZonedDateTime.class, o.createTime.getClass(), "Era esperado valores iguais, mas  ZonedDateTime.class é diferente de " + result1748 + " <o.createTime.getClass()>")
chamada antiga: assertEquals(1548166745L, seconds)
nova chamada: assertEquals(1548166745L, seconds, "Era esperado valores iguais, mas  1548166745L é diferente de " + " seconds")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result1749 + " <JSON.parseObject('\'big\'', Type.class)>")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result1750 + " <JSON.parseObject('\'Big\'', Type.class)>")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result1751 + " <JSON.parseObject('\'BIG\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result1752 + " <JSON.parseObject('\'Small\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result1753 + " <JSON.parseObject('\'small\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result1754 + " <JSON.parseObject('\'SMALL\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result1755 + " <JSON.parseObject('\'medium\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result1756 + " <JSON.parseObject('\'MEDIUM\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result1757 + " <JSON.parseObject('\'Medium\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result1758 + " <JSON.parseObject('\'MediuM\'', Type.class)>")
chamada antiga: assertNull(JSON.parseObject("\"\"", Type.class))
nova chamada: assertNull(JSON.parseObject("\"\"", Type.class), "Era esperado nulo, mas " + result1759 + " <JSON.parseObject('\'\'', Type.class)> não é nulo")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'bIG\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'big\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'Big\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'BIG\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'Small\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'SmAll\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'small\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'SMALL\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'Medium\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'MediuM\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'medium\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'MEDIUM\'}', Model.class).type")
chamada antiga: assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type)
nova chamada: assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.type)
nova chamada: assertNull(model.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"null\":123}", str)
nova chamada: assertEquals("{\"null\":123}", str, "Era esperado valores iguais, mas  '{\'null\':123}' é diferente de " + " str")
chamada antiga: assertEquals(1950, m.date.get(Calendar.YEAR))
nova chamada: assertEquals(1950, m.date.get(Calendar.YEAR), "Era esperado valores iguais, mas  1950 é diferente de " + result1760 + " <m.date.get(Calendar.YEAR)>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1761 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1762 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1763 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1764 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1765 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result1766 + " <m.date.getYear()>")
chamada antiga: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
nova chamada: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"), "Era esperado valores iguais, mas " + result1767 + " <TestUtils.encodeToBase64String(entity.getValue(), false)> é diferente de " + result1768 + " <json.getString('value')>")
chamada antiga: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
nova chamada: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"), "Era esperado valores iguais, mas  '中华人民共和国' é diferente de " + " new String(entity2.getValue(), 'UTF-8')")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result1769 + " <v1.getValue()> é diferente de " + result1770 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result1771 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result1772 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
nova chamada: assertNull(obj.getObject("value", new TypeReference<Model>() {
}), "Era esperado nulo, mas " + result1773 + " <obj.getObject('value', new TypeReference<Model>() {\n})> não é nulo")
chamada antiga: assertEquals("null", obj.get("value"))
nova chamada: assertEquals("null", obj.get("value"), "Era esperado valores iguais, mas  'null' é diferente de " + result1774 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result1775 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
nova chamada: assertNull(obj.getObject("value", new TypeReference<Model>() {
}), "Era esperado nulo, mas " + result1776 + " <obj.getObject('value', new TypeReference<Model>() {\n})> não é nulo")
chamada antiga: assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class))
nova chamada: assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class), "Era esperado valores iguais, mas  new JSONObject() é diferente de " + result1777 + " <obj.getObject('value', JSONObject.class)>")
chamada antiga: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "")))
nova chamada: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "")), "Era esperado falso, mas " + result1778 + " <schema.isValid(JSONObject.of('id', 1, 'name', ''))> é verdadeiro ")
chamada antiga: assertFalse(schema.isValid(JSONObject.of("id", "1", "name", "", "price", 0)))
nova chamada: assertFalse(schema.isValid(JSONObject.of("id", "1", "name", "", "price", 0)), "Era esperado falso, mas " + result1779 + " <schema.isValid(JSONObject.of('id', '1', 'name', '', 'price', 0))> é verdadeiro ")
chamada antiga: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", 1, "price", 0)))
nova chamada: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", 1, "price", 0)), "Era esperado falso, mas " + result1780 + " <schema.isValid(JSONObject.of('id', 1, 'name', 1, 'price', 0))> é verdadeiro ")
chamada antiga: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "", "price", "x")))
nova chamada: assertFalse(schema.isValid(JSONObject.of("id", 1, "name", "", "price", "x")), "Era esperado falso, mas " + result1781 + " <schema.isValid(JSONObject.of('id', 1, 'name', '', 'price', 'x'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate((Object) null).isSuccess())
nova chamada: assertFalse(jsonSchema.validate((Object) null).isSuccess(), "Era esperado falso, mas " + result1782 + " <jsonSchema.validate((Object) null).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate("a123").isSuccess())
nova chamada: assertFalse(jsonSchema.validate("a123").isSuccess(), "Era esperado falso, mas " + result1783 + " <jsonSchema.validate('a123').isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate((Object) null).isSuccess())
nova chamada: assertFalse(jsonSchema.validate((Object) null).isSuccess(), "Era esperado falso, mas " + result1784 + " <jsonSchema.validate((Object) null).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("a"))
nova chamada: assertFalse(jsonSchema.isValid("a"), "Era esperado falso, mas " + result1785 + " <jsonSchema.isValid('a')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1786 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1787 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-13-13"))
nova chamada: assertFalse(jsonSchema.isValid("1970-13-13"), "Era esperado falso, mas " + result1788 + " <jsonSchema.isValid('1970-13-13')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-02-31"))
nova chamada: assertFalse(jsonSchema.isValid("1970-02-31"), "Era esperado falso, mas " + result1789 + " <jsonSchema.isValid('1970-02-31')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1790 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1791 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-13-13 12:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("1970-13-13 12:13:14"), "Era esperado falso, mas " + result1792 + " <jsonSchema.isValid('1970-13-13 12:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-02-31 12:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("1970-02-31 12:13:14"), "Era esperado falso, mas " + result1793 + " <jsonSchema.isValid('1970-02-31 12:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1794 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1795 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("25:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("25:13:14"), "Era esperado falso, mas " + result1796 + " <jsonSchema.isValid('25:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"), "Era esperado falso, mas " + result1797 + " <jsonSchema.isValid('1970-02-01 12:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1798 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1799 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1F))
nova chamada: assertFalse(jsonSchema.isValid(1F), "Era esperado falso, mas " + result1800 + " <jsonSchema.isValid(1F)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Float.valueOf(1)))
nova chamada: assertFalse(jsonSchema.isValid(Float.valueOf(1)), "Era esperado falso, mas " + result1801 + " <jsonSchema.isValid(Float.valueOf(1))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Double.valueOf(1)))
nova chamada: assertFalse(jsonSchema.isValid(Double.valueOf(1)), "Era esperado falso, mas " + result1802 + " <jsonSchema.isValid(Double.valueOf(1))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("*7F4139039A94CA6A13B88CF07A41108"))
nova chamada: assertFalse(jsonSchema.isValid("*7F4139039A94CA6A13B88CF07A41108"), "Era esperado falso, mas " + result1803 + " <jsonSchema.isValid('*7F4139039A94CA6A13B88CF07A41108')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"), "Era esperado falso, mas " + result1804 + " <jsonSchema.isValid('1970-02-01 12:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"), "Era esperado falso, mas " + result1805 + " <jsonSchema.isValid('(888)555-1212 ext. 532 (888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1806 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1807 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"))
nova chamada: assertFalse(jsonSchema.isValid("1970-02-01 12:13:14"), "Era esperado falso, mas " + result1808 + " <jsonSchema.isValid('1970-02-01 12:13:14')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532 (888)555-1212 ext. 532"), "Era esperado falso, mas " + result1809 + " <jsonSchema.isValid('(888)555-1212 ext. 532 (888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1810 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"))
nova chamada: assertFalse(jsonSchema.isValid("(888)555-1212 ext. 532"), "Era esperado falso, mas " + result1811 + " <jsonSchema.isValid('(888)555-1212 ext. 532')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("(800)FLOWERS"))
nova chamada: assertFalse(jsonSchema.isValid("(800)FLOWERS"), "Era esperado falso, mas " + result1812 + " <jsonSchema.isValid('(800)FLOWERS')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid("a"))
nova chamada: assertFalse(jsonSchema.isValid("a"), "Era esperado falso, mas " + result1813 + " <jsonSchema.isValid('a')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1.1F))
nova chamada: assertFalse(jsonSchema.isValid(1.1F), "Era esperado falso, mas " + result1814 + " <jsonSchema.isValid(1.1F)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new BigDecimal("1.1")))
nova chamada: assertFalse(jsonSchema.isValid(new BigDecimal("1.1")), "Era esperado falso, mas " + result1815 + " <jsonSchema.isValid(new BigDecimal('1.1'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid((Object) null))
nova chamada: assertFalse(jsonSchema.isValid((Object) null), "Era esperado falso, mas " + result1816 + " <jsonSchema.isValid((Object) null)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1817 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1818 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(9))
nova chamada: assertFalse(jsonSchema.isValid(9), "Era esperado falso, mas " + result1819 + " <jsonSchema.isValid(9)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1820 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(9))
nova chamada: assertFalse(jsonSchema.isValid(9), "Era esperado falso, mas " + result1821 + " <jsonSchema.isValid(9)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1822 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1823 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1824 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1825 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1826 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(-1))
nova chamada: assertFalse(jsonSchema.isValid(-1), "Era esperado falso, mas " + result1827 + " <jsonSchema.isValid(-1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(100))
nova chamada: assertFalse(jsonSchema.isValid(100), "Era esperado falso, mas " + result1828 + " <jsonSchema.isValid(100)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(101))
nova chamada: assertFalse(jsonSchema.isValid(101), "Era esperado falso, mas " + result1829 + " <jsonSchema.isValid(101)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(-1).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(-1).isSuccess(), "Era esperado falso, mas " + result1830 + " <jsonSchema.validate(-1).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(99).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(99).isSuccess(), "Era esperado falso, mas " + result1831 + " <jsonSchema.validate(99).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(101).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(101).isSuccess(), "Era esperado falso, mas " + result1832 + " <jsonSchema.validate(101).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(23).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(23).isSuccess(), "Era esperado falso, mas " + result1833 + " <jsonSchema.validate(23).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1834 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1835 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(9))
nova chamada: assertFalse(jsonSchema.isValid(9), "Era esperado falso, mas " + result1836 + " <jsonSchema.isValid(9)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1837 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1838 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(9))
nova chamada: assertFalse(jsonSchema.isValid(9), "Era esperado falso, mas " + result1839 + " <jsonSchema.isValid(9)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1840 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1841 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1842 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1843 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11D))
nova chamada: assertFalse(jsonSchema.isValid(11D), "Era esperado falso, mas " + result1844 + " <jsonSchema.isValid(11D)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Double.valueOf(11)))
nova chamada: assertFalse(jsonSchema.isValid(Double.valueOf(11)), "Era esperado falso, mas " + result1845 + " <jsonSchema.isValid(Double.valueOf(11))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11F))
nova chamada: assertFalse(jsonSchema.isValid(11F), "Era esperado falso, mas " + result1846 + " <jsonSchema.isValid(11F)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Float.valueOf(11)))
nova chamada: assertFalse(jsonSchema.isValid(Float.valueOf(11)), "Era esperado falso, mas " + result1847 + " <jsonSchema.isValid(Float.valueOf(11))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(10))
nova chamada: assertFalse(jsonSchema.isValid(10), "Era esperado falso, mas " + result1848 + " <jsonSchema.isValid(10)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(11))
nova chamada: assertFalse(jsonSchema.isValid(11), "Era esperado falso, mas " + result1849 + " <jsonSchema.isValid(11)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(-1))
nova chamada: assertFalse(jsonSchema.isValid(-1), "Era esperado falso, mas " + result1850 + " <jsonSchema.isValid(-1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(100))
nova chamada: assertFalse(jsonSchema.isValid(100), "Era esperado falso, mas " + result1851 + " <jsonSchema.isValid(100)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(101))
nova chamada: assertFalse(jsonSchema.isValid(101), "Era esperado falso, mas " + result1852 + " <jsonSchema.isValid(101)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(-1))
nova chamada: assertFalse(jsonSchema.isValid(-1), "Era esperado falso, mas " + result1853 + " <jsonSchema.isValid(-1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(99))
nova chamada: assertFalse(jsonSchema.isValid(99), "Era esperado falso, mas " + result1854 + " <jsonSchema.isValid(99)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(101))
nova chamada: assertFalse(jsonSchema.isValid(101), "Era esperado falso, mas " + result1855 + " <jsonSchema.isValid(101)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(23))
nova chamada: assertFalse(jsonSchema.isValid(23), "Era esperado falso, mas " + result1856 + " <jsonSchema.isValid(23)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid((Integer) null))
nova chamada: assertFalse(jsonSchema.isValid((Integer) null), "Era esperado falso, mas " + result1857 + " <jsonSchema.isValid((Integer) null)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1858 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1859 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(true))
nova chamada: assertFalse(jsonSchema.isValid(true), "Era esperado falso, mas " + result1860 + " <jsonSchema.isValid(true)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { 0, 1, 2, 3 }), "Era esperado falso, mas " + result1861 + " <jsonSchema.isValid(new Object[] { 0, 1, 2, 3 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] {}))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] {}), "Era esperado falso, mas " + result1862 + " <jsonSchema.isValid(new Object[] {})> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { 0 }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { 0 }), "Era esperado falso, mas " + result1863 + " <jsonSchema.isValid(new Object[] { 0 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\"Not\": \"an array\"}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\"Not\": \"an array\"}")), "Era esperado falso, mas " + result1864 + " <jsonSchema.isValid(JSON.parse('{\'Not\': \'an array\'}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, \"3\", 4, 5]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, \"3\", 4, 5]")), "Era esperado falso, mas " + result1865 + " <jsonSchema.isValid(JSON.parse('[1, 2, \'3\', 4, 5]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[24, \"Sussex\", \"Drive\"]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[24, \"Sussex\", \"Drive\"]")), "Era esperado falso, mas " + result1866 + " <jsonSchema.isValid(JSON.parse('[24, \'Sussex\', \'Drive\']'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[\"Palais de l'Élysée\"]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[\"Palais de l'Élysée\"]")), "Era esperado falso, mas " + result1867 + " <jsonSchema.isValid(JSON.parse('[\'Palais de l'Élysée\']'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new String[] { "Palais de l'Élysée" }))
nova chamada: assertFalse(jsonSchema.isValid(new String[] { "Palais de l'Élysée" }), "Era esperado falso, mas " + result1868 + " <jsonSchema.isValid(new String[] { 'Palais de l'Élysée' })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[1600, \"Pennsylvania\", \"Avenue\", \"NW\", \"Washington\"]")), "Era esperado falso, mas " + result1869 + " <jsonSchema.isValid(JSON.parse('[1600, \'Pennsylvania\', \'Avenue\', \'NW\', \'Washington\']'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { 1600, "Pennsylvania", "Avenue", "NW", "Washington" }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { 1600, "Pennsylvania", "Avenue", "NW", "Washington" }), "Era esperado falso, mas " + result1870 + " <jsonSchema.isValid(new Object[] { 1600, 'Pennsylvania', 'Avenue', 'NW', 'Washington' })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", \"forty-two\"]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[\"life\", \"universe\", \"everything\", \"forty-two\"]")), "Era esperado falso, mas " + result1871 + " <jsonSchema.isValid(JSON.parse('[\'life\', \'universe\', \'everything\', \'forty-two\']'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { "life", "universe", "everything", "forty-two" }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { "life", "universe", "everything", "forty-two" }), "Era esperado falso, mas " + result1872 + " <jsonSchema.isValid(new Object[] { 'life', 'universe', 'everything', 'forty-two' })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2]")), "Era esperado falso, mas " + result1873 + " <jsonSchema.isValid(JSON.parse('[\'apple\', \'orange\', 2]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8, 16]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[\"apple\", \"orange\", 2, 4, 8, 16]")), "Era esperado falso, mas " + result1874 + " <jsonSchema.isValid(JSON.parse('[\'apple\', \'orange\', 2, 4, 8, 16]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2 }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2 }), "Era esperado falso, mas " + result1875 + " <jsonSchema.isValid(new Object[] { 'apple', 'orange', 2 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8, 16 }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { "apple", "orange", 2, 4, 8, 16 }), "Era esperado falso, mas " + result1876 + " <jsonSchema.isValid(new Object[] { 'apple', 'orange', 2, 4, 8, 16 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, 3, 3, 4]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[1, 2, 3, 3, 4]")), "Era esperado falso, mas " + result1877 + " <jsonSchema.isValid(JSON.parse('[1, 2, 3, 3, 4]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] { 1, 2, 3, 3, 4 }))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] { 1, 2, 3, 3, 4 }), "Era esperado falso, mas " + result1878 + " <jsonSchema.isValid(new Object[] { 1, 2, 3, 3, 4 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new int[] { 1, 2, 3, 3, 4 }))
nova chamada: assertFalse(jsonSchema.isValid(new int[] { 1, 2, 3, 3, 4 }), "Era esperado falso, mas " + result1879 + " <jsonSchema.isValid(new int[] { 1, 2, 3, 3, 4 })> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new Object[] {}))
nova chamada: assertFalse(jsonSchema.isValid(new Object[] {}), "Era esperado falso, mas " + result1880 + " <jsonSchema.isValid(new Object[] {})> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1))
nova chamada: assertFalse(jsonSchema.isValid(1), "Era esperado falso, mas " + result1881 + " <jsonSchema.isValid(1)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1L))
nova chamada: assertFalse(jsonSchema.isValid(1L), "Era esperado falso, mas " + result1882 + " <jsonSchema.isValid(1L)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid('A'))
nova chamada: assertFalse(jsonSchema.isValid('A'), "Era esperado falso, mas " + result1883 + " <jsonSchema.isValid('A')> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1F))
nova chamada: assertFalse(jsonSchema.isValid(1F), "Era esperado falso, mas " + result1884 + " <jsonSchema.isValid(1F)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(1D))
nova chamada: assertFalse(jsonSchema.isValid(1D), "Era esperado falso, mas " + result1885 + " <jsonSchema.isValid(1D)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Byte.MIN_VALUE))
nova chamada: assertFalse(jsonSchema.isValid(Byte.MIN_VALUE), "Era esperado falso, mas " + result1886 + " <jsonSchema.isValid(Byte.MIN_VALUE)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(Short.MIN_VALUE))
nova chamada: assertFalse(jsonSchema.isValid(Short.MIN_VALUE), "Era esperado falso, mas " + result1887 + " <jsonSchema.isValid(Short.MIN_VALUE)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(BigDecimal.ZERO))
nova chamada: assertFalse(jsonSchema.isValid(BigDecimal.ZERO), "Era esperado falso, mas " + result1888 + " <jsonSchema.isValid(BigDecimal.ZERO)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(BigInteger.ZERO))
nova chamada: assertFalse(jsonSchema.isValid(BigInteger.ZERO), "Era esperado falso, mas " + result1889 + " <jsonSchema.isValid(BigInteger.ZERO)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(true))
nova chamada: assertFalse(jsonSchema.isValid(true), "Era esperado falso, mas " + result1890 + " <jsonSchema.isValid(true)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSONSchema.Type.Object))
nova chamada: assertFalse(jsonSchema.isValid(JSONSchema.Type.Object), "Era esperado falso, mas " + result1891 + " <jsonSchema.isValid(JSONSchema.Type.Object)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(JSONObject.of()).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(JSONObject.of()).isSuccess(), "Era esperado falso, mas " + result1892 + " <jsonSchema.validate(JSONObject.of()).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(JSONObject.of().toJavaObject(Bean1.class)).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(JSONObject.of().toJavaObject(Bean1.class)).isSuccess(), "Era esperado falso, mas " + result1893 + " <jsonSchema.validate(JSONObject.of().toJavaObject(Bean1.class)).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(new Bean()).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(new Bean()).isSuccess(), "Era esperado falso, mas " + result1894 + " <jsonSchema.validate(new Bean()).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.validate(JSON.parseObject("{ \"number\": \"1600\", \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }")).isSuccess())
nova chamada: assertFalse(jsonSchema.validate(JSON.parseObject("{ \"number\": \"1600\", \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\" }")).isSuccess(), "Era esperado falso, mas " + result1895 + " <jsonSchema.validate(JSON.parseObject('{ \'number\': \'1600\', \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\' }')).isSuccess()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"S_0\": 42 }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"S_0\": 42 }").isValid(jsonSchema), "Era esperado falso, mas " + result1896 + " <JSON.parseObject('{ \'S_0\': 42 }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"I_42\": \"This is a string\" }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"I_42\": \"This is a string\" }").isValid(jsonSchema), "Era esperado falso, mas " + result1897 + " <JSON.parseObject('{ \'I_42\': \'This is a string\' }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }").isValid(jsonSchema), "Era esperado falso, mas " + result1898 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\', \'direction\': \'NW\' }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"office_number\": 201 }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"office_number\": 201 }").isValid(jsonSchema), "Era esperado falso, mas " + result1899 + " <JSON.parseObject('{ \'number\': 1600, \'street_name\': \'Pennsylvania\', \'street_type\': \'Avenue\', \'office_number\': 201 }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "}").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "}").isValid(jsonSchema), "Era esperado falso, mas " + result1900 + " <JSON.parseObject('{\n' + '  \'name\': \'William Shakespeare\',\n' + '  \'address\': \'Henley Street, Stratford-upon-Avon, Warwickshire, England\',\n' + '}').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"email\": null\n" + "}\n").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{\n" + "  \"name\": \"William Shakespeare\",\n" + "  \"address\": \"Henley Street, Stratford-upon-Avon, Warwickshire, England\",\n" + "  \"email\": null\n" + "}\n").isValid(jsonSchema), "Era esperado falso, mas " + result1901 + " <JSON.parseObject('{\n' + '  \'name\': \'William Shakespeare\',\n' + '  \'address\': \'Henley Street, Stratford-upon-Avon, Warwickshire, England\',\n' + '  \'email\': null\n' + '}\n').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\n" + "  \"001 invalid\": \"value\"\n" + "}").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{\n" + "  \"001 invalid\": \"value\"\n" + "}").isValid(jsonSchema), "Era esperado falso, mas " + result1902 + " <JSON.parseObject('{\n' + '  \'001 invalid\': \'value\'\n' + '}').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{}").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{}").isValid(jsonSchema), "Era esperado falso, mas " + result1903 + " <JSON.parseObject('{}').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"a\": 0 }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"a\": 0 }").isValid(jsonSchema), "Era esperado falso, mas " + result1904 + " <JSON.parseObject('{ \'a\': 0 }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3 }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3 }").isValid(jsonSchema), "Era esperado falso, mas " + result1905 + " <JSON.parseObject('{ \'a\': 0, \'b\': 1, \'c\': 2, \'d\': 3 }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{ \"country\": \"Canada\" }").isValid(jsonSchema))
nova chamada: assertFalse(JSON.parseObject("{ \"country\": \"Canada\" }").isValid(jsonSchema), "Era esperado falso, mas " + result1906 + " <JSON.parseObject('{ \'country\': \'Canada\' }').isValid(jsonSchema)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(3))
nova chamada: assertFalse(jsonSchema.isValid(3), "Era esperado falso, mas " + result1907 + " <jsonSchema.isValid(3)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(3.0F))
nova chamada: assertFalse(jsonSchema.isValid(3.0F), "Era esperado falso, mas " + result1908 + " <jsonSchema.isValid(3.0F)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(3.0D))
nova chamada: assertFalse(jsonSchema.isValid(3.0D), "Era esperado falso, mas " + result1909 + " <jsonSchema.isValid(3.0D)> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new BigDecimal("3.0")))
nova chamada: assertFalse(jsonSchema.isValid(new BigDecimal("3.0")), "Era esperado falso, mas " + result1910 + " <jsonSchema.isValid(new BigDecimal('3.0'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(new BigInteger("3")))
nova chamada: assertFalse(jsonSchema.isValid(new BigInteger("3")), "Era esperado falso, mas " + result1911 + " <jsonSchema.isValid(new BigInteger('3'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")), "Era esperado falso, mas " + result1912 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)), "Era esperado falso, mas " + result1913 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555\n' + '}', Bean2.class))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")), "Era esperado falso, mas " + result1914 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"billing_address\": \"555 Debtor's Lane\"\n" + "}")), "Era esperado falso, mas " + result1915 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'billing_address\': \'555 Debtor's Lane\'\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}")), "Era esperado falso, mas " + result1916 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"name\": \"John Doe\",\n" + "  \"credit_card\": 5555555555555555\n" + "}", Bean2.class)), "Era esperado falso, mas " + result1917 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'name\': \'John Doe\',\n' + '  \'credit_card\': 5555555555555555\n' + '}', Bean2.class))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")), "Era esperado falso, mas " + result1918 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'10000\'\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")), "Era esperado falso, mas " + result1919 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}", Bean3.class)))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}", Bean3.class)), "Era esperado falso, mas " + result1920 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'10000\'\n' + '}', Bean3.class))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}", Bean3.class)), "Era esperado falso, mas " + result1921 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}', Bean3.class))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"24 Sussex Drive\",\n" + "  \"country\": \"Canada\",\n" + "  \"postal_code\": \"10000\"\n" + "}")), "Era esperado falso, mas " + result1922 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'24 Sussex Drive\',\n' + '  \'country\': \'Canada\',\n' + '  \'postal_code\': \'10000\'\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"street_address\": \"1600 Pennsylvania Avenue NW\",\n" + "  \"postal_code\": \"K1M 1M4\"\n" + "}")), "Era esperado falso, mas " + result1923 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'street_address\': \'1600 Pennsylvania Avenue NW\',\n' + '  \'postal_code\': \'K1M 1M4\'\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")), "Era esperado falso, mas " + result1924 + " <jsonSchema.isValid(JSON.parse('\'too long\''))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("2")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("2")), "Era esperado falso, mas " + result1925 + " <jsonSchema.isValid(JSON.parse('2'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"foo\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"foo\"")), "Era esperado falso, mas " + result1926 + " <jsonSchema.isValid(JSON.parse('\'foo\''))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"too long\"")), "Era esperado falso, mas " + result1927 + " <jsonSchema.isValid(JSON.parse('\'too long\''))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("-5")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("-5")), "Era esperado falso, mas " + result1928 + " <jsonSchema.isValid(JSON.parse('-5'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("2")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("2")), "Era esperado falso, mas " + result1929 + " <jsonSchema.isValid(JSON.parse('2'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("15")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("15")), "Era esperado falso, mas " + result1930 + " <jsonSchema.isValid(JSON.parse('15'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")), "Era esperado falso, mas " + result1931 + " <jsonSchema.isValid(JSON.parse('\'I am a string\''))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}")), "Era esperado falso, mas " + result1932 + " <jsonSchema.isValid(JSON.parse('{\n' + '  \'restaurantType\': \'sit-down\',\n' + '  \'total\': 16.99\n' + '}'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}", Bean4.class)))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parseObject("{\n" + "  \"restaurantType\": \"sit-down\",\n" + "  \"total\": 16.99\n" + "}", Bean4.class)), "Era esperado falso, mas " + result1933 + " <jsonSchema.isValid(JSON.parseObject('{\n' + '  \'restaurantType\': \'sit-down\',\n' + '  \'total\': 16.99\n' + '}', Bean4.class))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"hello\" ]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"hello\" ]")), "Era esperado falso, mas " + result1934 + " <jsonSchema.isValid(JSON.parse('[ 1, \'hello\' ]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, null ]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, null ]")), "Era esperado falso, mas " + result1935 + " <jsonSchema.isValid(JSON.parse('[ 1, null ]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"foo\", true ]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[ 1, \"foo\", true ]")), "Era esperado falso, mas " + result1936 + " <jsonSchema.isValid(JSON.parse('[ 1, \'foo\', true ]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("1.1")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("1.1")), "Era esperado falso, mas " + result1937 + " <jsonSchema.isValid(JSON.parse('1.1'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{\"percent\": \"aoeu\"}")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{\"percent\": \"aoeu\"}")), "Era esperado falso, mas " + result1938 + " <jsonSchema.isValid(JSON.parse('{\'percent\': \'aoeu\'}'))> é verdadeiro ")
chamada antiga: assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString())
nova chamada: assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString(), "Era esperado valores iguais, mas  '[{\'名称\':\'脆皮青豆\',\'配料\':[\'豌豆\',\'棕榈油\',\'白砂糖\',\'食用盐\',\'玉米淀粉\']}]' é diferente de " + result1939 + " <JSONPath.extract(chineseKeyString, '$[?(@.名称 = '脆皮青豆')]').toString()>")
chamada antiga: assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString())
nova chamada: assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString(), "Era esperado valores iguais, mas  '[{\'name\':\'脆皮青豆\',\'配料\':[\'豌豆\',\'棕榈油\',\'白砂糖\',\'食用盐\',\'玉米淀粉\']}]' é diferente de " + result1940 + " <JSONPath.extract(normalKeyString, '$[?(@.name = '脆皮青豆')]').toString()>")
chamada antiga: assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty())
nova chamada: assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty(), "Era esperado falso, mas " + result1941 + " <((List) JSONPath.extract(chineseKeyString, '$[?(@.名称 = '脆皮青豆')]')).isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty())
nova chamada: assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty(), "Era esperado falso, mas " + result1942 + " <((List) JSONPath.extract(normalKeyString, '$[?(@.name = '脆皮青豆')]')).isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString())
nova chamada: assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'dependencies\':[{\'values\':[]}]}' é diferente de " + result1943 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\"values\":[]}", jsonObject.toString())
nova chamada: assertEquals("{\"values\":[]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result1944 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'time\':' + m.time.atZone(zoneId).toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli())
nova chamada: assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result1945 + " <m.time.atZone(zoneId).toInstant().toEpochMilli()> é diferente de " + result1946 + " <m1.time.atZone(zoneId).toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'ztime\':' + m.ztime.toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
nova chamada: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result1947 + " <m.ztime.toInstant().toEpochMilli()> é diferente de " + result1948 + " <m1.ztime.toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'time1\':' + m.time1.atZone(zoneId).toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond())
nova chamada: assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond(), "Era esperado valores iguais, mas " + result1949 + " <m.time1.atZone(zoneId).toEpochSecond()> é diferente de " + result1950 + " <m1.time1.atZone(zoneId).toEpochSecond()>")
chamada antiga: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'ztime1\':' + m.ztime1.toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
nova chamada: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond(), "Era esperado valores iguais, mas " + result1951 + " <m.ztime1.toEpochSecond()> é diferente de " + result1952 + " <m1.ztime1.toEpochSecond()>")
chamada antiga: assertEquals("{\"date\":" + m.date.getTime() + "}", str)
nova chamada: assertEquals("{\"date\":" + m.date.getTime() + "}", str, "Era esperado valores iguais, mas  '{\'date\':' + m.date.getTime() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date.getTime(), m1.date.getTime())
nova chamada: assertEquals(m.date.getTime(), m1.date.getTime(), "Era esperado valores iguais, mas " + result1953 + " <m.date.getTime()> é diferente de " + result1954 + " <m1.date.getTime()>")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
nova chamada: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2, "Era esperado valores iguais, mas " + result1955 + " <LocalDateTime.of(2019, 7, 14, 12, 13, 14)> é diferente de " + " m.time2")
chamada antiga: assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"time\":" + m.time.atZone(zoneId).toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'time\':' + m.time.atZone(zoneId).toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli())
nova chamada: assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result1956 + " <m.time.atZone(zoneId).toInstant().toEpochMilli()> é diferente de " + result1957 + " <m1.time.atZone(zoneId).toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'ztime\':' + m.ztime.toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
nova chamada: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result1958 + " <m.ztime.toInstant().toEpochMilli()> é diferente de " + result1959 + " <m1.ztime.toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"time1\":" + m.time1.atZone(zoneId).toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'time1\':' + m.time1.atZone(zoneId).toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond())
nova chamada: assertEquals(m.time1.atZone(zoneId).toEpochSecond(), m1.time1.atZone(zoneId).toEpochSecond(), "Era esperado valores iguais, mas " + result1960 + " <m.time1.atZone(zoneId).toEpochSecond()> é diferente de " + result1961 + " <m1.time1.atZone(zoneId).toEpochSecond()>")
chamada antiga: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'ztime1\':' + m.ztime1.toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
nova chamada: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond(), "Era esperado valores iguais, mas " + result1962 + " <m.ztime1.toEpochSecond()> é diferente de " + result1963 + " <m1.ztime1.toEpochSecond()>")
chamada antiga: assertEquals("{\"date\":" + m.date.getTime() + "}", str)
nova chamada: assertEquals("{\"date\":" + m.date.getTime() + "}", str, "Era esperado valores iguais, mas  '{\'date\':' + m.date.getTime() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date.getTime(), m1.date.getTime())
nova chamada: assertEquals(m.date.getTime(), m1.date.getTime(), "Era esperado valores iguais, mas " + result1964 + " <m.date.getTime()> é diferente de " + result1965 + " <m1.date.getTime()>")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
nova chamada: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2, "Era esperado valores iguais, mas " + result1966 + " <LocalDateTime.of(2019, 7, 14, 12, 13, 14)> é diferente de " + " m.time2")
chamada antiga: assertEquals(Long.toString(millis), JSON.toJSONString(new Date(millis), "millis"))
nova chamada: assertEquals(Long.toString(millis), JSON.toJSONString(new Date(millis), "millis"), "Era esperado valores iguais, mas " + result1967 + " <Long.toString(millis)> é diferente de " + result1968 + " <JSON.toJSONString(new Date(millis), 'millis')>")
chamada antiga: assertEquals(Long.toString(millis / 1000), JSON.toJSONString(new Date(millis), "unixtime"))
nova chamada: assertEquals(Long.toString(millis / 1000), JSON.toJSONString(new Date(millis), "unixtime"), "Era esperado valores iguais, mas " + result1969 + " <Long.toString(millis / 1000)> é diferente de " + result1970 + " <JSON.toJSONString(new Date(millis), 'unixtime')>")
chamada antiga: assertEquals(GeometryCollection.class, geometry.getClass())
nova chamada: assertEquals(GeometryCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  GeometryCollection.class é diferente de " + result1971 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'GeometryCollection\',\'geometries\':[{\'type\':\'Point\',\'coordinates\':[100.0,0.0]},{\'type\':\'LineString\',\'coordinates\':[[101.0,0.0],[102.0,1.0]]}]}' é diferente de " + result1972 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1973 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Point.class, geometry.getClass())
nova chamada: assertEquals(Point.class, geometry.getClass(), "Era esperado valores iguais, mas  Point.class é diferente de " + result1974 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Point\',\'coordinates\':[100.0,0.0]}' é diferente de " + result1975 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1976 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Polygon.class, geometry.getClass())
nova chamada: assertEquals(Polygon.class, geometry.getClass(), "Era esperado valores iguais, mas  Polygon.class é diferente de " + result1977 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}' é diferente de " + result1978 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1979 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPolygon.class, geometry.getClass())
nova chamada: assertEquals(MultiPolygon.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPolygon.class é diferente de " + result1980 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPolygon\',\'coordinates\':[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}' é diferente de " + result1981 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1982 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(FeatureCollection.class, geometry.getClass())
nova chamada: assertEquals(FeatureCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  FeatureCollection.class é diferente de " + result1983 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'FeatureCollection\',\'features\':[{\'type\':\'Feature\',\'properties\':{\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Point\',\'coordinates\':[102.0,0.5]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'0.0\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'LineString\',\'coordinates\':[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'{\\\'this\\\':\\\'that\\\'}\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}' é diferente de " + result1984 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1985 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiLineString.class, geometry.getClass())
nova chamada: assertEquals(MultiLineString.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiLineString.class é diferente de " + result1986 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiLineString\',\'coordinates\':[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}' é diferente de " + result1987 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1988 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(LineString.class, geometry.getClass())
nova chamada: assertEquals(LineString.class, geometry.getClass(), "Era esperado valores iguais, mas  LineString.class é diferente de " + result1989 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'LineString\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result1990 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1991 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result1992 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'bbox\':[-10.0,-10.0,10.0,10.0],\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result1993 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1994 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result1995 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'id\':\'f2\',\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result1996 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result1997 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPoint.class, geometry.getClass())
nova chamada: assertEquals(MultiPoint.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPoint.class é diferente de " + result1998 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPoint\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result1999 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result2000 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(json, json1)
nova chamada: assertEquals(json, json1, "Era esperado valores iguais, mas  json é diferente de " + " json1")
chamada antiga: assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json)
nova chamada: assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json, "Era esperado valores iguais, mas  '{\'canRefuse\':true,\'code\':3,\'first\':false,\'last\':false,\'name\':\'FINAL_TRAIL\',\'nameCn\':\'公益委员会/理事会/理事长审核\'}' é diferente de " + " json")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow)
nova chamada: assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow, "Era esperado valores iguais, mas  '{\'v\':3.4028234663852886E38}' é diferente de " + " sFloatOverflow")
chamada antiga: assertEquals(3.4028235E38F, floatVal.v)
nova chamada: assertEquals(3.4028235E38F, floatVal.v, "Era esperado valores iguais, mas  3.4028235E38F é diferente de " + " floatVal.v")
chamada antiga: assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"))
nova chamada: assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"), "Era esperado valores iguais, mas  floatVal.v é diferente de " + result2001 + " <Float.parseFloat('3.4028234663852886E38')>")
chamada antiga: assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow)
nova chamada: assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow, "Era esperado valores iguais, mas  '{\'v\':6.805646932770577E38}' é diferente de " + " sFloatOverflow")
chamada antiga: assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v)
nova chamada: assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v, "Era esperado valores iguais, mas " + result2002 + " <Float.parseFloat('6.805646932770577E38')> é diferente de " + " floatVal.v")
chamada antiga: assertEquals("{\"_id\":1001,\"id\":1002}", json)
nova chamada: assertEquals("{\"_id\":1001,\"id\":1002}", json, "Era esperado valores iguais, mas  '{\'_id\':1001,\'id\':1002}' é diferente de " + " json")
chamada antiga: assertEquals(json, JSON.toJSONString(model1))
nova chamada: assertEquals(json, JSON.toJSONString(model1), "Era esperado valores iguais, mas  json é diferente de " + result2003 + " <JSON.toJSONString(model1)>")
chamada antiga: assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
nova chamada: assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json, "Era esperado valores iguais, mas  '{\'time1\':' + t1 + ',\'time2\':\'2017-09-22 15:08:56\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"time1\":" + JSON.toJSONString(time1) + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
nova chamada: assertEquals("{\"time1\":" + JSON.toJSONString(time1) + ",\"time2\":\"2017-09-22 15:08:56\"}", json, "Era esperado valores iguais, mas  '{\'time1\':' + JSON.toJSONString(time1) + ',\'time2\':\'2017-09-22 15:08:56\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json)
nova chamada: assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json, "Era esperado valores iguais, mas  '{\'time1\':\'' + stime1 + '\',\'time2\':\'' + stime2 + '\'}' é diferente de " + " json")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(1, resource.ret)
nova chamada: assertEquals(1, resource.ret, "Era esperado valores iguais, mas  1 é diferente de " + " resource.ret")
chamada antiga: Assertions.assertEquals("ok", resource.message)
nova chamada: assertEquals("ok", resource.message, "Era esperado valores iguais, mas  'ok' é diferente de " + " resource.message")
chamada antiga: Assertions.assertEquals(2, data.size())
nova chamada: assertEquals(2, data.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2004 + " <data.size()>")
chamada antiga: Assertions.assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId)
nova chamada: assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId, "Era esperado valores iguais, mas  '11c53f541dee4f5bbc4f75f99002278c' é diferente de " + " app1.appId")
chamada antiga: assertEquals(0, model.hasSth)
nova chamada: assertEquals(0, model.hasSth, "Era esperado valores iguais, mas  0 é diferente de " + " model.hasSth")
chamada antiga: assertEquals(3, model.id)
nova chamada: assertEquals(3, model.id, "Era esperado valores iguais, mas  3 é diferente de " + " model.id")
chamada antiga: assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p))
nova chamada: assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p), "Era esperado valores iguais, mas  '{\'id\':\'001\',\'name\':\'顾客\'}' é diferente de " + result2005 + " <JSON.toJSONString(p)>")
chamada antiga: assertEquals(json, json1)
nova chamada: assertEquals(json, json1, "Era esperado valores iguais, mas  json é diferente de " + " json1")
chamada antiga: assertEquals("{\"MD5\":\"xxx\"}", json)
nova chamada: assertEquals("{\"MD5\":\"xxx\"}", json, "Era esperado valores iguais, mas  '{\'MD5\':\'xxx\'}' é diferente de " + " json")
chamada antiga: assertEquals(1, s0.id)
nova chamada: assertEquals(1, s0.id, "Era esperado valores iguais, mas  1 é diferente de " + " s0.id")
chamada antiga: assertEquals(22, s0.age)
nova chamada: assertEquals(22, s0.age, "Era esperado valores iguais, mas  22 é diferente de " + " s0.age")
chamada antiga: assertEquals("hello", s0.name)
nova chamada: assertEquals("hello", s0.name, "Era esperado valores iguais, mas  'hello' é diferente de " + " s0.name")
chamada antiga: assertEquals(1, s1.id)
nova chamada: assertEquals(1, s1.id, "Era esperado valores iguais, mas  1 é diferente de " + " s1.id")
chamada antiga: assertEquals(22, s1.age)
nova chamada: assertEquals(22, s1.age, "Era esperado valores iguais, mas  22 é diferente de " + " s1.age")
chamada antiga: assertEquals("hhh", s1.name)
nova chamada: assertEquals("hhh", s1.name, "Era esperado valores iguais, mas  'hhh' é diferente de " + " s1.name")
chamada antiga: assertNull(model.flag)
nova chamada: assertNull(model.flag, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag)
nova chamada: assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag, "Era esperado objetos iguais, mas  BuFlag.IS_NEED_CHECK_IDENTITY é diferente de " + " model.flag")
chamada antiga: assertEquals(str, JSON.toJSONString(resp1))
nova chamada: assertEquals(str, JSON.toJSONString(resp1), "Era esperado valores iguais, mas  str é diferente de " + result2006 + " <JSON.toJSONString(resp1)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(resp2))
nova chamada: assertEquals(str2, JSON.toJSONString(resp2), "Era esperado valores iguais, mas  str2 é diferente de " + result2007 + " <JSON.toJSONString(resp2)>")
chamada antiga: assertFalse(ok.v)
nova chamada: assertFalse(ok.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(bad.v)
nova chamada: assertFalse(bad.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("\"2018-08-31 15:26:37\"", json)
nova chamada: assertEquals("\"2018-08-31 15:26:37\"", json, "Era esperado valores iguais, mas  '\'2018-08-31 15:26:37\'' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertEquals("string", m2.getString())
nova chamada: assertEquals("string", m2.getString(), "Era esperado valores iguais, mas  'string' é diferente de " + result2008 + " <m2.getString()>")
chamada antiga: assertEquals(false, m2.isaBoolean())
nova chamada: assertEquals(false, m2.isaBoolean(), "Era esperado valores iguais, mas  false é diferente de " + result2009 + " <m2.isaBoolean()>")
chamada antiga: assertEquals(true, m2.getaBoolean2().booleanValue())
nova chamada: assertEquals(true, m2.getaBoolean2().booleanValue(), "Era esperado valores iguais, mas  true é diferente de " + result2010 + " <m2.getaBoolean2().booleanValue()>")
chamada antiga: assertEquals(0, m2.getAnInt())
nova chamada: assertEquals(0, m2.getAnInt(), "Era esperado valores iguais, mas  0 é diferente de " + result2011 + " <m2.getAnInt()>")
chamada antiga: assertEquals(888, m2.getInteger().intValue())
nova chamada: assertEquals(888, m2.getInteger().intValue(), "Era esperado valores iguais, mas  888 é diferente de " + result2012 + " <m2.getInteger().intValue()>")
chamada antiga: assertEquals(0, m2.getaShort())
nova chamada: assertEquals(0, m2.getaShort(), "Era esperado valores iguais, mas  0 é diferente de " + result2013 + " <m2.getaShort()>")
chamada antiga: assertEquals(88, m2.getaShort2().shortValue())
nova chamada: assertEquals(88, m2.getaShort2().shortValue(), "Era esperado valores iguais, mas  88 é diferente de " + result2014 + " <m2.getaShort2().shortValue()>")
chamada antiga: assertEquals('\u0000', m2.getaChar())
nova chamada: assertEquals('\u0000', m2.getaChar(), "Era esperado valores iguais, mas  '\u0000' é diferente de " + result2015 + " <m2.getaChar()>")
chamada antiga: assertEquals('J', m2.getCharacter().charValue())
nova chamada: assertEquals('J', m2.getCharacter().charValue(), "Era esperado valores iguais, mas  'J' é diferente de " + result2016 + " <m2.getCharacter().charValue()>")
chamada antiga: assertEquals(0, m2.getaByte())
nova chamada: assertEquals(0, m2.getaByte(), "Era esperado valores iguais, mas  0 é diferente de " + result2017 + " <m2.getaByte()>")
chamada antiga: assertEquals(8, m2.getaByte2().byteValue())
nova chamada: assertEquals(8, m2.getaByte2().byteValue(), "Era esperado valores iguais, mas  8 é diferente de " + result2018 + " <m2.getaByte2().byteValue()>")
chamada antiga: assertEquals(0, m2.getaLong())
nova chamada: assertEquals(0, m2.getaLong(), "Era esperado valores iguais, mas  0 é diferente de " + result2019 + " <m2.getaLong()>")
chamada antiga: assertEquals(8888, m2.getaLong2().longValue())
nova chamada: assertEquals(8888, m2.getaLong2().longValue(), "Era esperado valores iguais, mas  8888 é diferente de " + result2020 + " <m2.getaLong2().longValue()>")
chamada antiga: assertEquals("0.0", "" + m2.getaFloat())
nova chamada: assertEquals("0.0", "" + m2.getaFloat(), "Era esperado valores iguais, mas  '0.0' é diferente de " + " '' + m2.getaFloat()")
chamada antiga: assertEquals("8.8", "" + m2.getaFloat2())
nova chamada: assertEquals("8.8", "" + m2.getaFloat2(), "Era esperado valores iguais, mas  '8.8' é diferente de " + " '' + m2.getaFloat2()")
chamada antiga: assertEquals("0.0", "" + m2.getaDouble())
nova chamada: assertEquals("0.0", "" + m2.getaDouble(), "Era esperado valores iguais, mas  '0.0' é diferente de " + " '' + m2.getaDouble()")
chamada antiga: assertEquals("88.88", "" + m2.getaDouble2())
nova chamada: assertEquals("88.88", "" + m2.getaDouble2(), "Era esperado valores iguais, mas  '88.88' é diferente de " + " '' + m2.getaDouble2()")
chamada antiga: assertEquals("test", m2.getString())
nova chamada: assertEquals("test", m2.getString(), "Era esperado valores iguais, mas  'test' é diferente de " + result2021 + " <m2.getString()>")
chamada antiga: assertEquals(true, m2.isaBoolean())
nova chamada: assertEquals(true, m2.isaBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result2022 + " <m2.isaBoolean()>")
chamada antiga: assertEquals(false, m2.getaBoolean2().booleanValue())
nova chamada: assertEquals(false, m2.getaBoolean2().booleanValue(), "Era esperado valores iguais, mas  false é diferente de " + result2023 + " <m2.getaBoolean2().booleanValue()>")
chamada antiga: assertEquals(888, m2.getAnInt())
nova chamada: assertEquals(888, m2.getAnInt(), "Era esperado valores iguais, mas  888 é diferente de " + result2024 + " <m2.getAnInt()>")
chamada antiga: assertEquals(999, m2.getInteger().intValue())
nova chamada: assertEquals(999, m2.getInteger().intValue(), "Era esperado valores iguais, mas  999 é diferente de " + result2025 + " <m2.getInteger().intValue()>")
chamada antiga: assertEquals(88, m2.getaShort())
nova chamada: assertEquals(88, m2.getaShort(), "Era esperado valores iguais, mas  88 é diferente de " + result2026 + " <m2.getaShort()>")
chamada antiga: assertEquals(99, m2.getaShort2().shortValue())
nova chamada: assertEquals(99, m2.getaShort2().shortValue(), "Era esperado valores iguais, mas  99 é diferente de " + result2027 + " <m2.getaShort2().shortValue()>")
chamada antiga: assertEquals('J', m2.getaChar())
nova chamada: assertEquals('J', m2.getaChar(), "Era esperado valores iguais, mas  'J' é diferente de " + result2028 + " <m2.getaChar()>")
chamada antiga: assertEquals('C', m2.getCharacter().charValue())
nova chamada: assertEquals('C', m2.getCharacter().charValue(), "Era esperado valores iguais, mas  'C' é diferente de " + result2029 + " <m2.getCharacter().charValue()>")
chamada antiga: assertEquals(8, m2.getaByte())
nova chamada: assertEquals(8, m2.getaByte(), "Era esperado valores iguais, mas  8 é diferente de " + result2030 + " <m2.getaByte()>")
chamada antiga: assertEquals(9, m2.getaByte2().byteValue())
nova chamada: assertEquals(9, m2.getaByte2().byteValue(), "Era esperado valores iguais, mas  9 é diferente de " + result2031 + " <m2.getaByte2().byteValue()>")
chamada antiga: assertEquals(8888, m2.getaLong())
nova chamada: assertEquals(8888, m2.getaLong(), "Era esperado valores iguais, mas  8888 é diferente de " + result2032 + " <m2.getaLong()>")
chamada antiga: assertEquals(9999, m2.getaLong2().longValue())
nova chamada: assertEquals(9999, m2.getaLong2().longValue(), "Era esperado valores iguais, mas  9999 é diferente de " + result2033 + " <m2.getaLong2().longValue()>")
chamada antiga: assertEquals("8.8", "" + m2.getaFloat())
nova chamada: assertEquals("8.8", "" + m2.getaFloat(), "Era esperado valores iguais, mas  '8.8' é diferente de " + " '' + m2.getaFloat()")
chamada antiga: assertEquals("9.9", "" + m2.getaFloat2())
nova chamada: assertEquals("9.9", "" + m2.getaFloat2(), "Era esperado valores iguais, mas  '9.9' é diferente de " + " '' + m2.getaFloat2()")
chamada antiga: assertEquals("88.88", "" + m2.getaDouble())
nova chamada: assertEquals("88.88", "" + m2.getaDouble(), "Era esperado valores iguais, mas  '88.88' é diferente de " + " '' + m2.getaDouble()")
chamada antiga: assertEquals("99.99", "" + m2.getaDouble2())
nova chamada: assertEquals("99.99", "" + m2.getaDouble2(), "Era esperado valores iguais, mas  '99.99' é diferente de " + " '' + m2.getaDouble2()")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals(vo.getId(), vo2.getId())
nova chamada: assertEquals(vo.getId(), vo2.getId(), "Era esperado valores iguais, mas " + result2034 + " <vo.getId()> é diferente de " + result2035 + " <vo2.getId()>")
chamada antiga: assertEquals(vo.getName(), vo2.getName())
nova chamada: assertEquals(vo.getName(), vo2.getName(), "Era esperado valores iguais, mas " + result2036 + " <vo.getName()> é diferente de " + result2037 + " <vo2.getName()>")
chamada antiga: assertEquals("[true,\"wenshao\"]", text)
nova chamada: assertEquals("[true,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[true,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[123.0,\"wenshao\"]", text)
nova chamada: assertEquals("[123.0,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123.0,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertTrue(vo.id == vo2.id)
nova chamada: assertTrue(vo.id == vo2.id, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[123.0,\"wenshao\"]", text)
nova chamada: assertEquals("[123.0,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123.0,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertTrue(vo.id == vo2.id)
nova chamada: assertTrue(vo.id == vo2.id, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[\"x\",\"wenshao\"]", text)
nova chamada: assertEquals("[\"x\",\"wenshao\"]", text, "Era esperado valores iguais, mas  '[\'x\',\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[123.0,\"wenshao\"]", text)
nova chamada: assertEquals("[123.0,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123.0,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertTrue(vo.id == vo2.id)
nova chamada: assertTrue(vo.id == vo2.id, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertNotNull(exception)
nova chamada: assertNotNull(exception, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(NullPointerException.class, exception.getCause().getClass())
nova chamada: assertEquals(NullPointerException.class, exception.getCause().getClass(), "Era esperado valores iguais, mas  NullPointerException.class é diferente de " + result2038 + " <exception.getCause().getClass()>")
chamada antiga: assertEquals("name", c1.name)
nova chamada: assertEquals("name", c1.name, "Era esperado valores iguais, mas  'name' é diferente de " + " c1.name")
chamada antiga: assertEquals(1, c1.id)
nova chamada: assertEquals(1, c1.id, "Era esperado valores iguais, mas  1 é diferente de " + " c1.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("name", c1.name)
nova chamada: assertEquals("name", c1.name, "Era esperado valores iguais, mas  'name' é diferente de " + " c1.name")
chamada antiga: assertEquals(1, c1.id)
nova chamada: assertEquals(1, c1.id, "Era esperado valores iguais, mas  1 é diferente de " + " c1.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("2", o.data.get(1))
nova chamada: assertEquals("2", o.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result2039 + " <o.data.get(1)>")
chamada antiga: assertEquals("2", o.data.get(1))
nova chamada: assertEquals("2", o.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result2040 + " <o.data.get(1)>")
chamada antiga: assertEquals("2", object.data.get(1))
nova chamada: assertEquals("2", object.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result2041 + " <object.data.get(1)>")
chamada antiga: assertEquals(1, a.a)
nova chamada: assertEquals(1, a.a, "Era esperado valores iguais, mas  1 é diferente de " + " a.a")
chamada antiga: assertEquals(1, count.intValue())
nova chamada: assertEquals(1, count.intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result2042 + " <count.intValue()>")
chamada antiga: assertEquals(1, b.a)
nova chamada: assertEquals(1, b.a, "Era esperado valores iguais, mas  1 é diferente de " + " b.a")
chamada antiga: assertEquals(2, count.intValue())
nova chamada: assertEquals(2, count.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2043 + " <count.intValue()>")
chamada antiga: assertEquals(1, a.a)
nova chamada: assertEquals(1, a.a, "Era esperado valores iguais, mas  1 é diferente de " + " a.a")
chamada antiga: assertEquals(1, count.intValue())
nova chamada: assertEquals(1, count.intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result2044 + " <count.intValue()>")
chamada antiga: assertEquals(1, b.a)
nova chamada: assertEquals(1, b.a, "Era esperado valores iguais, mas  1 é diferente de " + " b.a")
chamada antiga: assertEquals(2, count.intValue())
nova chamada: assertEquals(2, count.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2045 + " <count.intValue()>")
chamada antiga: assertEquals("{\"type\":\"TypeA\"}", text)
nova chamada: assertEquals("{\"type\":\"TypeA\"}", text, "Era esperado valores iguais, mas  '{\'type\':\'TypeA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'REQ_NO\':\'123\'}' é diferente de " + result2046 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, "iso8601"))
nova chamada: assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, "iso8601"), "Era esperado valores iguais, mas  '\'2017-06-29T10:36:30+08:00\'' é diferente de " + result2047 + " <JSON.toJSONString(date, 'iso8601')>")
chamada antiga: assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, "iso8601"))
nova chamada: assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, "iso8601"), "Era esperado valores iguais, mas  '\'2017-08-15T20:00:00+08:00\'' é diferente de " + result2048 + " <JSON.toJSONString(date, 'iso8601')>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2049 + " <list.size()>")
chamada antiga: assertEquals(Model.class, list.get(0).getClass())
nova chamada: assertEquals(Model.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Model.class é diferente de " + result2050 + " <list.get(0).getClass()>")
chamada antiga: assertEquals("{\"_parentId\":\"001\"}", test)
nova chamada: assertEquals("{\"_parentId\":\"001\"}", test, "Era esperado valores iguais, mas  '{\'_parentId\':\'001\'}' é diferente de " + " test")
chamada antiga: assertEquals("{\"_parentId\":\"001\"}", testB)
nova chamada: assertEquals("{\"_parentId\":\"001\"}", testB, "Era esperado valores iguais, mas  '{\'_parentId\':\'001\'}' é diferente de " + " testB")
chamada antiga: assertEquals("{\"type\":\"TypeA\"}", text)
nova chamada: assertEquals("{\"type\":\"TypeA\"}", text, "Era esperado valores iguais, mas  '{\'type\':\'TypeA\'}' é diferente de " + " text")
chamada antiga: assertEquals(123, ((JSONObject) t).getIntValue("id"))
nova chamada: assertEquals(123, ((JSONObject) t).getIntValue("id"), "Era esperado valores iguais, mas  123 é diferente de " + result2051 + " <((JSONObject) t).getIntValue('id')>")
chamada antiga: assertEquals(123, t1.id)
nova chamada: assertEquals(123, t1.id, "Era esperado valores iguais, mas  123 é diferente de " + " t1.id")
chamada antiga: assertEquals(123, t2.id)
nova chamada: assertEquals(123, t2.id, "Era esperado valores iguais, mas  123 é diferente de " + " t2.id")
chamada antiga: assertEquals("{}", test)
nova chamada: assertEquals("{}", test, "Era esperado valores iguais, mas  '{}' é diferente de " + " test")
chamada antiga: assertEquals("{\"ab\":{}}", testC)
nova chamada: assertEquals("{\"ab\":{}}", testC, "Era esperado valores iguais, mas  '{\'ab\':{}}' é diferente de " + " testC")
chamada antiga: assertEquals("{\"ab\":{}}", testD)
nova chamada: assertEquals("{\"ab\":{}}", testD, "Era esperado valores iguais, mas  '{\'ab\':{}}' é diferente de " + " testD")
chamada antiga: assertTrue(jsonString.contains("Mike"))
nova chamada: assertTrue(jsonString.contains("Mike"), "Era esperado verdadeiro, mas " + result2052 + " <jsonString.contains('Mike')> é falso")
chamada antiga: assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json)
nova chamada: assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json, "Era esperado valores iguais, mas  '[\'a\',\'b\',\'\',\'d\',\'\']' é diferente de " + " json")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(floorV2.templateId)
nova chamada: assertNotNull(floorV2.templateId, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertEquals("floorV2", floorV2.type)
nova chamada: assertEquals("floorV2", floorV2.type, "Era esperado valores iguais, mas  'floorV2' é diferente de " + " floorV2.type")
chamada antiga: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
nova chamada: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2, "Era esperado valores iguais, mas  '{\'type\':\'floorV2\',\'templateId\':\'x123\'}' é diferente de " + " json2")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertNotNull(model.getDate())
nova chamada: assertNotNull(model.getDate(), "Era esperado não nulo, mas " + result2053 + " <model.getDate()> é nulo")
chamada antiga: assertNotNull(model.date)
nova chamada: assertNotNull(model.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.date)
nova chamada: assertNotNull(model.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(floorV2.templateId)
nova chamada: assertNotNull(floorV2.templateId, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertEquals("floorV2", floorV2.type)
nova chamada: assertEquals("floorV2", floorV2.type, "Era esperado valores iguais, mas  'floorV2' é diferente de " + " floorV2.type")
chamada antiga: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
nova chamada: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2, "Era esperado valores iguais, mas  '{\'type\':\'floorV2\',\'templateId\':\'x123\'}' é diferente de " + " json2")
chamada antiga: assertEquals(e.getCode(), e1.getCode())
nova chamada: assertEquals(e.getCode(), e1.getCode(), "Era esperado valores iguais, mas " + result2054 + " <e.getCode()> é diferente de " + result2055 + " <e1.getCode()>")
chamada antiga: assertEquals(e.getMessage(), e1.getMessage())
nova chamada: assertEquals(e.getMessage(), e1.getMessage(), "Era esperado valores iguais, mas " + result2056 + " <e.getMessage()> é diferente de " + result2057 + " <e1.getMessage()>")
chamada antiga: assertEquals('c', tb1.getC())
nova chamada: assertEquals('c', tb1.getC(), "Era esperado valores iguais, mas  'c' é diferente de " + result2058 + " <tb1.getC()>")
chamada antiga: assertEquals('c', tb2.getC().charValue())
nova chamada: assertEquals('c', tb2.getC().charValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result2059 + " <tb2.getC().charValue()>")
chamada antiga: assertEquals('c', tb12.getC())
nova chamada: assertEquals('c', tb12.getC(), "Era esperado valores iguais, mas  'c' é diferente de " + result2060 + " <tb12.getC()>")
chamada antiga: assertEquals('c', tb22.getC().charValue())
nova chamada: assertEquals('c', tb22.getC().charValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result2061 + " <tb22.getC().charValue()>")
chamada antiga: assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString)
nova chamada: assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString, "Era esperado valores iguais, mas  '{\'id\':1,\'nt\':\'name\'}' é diferente de " + " jsonString")
chamada antiga: assertTrue(parsed instanceof JSONObject)
nova chamada: assertTrue(parsed instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass())
nova chamada: assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result2062 + " <((JSONObject) parsed).get('data').getClass()>")
chamada antiga: assertNotNull(result.data)
nova chamada: assertNotNull(result.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(result.data instanceof Data)
nova chamada: assertTrue(result.data instanceof Data, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(result2.data)
nova chamada: assertNotNull(result2.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(result2.data instanceof List)
nova chamada: assertTrue(result2.data instanceof List, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, result2.data.size())
nova chamada: assertEquals(0, result2.data.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2063 + " <result2.data.size()>")
chamada antiga: fail("should be failed due to error json")
nova chamada: fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'REQ_NO\':\'123\'}' é diferente de " + result2064 + " <JSON.toJSONString(model)>")
chamada antiga: assertNull(test.idType)
nova chamada: assertNull(test.idType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(test.userType)
nova chamada: assertNull(test.userType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("123", bean.getValue())
nova chamada: assertEquals("123", bean.getValue(), "Era esperado valores iguais, mas  '123' é diferente de " + result2065 + " <bean.getValue()>")
chamada antiga: assertEquals(false, bean.isBig())
nova chamada: assertEquals(false, bean.isBig(), "Era esperado valores iguais, mas  false é diferente de " + result2066 + " <bean.isBig()>")
chamada antiga: assertEquals(123, bean.getIntValue())
nova chamada: assertEquals(123, bean.getIntValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2067 + " <bean.getIntValue()>")
chamada antiga: assertEquals(true, bean.isBig())
nova chamada: assertEquals(true, bean.isBig(), "Era esperado valores iguais, mas  true é diferente de " + result2068 + " <bean.isBig()>")
chamada antiga: assertEquals(567, bean.getID())
nova chamada: assertEquals(567, bean.getID(), "Era esperado valores iguais, mas  567 é diferente de " + result2069 + " <bean.getID()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertFalse(JSONValidator.from(body).validate())
nova chamada: assertFalse(JSONValidator.from(body).validate(), "Era esperado falso, mas " + result2070 + " <JSONValidator.from(body).validate()> é verdadeiro ")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
nova chamada: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json, "Era esperado valores iguais, mas  '{\'path\':\'E:/my-code/test/test-fastjson.txt\'}' é diferente de " + " json")
chamada antiga: assertEquals(fileSystemResource.getPath(), fsr1.getPath())
nova chamada: assertEquals(fileSystemResource.getPath(), fsr1.getPath(), "Era esperado valores iguais, mas " + result2071 + " <fileSystemResource.getPath()> é diferente de " + result2072 + " <fsr1.getPath()>")
chamada antiga: assertEquals(0, fileSystemResource.getFile().length())
nova chamada: assertEquals(0, fileSystemResource.getFile().length(), "Era esperado valores iguais, mas  0 é diferente de " + result2073 + " <fileSystemResource.getFile().length()>")
chamada antiga: fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
nova chamada: fail("should be failed due to error json", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s)
nova chamada: assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s, "Era esperado valores iguais, mas  '{\'agent\':null,\'creator\':{\'account\':\'account\',\'name\':\'name\',\'workid\':\'\'},\'owner\':{\'account\':\'account\',\'name\':\'name\',\'workid\':\'\'}}' é diferente de " + " s")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
nova chamada: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json, "Era esperado valores iguais, mas  '{\'path\':\'E:/my-code/test/test-fastjson.txt\'}' é diferente de " + " json")
chamada antiga: assertEquals(fileSystemResource.getPath(), fsr1.getPath())
nova chamada: assertEquals(fileSystemResource.getPath(), fsr1.getPath(), "Era esperado valores iguais, mas " + result2074 + " <fileSystemResource.getPath()> é diferente de " + result2075 + " <fsr1.getPath()>")
chamada antiga: assertEquals(0, fileSystemResource.getFile().length())
nova chamada: assertEquals(0, fileSystemResource.getFile().length(), "Era esperado valores iguais, mas  0 é diferente de " + result2076 + " <fileSystemResource.getFile().length()>")
chamada antiga: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
nova chamada: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + v.getValue().getTime() + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
nova chamada: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + v.getValue().getTime() + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result2077 + " <v1.getValue()> é diferente de " + result2078 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result2079 + " <v1.getValue()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2080 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result2081 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2082 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result2083 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2084 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result2085 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2086 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':false}' é diferente de " + result2087 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2088 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result2089 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: Assertions.assertEquals(expectedStr, actualStr)
nova chamada: assertEquals(expectedStr, actualStr, "Era esperado valores iguais, mas  expectedStr é diferente de " + " actualStr")
chamada antiga: Assertions.assertEquals(expectedBean.getId(), actualBean.getString("id"))
nova chamada: assertEquals(expectedBean.getId(), actualBean.getString("id"), "Era esperado valores iguais, mas " + result2090 + " <expectedBean.getId()> é diferente de " + result2091 + " <actualBean.getString('id')>")
chamada antiga: Assertions.assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"))
nova chamada: assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"), "Era esperado valores iguais, mas " + result2092 + " <expectedBean.getNetValueDate()> é diferente de " + result2093 + " <actualBean.getInteger('net_value_date')>")
chamada antiga: assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text)
nova chamada: assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text, "Era esperado valores iguais, mas  '{\'userName\':\'test\',\'user_id\':1001}' é diferente de " + " text")
chamada antiga: assertEquals(1001, model2.userId)
nova chamada: assertEquals(1001, model2.userId, "Era esperado valores iguais, mas  1001 é diferente de " + " model2.userId")
chamada antiga: assertEquals("test", model2.userName)
nova chamada: assertEquals("test", model2.userName, "Era esperado valores iguais, mas  'test' é diferente de " + " model2.userName")
chamada antiga: assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text)
nova chamada: assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text, "Era esperado valores iguais, mas  '{\'userName\':\'test\',\'user_id\':\'1001\'}' é diferente de " + " text")
chamada antiga: assertEquals(1001, model2.userId)
nova chamada: assertEquals(1001, model2.userId, "Era esperado valores iguais, mas  1001 é diferente de " + " model2.userId")
chamada antiga: assertEquals("test", model2.userName)
nova chamada: assertEquals("test", model2.userName, "Era esperado valores iguais, mas  'test' é diferente de " + " model2.userName")
chamada antiga: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
nova chamada: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text, "Era esperado valores iguais, mas  '{\'endTime\':\'2017-11-14\',\'startTime\':\'2017-11-04\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
nova chamada: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text, "Era esperado valores iguais, mas  '{\'endTime\':\'2017-11-14\',\'startTime\':\'2017-11-04\'}' é diferente de " + " text")
chamada antiga: assertEquals("aa", aa1.getName())
nova chamada: assertEquals("aa", aa1.getName(), "Era esperado valores iguais, mas  'aa' é diferente de " + result2094 + " <aa1.getName()>")
chamada antiga: assertEquals("Aa", c2.getE().getClass().getSimpleName())
nova chamada: assertEquals("Aa", c2.getE().getClass().getSimpleName(), "Era esperado valores iguais, mas  'Aa' é diferente de " + result2095 + " <c2.getE().getClass().getSimpleName()>")
chamada antiga: assertEquals("aa", ((Aa) c2.getE()).getName())
nova chamada: assertEquals("aa", ((Aa) c2.getE()).getName(), "Era esperado valores iguais, mas  'aa' é diferente de " + result2096 + " <((Aa) c2.getE()).getName()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2097 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result2098 + " <JSON.toJSONString(model, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2099 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullStringAsEmpty))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullStringAsEmpty), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result2100 + " <JSON.toJSONString(model, JSONWriter.Feature.WriteNullStringAsEmpty)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2101 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result2102 + " <JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2103 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result2104 + " <JSON.toJSONString(model, JSONWriter.Feature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2105 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullBooleanAsFalse))
nova chamada: assertEquals("{\"value\":false}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullBooleanAsFalse), "Era esperado valores iguais, mas  '{\'value\':false}' é diferente de " + result2106 + " <JSON.toJSONString(model, JSONWriter.Feature.WriteNullBooleanAsFalse)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result2107 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONString(model, JSONWriter.Feature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result2108 + " <JSON.toJSONString(model, JSONWriter.Feature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{\"old_value\":\"xx\"}", json)
nova chamada: assertEquals("{\"old_value\":\"xx\"}", json, "Era esperado valores iguais, mas  '{\'old_value\':\'xx\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"old_value\":\"xx\"}", json)
nova chamada: assertEquals("{\"old_value\":\"xx\"}", json, "Era esperado valores iguais, mas  '{\'old_value\':\'xx\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"old_value\":\"xx\"}", json)
nova chamada: assertEquals("{\"old_value\":\"xx\"}", json, "Era esperado valores iguais, mas  '{\'old_value\':\'xx\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"old_value\":\"xx\"}", json)
nova chamada: assertEquals("{\"old_value\":\"xx\"}", json, "Era esperado valores iguais, mas  '{\'old_value\':\'xx\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"@type\":\"java.util.HashMap\",\"null\":{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\"}}", json)
nova chamada: assertEquals("{\"@type\":\"java.util.HashMap\",\"null\":{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\"}}", json, "Era esperado valores iguais, mas  '{\'@type\':\'java.util.HashMap\',\'null\':{\'@type\':\'com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\'}}' é diferente de " + " json")
chamada antiga: assertNotNull(newsDetail)
nova chamada: assertNotNull(newsDetail, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(138042533, person.Id)
nova chamada: assertEquals(138042533, person.Id, "Era esperado valores iguais, mas  138042533 é diferente de " + " person.Id")
chamada antiga: assertEquals("example", person.name)
nova chamada: assertEquals("example", person.name, "Era esperado valores iguais, mas  'example' é diferente de " + " person.name")
chamada antiga: assertEquals(172.0D, person.height)
nova chamada: assertEquals(172.0D, person.height, "Era esperado valores iguais, mas  172.0D é diferente de " + " person.height")
chamada antiga: assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class))
nova chamada: assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class), "Era esperado objetos iguais, mas  Size.Big é diferente de " + result2109 + " <JSON.parseObject('\'Big\'', Size.class)>")
chamada antiga: assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class))
nova chamada: assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class), "Era esperado objetos iguais, mas  Size.Big é diferente de " + result2110 + " <JSON.parseObject('\'big\'', Size.class)>")
chamada antiga: assertNull(JSON.parseObject("\"Large\"", Size.class))
nova chamada: assertNull(JSON.parseObject("\"Large\"", Size.class), "Era esperado nulo, mas " + result2111 + " <JSON.parseObject('\'Large\'', Size.class)> não é nulo")
chamada antiga: assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class))
nova chamada: assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class), "Era esperado objetos iguais, mas  Size.LL é diferente de " + result2112 + " <JSON.parseObject('\'L3\'', Size.class)>")
chamada antiga: assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class))
nova chamada: assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class), "Era esperado objetos iguais, mas  Size.Small é diferente de " + result2113 + " <JSON.parseObject('\'Little\'', Size.class)>")
chamada antiga: assertSame(Size.Small, model.size)
nova chamada: assertSame(Size.Small, model.size, "Era esperado objetos iguais, mas  Size.Small é diferente de " + " model.size")
chamada antiga: assertEquals("[1001,null]", json)
nova chamada: assertEquals("[1001,null]", json, "Era esperado valores iguais, mas  '[1001,null]' é diferente de " + " json")
chamada antiga: assertEquals("[1001,null]", json)
nova chamada: assertEquals("[1001,null]", json, "Era esperado valores iguais, mas  '[1001,null]' é diferente de " + " json")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"address\":\"localhost\",\"port\":3306}", str)
nova chamada: assertEquals("{\"address\":\"localhost\",\"port\":3306}", str, "Era esperado valores iguais, mas  '{\'address\':\'localhost\',\'port\':3306}' é diferente de " + " str")
chamada antiga: assertEquals(address1.getAddress(), address.getAddress())
nova chamada: assertEquals(address1.getAddress(), address.getAddress(), "Era esperado valores iguais, mas " + result2114 + " <address1.getAddress()> é diferente de " + result2115 + " <address.getAddress()>")
chamada antiga: assertEquals(address1.getPort(), address.getPort())
nova chamada: assertEquals(address1.getPort(), address.getPort(), "Era esperado valores iguais, mas " + result2116 + " <address1.getPort()> é diferente de " + result2117 + " <address.getPort()>")
chamada antiga: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
nova chamada: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"), "Era esperado valores iguais, mas " + result2118 + " <TestUtils.encodeToBase64String(entity.getValue(), false)> é diferente de " + result2119 + " <json.getString('value')>")
chamada antiga: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
nova chamada: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"), "Era esperado valores iguais, mas  '中华人民共和国' é diferente de " + " new String(entity2.getValue(), 'UTF-8')")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'id1\':\'-9223370018640066466\',\'id2\':\'9223370018640066466\',\'id3\':100}' é diferente de " + result2120 + " <JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m1.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result2121 + " <m1.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m1.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result2122 + " <m1.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m1.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m1.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result2123 + " <m1.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m1.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m1.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result2124 + " <m1.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m1.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result2125 + " <m1.v5.longValue()>")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m2.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result2126 + " <m2.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m2.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result2127 + " <m2.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m2.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m2.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result2128 + " <m2.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m2.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m2.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result2129 + " <m2.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m2.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result2130 + " <m2.v5.longValue()>")
chamada antiga: assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1)
nova chamada: assertEquals(-1883391953414482124L, m1.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m1.v1")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2)
nova chamada: assertEquals(-3019416596934963650L, m1.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m1.v2")
chamada antiga: assertEquals(6497525620823745793L, m1.v3)
nova chamada: assertEquals(6497525620823745793L, m1.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m1.v3")
chamada antiga: assertEquals(2136224289077142499L, m1.v4)
nova chamada: assertEquals(2136224289077142499L, m1.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m1.v4")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5)
nova chamada: assertEquals(-2090575024006307745L, m1.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m1.v5")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1)
nova chamada: assertEquals(-1883391953414482124L, m2.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m2.v1")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2)
nova chamada: assertEquals(-3019416596934963650L, m2.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m2.v2")
chamada antiga: assertEquals(6497525620823745793L, m2.v3)
nova chamada: assertEquals(6497525620823745793L, m2.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m2.v3")
chamada antiga: assertEquals(2136224289077142499L, m2.v4)
nova chamada: assertEquals(2136224289077142499L, m2.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m2.v4")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5)
nova chamada: assertEquals(-2090575024006307745L, m2.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m2.v5")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2131 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result2132 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result2133 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2134 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2135 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result2136 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2137 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result2138 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result2139 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2140 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2141 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result2142 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'id1\':\'9223370018640066466\',\'id2\':\'9223370018640066466\'}' é diferente de " + result2143 + " <JSON.toJSONString(map, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertEquals(val, m.value)
nova chamada: assertEquals(val, m.value, "Era esperado valores iguais, mas  val é diferente de " + " m.value")
chamada antiga: assertEquals(val, m.value)
nova chamada: assertEquals(val, m.value, "Era esperado valores iguais, mas  val é diferente de " + " m.value")
chamada antiga: assertEquals(val, m.value)
nova chamada: assertEquals(val, m.value, "Era esperado valores iguais, mas  val é diferente de " + " m.value")
chamada antiga: assertEquals("{\"value\":0.21474836515489015}", str)
nova chamada: assertEquals("{\"value\":0.21474836515489015}", str, "Era esperado valores iguais, mas  '{\'value\':0.21474836515489015}' é diferente de " + " str")
chamada antiga: assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue())
nova chamada: assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue(), "Era esperado valores iguais, mas " + result2144 + " <Double.parseDouble(str)> é diferente de " + result2145 + " <JSONReader.of(str).readDoubleValue()>")
chamada antiga: assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue())
nova chamada: assertEquals(Double.parseDouble(str), JSONReader.of(str).readDoubleValue(), "Era esperado valores iguais, mas " + result2146 + " <Double.parseDouble(str)> é diferente de " + result2147 + " <JSONReader.of(str).readDoubleValue()>")
chamada antiga: assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertEquals("{\"num\":0.00000001}", json)
nova chamada: assertEquals("{\"num\":0.00000001}", json, "Era esperado valores iguais, mas  '{\'num\':0.00000001}' é diferente de " + " json")
chamada antiga: assertNotNull(testJsons)
nova chamada: assertNotNull(testJsons, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, testJsons.size())
nova chamada: assertEquals(2, testJsons.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2148 + " <testJsons.size()>")
chamada antiga: assertEquals("1", testJsons.get(0).test1)
nova chamada: assertEquals("1", testJsons.get(0).test1, "Era esperado valores iguais, mas  '1' é diferente de " + " testJsons.get(0).test1")
chamada antiga: assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"))
nova chamada: assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"), "Era esperado valores iguais, mas  'aaa' é diferente de " + result2149 + " <JSONPath.eval(object, '$.EXTINFO.bct_loan_account_status\\[15\\]')>")
chamada antiga: assertEquals("aaa", result.toString())
nova chamada: assertEquals("aaa", result.toString(), "Era esperado valores iguais, mas  'aaa' é diferente de " + result2150 + " <result.toString()>")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTime())
nova chamada: assertEquals(1548166745000L, o.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result2151 + " <o.createTime.getTime()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1548166745000L, order1.createTime.getTime())
nova chamada: assertEquals(1548166745000L, order1.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result2152 + " <order1.createTime.getTime()>")
chamada antiga: assertEquals(1548166745000L, order2.createTime.getTime())
nova chamada: assertEquals(1548166745000L, order2.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result2153 + " <order2.createTime.getTime()>")
chamada antiga: assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news))
nova chamada: assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news), "Era esperado valores iguais, mas  '{\'ddd\':\'sdfsd\',\'id\':\'ss\',\'name\':\'hh\'}' é diferente de " + result2154 + " <JSON.toJSONString(news)>")
chamada antiga: assertNotNull(growthList)
nova chamada: assertNotNull(growthList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(JSONPath.contains(rootObject, sizePath))
nova chamada: assertFalse(JSONPath.contains(rootObject, sizePath), "Era esperado falso, mas " + result2155 + " <JSONPath.contains(rootObject, sizePath)> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.contains(rootObject, lengthPath))
nova chamada: assertFalse(JSONPath.contains(rootObject, lengthPath), "Era esperado falso, mas " + result2156 + " <JSONPath.contains(rootObject, lengthPath)> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.contains(rootObject, "item"))
nova chamada: assertFalse(JSONPath.contains(rootObject, "item"), "Era esperado falso, mas " + result2157 + " <JSONPath.contains(rootObject, 'item')> é verdadeiro ")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(str).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(str).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2158 + " <JSON.parseObject(str).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(chars).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(chars).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2159 + " <JSON.parseObject(chars).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2160 + " <JSON.parseObject(bytes).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2161 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2162 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2163 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get('num')>")
chamada antiga: assertEquals(Double.POSITIVE_INFINITY, new JSONReaderStr(str).readObject().get("num"))
nova chamada: assertEquals(Double.POSITIVE_INFINITY, new JSONReaderStr(str).readObject().get("num"), "Era esperado valores iguais, mas  Double.POSITIVE_INFINITY é diferente de " + result2164 + " <new JSONReaderStr(str).readObject().get('num')>")
chamada antiga: assertEquals("{\"testDate\":\"2022-10-01 00:00:00\"}", JSON.toJSONString(demoDto))
nova chamada: assertEquals("{\"testDate\":\"2022-10-01 00:00:00\"}", JSON.toJSONString(demoDto), "Era esperado valores iguais, mas  '{\'testDate\':\'2022-10-01 00:00:00\'}' é diferente de " + result2165 + " <JSON.toJSONString(demoDto)>")
chamada antiga: assertEquals("{\"ID\":1,\"NAME\":\"joker\",\"PWD\":\"123@321\",\"TIME\":\"20221112\",\"TIME2\":\"20221112\"}", beanToJsonStr)
nova chamada: assertEquals("{\"ID\":1,\"NAME\":\"joker\",\"PWD\":\"123@321\",\"TIME\":\"20221112\",\"TIME2\":\"20221112\"}", beanToJsonStr, "Era esperado valores iguais, mas  '{\'ID\':1,\'NAME\':\'joker\',\'PWD\':\'123@321\',\'TIME\':\'20221112\',\'TIME2\':\'20221112\'}' é diferente de " + " beanToJsonStr")
chamada antiga: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString())
nova chamada: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString(), "Era esperado valores iguais, mas  '[{\'id\':\'a\',\'name\':\'an\'},{\'id\':\'b\',\'name\':\'bn\'}]' é diferente de " + result2166 + " <JSONPath.eval(JSON.parseObject(jsonString, JSONReader.Feature.AllowUnQuotedFieldNames), '$..view').toString()>")
chamada antiga: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString())
nova chamada: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, JSONReader.Feature.AllowUnQuotedFieldNames), "$..view").toString(), "Era esperado valores iguais, mas  '[{\'id\':\'a\',\'name\':\'an\'},{\'id\':\'b\',\'name\':\'bn\'}]' é diferente de " + result2167 + " <JSONPath.eval(JSON.parseObject(errorJsonString, JSONReader.Feature.AllowUnQuotedFieldNames), '$..view').toString()>")
chamada antiga: assertEquals("[\"RE1220045\",\"203\",1,\"RE1220045\"]", JSON.toJSONString(list, JSONWriter.Feature.ReferenceDetection))
nova chamada: assertEquals("[\"RE1220045\",\"203\",1,\"RE1220045\"]", JSON.toJSONString(list, JSONWriter.Feature.ReferenceDetection), "Era esperado valores iguais, mas  '[\'RE1220045\',\'203\',1,\'RE1220045\']' é diferente de " + result2168 + " <JSON.toJSONString(list, JSONWriter.Feature.ReferenceDetection)>")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2169 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2170 + " <m.values.size()>")
chamada antiga: assertNotNull(user)
nova chamada: assertNotNull(user, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2171 + " <list.size()>")
chamada antiga: assertEquals(1001, item.modelId)
nova chamada: assertEquals(1001, item.modelId, "Era esperado valores iguais, mas  1001 é diferente de " + " item.modelId")
chamada antiga: assertEquals(1001, item.modelId)
nova chamada: assertEquals(1001, item.modelId, "Era esperado valores iguais, mas  1001 é diferente de " + " item.modelId")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2172 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2173 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2174 + " <m.values.size()>")
chamada antiga: assertEquals(2L, book.bookId.longValue())
nova chamada: assertEquals(2L, book.bookId.longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result2175 + " <book.bookId.longValue()>")
chamada antiga: assertEquals("浪漫奇侠", book.bookName)
nova chamada: assertEquals("浪漫奇侠", book.bookName, "Era esperado valores iguais, mas  '浪漫奇侠' é diferente de " + " book.bookName")
chamada antiga: assertEquals("雨天不打伞", book.authorName)
nova chamada: assertEquals("雨天不打伞", book.authorName, "Era esperado valores iguais, mas  '雨天不打伞' é diferente de " + " book.authorName")
chamada antiga: assertEquals(4536, book.wordCount.intValue())
nova chamada: assertEquals(4536, book.wordCount.intValue(), "Era esperado valores iguais, mas  4536 é diferente de " + result2176 + " <book.wordCount.intValue()>")
chamada antiga: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
nova chamada: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json, "Era esperado valores iguais, mas  '{\'color\':\'\',\'productCity\':\'\',\'size\':0}' é diferente de " + " json")
chamada antiga: assertEquals("{\"values\":[\"2017-12-20\"]}", json)
nova chamada: assertEquals("{\"values\":[\"2017-12-20\"]}", json, "Era esperado valores iguais, mas  '{\'values\':[\'2017-12-20\']}' é diferente de " + " json")
chamada antiga: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
nova chamada: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json, "Era esperado valores iguais, mas  '{\'color\':\'\',\'productCity\':\'\',\'size\':0}' é diferente de " + " json")
chamada antiga: assertEquals(1324138987429L, time.getTime())
nova chamada: assertEquals(1324138987429L, time.getTime(), "Era esperado valores iguais, mas  1324138987429L é diferente de " + result2177 + " <time.getTime()>")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2178 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2179 + " <m.values.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2180 + " <map.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2181 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2182 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2183 + " <m.values.size()>")
chamada antiga: assertTrue(JSONPath.of("$." + escapeString(s)).contains(o))
nova chamada: assertTrue(JSONPath.of("$." + escapeString(s)).contains(o), "Era esperado verdadeiro, mas " + result2184 + " <JSONPath.of('$.' + escapeString(s)).contains(o)> é falso")
chamada antiga: assertEquals("\"2018-01-10T08:30:00+08:00\"", jsonWriter.toString())
nova chamada: assertEquals("\"2018-01-10T08:30:00+08:00\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'2018-01-10T08:30:00+08:00\'' é diferente de " + result2185 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(2L, book.bookId.longValue())
nova chamada: assertEquals(2L, book.bookId.longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result2186 + " <book.bookId.longValue()>")
chamada antiga: assertEquals("浪漫奇侠", book.bookName)
nova chamada: assertEquals("浪漫奇侠", book.bookName, "Era esperado valores iguais, mas  '浪漫奇侠' é diferente de " + " book.bookName")
chamada antiga: assertEquals("雨天不打伞", book.authorName)
nova chamada: assertEquals("雨天不打伞", book.authorName, "Era esperado valores iguais, mas  '雨天不打伞' é diferente de " + " book.authorName")
chamada antiga: assertEquals(4536, book.wordCount.intValue())
nova chamada: assertEquals(4536, book.wordCount.intValue(), "Era esperado valores iguais, mas  4536 é diferente de " + result2187 + " <book.wordCount.intValue()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2188 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2189 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2190 + " <m.values.size()>")
chamada antiga: assertEquals("{\"value\":x'414243444547'}", json)
nova chamada: assertEquals("{\"value\":x'414243444547'}", json, "Era esperado valores iguais, mas  '{\'value\':x'414243444547'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertNull(o.getMessage())
nova chamada: assertNull(o.getMessage(), "Era esperado nulo, mas " + result2191 + " <o.getMessage()> não é nulo")
chamada antiga: assertEquals(0, array.getByteValue(0))
nova chamada: assertEquals(0, array.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result2192 + " <array.getByteValue(0)>")
chamada antiga: assertEquals(0, array.getShortValue(0))
nova chamada: assertEquals(0, array.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result2193 + " <array.getShortValue(0)>")
chamada antiga: assertTrue(0F == array.getFloatValue(0))
nova chamada: assertTrue(0F == array.getFloatValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(0D == array.getDoubleValue(0))
nova chamada: assertTrue(0D == array.getDoubleValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("1"), array.getBigInteger(1))
nova chamada: assertEquals(new BigInteger("1"), array.getBigInteger(1), "Era esperado valores iguais, mas  new BigInteger('1') é diferente de " + result2194 + " <array.getBigInteger(1)>")
chamada antiga: assertEquals("1", array.getString(1))
nova chamada: assertEquals("1", array.getString(1), "Era esperado valores iguais, mas  '1' é diferente de " + result2195 + " <array.getString(1)>")
chamada antiga: assertEquals(new java.util.Date(time), array.getDate(2))
nova chamada: assertEquals(new java.util.Date(time), array.getDate(2), "Era esperado valores iguais, mas  new java.util.Date(time) é diferente de " + result2196 + " <array.getDate(2)>")
chamada antiga: assertEquals(0, array2.getByteValue(0))
nova chamada: assertEquals(0, array2.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result2197 + " <array2.getByteValue(0)>")
chamada antiga: assertEquals(0, array2.getShortValue(0))
nova chamada: assertEquals(0, array2.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result2198 + " <array2.getShortValue(0)>")
chamada antiga: assertTrue(0F == array2.getFloatValue(0))
nova chamada: assertTrue(0F == array2.getFloatValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(0D == array2.getDoubleValue(0))
nova chamada: assertTrue(0D == array2.getDoubleValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("1"), array2.getBigInteger(1))
nova chamada: assertEquals(new BigInteger("1"), array2.getBigInteger(1), "Era esperado valores iguais, mas  new BigInteger('1') é diferente de " + result2199 + " <array2.getBigInteger(1)>")
chamada antiga: assertEquals("1", array2.getString(1))
nova chamada: assertEquals("1", array2.getString(1), "Era esperado valores iguais, mas  '1' é diferente de " + result2200 + " <array2.getString(1)>")
chamada antiga: assertEquals(new java.util.Date(time), array2.getDate(2))
nova chamada: assertEquals(new java.util.Date(time), array2.getDate(2), "Era esperado valores iguais, mas  new java.util.Date(time) é diferente de " + result2201 + " <array2.getDate(2)>")
chamada antiga: assertEquals(array2.size(), array2.size())
nova chamada: assertEquals(array2.size(), array2.size(), "Era esperado valores iguais, mas " + result2202 + " <array2.size()> é diferente de " + result2203 + " <array2.size()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
nova chamada: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + result2204 + " <JSON.parseObject('1', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class))
nova chamada: assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.B é diferente de " + result2205 + " <JSON.parseObject('2', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
nova chamada: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + " JSON.parseObject('{\'code\':1}', Model.class).code")
chamada antiga: assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code)
nova chamada: assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.B é diferente de " + " JSON.parseObject('{\'code\':2}', Model.class).code")
chamada antiga: assertEquals("{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_2000.Issue2012$Model\",\"bytes\":[]}", str)
nova chamada: assertEquals("{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_2000.Issue2012$Model\",\"bytes\":[]}", str, "Era esperado valores iguais, mas  '{\'@type\':\'com.alibaba.fastjson2.v1issues.issue_2000.Issue2012$Model\',\'bytes\':[]}' é diferente de " + " str")
chamada antiga: assertEquals(0, foo.bytes.length)
nova chamada: assertEquals(0, foo.bytes.length, "Era esperado valores iguais, mas  0 é diferente de " + " foo.bytes.length")
chamada antiga: assertSame(AccessLevel.DEVELOPER, model.accessLevel)
nova chamada: assertSame(AccessLevel.DEVELOPER, model.accessLevel, "Era esperado objetos iguais, mas  AccessLevel.DEVELOPER é diferente de " + " model.accessLevel")
chamada antiga: assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", json2)
nova chamada: assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", json2, "Era esperado valores iguais, mas  '{\'groupAccess\':{\'accessLevel\':50,\'notificationLevel\':3}}' é diferente de " + " json2")
chamada antiga: assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json)
nova chamada: assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json, "Era esperado valores iguais, mas  '{\'a\':[\'1\',\'b\'],\'b\':[\'1\']}' é diferente de " + " json")
chamada antiga: assertNull(JSON.parseObject("{\"code\":0}", Model.class).code)
nova chamada: assertNull(JSON.parseObject("{\"code\":0}", Model.class).code, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(JSON.parseObject("0", EnumClass.class))
nova chamada: assertNull(JSON.parseObject("0", EnumClass.class), "Era esperado nulo, mas " + result2206 + " <JSON.parseObject('0', EnumClass.class)> não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
nova chamada: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + result2207 + " <JSON.parseObject('1', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
nova chamada: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + " JSON.parseObject('{\'code\':1}', Model.class).code")
chamada antiga: assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text)
nova chamada: assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text, "Era esperado valores iguais, mas  '{\'latitude\':37,\'longitude\':127,\'id\':123}' é diferente de " + " text")
chamada antiga: assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text)
nova chamada: assertEquals("{\"latitude\":37,\"longitude\":127,\"id\":123}", text, "Era esperado valores iguais, mas  '{\'latitude\':37,\'longitude\':127,\'id\':123}' é diferente de " + " text")
chamada antiga: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'map\':{\'a\':[\'1\',\'2\',\'3\'],\'b\':[\'1\']},\'name\':\'zhangsan\'}' é diferente de " + result2208 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'map\':{\'a\':[\'1\',\'2\',\'3\'],\'b\':[\'1\']},\'name\':\'zhangsan\'}' é diferente de " + result2209 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text)
nova chamada: assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text, "Era esperado valores iguais, mas  '{\'my_name\':\'test name\',\'nested_bean\':{\'my_id\':\'test id\'}}' é diferente de " + " text")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2210 + " <array.size()>")
chamada antiga: assertNull(array.get(0))
nova chamada: assertNull(array.get(0), "Era esperado nulo, mas " + result2211 + " <array.get(0)> não é nulo")
chamada antiga: assertEquals("1001", array.get(1))
nova chamada: assertEquals("1001", array.get(1), "Era esperado valores iguais, mas  '1001' é diferente de " + result2212 + " <array.get(1)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2213 + " <array.size()>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2214 + " <array.size()>")
chamada antiga: assertEquals("1001", array.get(0))
nova chamada: assertEquals("1001", array.get(0), "Era esperado valores iguais, mas  '1001' é diferente de " + result2215 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2216 + " <array.size()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2217 + " <array.size()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2218 + " <array.size()>")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2219 + " <array.size()>")
chamada antiga: assertNull(array.get(0))
nova chamada: assertNull(array.get(0), "Era esperado nulo, mas " + result2220 + " <array.get(0)> não é nulo")
chamada antiga: assertEquals("1001", array.get(1))
nova chamada: assertEquals("1001", array.get(1), "Era esperado valores iguais, mas  '1001' é diferente de " + result2221 + " <array.get(1)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2222 + " <array.size()>")
chamada antiga: assertEquals(3, array.size())
nova chamada: assertEquals(3, array.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2223 + " <array.size()>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2224 + " <array.size()>")
chamada antiga: assertEquals("1002", array.get(0))
nova chamada: assertEquals("1002", array.get(0), "Era esperado valores iguais, mas  '1002' é diferente de " + result2225 + " <array.get(0)>")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2226 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2227 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2228 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2229 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2230 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2231 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2232 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2233 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result2234 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertEquals("您的预约已经超时", list.get("body"))
nova chamada: assertEquals("您的预约已经超时", list.get("body"), "Era esperado valores iguais, mas  '您的预约已经超时' é diferente de " + result2235 + " <list.get('body')>")
chamada antiga: assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new Filter[] { contextValueFilter }))
nova chamada: assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new Filter[] { contextValueFilter }), "Era esperado valores iguais, mas  '[{\'name\':\'mark-ace\'}]' é diferente de " + result2236 + " <JSON.toJSONString(params, new Filter[] { contextValueFilter })>")
chamada antiga: assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new Filter[] { valueFilter }))
nova chamada: assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new Filter[] { valueFilter }), "Era esperado valores iguais, mas  '[{\'name\':\'ace\'}]' é diferente de " + result2237 + " <JSON.toJSONString(params, new Filter[] { valueFilter })>")
chamada antiga: assertEquals(0D, object.getDoubleValue("val"))
nova chamada: assertEquals(0D, object.getDoubleValue("val"), "Era esperado valores iguais, mas  0D é diferente de " + result2238 + " <object.getDoubleValue('val')>")
chamada antiga: assertEquals(0F, object.getFloatValue("val"))
nova chamada: assertEquals(0F, object.getFloatValue("val"), "Era esperado valores iguais, mas  0F é diferente de " + result2239 + " <object.getFloatValue('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2240 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result2241 + " <object.getLongValue('val')>")
chamada antiga: assertEquals((short) 0, object.getShortValue("val"))
nova chamada: assertEquals((short) 0, object.getShortValue("val"), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result2242 + " <object.getShortValue('val')>")
chamada antiga: assertEquals((byte) 0, object.getByteValue("val"))
nova chamada: assertEquals((byte) 0, object.getByteValue("val"), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result2243 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(false, object.getBooleanValue("val"))
nova chamada: assertEquals(false, object.getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result2244 + " <object.getBooleanValue('val')>")
chamada antiga: assertEquals("string", object.name)
nova chamada: assertEquals("string", object.name, "Era esperado valores iguais, mas  'string' é diferente de " + " object.name")
chamada antiga: assertEquals(1, object.code)
nova chamada: assertEquals(1, object.code, "Era esperado valores iguais, mas  1 é diferente de " + " object.code")
chamada antiga: assertEquals("pinyin", object.pinyin)
nova chamada: assertEquals("pinyin", object.pinyin, "Era esperado valores iguais, mas  'pinyin' é diferente de " + " object.pinyin")
chamada antiga: assertEquals(null, object.name)
nova chamada: assertEquals(null, object.name, "Era esperado valores iguais, mas  null é diferente de " + " object.name")
chamada antiga: assertEquals(0, object.code)
nova chamada: assertEquals(0, object.code, "Era esperado valores iguais, mas  0 é diferente de " + " object.code")
chamada antiga: assertEquals(MyEnum.Test1, test.getMyEnum())
nova chamada: assertEquals(MyEnum.Test1, test.getMyEnum(), "Era esperado valores iguais, mas  MyEnum.Test1 é diferente de " + result2245 + " <test.getMyEnum()>")
chamada antiga: assertEquals(1, test.value)
nova chamada: assertEquals(1, test.value, "Era esperado valores iguais, mas  1 é diferente de " + " test.value")
chamada antiga: assertNotNull(model.value)
nova chamada: assertNotNull(model.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("string", object.name)
nova chamada: assertEquals("string", object.name, "Era esperado valores iguais, mas  'string' é diferente de " + " object.name")
chamada antiga: assertEquals(1, object.code)
nova chamada: assertEquals(1, object.code, "Era esperado valores iguais, mas  1 é diferente de " + " object.code")
chamada antiga: assertEquals("pinyin", object.pinyin)
nova chamada: assertEquals("pinyin", object.pinyin, "Era esperado valores iguais, mas  'pinyin' é diferente de " + " object.pinyin")
chamada antiga: assertNull(object.name)
nova chamada: assertNull(object.name, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(0, object.code)
nova chamada: assertEquals(0, object.code, "Era esperado valores iguais, mas  0 é diferente de " + " object.code")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(obj))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(obj), "Era esperado valores iguais, mas  jsonStr é diferente de " + result2246 + " <JSON.toJSONString(obj)>")
chamada antiga: assertNotNull(obj.value1)
nova chamada: assertNotNull(obj.value1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(obj))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(obj), "Era esperado valores iguais, mas  jsonStr é diferente de " + result2247 + " <JSON.toJSONString(obj)>")
chamada antiga: assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json)
nova chamada: assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json, "Era esperado valores iguais, mas  '{\'goodsList\':[{\'properties\':[{}]}]}' é diferente de " + " json")
chamada antiga: assertNotNull(n)
nova chamada: assertNotNull(n, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(n.getGoodsList())
nova chamada: assertNotNull(n.getGoodsList(), "Era esperado não nulo, mas " + result2248 + " <n.getGoodsList()> é nulo")
chamada antiga: assertNotNull(n.getGoodsList().get(0))
nova chamada: assertNotNull(n.getGoodsList().get(0), "Era esperado não nulo, mas " + result2249 + " <n.getGoodsList().get(0)> é nulo")
chamada antiga: assertNotNull(n.getGoodsList().get(0).getProperties())
nova chamada: assertNotNull(n.getGoodsList().get(0).getProperties(), "Era esperado não nulo, mas " + result2250 + " <n.getGoodsList().get(0).getProperties()> é nulo")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result2251 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result2252 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertTrue(json.indexOf("\\") < 0)
nova chamada: assertTrue(json.indexOf("\\") < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(MyEnum.Test1, test.getMyEnum())
nova chamada: assertEquals(MyEnum.Test1, test.getMyEnum(), "Era esperado valores iguais, mas  MyEnum.Test1 é diferente de " + result2253 + " <test.getMyEnum()>")
chamada antiga: assertEquals(1, test.value)
nova chamada: assertEquals(1, test.value, "Era esperado valores iguais, mas  1 é diferente de " + " test.value")
chamada antiga: assertEquals(JSON.toJSONString(enumMap), "{\"C\":\"D\",\"E\":\"A\"}")
nova chamada: assertEquals(JSON.toJSONString(enumMap), "{\"C\":\"D\",\"E\":\"A\"}", "Era esperado valores iguais, mas " + result2254 + " <JSON.toJSONString(enumMap)> é diferente de " + " '{\'C\':\'D\',\'E\':\'A\'}'")
chamada antiga: assertEquals("21496a63f5", image.id)
nova chamada: assertEquals("21496a63f5", image.id, "Era esperado valores iguais, mas  '21496a63f5' é diferente de " + " image.id")
chamada antiga: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url)
nova chamada: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url, "Era esperado valores iguais, mas  'http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x' é diferente de " + " image.url")
chamada antiga: assertEquals("", image.title)
nova chamada: assertEquals("", image.title, "Era esperado valores iguais, mas  '' é diferente de " + " image.title")
chamada antiga: assertEquals("JPG", image.type)
nova chamada: assertEquals("JPG", image.type, "Era esperado valores iguais, mas  'JPG' é diferente de " + " image.type")
chamada antiga: assertEquals(400, image.optimalWidth)
nova chamada: assertEquals(400, image.optimalWidth, "Era esperado valores iguais, mas  400 é diferente de " + " image.optimalWidth")
chamada antiga: assertEquals(267, image.optimalHeight)
nova chamada: assertEquals(267, image.optimalHeight, "Era esperado valores iguais, mas  267 é diferente de " + " image.optimalHeight")
chamada antiga: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url)
nova chamada: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url, "Era esperado valores iguais, mas  'http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg' é diferente de " + " image.original_save_url")
chamada antiga: assertEquals("62717D190987A7AE", image.phash)
nova chamada: assertEquals("62717D190987A7AE", image.phash, "Era esperado valores iguais, mas  '62717D190987A7AE' é diferente de " + " image.phash")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result2255 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result2256 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'id\':1,\'value\':\'a\'}' é diferente de " + result2257 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals(1.0d, total)
nova chamada: assertEquals(1.0d, total, "Era esperado valores iguais, mas  1.0d é diferente de " + " total")
chamada antiga: assertEquals("{\"id\":0}", JSON.toJSONString(object))
nova chamada: assertEquals("{\"id\":0}", JSON.toJSONString(object), "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + result2258 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("{\"id\":0}", JSON.toJSONString(mockObj))
nova chamada: assertEquals("{\"id\":0}", JSON.toJSONString(mockObj), "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + result2259 + " <JSON.toJSONString(mockObj)>")
chamada antiga: assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.parseObject(json).toString(JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.parseObject(json).toString(JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas  '{\n' + '\t\'head\':{\n' + '\t\t\'requestTime\':\'1654070371884\',\n' + '\t\t\'merchantcode\':\'111\',\n' + '\t\t\'ticket\':\'111\',\n' + '\t\t\'version\':\'1.0.0\'\n' + '\t},\n' + '\t\'body\':{\n' + '\t\t\'phone\':\'111\',\n' + '\t\t\'type\':\'1\',\n' + '\t\t\'ticket\':\'\'\n' + '\t},\n' + '\t\'sign\':\'111\'\n' + '}' é diferente de " + result2260 + " <JSON.parseObject(json).toString(JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertEquals("{\"date\":\"2022-06-01\",\"time\":\"13:13:13\"}", str)
nova chamada: assertEquals("{\"date\":\"2022-06-01\",\"time\":\"13:13:13\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2022-06-01\',\'time\':\'13:13:13\'}' é diferente de " + " str")
chamada antiga: assertNull(readResult)
nova chamada: assertNull(readResult, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(readResult)
nova chamada: assertNull(readResult, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(readResult)
nova chamada: assertNull(readResult, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(readResult)
nova chamada: assertNull(readResult, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(30, model.getAge())
nova chamada: assertEquals(30, model.getAge(), "Era esperado valores iguais, mas  30 é diferente de " + result2261 + " <model.getAge()>")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertSame(1, result.size())
nova chamada: assertSame(1, result.size(), "Era esperado objetos iguais, mas  1 é diferente de " + result2262 + " <result.size()>")
chamada antiga: assertSame(order.books.get(1), result.get(0))
nova chamada: assertSame(order.books.get(1), result.get(0), "Era esperado objetos iguais, mas " + result2263 + " <order.books.get(1)> é diferente de " + result2264 + " <result.get(0)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2265 + " <result.size()>")
chamada antiga: assertSame(order.books.get(1), result.get(0))
nova chamada: assertSame(order.books.get(1), result.get(0), "Era esperado objetos iguais, mas " + result2266 + " <order.books.get(1)> é diferente de " + result2267 + " <result.get(0)>")
chamada antiga: assertSame(order.books.get(2), result.get(1))
nova chamada: assertSame(order.books.get(2), result.get(1), "Era esperado objetos iguais, mas " + result2268 + " <order.books.get(2)> é diferente de " + result2269 + " <result.get(1)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2270 + " <result.size()>")
chamada antiga: assertSame(order.books.get(0), result.get(0))
nova chamada: assertSame(order.books.get(0), result.get(0), "Era esperado objetos iguais, mas " + result2271 + " <order.books.get(0)> é diferente de " + result2272 + " <result.get(0)>")
chamada antiga: assertSame(order.books.get(1), result.get(1))
nova chamada: assertSame(order.books.get(1), result.get(1), "Era esperado objetos iguais, mas " + result2273 + " <order.books.get(1)> é diferente de " + result2274 + " <result.get(1)>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", str)
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", str)
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", str)
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + " str")
chamada antiga: assertEquals(-14189155200000L, date.getTime())
nova chamada: assertEquals(-14189155200000L, date.getTime(), "Era esperado valores iguais, mas  -14189155200000L é diferente de " + result2275 + " <date.getTime()>")
chamada antiga: assertEquals(-14189155200000L, m.time.getTime())
nova chamada: assertEquals(-14189155200000L, m.time.getTime(), "Era esperado valores iguais, mas  -14189155200000L é diferente de " + result2276 + " <m.time.getTime()>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2277 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)))
nova chamada: assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741990\'}' é diferente de " + result2278 + " <JSON.toJSONString(new Model(9007199254741990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2279 + " <JSON.toJSONString(new Model(100L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741990\'}' é diferente de " + result2280 + " <JSON.toJSONString(new Model(-9007199254741990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2281 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2282 + " <JSON.toJSONString(new Model(9007199254741992L), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result2283 + " <JSON.toJSONString(new Model(-9007199254741992L), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result2284 + " <JSON.toJSONString(new Model(9007199254740990L), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2285 + " <JSON.toJSONString(new Model(-9007199254740990L), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2286 + " <JSON.toJSONString(new Model(100), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result2287 + " <JSON.toJSONString(new Model(-100), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals(FieldEnum.A, bean.enumField)
nova chamada: assertEquals(FieldEnum.A, bean.enumField, "Era esperado valores iguais, mas  FieldEnum.A é diferente de " + " bean.enumField")
chamada antiga: assertEquals(0.9390308260917664F, user.age)
nova chamada: assertEquals(0.9390308260917664F, user.age, "Era esperado valores iguais, mas  0.9390308260917664F é diferente de " + " user.age")
chamada antiga: assertEquals(8.200000000000001F, user.age)
nova chamada: assertEquals(8.200000000000001F, user.age, "Era esperado valores iguais, mas  8.200000000000001F é diferente de " + " user.age")
chamada antiga: assertEquals(8.200000000000001F, user.age)
nova chamada: assertEquals(8.200000000000001F, user.age, "Era esperado valores iguais, mas  8.200000000000001F é diferente de " + " user.age")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2288 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result2289 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result2290 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2291 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2292 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result2293 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertEquals("张三", user.getName())
nova chamada: assertEquals("张三", user.getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result2294 + " <user.getName()>")
chamada antiga: assertNotNull(user.getBirthday())
nova chamada: assertNotNull(user.getBirthday(), "Era esperado não nulo, mas " + result2295 + " <user.getBirthday()> é nulo")
chamada antiga: assertEquals("张三", user.getName())
nova chamada: assertEquals("张三", user.getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result2296 + " <user.getName()>")
chamada antiga: assertNotNull(user.getBirthday())
nova chamada: assertNotNull(user.getBirthday(), "Era esperado não nulo, mas " + result2297 + " <user.getBirthday()> é nulo")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result2298 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result2299 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result2300 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result2301 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result2302 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result2303 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertEquals(d, 0.0D)
nova chamada: assertEquals(d, 0.0D, "Era esperado valores iguais, mas  d é diferente de " + " 0.0D")
chamada antiga: assertEquals(7, result.getModelList().size())
nova chamada: assertEquals(7, result.getModelList().size(), "Era esperado valores iguais, mas  7 é diferente de " + result2304 + " <result.getModelList().size()>")
chamada antiga: assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass())
nova chamada: assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass(), "Era esperado valores iguais, mas  InteractiveOrderMaterielModel.class é diferente de " + result2305 + " <result.getModelList().get(0).getClass()>")
chamada antiga: assertEquals("{\"data\":{}}", json)
nova chamada: assertEquals("{\"data\":{}}", json, "Era esperado valores iguais, mas  '{\'data\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{}", json)
nova chamada: assertEquals("{}", json, "Era esperado valores iguais, mas  '{}' é diferente de " + " json")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id)
nova chamada: assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id\':false}', VO.class).id")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id)
nova chamada: assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id\':true}', VO.class).id")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64)
nova chamada: assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id64\':false}', VO.class).id64")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64)
nova chamada: assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id64\':true}', VO.class).id64")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16)
nova chamada: assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id16\':false}', VO.class).id16")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16)
nova chamada: assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id16\':true}', VO.class).id16")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8)
nova chamada: assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id8\':false}', VO.class).id8")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8)
nova chamada: assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id8\':true}', VO.class).id8")
chamada antiga: assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue)
nova chamada: assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue, "Era esperado valores iguais, mas  0F é diferente de " + " JSON.parseObject('{\'floatValue\':false}', VO.class).floatValue")
chamada antiga: assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue)
nova chamada: assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue, "Era esperado valores iguais, mas  1F é diferente de " + " JSON.parseObject('{\'floatValue\':true}', VO.class).floatValue")
chamada antiga: assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue)
nova chamada: assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue, "Era esperado valores iguais, mas  0D é diferente de " + " JSON.parseObject('{\'doubleValue\':false}', VO.class).doubleValue")
chamada antiga: assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue)
nova chamada: assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue, "Era esperado valores iguais, mas  1D é diferente de " + " JSON.parseObject('{\'doubleValue\':true}', VO.class).doubleValue")
chamada antiga: assertEquals(s, JSON.parseObject(s).toJSONString())
nova chamada: assertEquals(s, JSON.parseObject(s).toJSONString(), "Era esperado valores iguais, mas  s é diferente de " + result2306 + " <JSON.parseObject(s).toJSONString()>")
chamada antiga: assertEquals(s1, JSON.parseObject(s1).toJSONString())
nova chamada: assertEquals(s1, JSON.parseObject(s1).toJSONString(), "Era esperado valores iguais, mas  s1 é diferente de " + result2307 + " <JSON.parseObject(s1).toJSONString()>")
chamada antiga: assertEquals(s2, JSON.parseObject(s2).toJSONString())
nova chamada: assertEquals(s2, JSON.parseObject(s2).toJSONString(), "Era esperado valores iguais, mas  s2 é diferente de " + result2308 + " <JSON.parseObject(s2).toJSONString()>")
chamada antiga: assertEquals(BigDecimal.valueOf(10.0), map.get("id"))
nova chamada: assertEquals(BigDecimal.valueOf(10.0), map.get("id"), "Era esperado valores iguais, mas " + result2309 + " <BigDecimal.valueOf(10.0)> é diferente de " + result2310 + " <map.get('id')>")
chamada antiga: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
nova chamada: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime(), "Era esperado valores iguais, mas " + result2311 + " <validateCode.getExpireTime()> é diferente de " + result2312 + " <backModel.getExpireTime()>")
chamada antiga: assertNull(backModel.getExpireTime())
nova chamada: assertNull(backModel.getExpireTime(), "Era esperado nulo, mas " + result2313 + " <backModel.getExpireTime()> não é nulo")
chamada antiga: assertTrue(mapKey instanceof Integer)
nova chamada: assertTrue(mapKey instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(model.getAGe())
nova chamada: assertNotNull(model.getAGe(), "Era esperado não nulo, mas " + result2314 + " <model.getAGe()> é nulo")
chamada antiga: assertNotNull(model.getName())
nova chamada: assertNotNull(model.getName(), "Era esperado não nulo, mas " + result2315 + " <model.getName()> é nulo")
chamada antiga: assertTrue(object.containsKey(1))
nova chamada: assertTrue(object.containsKey(1), "Era esperado verdadeiro, mas " + result2316 + " <object.containsKey(1)> é falso")
chamada antiga: assertTrue(object.containsKey("1"))
nova chamada: assertTrue(object.containsKey("1"), "Era esperado verdadeiro, mas " + result2317 + " <object.containsKey('1')> é falso")
chamada antiga: assertTrue(object.containsKey('A'))
nova chamada: assertTrue(object.containsKey('A'), "Era esperado verdadeiro, mas " + result2318 + " <object.containsKey('A')> é falso")
chamada antiga: assertTrue(object.containsKey("A"))
nova chamada: assertTrue(object.containsKey("A"), "Era esperado verdadeiro, mas " + result2319 + " <object.containsKey('A')> é falso")
chamada antiga: assertTrue(object.containsKey(true))
nova chamada: assertTrue(object.containsKey(true), "Era esperado verdadeiro, mas " + result2320 + " <object.containsKey(true)> é falso")
chamada antiga: assertTrue(object.containsKey("true"))
nova chamada: assertTrue(object.containsKey("true"), "Era esperado verdadeiro, mas " + result2321 + " <object.containsKey('true')> é falso")
chamada antiga: assertTrue(object.containsKey(uuid))
nova chamada: assertTrue(object.containsKey(uuid), "Era esperado verdadeiro, mas " + result2322 + " <object.containsKey(uuid)> é falso")
chamada antiga: assertTrue(object.containsKey(uuid.toString()))
nova chamada: assertTrue(object.containsKey(uuid.toString()), "Era esperado verdadeiro, mas " + result2323 + " <object.containsKey(uuid.toString())> é falso")
chamada antiga: assertEquals(123, JSON.parseObject("{\"user_id\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"user_id\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'user_id\':123}', VO.class).userId")
chamada antiga: assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'userId\':123}', VO.class).userId")
chamada antiga: assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'user-id\':123}', VO.class).userId")
chamada antiga: assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString())
nova chamada: assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString(), "Era esperado valores iguais, mas  'Mon Jan 19 12:05:54 GMT+01:00 1970' é diferente de " + result2324 + " <model.getDate().toString()>")
chamada antiga: assertTrue(jsonString.contains("因为相信，所以看见。"))
nova chamada: assertTrue(jsonString.contains("因为相信，所以看见。"), "Era esperado verdadeiro, mas " + result2325 + " <jsonString.contains('因为相信，所以看见。')> é falso")
chamada antiga: assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"))
nova chamada: assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"), "Era esperado valores iguais, mas  '因为相信，所以看见。' é diferente de " + result2326 + " <modelBack.getMap().get('nanqi')>")
chamada antiga: assertEquals("1", object.get(1))
nova chamada: assertEquals("1", object.get(1), "Era esperado valores iguais, mas  '1' é diferente de " + result2327 + " <object.get(1)>")
chamada antiga: assertEquals("true", object.get(true))
nova chamada: assertEquals("true", object.get(true), "Era esperado valores iguais, mas  'true' é diferente de " + result2328 + " <object.get(true)>")
chamada antiga: assertEquals("A", object.get('A'))
nova chamada: assertEquals("A", object.get('A'), "Era esperado valores iguais, mas  'A' é diferente de " + result2329 + " <object.get('A')>")
chamada antiga: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
nova chamada: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime(), "Era esperado valores iguais, mas " + result2330 + " <validateCode.getExpireTime()> é diferente de " + result2331 + " <backModel.getExpireTime()>")
chamada antiga: assertNull(backModel.getExpireTime())
nova chamada: assertNull(backModel.getExpireTime(), "Era esperado nulo, mas " + result2332 + " <backModel.getExpireTime()> não é nulo")
chamada antiga: assertEquals("{\"c\":\"0\",\"s\":\"str\"}", testJson)
nova chamada: assertEquals("{\"c\":\"0\",\"s\":\"str\"}", testJson, "Era esperado valores iguais, mas  '{\'c\':\'0\',\'s\':\'str\'}' é diferente de " + " testJson")
chamada antiga: assertEquals("[A{s='str', c=0}]", list.toString())
nova chamada: assertEquals("[A{s='str', c=0}]", list.toString(), "Era esperado valores iguais, mas  '[A{s='str', c=0}]' é diferente de " + result2333 + " <list.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"1\"}", innerObject.toString())
nova chamada: assertEquals("{\"$ref\":\"1\"}", innerObject.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'1\'}' é diferente de " + result2334 + " <innerObject.toString()>")
chamada antiga: assertEquals("{1:2}", JSON.toJSONString(map))
nova chamada: assertEquals("{1:2}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{1:2}' é diferente de " + result2335 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"1\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
nova chamada: assertEquals("{\"1\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString), "Era esperado valores iguais, mas  '{\'1\':2}' é diferente de " + result2336 + " <JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString)>")
chamada antiga: assertEquals("{1.23:2}", JSON.toJSONString(map))
nova chamada: assertEquals("{1.23:2}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{1.23:2}' é diferente de " + result2337 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
nova chamada: assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString), "Era esperado valores iguais, mas  '{\'1.23\':2}' é diferente de " + result2338 + " <JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString)>")
chamada antiga: assertEquals("{1.23:2}", JSON.toJSONString(map))
nova chamada: assertEquals("{1.23:2}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{1.23:2}' é diferente de " + result2339 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString))
nova chamada: assertEquals("{\"1.23\":2}", JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString), "Era esperado valores iguais, mas  '{\'1.23\':2}' é diferente de " + result2340 + " <JSON.toJSONString(map, JSONWriter.Feature.WriteNonStringKeyAsString)>")
chamada antiga: assertEquals("[\"tag1\",\"tag2\"]", r.toString())
nova chamada: assertEquals("[\"tag1\",\"tag2\"]", r.toString(), "Era esperado valores iguais, mas  '[\'tag1\',\'tag2\']' é diferente de " + result2341 + " <r.toString()>")
chamada antiga: assertEquals("{\"f0\":0,\"f1\":0,\"f2\":0}", json)
nova chamada: assertEquals("{\"f0\":0,\"f1\":0,\"f2\":0}", json, "Era esperado valores iguais, mas  '{\'f0\':0,\'f1\':0,\'f2\':0}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":1001,\"name\":\"gaotie\"}", text_normal)
nova chamada: assertEquals("{\"id\":1001,\"name\":\"gaotie\"}", text_normal, "Era esperado valores iguais, mas  '{\'id\':1001,\'name\':\'gaotie\'}' é diferente de " + " text_normal")
chamada antiga: assertEquals("[1001,\"gaotie\"]", text_beanToArray)
nova chamada: assertEquals("[1001,\"gaotie\"]", text_beanToArray, "Era esperado valores iguais, mas  '[1001,\'gaotie\']' é diferente de " + " text_beanToArray")
chamada antiga: assertEquals("\"\uD83C\uDDEB\uD83C\uDDF7\"", str)
nova chamada: assertEquals("\"\uD83C\uDDEB\uD83C\uDDF7\"", str, "Era esperado valores iguais, mas  '\'\uD83C\uDDEB\uD83C\uDDF7\'' é diferente de " + " str")
chamada antiga: assertNull(info.ids)
nova chamada: assertNull(info.ids, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"id\":101}", json)
nova chamada: assertEquals("{\"id\":101}", json, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " json")
chamada antiga: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result)
nova chamada: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result, "Era esperado valores iguais, mas  '{\'a\':{\'x\':\'y2\'},\'b\':{\'x\':\'y2\'}}' é diferente de " + " result")
chamada antiga: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1002}]}", json)
nova chamada: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\",\"id\":1002}]}", json, "Era esperado valores iguais, mas  '{\'list\':[{\'@type\':\'com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\',\'id\':1001},{\'@type\':\'com.alibaba.fastjson2.v1issues.issue_1100.Issue1151$C\',\'id\':1002}]}' é diferente de " + " json")
chamada antiga: assertSame(a2.list.get(0).getClass(), C.class)
nova chamada: assertSame(a2.list.get(0).getClass(), C.class, "Era esperado objetos iguais, mas " + result2342 + " <a2.list.get(0).getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals("{\n" + "\t\"host\":\"127.0.0.1\",\n" + "\t\"port\":3306,\n" + "\t\"user\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t},\n" + "\t\"admin\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t}\n" + "}", json)
nova chamada: assertEquals("{\n" + "\t\"host\":\"127.0.0.1\",\n" + "\t\"port\":3306,\n" + "\t\"user\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t},\n" + "\t\"admin\":{\n" + "\t\t\"name\":\"jack\",\n" + "\t\t\"age\":20\n" + "\t}\n" + "}", json, "Era esperado valores iguais, mas  '{\n' + '\t\'host\':\'127.0.0.1\',\n' + '\t\'port\':3306,\n' + '\t\'user\':{\n' + '\t\t\'name\':\'jack\',\n' + '\t\t\'age\':20\n' + '\t},\n' + '\t\'admin\':{\n' + '\t\t\'name\':\'jack\',\n' + '\t\t\'age\':20\n' + '\t}\n' + '}' é diferente de " + " json")
chamada antiga: assertEquals(result, jsonObject2)
nova chamada: assertEquals(result, jsonObject2, "Era esperado valores iguais, mas  result é diferente de " + " jsonObject2")
chamada antiga: assertNotNull(eval)
nova chamada: assertNotNull(eval, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.123"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.123"), "Era esperado valores iguais, mas  'abc' é diferente de " + result2343 + " <JSONPath.eval(object, '$.123')>")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.345_xiu"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.345_xiu"), "Era esperado valores iguais, mas  'abc' é diferente de " + result2344 + " <JSONPath.eval(object, '$.345_xiu')>")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"), "Era esperado valores iguais, mas  'abc' é diferente de " + result2345 + " <JSONPath.eval(object, '$.345\\.xiu')>")
chamada antiga: assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text)
nova chamada: assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text, "Era esperado valores iguais, mas  '{\'Dimension\':0,\'PassCode\':\'010\',\'BlockPos\':{\'x\':526,\'y\':65,\'z\':554}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject))
nova chamada: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject), "Era esperado valores iguais, mas  '{\'a\':{\'x\':\'y2\'},\'b\':{\'x\':\'y2\'}}' é diferente de " + result2346 + " <JSON.toJSONString(jsonObject)>")
chamada antiga: assertNull(model.values)
nova chamada: assertNull(model.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.values)
nova chamada: assertNull(model.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
nova chamada: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root), "Era esperado valores iguais, mas  '{\'models\':[{\'x\':\'y2\'},{\'x\':\'y2\'}]}' é diferente de " + result2347 + " <JSON.toJSONString(root)>")
chamada antiga: assertEquals("{\"__v\":3}", json)
nova chamada: assertEquals("{\"__v\":3}", json, "Era esperado valores iguais, mas  '{\'__v\':3}' é diferente de " + " json")
chamada antiga: assertEquals("{\"id\":101}", json)
nova chamada: assertEquals("{\"id\":101}", json, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " json")
chamada antiga: assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject))
nova chamada: assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject), "Era esperado valores iguais, mas  '[{\'x\':\'y2\'},{\'x\':\'y2\'}]' é diferente de " + result2348 + " <JSON.toJSONString(jsonObject)>")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", s)
nova chamada: assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", s, "Era esperado valores iguais, mas  '{\'a.b.c\':{\'y\':{\'2_wdk\':[{\'a\':100}]}},\'x\':{\'a\':100}}' é diferente de " + " s")
chamada antiga: assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", JSON.toJSONString(revert))
nova chamada: assertEquals("{\"a.b.c\":{\"y\":{\"2_wdk\":[{\"a\":100}]}},\"x\":{\"a\":100}}", JSON.toJSONString(revert), "Era esperado valores iguais, mas  '{\'a.b.c\':{\'y\':{\'2_wdk\':[{\'a\':100}]}},\'x\':{\'a\':100}}' é diferente de " + result2349 + " <JSON.toJSONString(revert)>")
chamada antiga: assertEquals(com.alibaba.fastjson2.JSON.toJSONString(result), new com.google.gson.Gson().toJson(result))
nova chamada: assertEquals(com.alibaba.fastjson2.JSON.toJSONString(result), new com.google.gson.Gson().toJson(result), "Era esperado valores iguais, mas " + result2350 + " <com.alibaba.fastjson2.JSON.toJSONString(result)> é diferente de " + result2351 + " <new com.google.gson.Gson().toJson(result)>")
chamada antiga: assertEquals(nanos, 350000000)
nova chamada: assertEquals(nanos, 350000000, "Era esperado valores iguais, mas  nanos é diferente de " + " 350000000")
chamada antiga: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
nova chamada: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo), "Era esperado valores iguais, mas  '{\'timestamp\':\'2019-09-19 08:49:52.350000000\'}' é diferente de " + result2352 + " <JSON.toJSONString(pojo)>")
chamada antiga: assertEquals(nanos, 350000000)
nova chamada: assertEquals(nanos, 350000000, "Era esperado valores iguais, mas  nanos é diferente de " + " 350000000")
chamada antiga: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
nova chamada: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo), "Era esperado valores iguais, mas  '{\'timestamp\':\'2019-09-19 08:49:52.350000000\'}' é diferente de " + result2353 + " <JSON.toJSONString(pojo)>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result2354 + " <jsonObject.getIntValue('qty')>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty1"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result2355 + " <jsonObject.getIntValue('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty2"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result2356 + " <jsonObject.getIntValue('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result2357 + " <jsonObject.getInteger('qty')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty1"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result2358 + " <jsonObject.getInteger('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty2"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result2359 + " <jsonObject.getInteger('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result2360 + " <jsonObject.getLongValue('qty')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty1"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result2361 + " <jsonObject.getLongValue('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty2"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result2362 + " <jsonObject.getLongValue('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty"))
nova chamada: assertEquals(10, jsonObject.getLong("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result2363 + " <jsonObject.getLong('qty')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty1"))
nova chamada: assertEquals(10, jsonObject.getLong("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result2364 + " <jsonObject.getLong('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty2"))
nova chamada: assertEquals(10, jsonObject.getLong("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result2365 + " <jsonObject.getLong('qty2')>")
chamada antiga: assertEquals(40, max)
nova chamada: assertEquals(40, max, "Era esperado valores iguais, mas  40 é diferente de " + " max")
chamada antiga: assertEquals(30, min)
nova chamada: assertEquals(30, min, "Era esperado valores iguais, mas  30 é diferente de " + " min")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("v", entry.getValue().getValue())
nova chamada: assertEquals("v", entry.getValue().getValue(), "Era esperado valores iguais, mas  'v' é diferente de " + result2366 + " <entry.getValue().getValue()>")
chamada antiga: assertEquals(nestedSet, deserializedNestedSet)
nova chamada: assertEquals(nestedSet, deserializedNestedSet, "Era esperado valores iguais, mas  nestedSet é diferente de " + " deserializedNestedSet")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2367 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2368 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2369 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2370 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2371 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2372 + " <vo.getName()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2373 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2374 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2375 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2376 + " <vo.getName()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2377 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2378 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2379 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2380 + " <vo.getName()>")
chamada antiga: assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result2381 + " <vo.getId()>")
chamada antiga: assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result2382 + " <vo.getName()>")
chamada antiga: assertTrue(animal instanceof Cat)
nova chamada: assertTrue(animal instanceof Cat, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, cat.val)
nova chamada: assertEquals(1, cat.val, "Era esperado valores iguais, mas  1 é diferente de " + " cat.val")
chamada antiga: assertEquals("[{\"name\":\"level3\",\"field\":\"leve3Field\",\"body\":{\"name\":\"level4\",\"field\":\"leve4Field\"}}]", JSON.toJSONString(result))
nova chamada: assertEquals("[{\"name\":\"level3\",\"field\":\"leve3Field\",\"body\":{\"name\":\"level4\",\"field\":\"leve4Field\"}}]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[{\'name\':\'level3\',\'field\':\'leve3Field\',\'body\':{\'name\':\'level4\',\'field\':\'leve4Field\'}}]' é diferente de " + result2383 + " <JSON.toJSONString(result)>")
chamada antiga: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result)
nova chamada: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result)
nova chamada: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("1", JSON.toJSONString(new BigDecimal("1")))
nova chamada: assertEquals("1", JSON.toJSONString(new BigDecimal("1")), "Era esperado valores iguais, mas  '1' é diferente de " + result2384 + " <JSON.toJSONString(new BigDecimal('1'))>")
chamada antiga: assertEquals("1", JSON.toJSONString(new BigDecimal("1"), JSONWriter.Feature.WriteClassName))
nova chamada: assertEquals("1", JSON.toJSONString(new BigDecimal("1"), JSONWriter.Feature.WriteClassName), "Era esperado valores iguais, mas  '1' é diferente de " + result2385 + " <JSON.toJSONString(new BigDecimal('1'), JSONWriter.Feature.WriteClassName)>")
chamada antiga: assertTrue(JSON.isValid("{}"))
nova chamada: assertTrue(JSON.isValid("{}"), "Era esperado verdadeiro, mas " + result2386 + " <JSON.isValid('{}')> é falso")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(JSON.isValid(chars))
nova chamada: assertFalse(JSON.isValid(chars), "Era esperado falso, mas " + result2387 + " <JSON.isValid(chars)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(bytes))
nova chamada: assertFalse(JSON.isValid(bytes), "Era esperado falso, mas " + result2388 + " <JSON.isValid(bytes)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.US_ASCII))
nova chamada: assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.US_ASCII), "Era esperado falso, mas " + result2389 + " <JSON.isValid(bytes, 0, bytes.length, StandardCharsets.US_ASCII)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1))
nova chamada: assertFalse(JSON.isValid(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1), "Era esperado falso, mas " + result2390 + " <JSON.isValid(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(str))
nova chamada: assertFalse(JSON.isValid(str), "Era esperado falso, mas " + result2391 + " <JSON.isValid(str)> é verdadeiro ")
chamada antiga: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
nova chamada: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString(), "Era esperado valores iguais, mas  '{\'id1\':101,\'id2\':102,\'id3\':103}' é diferente de " + result2392 + " <JSON.toJSON(bean).toString()>")
chamada antiga: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
nova chamada: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString(), "Era esperado valores iguais, mas  '{\'id1\':101,\'id2\':102,\'id3\':103}' é diferente de " + result2393 + " <JSON.toJSON(bean).toString()>")
chamada antiga: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
nova chamada: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }), "Era esperado valores iguais, mas  '[true]' é diferente de " + result2394 + " <JSON.toJSONString(new boolean[] { true })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result2395 + " <v1.getValue()> é diferente de " + result2396 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("User{aBc='abc', ID='123456', date=Sun Apr 24 00:00:00 CST 2022}", user.toString())
nova chamada: assertEquals("User{aBc='abc', ID='123456', date=Sun Apr 24 00:00:00 CST 2022}", user.toString(), "Era esperado valores iguais, mas  'User{aBc='abc', ID='123456', date=Sun Apr 24 00:00:00 CST 2022}' é diferente de " + result2397 + " <user.toString()>")
chamada antiga: assertEquals("User{aBc='abc', ID='null', date=null}", user1.toString())
nova chamada: assertEquals("User{aBc='abc', ID='null', date=null}", user1.toString(), "Era esperado valores iguais, mas  'User{aBc='abc', ID='null', date=null}' é diferente de " + result2398 + " <user1.toString()>")
chamada antiga: assertTrue(JSON.isValidArray(json_string))
nova chamada: assertTrue(JSON.isValidArray(json_string), "Era esperado verdadeiro, mas " + result2399 + " <JSON.isValidArray(json_string)> é falso")
chamada antiga: assertEquals("Array", JSONValidator.from(json_string).getType().toString())
nova chamada: assertEquals("Array", JSONValidator.from(json_string).getType().toString(), "Era esperado valores iguais, mas  'Array' é diferente de " + result2400 + " <JSONValidator.from(json_string).getType().toString()>")
chamada antiga: assertTrue(JSON.isValidArray("[[]]"))
nova chamada: assertTrue(JSON.isValidArray("[[]]"), "Era esperado verdadeiro, mas " + result2401 + " <JSON.isValidArray('[[]]')> é falso")
chamada antiga: assertEquals("Array", JSONValidator.from("[[]]").getType().toString())
nova chamada: assertEquals("Array", JSONValidator.from("[[]]").getType().toString(), "Era esperado valores iguais, mas  'Array' é diferente de " + result2402 + " <JSONValidator.from('[[]]').getType().toString()>")
chamada antiga: assertFalse(JSON.isValidArray("["))
nova chamada: assertFalse(JSON.isValidArray("["), "Era esperado falso, mas " + result2403 + " <JSON.isValidArray('[')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[[]"))
nova chamada: assertFalse(JSON.isValidArray("[[]"), "Era esperado falso, mas " + result2404 + " <JSON.isValidArray('[[]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(str))
nova chamada: assertFalse(JSON.isValid(str), "Era esperado falso, mas " + result2405 + " <JSON.isValid(str)> é verdadeiro ")
chamada antiga: assertEquals("{\"class\":[{\"student2\":{\"sex\":\"male\",\"name\":\"jerry\"},\"student1\":{\"sex\":\"male\",\"name\":\"jerry\"}}]}", fastJSON)
nova chamada: assertEquals("{\"class\":[{\"student2\":{\"sex\":\"male\",\"name\":\"jerry\"},\"student1\":{\"sex\":\"male\",\"name\":\"jerry\"}}]}", fastJSON, "Era esperado valores iguais, mas  '{\'class\':[{\'student2\':{\'sex\':\'male\',\'name\':\'jerry\'},\'student1\':{\'sex\':\'male\',\'name\':\'jerry\'}}]}' é diferente de " + " fastJSON")
chamada antiga: assertEquals("test", issues.getName())
nova chamada: assertEquals("test", issues.getName(), "Era esperado valores iguais, mas  'test' é diferente de " + result2406 + " <issues.getName()>")
chamada antiga: assertEquals(20, issues.getAge().intValue())
nova chamada: assertEquals(20, issues.getAge().intValue(), "Era esperado valores iguais, mas  20 é diferente de " + result2407 + " <issues.getAge().intValue()>")
chamada antiga: assertEquals("{\"age\":20}", JSON.toJSONString(issues))
nova chamada: assertEquals("{\"age\":20}", JSON.toJSONString(issues), "Era esperado valores iguais, mas  '{\'age\':20}' é diferente de " + result2408 + " <JSON.toJSONString(issues)>")
chamada antiga: assertEquals("test", issues.getName())
nova chamada: assertEquals("test", issues.getName(), "Era esperado valores iguais, mas  'test' é diferente de " + result2409 + " <issues.getName()>")
chamada antiga: assertEquals(20, issues.getAge().intValue())
nova chamada: assertEquals(20, issues.getAge().intValue(), "Era esperado valores iguais, mas  20 é diferente de " + result2410 + " <issues.getAge().intValue()>")
chamada antiga: assertEquals("{\"age\":20}", JSON.toJSONString(issues))
nova chamada: assertEquals("{\"age\":20}", JSON.toJSONString(issues), "Era esperado valores iguais, mas  '{\'age\':20}' é diferente de " + result2411 + " <JSON.toJSONString(issues)>")
chamada antiga: assertNotNull(a1)
nova chamada: assertNotNull(a1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(paramRequest)
nova chamada: assertNotNull(paramRequest, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, STRING_CODER.applyAsInt("中国"))
nova chamada: assertEquals(1, STRING_CODER.applyAsInt("中国"), "Era esperado valores iguais, mas  1 é diferente de " + result2412 + " <STRING_CODER.applyAsInt('中国')>")
chamada antiga: assertEquals("{\"f0\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field0\"},\"f1\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field1\"},\"target\":{\"field1\":0}}", string)
nova chamada: assertEquals("{\"f0\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field0\"},\"f1\":{\"declaringClass\":\"com.alibaba.fastjson2.FieldTest$Service\",\"name\":\"field1\"},\"target\":{\"field1\":0}}", string, "Era esperado valores iguais, mas  '{\'f0\':{\'declaringClass\':\'com.alibaba.fastjson2.FieldTest$Service\',\'name\':\'field0\'},\'f1\':{\'declaringClass\':\'com.alibaba.fastjson2.FieldTest$Service\',\'name\':\'field1\'},\'target\':{\'field1\':0}}' é diferente de " + " string")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.f0, invoker1.f0)
nova chamada: assertEquals(invoker.f0, invoker1.f0, "Era esperado valores iguais, mas  invoker.f0 é diferente de " + " invoker1.f0")
chamada antiga: assertEquals(invoker.f1, invoker1.f1)
nova chamada: assertEquals(invoker.f1, invoker1.f1, "Era esperado valores iguais, mas  invoker.f1 é diferente de " + " invoker1.f1")
chamada antiga: assertEquals("[[\"com.alibaba.fastjson2.FieldTest$Service\",\"field0\"],[\"com.alibaba.fastjson2.FieldTest$Service\",\"field1\"],[null,0]]", string)
nova chamada: assertEquals("[[\"com.alibaba.fastjson2.FieldTest$Service\",\"field0\"],[\"com.alibaba.fastjson2.FieldTest$Service\",\"field1\"],[null,0]]", string, "Era esperado valores iguais, mas  '[[\'com.alibaba.fastjson2.FieldTest$Service\',\'field0\'],[\'com.alibaba.fastjson2.FieldTest$Service\',\'field1\'],[null,0]]' é diferente de " + " string")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.f0, invoker1.f0)
nova chamada: assertEquals(invoker.f0, invoker1.f0, "Era esperado valores iguais, mas  invoker.f0 é diferente de " + " invoker1.f0")
chamada antiga: assertEquals(invoker.f1, invoker1.f1)
nova chamada: assertEquals(invoker.f1, invoker1.f1, "Era esperado valores iguais, mas  invoker.f1 é diferente de " + " invoker1.f1")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.f0, invoker1.f0)
nova chamada: assertEquals(invoker.f0, invoker1.f0, "Era esperado valores iguais, mas  invoker.f0 é diferente de " + " invoker1.f0")
chamada antiga: assertEquals(invoker.f1, invoker1.f1)
nova chamada: assertEquals(invoker.f1, invoker1.f1, "Era esperado valores iguais, mas  invoker.f1 é diferente de " + " invoker1.f1")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.f0, invoker1.f0)
nova chamada: assertEquals(invoker.f0, invoker1.f0, "Era esperado valores iguais, mas  invoker.f0 é diferente de " + " invoker1.f0")
chamada antiga: assertEquals(invoker.f1, invoker1.f1)
nova chamada: assertEquals(invoker.f1, invoker1.f1, "Era esperado valores iguais, mas  invoker.f1 é diferente de " + " invoker1.f1")
chamada antiga: assertEquals("101", str)
nova chamada: assertEquals("101", str, "Era esperado valores iguais, mas  '101' é diferente de " + " str")
chamada antiga: assertTrue(context.isEnabled(JSONReader.Feature.UseNativeObject))
nova chamada: assertTrue(context.isEnabled(JSONReader.Feature.UseNativeObject), "Era esperado verdadeiro, mas " + result2413 + " <context.isEnabled(JSONReader.Feature.UseNativeObject)> é falso")
chamada antiga: assertSame(defaultTimeZone, context.getTimeZone())
nova chamada: assertSame(defaultTimeZone, context.getTimeZone(), "Era esperado objetos iguais, mas  defaultTimeZone é diferente de " + result2414 + " <context.getTimeZone()>")
chamada antiga: assertSame(china, context.getLocale())
nova chamada: assertSame(china, context.getLocale(), "Era esperado objetos iguais, mas  china é diferente de " + result2415 + " <context.getLocale()>")
chamada antiga: assertSame(zoneId, context.getZoneId())
nova chamada: assertSame(zoneId, context.getZoneId(), "Era esperado objetos iguais, mas  zoneId é diferente de " + result2416 + " <context.getZoneId()>")
chamada antiga: assertEquals(0, context.getFeatures())
nova chamada: assertEquals(0, context.getFeatures(), "Era esperado valores iguais, mas  0 é diferente de " + result2417 + " <context.getFeatures()>")
chamada antiga: assertNull(context.getDateFormatter())
nova chamada: assertNull(context.getDateFormatter(), "Era esperado nulo, mas " + result2418 + " <context.getDateFormatter()> não é nulo")
chamada antiga: assertNull(context.getObjectSupplier())
nova chamada: assertNull(context.getObjectSupplier(), "Era esperado nulo, mas " + result2419 + " <context.getObjectSupplier()> não é nulo")
chamada antiga: assertNull(context.getArraySupplier())
nova chamada: assertNull(context.getArraySupplier(), "Era esperado nulo, mas " + result2420 + " <context.getArraySupplier()> não é nulo")
chamada antiga: assertArrayEquals(bean.value, bean1.value)
nova chamada: assertArrayEquals(bean.value, bean1.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertArrayEquals(bean.value, bean2.value)
nova chamada: assertArrayEquals(bean.value, bean2.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(temperature)
nova chamada: assertNotNull(temperature, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(new BigDecimal("24.4801"), temperature.value)
nova chamada: assertEquals(new BigDecimal("24.4801"), temperature.value, "Era esperado valores iguais, mas  new BigDecimal('24.4801') é diferente de " + " temperature.value")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text)
nova chamada: assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'latitude\':37,\'longitude\':127}' é diferente de " + " text")
chamada antiga: assertNotNull(vo2.properties)
nova chamada: assertNotNull(vo2.properties, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(37, vo2.properties.get("latitude"))
nova chamada: assertEquals(37, vo2.properties.get("latitude"), "Era esperado valores iguais, mas  37 é diferente de " + result2421 + " <vo2.properties.get('latitude')>")
chamada antiga: assertEquals(127, vo2.properties.get("longitude"))
nova chamada: assertEquals(127, vo2.properties.get("longitude"), "Era esperado valores iguais, mas  127 é diferente de " + result2422 + " <vo2.properties.get('longitude')>")
chamada antiga: assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text)
nova chamada: assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'latitude\':37,\'longitude\':127}' é diferente de " + " text")
chamada antiga: assertNotNull(vo2.properties)
nova chamada: assertNotNull(vo2.properties, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(37, vo2.properties.get("latitude"))
nova chamada: assertEquals(37, vo2.properties.get("latitude"), "Era esperado valores iguais, mas  37 é diferente de " + result2423 + " <vo2.properties.get('latitude')>")
chamada antiga: assertEquals(127, vo2.properties.get("longitude"))
nova chamada: assertEquals(127, vo2.properties.get("longitude"), "Era esperado valores iguais, mas  127 é diferente de " + result2424 + " <vo2.properties.get('longitude')>")
chamada antiga: assertEquals(new BigDecimal("0"), tradPlusAdVO1.items.get(0).Revenue)
nova chamada: assertEquals(new BigDecimal("0"), tradPlusAdVO1.items.get(0).Revenue, "Era esperado valores iguais, mas  new BigDecimal('0') é diferente de " + " tradPlusAdVO1.items.get(0).Revenue")
chamada antiga: assertEquals(BigDecimal.valueOf(Double.parseDouble("0.000000006E3")), rate)
nova chamada: assertEquals(BigDecimal.valueOf(Double.parseDouble("0.000000006E3")), rate, "Era esperado valores iguais, mas " + result2425 + " <BigDecimal.valueOf(Double.parseDouble('0.000000006E3'))> é diferente de " + " rate")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean.item.id)
nova chamada: assertEquals(123, bean.item.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.item.id")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean.item.id)
nova chamada: assertEquals(123, bean.item.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("[1]", JSONArray.copyOf(list).toJSONString())
nova chamada: assertEquals("[1]", JSONArray.copyOf(list).toJSONString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result2426 + " <JSONArray.copyOf(list).toJSONString()>")
chamada antiga: assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str)
nova chamada: assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str, "Era esperado valores iguais, mas  '{\'age\':20,\'oAuthName\':\'xxx\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str)
nova chamada: assertEquals("{\"age\":20,\"oAuthName\":\"xxx\"}", str, "Era esperado valores iguais, mas  '{\'age\':20,\'oAuthName\':\'xxx\'}' é diferente de " + " str")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("requestId", bean.requestId)
nova chamada: assertEquals("requestId", bean.requestId, "Era esperado valores iguais, mas  'requestId' é diferente de " + " bean.requestId")
chamada antiga: assertEquals("{\"1\":\"1\",\"2\":\"2\"}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField))
nova chamada: assertEquals("{\"1\":\"1\",\"2\":\"2\"}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField), "Era esperado valores iguais, mas  '{\'1\':\'1\',\'2\':\'2\'}' é diferente de " + result2427 + " <JSON.toJSONString(map, JSONWriter.Feature.MapSortField)>")
chamada antiga: assertEquals(str, JSON.parse(json))
nova chamada: assertEquals(str, JSON.parse(json), "Era esperado valores iguais, mas  str é diferente de " + result2428 + " <JSON.parse(json)>")
chamada antiga: assertEquals(str, JSON.parse(jsonBytes))
nova chamada: assertEquals(str, JSON.parse(jsonBytes), "Era esperado valores iguais, mas  str é diferente de " + result2429 + " <JSON.parse(jsonBytes)>")
chamada antiga: assertEquals(str, JSON.parse(json))
nova chamada: assertEquals(str, JSON.parse(json), "Era esperado valores iguais, mas  str é diferente de " + result2430 + " <JSON.parse(json)>")
chamada antiga: assertEquals(str, JSON.parse(jsonBytes))
nova chamada: assertEquals(str, JSON.parse(jsonBytes), "Era esperado valores iguais, mas  str é diferente de " + result2431 + " <JSON.parse(jsonBytes)>")
chamada antiga: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(JSONObject.of("value", 161127097456177153L), JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(JSONObject.of("value", 161127097456177153L), JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'161127097456177153\'}' é diferente de " + result2432 + " <JSON.toJSONString(JSONObject.of('value', 161127097456177153L), JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'161127097456177153\'}' é diferente de " + result2433 + " <JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"161127097456177153\"}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'161127097456177153\'}' é diferente de " + result2434 + " <JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals("{\"pageIndex\":\"0\",\"pageSize\":\"10\",\"q\":\"\"}", params)
nova chamada: assertEquals("{\"pageIndex\":\"0\",\"pageSize\":\"10\",\"q\":\"\"}", params, "Era esperado valores iguais, mas  '{\'pageIndex\':\'0\',\'pageSize\':\'10\',\'q\':\'\'}' é diferente de " + " params")
chamada antiga: assertEquals("{\"xid\":null}", str)
nova chamada: assertEquals("{\"xid\":null}", str, "Era esperado valores iguais, mas  '{\'xid\':null}' é diferente de " + " str")
chamada antiga: assertSame(UserStatus.NORMAL, JSON.parseObject("{\"state\":0}").toJavaObject(User.class).state)
nova chamada: assertSame(UserStatus.NORMAL, JSON.parseObject("{\"state\":0}").toJavaObject(User.class).state, "Era esperado objetos iguais, mas  UserStatus.NORMAL é diferente de " + " JSON.parseObject('{\'state\':0}').toJavaObject(User.class).state")
chamada antiga: assertSame(UserStatus.LOCKED, JSON.parseObject("{\"state\":1}").toJavaObject(User.class).state)
nova chamada: assertSame(UserStatus.LOCKED, JSON.parseObject("{\"state\":1}").toJavaObject(User.class).state, "Era esperado objetos iguais, mas  UserStatus.LOCKED é diferente de " + " JSON.parseObject('{\'state\':1}').toJavaObject(User.class).state")
chamada antiga: assertNull(JSON.parseObject("{\"state\":-1}").toJavaObject(User.class).state)
nova chamada: assertNull(JSON.parseObject("{\"state\":-1}").toJavaObject(User.class).state, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"code\":0,\"data\":1}", JSON.toJSONString(data))
nova chamada: assertEquals("{\"code\":0,\"data\":1}", JSON.toJSONString(data), "Era esperado valores iguais, mas  '{\'code\':0,\'data\':1}' é diferente de " + result2435 + " <JSON.toJSONString(data)>")
chamada antiga: assertNotNull(JSON.parseObject(s, 27, 22))
nova chamada: assertNotNull(JSON.parseObject(s, 27, 22), "Era esperado não nulo, mas " + result2436 + " <JSON.parseObject(s, 27, 22)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(s.toCharArray(), 27, 22))
nova chamada: assertNotNull(JSON.parseObject(s.toCharArray(), 27, 22), "Era esperado não nulo, mas " + result2437 + " <JSON.parseObject(s.toCharArray(), 27, 22)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 27, 22))
nova chamada: assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 27, 22), "Era esperado não nulo, mas " + result2438 + " <JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 27, 22)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(s, 0, 22))
nova chamada: assertNotNull(JSON.parseObject(s, 0, 22), "Era esperado não nulo, mas " + result2439 + " <JSON.parseObject(s, 0, 22)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(s.toCharArray(), 0, 22))
nova chamada: assertNotNull(JSON.parseObject(s.toCharArray(), 0, 22), "Era esperado não nulo, mas " + result2440 + " <JSON.parseObject(s.toCharArray(), 0, 22)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 0, 22))
nova chamada: assertNotNull(JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 0, 22), "Era esperado não nulo, mas " + result2441 + " <JSON.parseObject(s.getBytes(StandardCharsets.UTF_8), 0, 22)> é nulo")
chamada antiga: assertEquals("2022-08-12T21:43:01.538", bean.createTime.toString())
nova chamada: assertEquals("2022-08-12T21:43:01.538", bean.createTime.toString(), "Era esperado valores iguais, mas  '2022-08-12T21:43:01.538' é diferente de " + result2442 + " <bean.createTime.toString()>")
chamada antiga: assertEquals("2022-08-12T21:43:01.538", bean1.createTime.toString())
nova chamada: assertEquals("2022-08-12T21:43:01.538", bean1.createTime.toString(), "Era esperado valores iguais, mas  '2022-08-12T21:43:01.538' é diferente de " + result2443 + " <bean1.createTime.toString()>")
chamada antiga: assertEquals("2022-08-12T21:43:01.538", bean2.createTime.toString())
nova chamada: assertEquals("2022-08-12T21:43:01.538", bean2.createTime.toString(), "Era esperado valores iguais, mas  '2022-08-12T21:43:01.538' é diferente de " + result2444 + " <bean2.createTime.toString()>")
chamada antiga: assertNotNull(jsonObject.toJavaObject(TestObj.class).whiteListIds)
nova chamada: assertNotNull(jsonObject.toJavaObject(TestObj.class).whiteListIds, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jsonObject.to(TestObj.class))
nova chamada: assertNotNull(jsonObject.to(TestObj.class), "Era esperado não nulo, mas " + result2445 + " <jsonObject.to(TestObj.class)> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(json, TestObj.class).whiteListIds)
nova chamada: assertNotNull(JSON.parseObject(json, TestObj.class).whiteListIds, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[1,2,3]", jsonObject.get("b").toString())
nova chamada: assertEquals("[1,2,3]", jsonObject.get("b").toString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result2446 + " <jsonObject.get('b').toString()>")
chamada antiga: assertNotNull(fieldRef.get())
nova chamada: assertNotNull(fieldRef.get(), "Era esperado não nulo, mas " + result2447 + " <fieldRef.get()> é nulo")
chamada antiga: assertEquals(map, map1)
nova chamada: assertEquals(map, map1, "Era esperado valores iguais, mas  map é diferente de " + " map1")
chamada antiga: assertNotNull(bizDTO.getCalltime())
nova chamada: assertNotNull(bizDTO.getCalltime(), "Era esperado não nulo, mas " + result2448 + " <bizDTO.getCalltime()> é nulo")
chamada antiga: assertEquals(2022, calltime.getYear())
nova chamada: assertEquals(2022, calltime.getYear(), "Era esperado valores iguais, mas  2022 é diferente de " + result2449 + " <calltime.getYear()>")
chamada antiga: assertEquals(12, calltime.getMonthValue())
nova chamada: assertEquals(12, calltime.getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result2450 + " <calltime.getMonthValue()>")
chamada antiga: assertEquals(2, calltime.getDayOfMonth())
nova chamada: assertEquals(2, calltime.getDayOfMonth(), "Era esperado valores iguais, mas  2 é diferente de " + result2451 + " <calltime.getDayOfMonth()>")
chamada antiga: assertEquals(11, calltime.getHour())
nova chamada: assertEquals(11, calltime.getHour(), "Era esperado valores iguais, mas  11 é diferente de " + result2452 + " <calltime.getHour()>")
chamada antiga: assertEquals(33, calltime.getMinute())
nova chamada: assertEquals(33, calltime.getMinute(), "Era esperado valores iguais, mas  33 é diferente de " + result2453 + " <calltime.getMinute()>")
chamada antiga: assertEquals(0, tagView.history)
nova chamada: assertEquals(0, tagView.history, "Era esperado valores iguais, mas  0 é diferente de " + " tagView.history")
chamada antiga: assertEquals("AM", tagView.tag)
nova chamada: assertEquals("AM", tagView.tag, "Era esperado valores iguais, mas  'AM' é diferente de " + " tagView.tag")
chamada antiga: assertEquals("{\"name\":\"张三\",\"roleType\":1}", str)
nova chamada: assertEquals("{\"name\":\"张三\",\"roleType\":1}", str, "Era esperado valores iguais, mas  '{\'name\':\'张三\',\'roleType\':1}' é diferente de " + " str")
chamada antiga: assertEquals("{\"test1\":\"/usr/bin\"}", JSONObject.toJSONString(ext))
nova chamada: assertEquals("{\"test1\":\"/usr/bin\"}", JSONObject.toJSONString(ext), "Era esperado valores iguais, mas  '{\'test1\':\'/usr/bin\'}' é diferente de " + result2454 + " <JSONObject.toJSONString(ext)>")
chamada antiga: assertArrayEquals(Base64.getDecoder().decode(base64Str), bean.value)
nova chamada: assertArrayEquals(Base64.getDecoder().decode(base64Str), bean.value, "Era esperado arrays iguais, mas " + result2455 + " <Base64.getDecoder().decode(base64Str)> é diferente de " + " bean.value")
chamada antiga: assertNotNull(JSON.parseObject(str, BizDTO.class).getCreateTime())
nova chamada: assertNotNull(JSON.parseObject(str, BizDTO.class).getCreateTime(), "Era esperado não nulo, mas " + result2456 + " <JSON.parseObject(str, BizDTO.class).getCreateTime()> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(str.toCharArray(), BizDTO.class).getCreateTime())
nova chamada: assertNotNull(JSON.parseObject(str.toCharArray(), BizDTO.class).getCreateTime(), "Era esperado não nulo, mas " + result2457 + " <JSON.parseObject(str.toCharArray(), BizDTO.class).getCreateTime()> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(str.getBytes(), BizDTO.class).getCreateTime())
nova chamada: assertNotNull(JSON.parseObject(str.getBytes(), BizDTO.class).getCreateTime(), "Era esperado não nulo, mas " + result2458 + " <JSON.parseObject(str.getBytes(), BizDTO.class).getCreateTime()> é nulo")
chamada antiga: assertNotNull(JSON.parseObject(str).toJavaObject(BizDTO.class).getCreateTime())
nova chamada: assertNotNull(JSON.parseObject(str).toJavaObject(BizDTO.class).getCreateTime(), "Era esperado não nulo, mas " + result2459 + " <JSON.parseObject(str).toJavaObject(BizDTO.class).getCreateTime()> é nulo")
chamada antiga: assertEquals("{\"a\":\"b12\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter1(), new TestValueFilter2() }, JSONWriter.Feature.WriteMapNullValue))
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\':\'b12\'}' é diferente de " + result2460 + " <JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter1(), new TestValueFilter2() }, JSONWriter.Feature.WriteMapNullValue)>", "{\"a\":\"b12\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter1(), new TestValueFilter2() }, JSONWriter.Feature.WriteMapNullValue))
chamada antiga: assertEquals("{\"a\":\"b21\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter2(), new TestValueFilter1() }, JSONWriter.Feature.WriteMapNullValue))
nova chamada: assertEquals("Era esperado valores iguais, mas  '{\'a\':\'b21\'}' é diferente de " + result2461 + " <JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter2(), new TestValueFilter1() }, JSONWriter.Feature.WriteMapNullValue)>", "{\"a\":\"b21\"}", JSON.toJSONString(map, new ValueFilter[] { new TestValueFilter2(), new TestValueFilter1() }, JSONWriter.Feature.WriteMapNullValue))
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean1.tagInfos)
nova chamada: assertNotNull(bean1.tagInfos, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.tagInfos.getClass(), bean1.tagInfos.getClass())
nova chamada: assertEquals(bean.tagInfos.getClass(), bean1.tagInfos.getClass(), "Era esperado valores iguais, mas " + result2462 + " <bean.tagInfos.getClass()> é diferente de " + result2463 + " <bean1.tagInfos.getClass()>")
chamada antiga: assertEquals("{\"RUN\":124,\"SSRC\":[null,15,null,null,null,null,null,null,null,null,null,null,null]}", JSON.toJSONString(to))
nova chamada: assertEquals("{\"RUN\":124,\"SSRC\":[null,15,null,null,null,null,null,null,null,null,null,null,null]}", JSON.toJSONString(to), "Era esperado valores iguais, mas  '{\'RUN\':124,\'SSRC\':[null,15,null,null,null,null,null,null,null,null,null,null,null]}' é diferente de " + result2464 + " <JSON.toJSONString(to)>")
chamada antiga: assertEquals("{\"a\":{}}", object.toJSONString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":{}}", object.toJSONString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':{}}' é diferente de " + result2465 + " <object.toJSONString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"a\":[{}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":[{}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':[{}]}' é diferente de " + result2466 + " <object1.toJSONString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("xxx", bean.a.b)
nova chamada: assertEquals("xxx", bean.a.b, "Era esperado valores iguais, mas  'xxx' é diferente de " + " bean.a.b")
chamada antiga: assertNull(bean.a.b)
nova chamada: assertNull(bean.a.b, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"a\":{}}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"a\":{}}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'a\':{}}' é diferente de " + result2467 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"a\":[{}]}", JSON.toJSONString(bean1))
nova chamada: assertEquals("{\"a\":[{}]}", JSON.toJSONString(bean1), "Era esperado valores iguais, mas  '{\'a\':[{}]}' é diferente de " + result2468 + " <JSON.toJSONString(bean1)>")
chamada antiga: assertEquals("{\"a\":{\"b\":null}}", object.toJSONString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":{\"b\":null}}", object.toJSONString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':{\'b\':null}}' é diferente de " + result2469 + " <object.toJSONString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"a\":[{\"b\":null}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":[{\"b\":null}]}", object1.toJSONString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':[{\'b\':null}]}' é diferente de " + result2470 + " <object1.toJSONString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("xxx", bean.a.b)
nova chamada: assertEquals("xxx", bean.a.b, "Era esperado valores iguais, mas  'xxx' é diferente de " + " bean.a.b")
chamada antiga: assertNull(bean.a.b)
nova chamada: assertNull(bean.a.b, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"a\":{\"b\":null}}", JSON.toJSONString(bean, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":{\"b\":null}}", JSON.toJSONString(bean, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':{\'b\':null}}' é diferente de " + result2471 + " <JSON.toJSONString(bean, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"a\":[{\"b\":null}]}", JSON.toJSONString(bean1, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":[{\"b\":null}]}", JSON.toJSONString(bean1, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':[{\'b\':null}]}' é diferente de " + result2472 + " <JSON.toJSONString(bean1, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertNull(JSONPath.eval("", path))
nova chamada: assertNull(JSONPath.eval("", path), "Era esperado nulo, mas " + result2473 + " <JSONPath.eval('', path)> não é nulo")
chamada antiga: assertNull(JSONPath.eval("{}", path))
nova chamada: assertNull(JSONPath.eval("{}", path), "Era esperado nulo, mas " + result2474 + " <JSONPath.eval('{}', path)> não é nulo")
chamada antiga: assertNull(JSONPath.eval("{\"data\":{}}", path))
nova chamada: assertNull(JSONPath.eval("{\"data\":{}}", path), "Era esperado nulo, mas " + result2475 + " <JSONPath.eval('{\'data\':{}}', path)> não é nulo")
chamada antiga: assertNull(JSONPath.eval("{\"data\":{\"plan\":{}}}", path))
nova chamada: assertNull(JSONPath.eval("{\"data\":{\"plan\":{}}}", path), "Era esperado nulo, mas " + result2476 + " <JSONPath.eval('{\'data\':{\'plan\':{}}}', path)> não é nulo")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONPath.extract("", path, JSONPath.Feature.AlwaysReturnList)))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONPath.extract("", path, JSONPath.Feature.AlwaysReturnList)), "Era esperado valores iguais, mas  '[]' é diferente de " + result2477 + " <JSON.toJSONString(JSONPath.extract('', path, JSONPath.Feature.AlwaysReturnList))>")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONPath.extract("{}", path, JSONPath.Feature.AlwaysReturnList)))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONPath.extract("{}", path, JSONPath.Feature.AlwaysReturnList)), "Era esperado valores iguais, mas  '[]' é diferente de " + result2478 + " <JSON.toJSONString(JSONPath.extract('{}', path, JSONPath.Feature.AlwaysReturnList))>")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONPath.extract("{\"data\":{}}", path, JSONPath.Feature.AlwaysReturnList)))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONPath.extract("{\"data\":{}}", path, JSONPath.Feature.AlwaysReturnList)), "Era esperado valores iguais, mas  '[]' é diferente de " + result2479 + " <JSON.toJSONString(JSONPath.extract('{\'data\':{}}', path, JSONPath.Feature.AlwaysReturnList))>")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONPath.eval("{\"data\":{\"plan\":{\"targets\":[]}}}", path)))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONPath.eval("{\"data\":{\"plan\":{\"targets\":[]}}}", path)), "Era esperado valores iguais, mas  '[]' é diferente de " + result2480 + " <JSON.toJSONString(JSONPath.eval('{\'data\':{\'plan\':{\'targets\':[]}}}', path))>")
chamada antiga: assertEquals(user.name, temp.name)
nova chamada: assertEquals(user.name, temp.name, "Era esperado valores iguais, mas  user.name é diferente de " + " temp.name")
chamada antiga: assertEquals("[{\"a\":1}]", arr.toString())
nova chamada: assertEquals("[{\"a\":1}]", arr.toString(), "Era esperado valores iguais, mas  '[{\'a\':1}]' é diferente de " + result2481 + " <arr.toString()>")
chamada antiga: assertEquals("[{\"a\":1}]", ((JSONArray) JSONPath.extract(raw, "$[0][*]")).toJSONString())
nova chamada: assertEquals("[{\"a\":1}]", ((JSONArray) JSONPath.extract(raw, "$[0][*]")).toJSONString(), "Era esperado valores iguais, mas  '[{\'a\':1}]' é diferente de " + result2482 + " <((JSONArray) JSONPath.extract(raw, '$[0][*]')).toJSONString()>")
chamada antiga: assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[*][*]").toString())
nova chamada: assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[*][*]").toString(), "Era esperado valores iguais, mas  '[{\'a\':1}]' é diferente de " + result2483 + " <JSONPath.eval(array, '$[*][*]').toString()>")
chamada antiga: assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[0][*]").toString())
nova chamada: assertEquals("[{\"a\":1}]", JSONPath.eval(array, "$[0][*]").toString(), "Era esperado valores iguais, mas  '[{\'a\':1}]' é diferente de " + result2484 + " <JSONPath.eval(array, '$[0][*]').toString()>")
chamada antiga: assertEquals("[{\"a\":3}]", ((JSONArray) JSONPath.extract(raw, "$[1][*]")).toJSONString())
nova chamada: assertEquals("[{\"a\":3}]", ((JSONArray) JSONPath.extract(raw, "$[1][*]")).toJSONString(), "Era esperado valores iguais, mas  '[{\'a\':3}]' é diferente de " + result2485 + " <((JSONArray) JSONPath.extract(raw, '$[1][*]')).toJSONString()>")
chamada antiga: assertEquals("{\"a\":1}", ((JSONObject) JSONPath.extract(raw, "$[0][0]")).toJSONString())
nova chamada: assertEquals("{\"a\":1}", ((JSONObject) JSONPath.extract(raw, "$[0][0]")).toJSONString(), "Era esperado valores iguais, mas  '{\'a\':1}' é diferente de " + result2486 + " <((JSONObject) JSONPath.extract(raw, '$[0][0]')).toJSONString()>")
chamada antiga: assertEquals("[1,2,3]", ((JSONArray) JSONPath.extract(raw, "$[*][*].a")).toJSONString())
nova chamada: assertEquals("[1,2,3]", ((JSONArray) JSONPath.extract(raw, "$[*][*].a")).toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result2487 + " <((JSONArray) JSONPath.extract(raw, '$[*][*].a')).toJSONString()>")
chamada antiga: assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$[*].id").toString())
nova chamada: assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$[*].id").toString(), "Era esperado valores iguais, mas  '[\'1\',\'2\']' é diferente de " + result2488 + " <JSONPath.extract(str, '$[*].id').toString()>")
chamada antiga: assertEquals("[\"2\"]", JSONPath.extract(str, "$[?(@.name=='b')].id").toString())
nova chamada: assertEquals("[\"2\"]", JSONPath.extract(str, "$[?(@.name=='b')].id").toString(), "Era esperado valores iguais, mas  '[\'2\']' é diferente de " + result2489 + " <JSONPath.extract(str, '$[?(@.name=='b')].id').toString()>")
chamada antiga: assertNotNull(bean.predictDeliveryTime)
nova chamada: assertNotNull(bean.predictDeliveryTime, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(is)
nova chamada: assertNotNull(is, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2490 + " <list.size()>")
chamada antiga: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
nova chamada: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString(), "Era esperado valores iguais, mas  '{\'one\':true,\'three\':[\'red\',\'yellow\',[\'blue\',\'azure\',\'cobalt\',\'teal\'],\'orange\'],\'two\':19.5,\'four\':\'poop\'}' é diferente de " + result2491 + " <list.get(0).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'red\',\'yellow\',[\'citrus\',\'blue\',\'cobalt\'],\'black\'],\'two\':129.5,\'four\':\'stars\'}' é diferente de " + result2492 + " <list.get(1).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'pink\',[\'citrus\',\'blue\'],\'gold\'],\'two\':222,\'four\':\'fiat\'}' é diferente de " + result2493 + " <list.get(2).toString()>")
chamada antiga: assertNotNull(is)
nova chamada: assertNotNull(is, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2494 + " <list.size()>")
chamada antiga: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
nova chamada: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString(), "Era esperado valores iguais, mas  '{\'one\':true,\'three\':[\'red\',\'yellow\',[\'blue\',\'azure\',\'cobalt\',\'teal\'],\'orange\'],\'two\':19.5,\'four\':\'poop\'}' é diferente de " + result2495 + " <list.get(0).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'red\',\'yellow\',[\'citrus\',\'blue\',\'cobalt\'],\'black\'],\'two\':129.5,\'four\':\'stars\'}' é diferente de " + result2496 + " <list.get(1).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'pink\',[\'citrus\',\'blue\'],\'gold\'],\'two\':222,\'four\':\'fiat\'}' é diferente de " + result2497 + " <list.get(2).toString()>")
chamada antiga: assertNotNull(is)
nova chamada: assertNotNull(is, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2498 + " <list.size()>")
chamada antiga: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
nova chamada: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString(), "Era esperado valores iguais, mas  '{\'one\':true,\'three\':[\'red\',\'yellow\',[\'blue\',\'azure\',\'cobalt\',\'teal\'],\'orange\'],\'two\':19.5,\'four\':\'poop\'}' é diferente de " + result2499 + " <list.get(0).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'red\',\'yellow\',[\'citrus\',\'blue\',\'cobalt\'],\'black\'],\'two\':129.5,\'four\':\'stars\'}' é diferente de " + result2500 + " <list.get(1).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'pink\',[\'citrus\',\'blue\'],\'gold\'],\'two\':222,\'four\':\'fiat\'}' é diferente de " + result2501 + " <list.get(2).toString()>")
chamada antiga: assertNotNull(is)
nova chamada: assertNotNull(is, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2502 + " <list.size()>")
chamada antiga: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString())
nova chamada: assertEquals("{\"one\":true,\"three\":[\"red\",\"yellow\",[\"blue\",\"azure\",\"cobalt\",\"teal\"],\"orange\"],\"two\":19.5,\"four\":\"poop\"}", list.get(0).toString(), "Era esperado valores iguais, mas  '{\'one\':true,\'three\':[\'red\',\'yellow\',[\'blue\',\'azure\',\'cobalt\',\'teal\'],\'orange\'],\'two\':19.5,\'four\':\'poop\'}' é diferente de " + result2503 + " <list.get(0).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"red\",\"yellow\",[\"citrus\",\"blue\",\"cobalt\"],\"black\"],\"two\":129.5,\"four\":\"stars\"}", list.get(1).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'red\',\'yellow\',[\'citrus\',\'blue\',\'cobalt\'],\'black\'],\'two\':129.5,\'four\':\'stars\'}' é diferente de " + result2504 + " <list.get(1).toString()>")
chamada antiga: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString())
nova chamada: assertEquals("{\"one\":false,\"three\":[\"pink\",[\"citrus\",\"blue\"],\"gold\"],\"two\":222,\"four\":\"fiat\"}", list.get(2).toString(), "Era esperado valores iguais, mas  '{\'one\':false,\'three\':[\'pink\',[\'citrus\',\'blue\'],\'gold\'],\'two\':222,\'four\':\'fiat\'}' é diferente de " + result2505 + " <list.get(2).toString()>")
chamada antiga: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0])
nova chamada: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0], "Era esperado valores iguais, mas  '[{\'name\':\'a.b\'},{\'name\':\'c\'}]' é diferente de " + " values[0]")
chamada antiga: assertArrayEquals(new String[] { "{\"name\":\"a.b\"}", "{\"name\":\"c\"}" }, (String[]) values[1])
nova chamada: assertArrayEquals(new String[] { "{\"name\":\"a.b\"}", "{\"name\":\"c\"}" }, (String[]) values[1], "Era esperado arrays iguais, mas  new String[] { '{\'name\':\'a.b\'}', '{\'name\':\'c\'}' } é diferente de " + " (String[]) values[1]")
chamada antiga: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0])
nova chamada: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[0], "Era esperado valores iguais, mas  '[{\'name\':\'a.b\'},{\'name\':\'c\'}]' é diferente de " + " values[0]")
chamada antiga: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[1])
nova chamada: assertEquals("[{\"name\":\"a.b\"},{\"name\":\"c\"}]", values[1], "Era esperado valores iguais, mas  '[{\'name\':\'a.b\'},{\'name\':\'c\'}]' é diferente de " + " values[1]")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.hsf.VeryComplexDO\",\n" + "\t\"fshort\":4,\n" + "\t\"pBaseDO\":{},\n" + "\t\"pbyte\":5,\n" + "\t\"pdouble\":6.6,\n" + "\t\"pfloat\":7.7,\n" + "\t\"pint\":8,\n" + "\t\"plong\":9\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.hsf.VeryComplexDO\",\n" + "\t\"fshort\":4,\n" + "\t\"pBaseDO\":{},\n" + "\t\"pbyte\":5,\n" + "\t\"pdouble\":6.6,\n" + "\t\"pfloat\":7.7,\n" + "\t\"pint\":8,\n" + "\t\"plong\":9\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.hsf.VeryComplexDO\',\n' + '\t\'fshort\':4,\n' + '\t\'pBaseDO\':{},\n' + '\t\'pbyte\':5,\n' + '\t\'pdouble\':6.6,\n' + '\t\'pfloat\':7.7,\n' + '\t\'pint\':8,\n' + '\t\'plong\':9\n' + '}' é diferente de " + result2506 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertNotNull(protocol.getData())
nova chamada: assertNotNull(protocol.getData(), "Era esperado não nulo, mas " + result2507 + " <protocol.getData()> é nulo")
chamada antiga: assertSame(protocol.getData(), protocol.getEndpoint())
nova chamada: assertSame(protocol.getData(), protocol.getEndpoint(), "Era esperado objetos iguais, mas " + result2508 + " <protocol.getData()> é diferente de " + result2509 + " <protocol.getEndpoint()>")
chamada antiga: assertEquals(bean.THIS_IS_VALUE_1, result.THIS_IS_VALUE_1)
nova chamada: assertEquals(bean.THIS_IS_VALUE_1, result.THIS_IS_VALUE_1, "Era esperado valores iguais, mas  bean.THIS_IS_VALUE_1 é diferente de " + " result.THIS_IS_VALUE_1")
chamada antiga: assertEquals(bean.THIS_IS_VALUE_2, result.THIS_IS_VALUE_2)
nova chamada: assertEquals(bean.THIS_IS_VALUE_2, result.THIS_IS_VALUE_2, "Era esperado valores iguais, mas  bean.THIS_IS_VALUE_2 é diferente de " + " result.THIS_IS_VALUE_2")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result2510 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result2511 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result2512 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result2513 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result2514 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result2515 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result2516 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result2517 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result2518 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result2519 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result2520 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result2521 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result2522 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result2523 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result2524 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result2525 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result2526 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result2527 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result2528 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result2529 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result2530 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result2531 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result2532 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result2533 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result2534 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes, 0, jsonBytes.length, StandardCharsets.US_ASCII))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes, 0, jsonBytes.length, StandardCharsets.US_ASCII), "Era esperado valores iguais, mas  id é diferente de " + result2535 + " <jsonPath.extract(jsonBytes, 0, jsonBytes.length, StandardCharsets.US_ASCII)>")
chamada antiga: assertEquals("20121213", bean1.date)
nova chamada: assertEquals("20121213", bean1.date, "Era esperado valores iguais, mas  '20121213' é diferente de " + " bean1.date")
chamada antiga: assertEquals(bean.date, bean_x1.date)
nova chamada: assertEquals(bean.date, bean_x1.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean_x1.date")
chamada antiga: assertNotNull(bean2.date)
nova chamada: assertNotNull(bean2.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.date.atStartOfDay(DateUtils.DEFAULT_ZONE_ID).toInstant().toEpochMilli(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.atStartOfDay(DateUtils.DEFAULT_ZONE_ID).toInstant().toEpochMilli(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result2536 + " <bean.date.atStartOfDay(DateUtils.DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result2537 + " <bean2.date.getTime()>")
chamada antiga: assertEquals(bean1.date, bean1_x1.date)
nova chamada: assertEquals(bean1.date, bean1_x1.date, "Era esperado valores iguais, mas  bean1.date é diferente de " + " bean1_x1.date")
chamada antiga: assertEquals(str, str1)
nova chamada: assertEquals(str, str1, "Era esperado valores iguais, mas  str é diferente de " + " str1")
chamada antiga: assertEquals(str, str1)
nova chamada: assertEquals(str, str1, "Era esperado valores iguais, mas  str é diferente de " + " str1")
chamada antiga: assertEquals(BigInteger.valueOf(123), response.value)
nova chamada: assertEquals(BigInteger.valueOf(123), response.value, "Era esperado valores iguais, mas " + result2538 + " <BigInteger.valueOf(123)> é diferente de " + " response.value")
chamada antiga: assertEquals(BigInteger.valueOf(123), response.value)
nova chamada: assertEquals(BigInteger.valueOf(123), response.value, "Era esperado valores iguais, mas " + result2539 + " <BigInteger.valueOf(123)> é diferente de " + " response.value")
chamada antiga: assertEquals(1, beanList.size())
nova chamada: assertEquals(1, beanList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2540 + " <beanList.size()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2541 + " <list.size()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2542 + " <map.size()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, array.length)
nova chamada: assertEquals(1, array.length, "Era esperado valores iguais, mas  1 é diferente de " + " array.length")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2543 + " <list.size()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("XXX", bean.name)
nova chamada: assertEquals("XXX", bean.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean.name")
chamada antiga: assertEquals(Fnv.hashCode64("id"), jsonReader.readFieldNameHashCodeUnquote())
nova chamada: assertEquals(Fnv.hashCode64("id"), jsonReader.readFieldNameHashCodeUnquote(), "Era esperado valores iguais, mas " + result2544 + " <Fnv.hashCode64('id')> é diferente de " + result2545 + " <jsonReader.readFieldNameHashCodeUnquote()>")
chamada antiga: assertEquals(values[0], JSONPath.of("$[0]").eval(values))
nova chamada: assertEquals(values[0], JSONPath.of("$[0]").eval(values), "Era esperado valores iguais, mas  values[0] é diferente de " + result2546 + " <JSONPath.of('$[0]').eval(values)>")
chamada antiga: assertEquals("[1,2]", JSONPath.of("$[0,1]").eval(values).toString())
nova chamada: assertEquals("[1,2]", JSONPath.of("$[0,1]").eval(values).toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result2547 + " <JSONPath.of('$[0,1]').eval(values).toString()>")
chamada antiga: assertEquals("[1,2]", JSONPath.of("$[:1]").eval(values).toString())
nova chamada: assertEquals("[1,2]", JSONPath.of("$[:1]").eval(values).toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result2548 + " <JSONPath.of('$[:1]').eval(values).toString()>")
chamada antiga: assertEquals(3, JSONPath.of("$.length()").eval(values))
nova chamada: assertEquals(3, JSONPath.of("$.length()").eval(values), "Era esperado valores iguais, mas  3 é diferente de " + result2549 + " <JSONPath.of('$.length()').eval(values)>")
chamada antiga: assertEquals(1, JSONPath.of("$.length()").eval(values))
nova chamada: assertEquals(1, JSONPath.of("$.length()").eval(values), "Era esperado valores iguais, mas  1 é diferente de " + result2550 + " <JSONPath.of('$.length()').eval(values)>")
chamada antiga: assertTrue(JSONPath.of("$.a.b").isRef())
nova chamada: assertTrue(JSONPath.of("$.a.b").isRef(), "Era esperado verdadeiro, mas " + result2551 + " <JSONPath.of('$.a.b').isRef()> é falso")
chamada antiga: assertTrue(JSONPath.of("$.v0000").contains(vo))
nova chamada: assertTrue(JSONPath.of("$.v0000").contains(vo), "Era esperado verdadeiro, mas " + result2552 + " <JSONPath.of('$.v0000').contains(vo)> é falso")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val=101)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val=101)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2553 + " <JSONPath.of('$[?(@.val=101)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<=101)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<=101)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2554 + " <JSONPath.of('$[?(@.val<=101)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<102)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val<102)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2555 + " <JSONPath.of('$[?(@.val<102)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>=102)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>=102)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2556 + " <JSONPath.of('$[?(@.val>=102)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>101)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val>101)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2557 + " <JSONPath.of('$[?(@.val>101)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val!=101)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val!=101)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2558 + " <JSONPath.of('$[?(@.val!=101)]').eval(array).toString()>")
chamada antiga: assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  values[0] é diferente de " + result2559 + " <JSONPath.of('$[0]').extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString())
nova chamada: assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result2560 + " <JSONPath.of('$[0,1]').extract(JSONReader.ofJSONB(jsonbBytes)).toString()>")
chamada antiga: assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString())
nova chamada: assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.ofJSONB(jsonbBytes)).toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result2561 + " <JSONPath.of('$[:1]').extract(JSONReader.ofJSONB(jsonbBytes)).toString()>")
chamada antiga: assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.of(jsonString)))
nova chamada: assertEquals(values[0], JSONPath.of("$[0]").extract(JSONReader.of(jsonString)), "Era esperado valores iguais, mas  values[0] é diferente de " + result2562 + " <JSONPath.of('$[0]').extract(JSONReader.of(jsonString))>")
chamada antiga: assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.of(jsonString)).toString())
nova chamada: assertEquals("[1,2]", JSONPath.of("$[0,1]").extract(JSONReader.of(jsonString)).toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result2563 + " <JSONPath.of('$[0,1]').extract(JSONReader.of(jsonString)).toString()>")
chamada antiga: assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.of(jsonString)).toString())
nova chamada: assertEquals("[1]", JSONPath.of("$[:1]").extract(JSONReader.of(jsonString)).toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result2564 + " <JSONPath.of('$[:1]').extract(JSONReader.of(jsonString)).toString()>")
chamada antiga: assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0:]").extract(JSONReader.of(jsonString)).toString())
nova chamada: assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0:]").extract(JSONReader.of(jsonString)).toString(), "Era esperado valores iguais, mas  '[1,2,true,\'a\',false,[],{},null]' é diferente de " + result2565 + " <JSONPath.of('$[0:]').extract(JSONReader.of(jsonString)).toString()>")
chamada antiga: assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0,1,2,3,4,5,6,7]").extract(JSONReader.of(jsonString)).toString())
nova chamada: assertEquals("[1,2,true,\"a\",false,[],{},null]", JSONPath.of("$[0,1,2,3,4,5,6,7]").extract(JSONReader.of(jsonString)).toString(), "Era esperado valores iguais, mas  '[1,2,true,\'a\',false,[],{},null]' é diferente de " + result2566 + " <JSONPath.of('$[0,1,2,3,4,5,6,7]').extract(JSONReader.of(jsonString)).toString()>")
chamada antiga: assertEquals("[4,5]", JSONPath.of("$[?(@>3)]").extract(JSONReader.of(jsonString)).toString())
nova chamada: assertEquals("[4,5]", JSONPath.of("$[?(@>3)]").extract(JSONReader.of(jsonString)).toString(), "Era esperado valores iguais, mas  '[4,5]' é diferente de " + result2567 + " <JSONPath.of('$[?(@>3)]').extract(JSONReader.of(jsonString)).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val='abc')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val='abc')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2568 + " <JSONPath.of('$[?(@.val='abc')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>'abc')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>'abc')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abd\'}]' é diferente de " + result2569 + " <JSONPath.of('$[?(@.val>'abc')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"},{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>='abc')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"},{\"val\":\"abd\"}]", JSONPath.of("$[?(@.val>='abc')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'},{\'val\':\'abd\'}]' é diferente de " + result2570 + " <JSONPath.of('$[?(@.val>='abc')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<'abd')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<'abd')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2571 + " <JSONPath.of('$[?(@.val<'abd')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<='abc')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<='abc')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2572 + " <JSONPath.of('$[?(@.val<='abc')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val!='abd')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val!='abd')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2573 + " <JSONPath.of('$[?(@.val!='abd')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<>'abd')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val<>'abd')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2574 + " <JSONPath.of('$[?(@.val<>'abd')]').eval(array).toString()>")
chamada antiga: assertEquals("[]", JSONPath.of("$[?(@.val =~ /.*REES/i)]").eval(array).toString())
nova chamada: assertEquals("[]", JSONPath.of("$[?(@.val =~ /.*REES/i)]").eval(array).toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2575 + " <JSONPath.of('$[?(@.val =~ /.*REES/i)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val =~ /ABC/i)]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val =~ /ABC/i)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2576 + " <JSONPath.of('$[?(@.val =~ /ABC/i)]').eval(array).toString()>")
chamada antiga: assertEquals("[]", JSONPath.of("$[?(@.val rlike '.*REES')]").eval(array).toString())
nova chamada: assertEquals("[]", JSONPath.of("$[?(@.val rlike '.*REES')]").eval(array).toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2577 + " <JSONPath.of('$[?(@.val rlike '.*REES')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val rlike 'abc')]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":\"abc\"}]", JSONPath.of("$[?(@.val rlike 'abc')]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':\'abc\'}]' é diferente de " + result2578 + " <JSONPath.of('$[?(@.val rlike 'abc')]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2579 + " <JSONPath.of('$[?(@.val in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2580 + " <JSONPath.of('$[?(@.val not in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101.0}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101.0}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101.0}]' é diferente de " + result2581 + " <JSONPath.of('$[?(@.val in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102.0}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102.0}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102.0}]' é diferente de " + result2582 + " <JSONPath.of('$[?(@.val not in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2583 + " <JSONPath.of('$[?(@.val in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2584 + " <JSONPath.of('$[?(@.val not in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":101}]", JSONPath.of("$[?(@.val in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':101}]' é diferente de " + result2585 + " <JSONPath.of('$[?(@.val in (101))]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString())
nova chamada: assertEquals("[{\"val\":102}]", JSONPath.of("$[?(@.val not in (101))]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'val\':102}]' é diferente de " + result2586 + " <JSONPath.of('$[?(@.val not in (101))]').eval(array).toString()>")
chamada antiga: assertTrue(JSONPath.of("$.id").contains(JSONObject.of("id", 123)))
nova chamada: assertTrue(JSONPath.of("$.id").contains(JSONObject.of("id", 123)), "Era esperado verdadeiro, mas " + result2587 + " <JSONPath.of('$.id').contains(JSONObject.of('id', 123))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0]").contains(JSONArray.of("id")))
nova chamada: assertTrue(JSONPath.of("$[0]").contains(JSONArray.of("id")), "Era esperado verdadeiro, mas " + result2588 + " <JSONPath.of('$[0]').contains(JSONArray.of('id'))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(null, vo))))
nova chamada: assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(null, vo))), "Era esperado verdadeiro, mas " + result2589 + " <JSONPath.of('$[0].v0000').contains(Arrays.asList(Arrays.asList(null, vo)))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(new Object[] { vo })))
nova chamada: assertTrue(JSONPath.of("$[0].v0000").contains(Arrays.asList(new Object[] { vo })), "Era esperado verdadeiro, mas " + result2590 + " <JSONPath.of('$[0].v0000').contains(Arrays.asList(new Object[] { vo }))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { vo })))
nova chamada: assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { vo })), "Era esperado verdadeiro, mas " + result2591 + " <JSONPath.of('$[0].v0000').contains(new JSONArray().fluentAdd(new Object[] { vo }))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { null, JSONObject.of("v0000", 1001) })))
nova chamada: assertTrue(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { null, JSONObject.of("v0000", 1001) })), "Era esperado verdadeiro, mas " + result2592 + " <JSONPath.of('$[0].v0000').contains(new JSONArray().fluentAdd(new Object[] { null, JSONObject.of('v0000', 1001) }))> é falso")
chamada antiga: assertTrue(JSONPath.of("$[0][0]").contains(new JSONArray().fluentAdd(new int[] { 123 })))
nova chamada: assertTrue(JSONPath.of("$[0][0]").contains(new JSONArray().fluentAdd(new int[] { 123 })), "Era esperado verdadeiro, mas " + result2593 + " <JSONPath.of('$[0][0]').contains(new JSONArray().fluentAdd(new int[] { 123 }))> é falso")
chamada antiga: assertEquals("[[0]]", root.toString())
nova chamada: assertEquals("[[0]]", root.toString(), "Era esperado valores iguais, mas  '[[0]]' é diferente de " + result2594 + " <root.toString()>")
chamada antiga: assertEquals("123", JSONPath.of("$.id").extractScalar(JSONReader.of("{\"id\":123}")))
nova chamada: assertEquals("123", JSONPath.of("$.id").extractScalar(JSONReader.of("{\"id\":123}")), "Era esperado valores iguais, mas  '123' é diferente de " + result2595 + " <JSONPath.of('$.id').extractScalar(JSONReader.of('{\'id\':123}'))>")
chamada antiga: assertEquals("123", JSONPath.of("$[0]").extractScalar(JSONReader.of("[123]")))
nova chamada: assertEquals("123", JSONPath.of("$[0]").extractScalar(JSONReader.of("[123]")), "Era esperado valores iguais, mas  '123' é diferente de " + result2596 + " <JSONPath.of('$[0]').extractScalar(JSONReader.of('[123]'))>")
chamada antiga: assertEquals("$[0]", JSONPath.of("$[0]").toString())
nova chamada: assertEquals("$[0]", JSONPath.of("$[0]").toString(), "Era esperado valores iguais, mas  '$[0]' é diferente de " + result2597 + " <JSONPath.of('$[0]').toString()>")
chamada antiga: assertEquals(1, JSONPath.of("$.size()").eval(JSONObject.of("id", 123)))
nova chamada: assertEquals(1, JSONPath.of("$.size()").eval(JSONObject.of("id", 123)), "Era esperado valores iguais, mas  1 é diferente de " + result2598 + " <JSONPath.of('$.size()').eval(JSONObject.of('id', 123))>")
chamada antiga: assertEquals(1, JSONPath.of("$[0].size()").eval(JSONArray.of(JSONObject.of("id", 123))))
nova chamada: assertEquals(1, JSONPath.of("$[0].size()").eval(JSONArray.of(JSONObject.of("id", 123))), "Era esperado valores iguais, mas  1 é diferente de " + result2599 + " <JSONPath.of('$[0].size()').eval(JSONArray.of(JSONObject.of('id', 123)))>")
chamada antiga: assertEquals(1, JSONPath.of("$.child.size()").eval(JSONObject.of("child", JSONObject.of("id", 123))))
nova chamada: assertEquals(1, JSONPath.of("$.child.size()").eval(JSONObject.of("child", JSONObject.of("id", 123))), "Era esperado valores iguais, mas  1 é diferente de " + result2600 + " <JSONPath.of('$.child.size()').eval(JSONObject.of('child', JSONObject.of('id', 123)))>")
chamada antiga: assertEquals(101, root.get("id"))
nova chamada: assertEquals(101, root.get("id"), "Era esperado valores iguais, mas  101 é diferente de " + result2601 + " <root.get('id')>")
chamada antiga: assertEquals(101, root.get(0))
nova chamada: assertEquals(101, root.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result2602 + " <root.get(0)>")
chamada antiga: assertEquals(102, root.get(0))
nova chamada: assertEquals(102, root.get(0), "Era esperado valores iguais, mas  102 é diferente de " + result2603 + " <root.get(0)>")
chamada antiga: assertEquals(103L, root.get(0))
nova chamada: assertEquals(103L, root.get(0), "Era esperado valores iguais, mas  103L é diferente de " + result2604 + " <root.get(0)>")
chamada antiga: assertEquals(101, root[0])
nova chamada: assertEquals(101, root[0], "Era esperado valores iguais, mas  101 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(103L, root[0])
nova chamada: assertEquals(103L, root[0], "Era esperado valores iguais, mas  103L é diferente de " + " root[0]")
chamada antiga: assertEquals(101, root[0])
nova chamada: assertEquals(101, root[0], "Era esperado valores iguais, mas  101 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(101L, root[0])
nova chamada: assertEquals(101L, root[0], "Era esperado valores iguais, mas  101L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(101L, root[0])
nova chamada: assertEquals(101L, root[0], "Era esperado valores iguais, mas  101L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(102L, root[0])
nova chamada: assertEquals(102L, root[0], "Era esperado valores iguais, mas  102L é diferente de " + " root[0]")
chamada antiga: assertEquals(101, root[0])
nova chamada: assertEquals(101, root[0], "Era esperado valores iguais, mas  101 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(102, root[0])
nova chamada: assertEquals(102, root[0], "Era esperado valores iguais, mas  102 é diferente de " + " root[0]")
chamada antiga: assertEquals(101L, root.getJSONObject(0).get("id"))
nova chamada: assertEquals(101L, root.getJSONObject(0).get("id"), "Era esperado valores iguais, mas  101L é diferente de " + result2605 + " <root.getJSONObject(0).get('id')>")
chamada antiga: assertEquals(102, root.getJSONObject(0).get("id"))
nova chamada: assertEquals(102, root.getJSONObject(0).get("id"), "Era esperado valores iguais, mas  102 é diferente de " + result2606 + " <root.getJSONObject(0).get('id')>")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(null, root.getJSONObject("child").get("id"))
nova chamada: assertEquals(null, root.getJSONObject("child").get("id"), "Era esperado valores iguais, mas  null é diferente de " + result2607 + " <root.getJSONObject('child').get('id')>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, paths.size())
nova chamada: assertEquals(3, paths.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2608 + " <paths.size()>")
chamada antiga: assertEquals(4, paths.size())
nova chamada: assertEquals(4, paths.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2609 + " <paths.size()>")
chamada antiga: assertEquals(1, paths.size())
nova chamada: assertEquals(1, paths.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2610 + " <paths.size()>")
chamada antiga: assertEquals("$..book[?(@.isbn)][0]", path.toString())
nova chamada: assertEquals("$..book[?(@.isbn)][0]", path.toString(), "Era esperado valores iguais, mas  '$..book[?(@.isbn)][0]' é diferente de " + result2611 + " <path.toString()>")
chamada antiga: assertEquals(3, segments.size())
nova chamada: assertEquals(3, segments.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2612 + " <segments.size()>")
chamada antiga: assertEquals("..book", segments.get(0).toString())
nova chamada: assertEquals("..book", segments.get(0).toString(), "Era esperado valores iguais, mas  '..book' é diferente de " + result2613 + " <segments.get(0).toString()>")
chamada antiga: assertEquals("?isbn", segments.get(1).toString())
nova chamada: assertEquals("?isbn", segments.get(1).toString(), "Era esperado valores iguais, mas  '?isbn' é diferente de " + result2614 + " <segments.get(1).toString()>")
chamada antiga: assertEquals("$.book.author.id", path.toString())
nova chamada: assertEquals("$.book.author.id", path.toString(), "Era esperado valores iguais, mas  '$.book.author.id' é diferente de " + result2615 + " <path.toString()>")
chamada antiga: assertEquals(3, segments.size())
nova chamada: assertEquals(3, segments.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2616 + " <segments.size()>")
chamada antiga: assertEquals("book", segments.get(0).toString())
nova chamada: assertEquals("book", segments.get(0).toString(), "Era esperado valores iguais, mas  'book' é diferente de " + result2617 + " <segments.get(0).toString()>")
chamada antiga: assertEquals("author", segments.get(1).toString())
nova chamada: assertEquals("author", segments.get(1).toString(), "Era esperado valores iguais, mas  'author' é diferente de " + result2618 + " <segments.get(1).toString()>")
chamada antiga: assertEquals(0, JSON.parseObject(json, ByteValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(json, ByteValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2619 + " <JSON.parseObject(json, ByteValue1.class).getV0000()>")
chamada antiga: assertEquals(0, JSON.parseObject(jsonBytes, ByteValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(jsonBytes, ByteValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2620 + " <JSON.parseObject(jsonBytes, ByteValue1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Byte1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Byte1.class).getV0000(), "Era esperado nulo, mas " + result2621 + " <JSON.parseObject(json, Byte1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Byte1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Byte1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2622 + " <JSON.parseObject(json, Byte1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, ByteValue1.class).getV0000())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, ByteValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2623 + " <JSONB.parseObject(jsonbBytes, ByteValue1.class).getV0000()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Byte1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Byte1.class).getV0000(), "Era esperado nulo, mas " + result2624 + " <JSONB.parseObject(jsonbBytes, Byte1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Byte1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Byte1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2625 + " <JSONB.parseObject(jsonbBytes, Byte1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSON.parseObject(json, ShortValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(json, ShortValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2626 + " <JSON.parseObject(json, ShortValue1.class).getV0000()>")
chamada antiga: assertEquals(0, JSON.parseObject(jsonBytes, ShortValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(jsonBytes, ShortValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2627 + " <JSON.parseObject(jsonBytes, ShortValue1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Short1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Short1.class).getV0000(), "Era esperado nulo, mas " + result2628 + " <JSON.parseObject(json, Short1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Short1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Short1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2629 + " <JSON.parseObject(json, Short1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, ShortValue1.class).getV0000())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, ShortValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2630 + " <JSONB.parseObject(jsonbBytes, ShortValue1.class).getV0000()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Short1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Short1.class).getV0000(), "Era esperado nulo, mas " + result2631 + " <JSONB.parseObject(jsonbBytes, Short1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Short1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Short1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2632 + " <JSONB.parseObject(jsonbBytes, Short1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSON.parseObject(json, Int1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(json, Int1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2633 + " <JSON.parseObject(json, Int1.class).getV0000()>")
chamada antiga: assertEquals(0, JSON.parseObject(jsonBytes, Int1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(jsonBytes, Int1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2634 + " <JSON.parseObject(jsonBytes, Int1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Integer1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Integer1.class).getV0000(), "Era esperado nulo, mas " + result2635 + " <JSON.parseObject(json, Integer1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Integer1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Integer1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2636 + " <JSON.parseObject(json, Integer1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, Int1.class).getV0000())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, Int1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2637 + " <JSONB.parseObject(jsonbBytes, Int1.class).getV0000()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Integer1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Integer1.class).getV0000(), "Era esperado nulo, mas " + result2638 + " <JSONB.parseObject(jsonbBytes, Integer1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Integer1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Integer1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2639 + " <JSONB.parseObject(jsonbBytes, Integer1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSON.parseObject(json, LongValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(json, LongValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2640 + " <JSON.parseObject(json, LongValue1.class).getV0000()>")
chamada antiga: assertEquals(0, JSON.parseObject(jsonBytes, LongValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(jsonBytes, LongValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2641 + " <JSON.parseObject(jsonBytes, LongValue1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Long1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Long1.class).getV0000(), "Era esperado nulo, mas " + result2642 + " <JSON.parseObject(json, Long1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Long1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Long1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2643 + " <JSON.parseObject(json, Long1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(jsonbBytes, LongValue1.class).getV0000())
nova chamada: assertEquals(0, JSONB.parseObject(jsonbBytes, LongValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result2644 + " <JSONB.parseObject(jsonbBytes, LongValue1.class).getV0000()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Long1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Long1.class).getV0000(), "Era esperado nulo, mas " + result2645 + " <JSONB.parseObject(jsonbBytes, Long1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Long1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Long1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2646 + " <JSONB.parseObject(jsonbBytes, Long1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Boolean1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Boolean1.class).getV0000(), "Era esperado nulo, mas " + result2647 + " <JSON.parseObject(json, Boolean1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Boolean1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Boolean1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2648 + " <JSON.parseObject(json, Boolean1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class).getV0000(), "Era esperado nulo, mas " + result2649 + " <JSONB.parseObject(jsonbBytes, Boolean1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Boolean1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2650 + " <JSONB.parseObject(jsonbBytes, Boolean1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0F, JSON.parseObject(json, FloatValue1.class).getV0000())
nova chamada: assertEquals(0F, JSON.parseObject(json, FloatValue1.class).getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result2651 + " <JSON.parseObject(json, FloatValue1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Float1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Float1.class).getV0000(), "Era esperado nulo, mas " + result2652 + " <JSON.parseObject(json, Float1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Float1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Float1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2653 + " <JSON.parseObject(json, Float1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0F, JSONB.parseObject(jsonbBytes, FloatValue1.class).getV0000())
nova chamada: assertEquals(0F, JSONB.parseObject(jsonbBytes, FloatValue1.class).getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result2654 + " <JSONB.parseObject(jsonbBytes, FloatValue1.class).getV0000()>")
chamada antiga: assertEquals(0F, JSON.parseObject(json, DoubleValue1.class).getV0000())
nova chamada: assertEquals(0F, JSON.parseObject(json, DoubleValue1.class).getV0000(), "Era esperado valores iguais, mas  0F é diferente de " + result2655 + " <JSON.parseObject(json, DoubleValue1.class).getV0000()>")
chamada antiga: assertNull(JSON.parseObject(json, Double1.class).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Double1.class).getV0000(), "Era esperado nulo, mas " + result2656 + " <JSON.parseObject(json, Double1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSON.parseObject(json, Double1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSON.parseObject(json, Double1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2657 + " <JSON.parseObject(json, Double1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(0D, JSONB.parseObject(jsonbBytes, DoubleValue1.class).getV0000())
nova chamada: assertEquals(0D, JSONB.parseObject(jsonbBytes, DoubleValue1.class).getV0000(), "Era esperado valores iguais, mas  0D é diferente de " + result2658 + " <JSONB.parseObject(jsonbBytes, DoubleValue1.class).getV0000()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Double1.class).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Double1.class).getV0000(), "Era esperado nulo, mas " + result2659 + " <JSONB.parseObject(jsonbBytes, Double1.class).getV0000()> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Double1.class, ErrorOnNullForPrimitives).getV0000())
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Double1.class, ErrorOnNullForPrimitives).getV0000(), "Era esperado nulo, mas " + result2660 + " <JSONB.parseObject(jsonbBytes, Double1.class, ErrorOnNullForPrimitives).getV0000()> não é nulo")
chamada antiga: assertEquals(localDate, jsonReader.readLocalDate11())
nova chamada: assertEquals(localDate, jsonReader.readLocalDate11(), "Era esperado valores iguais, mas  localDate é diferente de " + result2661 + " <jsonReader.readLocalDate11()>")
chamada antiga: assertEquals("{\"id\":1001}", object.toString())
nova chamada: assertEquals("{\"id\":1001}", object.toString(), "Era esperado valores iguais, mas  '{\'id\':1001}' é diferente de " + result2662 + " <object.toString()>")
chamada antiga: assertEquals("{\"id\":1001}", object.toString())
nova chamada: assertEquals("{\"id\":1001}", object.toString(), "Era esperado valores iguais, mas  '{\'id\':1001}' é diferente de " + result2663 + " <object.toString()>")
chamada antiga: assertEquals(object, object.clone())
nova chamada: assertEquals(object, object.clone(), "Era esperado valores iguais, mas  object é diferente de " + result2664 + " <object.clone()>")
chamada antiga: assertNotNull(object.getJSONArray("obj"))
nova chamada: assertNotNull(object.getJSONArray("obj"), "Era esperado não nulo, mas " + result2665 + " <object.getJSONArray('obj')> é nulo")
chamada antiga: assertEquals("[]", object.getJSONArray("obj").toString())
nova chamada: assertEquals("[]", object.getJSONArray("obj").toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2666 + " <object.getJSONArray('obj').toString()>")
chamada antiga: assertNotNull(object.getJSONObject("obj"))
nova chamada: assertNotNull(object.getJSONObject("obj"), "Era esperado não nulo, mas " + result2667 + " <object.getJSONObject('obj')> é nulo")
chamada antiga: assertEquals("{}", object.getJSONObject("obj").toString())
nova chamada: assertEquals("{}", object.getJSONObject("obj").toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result2668 + " <object.getJSONObject('obj').toString()>")
chamada antiga: assertNotNull(obj)
nova chamada: assertNotNull(obj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{}", JSON.toJSONString(obj))
nova chamada: assertEquals("{}", JSON.toJSONString(obj), "Era esperado valores iguais, mas  '{}' é diferente de " + result2669 + " <JSON.toJSONString(obj)>")
chamada antiga: assertNotNull(list)
nova chamada: assertNotNull(list, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Integer1.class, list.get(0).getClass())
nova chamada: assertEquals(Integer1.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Integer1.class é diferente de " + result2670 + " <list.get(0).getClass()>")
chamada antiga: assertEquals("[{}]", JSON.toJSONString(list))
nova chamada: assertEquals("[{}]", JSON.toJSONString(list), "Era esperado valores iguais, mas  '[{}]' é diferente de " + result2671 + " <JSON.toJSONString(list)>")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Integer1.class, map.get("val").getClass())
nova chamada: assertEquals(Integer1.class, map.get("val").getClass(), "Era esperado valores iguais, mas  Integer1.class é diferente de " + result2672 + " <map.get('val').getClass()>")
chamada antiga: assertEquals("{\"val\":{}}", JSON.toJSONString(map))
nova chamada: assertEquals("{\"val\":{}}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{\'val\':{}}' é diferente de " + result2673 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals(123L, object.getLongValue("val"))
nova chamada: assertEquals(123L, object.getLongValue("val"), "Era esperado valores iguais, mas  123L é diferente de " + result2674 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(123L, object.getLong("val").longValue())
nova chamada: assertEquals(123L, object.getLong("val").longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result2675 + " <object.getLong('val').longValue()>")
chamada antiga: assertEquals(123, object.getIntValue("val"))
nova chamada: assertEquals(123, object.getIntValue("val"), "Era esperado valores iguais, mas  123 é diferente de " + result2676 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(123, object.getInteger("val").intValue())
nova chamada: assertEquals(123, object.getInteger("val").intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2677 + " <object.getInteger('val').intValue()>")
chamada antiga: assertEquals("123", object.getString("val"))
nova chamada: assertEquals("123", object.getString("val"), "Era esperado valores iguais, mas  '123' é diferente de " + result2678 + " <object.getString('val')>")
chamada antiga: assertEquals(123L, object.getLongValue("val"))
nova chamada: assertEquals(123L, object.getLongValue("val"), "Era esperado valores iguais, mas  123L é diferente de " + result2679 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(123L, object.getLong("val").longValue())
nova chamada: assertEquals(123L, object.getLong("val").longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result2680 + " <object.getLong('val').longValue()>")
chamada antiga: assertEquals(123, object.getIntValue("val"))
nova chamada: assertEquals(123, object.getIntValue("val"), "Era esperado valores iguais, mas  123 é diferente de " + result2681 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(123, object.getInteger("val").intValue())
nova chamada: assertEquals(123, object.getInteger("val").intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2682 + " <object.getInteger('val').intValue()>")
chamada antiga: assertEquals("123", object.getString("val"))
nova chamada: assertEquals("123", object.getString("val"), "Era esperado valores iguais, mas  '123' é diferente de " + result2683 + " <object.getString('val')>")
chamada antiga: assertEquals(123L, object.getLongValue("val"))
nova chamada: assertEquals(123L, object.getLongValue("val"), "Era esperado valores iguais, mas  123L é diferente de " + result2684 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(123L, object.getLong("val").longValue())
nova chamada: assertEquals(123L, object.getLong("val").longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result2685 + " <object.getLong('val').longValue()>")
chamada antiga: assertEquals(123, object.getIntValue("val"))
nova chamada: assertEquals(123, object.getIntValue("val"), "Era esperado valores iguais, mas  123 é diferente de " + result2686 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(123, object.getInteger("val").intValue())
nova chamada: assertEquals(123, object.getInteger("val").intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2687 + " <object.getInteger('val').intValue()>")
chamada antiga: assertEquals("123", object.getString("val"))
nova chamada: assertEquals("123", object.getString("val"), "Era esperado valores iguais, mas  '123' é diferente de " + result2688 + " <object.getString('val')>")
chamada antiga: assertEquals(123L, object.getLongValue("val"))
nova chamada: assertEquals(123L, object.getLongValue("val"), "Era esperado valores iguais, mas  123L é diferente de " + result2689 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(123L, object.getLong("val").longValue())
nova chamada: assertEquals(123L, object.getLong("val").longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result2690 + " <object.getLong('val').longValue()>")
chamada antiga: assertEquals(123, object.getIntValue("val"))
nova chamada: assertEquals(123, object.getIntValue("val"), "Era esperado valores iguais, mas  123 é diferente de " + result2691 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(123, object.getInteger("val").intValue())
nova chamada: assertEquals(123, object.getInteger("val").intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2692 + " <object.getInteger('val').intValue()>")
chamada antiga: assertEquals("123", object.getString("val"))
nova chamada: assertEquals("123", object.getString("val"), "Era esperado valores iguais, mas  '123' é diferente de " + result2693 + " <object.getString('val')>")
chamada antiga: assertEquals(123L, object.getLongValue("val"))
nova chamada: assertEquals(123L, object.getLongValue("val"), "Era esperado valores iguais, mas  123L é diferente de " + result2694 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(123L, object.getLong("val").longValue())
nova chamada: assertEquals(123L, object.getLong("val").longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result2695 + " <object.getLong('val').longValue()>")
chamada antiga: assertEquals(123, object.getIntValue("val"))
nova chamada: assertEquals(123, object.getIntValue("val"), "Era esperado valores iguais, mas  123 é diferente de " + result2696 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(123, object.getInteger("val").intValue())
nova chamada: assertEquals(123, object.getInteger("val").intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result2697 + " <object.getInteger('val').intValue()>")
chamada antiga: assertEquals("123", object.getString("val"))
nova chamada: assertEquals("123", object.getString("val"), "Era esperado valores iguais, mas  '123' é diferente de " + result2698 + " <object.getString('val')>")
chamada antiga: assertEquals(object, clone)
nova chamada: assertEquals(object, clone, "Era esperado valores iguais, mas  object é diferente de " + " clone")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result2699 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result2700 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2701 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2702 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getString("val"))
nova chamada: assertEquals(null, object.getString("val"), "Era esperado valores iguais, mas  null é diferente de " + result2703 + " <object.getString('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result2704 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result2705 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2706 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result2707 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result2708 + " <object.getDouble('val')>")
chamada antiga: assertEquals(0D, object.getDoubleValue("val"))
nova chamada: assertEquals(0D, object.getDoubleValue("val"), "Era esperado valores iguais, mas  0D é diferente de " + result2709 + " <object.getDoubleValue('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result2710 + " <object.getFloat('val')>")
chamada antiga: assertEquals(0F, object.getFloatValue("val"))
nova chamada: assertEquals(0F, object.getFloatValue("val"), "Era esperado valores iguais, mas  0F é diferente de " + result2711 + " <object.getFloatValue('val')>")
chamada antiga: assertEquals(false, object.getBooleanValue("val"))
nova chamada: assertEquals(false, object.getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result2712 + " <object.getBooleanValue('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result2713 + " <object.getBoolean('val')>")
chamada antiga: assertEquals((short) 0, object.getShortValue("val"))
nova chamada: assertEquals((short) 0, object.getShortValue("val"), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result2714 + " <object.getShortValue('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result2715 + " <object.getShort('val')>")
chamada antiga: assertEquals((byte) 0, object.getByteValue("val"))
nova chamada: assertEquals((byte) 0, object.getByteValue("val"), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result2716 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result2717 + " <object.getByte('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result2718 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result2719 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2720 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2721 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result2722 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result2723 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2724 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result2725 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result2726 + " <object.getFloat('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result2727 + " <object.getDouble('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result2728 + " <object.getBoolean('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result2729 + " <object.getByte('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result2730 + " <object.getShort('val')>")
chamada antiga: assertEquals(0, object.getByteValue("val"))
nova chamada: assertEquals(0, object.getByteValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2731 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(0, object.getShortValue("val"))
nova chamada: assertEquals(0, object.getShortValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2732 + " <object.getShortValue('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result2733 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result2734 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2735 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2736 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result2737 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result2738 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result2739 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result2740 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result2741 + " <object.getBoolean('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result2742 + " <object.getFloat('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result2743 + " <object.getDouble('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result2744 + " <object.getByte('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result2745 + " <object.getShort('val')>")
chamada antiga: assertEquals(0, object.getByteValue("val"))
nova chamada: assertEquals(0, object.getByteValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2746 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(0, object.getShortValue("val"))
nova chamada: assertEquals(0, object.getShortValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result2747 + " <object.getShortValue('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result2748 + " <BigInteger.valueOf(12)> é diferente de " + result2749 + " <new JSONObject().fluentPut('val', 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result2750 + " <BigInteger.valueOf(12)> é diferente de " + result2751 + " <new JSONObject().fluentPut('val', (byte) 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result2752 + " <BigInteger.valueOf(12)> é diferente de " + result2753 + " <new JSONObject().fluentPut('val', (short) 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"), "Era esperado valores iguais, mas " + result2754 + " <BigInteger.valueOf(12)> é diferente de " + result2755 + " <new JSONObject().fluentPut('val', 12L).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"), "Era esperado valores iguais, mas " + result2756 + " <BigInteger.valueOf(12)> é diferente de " + result2757 + " <new JSONObject().fluentPut('val', 12F).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"), "Era esperado valores iguais, mas " + result2758 + " <BigInteger.valueOf(12)> é diferente de " + result2759 + " <new JSONObject().fluentPut('val', 12D).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"), "Era esperado valores iguais, mas " + result2760 + " <BigInteger.valueOf(12)> é diferente de " + result2761 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"), "Era esperado valores iguais, mas " + result2762 + " <BigInteger.valueOf(12)> é diferente de " + result2763 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"), "Era esperado valores iguais, mas " + result2764 + " <BigInteger.valueOf(12)> é diferente de " + result2765 + " <new JSONObject().fluentPut('val', '12').getBigInteger('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2766 + " <BigDecimal.valueOf(12)> é diferente de " + result2767 + " <new JSONObject().fluentPut('val', 12).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2768 + " <BigDecimal.valueOf(12)> é diferente de " + result2769 + " <new JSONObject().fluentPut('val', (byte) 12).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2770 + " <BigDecimal.valueOf(12)> é diferente de " + result2771 + " <new JSONObject().fluentPut('val', (short) 12).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2772 + " <BigDecimal.valueOf(12)> é diferente de " + result2773 + " <new JSONObject().fluentPut('val', 12L).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12F), new JSONObject().fluentPut("val", 12F).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12F), new JSONObject().fluentPut("val", 12F).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2774 + " <BigDecimal.valueOf(12F)> é diferente de " + result2775 + " <new JSONObject().fluentPut('val', 12F).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12D), new JSONObject().fluentPut("val", 12D).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12D), new JSONObject().fluentPut("val", 12D).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2776 + " <BigDecimal.valueOf(12D)> é diferente de " + result2777 + " <new JSONObject().fluentPut('val', 12D).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2778 + " <BigDecimal.valueOf(12)> é diferente de " + result2779 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigDecimal("val"), "Era esperado valores iguais, mas " + result2780 + " <BigDecimal.valueOf(12)> é diferente de " + result2781 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", "12").getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONObject().fluentPut("val", "12").getBigDecimal("val"), "Era esperado valores iguais, mas " + result2782 + " <BigDecimal.valueOf(12)> é diferente de " + result2783 + " <new JSONObject().fluentPut('val', '12').getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.ONE, new JSONObject().fluentPut("val", true).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.ONE, new JSONObject().fluentPut("val", true).getBigDecimal("val"), "Era esperado valores iguais, mas  BigDecimal.ONE é diferente de " + result2784 + " <new JSONObject().fluentPut('val', true).getBigDecimal('val')>")
chamada antiga: assertEquals(BigDecimal.ZERO, new JSONObject().fluentPut("val", false).getBigDecimal("val"))
nova chamada: assertEquals(BigDecimal.ZERO, new JSONObject().fluentPut("val", false).getBigDecimal("val"), "Era esperado valores iguais, mas  BigDecimal.ZERO é diferente de " + result2785 + " <new JSONObject().fluentPut('val', false).getBigDecimal('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloatValue("val"), "Era esperado valores iguais, mas " + result2786 + " <Float.valueOf(12)> é diferente de " + result2787 + " <new JSONObject().fluentPut('val', 12).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloatValue("val"), "Era esperado valores iguais, mas " + result2788 + " <Float.valueOf(12)> é diferente de " + result2789 + " <new JSONObject().fluentPut('val', (byte) 12).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloatValue("val"), "Era esperado valores iguais, mas " + result2790 + " <Float.valueOf(12)> é diferente de " + result2791 + " <new JSONObject().fluentPut('val', (short) 12).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloatValue("val"), "Era esperado valores iguais, mas " + result2792 + " <Float.valueOf(12)> é diferente de " + result2793 + " <new JSONObject().fluentPut('val', 12L).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloatValue("val"), "Era esperado valores iguais, mas " + result2794 + " <Float.valueOf(12F)> é diferente de " + result2795 + " <new JSONObject().fluentPut('val', 12F).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloatValue("val"), "Era esperado valores iguais, mas " + result2796 + " <Float.valueOf(12)> é diferente de " + result2797 + " <new JSONObject().fluentPut('val', 12D).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloatValue("val"), "Era esperado valores iguais, mas " + result2798 + " <Float.valueOf(12)> é diferente de " + result2799 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloatValue("val"), "Era esperado valores iguais, mas " + result2800 + " <Float.valueOf(12)> é diferente de " + result2801 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloatValue("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloatValue("val"), "Era esperado valores iguais, mas " + result2802 + " <Float.valueOf(12)> é diferente de " + result2803 + " <new JSONObject().fluentPut('val', '12').getFloatValue('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12).getFloat("val"), "Era esperado valores iguais, mas " + result2804 + " <Float.valueOf(12)> é diferente de " + result2805 + " <new JSONObject().fluentPut('val', 12).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getFloat("val"), "Era esperado valores iguais, mas " + result2806 + " <Float.valueOf(12)> é diferente de " + result2807 + " <new JSONObject().fluentPut('val', (byte) 12).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getFloat("val"), "Era esperado valores iguais, mas " + result2808 + " <Float.valueOf(12)> é diferente de " + result2809 + " <new JSONObject().fluentPut('val', (short) 12).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12L).getFloat("val"), "Era esperado valores iguais, mas " + result2810 + " <Float.valueOf(12)> é diferente de " + result2811 + " <new JSONObject().fluentPut('val', 12L).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12F), new JSONObject().fluentPut("val", 12F).getFloat("val"), "Era esperado valores iguais, mas " + result2812 + " <Float.valueOf(12F)> é diferente de " + result2813 + " <new JSONObject().fluentPut('val', 12F).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", 12D).getFloat("val"), "Era esperado valores iguais, mas " + result2814 + " <Float.valueOf(12)> é diferente de " + result2815 + " <new JSONObject().fluentPut('val', 12D).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getFloat("val"), "Era esperado valores iguais, mas " + result2816 + " <Float.valueOf(12)> é diferente de " + result2817 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getFloat("val"), "Era esperado valores iguais, mas " + result2818 + " <Float.valueOf(12)> é diferente de " + result2819 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getFloat('val')>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloat("val"))
nova chamada: assertEquals(Float.valueOf(12), new JSONObject().fluentPut("val", "12").getFloat("val"), "Era esperado valores iguais, mas " + result2820 + " <Float.valueOf(12)> é diferente de " + result2821 + " <new JSONObject().fluentPut('val', '12').getFloat('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2822 + " <Double.valueOf(12)> é diferente de " + result2823 + " <new JSONObject().fluentPut('val', 12).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2824 + " <Double.valueOf(12)> é diferente de " + result2825 + " <new JSONObject().fluentPut('val', (byte) 12).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2826 + " <Double.valueOf(12)> é diferente de " + result2827 + " <new JSONObject().fluentPut('val', (short) 12).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2828 + " <Double.valueOf(12)> é diferente de " + result2829 + " <new JSONObject().fluentPut('val', 12L).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2830 + " <Double.valueOf(12F)> é diferente de " + result2831 + " <new JSONObject().fluentPut('val', 12F).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2832 + " <Double.valueOf(12)> é diferente de " + result2833 + " <new JSONObject().fluentPut('val', 12D).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2834 + " <Double.valueOf(12)> é diferente de " + result2835 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDoubleValue("val"), "Era esperado valores iguais, mas " + result2836 + " <Double.valueOf(12)> é diferente de " + result2837 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDoubleValue("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDoubleValue("val"), "Era esperado valores iguais, mas " + result2838 + " <Double.valueOf(12)> é diferente de " + result2839 + " <new JSONObject().fluentPut('val', '12').getDoubleValue('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12).getDouble("val"), "Era esperado valores iguais, mas " + result2840 + " <Double.valueOf(12)> é diferente de " + result2841 + " <new JSONObject().fluentPut('val', 12).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getDouble("val"), "Era esperado valores iguais, mas " + result2842 + " <Double.valueOf(12)> é diferente de " + result2843 + " <new JSONObject().fluentPut('val', (byte) 12).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getDouble("val"), "Era esperado valores iguais, mas " + result2844 + " <Double.valueOf(12)> é diferente de " + result2845 + " <new JSONObject().fluentPut('val', (short) 12).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12L).getDouble("val"), "Era esperado valores iguais, mas " + result2846 + " <Double.valueOf(12)> é diferente de " + result2847 + " <new JSONObject().fluentPut('val', 12L).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12F), new JSONObject().fluentPut("val", 12F).getDouble("val"), "Era esperado valores iguais, mas " + result2848 + " <Double.valueOf(12F)> é diferente de " + result2849 + " <new JSONObject().fluentPut('val', 12F).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", 12D).getDouble("val"), "Era esperado valores iguais, mas " + result2850 + " <Double.valueOf(12)> é diferente de " + result2851 + " <new JSONObject().fluentPut('val', 12D).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getDouble("val"), "Era esperado valores iguais, mas " + result2852 + " <Double.valueOf(12)> é diferente de " + result2853 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getDouble("val"), "Era esperado valores iguais, mas " + result2854 + " <Double.valueOf(12)> é diferente de " + result2855 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getDouble('val')>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDouble("val"))
nova chamada: assertEquals(Double.valueOf(12), new JSONObject().fluentPut("val", "12").getDouble("val"), "Era esperado valores iguais, mas " + result2856 + " <Double.valueOf(12)> é diferente de " + result2857 + " <new JSONObject().fluentPut('val', '12').getDouble('val')>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"))
nova chamada: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result2858 + " <new JSONObject().fluentPut('val', 1).getBoolean('val')>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"))
nova chamada: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result2859 + " <new JSONObject().fluentPut('val', 'true').getBoolean('val')>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"))
nova chamada: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result2860 + " <new JSONObject().fluentPut('val', Boolean.FALSE).getBoolean('val')>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"))
nova chamada: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result2861 + " <new JSONObject().fluentPut('val', 'FALSE').getBoolean('val')>")
chamada antiga: assertEquals(true, new JSONObject().fluentPut("val", 1).getBooleanValue("val"))
nova chamada: assertEquals(true, new JSONObject().fluentPut("val", 1).getBooleanValue("val"), "Era esperado valores iguais, mas  true é diferente de " + result2862 + " <new JSONObject().fluentPut('val', 1).getBooleanValue('val')>")
chamada antiga: assertEquals(true, new JSONObject().fluentPut("val", "true").getBooleanValue("val"))
nova chamada: assertEquals(true, new JSONObject().fluentPut("val", "true").getBooleanValue("val"), "Era esperado valores iguais, mas  true é diferente de " + result2863 + " <new JSONObject().fluentPut('val', 'true').getBooleanValue('val')>")
chamada antiga: assertEquals(false, new JSONObject().fluentPut("val", "FALSE").getBooleanValue("val"))
nova chamada: assertEquals(false, new JSONObject().fluentPut("val", "FALSE").getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result2864 + " <new JSONObject().fluentPut('val', 'FALSE').getBooleanValue('val')>")
chamada antiga: assertEquals(false, new JSONObject().fluentPut("val", Boolean.FALSE).getBooleanValue("val"))
nova chamada: assertEquals(false, new JSONObject().fluentPut("val", Boolean.FALSE).getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result2865 + " <new JSONObject().fluentPut('val', Boolean.FALSE).getBooleanValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", 12).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", 12).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2866 + " <new JSONObject().fluentPut('val', 12).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", (byte) 12).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", (byte) 12).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2867 + " <new JSONObject().fluentPut('val', (byte) 12).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", (short) 12).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", (short) 12).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2868 + " <new JSONObject().fluentPut('val', (short) 12).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", 12L).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", 12L).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2869 + " <new JSONObject().fluentPut('val', 12L).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", 12F).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", 12F).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2870 + " <new JSONObject().fluentPut('val', 12F).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", 12D).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", 12D).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2871 + " <new JSONObject().fluentPut('val', 12D).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2872 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2873 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getShortValue('val')>")
chamada antiga: assertEquals((short) 12, new JSONObject().fluentPut("val", "12").getShortValue("val"))
nova chamada: assertEquals((short) 12, new JSONObject().fluentPut("val", "12").getShortValue("val"), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result2874 + " <new JSONObject().fluentPut('val', '12').getShortValue('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12).getShort("val"), "Era esperado valores iguais, mas " + result2875 + " <Short.valueOf((short) 12)> é diferente de " + result2876 + " <new JSONObject().fluentPut('val', 12).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (byte) 12).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (byte) 12).getShort("val"), "Era esperado valores iguais, mas " + result2877 + " <Short.valueOf((short) 12)> é diferente de " + result2878 + " <new JSONObject().fluentPut('val', (byte) 12).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (short) 12).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", (short) 12).getShort("val"), "Era esperado valores iguais, mas " + result2879 + " <Short.valueOf((short) 12)> é diferente de " + result2880 + " <new JSONObject().fluentPut('val', (short) 12).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12L).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12L).getShort("val"), "Era esperado valores iguais, mas " + result2881 + " <Short.valueOf((short) 12)> é diferente de " + result2882 + " <new JSONObject().fluentPut('val', 12L).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12F).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12F).getShort("val"), "Era esperado valores iguais, mas " + result2883 + " <Short.valueOf((short) 12)> é diferente de " + result2884 + " <new JSONObject().fluentPut('val', 12F).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12D).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", 12D).getShort("val"), "Era esperado valores iguais, mas " + result2885 + " <Short.valueOf((short) 12)> é diferente de " + result2886 + " <new JSONObject().fluentPut('val', 12D).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getShort("val"), "Era esperado valores iguais, mas " + result2887 + " <Short.valueOf((short) 12)> é diferente de " + result2888 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getShort("val"), "Era esperado valores iguais, mas " + result2889 + " <Short.valueOf((short) 12)> é diferente de " + result2890 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getShort("val"), "Era esperado valores iguais, mas " + result2891 + " <Short.valueOf((short) 12)> é diferente de " + result2892 + " <new JSONObject().fluentPut('val', Short.valueOf((short) 12)).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getShort("val"), "Era esperado valores iguais, mas " + result2893 + " <Short.valueOf((short) 12)> é diferente de " + result2894 + " <new JSONObject().fluentPut('val', Byte.valueOf((byte) 12)).getShort('val')>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", "12").getShort("val"))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONObject().fluentPut("val", "12").getShort("val"), "Era esperado valores iguais, mas " + result2895 + " <Short.valueOf((short) 12)> é diferente de " + result2896 + " <new JSONObject().fluentPut('val', '12').getShort('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2897 + " <new JSONObject().fluentPut('val', 12).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", (byte) 12).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", (byte) 12).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2898 + " <new JSONObject().fluentPut('val', (byte) 12).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", (short) 12).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", (short) 12).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2899 + " <new JSONObject().fluentPut('val', (short) 12).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12L).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12L).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2900 + " <new JSONObject().fluentPut('val', 12L).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12F).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12F).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2901 + " <new JSONObject().fluentPut('val', 12F).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12D).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", 12D).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2902 + " <new JSONObject().fluentPut('val', 12D).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigDecimal("12")).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2903 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", new BigInteger("12")).getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2904 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getByteValue('val')>")
chamada antiga: assertEquals((byte) 12, new JSONObject().fluentPut("val", "12").getByteValue("val"))
nova chamada: assertEquals((byte) 12, new JSONObject().fluentPut("val", "12").getByteValue("val"), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result2905 + " <new JSONObject().fluentPut('val', '12').getByteValue('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12).getByte("val"), "Era esperado valores iguais, mas " + result2906 + " <Byte.valueOf((byte) 12)> é diferente de " + result2907 + " <new JSONObject().fluentPut('val', 12).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (byte) 12).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (byte) 12).getByte("val"), "Era esperado valores iguais, mas " + result2908 + " <Byte.valueOf((byte) 12)> é diferente de " + result2909 + " <new JSONObject().fluentPut('val', (byte) 12).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (short) 12).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", (short) 12).getByte("val"), "Era esperado valores iguais, mas " + result2910 + " <Byte.valueOf((byte) 12)> é diferente de " + result2911 + " <new JSONObject().fluentPut('val', (short) 12).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12L).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12L).getByte("val"), "Era esperado valores iguais, mas " + result2912 + " <Byte.valueOf((byte) 12)> é diferente de " + result2913 + " <new JSONObject().fluentPut('val', 12L).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12F).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12F).getByte("val"), "Era esperado valores iguais, mas " + result2914 + " <Byte.valueOf((byte) 12)> é diferente de " + result2915 + " <new JSONObject().fluentPut('val', 12F).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12D).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", 12D).getByte("val"), "Era esperado valores iguais, mas " + result2916 + " <Byte.valueOf((byte) 12)> é diferente de " + result2917 + " <new JSONObject().fluentPut('val', 12D).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigDecimal("12")).getByte("val"), "Era esperado valores iguais, mas " + result2918 + " <Byte.valueOf((byte) 12)> é diferente de " + result2919 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", new BigInteger("12")).getByte("val"), "Era esperado valores iguais, mas " + result2920 + " <Byte.valueOf((byte) 12)> é diferente de " + result2921 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Short.valueOf((short) 12)).getByte("val"), "Era esperado valores iguais, mas " + result2922 + " <Byte.valueOf((byte) 12)> é diferente de " + result2923 + " <new JSONObject().fluentPut('val', Short.valueOf((short) 12)).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", Byte.valueOf((byte) 12)).getByte("val"), "Era esperado valores iguais, mas " + result2924 + " <Byte.valueOf((byte) 12)> é diferente de " + result2925 + " <new JSONObject().fluentPut('val', Byte.valueOf((byte) 12)).getByte('val')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", "12").getByte("val"))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONObject().fluentPut("val", "12").getByte("val"), "Era esperado valores iguais, mas " + result2926 + " <Byte.valueOf((byte) 12)> é diferente de " + result2927 + " <new JSONObject().fluentPut('val', '12').getByte('val')>")
chamada antiga: assertNull(JSONObject.of("id", null).getDate("id"))
nova chamada: assertNull(JSONObject.of("id", null).getDate("id"), "Era esperado nulo, mas " + result2928 + " <JSONObject.of('id', null).getDate('id')> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", "").getDate("id"))
nova chamada: assertNull(JSONObject.of("id", "").getDate("id"), "Era esperado nulo, mas " + result2929 + " <JSONObject.of('id', '').getDate('id')> não é nulo")
chamada antiga: assertEquals(0, JSONObject.of("id", 0).getDate("id").getTime())
nova chamada: assertEquals(0, JSONObject.of("id", 0).getDate("id").getTime(), "Era esperado valores iguais, mas  0 é diferente de " + result2930 + " <JSONObject.of('id', 0).getDate('id').getTime()>")
chamada antiga: assertEquals(0L, JSONObject.of("id", 0L).getDate("id").getTime())
nova chamada: assertEquals(0L, JSONObject.of("id", 0L).getDate("id").getTime(), "Era esperado valores iguais, mas  0L é diferente de " + result2931 + " <JSONObject.of('id', 0L).getDate('id').getTime()>")
chamada antiga: assertSame(date, JSONObject.of("id", date).getDate("id"))
nova chamada: assertSame(date, JSONObject.of("id", date).getDate("id"), "Era esperado objetos iguais, mas  date é diferente de " + result2932 + " <JSONObject.of('id', date).getDate('id')>")
chamada antiga: assertEquals(date, JSONObject.of("id", millis).getDate("id"))
nova chamada: assertEquals(date, JSONObject.of("id", millis).getDate("id"), "Era esperado valores iguais, mas  date é diferente de " + result2933 + " <JSONObject.of('id', millis).getDate('id')>")
chamada antiga: assertEquals(date, JSONObject.of("id", zdt).getDate("id"))
nova chamada: assertEquals(date, JSONObject.of("id", zdt).getDate("id"), "Era esperado valores iguais, mas  date é diferente de " + result2934 + " <JSONObject.of('id', zdt).getDate('id')>")
chamada antiga: assertEquals(date, JSONObject.of("id", zdt.toString()).getDate("id"))
nova chamada: assertEquals(date, JSONObject.of("id", zdt.toString()).getDate("id"), "Era esperado valores iguais, mas  date é diferente de " + result2935 + " <JSONObject.of('id', zdt.toString()).getDate('id')>")
chamada antiga: assertEquals(date, JSONObject.of("id", '"' + zdt.toString() + '"').getDate("id"))
nova chamada: assertEquals(date, JSONObject.of("id", '"' + zdt.toString() + '"').getDate("id"), "Era esperado valores iguais, mas  date é diferente de " + result2936 + " <JSONObject.of('id', ''' + zdt.toString() + ''').getDate('id')>")
chamada antiga: assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime())
nova chamada: assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime(), "Era esperado valores iguais, mas " + result2937 + " <ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli()> é diferente de " + result2938 + " <date1.getTime()>")
chamada antiga: assertNull(JSONObject.of("id", null).getInstant("id"))
nova chamada: assertNull(JSONObject.of("id", null).getInstant("id"), "Era esperado nulo, mas " + result2939 + " <JSONObject.of('id', null).getInstant('id')> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", "").getInstant("id"))
nova chamada: assertNull(JSONObject.of("id", "").getInstant("id"), "Era esperado nulo, mas " + result2940 + " <JSONObject.of('id', '').getInstant('id')> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", "null").getInstant("id"))
nova chamada: assertNull(JSONObject.of("id", "null").getInstant("id"), "Era esperado nulo, mas " + result2941 + " <JSONObject.of('id', 'null').getInstant('id')> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", 0).getInstant("id"))
nova chamada: assertNull(JSONObject.of("id", 0).getInstant("id"), "Era esperado nulo, mas " + result2942 + " <JSONObject.of('id', 0).getInstant('id')> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", 0L).getInstant("id"))
nova chamada: assertNull(JSONObject.of("id", 0L).getInstant("id"), "Era esperado nulo, mas " + result2943 + " <JSONObject.of('id', 0L).getInstant('id')> não é nulo")
chamada antiga: assertSame(instant, JSONObject.of("id", instant).getInstant("id"))
nova chamada: assertSame(instant, JSONObject.of("id", instant).getInstant("id"), "Era esperado objetos iguais, mas  instant é diferente de " + result2944 + " <JSONObject.of('id', instant).getInstant('id')>")
chamada antiga: assertEquals(instant, JSONObject.of("id", millis).getInstant("id"))
nova chamada: assertEquals(instant, JSONObject.of("id", millis).getInstant("id"), "Era esperado valores iguais, mas  instant é diferente de " + result2945 + " <JSONObject.of('id', millis).getInstant('id')>")
chamada antiga: assertEquals(instant, JSONObject.of("id", new Date(millis)).getInstant("id"))
nova chamada: assertEquals(instant, JSONObject.of("id", new Date(millis)).getInstant("id"), "Era esperado valores iguais, mas  instant é diferente de " + result2946 + " <JSONObject.of('id', new Date(millis)).getInstant('id')>")
chamada antiga: assertEquals(instant, JSONObject.of("id", zdt).getInstant("id"))
nova chamada: assertEquals(instant, JSONObject.of("id", zdt).getInstant("id"), "Era esperado valores iguais, mas  instant é diferente de " + result2947 + " <JSONObject.of('id', zdt).getInstant('id')>")
chamada antiga: assertEquals(instant, JSONObject.of("id", zdt.toString()).getInstant("id"))
nova chamada: assertEquals(instant, JSONObject.of("id", zdt.toString()).getInstant("id"), "Era esperado valores iguais, mas  instant é diferente de " + result2948 + " <JSONObject.of('id', zdt.toString()).getInstant('id')>")
chamada antiga: assertEquals(instant, JSONObject.of("id", '"' + zdt.toString() + '"').getInstant("id"))
nova chamada: assertEquals(instant, JSONObject.of("id", '"' + zdt.toString() + '"').getInstant("id"), "Era esperado valores iguais, mas  instant é diferente de " + result2949 + " <JSONObject.of('id', ''' + zdt.toString() + ''').getInstant('id')>")
chamada antiga: assertEquals(123, jsonObject.getIntValue("id"))
nova chamada: assertEquals(123, jsonObject.getIntValue("id"), "Era esperado valores iguais, mas  123 é diferente de " + result2950 + " <jsonObject.getIntValue('id')>")
chamada antiga: assertEquals(123L, jsonObject.getLongValue("id"))
nova chamada: assertEquals(123L, jsonObject.getLongValue("id"), "Era esperado valores iguais, mas  123L é diferente de " + result2951 + " <jsonObject.getLongValue('id')>")
chamada antiga: assertEquals("123", jsonObject.getString("id"))
nova chamada: assertEquals("123", jsonObject.getString("id"), "Era esperado valores iguais, mas  '123' é diferente de " + result2952 + " <jsonObject.getString('id')>")
chamada antiga: assertEquals(Integer.valueOf(123), jsonObject.getInteger("id"))
nova chamada: assertEquals(Integer.valueOf(123), jsonObject.getInteger("id"), "Era esperado valores iguais, mas " + result2953 + " <Integer.valueOf(123)> é diferente de " + result2954 + " <jsonObject.getInteger('id')>")
chamada antiga: assertEquals(Long.valueOf(123), jsonObject.getLong("id"))
nova chamada: assertEquals(Long.valueOf(123), jsonObject.getLong("id"), "Era esperado valores iguais, mas " + result2955 + " <Long.valueOf(123)> é diferente de " + result2956 + " <jsonObject.getLong('id')>")
chamada antiga: assertNull(jsonObject.getObject("a", String.class))
nova chamada: assertNull(jsonObject.getObject("a", String.class), "Era esperado nulo, mas " + result2957 + " <jsonObject.getObject('a', String.class)> não é nulo")
chamada antiga: assertEquals("value1", jsonObject.get(123))
nova chamada: assertEquals("value1", jsonObject.get(123), "Era esperado valores iguais, mas  'value1' é diferente de " + result2958 + " <jsonObject.get(123)>")
chamada antiga: assertEquals("value2", jsonObject.get(456.789))
nova chamada: assertEquals("value2", jsonObject.get(456.789), "Era esperado valores iguais, mas  'value2' é diferente de " + result2959 + " <jsonObject.get(456.789)>")
chamada antiga: assertEquals("value3", jsonObject.get(null))
nova chamada: assertEquals("value3", jsonObject.get(null), "Era esperado valores iguais, mas  'value3' é diferente de " + result2960 + " <jsonObject.get(null)>")
chamada antiga: assertEquals("value4", jsonObject.getOrDefault(false, "value4"))
nova chamada: assertEquals("value4", jsonObject.getOrDefault(false, "value4"), "Era esperado valores iguais, mas  'value4' é diferente de " + result2961 + " <jsonObject.getOrDefault(false, 'value4')>")
chamada antiga: assertEquals(false, ((Map) proxy).isEmpty())
nova chamada: assertEquals(false, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  false é diferente de " + result2962 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals(true, ((Map) proxy).isEmpty())
nova chamada: assertEquals(true, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result2963 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals(true, ((Map) proxy).isEmpty())
nova chamada: assertEquals(true, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result2964 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals(true, ((Map) proxy).isEmpty())
nova chamada: assertEquals(true, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result2965 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals(false, ((Map) proxy).isEmpty())
nova chamada: assertEquals(false, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  false é diferente de " + result2966 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals("kraity", proxy.getName())
nova chamada: assertEquals("kraity", proxy.getName(), "Era esperado valores iguais, mas  'kraity' é diferente de " + result2967 + " <proxy.getName()>")
chamada antiga: assertNotNull(object1)
nova chamada: assertNotNull(object1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.id, object1.get("id"))
nova chamada: assertEquals(bean.id, object1.get("id"), "Era esperado valores iguais, mas  bean.id é diferente de " + result2968 + " <object1.get('id')>")
chamada antiga: assertNotNull(object2)
nova chamada: assertNotNull(object2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.id, object2.get("id"))
nova chamada: assertEquals(bean.id, object2.get("id"), "Era esperado valores iguais, mas  bean.id é diferente de " + result2969 + " <object2.get('id')>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2970 + " <array.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2971 + " <map.size()>")
chamada antiga: assertNull(object.getJSONObject("k0"))
nova chamada: assertNull(object.getJSONObject("k0"), "Era esperado nulo, mas " + result2972 + " <object.getJSONObject('k0')> não é nulo")
chamada antiga: assertSame(j1, object.getJSONObject("k1"))
nova chamada: assertSame(j1, object.getJSONObject("k1"), "Era esperado objetos iguais, mas  j1 é diferente de " + result2973 + " <object.getJSONObject('k1')>")
chamada antiga: assertNotSame(j2, object.getJSONObject("k2"))
nova chamada: assertNotSame(j2, object.getJSONObject("k2"), "Era esperado objetos diferentes, mas  j2 é igual a " + result2974 + " <object.getJSONObject('k2')>")
chamada antiga: assertNull(JSONObject.of("id", "").getObject("id", UUID.class))
nova chamada: assertNull(JSONObject.of("id", "").getObject("id", UUID.class), "Era esperado nulo, mas " + result2975 + " <JSONObject.of('id', '').getObject('id', UUID.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("id", "null").getObject("id", UUID.class))
nova chamada: assertNull(JSONObject.of("id", "null").getObject("id", UUID.class), "Era esperado nulo, mas " + result2976 + " <JSONObject.of('id', 'null').getObject('id', UUID.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(101), JSONObject.of("id", 101).getObject("id", Number.class))
nova chamada: assertEquals(Integer.valueOf(101), JSONObject.of("id", 101).getObject("id", Number.class), "Era esperado valores iguais, mas " + result2977 + " <Integer.valueOf(101)> é diferente de " + result2978 + " <JSONObject.of('id', 101).getObject('id', Number.class)>")
chamada antiga: assertEquals(2, JSONObject.of("id", 101, "name", "DataWorks").size())
nova chamada: assertEquals(2, JSONObject.of("id", 101, "name", "DataWorks").size(), "Era esperado valores iguais, mas  2 é diferente de " + result2979 + " <JSONObject.of('id', 101, 'name', 'DataWorks').size()>")
chamada antiga: assertNull(JSONObject.of().getObject("id", (Type) User.class))
nova chamada: assertNull(JSONObject.of().getObject("id", (Type) User.class), "Era esperado nulo, mas " + result2980 + " <JSONObject.of().getObject('id', (Type) User.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Object.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Object.class), "Era esperado valores iguais, mas " + result2981 + " <Integer.valueOf(123)> é diferente de " + result2982 + " <JSONObject.of('id', 123).getObject('id', (Type) Object.class)>")
chamada antiga: assertEquals("123", JSONObject.of("id", 123).getObject("id", (Type) String.class))
nova chamada: assertEquals("123", JSONObject.of("id", 123).getObject("id", (Type) String.class), "Era esperado valores iguais, mas  '123' é diferente de " + result2983 + " <JSONObject.of('id', 123).getObject('id', (Type) String.class)>")
chamada antiga: assertEquals(Integer.valueOf(123), JSONObject.of("id", "123").getObject("id", (Type) Integer.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONObject.of("id", "123").getObject("id", (Type) Integer.class), "Era esperado valores iguais, mas " + result2984 + " <Integer.valueOf(123)> é diferente de " + result2985 + " <JSONObject.of('id', '123').getObject('id', (Type) Integer.class)>")
chamada antiga: assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Number.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONObject.of("id", 123).getObject("id", (Type) Number.class), "Era esperado valores iguais, mas " + result2986 + " <Integer.valueOf(123)> é diferente de " + result2987 + " <JSONObject.of('id', 123).getObject('id', (Type) Number.class)>")
chamada antiga: assertEquals(new ArrayList(), JSONObject.of("id", new ArrayList()).getObject("id", List.class))
nova chamada: assertEquals(new ArrayList(), JSONObject.of("id", new ArrayList()).getObject("id", List.class), "Era esperado valores iguais, mas  new ArrayList() é diferente de " + result2988 + " <JSONObject.of('id', new ArrayList()).getObject('id', List.class)>")
chamada antiga: assertEquals("{}", object.toString())
nova chamada: assertEquals("{}", object.toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result2989 + " <object.toString()>")
chamada antiga: assertEquals("{\"id\":null}", object.toString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"id\":null}", object.toString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'id\':null}' é diferente de " + result2990 + " <object.toString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("[{}]", array.toString())
nova chamada: assertEquals("[{}]", array.toString(), "Era esperado valores iguais, mas  '[{}]' é diferente de " + result2991 + " <array.toString()>")
chamada antiga: assertEquals("[{\"id\":null}]", array.toString(JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("[{\"id\":null}]", array.toString(JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '[{\'id\':null}]' é diferente de " + result2992 + " <array.toString(JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(object, object2)
nova chamada: assertEquals(object, object2, "Era esperado valores iguais, mas  object é diferente de " + " object2")
chamada antiga: assertEquals(array, array2)
nova chamada: assertEquals(array, array2, "Era esperado valores iguais, mas  array é diferente de " + " array2")
chamada antiga: assertTrue(proxy.equals(object))
nova chamada: assertTrue(proxy.equals(object), "Era esperado verdadeiro, mas " + result2993 + " <proxy.equals(object)> é falso")
chamada antiga: assertEquals(101, object.get("id"))
nova chamada: assertEquals(101, object.get("id"), "Era esperado valores iguais, mas  101 é diferente de " + result2994 + " <object.get('id')>")
chamada antiga: assertEquals(101, proxy.getId())
nova chamada: assertEquals(101, proxy.getId(), "Era esperado valores iguais, mas  101 é diferente de " + result2995 + " <proxy.getId()>")
chamada antiga: assertNull(proxy.getName())
nova chamada: assertNull(proxy.getName(), "Era esperado nulo, mas " + result2996 + " <proxy.getName()> não é nulo")
chamada antiga: assertTrue(proxy.isSmall())
nova chamada: assertTrue(proxy.isSmall(), "Era esperado verdadeiro, mas " + result2997 + " <proxy.isSmall()> é falso")
chamada antiga: assertEquals("Y", proxy.y())
nova chamada: assertEquals("Y", proxy.y(), "Era esperado valores iguais, mas  'Y' é diferente de " + result2998 + " <proxy.y()>")
chamada antiga: assertNull(proxy.y1())
nova chamada: assertNull(proxy.y1(), "Era esperado nulo, mas " + result2999 + " <proxy.y1()> não é nulo")
chamada antiga: assertEquals(object.toString(), proxy.toString())
nova chamada: assertEquals(object.toString(), proxy.toString(), "Era esperado valores iguais, mas " + result3000 + " <object.toString()> é diferente de " + result3001 + " <proxy.toString()>")
chamada antiga: assertEquals(object.hashCode(), proxy.hashCode())
nova chamada: assertEquals(object.hashCode(), proxy.hashCode(), "Era esperado valores iguais, mas " + result3002 + " <object.hashCode()> é diferente de " + result3003 + " <proxy.hashCode()>")
chamada antiga: assertEquals("ok", proxy.getMask())
nova chamada: assertEquals("ok", proxy.getMask(), "Era esperado valores iguais, mas  'ok' é diferente de " + result3004 + " <proxy.getMask()>")
chamada antiga: assertEquals("okk", proxy.getMask())
nova chamada: assertEquals("okk", proxy.getMask(), "Era esperado valores iguais, mas  'okk' é diferente de " + result3005 + " <proxy.getMask()>")
chamada antiga: assertTrue(error)
nova chamada: assertTrue(error, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, JSONObject.parseObject("{}").size())
nova chamada: assertEquals(0, JSONObject.parseObject("{}").size(), "Era esperado valores iguais, mas  0 é diferente de " + result3006 + " <JSONObject.parseObject('{}').size()>")
chamada antiga: assertEquals(0, ((JSONObject) JSONObject.parse("{}")).size())
nova chamada: assertEquals(0, ((JSONObject) JSONObject.parse("{}")).size(), "Era esperado valores iguais, mas  0 é diferente de " + result3007 + " <((JSONObject) JSONObject.parse('{}')).size()>")
chamada antiga: assertEquals(101, JSONObject.parseObject("{\"id\":101}", Bean.class).id)
nova chamada: assertEquals(101, JSONObject.parseObject("{\"id\":101}", Bean.class).id, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.parseObject('{\'id\':101}', Bean.class).id")
chamada antiga: assertEquals(101, JSONObject.parseObject("{\"ID\":101}", Bean.class, JSONReader.Feature.SupportSmartMatch).id)
nova chamada: assertEquals(101, JSONObject.parseObject("{\"ID\":101}", Bean.class, JSONReader.Feature.SupportSmartMatch).id, "Era esperado valores iguais, mas  101 é diferente de " + " JSONObject.parseObject('{\'ID\':101}', Bean.class, JSONReader.Feature.SupportSmartMatch).id")
chamada antiga: assertEquals(0, JSONArray.parseArray("[]").size())
nova chamada: assertEquals(0, JSONArray.parseArray("[]").size(), "Era esperado valores iguais, mas  0 é diferente de " + result3008 + " <JSONArray.parseArray('[]').size()>")
chamada antiga: assertEquals(0, JSONArray.parse("[]").size())
nova chamada: assertEquals(0, JSONArray.parse("[]").size(), "Era esperado valores iguais, mas  0 é diferente de " + result3009 + " <JSONArray.parse('[]').size()>")
chamada antiga: assertEquals("{\"values\":[1]}", object.toString())
nova chamada: assertEquals("{\"values\":[1]}", object.toString(), "Era esperado valores iguais, mas  '{\'values\':[1]}' é diferente de " + result3010 + " <object.toString()>")
chamada antiga: assertEquals("{\"values\":{\"id\":123}}", object.toString())
nova chamada: assertEquals("{\"values\":{\"id\":123}}", object.toString(), "Era esperado valores iguais, mas  '{\'values\':{\'id\':123}}' é diferente de " + result3011 + " <object.toString()>")
chamada antiga: assertEquals(101, object.getByPath("id"))
nova chamada: assertEquals(101, object.getByPath("id"), "Era esperado valores iguais, mas  101 é diferente de " + result3012 + " <object.getByPath('id')>")
chamada antiga: assertEquals(1001, object.getByPath("item.itemId"))
nova chamada: assertEquals(1001, object.getByPath("item.itemId"), "Era esperado valores iguais, mas  1001 é diferente de " + result3013 + " <object.getByPath('item.itemId')>")
chamada antiga: assertNull(object.getBytes("bytes"))
nova chamada: assertNull(object.getBytes("bytes"), "Era esperado nulo, mas " + result3014 + " <object.getBytes('bytes')> não é nulo")
chamada antiga: assertTrue(jsonObject.isEmpty())
nova chamada: assertTrue(jsonObject.isEmpty(), "Era esperado verdadeiro, mas " + result3015 + " <jsonObject.isEmpty()> é falso")
chamada antiga: assertTrue(jsonObject.values().isEmpty())
nova chamada: assertTrue(jsonObject.values().isEmpty(), "Era esperado verdadeiro, mas " + result3016 + " <jsonObject.values().isEmpty()> é falso")
chamada antiga: assertNull(jsonObject.remove("id"))
nova chamada: assertNull(jsonObject.remove("id"), "Era esperado nulo, mas " + result3017 + " <jsonObject.remove('id')> não é nulo")
chamada antiga: assertNull(jsonObject.getBytes("id"))
nova chamada: assertNull(jsonObject.getBytes("id"), "Era esperado nulo, mas " + result3018 + " <jsonObject.getBytes('id')> não é nulo")
chamada antiga: assertEquals(0, jsonObject.getBytes("bytes").length)
nova chamada: assertEquals(0, jsonObject.getBytes("bytes").length, "Era esperado valores iguais, mas  0 é diferente de " + " jsonObject.getBytes('bytes').length")
chamada antiga: assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")))
nova chamada: assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")), "Era esperado valores iguais, mas  'abc中华人民共和国' é diferente de " + " new String(jsonObject.getBytes('bytes'))")
chamada antiga: assertEquals(0, JSONObject.of().getSize("value"))
nova chamada: assertEquals(0, JSONObject.of().getSize("value"), "Era esperado valores iguais, mas  0 é diferente de " + result3019 + " <JSONObject.of().getSize('value')>")
chamada antiga: assertEquals(1, JSONObject.of("value", JSONObject.of("a", 1)).getSize("value"))
nova chamada: assertEquals(1, JSONObject.of("value", JSONObject.of("a", 1)).getSize("value"), "Era esperado valores iguais, mas  1 é diferente de " + result3020 + " <JSONObject.of('value', JSONObject.of('a', 1)).getSize('value')>")
chamada antiga: assertEquals(2, JSONObject.of("value", JSONArray.of("a", "b")).getSize("value"))
nova chamada: assertEquals(2, JSONObject.of("value", JSONArray.of("a", "b")).getSize("value"), "Era esperado valores iguais, mas  2 é diferente de " + result3021 + " <JSONObject.of('value', JSONArray.of('a', 'b')).getSize('value')>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3022 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03T15:26:05+08:00\'}' é diferente de " + result3023 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday, student1.birthday)
nova chamada: assertEquals(student.birthday, student1.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student1.birthday")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03T00:00:00+08:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03T00:00:00+08:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03T00:00:00+08:00\'}' é diferente de " + result3024 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3025 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  str é diferente de " + result3026 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:00\'}' é diferente de " + result3027 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:00\'}' é diferente de " + result3028 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student1))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student1), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:00\'}' é diferente de " + result3029 + " <JSON.toJSONString(student1)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:00\'}' é diferente de " + result3030 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday, student1.birthday)
nova chamada: assertEquals(student.birthday, student1.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student1.birthday")
chamada antiga: assertSame(student.birthday, jsonPath.eval(student))
nova chamada: assertSame(student.birthday, jsonPath.eval(student), "Era esperado objetos iguais, mas  student.birthday é diferente de " + result3031 + " <jsonPath.eval(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:00\'}' é diferente de " + result3032 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday, student1.birthday)
nova chamada: assertEquals(student.birthday, student1.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student1.birthday")
chamada antiga: assertSame(student.birthday, jsonPath.eval(student))
nova chamada: assertSame(student.birthday, jsonPath.eval(student), "Era esperado objetos iguais, mas  student.birthday é diferente de " + result3033 + " <jsonPath.eval(student)>")
chamada antiga: assertSame(student.birthday, jsonPath.eval(student))
nova chamada: assertSame(student.birthday, jsonPath.eval(student), "Era esperado objetos iguais, mas  student.birthday é diferente de " + result3034 + " <jsonPath.eval(student)>")
chamada antiga: assertAll(() -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertEquals("{\"value\":\"20220608 00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3035 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3036 + " <bean.value.getYear()> é diferente de " + result3037 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3038 + " <bean.value.getMonthValue()> é diferente de " + result3039 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3040 + " <bean.value.getDayOfMonth()> é diferente de " + result3041 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3042 + " <bean.value.getYear()> é diferente de " + result3043 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3044 + " <bean.value.getMonthValue()> é diferente de " + result3045 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3046 + " <bean.value.getDayOfMonth()> é diferente de " + result3047 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3048 + " <bean.value.getYear()> é diferente de " + result3049 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3050 + " <bean.value.getMonthValue()> é diferente de " + result3051 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3052 + " <bean.value.getDayOfMonth()> é diferente de " + result3053 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654617600000}", str)
nova chamada: assertEquals("{\"value\":1654617600000}", str, "Era esperado valores iguais, mas  '{\'value\':1654617600000}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3054 + " <bean.value.getYear()> é diferente de " + result3055 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3056 + " <bean.value.getMonthValue()> é diferente de " + result3057 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3058 + " <bean.value.getDayOfMonth()> é diferente de " + result3059 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3060 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1612800000L, millis(bean1.value))
nova chamada: assertEquals(1612800000L, millis(bean1.value), "Era esperado valores iguais, mas  1612800000L é diferente de " + result3061 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3062 + " <bean.value.getYear()> é diferente de " + result3063 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3064 + " <bean.value.getMonthValue()> é diferente de " + result3065 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3066 + " <bean.value.getDayOfMonth()> é diferente de " + result3067 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3068 + " <bean.value.getYear()> é diferente de " + result3069 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3070 + " <bean.value.getMonthValue()> é diferente de " + result3071 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3072 + " <bean.value.getDayOfMonth()> é diferente de " + result3073 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3074 + " <bean.value.getYear()> é diferente de " + result3075 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3076 + " <bean.value.getMonthValue()> é diferente de " + result3077 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3078 + " <bean.value.getDayOfMonth()> é diferente de " + result3079 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654617600000}", str)
nova chamada: assertEquals("{\"value\":1654617600000}", str, "Era esperado valores iguais, mas  '{\'value\':1654617600000}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3080 + " <bean.value.getYear()> é diferente de " + result3081 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3082 + " <bean.value.getMonthValue()> é diferente de " + result3083 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3084 + " <bean.value.getDayOfMonth()> é diferente de " + result3085 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654617600}", str)
nova chamada: assertEquals("{\"value\":1654617600}", str, "Era esperado valores iguais, mas  '{\'value\':1654617600}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3086 + " <bean.value.getYear()> é diferente de " + result3087 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3088 + " <bean.value.getMonthValue()> é diferente de " + result3089 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3090 + " <bean.value.getDayOfMonth()> é diferente de " + result3091 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"20220608 00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3092 + " <bean.value.getYear()> é diferente de " + result3093 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3094 + " <bean.value.getMonthValue()> é diferente de " + result3095 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3096 + " <bean.value.getDayOfMonth()> é diferente de " + result3097 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3098 + " <bean.value.getYear()> é diferente de " + result3099 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3100 + " <bean.value.getMonthValue()> é diferente de " + result3101 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3102 + " <bean.value.getDayOfMonth()> é diferente de " + result3103 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654617600000}", str)
nova chamada: assertEquals("{\"value\":1654617600000}", str, "Era esperado valores iguais, mas  '{\'value\':1654617600000}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3104 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654617600000L, millis(bean2.value))
nova chamada: assertEquals(1654617600000L, millis(bean2.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3105 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":1654617600}", str)
nova chamada: assertEquals("{\"value\":1654617600}", str, "Era esperado valores iguais, mas  '{\'value\':1654617600}' é diferente de " + " str")
chamada antiga: assertEquals(1612800000L, millis(bean1.value))
nova chamada: assertEquals(1612800000L, millis(bean1.value), "Era esperado valores iguais, mas  1612800000L é diferente de " + result3106 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654617600000L, millis(bean2.value))
nova chamada: assertEquals(1654617600000L, millis(bean2.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3107 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3108 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"00:00:00\"}", str)
nova chamada: assertEquals("{\"value\":\"00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3109 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"), "Era esperado valores iguais, mas  str é diferente de " + result3110 + " <JSON.toJSONString(student, 'yyyy-MM-dd')>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3111 + " <JSON.toJSONString(student)>")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3112 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3113 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean2.value))
nova chamada: assertEquals(1654686106000L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3114 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3115 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3116 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3117 + " <millis(bean1.value)>")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1654686106602L, millis(bean2.value))
nova chamada: assertEquals(1654686106602L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3118 + " <millis(bean2.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3119 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3120 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3121 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3122 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3123 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3124 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3125 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3126 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3127 + " <millis(bean1.value)>")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1654686106000L, millis(bean2.value))
nova chamada: assertEquals(1654686106000L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3128 + " <millis(bean2.value)>")
chamada antiga: assertNotNull(bean3.value)
nova chamada: assertNotNull(bean3.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1654686106000L, millis(bean3.value))
nova chamada: assertEquals(1654686106000L, millis(bean3.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3129 + " <millis(bean3.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(zdt.getYear(), zdt1.getYear())
nova chamada: assertEquals(zdt.getYear(), zdt1.getYear(), "Era esperado valores iguais, mas " + result3130 + " <zdt.getYear()> é diferente de " + result3131 + " <zdt1.getYear()>")
chamada antiga: assertEquals(zdt.getMonthValue(), zdt1.getMonthValue())
nova chamada: assertEquals(zdt.getMonthValue(), zdt1.getMonthValue(), "Era esperado valores iguais, mas " + result3132 + " <zdt.getMonthValue()> é diferente de " + result3133 + " <zdt1.getMonthValue()>")
chamada antiga: assertEquals(zdt.getDayOfMonth(), zdt1.getDayOfMonth())
nova chamada: assertEquals(zdt.getDayOfMonth(), zdt1.getDayOfMonth(), "Era esperado valores iguais, mas " + result3134 + " <zdt.getDayOfMonth()> é diferente de " + result3135 + " <zdt1.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3136 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean2.value))
nova chamada: assertEquals(1654686106602L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3137 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3138 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean2.value))
nova chamada: assertEquals(1654686106000L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3139 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3140 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(zdt.getHour(), zdt1.getHour())
nova chamada: assertEquals(zdt.getHour(), zdt1.getHour(), "Era esperado valores iguais, mas " + result3141 + " <zdt.getHour()> é diferente de " + result3142 + " <zdt1.getHour()>")
chamada antiga: assertEquals(zdt.getMinute(), zdt1.getMinute())
nova chamada: assertEquals(zdt.getMinute(), zdt1.getMinute(), "Era esperado valores iguais, mas " + result3143 + " <zdt.getMinute()> é diferente de " + result3144 + " <zdt1.getMinute()>")
chamada antiga: assertEquals(zdt.getSecond(), zdt1.getSecond())
nova chamada: assertEquals(zdt.getSecond(), zdt1.getSecond(), "Era esperado valores iguais, mas " + result3145 + " <zdt.getSecond()> é diferente de " + result3146 + " <zdt1.getSecond()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3147 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday, student1.birthday)
nova chamada: assertEquals(student.birthday, student1.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student1.birthday")
chamada antiga: assertEquals(student.birthday, student2.birthday)
nova chamada: assertEquals(student.birthday, student2.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student2.birthday")
chamada antiga: assertEquals(student.birthday.getYear(), student1.birthday.getYear())
nova chamada: assertEquals(student.birthday.getYear(), student1.birthday.getYear(), "Era esperado valores iguais, mas " + result3148 + " <student.birthday.getYear()> é diferente de " + result3149 + " <student1.birthday.getYear()>")
chamada antiga: assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli())
nova chamada: assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result3150 + " <student.birthday.toInstant().toEpochMilli()> é diferente de " + result3151 + " <student1.birthday.toInstant().toEpochMilli()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3152 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  str é diferente de " + result3153 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond())
nova chamada: assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond(), "Era esperado valores iguais, mas " + result3154 + " <student.birthday.toInstant().getEpochSecond()> é diferente de " + result3155 + " <student1.birthday.toInstant().getEpochSecond()>")
chamada antiga: assertEquals(student.birthday, student2.birthday)
nova chamada: assertEquals(student.birthday, student2.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student2.birthday")
chamada antiga: assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond())
nova chamada: assertEquals(student.birthday.toInstant().getEpochSecond(), student1.birthday.toInstant().getEpochSecond(), "Era esperado valores iguais, mas " + result3156 + " <student.birthday.toInstant().getEpochSecond()> é diferente de " + result3157 + " <student1.birthday.toInstant().getEpochSecond()>")
chamada antiga: assertEquals(student.birthday, student2.birthday)
nova chamada: assertEquals(student.birthday, student2.birthday, "Era esperado valores iguais, mas  student.birthday é diferente de " + " student2.birthday")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(json, JSON.toJSONString(bean))
nova chamada: assertEquals(json, JSON.toJSONString(bean), "Era esperado valores iguais, mas  json é diferente de " + result3158 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(bean.date, bean2.date)
nova chamada: assertEquals(bean.date, bean2.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean2.date")
chamada antiga: assertEquals(bean.date, bean3.date)
nova chamada: assertEquals(bean.date, bean3.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean3.date")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(json, JSON.toJSONString(bean))
nova chamada: assertEquals(json, JSON.toJSONString(bean), "Era esperado valores iguais, mas  json é diferente de " + result3159 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(bean.date, bean2.date)
nova chamada: assertEquals(bean.date, bean2.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean2.date")
chamada antiga: assertEquals(bean.date, bean3.date)
nova chamada: assertEquals(bean.date, bean3.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean3.date")
chamada antiga: assertEquals("\"yyyy-MM-dd\"", json)
nova chamada: assertEquals("\"yyyy-MM-dd\"", json, "Era esperado valores iguais, mas  '\'yyyy-MM-dd\'' é diferente de " + " json")
chamada antiga: assertEquals(format, format1)
nova chamada: assertEquals(format, format1, "Era esperado valores iguais, mas  format é diferente de " + " format1")
chamada antiga: assertEquals("new Date(1324138987429)", str)
nova chamada: assertEquals("new Date(1324138987429)", str, "Era esperado valores iguais, mas  'new Date(1324138987429)' é diferente de " + " str")
chamada antiga: assertEquals(date.getTime(), date1.getTime())
nova chamada: assertEquals(date.getTime(), date1.getTime(), "Era esperado valores iguais, mas " + result3160 + " <date.getTime()> é diferente de " + result3161 + " <date1.getTime()>")
chamada antiga: assertEquals("{\"date\":\"2011-12-18 00:23:07.429\"}", str)
nova chamada: assertEquals("{\"date\":\"2011-12-18 00:23:07.429\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2011-12-18 00:23:07.429\'}' é diferente de " + " str")
chamada antiga: assertEquals(date.getTime(), date1.getTime())
nova chamada: assertEquals(date.getTime(), date1.getTime(), "Era esperado valores iguais, mas " + result3162 + " <date.getTime()> é diferente de " + result3163 + " <date1.getTime()>")
chamada antiga: assertEquals("{\"date\":new Date(1324138987429)}", str)
nova chamada: assertEquals("{\"date\":new Date(1324138987429)}", str, "Era esperado valores iguais, mas  '{\'date\':new Date(1324138987429)}' é diferente de " + " str")
chamada antiga: assertEquals(date.getTime(), date1.getTime())
nova chamada: assertEquals(date.getTime(), date1.getTime(), "Era esperado valores iguais, mas " + result3164 + " <date.getTime()> é diferente de " + result3165 + " <date1.getTime()>")
chamada antiga: assertEquals("{\"date\":new Date(1324138987429)}", str)
nova chamada: assertEquals("{\"date\":new Date(1324138987429)}", str, "Era esperado valores iguais, mas  '{\'date\':new Date(1324138987429)}' é diferente de " + " str")
chamada antiga: assertEquals(date.getTime(), date1.getTime())
nova chamada: assertEquals(date.getTime(), date1.getTime(), "Era esperado valores iguais, mas " + result3166 + " <date.getTime()> é diferente de " + result3167 + " <date1.getTime()>")
chamada antiga: assertEquals("{\"date\":new Date(1324138987429)}", str)
nova chamada: assertEquals("{\"date\":new Date(1324138987429)}", str, "Era esperado valores iguais, mas  '{\'date\':new Date(1324138987429)}' é diferente de " + " str")
chamada antiga: assertEquals(date.getTime(), date1.getTime())
nova chamada: assertEquals(date.getTime(), date1.getTime(), "Era esperado valores iguais, mas " + result3168 + " <date.getTime()> é diferente de " + result3169 + " <date1.getTime()>")
chamada antiga: assertEquals(date.getTime(), date2.getTime())
nova chamada: assertEquals(date.getTime(), date2.getTime(), "Era esperado valores iguais, mas " + result3170 + " <date.getTime()> é diferente de " + result3171 + " <date2.getTime()>")
chamada antiga: assertEquals(date.getTime(), date2.getTime())
nova chamada: assertEquals(date.getTime(), date2.getTime(), "Era esperado valores iguais, mas " + result3172 + " <date.getTime()> é diferente de " + result3173 + " <date2.getTime()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3174 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:05\'}' é diferente de " + result3175 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student2))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03 15:26:05\"}", JSON.toJSONString(student2), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03 15:26:05\'}' é diferente de " + result3176 + " <JSON.toJSONString(student2)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3177 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  str é diferente de " + result3178 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str)
nova chamada: assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'1970-01-01 12:13:14\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"time\":\"1970-01-01 12:13:14.000\"}", str)
nova chamada: assertEquals("{\"time\":\"1970-01-01 12:13:14.000\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'1970-01-01 12:13:14.000\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str)
nova chamada: assertEquals("{\"time\":\"1970-01-01 12:13:14\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'1970-01-01 12:13:14\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"time\":\"12:13\"}", str)
nova chamada: assertEquals("{\"time\":\"12:13\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'12:13\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time.getHour(), bean1.time.getHour())
nova chamada: assertEquals(bean.time.getHour(), bean1.time.getHour(), "Era esperado valores iguais, mas " + result3179 + " <bean.time.getHour()> é diferente de " + result3180 + " <bean1.time.getHour()>")
chamada antiga: assertEquals(bean.time.getMinute(), bean1.time.getMinute())
nova chamada: assertEquals(bean.time.getMinute(), bean1.time.getMinute(), "Era esperado valores iguais, mas " + result3181 + " <bean.time.getMinute()> é diferente de " + result3182 + " <bean1.time.getMinute()>")
chamada antiga: assertEquals(bean.time.getSecond(), bean1.time.getSecond())
nova chamada: assertEquals(bean.time.getSecond(), bean1.time.getSecond(), "Era esperado valores iguais, mas " + result3183 + " <bean.time.getSecond()> é diferente de " + result3184 + " <bean1.time.getSecond()>")
chamada antiga: assertEquals("{\"time\":\"12:13\"}", str)
nova chamada: assertEquals("{\"time\":\"12:13\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'12:13\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time.getHour(), bean1.time.getHour())
nova chamada: assertEquals(bean.time.getHour(), bean1.time.getHour(), "Era esperado valores iguais, mas " + result3185 + " <bean.time.getHour()> é diferente de " + result3186 + " <bean1.time.getHour()>")
chamada antiga: assertEquals(bean.time.getMinute(), bean1.time.getMinute())
nova chamada: assertEquals(bean.time.getMinute(), bean1.time.getMinute(), "Era esperado valores iguais, mas " + result3187 + " <bean.time.getMinute()> é diferente de " + result3188 + " <bean1.time.getMinute()>")
chamada antiga: assertEquals(bean.time.getSecond(), bean1.time.getSecond())
nova chamada: assertEquals(bean.time.getSecond(), bean1.time.getSecond(), "Era esperado valores iguais, mas " + result3189 + " <bean.time.getSecond()> é diferente de " + result3190 + " <bean1.time.getSecond()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3191 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3192 + " <student.birthday.getTime()> é diferente de " + result3193 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3194 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"birthday\":\"15:26:05\"}", JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("{\"birthday\":\"15:26:05\"}", JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '{\'birthday\':\'15:26:05\'}' é diferente de " + result3195 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3196 + " <student.birthday.getTime()> é diferente de " + result3197 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3198 + " <student.birthday.getTime()> é diferente de " + result3199 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str)
nova chamada: assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2017-09-11 00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"date\":\"2017-09-11 00:00:00.000\"}", str)
nova chamada: assertEquals("{\"date\":\"2017-09-11 00:00:00.000\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2017-09-11 00:00:00.000\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str)
nova chamada: assertEquals("{\"date\":\"2017-09-11 00:00:00\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2017-09-11 00:00:00\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result3200 + " <v1.getValue()> é diferente de " + result3201 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result3202 + " <v1.getValue()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3203 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'birthday\':\'2022-05-03T15:26:05+08:00\'}' é diferente de " + result3204 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3205 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  str é diferente de " + result3206 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("{\"value\":1654686106601}", text)
nova chamada: assertEquals("{\"value\":1654686106601}", text, "Era esperado valores iguais, mas  '{\'value\':1654686106601}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result3207 + " <v1.getValue()> é diferente de " + result3208 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result3209 + " <v1.getValue()> é diferente de " + result3210 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result3211 + " <v1.getValue()> é diferente de " + result3212 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result3213 + " <v1.getValue()>")
chamada antiga: assertEquals(1654686106602L, date.getTime())
nova chamada: assertEquals(1654686106602L, date.getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3214 + " <date.getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3215 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3216 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3217 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3218 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3219 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3220 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3221 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3222 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3223 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3224 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3225 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106, millis(bean1.value))
nova chamada: assertEquals(1654686106, millis(bean1.value), "Era esperado valores iguais, mas  1654686106 é diferente de " + result3226 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3227 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3228 + " <bean.value.getYear()> é diferente de " + result3229 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3230 + " <bean.value.getMonthValue()> é diferente de " + result3231 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3232 + " <bean.value.getDayOfMonth()> é diferente de " + result3233 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3234 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean2.value))
nova chamada: assertEquals(1654686106602L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3235 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3236 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean2.value))
nova chamada: assertEquals(1654686106000L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3237 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3238 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getHour(), bean1.value.getHour())
nova chamada: assertEquals(bean.value.getHour(), bean1.value.getHour(), "Era esperado valores iguais, mas " + result3239 + " <bean.value.getHour()> é diferente de " + result3240 + " <bean1.value.getHour()>")
chamada antiga: assertEquals(bean.value.getMinute(), bean1.value.getMinute())
nova chamada: assertEquals(bean.value.getMinute(), bean1.value.getMinute(), "Era esperado valores iguais, mas " + result3241 + " <bean.value.getMinute()> é diferente de " + result3242 + " <bean1.value.getMinute()>")
chamada antiga: assertEquals(bean.value.getSecond(), bean1.value.getSecond())
nova chamada: assertEquals(bean.value.getSecond(), bean1.value.getSecond(), "Era esperado valores iguais, mas " + result3243 + " <bean.value.getSecond()> é diferente de " + result3244 + " <bean1.value.getSecond()>")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertAll(() -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll(() -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
chamada antiga: assertAll(() -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3245 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3246 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3247 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3248 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3249 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3250 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3251 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3252 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3253 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, millis(bean1.value))
nova chamada: assertEquals(1654617600000L, millis(bean1.value), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3254 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3255 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106, millis(bean1.value))
nova chamada: assertEquals(1654686106, millis(bean1.value), "Era esperado valores iguais, mas  1654686106 é diferente de " + result3256 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3257 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getYear(), bean1.value.getYear())
nova chamada: assertEquals(bean.value.getYear(), bean1.value.getYear(), "Era esperado valores iguais, mas " + result3258 + " <bean.value.getYear()> é diferente de " + result3259 + " <bean1.value.getYear()>")
chamada antiga: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue())
nova chamada: assertEquals(bean.value.getMonthValue(), bean1.value.getMonthValue(), "Era esperado valores iguais, mas " + result3260 + " <bean.value.getMonthValue()> é diferente de " + result3261 + " <bean1.value.getMonthValue()>")
chamada antiga: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth())
nova chamada: assertEquals(bean.value.getDayOfMonth(), bean1.value.getDayOfMonth(), "Era esperado valores iguais, mas " + result3262 + " <bean.value.getDayOfMonth()> é diferente de " + result3263 + " <bean1.value.getDayOfMonth()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3264 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106602L, millis(bean2.value))
nova chamada: assertEquals(1654686106602L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3265 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, millis(bean1.value))
nova chamada: assertEquals(1654686106000L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3266 + " <millis(bean1.value)>")
chamada antiga: assertEquals(1654686106000L, millis(bean2.value))
nova chamada: assertEquals(1654686106000L, millis(bean2.value), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3267 + " <millis(bean2.value)>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, millis(bean1.value))
nova chamada: assertEquals(1654686106602L, millis(bean1.value), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3268 + " <millis(bean1.value)>")
chamada antiga: assertEquals("{\"value\":\"19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.value.getHour(), bean1.value.getHour())
nova chamada: assertEquals(bean.value.getHour(), bean1.value.getHour(), "Era esperado valores iguais, mas " + result3269 + " <bean.value.getHour()> é diferente de " + result3270 + " <bean1.value.getHour()>")
chamada antiga: assertEquals(bean.value.getMinute(), bean1.value.getMinute())
nova chamada: assertEquals(bean.value.getMinute(), bean1.value.getMinute(), "Era esperado valores iguais, mas " + result3271 + " <bean.value.getMinute()> é diferente de " + result3272 + " <bean1.value.getMinute()>")
chamada antiga: assertEquals(bean.value.getSecond(), bean1.value.getSecond())
nova chamada: assertEquals(bean.value.getSecond(), bean1.value.getSecond(), "Era esperado valores iguais, mas " + result3273 + " <bean.value.getSecond()> é diferente de " + result3274 + " <bean1.value.getSecond()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3275 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3276 + " <student.birthday.getTime()> é diferente de " + result3277 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3278 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd"), "Era esperado valores iguais, mas  str é diferente de " + result3279 + " <JSON.toJSONString(student, 'yyyy-MM-dd')>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3280 + " <student.birthday.getTime()> é diferente de " + result3281 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3282 + " <student.birthday.getTime()> é diferente de " + result3283 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(student.birthday.getTime(), student1.birthday.getTime())
nova chamada: assertEquals(student.birthday.getTime(), student1.birthday.getTime(), "Era esperado valores iguais, mas " + result3284 + " <student.birthday.getTime()> é diferente de " + result3285 + " <student1.birthday.getTime()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student))
nova chamada: assertEquals(str, JSON.toJSONString(student), "Era esperado valores iguais, mas  str é diferente de " + result3286 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals(student.birthday.getYear(), student1.birthday.getYear())
nova chamada: assertEquals(student.birthday.getYear(), student1.birthday.getYear(), "Era esperado valores iguais, mas " + result3287 + " <student.birthday.getYear()> é diferente de " + result3288 + " <student1.birthday.getYear()>")
chamada antiga: assertEquals(student.birthday.getMonthValue(), student1.birthday.getMonthValue())
nova chamada: assertEquals(student.birthday.getMonthValue(), student1.birthday.getMonthValue(), "Era esperado valores iguais, mas " + result3289 + " <student.birthday.getMonthValue()> é diferente de " + result3290 + " <student1.birthday.getMonthValue()>")
chamada antiga: assertEquals(student.birthday.getDayOfMonth(), student1.birthday.getDayOfMonth())
nova chamada: assertEquals(student.birthday.getDayOfMonth(), student1.birthday.getDayOfMonth(), "Era esperado valores iguais, mas " + result3291 + " <student.birthday.getDayOfMonth()> é diferente de " + result3292 + " <student1.birthday.getDayOfMonth()>")
chamada antiga: assertEquals(student.birthday.getHour(), student1.birthday.getHour())
nova chamada: assertEquals(student.birthday.getHour(), student1.birthday.getHour(), "Era esperado valores iguais, mas " + result3293 + " <student.birthday.getHour()> é diferente de " + result3294 + " <student1.birthday.getHour()>")
chamada antiga: assertEquals(student.birthday.getMinute(), student1.birthday.getMinute())
nova chamada: assertEquals(student.birthday.getMinute(), student1.birthday.getMinute(), "Era esperado valores iguais, mas " + result3295 + " <student.birthday.getMinute()> é diferente de " + result3296 + " <student1.birthday.getMinute()>")
chamada antiga: assertEquals(student.birthday.getSecond(), student1.birthday.getSecond())
nova chamada: assertEquals(student.birthday.getSecond(), student1.birthday.getSecond(), "Era esperado valores iguais, mas " + result3297 + " <student.birthday.getSecond()> é diferente de " + result3298 + " <student1.birthday.getSecond()>")
chamada antiga: assertEquals(student.birthday.getNano(), student1.birthday.getNano())
nova chamada: assertEquals(student.birthday.getNano(), student1.birthday.getNano(), "Era esperado valores iguais, mas " + result3299 + " <student.birthday.getNano()> é diferente de " + result3300 + " <student1.birthday.getNano()>")
chamada antiga: assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli())
nova chamada: assertEquals(student.birthday.toInstant().toEpochMilli(), student1.birthday.toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result3301 + " <student.birthday.toInstant().toEpochMilli()> é diferente de " + result3302 + " <student1.birthday.toInstant().toEpochMilli()>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals(str, JSON.toJSONString(student, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  str é diferente de " + result3303 + " <JSON.toJSONString(student, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals(str, JSON.toJSONString(student, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  str é diferente de " + result3304 + " <JSON.toJSONString(student, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals(s, '"' + zonedDateTime2.toString() + '"')
nova chamada: assertEquals(s, '"' + zonedDateTime2.toString() + '"', "Era esperado valores iguais, mas  s é diferente de " + " ''' + zonedDateTime2.toString() + '''")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3305 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3306 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3307 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3308 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3309 + " <bean1.value.getTime()>")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3310 + " <bean1.value.getTime()>")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3311 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3312 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, bean1.value.getTime())
nova chamada: assertEquals(1654617600000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3313 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, bean1.value.getTime())
nova chamada: assertEquals(1654617600000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3314 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3315 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106, bean1.value.getTime())
nova chamada: assertEquals(1654686106, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106 é diferente de " + result3316 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3317 + " <bean1.value.getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3318 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3319 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3320 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3321 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3322 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3323 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3324 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08T19:01:46.602+08:00\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3325 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654617600000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3326 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"2022-06-08\"}", str)
nova chamada: assertEquals("{\"value\":\"2022-06-08\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'2022-06-08\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654617600000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654617600000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654617600000L é diferente de " + result3327 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106602}", str)
nova chamada: assertEquals("{\"value\":1654686106602}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106602}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106602L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106602L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106602L é diferente de " + result3328 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":1654686106}", str)
nova chamada: assertEquals("{\"value\":1654686106}", str, "Era esperado valores iguais, mas  '{\'value\':1654686106}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106 é diferente de " + result3329 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"value\":\"20220608 19:01:46\"}", str)
nova chamada: assertEquals("{\"value\":\"20220608 19:01:46\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'20220608 19:01:46\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654686106000L, bean1.value.getTime().getTime())
nova chamada: assertEquals(1654686106000L, bean1.value.getTime().getTime(), "Era esperado valores iguais, mas  1654686106000L é diferente de " + result3330 + " <bean1.value.getTime().getTime()>")
chamada antiga: assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2017-12-13\',\'dateTime\':\'2017-01-02 12:13:14\'}' é diferente de " + result3331 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2017-12-13\',\'dateTime\':\'2017-01-02 12:13:14\'}' é diferente de " + result3332 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("\"2017-12-13 00:00:00\"", JSON.toJSONString(date))
nova chamada: assertEquals("\"2017-12-13 00:00:00\"", JSON.toJSONString(date), "Era esperado valores iguais, mas  '\'2017-12-13 00:00:00\'' é diferente de " + result3333 + " <JSON.toJSONString(date)>")
chamada antiga: assertEquals("\"2017-12-13\"", JSON.toJSONString(date))
nova chamada: assertEquals("\"2017-12-13\"", JSON.toJSONString(date), "Era esperado valores iguais, mas  '\'2017-12-13\'' é diferente de " + result3334 + " <JSON.toJSONString(date)>")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((int[]) value[0])[0])
nova chamada: assertEquals(1, ((int[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((int[]) value[0])[0]")
chamada antiga: assertEquals(2, ((int[]) value[1])[0])
nova chamada: assertEquals(2, ((int[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((int[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((short[]) value[0])[0])
nova chamada: assertEquals(1, ((short[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((short[]) value[0])[0]")
chamada antiga: assertEquals(2, ((short[]) value[1])[0])
nova chamada: assertEquals(2, ((short[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((short[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((byte[]) value[0])[0])
nova chamada: assertEquals(1, ((byte[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((byte[]) value[0])[0]")
chamada antiga: assertEquals(2, ((byte[]) value[1])[0])
nova chamada: assertEquals(2, ((byte[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((byte[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((long[]) value[0])[0])
nova chamada: assertEquals(1, ((long[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((long[]) value[0])[0]")
chamada antiga: assertEquals(2, ((long[]) value[1])[0])
nova chamada: assertEquals(2, ((long[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((long[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((float[]) value[0])[0])
nova chamada: assertEquals(1, ((float[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((float[]) value[0])[0]")
chamada antiga: assertEquals(2, ((float[]) value[1])[0])
nova chamada: assertEquals(2, ((float[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((float[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((double[]) value[0])[0])
nova chamada: assertEquals(1, ((double[]) value[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((double[]) value[0])[0]")
chamada antiga: assertEquals(2, ((double[]) value[1])[0])
nova chamada: assertEquals(2, ((double[]) value[1])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((double[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals('1', ((char[]) value[0])[0])
nova chamada: assertEquals('1', ((char[]) value[0])[0], "Era esperado valores iguais, mas  '1' é diferente de " + " ((char[]) value[0])[0]")
chamada antiga: assertEquals('2', ((char[]) value[1])[0])
nova chamada: assertEquals('2', ((char[]) value[1])[0], "Era esperado valores iguais, mas  '2' é diferente de " + " ((char[]) value[1])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(1, ((int[]) ((Object[]) value[0])[0])[0])
nova chamada: assertEquals(1, ((int[]) ((Object[]) value[0])[0])[0], "Era esperado valores iguais, mas  1 é diferente de " + " ((int[]) ((Object[]) value[0])[0])[0]")
chamada antiga: assertEquals(2, ((int[]) ((Object[]) value[1])[0])[0])
nova chamada: assertEquals(2, ((int[]) ((Object[]) value[1])[0])[0], "Era esperado valores iguais, mas  2 é diferente de " + " ((int[]) ((Object[]) value[1])[0])[0]")
chamada antiga: assertEquals(2, value.length)
nova chamada: assertEquals(2, value.length, "Era esperado valores iguais, mas  2 é diferente de " + " value.length")
chamada antiga: assertEquals(false, ((boolean[]) value[0])[0])
nova chamada: assertEquals(false, ((boolean[]) value[0])[0], "Era esperado valores iguais, mas  false é diferente de " + " ((boolean[]) value[0])[0]")
chamada antiga: assertEquals(true, ((boolean[]) value[1])[0])
nova chamada: assertEquals(true, ((boolean[]) value[1])[0], "Era esperado valores iguais, mas  true é diferente de " + " ((boolean[]) value[1])[0]")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3335 + " <list.size()>")
chamada antiga: assertEquals(101L, list.get(0))
nova chamada: assertEquals(101L, list.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result3336 + " <list.get(0)>")
chamada antiga: assertEquals(102L, list.get(1))
nova chamada: assertEquals(102L, list.get(1), "Era esperado valores iguais, mas  102L é diferente de " + result3337 + " <list.get(1)>")
chamada antiga: assertEquals(103L, list.get(2))
nova chamada: assertEquals(103L, list.get(2), "Era esperado valores iguais, mas  103L é diferente de " + result3338 + " <list.get(2)>")
chamada antiga: assertEquals(123, response.value.id)
nova chamada: assertEquals(123, response.value.id, "Era esperado valores iguais, mas  123 é diferente de " + " response.value.id")
chamada antiga: assertEquals(1, items.size())
nova chamada: assertEquals(1, items.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3339 + " <items.size()>")
chamada antiga: assertEquals(123, items.get(0).id)
nova chamada: assertEquals(123, items.get(0).id, "Era esperado valores iguais, mas  123 é diferente de " + " items.get(0).id")
chamada antiga: assertEquals("\"2013-05-06 12:13:14\"", JSONB.toJSONString(jsonWriter.getBytes()))
nova chamada: assertEquals("\"2013-05-06 12:13:14\"", JSONB.toJSONString(jsonWriter.getBytes()), "Era esperado valores iguais, mas  '\'2013-05-06 12:13:14\'' é diferente de " + result3340 + " <JSONB.toJSONString(jsonWriter.getBytes())>")
chamada antiga: assertEquals("\"A\"", JSONB.toJSONString(jsonWriter.getBytes()))
nova chamada: assertEquals("\"A\"", JSONB.toJSONString(jsonWriter.getBytes()), "Era esperado valores iguais, mas  '\'A\'' é diferente de " + result3341 + " <JSONB.toJSONString(jsonWriter.getBytes())>")
chamada antiga: assertEquals("[\n" + "\t1,\n" + "\t2,\n" + "\t3\n" + "]", JSONB.toJSONString(jsonWriter.getBytes()))
nova chamada: assertEquals("[\n" + "\t1,\n" + "\t2,\n" + "\t3\n" + "]", JSONB.toJSONString(jsonWriter.getBytes()), "Era esperado valores iguais, mas  '[\n' + '\t1,\n' + '\t2,\n' + '\t3\n' + ']' é diferente de " + result3342 + " <JSONB.toJSONString(jsonWriter.getBytes())>")
chamada antiga: assertEquals(5, JSONWriterJSONB.sizeOfInt(Integer.MAX_VALUE))
nova chamada: assertEquals(5, JSONWriterJSONB.sizeOfInt(Integer.MAX_VALUE), "Era esperado valores iguais, mas  5 é diferente de " + result3343 + " <JSONWriterJSONB.sizeOfInt(Integer.MAX_VALUE)>")
chamada antiga: assertEquals("[262144,18000000]", JSON.toJSONString(result))
nova chamada: assertEquals("[262144,18000000]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[262144,18000000]' é diferente de " + result3344 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString((Object[]) path.extract("{}")))
nova chamada: assertEquals("[null,null]", JSON.toJSONString((Object[]) path.extract("{}")), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3345 + " <JSON.toJSONString((Object[]) path.extract('{}'))>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3346 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3347 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("{\n" + "\t\"images#0\":[\n" + "\t\t{\n" + "\t\t\t\"height#1\":768,\n" + "\t\t\t\"size#2\":1,\n" + "\t\t\t\"title#3\":\"Javaone Keynote\",\n" + "\t\t\t\"uri#4\":\"http://javaone.com/keynote_large.jpg\",\n" + "\t\t\t\"width#5\":1024\n" + "\t\t},\n" + "\t\t{\n" + "\t\t\t\"#1\":240,\n" + "\t\t\t\"#2\":0,\n" + "\t\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\t\"#4\":\"http://javaone.com/keynote_small.jpg\",\n" + "\t\t\t\"#5\":320\n" + "\t\t}\n" + "\t],\n" + "\t\"media#6\":{\n" + "\t\t\"bitrate#7\":262144,\n" + "\t\t\"duration#8\":18000000,\n" + "\t\t\"format#9\":\"video/mpg4\",\n" + "\t\t\"#1\":480,\n" + "\t\t\"persons#10\":[\n" + "\t\t\t\"Bill Gates\",\n" + "\t\t\t\"Steve Jobs\"\n" + "\t\t],\n" + "\t\t\"player#11\":0,\n" + "\t\t\"#2\":58982400,\n" + "\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\"#4\":\"http://javaone.com/keynote.mpg\",\n" + "\t\t\"#5\":640\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"images#0\":[\n" + "\t\t{\n" + "\t\t\t\"height#1\":768,\n" + "\t\t\t\"size#2\":1,\n" + "\t\t\t\"title#3\":\"Javaone Keynote\",\n" + "\t\t\t\"uri#4\":\"http://javaone.com/keynote_large.jpg\",\n" + "\t\t\t\"width#5\":1024\n" + "\t\t},\n" + "\t\t{\n" + "\t\t\t\"#1\":240,\n" + "\t\t\t\"#2\":0,\n" + "\t\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\t\"#4\":\"http://javaone.com/keynote_small.jpg\",\n" + "\t\t\t\"#5\":320\n" + "\t\t}\n" + "\t],\n" + "\t\"media#6\":{\n" + "\t\t\"bitrate#7\":262144,\n" + "\t\t\"duration#8\":18000000,\n" + "\t\t\"format#9\":\"video/mpg4\",\n" + "\t\t\"#1\":480,\n" + "\t\t\"persons#10\":[\n" + "\t\t\t\"Bill Gates\",\n" + "\t\t\t\"Steve Jobs\"\n" + "\t\t],\n" + "\t\t\"player#11\":0,\n" + "\t\t\"#2\":58982400,\n" + "\t\t\"#3\":\"Javaone Keynote\",\n" + "\t\t\"#4\":\"http://javaone.com/keynote.mpg\",\n" + "\t\t\"#5\":640\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'images#0\':[\n' + '\t\t{\n' + '\t\t\t\'height#1\':768,\n' + '\t\t\t\'size#2\':1,\n' + '\t\t\t\'title#3\':\'Javaone Keynote\',\n' + '\t\t\t\'uri#4\':\'http://javaone.com/keynote_large.jpg\',\n' + '\t\t\t\'width#5\':1024\n' + '\t\t},\n' + '\t\t{\n' + '\t\t\t\'#1\':240,\n' + '\t\t\t\'#2\':0,\n' + '\t\t\t\'#3\':\'Javaone Keynote\',\n' + '\t\t\t\'#4\':\'http://javaone.com/keynote_small.jpg\',\n' + '\t\t\t\'#5\':320\n' + '\t\t}\n' + '\t],\n' + '\t\'media#6\':{\n' + '\t\t\'bitrate#7\':262144,\n' + '\t\t\'duration#8\':18000000,\n' + '\t\t\'format#9\':\'video/mpg4\',\n' + '\t\t\'#1\':480,\n' + '\t\t\'persons#10\':[\n' + '\t\t\t\'Bill Gates\',\n' + '\t\t\t\'Steve Jobs\'\n' + '\t\t],\n' + '\t\t\'player#11\':0,\n' + '\t\t\'#2\':58982400,\n' + '\t\t\'#3\':\'Javaone Keynote\',\n' + '\t\t\'#4\':\'http://javaone.com/keynote.mpg\',\n' + '\t\t\'#5\':640\n' + '\t}\n' + '}' é diferente de " + result3348 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(350, jsonbBytes.length)
nova chamada: assertEquals(350, jsonbBytes.length, "Era esperado valores iguais, mas  350 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
nova chamada: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat(), "Era esperado valores iguais, mas " + result3349 + " <o.getMedia().getFormat()> é diferente de " + result3350 + " <o1.getMedia().getFormat()>")
chamada antiga: assertEquals(397, jsonbBytes.length)
nova chamada: assertEquals(397, jsonbBytes.length, "Era esperado valores iguais, mas  397 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
nova chamada: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat(), "Era esperado valores iguais, mas " + result3351 + " <o.getMedia().getFormat()> é diferente de " + result3352 + " <o1.getMedia().getFormat()>")
chamada antiga: assertEquals(223, jsonbBytes.length)
nova chamada: assertEquals(223, jsonbBytes.length, "Era esperado valores iguais, mas  223 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat())
nova chamada: assertEquals(o.getMedia().getFormat(), o1.getMedia().getFormat(), "Era esperado valores iguais, mas " + result3353 + " <o.getMedia().getFormat()> é diferente de " + result3354 + " <o1.getMedia().getFormat()>")
chamada antiga: assertEquals(276, jsonbBytes.length)
nova chamada: assertEquals(276, jsonbBytes.length, "Era esperado valores iguais, mas  276 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals("[262144,18000000]", JSON.toJSONString(result))
nova chamada: assertEquals("[262144,18000000]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[262144,18000000]' é diferente de " + result3355 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3356 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3357 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3358 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3359 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3360 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[null,null]", JSON.toJSONString(result))
nova chamada: assertEquals("[null,null]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[null,null]' é diferente de " + result3361 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals(jsonbDump, new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals(jsonbDump, new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  jsonbDump é diferente de " + result3362 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(JSON.toJSONString(object), JSON.toJSONString(object2))
nova chamada: assertEquals(JSON.toJSONString(object), JSON.toJSONString(object2), "Era esperado valores iguais, mas " + result3363 + " <JSON.toJSONString(object)> é diferente de " + result3364 + " <JSON.toJSONString(object2)>")
chamada antiga: assertEquals(5, refs.size())
nova chamada: assertEquals(5, refs.size(), "Era esperado valores iguais, mas  5 é diferente de " + result3365 + " <refs.size()>")
chamada antiga: assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas " + result3366 + " <JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat)> é diferente de " + result3367 + " <JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertEquals(5, refs.size())
nova chamada: assertEquals(5, refs.size(), "Era esperado valores iguais, mas  5 é diferente de " + result3368 + " <refs.size()>")
chamada antiga: assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals(JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat), JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas " + result3369 + " <JSON.toJSONString(object, JSONWriter.Feature.PrettyFormat)> é diferente de " + result3370 + " <JSON.toJSONString(object1, JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, Today.class))
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> {
    try (JSONReader reader = JSONReader.of(date)) {
        reader.getContext().setLocale(Locale.CHINESE);
        reader.read(Today.class);
    }
})
chamada antiga: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
nova chamada: assertAll("Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", "Era esperado que todos os testes deste grupo passassem, mas pelo menos um falhou", () -> JSON.parseObject(date, TodayCN.class))
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[0])
nova chamada: assertEquals(101L, values[0], "Era esperado valores iguais, mas  101L é diferente de " + " values[0]")
chamada antiga: assertEquals("DataWorks", values[1])
nova chamada: assertEquals("DataWorks", values[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[1]")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[1])
nova chamada: assertEquals(101L, values[1], "Era esperado valores iguais, mas  101L é diferente de " + " values[1]")
chamada antiga: assertEquals("DataWorks", values[0])
nova chamada: assertEquals("DataWorks", values[0], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[0]")
chamada antiga: assertNull(jsonPath.extract("null"))
nova chamada: assertNull(jsonPath.extract("null"), "Era esperado nulo, mas " + result3371 + " <jsonPath.extract('null')> não é nulo")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[1])
nova chamada: assertEquals(101L, values[1], "Era esperado valores iguais, mas  101L é diferente de " + " values[1]")
chamada antiga: assertEquals("DataWorks", values[0])
nova chamada: assertEquals("DataWorks", values[0], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[0]")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[1])
nova chamada: assertEquals(101L, values[1], "Era esperado valores iguais, mas  101L é diferente de " + " values[1]")
chamada antiga: assertEquals("DataWorks", values[0])
nova chamada: assertEquals("DataWorks", values[0], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[0]")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[0])
nova chamada: assertEquals(101L, values[0], "Era esperado valores iguais, mas  101L é diferente de " + " values[0]")
chamada antiga: assertEquals("DataWorks", values[1])
nova chamada: assertEquals("DataWorks", values[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[1]")
chamada antiga: assertNull(jsonPath.extract("null"))
nova chamada: assertNull(jsonPath.extract("null"), "Era esperado nulo, mas " + result3372 + " <jsonPath.extract('null')> não é nulo")
chamada antiga: assertNull(jsonPath.extract("{\"values\":null}"))
nova chamada: assertNull(jsonPath.extract("{\"values\":null}"), "Era esperado nulo, mas " + result3373 + " <jsonPath.extract('{\'values\':null}')> não é nulo")
chamada antiga: assertNull(jsonPath.extract("{\"id\":123,\"values\":null}"))
nova chamada: assertNull(jsonPath.extract("{\"id\":123,\"values\":null}"), "Era esperado nulo, mas " + result3374 + " <jsonPath.extract('{\'id\':123,\'values\':null}')> não é nulo")
chamada antiga: assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONB.toBytes(null))))
nova chamada: assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONB.toBytes(null))), "Era esperado nulo, mas " + result3375 + " <jsonPath.extract(JSONReader.ofJSONB(JSONB.toBytes(null)))> não é nulo")
chamada antiga: assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONObject.of("values", null).toJSONBBytes(JSONWriter.Feature.WriteNulls))))
nova chamada: assertNull(jsonPath.extract(JSONReader.ofJSONB(JSONObject.of("values", null).toJSONBBytes(JSONWriter.Feature.WriteNulls))), "Era esperado nulo, mas " + result3376 + " <jsonPath.extract(JSONReader.ofJSONB(JSONObject.of('values', null).toJSONBBytes(JSONWriter.Feature.WriteNulls)))> não é nulo")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[0])
nova chamada: assertEquals(101L, values[0], "Era esperado valores iguais, mas  101L é diferente de " + " values[0]")
chamada antiga: assertEquals("DataWorks", values[1])
nova chamada: assertEquals("DataWorks", values[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[1]")
chamada antiga: assertNull(jsonPath.extract("[null]"))
nova chamada: assertNull(jsonPath.extract("[null]"), "Era esperado nulo, mas " + result3377 + " <jsonPath.extract('[null]')> não é nulo")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[0])
nova chamada: assertEquals(101L, values[0], "Era esperado valores iguais, mas  101L é diferente de " + " values[0]")
chamada antiga: assertEquals("DataWorks", values[1])
nova chamada: assertEquals("DataWorks", values[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[1]")
chamada antiga: assertNull(jsonPath.extract("[1,null]"))
nova chamada: assertNull(jsonPath.extract("[1,null]"), "Era esperado nulo, mas " + result3378 + " <jsonPath.extract('[1,null]')> não é nulo")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(101L, values[0])
nova chamada: assertEquals(101L, values[0], "Era esperado valores iguais, mas  101L é diferente de " + " values[0]")
chamada antiga: assertEquals("DataWorks", values[1])
nova chamada: assertEquals("DataWorks", values[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " values[1]")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("p2.x"))
nova chamada: assertTrue(error.getMessage().contains("p2.x"), "Era esperado verdadeiro, mas " + result3379 + " <error.getMessage().contains('p2.x')> é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("p2.x"))
nova chamada: assertTrue(error.getMessage().contains("p2.x"), "Era esperado verdadeiro, mas " + result3380 + " <error.getMessage().contains('p2.x')> é falso")
chamada antiga: assertArrayEquals(new Object[2], array)
nova chamada: assertArrayEquals(new Object[2], array, "Era esperado arrays iguais, mas  new Object[2] é diferente de " + " array")
chamada antiga: assertEquals("{\"ID\":123,\"NAME\":\"DataWorks\"}", str)
nova chamada: assertEquals("{\"ID\":123,\"NAME\":\"DataWorks\"}", str, "Era esperado valores iguais, mas  '{\'ID\':123,\'NAME\':\'DataWorks\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.id, vo1.id)
nova chamada: assertEquals(vo.id, vo1.id, "Era esperado valores iguais, mas  vo.id é diferente de " + " vo1.id")
chamada antiga: assertEquals(vo.name, vo1.name)
nova chamada: assertEquals(vo.name, vo1.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo1.name")
chamada antiga: assertTrue(jsonObject instanceof Map)
nova chamada: assertTrue(jsonObject instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Throwable.class, throwable.getClass())
nova chamada: assertEquals(Throwable.class, throwable.getClass(), "Era esperado valores iguais, mas  Throwable.class é diferente de " + result3381 + " <throwable.getClass()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error2)
nova chamada: assertNotNull(error2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Throwable.class, throwable2.getClass())
nova chamada: assertEquals(Throwable.class, throwable2.getClass(), "Era esperado valores iguais, mas  Throwable.class é diferente de " + result3382 + " <throwable2.getClass()>")
chamada antiga: assertTrue(jsonObject instanceof Map)
nova chamada: assertTrue(jsonObject instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(jsonObject instanceof Map)
nova chamada: assertTrue(jsonObject instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(jsonObject instanceof Map)
nova chamada: assertTrue(jsonObject instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, image.optimalHeight)
nova chamada: assertEquals(0, image.optimalHeight, "Era esperado valores iguais, mas  0 é diferente de " + " image.optimalHeight")
chamada antiga: assertEquals(400, image.optimalHeight)
nova chamada: assertEquals(400, image.optimalHeight, "Era esperado valores iguais, mas  400 é diferente de " + " image.optimalHeight")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("101", p31.value)
nova chamada: assertEquals("101", p31.value, "Era esperado valores iguais, mas  '101' é diferente de " + " p31.value")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3383 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3384 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3385 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3386 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3387 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3388 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3389 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3390 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3391 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3392 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3393 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3394 + " <map.size()>")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3395 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3396 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3397 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3398 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3399 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3400 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3401 + " <set.isEmpty()> é falso")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3402 + " <set.isEmpty()> é falso")
chamada antiga: assertSame(Collections.emptySet(), set)
nova chamada: assertSame(Collections.emptySet(), set, "Era esperado objetos iguais, mas " + result3403 + " <Collections.emptySet()> é diferente de " + " set")
chamada antiga: assertTrue(set.isEmpty())
nova chamada: assertTrue(set.isEmpty(), "Era esperado verdadeiro, mas " + result3404 + " <set.isEmpty()> é falso")
chamada antiga: assertSame(Collections.emptySet(), set)
nova chamada: assertSame(Collections.emptySet(), set, "Era esperado objetos iguais, mas " + result3405 + " <Collections.emptySet()> é diferente de " + " set")
chamada antiga: assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result3406 + " <list.isEmpty()> é falso")
chamada antiga: assertSame(Collections.emptyList(), list)
nova chamada: assertSame(Collections.emptyList(), list, "Era esperado objetos iguais, mas " + result3407 + " <Collections.emptyList()> é diferente de " + " list")
chamada antiga: assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result3408 + " <list.isEmpty()> é falso")
chamada antiga: assertSame(Collections.emptyList(), list)
nova chamada: assertSame(Collections.emptyList(), list, "Era esperado objetos iguais, mas " + result3409 + " <Collections.emptyList()> é diferente de " + " list")
chamada antiga: assertEquals(1, singleton.size())
nova chamada: assertEquals(1, singleton.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3410 + " <singleton.size()>")
chamada antiga: assertEquals(101, singleton.stream().findFirst().get())
nova chamada: assertEquals(101, singleton.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result3411 + " <singleton.stream().findFirst().get()>")
chamada antiga: assertEquals(1, singleton.size())
nova chamada: assertEquals(1, singleton.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3412 + " <singleton.size()>")
chamada antiga: assertEquals(101, singleton.stream().findFirst().get().intValue())
nova chamada: assertEquals(101, singleton.stream().findFirst().get().intValue(), "Era esperado valores iguais, mas  101 é diferente de " + result3413 + " <singleton.stream().findFirst().get().intValue()>")
chamada antiga: assertEquals(2, a1.data.size())
nova chamada: assertEquals(2, a1.data.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3414 + " <a1.data.size()>")
chamada antiga: assertEquals("1001", a1.data.get("id"))
nova chamada: assertEquals("1001", a1.data.get("id"), "Era esperado valores iguais, mas  '1001' é diferente de " + result3415 + " <a1.data.get('id')>")
chamada antiga: assertEquals("DataWorks", a1.data.get("name"))
nova chamada: assertEquals("DataWorks", a1.data.get("name"), "Era esperado valores iguais, mas  'DataWorks' é diferente de " + result3416 + " <a1.data.get('name')>")
chamada antiga: assertEquals(2, a1.data.size())
nova chamada: assertEquals(2, a1.data.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3417 + " <a1.data.size()>")
chamada antiga: assertEquals("1001", a1.data.get("id"))
nova chamada: assertEquals("1001", a1.data.get("id"), "Era esperado valores iguais, mas  '1001' é diferente de " + result3418 + " <a1.data.get('id')>")
chamada antiga: assertEquals("DataWorks", a1.data.get("name"))
nova chamada: assertEquals("DataWorks", a1.data.get("name"), "Era esperado valores iguais, mas  'DataWorks' é diferente de " + result3419 + " <a1.data.get('name')>")
chamada antiga: assertSame(b, b.values.get(0))
nova chamada: assertSame(b, b.values.get(0), "Era esperado objetos iguais, mas  b é diferente de " + result3420 + " <b.values.get(0)>")
chamada antiga: assertSame(a1, a1.values.get(0))
nova chamada: assertSame(a1, a1.values.get(0), "Era esperado objetos iguais, mas  a1 é diferente de " + result3421 + " <a1.values.get(0)>")
chamada antiga: assertSame(a2, a2.values.get(0))
nova chamada: assertSame(a2, a2.values.get(0), "Era esperado objetos iguais, mas  a2 é diferente de " + result3422 + " <a2.values.get(0)>")
chamada antiga: assertSame(a3, a3.values.get(0))
nova chamada: assertSame(a3, a3.values.get(0), "Era esperado objetos iguais, mas  a3 é diferente de " + result3423 + " <a3.values.get(0)>")
chamada antiga: assertSame(a4, a4.values.get(0))
nova chamada: assertSame(a4, a4.values.get(0), "Era esperado objetos iguais, mas  a4 é diferente de " + result3424 + " <a4.values.get(0)>")
chamada antiga: assertSame(a5, a5.values.get(0))
nova chamada: assertSame(a5, a5.values.get(0), "Era esperado objetos iguais, mas  a5 é diferente de " + result3425 + " <a5.values.get(0)>")
chamada antiga: assertSame(a6, a6.values.get(0))
nova chamada: assertSame(a6, a6.values.get(0), "Era esperado objetos iguais, mas  a6 é diferente de " + result3426 + " <a6.values.get(0)>")
chamada antiga: assertEquals("\"" + A.class.getName() + "\"", JSON.toJSONString(A.class))
nova chamada: assertEquals("\"" + A.class.getName() + "\"", JSON.toJSONString(A.class), "Era esperado valores iguais, mas  '\'' + A.class.getName() + '\'' é diferente de " + result3427 + " <JSON.toJSONString(A.class)>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(A.class, JSONB.parseObject(jsonbBytes, Class.class, JSONReader.Feature.SupportClassForName))
nova chamada: assertSame(A.class, JSONB.parseObject(jsonbBytes, Class.class, JSONReader.Feature.SupportClassForName), "Era esperado objetos iguais, mas  A.class é diferente de " + result3428 + " <JSONB.parseObject(jsonbBytes, Class.class, JSONReader.Feature.SupportClassForName)>")
chamada antiga: assertEquals(paramType, paramType1)
nova chamada: assertEquals(paramType, paramType1, "Era esperado valores iguais, mas  paramType é diferente de " + " paramType1")
chamada antiga: assertEquals(paramType, paramType1)
nova chamada: assertEquals(paramType, paramType1, "Era esperado valores iguais, mas  paramType é diferente de " + " paramType1")
chamada antiga: assertEquals("{\"名称\":\"盒马\"}", str)
nova chamada: assertEquals("{\"名称\":\"盒马\"}", str, "Era esperado valores iguais, mas  '{\'名称\':\'盒马\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.名称, vo1.名称)
nova chamada: assertEquals(vo.名称, vo1.名称, "Era esperado valores iguais, mas  vo.名称 é diferente de " + " vo1.名称")
chamada antiga: assertNotNull(object)
nova chamada: assertNotNull(object, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(list2.size(), list.size())
nova chamada: assertEquals(list2.size(), list.size(), "Era esperado valores iguais, mas " + result3429 + " <list2.size()> é diferente de " + result3430 + " <list.size()>")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3431 + " <JSON.toJSONString(a)> é diferente de " + result3432 + " <JSON.toJSONString(a1)>")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3433 + " <JSON.toJSONString(a)> é diferente de " + result3434 + " <JSON.toJSONString(a1)>")
chamada antiga: assertEquals(2, a1.items.size())
nova chamada: assertEquals(2, a1.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3435 + " <a1.items.size()>")
chamada antiga: assertEquals(2, a1.items.size())
nova chamada: assertEquals(2, a1.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3436 + " <a1.items.size()>")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3437 + " <JSON.toJSONString(a)> é diferente de " + result3438 + " <JSON.toJSONString(a1)>")
chamada antiga: assertTrue(a.items.get(0) instanceof Item10)
nova chamada: assertTrue(a.items.get(0) instanceof Item10, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3439 + " <JSON.toJSONString(a)> é diferente de " + result3440 + " <JSON.toJSONString(a1)>")
chamada antiga: assertSame(b, b.ref)
nova chamada: assertSame(b, b.ref, "Era esperado objetos iguais, mas  b é diferente de " + " b.ref")
chamada antiga: assertSame(a1, a1.ref)
nova chamada: assertSame(a1, a1.ref, "Era esperado objetos iguais, mas  a1 é diferente de " + " a1.ref")
chamada antiga: assertSame(b, b.values[0])
nova chamada: assertSame(b, b.values[0], "Era esperado objetos iguais, mas  b é diferente de " + " b.values[0]")
chamada antiga: assertSame(a1, a1.values[0])
nova chamada: assertSame(a1, a1.values[0], "Era esperado objetos iguais, mas  a1 é diferente de " + " a1.values[0]")
chamada antiga: assertSame(b.c1, b.c2)
nova chamada: assertSame(b.c1, b.c2, "Era esperado objetos iguais, mas  b.c1 é diferente de " + " b.c2")
chamada antiga: assertSame(a1.c1, a1.c2)
nova chamada: assertSame(a1.c1, a1.c2, "Era esperado objetos iguais, mas  a1.c1 é diferente de " + " a1.c2")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result3441 + " <bean.values.size()> é diferente de " + result3442 + " <bean2.values.size()>")
chamada antiga: assertNotNull(bean2.values.get(0).event)
nova chamada: assertNotNull(bean2.values.get(0).event, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values.get(1).event)
nova chamada: assertNotNull(bean2.values.get(1).event, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean2.values.get(0).event, bean2.values.get(1).event)
nova chamada: assertSame(bean2.values.get(0).event, bean2.values.get(1).event, "Era esperado objetos iguais, mas  bean2.values.get(0).event é diferente de " + " bean2.values.get(1).event")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result3443 + " <bean.values.getClass()> é diferente de " + result3444 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result3445 + " <bean.values.size()> é diferente de " + result3446 + " <bean2.values.size()>")
chamada antiga: assertNotNull(bean2.values.get(0).event)
nova chamada: assertNotNull(bean2.values.get(0).event, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values.get(1).event)
nova chamada: assertNotNull(bean2.values.get(1).event, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean2.values.get(0), bean2.values.get(1))
nova chamada: assertSame(bean2.values.get(0), bean2.values.get(1), "Era esperado objetos iguais, mas " + result3447 + " <bean2.values.get(0)> é diferente de " + result3448 + " <bean2.values.get(1)>")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3449 + " <JSON.toJSONString(a)> é diferente de " + result3450 + " <JSON.toJSONString(a1)>")
chamada antiga: assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1))
nova chamada: assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1), "Era esperado valores iguais, mas " + result3451 + " <JSON.toJSONString(c)> é diferente de " + result3452 + " <JSON.toJSONString(c1)>")
chamada antiga: assertTrue(c1.list1.get(0) instanceof Item)
nova chamada: assertTrue(c1.list1.get(0) instanceof Item, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1))
nova chamada: assertEquals(JSON.toJSONString(c), JSON.toJSONString(c1), "Era esperado valores iguais, mas " + result3453 + " <JSON.toJSONString(c)> é diferente de " + result3454 + " <JSON.toJSONString(c1)>")
chamada antiga: assertTrue(c1.list1.get(0) instanceof Item)
nova chamada: assertTrue(c1.list1.get(0) instanceof Item, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c1.list2.get(0) instanceof Item)
nova chamada: assertTrue(c1.list2.get(0) instanceof Item, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1))
nova chamada: assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1), "Era esperado valores iguais, mas " + result3455 + " <JSON.toJSONString(b)> é diferente de " + result3456 + " <JSON.toJSONString(b1)>")
chamada antiga: assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1))
nova chamada: assertEquals(JSON.toJSONString(b), JSON.toJSONString(b1), "Era esperado valores iguais, mas " + result3457 + " <JSON.toJSONString(b)> é diferente de " + result3458 + " <JSON.toJSONString(b1)>")
chamada antiga: assertTrue(b1.list2.get(0) instanceof Item)
nova chamada: assertTrue(b1.list2.get(0) instanceof Item, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSON.toJSONString(d), JSON.toJSONString(d1))
nova chamada: assertEquals(JSON.toJSONString(d), JSON.toJSONString(d1), "Era esperado valores iguais, mas " + result3459 + " <JSON.toJSONString(d)> é diferente de " + result3460 + " <JSON.toJSONString(d1)>")
chamada antiga: assertNotNull(a1)
nova chamada: assertNotNull(a1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(a1.a, a1.b)
nova chamada: assertSame(a1.a, a1.b, "Era esperado objetos iguais, mas  a1.a é diferente de " + " a1.b")
chamada antiga: assertNotNull(a1)
nova chamada: assertNotNull(a1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(a1.a, a1.b)
nova chamada: assertSame(a1.a, a1.b, "Era esperado objetos iguais, mas  a1.a é diferente de " + " a1.b")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3461 + " <JSON.toJSONString(a)> é diferente de " + result3462 + " <JSON.toJSONString(a1)>")
chamada antiga: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1))
nova chamada: assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1), "Era esperado valores iguais, mas " + result3463 + " <JSON.toJSONString(a)> é diferente de " + result3464 + " <JSON.toJSONString(a1)>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(b.get("values") != null)
nova chamada: assertTrue(b.get("values") != null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(123, tb.getAb())
nova chamada: assertEquals(123, tb.getAb(), "Era esperado valores iguais, mas  123 é diferente de " + result3465 + " <tb.getAb()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, a.unit)
nova chamada: assertEquals(3, a.unit, "Era esperado valores iguais, mas  3 é diferente de " + " a.unit")
chamada antiga: assertEquals(3, JSON.parseObject(str, B.class).id)
nova chamada: assertEquals(3, JSON.parseObject(str, B.class).id, "Era esperado valores iguais, mas  3 é diferente de " + " JSON.parseObject(str, B.class).id")
chamada antiga: assertEquals(3, JSONB.parseObject(bytes, B.class).id)
nova chamada: assertEquals(3, JSONB.parseObject(bytes, B.class).id, "Era esperado valores iguais, mas  3 é diferente de " + " JSONB.parseObject(bytes, B.class).id")
chamada antiga: assertEquals(3, a.id)
nova chamada: assertEquals(3, a.id, "Era esperado valores iguais, mas  3 é diferente de " + " a.id")
chamada antiga: assertEquals("{\"catId\":101}", str)
nova chamada: assertEquals("{\"catId\":101}", str, "Era esperado valores iguais, mas  '{\'catId\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2)
nova chamada: assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2, "Era esperado valores iguais, mas  '{\'type\':\'Cat\',\'catId\':101}' é diferente de " + " str2")
chamada antiga: Assertions.assertSame(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertSame(bean.values.getClass(), bean2.values.getClass(), "Era esperado objetos iguais, mas " + result3466 + " <bean.values.getClass()> é diferente de " + result3467 + " <bean2.values.getClass()>")
chamada antiga: Assertions.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue())
nova chamada: assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue(), "Era esperado objetos iguais, mas " + result3468 + " <bean2.values1.entrySet().iterator().next().getValue()> é diferente de " + result3469 + " <bean2.values.entrySet().iterator().next().getValue()>")
chamada antiga: assertSame(b, b.c1.root)
nova chamada: assertSame(b, b.c1.root, "Era esperado objetos iguais, mas  b é diferente de " + " b.c1.root")
chamada antiga: assertSame(a1, a1.c1.root)
nova chamada: assertSame(a1, a1.c1.root, "Era esperado objetos iguais, mas  a1 é diferente de " + " a1.c1.root")
chamada antiga: assertSame(b.c, b.values[0])
nova chamada: assertSame(b.c, b.values[0], "Era esperado objetos iguais, mas  b.c é diferente de " + " b.values[0]")
chamada antiga: assertSame(a1.c, a1.values[0])
nova chamada: assertSame(a1.c, a1.values[0], "Era esperado objetos iguais, mas  a1.c é diferente de " + " a1.values[0]")
chamada antiga: assertEquals(0, JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), A.class).id)
nova chamada: assertEquals(0, JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), A.class).id, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'value\':123}'.getBytes(StandardCharsets.UTF_8), A.class).id")
chamada antiga: assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A.class).id)
nova chamada: assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A.class).id, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'value\':123,\'name\':\'DataWorks\'}'.getBytes(StandardCharsets.UTF_8), A.class).id")
chamada antiga: assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A1.class).id)
nova chamada: assertEquals(0, JSON.parseObject("{\"value\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8), A1.class).id, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'value\':123,\'name\':\'DataWorks\'}'.getBytes(StandardCharsets.UTF_8), A1.class).id")
chamada antiga: assertEquals("DataWorks", JSONPath.of("$.name").extract(JSONReader.of("{\"id\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8))))
nova chamada: assertEquals("DataWorks", JSONPath.of("$.name").extract(JSONReader.of("{\"id\":123,\"name\":\"DataWorks\"}".getBytes(StandardCharsets.UTF_8))), "Era esperado valores iguais, mas  'DataWorks' é diferente de " + result3470 + " <JSONPath.of('$.name').extract(JSONReader.of('{\'id\':123,\'name\':\'DataWorks\'}'.getBytes(StandardCharsets.UTF_8)))>")
chamada antiga: assertEquals("DataWorks", JSONPath.of("$[1]").extract(JSONReader.of("[123,\"DataWorks\"]".getBytes(StandardCharsets.UTF_8))))
nova chamada: assertEquals("DataWorks", JSONPath.of("$[1]").extract(JSONReader.of("[123,\"DataWorks\"]".getBytes(StandardCharsets.UTF_8))), "Era esperado valores iguais, mas  'DataWorks' é diferente de " + result3471 + " <JSONPath.of('$[1]').extract(JSONReader.of('[123,\'DataWorks\']'.getBytes(StandardCharsets.UTF_8)))>")
chamada antiga: assertEquals("\"int\"", JSON.toJSONString(int.class))
nova chamada: assertEquals("\"int\"", JSON.toJSONString(int.class), "Era esperado valores iguais, mas  '\'int\'' é diferente de " + result3472 + " <JSON.toJSONString(int.class)>")
chamada antiga: assertEquals("\"java.lang.Integer\"", JSON.toJSONString(Integer.class))
nova chamada: assertEquals("\"java.lang.Integer\"", JSON.toJSONString(Integer.class), "Era esperado valores iguais, mas  '\'java.lang.Integer\'' é diferente de " + result3473 + " <JSON.toJSONString(Integer.class)>")
chamada antiga: assertEquals(3, list2.size())
nova chamada: assertEquals(3, list2.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3474 + " <list2.size()>")
chamada antiga: assertEquals(list, list2)
nova chamada: assertEquals(list, list2, "Era esperado valores iguais, mas  list é diferente de " + " list2")
chamada antiga: assertEquals(orgs.size(), list2.size())
nova chamada: assertEquals(orgs.size(), list2.size(), "Era esperado valores iguais, mas " + result3475 + " <orgs.size()> é diferente de " + result3476 + " <list2.size()>")
chamada antiga: assertEquals(org, list2.get(0))
nova chamada: assertEquals(org, list2.get(0), "Era esperado valores iguais, mas  org é diferente de " + result3477 + " <list2.get(0)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(a))
nova chamada: assertEquals("{}", JSON.toJSONString(a), "Era esperado valores iguais, mas  '{}' é diferente de " + result3478 + " <JSON.toJSONString(a)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(b))
nova chamada: assertEquals("{}", JSON.toJSONString(b), "Era esperado valores iguais, mas  '{}' é diferente de " + result3479 + " <JSON.toJSONString(b)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(c))
nova chamada: assertEquals("{}", JSON.toJSONString(c), "Era esperado valores iguais, mas  '{}' é diferente de " + result3480 + " <JSON.toJSONString(c)>")
chamada antiga: assertEquals(0, cat.id)
nova chamada: assertEquals(0, cat.id, "Era esperado valores iguais, mas  0 é diferente de " + " cat.id")
chamada antiga: assertEquals(1001, cat.catId)
nova chamada: assertEquals(1001, cat.catId, "Era esperado valores iguais, mas  1001 é diferente de " + " cat.catId")
chamada antiga: assertEquals("{\"id\":1001}", str)
nova chamada: assertEquals("{\"id\":1001}", str, "Era esperado valores iguais, mas  '{\'id\':1001}' é diferente de " + " str")
chamada antiga: assertSame(obj, obj.get("ref"))
nova chamada: assertSame(obj, obj.get("ref"), "Era esperado objetos iguais, mas  obj é diferente de " + result3481 + " <obj.get('ref')>")
chamada antiga: assertSame(b, b.ref)
nova chamada: assertSame(b, b.ref, "Era esperado objetos iguais, mas  b é diferente de " + " b.ref")
chamada antiga: assertSame(a1, a1.ref)
nova chamada: assertSame(a1, a1.ref, "Era esperado objetos iguais, mas  a1 é diferente de " + " a1.ref")
chamada antiga: assertSame(obj, obj.getJSONArray("b").get(0))
nova chamada: assertSame(obj, obj.getJSONArray("b").get(0), "Era esperado objetos iguais, mas  obj é diferente de " + result3482 + " <obj.getJSONArray('b').get(0)>")
chamada antiga: assertSame(array, array.getJSONArray(0).getJSONArray(0))
nova chamada: assertSame(array, array.getJSONArray(0).getJSONArray(0), "Era esperado objetos iguais, mas  array é diferente de " + result3483 + " <array.getJSONArray(0).getJSONArray(0)>")
chamada antiga: assertSame(b.c, b.values.get(0))
nova chamada: assertSame(b.c, b.values.get(0), "Era esperado objetos iguais, mas  b.c é diferente de " + result3484 + " <b.values.get(0)>")
chamada antiga: assertSame(a1.c, a1.values.get(0))
nova chamada: assertSame(a1.c, a1.values.get(0), "Era esperado objetos iguais, mas  a1.c é diferente de " + result3485 + " <a1.values.get(0)>")
chamada antiga: assertSame(b.c, b.values.get(0))
nova chamada: assertSame(b.c, b.values.get(0), "Era esperado objetos iguais, mas  b.c é diferente de " + result3486 + " <b.values.get(0)>")
chamada antiga: assertSame(a1.c, a1.values.get(0))
nova chamada: assertSame(a1.c, a1.values.get(0), "Era esperado objetos iguais, mas  a1.c é diferente de " + result3487 + " <a1.values.get(0)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new HashMap<>()))
nova chamada: assertEquals("{}", JSON.toJSONString(new HashMap<>()), "Era esperado valores iguais, mas  '{}' é diferente de " + result3488 + " <JSON.toJSONString(new HashMap<>())>")
chamada antiga: assertEquals("{}", JSON.toJSONString(Collections.emptyMap()))
nova chamada: assertEquals("{}", JSON.toJSONString(Collections.emptyMap()), "Era esperado valores iguais, mas  '{}' é diferente de " + result3489 + " <JSON.toJSONString(Collections.emptyMap())>")
chamada antiga: assertEquals("{\"id\":101}", JSON.toJSONString(Collections.singletonMap("id", 101)))
nova chamada: assertEquals("{\"id\":101}", JSON.toJSONString(Collections.singletonMap("id", 101)), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result3490 + " <JSON.toJSONString(Collections.singletonMap('id', 101))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(Collections.unmodifiableMap(new HashMap<>())))
nova chamada: assertEquals("{}", JSON.toJSONString(Collections.unmodifiableMap(new HashMap<>())), "Era esperado valores iguais, mas  '{}' é diferente de " + result3491 + " <JSON.toJSONString(Collections.unmodifiableMap(new HashMap<>()))>")
chamada antiga: assertEquals("{\"catId\":101}", str)
nova chamada: assertEquals("{\"catId\":101}", str, "Era esperado valores iguais, mas  '{\'catId\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2)
nova chamada: assertEquals("{\"type\":\"Cat\",\"catId\":101}", str2, "Era esperado valores iguais, mas  '{\'type\':\'Cat\',\'catId\':101}' é diferente de " + " str2")
chamada antiga: assertEquals("[1001,\"name\"]", array.toString())
nova chamada: assertEquals("[1001,\"name\"]", array.toString(), "Era esperado valores iguais, mas  '[1001,\'name\']' é diferente de " + result3492 + " <array.toString()>")
chamada antiga: assertNotNull(array.getJSONArray(0))
nova chamada: assertNotNull(array.getJSONArray(0), "Era esperado não nulo, mas " + result3493 + " <array.getJSONArray(0)> é nulo")
chamada antiga: assertEquals("[]", array.getJSONArray(0).toString())
nova chamada: assertEquals("[]", array.getJSONArray(0).toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result3494 + " <array.getJSONArray(0).toString()>")
chamada antiga: assertNotNull(array.getJSONObject(0))
nova chamada: assertNotNull(array.getJSONObject(0), "Era esperado não nulo, mas " + result3495 + " <array.getJSONObject(0)> é nulo")
chamada antiga: assertEquals("{}", array.get(0).toString())
nova chamada: assertEquals("{}", array.get(0).toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result3496 + " <array.get(0).toString()>")
chamada antiga: assertNotNull(obj)
nova chamada: assertNotNull(obj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"v0000\":101}", JSON.toJSONString(obj))
nova chamada: assertEquals("{\"v0000\":101}", JSON.toJSONString(obj), "Era esperado valores iguais, mas  '{\'v0000\':101}' é diferente de " + result3497 + " <JSON.toJSONString(obj)>")
chamada antiga: assertEquals(Long.valueOf(101), long1.getV0000())
nova chamada: assertEquals(Long.valueOf(101), long1.getV0000(), "Era esperado valores iguais, mas " + result3498 + " <Long.valueOf(101)> é diferente de " + result3499 + " <long1.getV0000()>")
chamada antiga: assertNotNull(list)
nova chamada: assertNotNull(list, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Integer1.class, list.get(0).getClass())
nova chamada: assertEquals(Integer1.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Integer1.class é diferente de " + result3500 + " <list.get(0).getClass()>")
chamada antiga: assertEquals("[{}]", JSON.toJSONString(list))
nova chamada: assertEquals("[{}]", JSON.toJSONString(list), "Era esperado valores iguais, mas  '[{}]' é diferente de " + result3501 + " <JSON.toJSONString(list)>")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Integer1.class, map.get("val").getClass())
nova chamada: assertEquals(Integer1.class, map.get("val").getClass(), "Era esperado valores iguais, mas  Integer1.class é diferente de " + result3502 + " <map.get('val').getClass()>")
chamada antiga: assertEquals("{\"val\":{}}", JSON.toJSONString(map))
nova chamada: assertEquals("{\"val\":{}}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{\'val\':{}}' é diferente de " + result3503 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals(123L, array.getLongValue(0))
nova chamada: assertEquals(123L, array.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3504 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(123L, array.getLong(0).longValue())
nova chamada: assertEquals(123L, array.getLong(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3505 + " <array.getLong(0).longValue()>")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3506 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getInteger(0).intValue())
nova chamada: assertEquals(123, array.getInteger(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result3507 + " <array.getInteger(0).intValue()>")
chamada antiga: assertEquals("123", array.getString(0))
nova chamada: assertEquals("123", array.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3508 + " <array.getString(0)>")
chamada antiga: assertEquals(123L, array.getLongValue(0))
nova chamada: assertEquals(123L, array.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3509 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(123L, array.getLong(0).longValue())
nova chamada: assertEquals(123L, array.getLong(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3510 + " <array.getLong(0).longValue()>")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3511 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getInteger(0).intValue())
nova chamada: assertEquals(123, array.getInteger(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result3512 + " <array.getInteger(0).intValue()>")
chamada antiga: assertEquals("123", array.getString(0))
nova chamada: assertEquals("123", array.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3513 + " <array.getString(0)>")
chamada antiga: assertEquals(123L, array.getLongValue(0))
nova chamada: assertEquals(123L, array.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3514 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(123L, array.getLong(0).longValue())
nova chamada: assertEquals(123L, array.getLong(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3515 + " <array.getLong(0).longValue()>")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3516 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getInteger(0).intValue())
nova chamada: assertEquals(123, array.getInteger(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result3517 + " <array.getInteger(0).intValue()>")
chamada antiga: assertEquals("123", array.getString(0))
nova chamada: assertEquals("123", array.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3518 + " <array.getString(0)>")
chamada antiga: assertEquals(123L, array.getLongValue(0))
nova chamada: assertEquals(123L, array.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3519 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(123L, array.getLong(0).longValue())
nova chamada: assertEquals(123L, array.getLong(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3520 + " <array.getLong(0).longValue()>")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3521 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getInteger(0).intValue())
nova chamada: assertEquals(123, array.getInteger(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result3522 + " <array.getInteger(0).intValue()>")
chamada antiga: assertEquals("123", array.getString(0))
nova chamada: assertEquals("123", array.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3523 + " <array.getString(0)>")
chamada antiga: assertEquals(123L, array.getLongValue(0))
nova chamada: assertEquals(123L, array.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3524 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(123L, array.getLong(0).longValue())
nova chamada: assertEquals(123L, array.getLong(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3525 + " <array.getLong(0).longValue()>")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3526 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getInteger(0).intValue())
nova chamada: assertEquals(123, array.getInteger(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result3527 + " <array.getInteger(0).intValue()>")
chamada antiga: assertEquals("123", array.getString(0))
nova chamada: assertEquals("123", array.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3528 + " <array.getString(0)>")
chamada antiga: assertEquals(0L, array.getLongValue(0))
nova chamada: assertEquals(0L, array.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result3529 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(null, array.getLong(0))
nova chamada: assertEquals(null, array.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result3530 + " <array.getLong(0)>")
chamada antiga: assertEquals(0, array.getIntValue(0))
nova chamada: assertEquals(0, array.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3531 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(null, array.getInteger(0))
nova chamada: assertEquals(null, array.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3532 + " <array.getInteger(0)>")
chamada antiga: assertEquals(null, array.getString(0))
nova chamada: assertEquals(null, array.getString(0), "Era esperado valores iguais, mas  null é diferente de " + result3533 + " <array.getString(0)>")
chamada antiga: assertEquals(null, array.getJSONArray(0))
nova chamada: assertEquals(null, array.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result3534 + " <array.getJSONArray(0)>")
chamada antiga: assertEquals(null, array.getJSONObject(0))
nova chamada: assertEquals(null, array.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result3535 + " <array.getJSONObject(0)>")
chamada antiga: assertEquals(123, jsonArray.getIntValue(0))
nova chamada: assertEquals(123, jsonArray.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result3536 + " <jsonArray.getIntValue(0)>")
chamada antiga: assertEquals(123L, jsonArray.getLongValue(0))
nova chamada: assertEquals(123L, jsonArray.getLongValue(0), "Era esperado valores iguais, mas  123L é diferente de " + result3537 + " <jsonArray.getLongValue(0)>")
chamada antiga: assertEquals("123", jsonArray.getString(0))
nova chamada: assertEquals("123", jsonArray.getString(0), "Era esperado valores iguais, mas  '123' é diferente de " + result3538 + " <jsonArray.getString(0)>")
chamada antiga: assertEquals(Integer.valueOf(123), jsonArray.getInteger(0))
nova chamada: assertEquals(Integer.valueOf(123), jsonArray.getInteger(0), "Era esperado valores iguais, mas " + result3539 + " <Integer.valueOf(123)> é diferente de " + result3540 + " <jsonArray.getInteger(0)>")
chamada antiga: assertEquals(Long.valueOf(123), jsonArray.getLong(0))
nova chamada: assertEquals(Long.valueOf(123), jsonArray.getLong(0), "Era esperado valores iguais, mas " + result3541 + " <Long.valueOf(123)> é diferente de " + result3542 + " <jsonArray.getLong(0)>")
chamada antiga: assertEquals(0L, array.getLongValue(0))
nova chamada: assertEquals(0L, array.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result3543 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(null, array.getLong(0))
nova chamada: assertEquals(null, array.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result3544 + " <array.getLong(0)>")
chamada antiga: assertEquals(0, array.getIntValue(0))
nova chamada: assertEquals(0, array.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3545 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(null, array.getInteger(0))
nova chamada: assertEquals(null, array.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3546 + " <array.getInteger(0)>")
chamada antiga: assertEquals(null, array.getString(0))
nova chamada: assertEquals(null, array.getString(0), "Era esperado valores iguais, mas  null é diferente de " + result3547 + " <array.getString(0)>")
chamada antiga: assertEquals(null, array.getJSONArray(0))
nova chamada: assertEquals(null, array.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result3548 + " <array.getJSONArray(0)>")
chamada antiga: assertEquals(null, array.getJSONObject(0))
nova chamada: assertEquals(null, array.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result3549 + " <array.getJSONObject(0)>")
chamada antiga: assertEquals(null, array.getBigInteger(0))
nova chamada: assertEquals(null, array.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3550 + " <array.getBigInteger(0)>")
chamada antiga: assertEquals(null, array.getBigDecimal(0))
nova chamada: assertEquals(null, array.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result3551 + " <array.getBigDecimal(0)>")
chamada antiga: assertEquals(null, array.getDouble(0))
nova chamada: assertEquals(null, array.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result3552 + " <array.getDouble(0)>")
chamada antiga: assertEquals(0D, array.getDoubleValue(0))
nova chamada: assertEquals(0D, array.getDoubleValue(0), "Era esperado valores iguais, mas  0D é diferente de " + result3553 + " <array.getDoubleValue(0)>")
chamada antiga: assertEquals(null, array.getFloat(0))
nova chamada: assertEquals(null, array.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result3554 + " <array.getFloat(0)>")
chamada antiga: assertEquals(0F, array.getFloatValue(0))
nova chamada: assertEquals(0F, array.getFloatValue(0), "Era esperado valores iguais, mas  0F é diferente de " + result3555 + " <array.getFloatValue(0)>")
chamada antiga: assertEquals(false, array.getBooleanValue(0))
nova chamada: assertEquals(false, array.getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result3556 + " <array.getBooleanValue(0)>")
chamada antiga: assertEquals(null, array.getBoolean(0))
nova chamada: assertEquals(null, array.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result3557 + " <array.getBoolean(0)>")
chamada antiga: assertEquals((short) 0, array.getShortValue(0))
nova chamada: assertEquals((short) 0, array.getShortValue(0), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result3558 + " <array.getShortValue(0)>")
chamada antiga: assertEquals(null, array.getShort(0))
nova chamada: assertEquals(null, array.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result3559 + " <array.getShort(0)>")
chamada antiga: assertEquals((byte) 0, array.getByteValue(0))
nova chamada: assertEquals((byte) 0, array.getByteValue(0), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result3560 + " <array.getByteValue(0)>")
chamada antiga: assertEquals(null, array.getByte(0))
nova chamada: assertEquals(null, array.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result3561 + " <array.getByte(0)>")
chamada antiga: assertEquals(0L, object.getLongValue(0))
nova chamada: assertEquals(0L, object.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result3562 + " <object.getLongValue(0)>")
chamada antiga: assertEquals(null, object.getLong(0))
nova chamada: assertEquals(null, object.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result3563 + " <object.getLong(0)>")
chamada antiga: assertEquals(0, object.getIntValue(0))
nova chamada: assertEquals(0, object.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3564 + " <object.getIntValue(0)>")
chamada antiga: assertEquals(null, object.getInteger(0))
nova chamada: assertEquals(null, object.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3565 + " <object.getInteger(0)>")
chamada antiga: assertEquals(null, object.getJSONArray(0))
nova chamada: assertEquals(null, object.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result3566 + " <object.getJSONArray(0)>")
chamada antiga: assertEquals(null, object.getJSONObject(0))
nova chamada: assertEquals(null, object.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result3567 + " <object.getJSONObject(0)>")
chamada antiga: assertEquals(null, object.getBigInteger(0))
nova chamada: assertEquals(null, object.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3568 + " <object.getBigInteger(0)>")
chamada antiga: assertEquals(null, object.getBigDecimal(0))
nova chamada: assertEquals(null, object.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result3569 + " <object.getBigDecimal(0)>")
chamada antiga: assertEquals(null, object.getFloat(0))
nova chamada: assertEquals(null, object.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result3570 + " <object.getFloat(0)>")
chamada antiga: assertEquals(null, object.getDouble(0))
nova chamada: assertEquals(null, object.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result3571 + " <object.getDouble(0)>")
chamada antiga: assertEquals(null, object.getBoolean(0))
nova chamada: assertEquals(null, object.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result3572 + " <object.getBoolean(0)>")
chamada antiga: assertEquals(null, object.getByte(0))
nova chamada: assertEquals(null, object.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result3573 + " <object.getByte(0)>")
chamada antiga: assertEquals(null, object.getShort(0))
nova chamada: assertEquals(null, object.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result3574 + " <object.getShort(0)>")
chamada antiga: assertEquals(0, object.getByteValue(0))
nova chamada: assertEquals(0, object.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3575 + " <object.getByteValue(0)>")
chamada antiga: assertEquals(0, object.getShortValue(0))
nova chamada: assertEquals(0, object.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3576 + " <object.getShortValue(0)>")
chamada antiga: assertEquals(0L, object.getLongValue(0))
nova chamada: assertEquals(0L, object.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result3577 + " <object.getLongValue(0)>")
chamada antiga: assertEquals(null, object.getLong(0))
nova chamada: assertEquals(null, object.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result3578 + " <object.getLong(0)>")
chamada antiga: assertEquals(0, object.getIntValue(0))
nova chamada: assertEquals(0, object.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3579 + " <object.getIntValue(0)>")
chamada antiga: assertEquals(null, object.getInteger(0))
nova chamada: assertEquals(null, object.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3580 + " <object.getInteger(0)>")
chamada antiga: assertEquals(null, object.getJSONArray(0))
nova chamada: assertEquals(null, object.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result3581 + " <object.getJSONArray(0)>")
chamada antiga: assertEquals(null, object.getJSONObject(0))
nova chamada: assertEquals(null, object.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result3582 + " <object.getJSONObject(0)>")
chamada antiga: assertEquals(null, object.getBigInteger(0))
nova chamada: assertEquals(null, object.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result3583 + " <object.getBigInteger(0)>")
chamada antiga: assertEquals(null, object.getBigDecimal(0))
nova chamada: assertEquals(null, object.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result3584 + " <object.getBigDecimal(0)>")
chamada antiga: assertEquals(null, object.getBoolean(0))
nova chamada: assertEquals(null, object.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result3585 + " <object.getBoolean(0)>")
chamada antiga: assertEquals(null, object.getFloat(0))
nova chamada: assertEquals(null, object.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result3586 + " <object.getFloat(0)>")
chamada antiga: assertEquals(null, object.getDouble(0))
nova chamada: assertEquals(null, object.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result3587 + " <object.getDouble(0)>")
chamada antiga: assertEquals(null, object.getByte(0))
nova chamada: assertEquals(null, object.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result3588 + " <object.getByte(0)>")
chamada antiga: assertEquals(null, object.getShort(0))
nova chamada: assertEquals(null, object.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result3589 + " <object.getShort(0)>")
chamada antiga: assertEquals(0, object.getByteValue(0))
nova chamada: assertEquals(0, object.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3590 + " <object.getByteValue(0)>")
chamada antiga: assertEquals(0, object.getShortValue(0))
nova chamada: assertEquals(0, object.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result3591 + " <object.getShortValue(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0), "Era esperado valores iguais, mas " + result3592 + " <BigInteger.valueOf(12)> é diferente de " + result3593 + " <new JSONArray().fluentAdd(12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0), "Era esperado valores iguais, mas " + result3594 + " <BigInteger.valueOf(12)> é diferente de " + result3595 + " <new JSONArray().fluentAdd((byte) 12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0), "Era esperado valores iguais, mas " + result3596 + " <BigInteger.valueOf(12)> é diferente de " + result3597 + " <new JSONArray().fluentAdd((short) 12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0), "Era esperado valores iguais, mas " + result3598 + " <BigInteger.valueOf(12)> é diferente de " + result3599 + " <new JSONArray().fluentAdd(12L).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0), "Era esperado valores iguais, mas " + result3600 + " <BigInteger.valueOf(12)> é diferente de " + result3601 + " <new JSONArray().fluentAdd(12F).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0), "Era esperado valores iguais, mas " + result3602 + " <BigInteger.valueOf(12)> é diferente de " + result3603 + " <new JSONArray().fluentAdd(12D).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0), "Era esperado valores iguais, mas " + result3604 + " <BigInteger.valueOf(12)> é diferente de " + result3605 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0), "Era esperado valores iguais, mas " + result3606 + " <BigInteger.valueOf(12)> é diferente de " + result3607 + " <new JSONArray().fluentAdd(new BigInteger('12')).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0), "Era esperado valores iguais, mas " + result3608 + " <BigInteger.valueOf(12)> é diferente de " + result3609 + " <new JSONArray().fluentAdd('12').getBigInteger(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0), "Era esperado valores iguais, mas " + result3610 + " <BigDecimal.valueOf(12)> é diferente de " + result3611 + " <new JSONArray().fluentAdd(12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0), "Era esperado valores iguais, mas " + result3612 + " <BigDecimal.valueOf(12)> é diferente de " + result3613 + " <new JSONArray().fluentAdd((byte) 12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0), "Era esperado valores iguais, mas " + result3614 + " <BigDecimal.valueOf(12)> é diferente de " + result3615 + " <new JSONArray().fluentAdd((short) 12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0), "Era esperado valores iguais, mas " + result3616 + " <BigDecimal.valueOf(12)> é diferente de " + result3617 + " <new JSONArray().fluentAdd(12L).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0), "Era esperado valores iguais, mas " + result3618 + " <BigDecimal.valueOf(12F)> é diferente de " + result3619 + " <new JSONArray().fluentAdd(12F).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0), "Era esperado valores iguais, mas " + result3620 + " <BigDecimal.valueOf(12D)> é diferente de " + result3621 + " <new JSONArray().fluentAdd(12D).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0), "Era esperado valores iguais, mas " + result3622 + " <BigDecimal.valueOf(12)> é diferente de " + result3623 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0), "Era esperado valores iguais, mas " + result3624 + " <BigDecimal.valueOf(12)> é diferente de " + result3625 + " <new JSONArray().fluentAdd(new BigInteger('12')).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0), "Era esperado valores iguais, mas " + result3626 + " <BigDecimal.valueOf(12)> é diferente de " + result3627 + " <new JSONArray().fluentAdd('12').getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.ONE, JSONArray.of(true).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.ONE, JSONArray.of(true).getBigDecimal(0), "Era esperado valores iguais, mas  BigDecimal.ONE é diferente de " + result3628 + " <JSONArray.of(true).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.ZERO, JSONArray.of(false).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.ZERO, JSONArray.of(false).getBigDecimal(0), "Era esperado valores iguais, mas  BigDecimal.ZERO é diferente de " + result3629 + " <JSONArray.of(false).getBigDecimal(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0), "Era esperado valores iguais, mas " + result3630 + " <Float.valueOf(12)> é diferente de " + result3631 + " <new JSONArray().fluentAdd(12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0), "Era esperado valores iguais, mas " + result3632 + " <Float.valueOf(12)> é diferente de " + result3633 + " <new JSONArray().fluentAdd((byte) 12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0), "Era esperado valores iguais, mas " + result3634 + " <Float.valueOf(12)> é diferente de " + result3635 + " <new JSONArray().fluentAdd((short) 12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0), "Era esperado valores iguais, mas " + result3636 + " <Float.valueOf(12)> é diferente de " + result3637 + " <new JSONArray().fluentAdd(12L).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0), "Era esperado valores iguais, mas " + result3638 + " <Float.valueOf(12F)> é diferente de " + result3639 + " <new JSONArray().fluentAdd(12F).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0), "Era esperado valores iguais, mas " + result3640 + " <Float.valueOf(12)> é diferente de " + result3641 + " <new JSONArray().fluentAdd(12D).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0), "Era esperado valores iguais, mas " + result3642 + " <Float.valueOf(12)> é diferente de " + result3643 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0), "Era esperado valores iguais, mas " + result3644 + " <Float.valueOf(12)> é diferente de " + result3645 + " <new JSONArray().fluentAdd(new BigInteger('12')).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0), "Era esperado valores iguais, mas " + result3646 + " <Float.valueOf(12)> é diferente de " + result3647 + " <new JSONArray().fluentAdd('12').getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0), "Era esperado valores iguais, mas " + result3648 + " <Float.valueOf(12)> é diferente de " + result3649 + " <new JSONArray().fluentAdd(12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0), "Era esperado valores iguais, mas " + result3650 + " <Float.valueOf(12)> é diferente de " + result3651 + " <new JSONArray().fluentAdd((byte) 12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0), "Era esperado valores iguais, mas " + result3652 + " <Float.valueOf(12)> é diferente de " + result3653 + " <new JSONArray().fluentAdd((short) 12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0), "Era esperado valores iguais, mas " + result3654 + " <Float.valueOf(12)> é diferente de " + result3655 + " <new JSONArray().fluentAdd(12L).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0), "Era esperado valores iguais, mas " + result3656 + " <Float.valueOf(12F)> é diferente de " + result3657 + " <new JSONArray().fluentAdd(12F).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0), "Era esperado valores iguais, mas " + result3658 + " <Float.valueOf(12)> é diferente de " + result3659 + " <new JSONArray().fluentAdd(12D).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0), "Era esperado valores iguais, mas " + result3660 + " <Float.valueOf(12)> é diferente de " + result3661 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0), "Era esperado valores iguais, mas " + result3662 + " <Float.valueOf(12)> é diferente de " + result3663 + " <new JSONArray().fluentAdd(new BigInteger('12')).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0), "Era esperado valores iguais, mas " + result3664 + " <Float.valueOf(12)> é diferente de " + result3665 + " <new JSONArray().fluentAdd('12').getFloat(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0), "Era esperado valores iguais, mas " + result3666 + " <Double.valueOf(12)> é diferente de " + result3667 + " <new JSONArray().fluentAdd(12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0), "Era esperado valores iguais, mas " + result3668 + " <Double.valueOf(12)> é diferente de " + result3669 + " <new JSONArray().fluentAdd((byte) 12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0), "Era esperado valores iguais, mas " + result3670 + " <Double.valueOf(12)> é diferente de " + result3671 + " <new JSONArray().fluentAdd((short) 12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0), "Era esperado valores iguais, mas " + result3672 + " <Double.valueOf(12)> é diferente de " + result3673 + " <new JSONArray().fluentAdd(12L).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0), "Era esperado valores iguais, mas " + result3674 + " <Double.valueOf(12F)> é diferente de " + result3675 + " <new JSONArray().fluentAdd(12F).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0), "Era esperado valores iguais, mas " + result3676 + " <Double.valueOf(12)> é diferente de " + result3677 + " <new JSONArray().fluentAdd(12D).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0), "Era esperado valores iguais, mas " + result3678 + " <Double.valueOf(12)> é diferente de " + result3679 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0), "Era esperado valores iguais, mas " + result3680 + " <Double.valueOf(12)> é diferente de " + result3681 + " <new JSONArray().fluentAdd(new BigInteger('12')).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0), "Era esperado valores iguais, mas " + result3682 + " <Double.valueOf(12)> é diferente de " + result3683 + " <new JSONArray().fluentAdd('12').getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0), "Era esperado valores iguais, mas " + result3684 + " <Double.valueOf(12)> é diferente de " + result3685 + " <new JSONArray().fluentAdd(12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0), "Era esperado valores iguais, mas " + result3686 + " <Double.valueOf(12)> é diferente de " + result3687 + " <new JSONArray().fluentAdd((byte) 12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0), "Era esperado valores iguais, mas " + result3688 + " <Double.valueOf(12)> é diferente de " + result3689 + " <new JSONArray().fluentAdd((short) 12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0), "Era esperado valores iguais, mas " + result3690 + " <Double.valueOf(12)> é diferente de " + result3691 + " <new JSONArray().fluentAdd(12L).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0), "Era esperado valores iguais, mas " + result3692 + " <Double.valueOf(12F)> é diferente de " + result3693 + " <new JSONArray().fluentAdd(12F).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0), "Era esperado valores iguais, mas " + result3694 + " <Double.valueOf(12)> é diferente de " + result3695 + " <new JSONArray().fluentAdd(12D).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0), "Era esperado valores iguais, mas " + result3696 + " <Double.valueOf(12)> é diferente de " + result3697 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0), "Era esperado valores iguais, mas " + result3698 + " <Double.valueOf(12)> é diferente de " + result3699 + " <new JSONArray().fluentAdd(new BigInteger('12')).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0), "Era esperado valores iguais, mas " + result3700 + " <Double.valueOf(12)> é diferente de " + result3701 + " <new JSONArray().fluentAdd('12').getDouble(0)>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0))
nova chamada: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result3702 + " <new JSONArray().fluentAdd(1).getBoolean(0)>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0))
nova chamada: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result3703 + " <new JSONArray().fluentAdd('true').getBoolean(0)>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0))
nova chamada: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result3704 + " <new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0)>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0))
nova chamada: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result3705 + " <new JSONArray().fluentAdd('FALSE').getBoolean(0)>")
chamada antiga: assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0))
nova chamada: assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0), "Era esperado valores iguais, mas  true é diferente de " + result3706 + " <new JSONArray().fluentAdd(1).getBooleanValue(0)>")
chamada antiga: assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0))
nova chamada: assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0), "Era esperado valores iguais, mas  true é diferente de " + result3707 + " <new JSONArray().fluentAdd('true').getBooleanValue(0)>")
chamada antiga: assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0))
nova chamada: assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result3708 + " <new JSONArray().fluentAdd('FALSE').getBooleanValue(0)>")
chamada antiga: assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0))
nova chamada: assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result3709 + " <new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3710 + " <new JSONArray().fluentAdd(12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3711 + " <new JSONArray().fluentAdd((byte) 12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3712 + " <new JSONArray().fluentAdd((short) 12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3713 + " <new JSONArray().fluentAdd(12L).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3714 + " <new JSONArray().fluentAdd(12F).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3715 + " <new JSONArray().fluentAdd(12D).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3716 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3717 + " <new JSONArray().fluentAdd(new BigInteger('12')).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result3718 + " <new JSONArray().fluentAdd('12').getShortValue(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0), "Era esperado valores iguais, mas " + result3719 + " <Short.valueOf((short) 12)> é diferente de " + result3720 + " <new JSONArray().fluentAdd(12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0), "Era esperado valores iguais, mas " + result3721 + " <Short.valueOf((short) 12)> é diferente de " + result3722 + " <new JSONArray().fluentAdd((byte) 12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0), "Era esperado valores iguais, mas " + result3723 + " <Short.valueOf((short) 12)> é diferente de " + result3724 + " <new JSONArray().fluentAdd((short) 12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0), "Era esperado valores iguais, mas " + result3725 + " <Short.valueOf((short) 12)> é diferente de " + result3726 + " <new JSONArray().fluentAdd(12L).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0), "Era esperado valores iguais, mas " + result3727 + " <Short.valueOf((short) 12)> é diferente de " + result3728 + " <new JSONArray().fluentAdd(12F).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0), "Era esperado valores iguais, mas " + result3729 + " <Short.valueOf((short) 12)> é diferente de " + result3730 + " <new JSONArray().fluentAdd(12D).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0), "Era esperado valores iguais, mas " + result3731 + " <Short.valueOf((short) 12)> é diferente de " + result3732 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0), "Era esperado valores iguais, mas " + result3733 + " <Short.valueOf((short) 12)> é diferente de " + result3734 + " <new JSONArray().fluentAdd(new BigInteger('12')).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0), "Era esperado valores iguais, mas " + result3735 + " <Short.valueOf((short) 12)> é diferente de " + result3736 + " <new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0), "Era esperado valores iguais, mas " + result3737 + " <Short.valueOf((short) 12)> é diferente de " + result3738 + " <new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0), "Era esperado valores iguais, mas " + result3739 + " <Short.valueOf((short) 12)> é diferente de " + result3740 + " <new JSONArray().fluentAdd('12').getShort(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3741 + " <new JSONArray().fluentAdd(12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3742 + " <new JSONArray().fluentAdd((byte) 12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3743 + " <new JSONArray().fluentAdd((short) 12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3744 + " <new JSONArray().fluentAdd(12L).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3745 + " <new JSONArray().fluentAdd(12F).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3746 + " <new JSONArray().fluentAdd(12D).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3747 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3748 + " <new JSONArray().fluentAdd(new BigInteger('12')).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result3749 + " <new JSONArray().fluentAdd('12').getByteValue(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0), "Era esperado valores iguais, mas " + result3750 + " <Byte.valueOf((byte) 12)> é diferente de " + result3751 + " <new JSONArray().fluentAdd(12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0), "Era esperado valores iguais, mas " + result3752 + " <Byte.valueOf((byte) 12)> é diferente de " + result3753 + " <new JSONArray().fluentAdd((byte) 12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0), "Era esperado valores iguais, mas " + result3754 + " <Byte.valueOf((byte) 12)> é diferente de " + result3755 + " <new JSONArray().fluentAdd((short) 12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0), "Era esperado valores iguais, mas " + result3756 + " <Byte.valueOf((byte) 12)> é diferente de " + result3757 + " <new JSONArray().fluentAdd(12L).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0), "Era esperado valores iguais, mas " + result3758 + " <Byte.valueOf((byte) 12)> é diferente de " + result3759 + " <new JSONArray().fluentAdd(12F).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0), "Era esperado valores iguais, mas " + result3760 + " <Byte.valueOf((byte) 12)> é diferente de " + result3761 + " <new JSONArray().fluentAdd(12D).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0), "Era esperado valores iguais, mas " + result3762 + " <Byte.valueOf((byte) 12)> é diferente de " + result3763 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0), "Era esperado valores iguais, mas " + result3764 + " <Byte.valueOf((byte) 12)> é diferente de " + result3765 + " <new JSONArray().fluentAdd(new BigInteger('12')).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0), "Era esperado valores iguais, mas " + result3766 + " <Byte.valueOf((byte) 12)> é diferente de " + result3767 + " <new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0), "Era esperado valores iguais, mas " + result3768 + " <Byte.valueOf((byte) 12)> é diferente de " + result3769 + " <new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0), "Era esperado valores iguais, mas " + result3770 + " <Byte.valueOf((byte) 12)> é diferente de " + result3771 + " <new JSONArray().fluentAdd('12').getByte(0)>")
chamada antiga: assertNull(JSONArray.of((Object) null).getDate(0))
nova chamada: assertNull(JSONArray.of((Object) null).getDate(0), "Era esperado nulo, mas " + result3772 + " <JSONArray.of((Object) null).getDate(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of("").getDate(0))
nova chamada: assertNull(JSONArray.of("").getDate(0), "Era esperado nulo, mas " + result3773 + " <JSONArray.of('').getDate(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of("null").getDate(0))
nova chamada: assertNull(JSONArray.of("null").getDate(0), "Era esperado nulo, mas " + result3774 + " <JSONArray.of('null').getDate(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of(0).getDate(0))
nova chamada: assertNull(JSONArray.of(0).getDate(0), "Era esperado nulo, mas " + result3775 + " <JSONArray.of(0).getDate(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of(0L).getDate(0))
nova chamada: assertNull(JSONArray.of(0L).getDate(0), "Era esperado nulo, mas " + result3776 + " <JSONArray.of(0L).getDate(0)> não é nulo")
chamada antiga: assertSame(date, JSONArray.of(date).getDate(0))
nova chamada: assertSame(date, JSONArray.of(date).getDate(0), "Era esperado objetos iguais, mas  date é diferente de " + result3777 + " <JSONArray.of(date).getDate(0)>")
chamada antiga: assertEquals(date, JSONArray.of(millis).getDate(0))
nova chamada: assertEquals(date, JSONArray.of(millis).getDate(0), "Era esperado valores iguais, mas  date é diferente de " + result3778 + " <JSONArray.of(millis).getDate(0)>")
chamada antiga: assertEquals(date, JSONArray.of(Instant.ofEpochMilli(millis)).getDate(0))
nova chamada: assertEquals(date, JSONArray.of(Instant.ofEpochMilli(millis)).getDate(0), "Era esperado valores iguais, mas  date é diferente de " + result3779 + " <JSONArray.of(Instant.ofEpochMilli(millis)).getDate(0)>")
chamada antiga: assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime())
nova chamada: assertEquals(ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli(), date1.getTime(), "Era esperado valores iguais, mas " + result3780 + " <ldt.atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli()> é diferente de " + result3781 + " <date1.getTime()>")
chamada antiga: assertNull(JSONArray.of((Object) null).getInstant(0))
nova chamada: assertNull(JSONArray.of((Object) null).getInstant(0), "Era esperado nulo, mas " + result3782 + " <JSONArray.of((Object) null).getInstant(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of("").getInstant(0))
nova chamada: assertNull(JSONArray.of("").getInstant(0), "Era esperado nulo, mas " + result3783 + " <JSONArray.of('').getInstant(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of("null").getInstant(0))
nova chamada: assertNull(JSONArray.of("null").getInstant(0), "Era esperado nulo, mas " + result3784 + " <JSONArray.of('null').getInstant(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of(0).getInstant(0))
nova chamada: assertNull(JSONArray.of(0).getInstant(0), "Era esperado nulo, mas " + result3785 + " <JSONArray.of(0).getInstant(0)> não é nulo")
chamada antiga: assertNull(JSONArray.of(0L).getInstant(0))
nova chamada: assertNull(JSONArray.of(0L).getInstant(0), "Era esperado nulo, mas " + result3786 + " <JSONArray.of(0L).getInstant(0)> não é nulo")
chamada antiga: assertSame(instant, JSONArray.of(instant).getInstant(0))
nova chamada: assertSame(instant, JSONArray.of(instant).getInstant(0), "Era esperado objetos iguais, mas  instant é diferente de " + result3787 + " <JSONArray.of(instant).getInstant(0)>")
chamada antiga: assertEquals(instant, JSONArray.of(millis).getInstant(0))
nova chamada: assertEquals(instant, JSONArray.of(millis).getInstant(0), "Era esperado valores iguais, mas  instant é diferente de " + result3788 + " <JSONArray.of(millis).getInstant(0)>")
chamada antiga: assertEquals(instant, JSONArray.of(new Date(millis)).getInstant(0))
nova chamada: assertEquals(instant, JSONArray.of(new Date(millis)).getInstant(0), "Era esperado valores iguais, mas  instant é diferente de " + result3789 + " <JSONArray.of(new Date(millis)).getInstant(0)>")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3790 + " <array.size()>")
chamada antiga: assertEquals("1", array.get(0))
nova chamada: assertEquals("1", array.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result3791 + " <array.get(0)>")
chamada antiga: assertNull(array.get(1))
nova chamada: assertNull(array.get(1), "Era esperado nulo, mas " + result3792 + " <array.get(1)> não é nulo")
chamada antiga: assertNull(array.getObject(1, String.class))
nova chamada: assertNull(array.getObject(1, String.class), "Era esperado nulo, mas " + result3793 + " <array.getObject(1, String.class)> não é nulo")
chamada antiga: assertEquals(0D, array.getDoubleValue(1))
nova chamada: assertEquals(0D, array.getDoubleValue(1), "Era esperado valores iguais, mas  0D é diferente de " + result3794 + " <array.getDoubleValue(1)>")
chamada antiga: assertEquals(0F, array.getFloatValue(1))
nova chamada: assertEquals(0F, array.getFloatValue(1), "Era esperado valores iguais, mas  0F é diferente de " + result3795 + " <array.getFloatValue(1)>")
chamada antiga: assertEquals(false, array.getBooleanValue(1))
nova chamada: assertEquals(false, array.getBooleanValue(1), "Era esperado valores iguais, mas  false é diferente de " + result3796 + " <array.getBooleanValue(1)>")
chamada antiga: assertEquals(array0.get(0), "1")
nova chamada: assertEquals(array0.get(0), "1", "Era esperado valores iguais, mas " + result3797 + " <array0.get(0)> é diferente de " + " '1'")
chamada antiga: assertEquals(array1.get(0), "1")
nova chamada: assertEquals(array1.get(0), "1", "Era esperado valores iguais, mas " + result3798 + " <array1.get(0)> é diferente de " + " '1'")
chamada antiga: assertEquals(array1.get(1), "2")
nova chamada: assertEquals(array1.get(1), "2", "Era esperado valores iguais, mas " + result3799 + " <array1.get(1)> é diferente de " + " '2'")
chamada antiga: assertEquals(array1.get(2), 3)
nova chamada: assertEquals(array1.get(2), 3, "Era esperado valores iguais, mas " + result3800 + " <array1.get(2)> é diferente de " + " 3")
chamada antiga: assertEquals(array2.get(0), 1)
nova chamada: assertEquals(array2.get(0), 1, "Era esperado valores iguais, mas " + result3801 + " <array2.get(0)> é diferente de " + " 1")
chamada antiga: assertEquals(array2.get(1), 2)
nova chamada: assertEquals(array2.get(1), 2, "Era esperado valores iguais, mas " + result3802 + " <array2.get(1)> é diferente de " + " 2")
chamada antiga: assertEquals(array2.get(2), 3)
nova chamada: assertEquals(array2.get(2), 3, "Era esperado valores iguais, mas " + result3803 + " <array2.get(2)> é diferente de " + " 3")
chamada antiga: assertEquals(array2.get(3), 4)
nova chamada: assertEquals(array2.get(3), 4, "Era esperado valores iguais, mas " + result3804 + " <array2.get(3)> é diferente de " + " 4")
chamada antiga: assertEquals(array2.get(4), "5")
nova chamada: assertEquals(array2.get(4), "5", "Era esperado valores iguais, mas " + result3805 + " <array2.get(4)> é diferente de " + " '5'")
chamada antiga: assertNotNull(JSONArray.of(new ArrayList<>()).getJSONArray(0))
nova chamada: assertNotNull(JSONArray.of(new ArrayList<>()).getJSONArray(0), "Era esperado não nulo, mas " + result3806 + " <JSONArray.of(new ArrayList<>()).getJSONArray(0)> é nulo")
chamada antiga: assertNotNull(JSONArray.of(new HashMap<>()).getJSONObject(0))
nova chamada: assertNotNull(JSONArray.of(new HashMap<>()).getJSONObject(0), "Era esperado não nulo, mas " + result3807 + " <JSONArray.of(new HashMap<>()).getJSONObject(0)> é nulo")
chamada antiga: assertNull(array.getJSONArray(1))
nova chamada: assertNull(array.getJSONArray(1), "Era esperado nulo, mas " + result3808 + " <array.getJSONArray(1)> não é nulo")
chamada antiga: assertSame(a1, array.getJSONArray(2))
nova chamada: assertSame(a1, array.getJSONArray(2), "Era esperado objetos iguais, mas  a1 é diferente de " + result3809 + " <array.getJSONArray(2)>")
chamada antiga: assertNotSame(a2, array.getJSONArray(3))
nova chamada: assertNotSame(a2, array.getJSONArray(3), "Era esperado objetos diferentes, mas  a2 é igual a " + result3810 + " <array.getJSONArray(3)>")
chamada antiga: assertSame(a1, t1.get(0))
nova chamada: assertSame(a1, t1.get(0), "Era esperado objetos iguais, mas  a1 é diferente de " + result3811 + " <t1.get(0)>")
chamada antiga: assertSame(a2, t1.get(1))
nova chamada: assertSame(a2, t1.get(1), "Era esperado objetos iguais, mas  a2 é diferente de " + result3812 + " <t1.get(1)>")
chamada antiga: assertSame(array, t1.get(2))
nova chamada: assertSame(array, t1.get(2), "Era esperado objetos iguais, mas  array é diferente de " + result3813 + " <t1.get(2)>")
chamada antiga: assertEquals(123L, t2.get(0))
nova chamada: assertEquals(123L, t2.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result3814 + " <t2.get(0)>")
chamada antiga: assertEquals(456L, t2.get(1))
nova chamada: assertEquals(456L, t2.get(1), "Era esperado valores iguais, mas  456L é diferente de " + result3815 + " <t2.get(1)>")
chamada antiga: assertEquals(JSONSchema.Type.Integer, JSONArray.of("integer").getObject(0, JSONSchema.Type.class))
nova chamada: assertEquals(JSONSchema.Type.Integer, JSONArray.of("integer").getObject(0, JSONSchema.Type.class), "Era esperado valores iguais, mas  JSONSchema.Type.Integer é diferente de " + result3816 + " <JSONArray.of('integer').getObject(0, JSONSchema.Type.class)>")
chamada antiga: assertEquals(JSONSchema.Type.Integer, JSONArray.of("Integer").getObject(0, JSONSchema.Type.class))
nova chamada: assertEquals(JSONSchema.Type.Integer, JSONArray.of("Integer").getObject(0, JSONSchema.Type.class), "Era esperado valores iguais, mas  JSONSchema.Type.Integer é diferente de " + result3817 + " <JSONArray.of('Integer').getObject(0, JSONSchema.Type.class)>")
chamada antiga: assertNull(JSONArray.of("").getObject(0, UUID.class))
nova chamada: assertNull(JSONArray.of("").getObject(0, UUID.class), "Era esperado nulo, mas " + result3818 + " <JSONArray.of('').getObject(0, UUID.class)> não é nulo")
chamada antiga: assertNull(JSONArray.of("null").getObject(0, UUID.class))
nova chamada: assertNull(JSONArray.of("null").getObject(0, UUID.class), "Era esperado nulo, mas " + result3819 + " <JSONArray.of('null').getObject(0, UUID.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(101), JSONArray.of(101).getObject(0, Number.class))
nova chamada: assertEquals(Integer.valueOf(101), JSONArray.of(101).getObject(0, Number.class), "Era esperado valores iguais, mas " + result3820 + " <Integer.valueOf(101)> é diferente de " + result3821 + " <JSONArray.of(101).getObject(0, Number.class)>")
chamada antiga: assertNull(JSONArray.of().fluentAdd(null).getObject(0, (Type) Object.class))
nova chamada: assertNull(JSONArray.of().fluentAdd(null).getObject(0, (Type) Object.class), "Era esperado nulo, mas " + result3822 + " <JSONArray.of().fluentAdd(null).getObject(0, (Type) Object.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Object.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Object.class), "Era esperado valores iguais, mas " + result3823 + " <Integer.valueOf(123)> é diferente de " + result3824 + " <JSONArray.of(123).getObject(0, (Type) Object.class)>")
chamada antiga: assertEquals("123", JSONArray.of(123).getObject(0, (Type) String.class))
nova chamada: assertEquals("123", JSONArray.of(123).getObject(0, (Type) String.class), "Era esperado valores iguais, mas  '123' é diferente de " + result3825 + " <JSONArray.of(123).getObject(0, (Type) String.class)>")
chamada antiga: assertEquals(Integer.valueOf(123), JSONArray.of("123").getObject(0, (Type) Integer.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONArray.of("123").getObject(0, (Type) Integer.class), "Era esperado valores iguais, mas " + result3826 + " <Integer.valueOf(123)> é diferente de " + result3827 + " <JSONArray.of('123').getObject(0, (Type) Integer.class)>")
chamada antiga: assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Number.class))
nova chamada: assertEquals(Integer.valueOf(123), JSONArray.of(123).getObject(0, (Type) Number.class), "Era esperado valores iguais, mas " + result3828 + " <Integer.valueOf(123)> é diferente de " + result3829 + " <JSONArray.of(123).getObject(0, (Type) Number.class)>")
chamada antiga: assertEquals(new ArrayList(), JSONArray.of(new ArrayList()).getObject(0, List.class))
nova chamada: assertEquals(new ArrayList(), JSONArray.of(new ArrayList()).getObject(0, List.class), "Era esperado valores iguais, mas  new ArrayList() é diferente de " + result3830 + " <JSONArray.of(new ArrayList()).getObject(0, List.class)>")
chamada antiga: assertEquals("[-1]", array.toString())
nova chamada: assertEquals("[-1]", array.toString(), "Era esperado valores iguais, mas  '[-1]' é diferente de " + result3831 + " <array.toString()>")
chamada antiga: assertEquals("[1,2]", array.toString())
nova chamada: assertEquals("[1,2]", array.toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result3832 + " <array.toString()>")
chamada antiga: assertEquals("[1,2,null,null,3]", array.toString())
nova chamada: assertEquals("[1,2,null,null,3]", array.toString(), "Era esperado valores iguais, mas  '[1,2,null,null,3]' é diferente de " + result3833 + " <array.toString()>")
chamada antiga: assertEquals("[1,2,null,null,-1]", array.toString())
nova chamada: assertEquals("[1,2,null,null,-1]", array.toString(), "Era esperado valores iguais, mas  '[1,2,null,null,-1]' é diferente de " + result3834 + " <array.toString()>")
chamada antiga: assertEquals("[1,2,null,-2,-1]", array.toString())
nova chamada: assertEquals("[1,2,null,-2,-1]", array.toString(), "Era esperado valores iguais, mas  '[1,2,null,-2,-1]' é diferente de " + result3835 + " <array.toString()>")
chamada antiga: assertEquals("[-6,1,2,null,-2,-1]", array.toString())
nova chamada: assertEquals("[-6,1,2,null,-2,-1]", array.toString(), "Era esperado valores iguais, mas  '[-6,1,2,null,-2,-1]' é diferente de " + result3836 + " <array.toString()>")
chamada antiga: assertEquals("[-6,1,2,null,-2,-1]", array.toString())
nova chamada: assertEquals("[-6,1,2,null,-2,-1]", array.toString(), "Era esperado valores iguais, mas  '[-6,1,2,null,-2,-1]' é diferente de " + result3837 + " <array.toString()>")
chamada antiga: assertEquals("[-6,1,2,null,-2,-1]", array.toString())
nova chamada: assertEquals("[-6,1,2,null,-2,-1]", array.toString(), "Era esperado valores iguais, mas  '[-6,1,2,null,-2,-1]' é diferente de " + result3838 + " <array.toString()>")
chamada antiga: assertEquals("2022-09-24 17:14:03.321", JSONArray.of(new Date(1664010843321L)).getString(0))
nova chamada: assertEquals("2022-09-24 17:14:03.321", JSONArray.of(new Date(1664010843321L)).getString(0), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.321' é diferente de " + result3839 + " <JSONArray.of(new Date(1664010843321L)).getString(0)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.32", JSONArray.of(new Date(1664010843320L)).getString(0))
nova chamada: assertEquals("2022-09-24 17:14:03.32", JSONArray.of(new Date(1664010843320L)).getString(0), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.32' é diferente de " + result3840 + " <JSONArray.of(new Date(1664010843320L)).getString(0)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.3", JSONArray.of(new Date(1664010843300L)).getString(0))
nova chamada: assertEquals("2022-09-24 17:14:03.3", JSONArray.of(new Date(1664010843300L)).getString(0), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.3' é diferente de " + result3841 + " <JSONArray.of(new Date(1664010843300L)).getString(0)>")
chamada antiga: assertEquals("2022-09-24 17:14:03", JSONArray.of(new Date(1664010843000L)).getString(0))
nova chamada: assertEquals("2022-09-24 17:14:03", JSONArray.of(new Date(1664010843000L)).getString(0), "Era esperado valores iguais, mas  '2022-09-24 17:14:03' é diferente de " + result3842 + " <JSONArray.of(new Date(1664010843000L)).getString(0)>")
chamada antiga: assertEquals("[[1]]", root.toString())
nova chamada: assertEquals("[[1]]", root.toString(), "Era esperado valores iguais, mas  '[[1]]' é diferente de " + result3843 + " <root.toString()>")
chamada antiga: assertEquals("[{\"id\":123}]", root.toString())
nova chamada: assertEquals("[{\"id\":123}]", root.toString(), "Era esperado valores iguais, mas  '[{\'id\':123}]' é diferente de " + result3844 + " <root.toString()>")
chamada antiga: assertEquals(3, strings.size())
nova chamada: assertEquals(3, strings.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3845 + " <strings.size()>")
chamada antiga: assertEquals("1", strings.get(0))
nova chamada: assertEquals("1", strings.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result3846 + " <strings.get(0)>")
chamada antiga: assertEquals("2", strings.get(1))
nova chamada: assertEquals("2", strings.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result3847 + " <strings.get(1)>")
chamada antiga: assertEquals("3", strings.get(2))
nova chamada: assertEquals("3", strings.get(2), "Era esperado valores iguais, mas  '3' é diferente de " + result3848 + " <strings.get(2)>")
chamada antiga: assertEquals("{\"id\":101}", jsonWriter.toString())
nova chamada: assertEquals("{\"id\":101}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result3849 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"id\":101}", jsonWriter.toString())
nova chamada: assertEquals("{\"id\":101}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result3850 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"id\":101}", jsonWriter.toString())
nova chamada: assertEquals("{\"id\":101}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + result3851 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"101\"", jsonWriter.toString())
nova chamada: assertEquals("\"101\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'101\'' é diferente de " + result3852 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("101", jsonWriter.toString())
nova chamada: assertEquals("101", jsonWriter.toString(), "Era esperado valores iguais, mas  '101' é diferente de " + result3853 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("101", jsonWriter.toString())
nova chamada: assertEquals("101", jsonWriter.toString(), "Era esperado valores iguais, mas  '101' é diferente de " + result3854 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
nova chamada: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'names\':[\'1\',\'2\']}' é diferente de " + result3855 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
nova chamada: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'names\':[\'1\',\'2\']}' é diferente de " + result3856 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString())
nova chamada: assertEquals("{\"names\":[\"1\",\"2\"]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'names\':[\'1\',\'2\']}' é diferente de " + result3857 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"names\":[1,2]}", jsonWriter.toString())
nova chamada: assertEquals("{\"names\":[1,2]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'names\':[1,2]}' é diferente de " + result3858 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"value\":12.0}", jsonWriter.toString())
nova chamada: assertEquals("{\"value\":12.0}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'value\':12.0}' é diferente de " + result3859 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"value\":12.0}", jsonWriter.toString())
nova chamada: assertEquals("{\"value\":12.0}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'value\':12.0}' é diferente de " + result3860 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"value\":true}", jsonWriter.toString())
nova chamada: assertEquals("{\"value\":true}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + result3861 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"value\":true}", jsonWriter.toString())
nova chamada: assertEquals("{\"value\":true}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + result3862 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"value\":\"12\"}", JSON.toJSONString(new Bean("12")))
nova chamada: assertEquals("{\"value\":\"12\"}", JSON.toJSONString(new Bean("12")), "Era esperado valores iguais, mas  '{\'value\':\'12\'}' é diferente de " + result3863 + " <JSON.toJSONString(new Bean('12'))>")
chamada antiga: assertEquals("{\"value\":1}", JSON.toJSONString(new Bean(BigDecimal.ONE)))
nova chamada: assertEquals("{\"value\":1}", JSON.toJSONString(new Bean(BigDecimal.ONE)), "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + result3864 + " <JSON.toJSONString(new Bean(BigDecimal.ONE))>")
chamada antiga: assertEquals("{\"value\":[1]}", JSON.toJSONString(new Bean(new BigDecimal[] { BigDecimal.ONE })))
nova chamada: assertEquals("{\"value\":[1]}", JSON.toJSONString(new Bean(new BigDecimal[] { BigDecimal.ONE })), "Era esperado valores iguais, mas  '{\'value\':[1]}' é diferente de " + result3865 + " <JSON.toJSONString(new Bean(new BigDecimal[] { BigDecimal.ONE }))>")
chamada antiga: assertEquals("{\"value\":1.00}", JSON.toJSONString(new Bean1(BigDecimal.ONE)))
nova chamada: assertEquals("{\"value\":1.00}", JSON.toJSONString(new Bean1(BigDecimal.ONE)), "Era esperado valores iguais, mas  '{\'value\':1.00}' é diferente de " + result3866 + " <JSON.toJSONString(new Bean1(BigDecimal.ONE))>")
chamada antiga: assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean1(new BigDecimal[] { BigDecimal.ONE })))
nova chamada: assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean1(new BigDecimal[] { BigDecimal.ONE })), "Era esperado valores iguais, mas  '{\'value\':[1.00]}' é diferente de " + result3867 + " <JSON.toJSONString(new Bean1(new BigDecimal[] { BigDecimal.ONE }))>")
chamada antiga: assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean2(new BigDecimal[] { BigDecimal.ONE })))
nova chamada: assertEquals("{\"value\":[1.00]}", JSON.toJSONString(new Bean2(new BigDecimal[] { BigDecimal.ONE })), "Era esperado valores iguais, mas  '{\'value\':[1.00]}' é diferente de " + result3868 + " <JSON.toJSONString(new Bean2(new BigDecimal[] { BigDecimal.ONE }))>")
chamada antiga: assertNull(filter.apply("Integer", Integer.class, 0))
nova chamada: assertNull(filter.apply("Integer", Integer.class, 0), "Era esperado nulo, mas " + result3869 + " <filter.apply('Integer', Integer.class, 0)> não é nulo")
chamada antiga: assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0))
nova chamada: assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0), "Era esperado valores iguais, mas  Bean.class é diferente de " + result3870 + " <filter.apply(Bean.class.getName(), Bean.class, 0)>")
chamada antiga: assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0))
nova chamada: assertEquals(Bean.class, filter.apply(Bean.class.getName(), Bean.class, 0), "Era esperado valores iguais, mas  Bean.class é diferente de " + result3871 + " <filter.apply(Bean.class.getName(), Bean.class, 0)>")
chamada antiga: assertEquals(int.class, filter.apply("int", null, 0))
nova chamada: assertEquals(int.class, filter.apply("int", null, 0), "Era esperado valores iguais, mas  int.class é diferente de " + result3872 + " <filter.apply('int', null, 0)>")
chamada antiga: assertEquals(String.class, filter.apply("java.lang.String", null, 0))
nova chamada: assertEquals(String.class, filter.apply("java.lang.String", null, 0), "Era esperado valores iguais, mas  String.class é diferente de " + result3873 + " <filter.apply('java.lang.String', null, 0)>")
chamada antiga: assertEquals("{\"user-id\":10}", JSON.toJSONString(bean, filter))
nova chamada: assertEquals("{\"user-id\":10}", JSON.toJSONString(bean, filter), "Era esperado valores iguais, mas  '{\'user-id\':10}' é diferente de " + result3874 + " <JSON.toJSONString(bean, filter)>")
chamada antiga: assertEquals(Bean.class, context.getBeanClass())
nova chamada: assertEquals(Bean.class, context.getBeanClass(), "Era esperado valores iguais, mas  Bean.class é diferente de " + result3875 + " <context.getBeanClass()>")
chamada antiga: assertEquals(int.class, context.getFieldClass())
nova chamada: assertEquals(int.class, context.getFieldClass(), "Era esperado valores iguais, mas  int.class é diferente de " + result3876 + " <context.getFieldClass()>")
chamada antiga: assertEquals(int.class, context.getFieldType())
nova chamada: assertEquals(int.class, context.getFieldType(), "Era esperado valores iguais, mas  int.class é diferente de " + result3877 + " <context.getFieldType()>")
chamada antiga: assertEquals(Bean.class.getField("id"), context.getField())
nova chamada: assertEquals(Bean.class.getField("id"), context.getField(), "Era esperado valores iguais, mas " + result3878 + " <Bean.class.getField('id')> é diferente de " + result3879 + " <context.getField()>")
chamada antiga: assertEquals("userId", context.getAnnotation(JSONField.class).name())
nova chamada: assertEquals("userId", context.getAnnotation(JSONField.class).name(), "Era esperado valores iguais, mas  'userId' é diferente de " + result3880 + " <context.getAnnotation(JSONField.class).name()>")
chamada antiga: assertEquals(null, context.getFormat())
nova chamada: assertEquals(null, context.getFormat(), "Era esperado valores iguais, mas  null é diferente de " + result3881 + " <context.getFormat()>")
chamada antiga: assertEquals(null, context.getLabel())
nova chamada: assertEquals(null, context.getLabel(), "Era esperado valores iguais, mas  null é diferente de " + result3882 + " <context.getLabel()>")
chamada antiga: assertEquals(0, context.getFeatures())
nova chamada: assertEquals(0, context.getFeatures(), "Era esperado valores iguais, mas  0 é diferente de " + result3883 + " <context.getFeatures()>")
chamada antiga: assertEquals("{\"id_1_2\":1001}", str)
nova chamada: assertEquals("{\"id_1_2\":1001}", str, "Era esperado valores iguais, mas  '{\'id_1_2\':1001}' é diferente de " + " str")
chamada antiga: assertEquals("{\"gender\":\"男\",\"id\":100}", str)
nova chamada: assertEquals("{\"gender\":\"男\",\"id\":100}", str, "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'id\':100}' é diferente de " + " str")
chamada antiga: assertEquals("{\"gender\":\"男\",\"xid\":100}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"gender\":\"男\",\"xid\":100}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'xid\':100}' é diferente de " + result3884 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"\":123}", JSON.toJSONString(Collections.singletonMap("", 123), new PascalNameFilter()))
nova chamada: assertEquals("{\"\":123}", JSON.toJSONString(Collections.singletonMap("", 123), new PascalNameFilter()), "Era esperado valores iguais, mas  '{\'\':123}' é diferente de " + result3885 + " <JSON.toJSONString(Collections.singletonMap('', 123), new PascalNameFilter())>")
chamada antiga: assertEquals("{\"Id\":123}", JSON.toJSONString(a, new PascalNameFilter()))
nova chamada: assertEquals("{\"Id\":123}", JSON.toJSONString(a, new PascalNameFilter()), "Era esperado valores iguais, mas  '{\'Id\':123}' é diferente de " + result3886 + " <JSON.toJSONString(a, new PascalNameFilter())>")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter("id")))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter("id")), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result3887 + " <JSON.toJSONString(new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks'), new SimplePropertyPreFilter('id'))>")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter(JSONObject.class)))
nova chamada: assertEquals("{\"id\":123,\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), new SimplePropertyPreFilter(JSONObject.class)), "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'DataWorks\'}' é diferente de " + result3888 + " <JSON.toJSONString(new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks'), new SimplePropertyPreFilter(JSONObject.class))>")
chamada antiga: assertNull(filter.getClazz())
nova chamada: assertNull(filter.getClazz(), "Era esperado nulo, mas " + result3889 + " <filter.getClazz()> não é nulo")
chamada antiga: assertEquals(0, filter.getMaxLevel())
nova chamada: assertEquals(0, filter.getMaxLevel(), "Era esperado valores iguais, mas  0 é diferente de " + result3890 + " <filter.getMaxLevel()>")
chamada antiga: assertEquals(1, filter.getMaxLevel())
nova chamada: assertEquals(1, filter.getMaxLevel(), "Era esperado valores iguais, mas  1 é diferente de " + result3891 + " <filter.getMaxLevel()>")
chamada antiga: assertEquals("{\"value\":{}}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter))
nova chamada: assertEquals("{\"value\":{}}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter), "Era esperado valores iguais, mas  '{\'value\':{}}' é diferente de " + result3892 + " <JSON.toJSONString(new JSONObject().fluentPut('value', new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks')), filter)>")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result3893 + " <JSON.toJSONString(new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks'), filter)>")
chamada antiga: assertEquals("{\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter))
nova chamada: assertEquals("{\"name\":\"DataWorks\"}", JSON.toJSONString(new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks"), filter), "Era esperado valores iguais, mas  '{\'name\':\'DataWorks\'}' é diferente de " + result3894 + " <JSON.toJSONString(new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks'), filter)>")
chamada antiga: assertNotNull(filter.getClazz())
nova chamada: assertNotNull(filter.getClazz(), "Era esperado não nulo, mas " + result3895 + " <filter.getClazz()> é nulo")
chamada antiga: assertEquals("{}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter))
nova chamada: assertEquals("{}", JSON.toJSONString(new JSONObject().fluentPut("value", new JSONObject().fluentPut("id", 123).fluentPut("name", "DataWorks")), filter), "Era esperado valores iguais, mas  '{}' é diferente de " + result3896 + " <JSON.toJSONString(new JSONObject().fluentPut('value', new JSONObject().fluentPut('id', 123).fluentPut('name', 'DataWorks')), filter)>")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result3897 + " <JSON.toJSONString(JSONObject.of(), filter)>")
chamada antiga: assertEquals("{\"value\":\"xx\",\"id\":123}", JSON.toJSONString(JSONObject.of("value", "xx"), filter))
nova chamada: assertEquals("{\"value\":\"xx\",\"id\":123}", JSON.toJSONString(JSONObject.of("value", "xx"), filter), "Era esperado valores iguais, mas  '{\'value\':\'xx\',\'id\':123}' é diferente de " + result3898 + " <JSON.toJSONString(JSONObject.of('value', 'xx'), filter)>")
chamada antiga: assertEquals("{\"id\":123,\"oid\":101}", JSON.toJSONString(a, filter))
nova chamada: assertEquals("{\"id\":123,\"oid\":101}", JSON.toJSONString(a, filter), "Era esperado valores iguais, mas  '{\'id\':123,\'oid\':101}' é diferente de " + result3899 + " <JSON.toJSONString(a, filter)>")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(JSONObject.of(), filter), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result3900 + " <JSON.toJSONString(JSONObject.of(), filter)>")
chamada antiga: assertEquals("{\"id\":123,\"value\":\"xx\"}", JSON.toJSONString(JSONObject.of("value", "xx"), filter))
nova chamada: assertEquals("{\"id\":123,\"value\":\"xx\"}", JSON.toJSONString(JSONObject.of("value", "xx"), filter), "Era esperado valores iguais, mas  '{\'id\':123,\'value\':\'xx\'}' é diferente de " + result3901 + " <JSON.toJSONString(JSONObject.of('value', 'xx'), filter)>")
chamada antiga: assertEquals("{\"oid\":101,\"id\":123}", JSON.toJSONString(a, filter))
nova chamada: assertEquals("{\"oid\":101,\"id\":123}", JSON.toJSONString(a, filter), "Era esperado valores iguais, mas  '{\'oid\':101,\'id\':123}' é diferente de " + result3902 + " <JSON.toJSONString(a, filter)>")
chamada antiga: assertFalse(context.isEnabled(JSONReader.Feature.UseNativeObject))
nova chamada: assertFalse(context.isEnabled(JSONReader.Feature.UseNativeObject), "Era esperado falso, mas " + result3903 + " <context.isEnabled(JSONReader.Feature.UseNativeObject)> é verdadeiro ")
chamada antiga: assertFalse(jsonReader.nextIfSet())
nova chamada: assertFalse(jsonReader.nextIfSet(), "Era esperado falso, mas " + result3904 + " <jsonReader.nextIfSet()> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$.length()").isRef())
nova chamada: assertFalse(JSONPath.of("$.length()").isRef(), "Era esperado falso, mas " + result3905 + " <JSONPath.of('$.length()').isRef()> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$..b").isRef())
nova chamada: assertFalse(JSONPath.of("$..b").isRef(), "Era esperado falso, mas " + result3906 + " <JSONPath.of('$..b').isRef()> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$.v0001").contains(vo))
nova chamada: assertFalse(JSONPath.of("$.v0001").contains(vo), "Era esperado falso, mas " + result3907 + " <JSONPath.of('$.v0001').contains(vo)> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$.xx").contains(JSONObject.of("id", 123)))
nova chamada: assertFalse(JSONPath.of("$.xx").contains(JSONObject.of("id", 123)), "Era esperado falso, mas " + result3908 + " <JSONPath.of('$.xx').contains(JSONObject.of('id', 123))> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$[1]").contains(JSONArray.of("id")))
nova chamada: assertFalse(JSONPath.of("$[1]").contains(JSONArray.of("id")), "Era esperado falso, mas " + result3909 + " <JSONPath.of('$[1]').contains(JSONArray.of('id'))> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$[0].v0000").contains(new Object[] { Arrays.asList(new Integer1()) }))
nova chamada: assertFalse(JSONPath.of("$[0].v0000").contains(new Object[] { Arrays.asList(new Integer1()) }), "Era esperado falso, mas " + result3910 + " <JSONPath.of('$[0].v0000').contains(new Object[] { Arrays.asList(new Integer1()) })> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(new Integer1()))))
nova chamada: assertFalse(JSONPath.of("$[0].v0000").contains(Arrays.asList(Arrays.asList(new Integer1()))), "Era esperado falso, mas " + result3911 + " <JSONPath.of('$[0].v0000').contains(Arrays.asList(Arrays.asList(new Integer1())))> é verdadeiro ")
chamada antiga: assertFalse(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { new Integer1() })))
nova chamada: assertFalse(JSONPath.of("$[0].v0000").contains(new JSONArray().fluentAdd(new Object[] { new Integer1() })), "Era esperado falso, mas " + result3912 + " <JSONPath.of('$[0].v0000').contains(new JSONArray().fluentAdd(new Object[] { new Integer1() }))> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject(json, BooleanValue1.class).isV0000())
nova chamada: assertFalse(JSON.parseObject(json, BooleanValue1.class).isV0000(), "Era esperado falso, mas " + result3913 + " <JSON.parseObject(json, BooleanValue1.class).isV0000()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject(jsonBytes, BooleanValue1.class).isV0000())
nova chamada: assertFalse(JSON.parseObject(jsonBytes, BooleanValue1.class).isV0000(), "Era esperado falso, mas " + result3914 + " <JSON.parseObject(jsonBytes, BooleanValue1.class).isV0000()> é verdadeiro ")
chamada antiga: assertFalse(JSONB.parseObject(jsonbBytes, BooleanValue1.class).isV0000())
nova chamada: assertFalse(JSONB.parseObject(jsonbBytes, BooleanValue1.class).isV0000(), "Era esperado falso, mas " + result3915 + " <JSONB.parseObject(jsonbBytes, BooleanValue1.class).isV0000()> é verdadeiro ")
chamada antiga: assertFalse(proxy.isName())
nova chamada: assertFalse(proxy.isName(), "Era esperado falso, mas " + result3916 + " <proxy.isName()> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.containsKey("id"))
nova chamada: assertFalse(jsonObject.containsKey("id"), "Era esperado falso, mas " + result3917 + " <jsonObject.containsKey('id')> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.containsValue("id"))
nova chamada: assertFalse(jsonObject.containsValue("id"), "Era esperado falso, mas " + result3918 + " <jsonObject.containsValue('id')> é verdadeiro ")
chamada antiga: assertFalse(singleton.isEmpty())
nova chamada: assertFalse(singleton.isEmpty(), "Era esperado falso, mas " + result3919 + " <singleton.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(singleton.isEmpty())
nova chamada: assertFalse(singleton.isEmpty(), "Era esperado falso, mas " + result3920 + " <singleton.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(c1.list2.get(0) instanceof Item)
nova chamada: assertFalse(c1.list2.get(0) instanceof Item, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(b1.list2.get(0) instanceof Item)
nova chamada: assertFalse(b1.list2.get(0) instanceof Item, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(d1.list2.get(0) instanceof Item)
nova chamada: assertFalse(d1.list2.get(0) instanceof Item, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter))
nova chamada: assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter), "Era esperado valores iguais, mas  '{\'userId\':11}' é diferente de " + result3921 + " <JSON.toJSONString(bean, filter)>")
chamada antiga: assertEquals(Bean.class, context.getBeanClass())
nova chamada: assertEquals(Bean.class, context.getBeanClass(), "Era esperado valores iguais, mas  Bean.class é diferente de " + result3922 + " <context.getBeanClass()>")
chamada antiga: assertEquals(int.class, context.getFieldClass())
nova chamada: assertEquals(int.class, context.getFieldClass(), "Era esperado valores iguais, mas  int.class é diferente de " + result3923 + " <context.getFieldClass()>")
chamada antiga: assertEquals(int.class, context.getFieldType())
nova chamada: assertEquals(int.class, context.getFieldType(), "Era esperado valores iguais, mas  int.class é diferente de " + result3924 + " <context.getFieldType()>")
chamada antiga: assertEquals(Bean.class.getField("id"), context.getField())
nova chamada: assertEquals(Bean.class.getField("id"), context.getField(), "Era esperado valores iguais, mas " + result3925 + " <Bean.class.getField('id')> é diferente de " + result3926 + " <context.getField()>")
chamada antiga: assertEquals(null, context.getMethod())
nova chamada: assertEquals(null, context.getMethod(), "Era esperado valores iguais, mas  null é diferente de " + result3927 + " <context.getMethod()>")
chamada antiga: assertEquals("userId", context.getAnnotation(JSONField.class).name())
nova chamada: assertEquals("userId", context.getAnnotation(JSONField.class).name(), "Era esperado valores iguais, mas  'userId' é diferente de " + result3928 + " <context.getAnnotation(JSONField.class).name()>")
chamada antiga: assertEquals(null, context.getFormat())
nova chamada: assertEquals(null, context.getFormat(), "Era esperado valores iguais, mas  null é diferente de " + result3929 + " <context.getFormat()>")
chamada antiga: assertEquals(null, context.getLabel())
nova chamada: assertEquals(null, context.getLabel(), "Era esperado valores iguais, mas  null é diferente de " + result3930 + " <context.getLabel()>")
chamada antiga: assertEquals(0, context.getFeatures())
nova chamada: assertEquals(0, context.getFeatures(), "Era esperado valores iguais, mas  0 é diferente de " + result3931 + " <context.getFeatures()>")
chamada antiga: assertEquals("userId", context.getName())
nova chamada: assertEquals("userId", context.getName(), "Era esperado valores iguais, mas  'userId' é diferente de " + result3932 + " <context.getName()>")
chamada antiga: assertFalse(context.isJsonDirect())
nova chamada: assertFalse(context.isJsonDirect(), "Era esperado falso, mas " + result3933 + " <context.isJsonDirect()> é verdadeiro ")
chamada antiga: assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter))
nova chamada: assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter), "Era esperado valores iguais, mas  '{\'userId\':11}' é diferente de " + result3934 + " <JSON.toJSONString(bean, filter)>")
chamada antiga: assertEquals(Bean1.class, context.getBeanClass())
nova chamada: assertEquals(Bean1.class, context.getBeanClass(), "Era esperado valores iguais, mas  Bean1.class é diferente de " + result3935 + " <context.getBeanClass()>")
chamada antiga: assertEquals(int.class, context.getFieldClass())
nova chamada: assertEquals(int.class, context.getFieldClass(), "Era esperado valores iguais, mas  int.class é diferente de " + result3936 + " <context.getFieldClass()>")
chamada antiga: assertEquals(int.class, context.getFieldType())
nova chamada: assertEquals(int.class, context.getFieldType(), "Era esperado valores iguais, mas  int.class é diferente de " + result3937 + " <context.getFieldType()>")
chamada antiga: assertEquals(Bean1.class.getMethod("getId"), context.getMethod())
nova chamada: assertEquals(Bean1.class.getMethod("getId"), context.getMethod(), "Era esperado valores iguais, mas " + result3938 + " <Bean1.class.getMethod('getId')> é diferente de " + result3939 + " <context.getMethod()>")
chamada antiga: assertEquals(null, context.getField())
nova chamada: assertEquals(null, context.getField(), "Era esperado valores iguais, mas  null é diferente de " + result3940 + " <context.getField()>")
chamada antiga: assertEquals("userId", context.getAnnotation(JSONField.class).name())
nova chamada: assertEquals("userId", context.getAnnotation(JSONField.class).name(), "Era esperado valores iguais, mas  'userId' é diferente de " + result3941 + " <context.getAnnotation(JSONField.class).name()>")
chamada antiga: assertEquals(null, context.getFormat())
nova chamada: assertEquals(null, context.getFormat(), "Era esperado valores iguais, mas  null é diferente de " + result3942 + " <context.getFormat()>")
chamada antiga: assertEquals(null, context.getLabel())
nova chamada: assertEquals(null, context.getLabel(), "Era esperado valores iguais, mas  null é diferente de " + result3943 + " <context.getLabel()>")
chamada antiga: assertEquals(FieldInfo.FIELD_MASK, context.getFeatures())
nova chamada: assertEquals(FieldInfo.FIELD_MASK, context.getFeatures(), "Era esperado valores iguais, mas  FieldInfo.FIELD_MASK é diferente de " + result3944 + " <context.getFeatures()>")
chamada antiga: assertEquals("userId", context.getName())
nova chamada: assertEquals("userId", context.getName(), "Era esperado valores iguais, mas  'userId' é diferente de " + result3945 + " <context.getName()>")
chamada antiga: assertFalse(context.isJsonDirect())
nova chamada: assertFalse(context.isJsonDirect(), "Era esperado falso, mas " + result3946 + " <context.isJsonDirect()> é verdadeiro ")
chamada antiga: assertEquals("{\"id\":111}", str)
nova chamada: assertEquals("{\"id\":111}", str, "Era esperado valores iguais, mas  '{\'id\':111}' é diferente de " + " str")
chamada antiga: assertEquals("{\"gender\":\"男\",\"id\":100}", str)
nova chamada: assertEquals("{\"gender\":\"男\",\"id\":100}", str, "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'id\':100}' é diferente de " + " str")
chamada antiga: assertEquals("{\"gender\":\"男\",\"id\":100}", str)
nova chamada: assertEquals("{\"gender\":\"男\",\"id\":100}", str, "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'id\':100}' é diferente de " + " str")
chamada antiga: assertEquals("{\"v0\":100,\"v1\":101}", string)
nova chamada: assertEquals("{\"v0\":100,\"v1\":101}", string, "Era esperado valores iguais, mas  '{\'v0\':100,\'v1\':101}' é diferente de " + " string")
chamada antiga: assertEquals("{\"v2\":102,\"v3\":103}", string)
nova chamada: assertEquals("{\"v2\":102,\"v3\":103}", string, "Era esperado valores iguais, mas  '{\'v2\':102,\'v3\':103}' é diferente de " + " string")
chamada antiga: assertEquals("{\"gender\":\"男\",\"id\":100}", str)
nova chamada: assertEquals("{\"gender\":\"男\",\"id\":100}", str, "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'id\':100}' é diferente de " + " str")
chamada antiga: assertEquals("{\"gender\":\"男\",\"id\":100}", str)
nova chamada: assertEquals("{\"gender\":\"男\",\"id\":100}", str, "Era esperado valores iguais, mas  '{\'gender\':\'男\',\'id\':100}' é diferente de " + " str")
chamada antiga: assertEquals("123", jsonWriter.toString())
nova chamada: assertEquals("123", jsonWriter.toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result3947 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("USD", amount.getCurrency().getCurrencyCode())
nova chamada: assertEquals("USD", amount.getCurrency().getCurrencyCode(), "Era esperado valores iguais, mas  'USD' é diferente de " + result3948 + " <amount.getCurrency().getCurrencyCode()>")
chamada antiga: assertEquals(amount, amount1)
nova chamada: assertEquals(amount, amount1, "Era esperado valores iguais, mas  amount é diferente de " + " amount1")
chamada antiga: assertEquals(2000, numberValue.intValue())
nova chamada: assertEquals(2000, numberValue.intValue(), "Era esperado valores iguais, mas  2000 é diferente de " + result3949 + " <numberValue.intValue()>")
chamada antiga: assertEquals(1000, numberValue1.intValue())
nova chamada: assertEquals(1000, numberValue1.intValue(), "Era esperado valores iguais, mas  1000 é diferente de " + result3950 + " <numberValue1.intValue()>")
chamada antiga: assertEquals("null", JSON.toJSONString(jsonNull))
nova chamada: assertEquals("null", JSON.toJSONString(jsonNull), "Era esperado valores iguais, mas  'null' é diferente de " + result3951 + " <JSON.toJSONString(jsonNull)>")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(json))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(json), "Era esperado valores iguais, mas  jsonStr é diferente de " + result3952 + " <JSON.toJSONString(json)>")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(json, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(json, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  jsonStr é diferente de " + result3953 + " <JSON.toJSONString(json, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, triple.getLeft())
nova chamada: assertEquals(101, triple.getLeft(), "Era esperado valores iguais, mas  101 é diferente de " + result3954 + " <triple.getLeft()>")
chamada antiga: assertEquals(102, triple.getMiddle())
nova chamada: assertEquals(102, triple.getMiddle(), "Era esperado valores iguais, mas  102 é diferente de " + result3955 + " <triple.getMiddle()>")
chamada antiga: assertEquals(103, triple.getRight())
nova chamada: assertEquals(103, triple.getRight(), "Era esperado valores iguais, mas  103 é diferente de " + result3956 + " <triple.getRight()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, triple.getLeft())
nova chamada: assertEquals(101, triple.getLeft(), "Era esperado valores iguais, mas  101 é diferente de " + result3957 + " <triple.getLeft()>")
chamada antiga: assertEquals(102, triple.getMiddle())
nova chamada: assertEquals(102, triple.getMiddle(), "Era esperado valores iguais, mas  102 é diferente de " + result3958 + " <triple.getMiddle()>")
chamada antiga: assertEquals(103, triple.getRight())
nova chamada: assertEquals(103, triple.getRight(), "Era esperado valores iguais, mas  103 é diferente de " + result3959 + " <triple.getRight()>")
chamada antiga: assertEquals(101, triple.getLeft())
nova chamada: assertEquals(101, triple.getLeft(), "Era esperado valores iguais, mas  101 é diferente de " + result3960 + " <triple.getLeft()>")
chamada antiga: assertEquals(102, triple.getMiddle())
nova chamada: assertEquals(102, triple.getMiddle(), "Era esperado valores iguais, mas  102 é diferente de " + result3961 + " <triple.getMiddle()>")
chamada antiga: assertEquals(103, triple.getRight())
nova chamada: assertEquals(103, triple.getRight(), "Era esperado valores iguais, mas  103 é diferente de " + result3962 + " <triple.getRight()>")
chamada antiga: assertEquals(101, triple.getLeft())
nova chamada: assertEquals(101, triple.getLeft(), "Era esperado valores iguais, mas  101 é diferente de " + result3963 + " <triple.getLeft()>")
chamada antiga: assertEquals(102, triple.getMiddle())
nova chamada: assertEquals(102, triple.getMiddle(), "Era esperado valores iguais, mas  102 é diferente de " + result3964 + " <triple.getMiddle()>")
chamada antiga: assertEquals(103, triple.getRight())
nova chamada: assertEquals(103, triple.getRight(), "Era esperado valores iguais, mas  103 é diferente de " + result3965 + " <triple.getRight()>")
chamada antiga: assertEquals("12:13:14", a.value.toString())
nova chamada: assertEquals("12:13:14", a.value.toString(), "Era esperado valores iguais, mas  '12:13:14' é diferente de " + result3966 + " <a.value.toString()>")
chamada antiga: assertEquals("12:13:14", a1.value.toString())
nova chamada: assertEquals("12:13:14", a1.value.toString(), "Era esperado valores iguais, mas  '12:13:14' é diferente de " + result3967 + " <a1.value.toString()>")
chamada antiga: assertEquals("{\"value\":\"12:13:14\"}", JSON.toJSONString(a))
nova chamada: assertEquals("{\"value\":\"12:13:14\"}", JSON.toJSONString(a), "Era esperado valores iguais, mas  '{\'value\':\'12:13:14\'}' é diferente de " + result3968 + " <JSON.toJSONString(a)>")
chamada antiga: assertEquals("{\"value\":null}", JSON.toJSONString(new A(), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"value\":null}", JSON.toJSONString(new A(), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + result3969 + " <JSON.toJSONString(new A(), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(a.value, a2.value)
nova chamada: assertEquals(a.value, a2.value, "Era esperado valores iguais, mas  a.value é diferente de " + " a2.value")
chamada antiga: assertEquals(b.value, b1.value)
nova chamada: assertEquals(b.value, b1.value, "Era esperado valores iguais, mas  b.value é diferente de " + " b1.value")
chamada antiga: assertEquals(b.value, b2.value)
nova chamada: assertEquals(b.value, b2.value, "Era esperado valores iguais, mas  b.value é diferente de " + " b2.value")
chamada antiga: assertEquals(b.value, b1.value)
nova chamada: assertEquals(b.value, b1.value, "Era esperado valores iguais, mas  b.value é diferente de " + " b1.value")
chamada antiga: assertEquals(now, ts1.toLocalDateTime())
nova chamada: assertEquals(now, ts1.toLocalDateTime(), "Era esperado valores iguais, mas  now é diferente de " + result3970 + " <ts1.toLocalDateTime()>")
chamada antiga: assertEquals(now.getNano(), ts1.toLocalDateTime().getNano())
nova chamada: assertEquals(now.getNano(), ts1.toLocalDateTime().getNano(), "Era esperado valores iguais, mas " + result3971 + " <now.getNano()> é diferente de " + result3972 + " <ts1.toLocalDateTime().getNano()>")
chamada antiga: assertEquals(now, ts2.toLocalDateTime())
nova chamada: assertEquals(now, ts2.toLocalDateTime(), "Era esperado valores iguais, mas  now é diferente de " + result3973 + " <ts2.toLocalDateTime()>")
chamada antiga: assertEquals(now.getNano(), ts2.toLocalDateTime().getNano())
nova chamada: assertEquals(now.getNano(), ts2.toLocalDateTime().getNano(), "Era esperado valores iguais, mas " + result3974 + " <now.getNano()> é diferente de " + result3975 + " <ts2.toLocalDateTime().getNano()>")
chamada antiga: assertEquals(b.value, b1.value)
nova chamada: assertEquals(b.value, b1.value, "Era esperado valores iguais, mas  b.value é diferente de " + " b1.value")
chamada antiga: assertEquals(ts, ts1)
nova chamada: assertEquals(ts, ts1, "Era esperado valores iguais, mas  ts é diferente de " + " ts1")
chamada antiga: assertEquals(ts.getNanos(), ts1.toLocalDateTime().getNano())
nova chamada: assertEquals(ts.getNanos(), ts1.toLocalDateTime().getNano(), "Era esperado valores iguais, mas " + result3976 + " <ts.getNanos()> é diferente de " + result3977 + " <ts1.toLocalDateTime().getNano()>")
chamada antiga: assertEquals(ts, ts2)
nova chamada: assertEquals(ts, ts2, "Era esperado valores iguais, mas  ts é diferente de " + " ts2")
chamada antiga: assertEquals(ts.getNanos(), ts2.toLocalDateTime().getNano())
nova chamada: assertEquals(ts.getNanos(), ts2.toLocalDateTime().getNano(), "Era esperado valores iguais, mas " + result3978 + " <ts.getNanos()> é diferente de " + result3979 + " <ts2.toLocalDateTime().getNano()>")
chamada antiga: assertEquals(2012, c.value.toLocalDateTime().getYear())
nova chamada: assertEquals(2012, c.value.toLocalDateTime().getYear(), "Era esperado valores iguais, mas  2012 é diferente de " + result3980 + " <c.value.toLocalDateTime().getYear()>")
chamada antiga: assertEquals(12, c.value.toLocalDateTime().getMonthValue())
nova chamada: assertEquals(12, c.value.toLocalDateTime().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result3981 + " <c.value.toLocalDateTime().getMonthValue()>")
chamada antiga: assertEquals(d.value.toString(), d2.value.toString())
nova chamada: assertEquals(d.value.toString(), d2.value.toString(), "Era esperado valores iguais, mas " + result3982 + " <d.value.toString()> é diferente de " + result3983 + " <d2.value.toString()>")
chamada antiga: assertEquals(2012, e.value.toLocalDate().getYear())
nova chamada: assertEquals(2012, e.value.toLocalDate().getYear(), "Era esperado valores iguais, mas  2012 é diferente de " + result3984 + " <e.value.toLocalDate().getYear()>")
chamada antiga: assertEquals(12, e.value.toLocalDate().getMonthValue())
nova chamada: assertEquals(12, e.value.toLocalDate().getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result3985 + " <e.value.toLocalDate().getMonthValue()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(object))
nova chamada: assertEquals("{}", JSON.toJSONString(object), "Era esperado valores iguais, mas  '{}' é diferente de " + result3986 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(JSONB.parse(JSONB.toBytes(object))))
nova chamada: assertEquals("{}", JSON.toJSONString(JSONB.parse(JSONB.toBytes(object))), "Era esperado valores iguais, mas  '{}' é diferente de " + result3987 + " <JSON.toJSONString(JSONB.parse(JSONB.toBytes(object)))>")
chamada antiga: assertEquals("[]", JSON.toJSONString(array))
nova chamada: assertEquals("[]", JSON.toJSONString(array), "Era esperado valores iguais, mas  '[]' é diferente de " + result3988 + " <JSON.toJSONString(array)>")
chamada antiga: assertEquals("[]", JSON.toJSONString(JSONB.parse(JSONB.toBytes(array))))
nova chamada: assertEquals("[]", JSON.toJSONString(JSONB.parse(JSONB.toBytes(array))), "Era esperado valores iguais, mas  '[]' é diferente de " + result3989 + " <JSON.toJSONString(JSONB.parse(JSONB.toBytes(array)))>")
chamada antiga: assertEquals(2, a.values.size())
nova chamada: assertEquals(2, a.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3990 + " <a.values.size()>")
chamada antiga: assertEquals(Integer.valueOf(1), a.values.get("a"))
nova chamada: assertEquals(Integer.valueOf(1), a.values.get("a"), "Era esperado valores iguais, mas " + result3991 + " <Integer.valueOf(1)> é diferente de " + result3992 + " <a.values.get('a')>")
chamada antiga: assertEquals(Integer.valueOf(2), a.values.get("b"))
nova chamada: assertEquals(Integer.valueOf(2), a.values.get("b"), "Era esperado valores iguais, mas " + result3993 + " <Integer.valueOf(2)> é diferente de " + result3994 + " <a.values.get('b')>")
chamada antiga: assertEquals(2, b.values.size())
nova chamada: assertEquals(2, b.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3995 + " <b.values.size()>")
chamada antiga: assertEquals("1", b.values.get("a"))
nova chamada: assertEquals("1", b.values.get("a"), "Era esperado valores iguais, mas  '1' é diferente de " + result3996 + " <b.values.get('a')>")
chamada antiga: assertEquals("2", b.values.get("b"))
nova chamada: assertEquals("2", b.values.get("b"), "Era esperado valores iguais, mas  '2' é diferente de " + result3997 + " <b.values.get('b')>")
chamada antiga: assertEquals(2, a.values.size())
nova chamada: assertEquals(2, a.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3998 + " <a.values.size()>")
chamada antiga: assertEquals(2, b.values.size())
nova chamada: assertEquals(2, b.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3999 + " <b.values.size()>")
chamada antiga: assertEquals("1", b.values.get(0))
nova chamada: assertEquals("1", b.values.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4000 + " <b.values.get(0)>")
chamada antiga: assertEquals("2", b.values.get(1))
nova chamada: assertEquals("2", b.values.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4001 + " <b.values.get(1)>")
chamada antiga: assertEquals(2, a.values.size())
nova chamada: assertEquals(2, a.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4002 + " <a.values.size()>")
chamada antiga: assertEquals(2, b.values.size())
nova chamada: assertEquals(2, b.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4003 + " <b.values.size()>")
chamada antiga: assertEquals("1", b.values.iterator().next())
nova chamada: assertEquals("1", b.values.iterator().next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4004 + " <b.values.iterator().next()>")
chamada antiga: assertEquals("{\"CId\":\"2\"}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"CId\":\"2\"}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'CId\':\'2\'}' é diferente de " + result4005 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"cId\":\"2\"}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"cId\":\"2\"}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'cId\':\'2\'}' é diferente de " + result4006 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("abc", JSON.parseObject("{\"uId\":\"abc\"}", C.class).uId)
nova chamada: assertEquals("abc", JSON.parseObject("{\"uId\":\"abc\"}", C.class).uId, "Era esperado valores iguais, mas  'abc' é diferente de " + " JSON.parseObject('{\'uId\':\'abc\'}', C.class).uId")
chamada antiga: assertEquals("abc", JSON.parseObject("{\"UId\":\"abc\"}", C.class).uId)
nova chamada: assertEquals("abc", JSON.parseObject("{\"UId\":\"abc\"}", C.class).uId, "Era esperado valores iguais, mas  'abc' é diferente de " + " JSON.parseObject('{\'UId\':\'abc\'}', C.class).uId")
chamada antiga: assertNotNull(object)
nova chamada: assertNotNull(object, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4007 + " <object.size()>")
chamada antiga: assertEquals("mask", object.get("name"))
nova chamada: assertEquals("mask", object.get("name"), "Era esperado valores iguais, mas  'mask' é diferente de " + result4008 + " <object.get('name')>")
chamada antiga: assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult))
nova chamada: assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult), "Era esperado valores iguais, mas  '{\'code\':{\'code\':\'00\',\'msgId\':\'SUCCESS\'}}' é diferente de " + result4009 + " <JSON.toJSONString(genericResult)>")
chamada antiga: assertEquals("{\"abc\":\"A\",\"int32\":10,\"int64\":100}", s)
nova chamada: assertEquals("{\"abc\":\"A\",\"int32\":10,\"int64\":100}", s, "Era esperado valores iguais, mas  '{\'abc\':\'A\',\'int32\':10,\'int64\':100}' é diferente de " + " s")
chamada antiga: assertEquals("abc", result)
nova chamada: assertEquals("abc", result, "Era esperado valores iguais, mas  'abc' é diferente de " + " result")
chamada antiga: assertEquals("{\"items\":[{\"data\":{\"0\":\"设置成功\"}}]}", JSON.toJSONString(data))
nova chamada: assertEquals("{\"items\":[{\"data\":{\"0\":\"设置成功\"}}]}", JSON.toJSONString(data), "Era esperado valores iguais, mas  '{\'items\':[{\'data\':{\'0\':\'设置成功\'}}]}' é diferente de " + result4010 + " <JSON.toJSONString(data)>")
chamada antiga: assertEquals("{\"items\":[{\"data\":[\"设置成功\"]}]}", JSON.toJSONString(data))
nova chamada: assertEquals("{\"items\":[{\"data\":[\"设置成功\"]}]}", JSON.toJSONString(data), "Era esperado valores iguais, mas  '{\'items\':[{\'data\':[\'设置成功\']}]}' é diferente de " + result4011 + " <JSON.toJSONString(data)>")
chamada antiga: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':{\'5\':\'设置成功\'}}' é diferente de " + result4012 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("{\"obj\":[null,null,null,null,null,\"设置成功\"]}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":[null,null,null,null,null,\"设置成功\"]}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':[null,null,null,null,null,\'设置成功\']}' é diferente de " + result4013 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("{\"obj\":{\"2\":{\"5\":\"设置成功\"}}}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":{\"2\":{\"5\":\"设置成功\"}}}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':{\'2\':{\'5\':\'设置成功\'}}}' é diferente de " + result4014 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("{\"obj\":[null,null,[null,null,null,null,null,\"设置成功\"]]}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":[null,null,[null,null,null,null,null,\"设置成功\"]]}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':[null,null,[null,null,null,null,null,\'设置成功\']]}' é diferente de " + result4015 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements, JSONWriter.Feature.ReferenceDetection))
nova chamada: assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements, JSONWriter.Feature.ReferenceDetection), "Era esperado valores iguais, mas  '[{\'children\':[{\'children\':[]},{\'children\':[]}]}]' é diferente de " + result4016 + " <JSONArray.toJSONString(elements, JSONWriter.Feature.ReferenceDetection)>")
chamada antiga: assertNotNull(str)
nova chamada: assertNotNull(str, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, object1.size())
nova chamada: assertEquals(2, object1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4017 + " <object1.size()>")
chamada antiga: assertEquals("[1,2,3]", JSONPath.extract(str, "$.age").toString())
nova chamada: assertEquals("[1,2,3]", JSONPath.extract(str, "$.age").toString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result4018 + " <JSONPath.extract(str, '$.age').toString()>")
chamada antiga: assertEquals("[\"John\"]", JSONPath.extract(str, "$.firstName", JSONPath.Feature.AlwaysReturnList).toString())
nova chamada: assertEquals("[\"John\"]", JSONPath.extract(str, "$.firstName", JSONPath.Feature.AlwaysReturnList).toString(), "Era esperado valores iguais, mas  '[\'John\']' é diferente de " + result4019 + " <JSONPath.extract(str, '$.firstName', JSONPath.Feature.AlwaysReturnList).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).eval(object).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", JSONPath.of("$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).eval(object).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result4020 + " <JSONPath.of('$.phoneNumbers.type', JSONPath.Feature.AlwaysReturnList).eval(object).toString()>")
chamada antiga: assertEquals("[\"iPhone\",\"home\"]", JSONPath.extract(str, "$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).toString())
nova chamada: assertEquals("[\"iPhone\",\"home\"]", JSONPath.extract(str, "$.phoneNumbers.type", JSONPath.Feature.AlwaysReturnList).toString(), "Era esperado valores iguais, mas  '[\'iPhone\',\'home\']' é diferente de " + result4021 + " <JSONPath.extract(str, '$.phoneNumbers.type', JSONPath.Feature.AlwaysReturnList).toString()>")
chamada antiga: assertEquals(expected, JSONPath.of(path, JSONPath.Feature.AlwaysReturnList).eval(object).toString())
nova chamada: assertEquals(expected, JSONPath.of(path, JSONPath.Feature.AlwaysReturnList).eval(object).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result4022 + " <JSONPath.of(path, JSONPath.Feature.AlwaysReturnList).eval(object).toString()>")
chamada antiga: assertEquals(expected, JSONPath.extract(str, path, JSONPath.Feature.AlwaysReturnList).toString())
nova chamada: assertEquals(expected, JSONPath.extract(str, path, JSONPath.Feature.AlwaysReturnList).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result4023 + " <JSONPath.extract(str, path, JSONPath.Feature.AlwaysReturnList).toString()>")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(bean.value, bean1.value)
nova chamada: assertArrayEquals(bean.value, bean1.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(bean.value, bean1.value)
nova chamada: assertArrayEquals(bean.value, bean1.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(bean.value, bean1.value)
nova chamada: assertArrayEquals(bean.value, bean1.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(bean.value, bean1.value)
nova chamada: assertArrayEquals(bean.value, bean1.value, "Era esperado arrays iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals(101, bean.type)
nova chamada: assertEquals(101, bean.type, "Era esperado valores iguais, mas  101 é diferente de " + " bean.type")
chamada antiga: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean1.class).type)
nova chamada: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean1.class).type, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject('{\'type\':101}', Bean1.class).type")
chamada antiga: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean2.class).type)
nova chamada: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean2.class).type, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject('{\'type\':101}', Bean2.class).type")
chamada antiga: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean3.class).type)
nova chamada: assertEquals(101, JSON.parseObject("{\"type\":101}", Bean3.class).type, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject('{\'type\':101}', Bean3.class).type")
chamada antiga: assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s1)
nova chamada: assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s1, "Era esperado valores iguais, mas  '{\'list\':[{\'prop1\':\'test prop 1\',\'prop2\':\'test prop 2\'}]}' é diferente de " + " s1")
chamada antiga: assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s2)
nova chamada: assertEquals("{\"list\":[{\"prop1\":\"test prop 1\",\"prop2\":\"test prop 2\"}]}", s2, "Era esperado valores iguais, mas  '{\'list\':[{\'prop1\':\'test prop 1\',\'prop2\':\'test prop 2\'}]}' é diferente de " + " s2")
chamada antiga: assertEquals("b", a.get("a"))
nova chamada: assertEquals("b", a.get("a"), "Era esperado valores iguais, mas  'b' é diferente de " + result4024 + " <a.get('a')>")
chamada antiga: assertEquals("b", b.get("a"))
nova chamada: assertEquals("b", b.get("a"), "Era esperado valores iguais, mas  'b' é diferente de " + result4025 + " <b.get('a')>")
chamada antiga: assertEquals("{\"id\":\"1038\"}", res1)
nova chamada: assertEquals("{\"id\":\"1038\"}", res1, "Era esperado valores iguais, mas  '{\'id\':\'1038\'}' é diferente de " + " res1")
chamada antiga: assertEquals("{\"id\":\"1039\"}", res2)
nova chamada: assertEquals("{\"id\":\"1039\"}", res2, "Era esperado valores iguais, mas  '{\'id\':\'1039\'}' é diferente de " + " res2")
chamada antiga: assertEquals("{\"code\":\"111\",\"order\":111}", JSON.toJSONString(sysTestData))
nova chamada: assertEquals("{\"code\":\"111\",\"order\":111}", JSON.toJSONString(sysTestData), "Era esperado valores iguais, mas  '{\'code\':\'111\',\'order\':111}' é diferente de " + result4026 + " <JSON.toJSONString(sysTestData)>")
chamada antiga: assertEquals("{\"PName\":\"test\"}", json)
nova chamada: assertEquals("{\"PName\":\"test\"}", json, "Era esperado valores iguais, mas  '{\'PName\':\'test\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.pName, bean1.pName)
nova chamada: assertEquals(bean.pName, bean1.pName, "Era esperado valores iguais, mas  bean.pName é diferente de " + " bean1.pName")
chamada antiga: assertEquals("{\"pName\":\"test\"}", json)
nova chamada: assertEquals("{\"pName\":\"test\"}", json, "Era esperado valores iguais, mas  '{\'pName\':\'test\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.pName, bean1.pName)
nova chamada: assertEquals(bean.pName, bean1.pName, "Era esperado valores iguais, mas  bean.pName é diferente de " + " bean1.pName")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4027 + " <object.size()>")
chamada antiga: assertEquals(1, object.get("abc"))
nova chamada: assertEquals(1, object.get("abc"), "Era esperado valores iguais, mas  1 é diferente de " + result4028 + " <object.get('abc')>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4029 + " <object.size()>")
chamada antiga: assertEquals(1, object.get("abc"))
nova chamada: assertEquals(1, object.get("abc"), "Era esperado valores iguais, mas  1 é diferente de " + result4030 + " <object.get('abc')>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4031 + " <object.size()>")
chamada antiga: assertEquals(1, object.get("abc"))
nova chamada: assertEquals(1, object.get("abc"), "Era esperado valores iguais, mas  1 é diferente de " + result4032 + " <object.get('abc')>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4033 + " <object.size()>")
chamada antiga: assertEquals(1, object.get("abc"))
nova chamada: assertEquals(1, object.get("abc"), "Era esperado valores iguais, mas  1 é diferente de " + result4034 + " <object.get('abc')>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4035 + " <object.size()>")
chamada antiga: assertEquals(1, object.get(0))
nova chamada: assertEquals(1, object.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result4036 + " <object.get(0)>")
chamada antiga: assertEquals(3, object.size())
nova chamada: assertEquals(3, object.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4037 + " <object.size()>")
chamada antiga: assertEquals(1, object.get(0))
nova chamada: assertEquals(1, object.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result4038 + " <object.get(0)>")
chamada antiga: assertEquals(2, object.get(1))
nova chamada: assertEquals(2, object.get(1), "Era esperado valores iguais, mas  2 é diferente de " + result4039 + " <object.get(1)>")
chamada antiga: assertEquals(3, object.get(2))
nova chamada: assertEquals(3, object.get(2), "Era esperado valores iguais, mas  3 é diferente de " + result4040 + " <object.get(2)>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4041 + " <object.size()>")
chamada antiga: assertEquals(1, object.stream().findFirst().get())
nova chamada: assertEquals(1, object.stream().findFirst().get(), "Era esperado valores iguais, mas  1 é diferente de " + result4042 + " <object.stream().findFirst().get()>")
chamada antiga: assertEquals(3, object.size())
nova chamada: assertEquals(3, object.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4043 + " <object.size()>")
chamada antiga: assertEquals("a", object.stream().findFirst().get())
nova chamada: assertEquals("a", object.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result4044 + " <object.stream().findFirst().get()>")
chamada antiga: assertNull(bean.getItems())
nova chamada: assertNull(bean.getItems(), "Era esperado nulo, mas " + result4045 + " <bean.getItems()> não é nulo")
chamada antiga: assertNull(bean.items)
nova chamada: assertNull(bean.items, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.getItems())
nova chamada: assertNull(bean.getItems(), "Era esperado nulo, mas " + result4046 + " <bean.getItems()> não é nulo")
chamada antiga: assertNull(bean.items)
nova chamada: assertNull(bean.items, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(bean.values.isEmpty())
nova chamada: assertTrue(bean.values.isEmpty(), "Era esperado verdadeiro, mas " + result4047 + " <bean.values.isEmpty()> é falso")
chamada antiga: assertTrue(bean.values.isEmpty())
nova chamada: assertTrue(bean.values.isEmpty(), "Era esperado verdadeiro, mas " + result4048 + " <bean.values.isEmpty()> é falso")
chamada antiga: assertNotNull(bean1)
nova chamada: assertNotNull(bean1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[eeee, ffff, eeee]", Arrays.toString(details))
nova chamada: assertEquals("[eeee, ffff, eeee]", Arrays.toString(details), "Era esperado valores iguais, mas  '[eeee, ffff, eeee]' é diferente de " + result4049 + " <Arrays.toString(details)>")
chamada antiga: assertEquals(new BigDecimal("6000"), bean.salaryStart)
nova chamada: assertEquals(new BigDecimal("6000"), bean.salaryStart, "Era esperado valores iguais, mas  new BigDecimal('6000') é diferente de " + " bean.salaryStart")
chamada antiga: assertEquals(new BigDecimal("9000"), bean.salaryEnd)
nova chamada: assertEquals(new BigDecimal("9000"), bean.salaryEnd, "Era esperado valores iguais, mas  new BigDecimal('9000') é diferente de " + " bean.salaryEnd")
chamada antiga: assertEquals(new BigDecimal("6000"), bean1.salaryStart)
nova chamada: assertEquals(new BigDecimal("6000"), bean1.salaryStart, "Era esperado valores iguais, mas  new BigDecimal('6000') é diferente de " + " bean1.salaryStart")
chamada antiga: assertEquals(new BigDecimal("9000"), bean1.salaryEnd)
nova chamada: assertEquals(new BigDecimal("9000"), bean1.salaryEnd, "Era esperado valores iguais, mas  new BigDecimal('9000') é diferente de " + " bean1.salaryEnd")
chamada antiga: assertEquals("{\"aaa\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb")))
nova chamada: assertEquals("{\"aaa\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb")), "Era esperado valores iguais, mas  '{\'aaa\':\'bbb\'}' é diferente de " + result4050 + " <JSON.toJSONString(Pair.of('aaa', 'bbb'))>")
chamada antiga: assertEquals("{\"left\":\"aaa\",\"right\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb"), JSONWriter.Feature.WritePairAsJavaBean))
nova chamada: assertEquals("{\"left\":\"aaa\",\"right\":\"bbb\"}", JSON.toJSONString(Pair.of("aaa", "bbb"), JSONWriter.Feature.WritePairAsJavaBean), "Era esperado valores iguais, mas  '{\'left\':\'aaa\',\'right\':\'bbb\'}' é diferente de " + result4051 + " <JSON.toJSONString(Pair.of('aaa', 'bbb'), JSONWriter.Feature.WritePairAsJavaBean)>")
chamada antiga: assertEquals("aaa", pair.getLeft())
nova chamada: assertEquals("aaa", pair.getLeft(), "Era esperado valores iguais, mas  'aaa' é diferente de " + result4052 + " <pair.getLeft()>")
chamada antiga: assertEquals("bbb", pair.getRight())
nova chamada: assertEquals("bbb", pair.getRight(), "Era esperado valores iguais, mas  'bbb' é diferente de " + result4053 + " <pair.getRight()>")
chamada antiga: assertEquals("aaa", pair.getLeft())
nova chamada: assertEquals("aaa", pair.getLeft(), "Era esperado valores iguais, mas  'aaa' é diferente de " + result4054 + " <pair.getLeft()>")
chamada antiga: assertEquals("bbb", pair.getRight())
nova chamada: assertEquals("bbb", pair.getRight(), "Era esperado valores iguais, mas  'bbb' é diferente de " + result4055 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4056 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4057 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4058 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4059 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4060 + " <pair.getRight()>")
chamada antiga: assertEquals(123, pair.getRight())
nova chamada: assertEquals(123, pair.getRight(), "Era esperado valores iguais, mas  123 é diferente de " + result4061 + " <pair.getRight()>")
chamada antiga: assertNotNull(resp)
nova chamada: assertNotNull(resp, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("GRASS_SQUARE_FLOWER", resp.roomType)
nova chamada: assertEquals("GRASS_SQUARE_FLOWER", resp.roomType, "Era esperado valores iguais, mas  'GRASS_SQUARE_FLOWER' é diferente de " + " resp.roomType")
chamada antiga: assertEquals("{\"age\":20,\"name\":\"张三\",\"userType\":1}", JSON.toJSONString(user))
nova chamada: assertEquals("{\"age\":20,\"name\":\"张三\",\"userType\":1}", JSON.toJSONString(user), "Era esperado valores iguais, mas  '{\'age\':20,\'name\':\'张三\',\'userType\':1}' é diferente de " + result4062 + " <JSON.toJSONString(user)>")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("123456")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("123456")), "Era esperado falso, mas " + result4063 + " <jsonSchema.isValid(JSON.parse('123456'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[]")), "Era esperado falso, mas " + result4064 + " <jsonSchema.isValid(JSON.parse('[]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")), "Era esperado falso, mas " + result4065 + " <jsonSchema.isValid(JSON.parse('{ \'key\': \'value\' }'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")), "Era esperado falso, mas " + result4066 + " <jsonSchema.isValid(JSON.parse('\'I am a string\''))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("123456")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("123456")), "Era esperado falso, mas " + result4067 + " <jsonSchema.isValid(JSON.parse('123456'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("[]")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("[]")), "Era esperado falso, mas " + result4068 + " <jsonSchema.isValid(JSON.parse('[]'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("{ \"key\": \"value\" }")), "Era esperado falso, mas " + result4069 + " <jsonSchema.isValid(JSON.parse('{ \'key\': \'value\' }'))> é verdadeiro ")
chamada antiga: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")))
nova chamada: assertFalse(jsonSchema.isValid(JSON.parse("\"I am a string\"")), "Era esperado falso, mas " + result4070 + " <jsonSchema.isValid(JSON.parse('\'I am a string\''))> é verdadeiro ")
chamada antiga: assertEquals("{\"0\":\"0\"}", s)
nova chamada: assertEquals("{\"0\":\"0\"}", s, "Era esperado valores iguais, mas  '{\'0\':\'0\'}' é diferente de " + " s")
chamada antiga: assertEquals("[\"0\"]", s)
nova chamada: assertEquals("[\"0\"]", s, "Era esperado valores iguais, mas  '[\'0\']' é diferente de " + " s")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.image)
nova chamada: assertNotNull(bean.image, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(70961, bean.image.getFileSize())
nova chamada: assertEquals(70961, bean.image.getFileSize(), "Era esperado valores iguais, mas  70961 é diferente de " + result4071 + " <bean.image.getFileSize()>")
chamada antiga: assertEquals("CtYBMzA2OTAyMDEwMjA0NjIzMDYwMDIwMTAwMDIwNGI3ZmU0MDZlMDIwMzBmNTliMTAyMDQ1YzliNTQ3NzAyMDQ1YzM3M2NiYzA0MjQ2NjM0MzgzNTM0NjEzNTY1MmQzNDYxMzQzODJkMzQzMTYxNjEyZDM5NjEzOTM2MmQ2MTM2NjQ2NDY0NjUzMDY2NjE2NjM1MzcwMjAxMDAwMjAzMDExNTQwMDQxMDUwZGU4ZTVhZThmZmU0ZjFkZjdhOTM4NDFmNzE5OTNhMDIwMTAyMDIwMTAwMDQwMBI4TkRkZk1UWTRPRGcxTVRBek1ETXlORFF6TWw4eE9UUTVOamN6TkRZMlh6RTFORGN4TWpNNU1ERT0aIGEwNGQwYWUyM2JlYzQ3NzQ5MjZhNWZjMjk0ZTEyNTkz", bean.image.getSdkFileId())
nova chamada: assertEquals("CtYBMzA2OTAyMDEwMjA0NjIzMDYwMDIwMTAwMDIwNGI3ZmU0MDZlMDIwMzBmNTliMTAyMDQ1YzliNTQ3NzAyMDQ1YzM3M2NiYzA0MjQ2NjM0MzgzNTM0NjEzNTY1MmQzNDYxMzQzODJkMzQzMTYxNjEyZDM5NjEzOTM2MmQ2MTM2NjQ2NDY0NjUzMDY2NjE2NjM1MzcwMjAxMDAwMjAzMDExNTQwMDQxMDUwZGU4ZTVhZThmZmU0ZjFkZjdhOTM4NDFmNzE5OTNhMDIwMTAyMDIwMTAwMDQwMBI4TkRkZk1UWTRPRGcxTVRBek1ETXlORFF6TWw4eE9UUTVOamN6TkRZMlh6RTFORGN4TWpNNU1ERT0aIGEwNGQwYWUyM2JlYzQ3NzQ5MjZhNWZjMjk0ZTEyNTkz", bean.image.getSdkFileId(), "Era esperado valores iguais, mas  'CtYBMzA2OTAyMDEwMjA0NjIzMDYwMDIwMTAwMDIwNGI3ZmU0MDZlMDIwMzBmNTliMTAyMDQ1YzliNTQ3NzAyMDQ1YzM3M2NiYzA0MjQ2NjM0MzgzNTM0NjEzNTY1MmQzNDYxMzQzODJkMzQzMTYxNjEyZDM5NjEzOTM2MmQ2MTM2NjQ2NDY0NjUzMDY2NjE2NjM1MzcwMjAxMDAwMjAzMDExNTQwMDQxMDUwZGU4ZTVhZThmZmU0ZjFkZjdhOTM4NDFmNzE5OTNhMDIwMTAyMDIwMTAwMDQwMBI4TkRkZk1UWTRPRGcxTVRBek1ETXlORFF6TWw4eE9UUTVOamN6TkRZMlh6RTFORGN4TWpNNU1ERT0aIGEwNGQwYWUyM2JlYzQ3NzQ5MjZhNWZjMjk0ZTEyNTkz' é diferente de " + result4072 + " <bean.image.getSdkFileId()>")
chamada antiga: assertEquals("50de8e5ae8ffe4f1df7a93841f71993a", bean.image.getMd5sum())
nova chamada: assertEquals("50de8e5ae8ffe4f1df7a93841f71993a", bean.image.getMd5sum(), "Era esperado valores iguais, mas  '50de8e5ae8ffe4f1df7a93841f71993a' é diferente de " + result4073 + " <bean.image.getMd5sum()>")
chamada antiga: assertNotNull(dto)
nova chamada: assertNotNull(dto, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, dto.checkedSkuList.get(0).cartType)
nova chamada: assertEquals(1, dto.checkedSkuList.get(0).cartType, "Era esperado valores iguais, mas  1 é diferente de " + " dto.checkedSkuList.get(0).cartType")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4074 + " <list.size()>")
chamada antiga: assertEquals(1, list.get(0))
nova chamada: assertEquals(1, list.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result4075 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4076 + " <list.size()>")
chamada antiga: assertEquals(1L, list.get(0))
nova chamada: assertEquals(1L, list.get(0), "Era esperado valores iguais, mas  1L é diferente de " + result4077 + " <list.get(0)>")
chamada antiga: assertEquals("{\"method0\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f0\",\"parameterTypes\":[]},\"method1\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f1\",\"parameterTypes\":[\"java.lang.String\"]},\"target\":{}}", string)
nova chamada: assertEquals("{\"method0\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f0\",\"parameterTypes\":[]},\"method1\":{\"declaringClass\":\"com.alibaba.fastjson2.issues.Issue597$Service\",\"name\":\"f1\",\"parameterTypes\":[\"java.lang.String\"]},\"target\":{}}", string, "Era esperado valores iguais, mas  '{\'method0\':{\'declaringClass\':\'com.alibaba.fastjson2.issues.Issue597$Service\',\'name\':\'f0\',\'parameterTypes\':[]},\'method1\':{\'declaringClass\':\'com.alibaba.fastjson2.issues.Issue597$Service\',\'name\':\'f1\',\'parameterTypes\':[\'java.lang.String\']},\'target\':{}}' é diferente de " + " string")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.method0, invoker1.method0)
nova chamada: assertEquals(invoker.method0, invoker1.method0, "Era esperado valores iguais, mas  invoker.method0 é diferente de " + " invoker1.method0")
chamada antiga: assertEquals(invoker.method1, invoker1.method1)
nova chamada: assertEquals(invoker.method1, invoker1.method1, "Era esperado valores iguais, mas  invoker.method1 é diferente de " + " invoker1.method1")
chamada antiga: assertEquals("[[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f0\",[]],[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f1\",[\"java.lang.String\"]],[]]", string)
nova chamada: assertEquals("[[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f0\",[]],[\"com.alibaba.fastjson2.issues.Issue597$Service\",\"f1\",[\"java.lang.String\"]],[]]", string, "Era esperado valores iguais, mas  '[[\'com.alibaba.fastjson2.issues.Issue597$Service\',\'f0\',[]],[\'com.alibaba.fastjson2.issues.Issue597$Service\',\'f1\',[\'java.lang.String\']],[]]' é diferente de " + " string")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.method0, invoker1.method0)
nova chamada: assertEquals(invoker.method0, invoker1.method0, "Era esperado valores iguais, mas  invoker.method0 é diferente de " + " invoker1.method0")
chamada antiga: assertEquals(invoker.method1, invoker1.method1)
nova chamada: assertEquals(invoker.method1, invoker1.method1, "Era esperado valores iguais, mas  invoker.method1 é diferente de " + " invoker1.method1")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.method0, invoker1.method0)
nova chamada: assertEquals(invoker.method0, invoker1.method0, "Era esperado valores iguais, mas  invoker.method0 é diferente de " + " invoker1.method0")
chamada antiga: assertEquals(invoker.method1, invoker1.method1)
nova chamada: assertEquals(invoker.method1, invoker1.method1, "Era esperado valores iguais, mas  invoker.method1 é diferente de " + " invoker1.method1")
chamada antiga: assertNotNull(invoker1)
nova chamada: assertNotNull(invoker1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(invoker.method0, invoker1.method0)
nova chamada: assertEquals(invoker.method0, invoker1.method0, "Era esperado valores iguais, mas  invoker.method0 é diferente de " + " invoker1.method0")
chamada antiga: assertEquals(invoker.method1, invoker1.method1)
nova chamada: assertEquals(invoker.method1, invoker1.method1, "Era esperado valores iguais, mas  invoker.method1 é diferente de " + " invoker1.method1")
chamada antiga: assertEquals("\"Object\"", JSON.toJSONString(JSONSchema.Type.Object, JSONWriter.Feature.WriteEnumsUsingName))
nova chamada: assertEquals("\"Object\"", JSON.toJSONString(JSONSchema.Type.Object, JSONWriter.Feature.WriteEnumsUsingName), "Era esperado valores iguais, mas  '\'Object\'' é diferente de " + result4078 + " <JSON.toJSONString(JSONSchema.Type.Object, JSONWriter.Feature.WriteEnumsUsingName)>")
chamada antiga: assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes)
nova chamada: assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes, "Era esperado arrays iguais, mas  wrapper.parameterTypes é diferente de " + " parse.parameterTypes")
chamada antiga: assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes)
nova chamada: assertArrayEquals(wrapper.parameterTypes, parse.parameterTypes, "Era esperado arrays iguais, mas  wrapper.parameterTypes é diferente de " + " parse.parameterTypes")
chamada antiga: assertTrue(object.containsKey(1))
nova chamada: assertTrue(object.containsKey(1), "Era esperado verdadeiro, mas " + result4079 + " <object.containsKey(1)> é falso")
chamada antiga: assertEquals(101, object.get(1))
nova chamada: assertEquals(101, object.get(1), "Era esperado valores iguais, mas  101 é diferente de " + result4080 + " <object.get(1)>")
chamada antiga: assertEquals("test", object.get("a"))
nova chamada: assertEquals("test", object.get("a"), "Era esperado valores iguais, mas  'test' é diferente de " + result4081 + " <object.get('a')>")
chamada antiga: assertEquals("\"Accepted\"", str)
nova chamada: assertEquals("\"Accepted\"", str, "Era esperado valores iguais, mas  '\'Accepted\'' é diferente de " + " str")
chamada antiga: assertEquals("{\"type\":\"Pending\"}", str)
nova chamada: assertEquals("{\"type\":\"Pending\"}", str, "Era esperado valores iguais, mas  '{\'type\':\'Pending\'}' é diferente de " + " str")
chamada antiga: assertEquals(2, queryCondition.pNum)
nova chamada: assertEquals(2, queryCondition.pNum, "Era esperado valores iguais, mas  2 é diferente de " + " queryCondition.pNum")
chamada antiga: assertEquals(2, queryCondition2.pNum)
nova chamada: assertEquals(2, queryCondition2.pNum, "Era esperado valores iguais, mas  2 é diferente de " + " queryCondition2.pNum")
chamada antiga: assertNull(JSON.parseObject("\"\"", byte[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", byte[].class), "Era esperado nulo, mas " + result4082 + " <JSON.parseObject('\'\'', byte[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", short[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", short[].class), "Era esperado nulo, mas " + result4083 + " <JSON.parseObject('\'\'', short[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", int[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", int[].class), "Era esperado nulo, mas " + result4084 + " <JSON.parseObject('\'\'', int[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", long[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", long[].class), "Era esperado nulo, mas " + result4085 + " <JSON.parseObject('\'\'', long[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", float[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", float[].class), "Era esperado nulo, mas " + result4086 + " <JSON.parseObject('\'\'', float[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", double[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", double[].class), "Era esperado nulo, mas " + result4087 + " <JSON.parseObject('\'\'', double[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", boolean[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", boolean[].class), "Era esperado nulo, mas " + result4088 + " <JSON.parseObject('\'\'', boolean[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Byte[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Byte[].class), "Era esperado nulo, mas " + result4089 + " <JSON.parseObject('\'\'', Byte[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Short[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Short[].class), "Era esperado nulo, mas " + result4090 + " <JSON.parseObject('\'\'', Short[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Integer[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Integer[].class), "Era esperado nulo, mas " + result4091 + " <JSON.parseObject('\'\'', Integer[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Long[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Long[].class), "Era esperado nulo, mas " + result4092 + " <JSON.parseObject('\'\'', Long[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Float[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Float[].class), "Era esperado nulo, mas " + result4093 + " <JSON.parseObject('\'\'', Float[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Double[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Double[].class), "Era esperado nulo, mas " + result4094 + " <JSON.parseObject('\'\'', Double[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Boolean[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Boolean[].class), "Era esperado nulo, mas " + result4095 + " <JSON.parseObject('\'\'', Boolean[].class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Object[].class))
nova chamada: assertNull(JSON.parseObject("\"\"", Object[].class), "Era esperado nulo, mas " + result4096 + " <JSON.parseObject('\'\'', Object[].class)> não é nulo")
chamada antiga: assertNull(a.type)
nova chamada: assertNull(a.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(a1.type)
nova chamada: assertNull(a1.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(a2.type)
nova chamada: assertNull(a2.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(a3.type)
nova chamada: assertNull(a3.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"UserId\":101}", str)
nova chamada: assertEquals("{\"UserId\":101}", str, "Era esperado valores iguais, mas  '{\'UserId\':101}' é diferente de " + " str")
chamada antiga: assertEquals(101, object.get("UserId"))
nova chamada: assertEquals(101, object.get("UserId"), "Era esperado valores iguais, mas  101 é diferente de " + result4097 + " <object.get('UserId')>")
chamada antiga: assertEquals("{\"user_name\":\"john\",\"user_age\":20,\"city_name\":\"beijing\"}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores)))
nova chamada: assertEquals("{\"user_name\":\"john\",\"user_age\":20,\"city_name\":\"beijing\"}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores)), "Era esperado valores iguais, mas  '{\'user_name\':\'john\',\'user_age\':20,\'city_name\':\'beijing\'}' é diferente de " + result4098 + " <JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores))>")
chamada antiga: assertEquals("{\n" + "\t\"user_name\":\"john\",\n" + "\t\"user_age\":20,\n" + "\t\"city_name\":\"beijing\"\n" + "}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores), JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals("{\n" + "\t\"user_name\":\"john\",\n" + "\t\"user_age\":20,\n" + "\t\"city_name\":\"beijing\"\n" + "}", JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores), JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas  '{\n' + '\t\'user_name\':\'john\',\n' + '\t\'user_age\':20,\n' + '\t\'city_name\':\'beijing\'\n' + '}' é diferente de " + result4099 + " <JSON.toJSONString(jsonObject, NameFilter.of(PropertyNamingStrategy.LowerCaseWithUnderScores), JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertEquals(20.7F, t.xSpeed)
nova chamada: assertEquals(20.7F, t.xSpeed, "Era esperado valores iguais, mas  20.7F é diferente de " + " t.xSpeed")
chamada antiga: assertEquals("bug", t.aName)
nova chamada: assertEquals("bug", t.aName, "Era esperado valores iguais, mas  'bug' é diferente de " + " t.aName")
chamada antiga: assertEquals("{\"value\":1001}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":1001}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':1001}' é diferente de " + result4100 + " <JSON.toJSONString(bean)>")
chamada antiga: assertNull(bean.testProperty)
nova chamada: assertNull(bean.testProperty, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.testProperty)
nova chamada: assertNull(bean.testProperty, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(testJson.getJSONObject("result"))
nova chamada: assertNotNull(testJson.getJSONObject("result"), "Era esperado não nulo, mas " + result4101 + " <testJson.getJSONObject('result')> é nulo")
chamada antiga: assertNull(testJson.getJSONObject("result2"))
nova chamada: assertNull(testJson.getJSONObject("result2"), "Era esperado nulo, mas " + result4102 + " <testJson.getJSONObject('result2')> não é nulo")
chamada antiga: assertEquals("{}", JSONObject.of("a", null).toString(JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{}", JSONObject.of("a", null).toString(JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{}' é diferente de " + result4103 + " <JSONObject.of('a', null).toString(JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals("HK GOLD香港黄金", dto.goodsName)
nova chamada: assertEquals("HK GOLD香港黄金", dto.goodsName, "Era esperado valores iguais, mas  'HK GOLD香港黄金' é diferente de " + " dto.goodsName")
chamada antiga: assertEquals("100.00", dto.goodsPrice.toString())
nova chamada: assertEquals("100.00", dto.goodsPrice.toString(), "Era esperado valores iguais, mas  '100.00' é diferente de " + result4104 + " <dto.goodsPrice.toString()>")
chamada antiga: assertEquals(map, map2)
nova chamada: assertEquals(map, map2, "Era esperado valores iguais, mas  map é diferente de " + " map2")
chamada antiga: assertEquals("[0.0,0.0,0.1,null,null,null]", JSON.toJSONString(a))
nova chamada: assertEquals("[0.0,0.0,0.1,null,null,null]", JSON.toJSONString(a), "Era esperado valores iguais, mas  '[0.0,0.0,0.1,null,null,null]' é diferente de " + result4105 + " <JSON.toJSONString(a)>")
chamada antiga: assertEquals("null", JSON.toJSONString(Float.NaN))
nova chamada: assertEquals("null", JSON.toJSONString(Float.NaN), "Era esperado valores iguais, mas  'null' é diferente de " + result4106 + " <JSON.toJSONString(Float.NaN)>")
chamada antiga: assertEquals("null", JSON.toJSONString(Float.POSITIVE_INFINITY))
nova chamada: assertEquals("null", JSON.toJSONString(Float.POSITIVE_INFINITY), "Era esperado valores iguais, mas  'null' é diferente de " + result4107 + " <JSON.toJSONString(Float.POSITIVE_INFINITY)>")
chamada antiga: assertEquals("null", JSON.toJSONString(Float.NEGATIVE_INFINITY))
nova chamada: assertEquals("null", JSON.toJSONString(Float.NEGATIVE_INFINITY), "Era esperado valores iguais, mas  'null' é diferente de " + result4108 + " <JSON.toJSONString(Float.NEGATIVE_INFINITY)>")
chamada antiga: assertEquals(10, JSONPath.of("$.x\\-limit").eval(object))
nova chamada: assertEquals(10, JSONPath.of("$.x\\-limit").eval(object), "Era esperado valores iguais, mas  10 é diferente de " + result4109 + " <JSONPath.of('$.x\\-limit').eval(object)>")
chamada antiga: assertEquals(10, JSONPath.of("$['x-limit']").eval(object))
nova chamada: assertEquals(10, JSONPath.of("$['x-limit']").eval(object), "Era esperado valores iguais, mas  10 é diferente de " + result4110 + " <JSONPath.of('$['x-limit']').eval(object)>")
chamada antiga: assertEquals("{\"0\":\"0\"}", JSON.toJSONString(map))
nova chamada: assertEquals("{\"0\":\"0\"}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{\'0\':\'0\'}' é diferente de " + result4111 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"0\":\"0\"}", new String(JSON.toJSONBytes(map)))
nova chamada: assertEquals("{\"0\":\"0\"}", new String(JSON.toJSONBytes(map)), "Era esperado valores iguais, mas  '{\'0\':\'0\'}' é diferente de " + " new String(JSON.toJSONBytes(map))")
chamada antiga: assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", JSON.toJSONString(t))
nova chamada: assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", JSON.toJSONString(t), "Era esperado valores iguais, mas  '{\'value\':\'0\',\'value1\':\'0.11\'}' é diferente de " + result4112 + " <JSON.toJSONString(t)>")
chamada antiga: assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", new String(JSON.toJSONBytes(t)))
nova chamada: assertEquals("{\"value\":\"0\",\"value1\":\"0.11\"}", new String(JSON.toJSONBytes(t)), "Era esperado valores iguais, mas  '{\'value\':\'0\',\'value1\':\'0.11\'}' é diferente de " + " new String(JSON.toJSONBytes(t))")
chamada antiga: assertEquals("{\"0\":\"0.11\"}", JSON.toJSONString(map))
nova chamada: assertEquals("{\"0\":\"0.11\"}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{\'0\':\'0.11\'}' é diferente de " + result4113 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"0\":\"0.11\"}", new String(JSON.toJSONBytes(map)))
nova chamada: assertEquals("{\"0\":\"0.11\"}", new String(JSON.toJSONBytes(map)), "Era esperado valores iguais, mas  '{\'0\':\'0.11\'}' é diferente de " + " new String(JSON.toJSONBytes(map))")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"1a\",\"2b\",\"3c\"]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains('1a'))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"1a\",\"2b\",\"3c\"]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains('1a'))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[\'1a\',\'2b\',\'3c\']}}}]' é diferente de " + result4114 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains('1a'))]').toString()>")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"4d\",\"5e\",6]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(6))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[\"4d\",\"5e\",6]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(6))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[\'4d\',\'5e\',6]}}}]' é diferente de " + result4115 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains(6))]').toString()>")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[7.1,8.2,9.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(9))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[7.1,8.2,9.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(9))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[7.1,8.2,9.0]}}}]' é diferente de " + result4116 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains(9))]').toString()>")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[10]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(10))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[10]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(10))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[10]}}}]' é diferente de " + result4117 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains(10))]').toString()>")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[11]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(11))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[11]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(11))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[11]}}}]' é diferente de " + result4118 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains(11))]').toString()>")
chamada antiga: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[12.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(12))]").toString())
nova chamada: assertEquals("[{\"transaction\":{\"message\":{\"accountKeys\":[12.0]}}}]", JSONPath.eval(object, "$.transactions[?(@.transaction.message.accountKeys.contains(12))]").toString(), "Era esperado valores iguais, mas  '[{\'transaction\':{\'message\':{\'accountKeys\':[12.0]}}}]' é diferente de " + result4119 + " <JSONPath.eval(object, '$.transactions[?(@.transaction.message.accountKeys.contains(12))]').toString()>")
chamada antiga: assertNull(JSON.parseObject("\"\"", LocalDateTime.class))
nova chamada: assertNull(JSON.parseObject("\"\"", LocalDateTime.class), "Era esperado nulo, mas " + result4120 + " <JSON.parseObject('\'\'', LocalDateTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", LocalDateTime.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", LocalDateTime.class), "Era esperado nulo, mas " + result4121 + " <JSON.parseObject('\'null\'', LocalDateTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", LocalDateTime.class))
nova chamada: assertNull(JSON.parseObject("null", LocalDateTime.class), "Era esperado nulo, mas " + result4122 + " <JSON.parseObject('null', LocalDateTime.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDateTime.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDateTime.class), "Era esperado nulo, mas " + result4123 + " <JSONObject.of('datetime', '').getObject('datetime', LocalDateTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", LocalDate.class))
nova chamada: assertNull(JSON.parseObject("\"\"", LocalDate.class), "Era esperado nulo, mas " + result4124 + " <JSON.parseObject('\'\'', LocalDate.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", LocalDate.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", LocalDate.class), "Era esperado nulo, mas " + result4125 + " <JSON.parseObject('\'null\'', LocalDate.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", LocalDate.class))
nova chamada: assertNull(JSON.parseObject("null", LocalDate.class), "Era esperado nulo, mas " + result4126 + " <JSON.parseObject('null', LocalDate.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDate.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalDate.class), "Era esperado nulo, mas " + result4127 + " <JSONObject.of('datetime', '').getObject('datetime', LocalDate.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", LocalTime.class))
nova chamada: assertNull(JSON.parseObject("\"\"", LocalTime.class), "Era esperado nulo, mas " + result4128 + " <JSON.parseObject('\'\'', LocalTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", LocalTime.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", LocalTime.class), "Era esperado nulo, mas " + result4129 + " <JSON.parseObject('\'null\'', LocalTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", LocalTime.class))
nova chamada: assertNull(JSON.parseObject("null", LocalTime.class), "Era esperado nulo, mas " + result4130 + " <JSON.parseObject('null', LocalTime.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalTime.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", LocalTime.class), "Era esperado nulo, mas " + result4131 + " <JSONObject.of('datetime', '').getObject('datetime', LocalTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", ZonedDateTime.class))
nova chamada: assertNull(JSON.parseObject("\"\"", ZonedDateTime.class), "Era esperado nulo, mas " + result4132 + " <JSON.parseObject('\'\'', ZonedDateTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", Instant.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", Instant.class), "Era esperado nulo, mas " + result4133 + " <JSON.parseObject('\'null\'', Instant.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", ZonedDateTime.class))
nova chamada: assertNull(JSON.parseObject("null", ZonedDateTime.class), "Era esperado nulo, mas " + result4134 + " <JSON.parseObject('null', ZonedDateTime.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", ZonedDateTime.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", ZonedDateTime.class), "Era esperado nulo, mas " + result4135 + " <JSONObject.of('datetime', '').getObject('datetime', ZonedDateTime.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Instant.class))
nova chamada: assertNull(JSON.parseObject("\"\"", Instant.class), "Era esperado nulo, mas " + result4136 + " <JSON.parseObject('\'\'', Instant.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", Instant.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", Instant.class), "Era esperado nulo, mas " + result4137 + " <JSON.parseObject('\'null\'', Instant.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Instant.class))
nova chamada: assertNull(JSON.parseObject("null", Instant.class), "Era esperado nulo, mas " + result4138 + " <JSON.parseObject('null', Instant.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", Instant.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", Instant.class), "Era esperado nulo, mas " + result4139 + " <JSONObject.of('datetime', '').getObject('datetime', Instant.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Date.class))
nova chamada: assertNull(JSON.parseObject("\"\"", Date.class), "Era esperado nulo, mas " + result4140 + " <JSON.parseObject('\'\'', Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", Date.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", Date.class), "Era esperado nulo, mas " + result4141 + " <JSON.parseObject('\'null\'', Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Date.class))
nova chamada: assertNull(JSON.parseObject("null", Date.class), "Era esperado nulo, mas " + result4142 + " <JSON.parseObject('null', Date.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", Date.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", Date.class), "Era esperado nulo, mas " + result4143 + " <JSONObject.of('datetime', '').getObject('datetime', Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", Calendar.class))
nova chamada: assertNull(JSON.parseObject("\"\"", Calendar.class), "Era esperado nulo, mas " + result4144 + " <JSON.parseObject('\'\'', Calendar.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", Calendar.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", Calendar.class), "Era esperado nulo, mas " + result4145 + " <JSON.parseObject('\'null\'', Calendar.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Calendar.class))
nova chamada: assertNull(JSON.parseObject("null", Calendar.class), "Era esperado nulo, mas " + result4146 + " <JSON.parseObject('null', Calendar.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", Calendar.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", Calendar.class), "Era esperado nulo, mas " + result4147 + " <JSONObject.of('datetime', '').getObject('datetime', Calendar.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", java.sql.Date.class))
nova chamada: assertNull(JSON.parseObject("\"\"", java.sql.Date.class), "Era esperado nulo, mas " + result4148 + " <JSON.parseObject('\'\'', java.sql.Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", java.sql.Date.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", java.sql.Date.class), "Era esperado nulo, mas " + result4149 + " <JSON.parseObject('\'null\'', java.sql.Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", java.sql.Date.class))
nova chamada: assertNull(JSON.parseObject("null", java.sql.Date.class), "Era esperado nulo, mas " + result4150 + " <JSON.parseObject('null', java.sql.Date.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Date.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Date.class), "Era esperado nulo, mas " + result4151 + " <JSONObject.of('datetime', '').getObject('datetime', java.sql.Date.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", java.sql.Timestamp.class))
nova chamada: assertNull(JSON.parseObject("\"\"", java.sql.Timestamp.class), "Era esperado nulo, mas " + result4152 + " <JSON.parseObject('\'\'', java.sql.Timestamp.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", java.sql.Timestamp.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", java.sql.Timestamp.class), "Era esperado nulo, mas " + result4153 + " <JSON.parseObject('\'null\'', java.sql.Timestamp.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", java.sql.Timestamp.class))
nova chamada: assertNull(JSON.parseObject("null", java.sql.Timestamp.class), "Era esperado nulo, mas " + result4154 + " <JSON.parseObject('null', java.sql.Timestamp.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Timestamp.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Timestamp.class), "Era esperado nulo, mas " + result4155 + " <JSONObject.of('datetime', '').getObject('datetime', java.sql.Timestamp.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"\"", java.sql.Time.class))
nova chamada: assertNull(JSON.parseObject("\"\"", java.sql.Time.class), "Era esperado nulo, mas " + result4156 + " <JSON.parseObject('\'\'', java.sql.Time.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("\"null\"", java.sql.Time.class))
nova chamada: assertNull(JSON.parseObject("\"null\"", java.sql.Time.class), "Era esperado nulo, mas " + result4157 + " <JSON.parseObject('\'null\'', java.sql.Time.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", java.sql.Time.class))
nova chamada: assertNull(JSON.parseObject("null", java.sql.Time.class), "Era esperado nulo, mas " + result4158 + " <JSON.parseObject('null', java.sql.Time.class)> não é nulo")
chamada antiga: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Time.class))
nova chamada: assertNull(JSONObject.of("datetime", "").getObject("datetime", java.sql.Time.class), "Era esperado nulo, mas " + result4159 + " <JSONObject.of('datetime', '').getObject('datetime', java.sql.Time.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":null}", Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":null}", Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean2.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean2.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":null}", Bean2.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":null}", Bean2.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean3.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean3.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":null}", Bean3.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":null}", Bean3.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean4.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"null\"}", Bean4.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":null}", Bean4.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":null}", Bean4.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(JSON_STR, json)
nova chamada: assertEquals(JSON_STR, json, "Era esperado valores iguais, mas  JSON_STR é diferente de " + " json")
chamada antiga: assertEquals(STR, JSON.parse(json))
nova chamada: assertEquals(STR, JSON.parse(json), "Era esperado valores iguais, mas  STR é diferente de " + result4160 + " <JSON.parse(json)>")
chamada antiga: assertEquals("{\"id\":0}", str)
nova chamada: assertEquals("{\"id\":0}", str, "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + " str")
chamada antiga: assertTrue(schema.isValid(JSONObject.of("longitude", 120.1552, "latitude", 30.2741)))
nova chamada: assertTrue(schema.isValid(JSONObject.of("longitude", 120.1552, "latitude", 30.2741)), "Era esperado verdadeiro, mas " + result4161 + " <schema.isValid(JSONObject.of('longitude', 120.1552, 'latitude', 30.2741))> é falso")
chamada antiga: assertTrue(schema.isValid(new Point(120.1552, 30.2741)))
nova chamada: assertTrue(schema.isValid(new Point(120.1552, 30.2741)), "Era esperado verdadeiro, mas " + result4162 + " <schema.isValid(new Point(120.1552, 30.2741))> é falso")
chamada antiga: assertEquals("1", bean.roleList.get(0))
nova chamada: assertEquals("1", bean.roleList.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4163 + " <bean.roleList.get(0)>")
chamada antiga: assertEquals("1", bean1.roleList.get(0))
nova chamada: assertEquals("1", bean1.roleList.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4164 + " <bean1.roleList.get(0)>")
chamada antiga: assertEquals(null, bean1.roleList.get(1))
nova chamada: assertEquals(null, bean1.roleList.get(1), "Era esperado valores iguais, mas  null é diferente de " + result4165 + " <bean1.roleList.get(1)>")
chamada antiga: assertEquals("1", bean2.roleList.get(0))
nova chamada: assertEquals("1", bean2.roleList.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4166 + " <bean2.roleList.get(0)>")
chamada antiga: assertEquals(null, bean2.roleList.get(1))
nova chamada: assertEquals(null, bean2.roleList.get(1), "Era esperado valores iguais, mas  null é diferente de " + result4167 + " <bean2.roleList.get(1)>")
chamada antiga: assertEquals("1", bean3.roleList.get(0))
nova chamada: assertEquals("1", bean3.roleList.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4168 + " <bean3.roleList.get(0)>")
chamada antiga: assertEquals("2", bean3.roleList.get(1))
nova chamada: assertEquals("2", bean3.roleList.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4169 + " <bean3.roleList.get(1)>")
chamada antiga: assertEquals(0, loginUser.menuSet.size())
nova chamada: assertEquals(0, loginUser.menuSet.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4170 + " <loginUser.menuSet.size()>")
chamada antiga: assertEquals(0, loginUser.authorities.size())
nova chamada: assertEquals(0, loginUser.authorities.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4171 + " <loginUser.authorities.size()>")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}", Bean.class).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}", Bean.class).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}", Bean.class).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}", Bean.class).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022/09/07T12:38:31\"}".getBytes(StandardCharsets.UTF_8), Bean.class).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean.class, JSONReader.Feature.SupportSmartMatch).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean.class, JSONReader.Feature.SupportSmartMatch).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean.class, JSONReader.Feature.SupportSmartMatch).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean.class, JSONReader.Feature.SupportSmartMatch).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean2.class, JSONReader.Feature.SupportSmartMatch).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}", Bean2.class, JSONReader.Feature.SupportSmartMatch).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean2.class, JSONReader.Feature.SupportSmartMatch).date)
nova chamada: assertNotNull(JSON.parseObject("{\"date\":\"2022-09-07T12:38:31.000+08:00\"}".getBytes(StandardCharsets.UTF_8), Bean2.class, JSONReader.Feature.SupportSmartMatch).date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("uu", user.userName)
nova chamada: assertEquals("uu", user.userName, "Era esperado valores iguais, mas  'uu' é diferente de " + " user.userName")
chamada antiga: assertEquals("1", server.id)
nova chamada: assertEquals("1", server.id, "Era esperado valores iguais, mas  '1' é diferente de " + " server.id")
chamada antiga: assertEquals("127.0.0.1", server.externalIp)
nova chamada: assertEquals("127.0.0.1", server.externalIp, "Era esperado valores iguais, mas  '127.0.0.1' é diferente de " + " server.externalIp")
chamada antiga: assertEquals(0D, server.totalMem)
nova chamada: assertEquals(0D, server.totalMem, "Era esperado valores iguais, mas  0D é diferente de " + " server.totalMem")
chamada antiga: assertEquals(0D, server.freeMem)
nova chamada: assertEquals(0D, server.freeMem, "Era esperado valores iguais, mas  0D é diferente de " + " server.freeMem")
chamada antiga: assertEquals("1", server1.id)
nova chamada: assertEquals("1", server1.id, "Era esperado valores iguais, mas  '1' é diferente de " + " server1.id")
chamada antiga: assertEquals("127.0.0.1", server1.externalIp)
nova chamada: assertEquals("127.0.0.1", server1.externalIp, "Era esperado valores iguais, mas  '127.0.0.1' é diferente de " + " server1.externalIp")
chamada antiga: assertEquals(15D, server1.totalMem)
nova chamada: assertEquals(15D, server1.totalMem, "Era esperado valores iguais, mas  15D é diferente de " + " server1.totalMem")
chamada antiga: assertEquals(3D, server1.freeMem)
nova chamada: assertEquals(3D, server1.freeMem, "Era esperado valores iguais, mas  3D é diferente de " + " server1.freeMem")
chamada antiga: assertEquals(0, server1.runningAnalytics.size())
nova chamada: assertEquals(0, server1.runningAnalytics.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4172 + " <server1.runningAnalytics.size()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4173 + " <result.size()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4174 + " <result.size()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4175 + " <result.size()>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4176 + " <result.size()>")
chamada antiga: assertEquals("{\"updateTime\":\"2022-09-16 03:24:41.438\"}", JSON.toJSONString(taskRecord))
nova chamada: assertEquals("{\"updateTime\":\"2022-09-16 03:24:41.438\"}", JSON.toJSONString(taskRecord), "Era esperado valores iguais, mas  '{\'updateTime\':\'2022-09-16 03:24:41.438\'}' é diferente de " + result4177 + " <JSON.toJSONString(taskRecord)>")
chamada antiga: assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime()))
nova chamada: assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime()), "Era esperado valores iguais, mas  '\'2022-09-16 03:24:41.438\'' é diferente de " + result4178 + " <JSON.toJSONString(taskRecord.getUpdateTime())>")
chamada antiga: assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime(), JSONWriter.Feature.OptimizedForAscii))
nova chamada: assertEquals("\"2022-09-16 03:24:41.438\"", JSON.toJSONString(taskRecord.getUpdateTime(), JSONWriter.Feature.OptimizedForAscii), "Era esperado valores iguais, mas  '\'2022-09-16 03:24:41.438\'' é diferente de " + result4179 + " <JSON.toJSONString(taskRecord.getUpdateTime(), JSONWriter.Feature.OptimizedForAscii)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(jsonNode))
nova chamada: assertEquals("{}", JSON.toJSONString(jsonNode), "Era esperado valores iguais, mas  '{}' é diferente de " + result4180 + " <JSON.toJSONString(jsonNode)>")
chamada antiga: assertEquals(2, strlistCache.size())
nova chamada: assertEquals(2, strlistCache.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4181 + " <strlistCache.size()>")
chamada antiga: assertEquals("11", strlistCache.get(0))
nova chamada: assertEquals("11", strlistCache.get(0), "Era esperado valores iguais, mas  '11' é diferente de " + result4182 + " <strlistCache.get(0)>")
chamada antiga: assertEquals("22", strlistCache.get(1))
nova chamada: assertEquals("22", strlistCache.get(1), "Era esperado valores iguais, mas  '22' é diferente de " + result4183 + " <strlistCache.get(1)>")
chamada antiga: assertEquals(responseBody, JSON.toJSONString(alipayAuthenticationMO))
nova chamada: assertEquals(responseBody, JSON.toJSONString(alipayAuthenticationMO), "Era esperado valores iguais, mas  responseBody é diferente de " + result4184 + " <JSON.toJSONString(alipayAuthenticationMO)>")
chamada antiga: assertEquals("{\"success\":true}", string)
nova chamada: assertEquals("{\"success\":true}", string, "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + " string")
chamada antiga: assertEquals(bean.isSuccess, bean1.isSuccess)
nova chamada: assertEquals(bean.isSuccess, bean1.isSuccess, "Era esperado valores iguais, mas  bean.isSuccess é diferente de " + " bean1.isSuccess")
chamada antiga: assertEquals("{\"success\":true}", string)
nova chamada: assertEquals("{\"success\":true}", string, "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + " string")
chamada antiga: assertEquals(bean.isSuccess, bean1.isSuccess)
nova chamada: assertEquals(bean.isSuccess, bean1.isSuccess, "Era esperado valores iguais, mas  bean.isSuccess é diferente de " + " bean1.isSuccess")
chamada antiga: assertEquals(bean.isSuccess, bean1.isSuccess)
nova chamada: assertEquals(bean.isSuccess, bean1.isSuccess, "Era esperado valores iguais, mas  bean.isSuccess é diferente de " + " bean1.isSuccess")
chamada antiga: assertEquals(str, "{\"id\":123}")
nova chamada: assertEquals(str, "{\"id\":123}", "Era esperado valores iguais, mas  str é diferente de " + " '{\'id\':123}'")
chamada antiga: assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28 00:00:00\'}' é diferente de " + result4185 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean, "yyyy-MM-dd"))
nova chamada: assertEquals("{\"date\":\"2017-06-28 00:00:00\"}", JSON.toJSONString(bean, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28 00:00:00\'}' é diferente de " + result4186 + " <JSON.toJSONString(bean, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28\'}' é diferente de " + result4187 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd"))
nova chamada: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28\'}' é diferente de " + result4188 + " <JSON.toJSONString(bean, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28\'}' é diferente de " + result4189 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '{\'date\':\'2017-06-28\'}' é diferente de " + result4190 + " <JSON.toJSONString(bean, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").extract(JSONReader.of("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))))
nova chamada: assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").extract(JSONReader.of("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))), "Era esperado valores iguais, mas  '[1]' é diferente de " + result4191 + " <JSON.toJSONString(JSONPath.of('$.v1[*].v2[*].v3.v4').extract(JSONReader.of('{\'v1\':[{\'v2\':[{\'v3\':{\'v4\':1}}]}]}')))>")
chamada antiga: assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").eval(JSON.parseObject("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))))
nova chamada: assertEquals("[1]", JSON.toJSONString(JSONPath.of("$.v1[*].v2[*].v3.v4").eval(JSON.parseObject("{\"v1\":[{\"v2\":[{\"v3\":{\"v4\":1}}]}]}"))), "Era esperado valores iguais, mas  '[1]' é diferente de " + result4192 + " <JSON.toJSONString(JSONPath.of('$.v1[*].v2[*].v3.v4').eval(JSON.parseObject('{\'v1\':[{\'v2\':[{\'v3\':{\'v4\':1}}]}]}')))>")
chamada antiga: assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue))
nova chamada: assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue), "Era esperado valores iguais, mas  '{\'msg\':\'\'}' é diferente de " + result4193 + " <JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue)>")
chamada antiga: assertEquals(123456789, startPack.qq)
nova chamada: assertEquals(123456789, startPack.qq, "Era esperado valores iguais, mas  123456789 é diferente de " + " startPack.qq")
chamada antiga: assertEquals("xxx", startPack.name)
nova chamada: assertEquals("xxx", startPack.name, "Era esperado valores iguais, mas  'xxx' é diferente de " + " startPack.name")
chamada antiga: assertNull(startPack.reg)
nova chamada: assertNull(startPack.reg, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(startPack.groups)
nova chamada: assertNull(startPack.groups, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(startPack.qqList)
nova chamada: assertNull(startPack.qqList, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.values)
nova chamada: assertNull(bean.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.values)
nova chamada: assertNull(bean.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.values)
nova chamada: assertNull(bean.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.values)
nova chamada: assertNull(bean.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(tdCreditVO)
nova chamada: assertNotNull(tdCreditVO, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(tdCreditVO.data)
nova chamada: assertNotNull(tdCreditVO.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("479", tdCreditVO.data.fScore)
nova chamada: assertEquals("479", tdCreditVO.data.fScore, "Era esperado valores iguais, mas  '479' é diferente de " + " tdCreditVO.data.fScore")
chamada antiga: assertEquals("{\"status\":\"12345678\"}", JSON.toJSONString(t))
nova chamada: assertEquals("{\"status\":\"12345678\"}", JSON.toJSONString(t), "Era esperado valores iguais, mas  '{\'status\':\'12345678\'}' é diferente de " + result4194 + " <JSON.toJSONString(t)>")
chamada antiga: assertTrue(writerCount > 0)
nova chamada: assertTrue(writerCount > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(12345678, v.getStatus())
nova chamada: assertEquals(12345678, v.getStatus(), "Era esperado valores iguais, mas  12345678 é diferente de " + result4195 + " <v.getStatus()>")
chamada antiga: assertTrue(readerCount > 0)
nova chamada: assertTrue(readerCount > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"status\":[\"12345678\"]}", JSON.toJSONString(t))
nova chamada: assertEquals("{\"status\":[\"12345678\"]}", JSON.toJSONString(t), "Era esperado valores iguais, mas  '{\'status\':[\'12345678\']}' é diferente de " + result4196 + " <JSON.toJSONString(t)>")
chamada antiga: assertTrue(writerCount > 0)
nova chamada: assertTrue(writerCount > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(12345678, v.getStatus()[0])
nova chamada: assertEquals(12345678, v.getStatus()[0], "Era esperado valores iguais, mas  12345678 é diferente de " + " v.getStatus()[0]")
chamada antiga: assertEquals(position.getClass(), position1.getClass())
nova chamada: assertEquals(position.getClass(), position1.getClass(), "Era esperado valores iguais, mas " + result4197 + " <position.getClass()> é diferente de " + result4198 + " <position1.getClass()>")
chamada antiga: assertEquals("{\"type\":\"大\"}", json)
nova chamada: assertEquals("{\"type\":\"大\"}", json, "Era esperado valores iguais, mas  '{\'type\':\'大\'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res)
nova chamada: assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'AGE_B1\':12,\'NAME_V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age_B1\':12,\'Name_V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age-B1\':12,\'Name-V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age.B1\':12,\'Name.V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age B1\':12,\'Name V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age_b1\':12,\'Name_v1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("ABCEE2306d883e85bb733a50f045925f", rsp.getAccessToken())
nova chamada: assertEquals("ABCEE2306d883e85bb733a50f045925f", rsp.getAccessToken(), "Era esperado valores iguais, mas  'ABCEE2306d883e85bb733a50f045925f' é diferente de " + result4199 + " <rsp.getAccessToken()>")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4200 + " <map.size()>")
chamada antiga: assertEquals(2, map3.size())
nova chamada: assertEquals(2, map3.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4201 + " <map3.size()>")
chamada antiga: assertFalse(schema.isValid(JSONObject.of("longitude", 220.1552, "latitude", 30.2741)))
nova chamada: assertFalse(schema.isValid(JSONObject.of("longitude", 220.1552, "latitude", 30.2741)), "Era esperado falso, mas " + result4202 + " <schema.isValid(JSONObject.of('longitude', 220.1552, 'latitude', 30.2741))> é verdadeiro ")
chamada antiga: assertFalse(schema.isValid(new Point(120.1552, 130.2741)))
nova chamada: assertFalse(schema.isValid(new Point(120.1552, 130.2741)), "Era esperado falso, mas " + result4203 + " <schema.isValid(new Point(120.1552, 130.2741))> é verdadeiro ")
chamada antiga: assertFalse(vr.isSuccess())
nova chamada: assertFalse(vr.isSuccess(), "Era esperado falso, mas " + result4204 + " <vr.isSuccess()> é verdadeiro ")
chamada antiga: assertNotNull(vr.getMessage())
nova chamada: assertNotNull(vr.getMessage(), "Era esperado não nulo, mas " + result4205 + " <vr.getMessage()> é nulo")
chamada antiga: assertNotNull(result2)
nova chamada: assertNotNull(result2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[\"21025318\",\"21025345\"]", result2.toJSONString())
nova chamada: assertEquals("[\"21025318\",\"21025345\"]", result2.toJSONString(), "Era esperado valores iguais, mas  '[\'21025318\',\'21025345\']' é diferente de " + result4206 + " <result2.toJSONString()>")
chamada antiga: assertEquals("[\"21025318\",\"21025345\"]", result3.toString())
nova chamada: assertEquals("[\"21025318\",\"21025345\"]", result3.toString(), "Era esperado valores iguais, mas  '[\'21025318\',\'21025345\']' é diferente de " + result4207 + " <result3.toString()>")
chamada antiga: assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'type\':\'Big\'}' é diferente de " + result4208 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
nova chamada: assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)), "Era esperado valores iguais, mas  '{\n' + '\t\'type\':\'Big\'\n' + '}' é diferente de " + result4209 + " <JSONB.toJSONString(JSONB.toBytes(bean))>")
chamada antiga: assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"type\":\"Big\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'type\':\'Big\'}' é diferente de " + result4210 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
nova chamada: assertEquals("{\n" + "\t\"type\":\"Big\"\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)), "Era esperado valores iguais, mas  '{\n' + '\t\'type\':\'Big\'\n' + '}' é diferente de " + result4211 + " <JSONB.toJSONString(JSONB.toBytes(bean))>")
chamada antiga: assertEquals(localTest1.getLocalDate(), localTest2.getLocalDate())
nova chamada: assertEquals(localTest1.getLocalDate(), localTest2.getLocalDate(), "Era esperado valores iguais, mas " + result4212 + " <localTest1.getLocalDate()> é diferente de " + result4213 + " <localTest2.getLocalDate()>")
chamada antiga: assertEquals(1, json.toJavaObject(Map.class).size())
nova chamada: assertEquals(1, json.toJavaObject(Map.class).size(), "Era esperado valores iguais, mas  1 é diferente de " + result4214 + " <json.toJavaObject(Map.class).size()>")
chamada antiga: assertEquals(1, JSON.toJavaObject(json, Map.class).size())
nova chamada: assertEquals(1, JSON.toJavaObject(json, Map.class).size(), "Era esperado valores iguais, mas  1 é diferente de " + result4215 + " <JSON.toJavaObject(json, Map.class).size()>")
chamada antiga: assertEquals(1, JSON.toJavaObject(str, Map.class).size())
nova chamada: assertEquals(1, JSON.toJavaObject(str, Map.class).size(), "Era esperado valores iguais, mas  1 é diferente de " + result4216 + " <JSON.toJavaObject(str, Map.class).size()>")
chamada antiga: assertEquals("[{\"item\":{\"name\":\"testtt\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"}]", result)
nova chamada: assertEquals("[{\"item\":{\"name\":\"testtt\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"},{\"item\":{\"$ref\":\"$[0].item\"},\"name\":\"test\"}]", result, "Era esperado valores iguais, mas  '[{\'item\':{\'name\':\'testtt\'},\'name\':\'test\'},{\'item\':{\'$ref\':\'$[0].item\'},\'name\':\'test\'},{\'item\':{\'$ref\':\'$[0].item\'},\'name\':\'test\'},{\'item\':{\'$ref\':\'$[0].item\'},\'name\':\'test\'}]' é diferente de " + " result")
chamada antiga: assertSame(list2.get(0).item, list2.get(1).item)
nova chamada: assertSame(list2.get(0).item, list2.get(1).item, "Era esperado objetos iguais, mas  list2.get(0).item é diferente de " + " list2.get(1).item")
chamada antiga: assertSame(list3.get(0).item, list3.get(1).item)
nova chamada: assertSame(list3.get(0).item, list3.get(1).item, "Era esperado objetos iguais, mas  list3.get(0).item é diferente de " + " list3.get(1).item")
chamada antiga: assertSame(list3.get(0).item, list3.get(1).item)
nova chamada: assertSame(list3.get(0).item, list3.get(1).item, "Era esperado objetos iguais, mas  list3.get(0).item é diferente de " + " list3.get(1).item")
chamada antiga: assertSame(list3.get(0).item, list3.get(1).item)
nova chamada: assertSame(list3.get(0).item, list3.get(1).item, "Era esperado objetos iguais, mas  list3.get(0).item é diferente de " + " list3.get(1).item")
chamada antiga: assertSame(list4.get(0).item, list4.get(1).item)
nova chamada: assertSame(list4.get(0).item, list4.get(1).item, "Era esperado objetos iguais, mas  list4.get(0).item é diferente de " + " list4.get(1).item")
chamada antiga: assertEquals("[\n" + "\t{\n" + "\t\t\"item\":{\n" + "\t\t\t\"name\":\"testtt\"\n" + "\t\t},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"$[0].item\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t}\n" + "]", result)
nova chamada: assertEquals("[\n" + "\t{\n" + "\t\t\"item\":{\n" + "\t\t\t\"name\":\"testtt\"\n" + "\t\t},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"$[0].item\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t},\n" + "\t{\n" + "\t\t\"item\":{\"$ref\":\"#-1\"},\n" + "\t\t\"name\":\"test\"\n" + "\t}\n" + "]", result, "Era esperado valores iguais, mas  '[\n' + '\t{\n' + '\t\t\'item\':{\n' + '\t\t\t\'name\':\'testtt\'\n' + '\t\t},\n' + '\t\t\'name\':\'test\'\n' + '\t},\n' + '\t{\n' + '\t\t\'item\':{\'$ref\':\'$[0].item\'},\n' + '\t\t\'name\':\'test\'\n' + '\t},\n' + '\t{\n' + '\t\t\'item\':{\'$ref\':\'#-1\'},\n' + '\t\t\'name\':\'test\'\n' + '\t},\n' + '\t{\n' + '\t\t\'item\':{\'$ref\':\'#-1\'},\n' + '\t\t\'name\':\'test\'\n' + '\t}\n' + ']' é diferente de " + " result")
chamada antiga: assertSame(list2.get(0).item, list2.get(1).item)
nova chamada: assertSame(list2.get(0).item, list2.get(1).item, "Era esperado objetos iguais, mas  list2.get(0).item é diferente de " + " list2.get(1).item")
chamada antiga: assertEquals("13fee3000dddc", thirdCommonResult.getTaskId())
nova chamada: assertEquals("13fee3000dddc", thirdCommonResult.getTaskId(), "Era esperado valores iguais, mas  '13fee3000dddc' é diferente de " + result4217 + " <thirdCommonResult.getTaskId()>")
chamada antiga: assertTrue(JSON.isValid(jsonArrayStr))
nova chamada: assertTrue(JSON.isValid(jsonArrayStr), "Era esperado verdadeiro, mas " + result4218 + " <JSON.isValid(jsonArrayStr)> é falso")
chamada antiga: assertTrue(JSON.isValid(jsonObjectStr))
nova chamada: assertTrue(JSON.isValid(jsonObjectStr), "Era esperado verdadeiro, mas " + result4219 + " <JSON.isValid(jsonObjectStr)> é falso")
chamada antiga: assertTrue(JSON.isValidArray(jsonArrayStr))
nova chamada: assertTrue(JSON.isValidArray(jsonArrayStr), "Era esperado verdadeiro, mas " + result4220 + " <JSON.isValidArray(jsonArrayStr)> é falso")
chamada antiga: assertTrue(JSON.isValid(value))
nova chamada: assertTrue(JSON.isValid(value), "Era esperado verdadeiro, mas " + result4221 + " <JSON.isValid(value)> é falso")
chamada antiga: assertEquals(text, JSON.toJSONString(user))
nova chamada: assertEquals(text, JSON.toJSONString(user), "Era esperado valores iguais, mas  text é diferente de " + result4222 + " <JSON.toJSONString(user)>")
chamada antiga: assertEquals(DD.class, user.c.getClass())
nova chamada: assertEquals(DD.class, user.c.getClass(), "Era esperado valores iguais, mas  DD.class é diferente de " + result4223 + " <user.c.getClass()>")
chamada antiga: assertEquals(DD.class, user.d.getClass())
nova chamada: assertEquals(DD.class, user.d.getClass(), "Era esperado valores iguais, mas  DD.class é diferente de " + result4224 + " <user.d.getClass()>")
chamada antiga: assertNotNull(dto)
nova chamada: assertNotNull(dto, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(dto1)
nova chamada: assertNotNull(dto1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertNotSame(objectWriter, objectWriter2)
nova chamada: assertNotSame(objectWriter, objectWriter2, "Era esperado objetos diferentes, mas  objectWriter é igual a " + " objectWriter2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertNotSame(objectWriter, objectWriter2)
nova chamada: assertNotSame(objectWriter, objectWriter2, "Era esperado objetos diferentes, mas  objectWriter é igual a " + " objectWriter2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertNotSame(objectWriter, objectWriter2)
nova chamada: assertNotSame(objectWriter, objectWriter2, "Era esperado objetos diferentes, mas  objectWriter é igual a " + " objectWriter2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertNotSame(objectWriter, objectWriter2)
nova chamada: assertNotSame(objectWriter, objectWriter2, "Era esperado objetos diferentes, mas  objectWriter é igual a " + " objectWriter2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertSame(objectWriter, objectWriter2)
nova chamada: assertSame(objectWriter, objectWriter2, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertNotSame(objectWriter, objectWriter2)
nova chamada: assertNotSame(objectWriter, objectWriter2, "Era esperado objetos diferentes, mas  objectWriter é igual a " + " objectWriter2")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertSame(objectWriter, objectWriter1)
nova chamada: assertSame(objectWriter, objectWriter1, "Era esperado objetos iguais, mas  objectWriter é diferente de " + " objectWriter1")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertSame(objectReader, objectReader1)
nova chamada: assertSame(objectReader, objectReader1, "Era esperado objetos iguais, mas  objectReader é diferente de " + " objectReader1")
chamada antiga: assertNotSame(objectReader, objectReader2)
nova chamada: assertNotSame(objectReader, objectReader2, "Era esperado objetos diferentes, mas  objectReader é igual a " + " objectReader2")
chamada antiga: assertEquals("{\"currency\":\"CNY\"}", str)
nova chamada: assertEquals("{\"currency\":\"CNY\"}", str, "Era esperado valores iguais, mas  '{\'currency\':\'CNY\'}' é diferente de " + " str")
chamada antiga: assertEquals(1654134285000L, bean.getDate1().getTime())
nova chamada: assertEquals(1654134285000L, bean.getDate1().getTime(), "Era esperado valores iguais, mas  1654134285000L é diferente de " + result4225 + " <bean.getDate1().getTime()>")
chamada antiga: assertEquals(1654134286000L, bean.getDate1().getTime())
nova chamada: assertEquals(1654134286000L, bean.getDate1().getTime(), "Era esperado valores iguais, mas  1654134286000L é diferente de " + result4226 + " <bean.getDate1().getTime()>")
chamada antiga: assertEquals(1654134286001L, bean.getDate1().getTime())
nova chamada: assertEquals(1654134286001L, bean.getDate1().getTime(), "Era esperado valores iguais, mas  1654134286001L é diferente de " + result4227 + " <bean.getDate1().getTime()>")
chamada antiga: assertEquals(1654134285000L, bean.getDate1().getTime())
nova chamada: assertEquals(1654134285000L, bean.getDate1().getTime(), "Era esperado valores iguais, mas  1654134285000L é diferente de " + result4228 + " <bean.getDate1().getTime()>")
chamada antiga: assertEquals(1654134286000L, bean.getDate1().getTime())
nova chamada: assertEquals(1654134286000L, bean.getDate1().getTime(), "Era esperado valores iguais, mas  1654134286000L é diferente de " + result4229 + " <bean.getDate1().getTime()>")
chamada antiga: assertEquals(1654134285000L, bean.date1.getTime())
nova chamada: assertEquals(1654134285000L, bean.date1.getTime(), "Era esperado valores iguais, mas  1654134285000L é diferente de " + result4230 + " <bean.date1.getTime()>")
chamada antiga: assertEquals(1654134286000L, bean.date1.getTime())
nova chamada: assertEquals(1654134286000L, bean.date1.getTime(), "Era esperado valores iguais, mas  1654134286000L é diferente de " + result4231 + " <bean.date1.getTime()>")
chamada antiga: assertEquals(1654134286001L, bean.date1.getTime())
nova chamada: assertEquals(1654134286001L, bean.date1.getTime(), "Era esperado valores iguais, mas  1654134286001L é diferente de " + result4232 + " <bean.date1.getTime()>")
chamada antiga: assertEquals("{\"dv\":{\"dv\":{\"dv\":{\"$ref\":\"$\"},\"name\":\"1\"},\"name\":\"2\"},\"name\":\"0\"}", json1)
nova chamada: assertEquals("{\"dv\":{\"dv\":{\"dv\":{\"$ref\":\"$\"},\"name\":\"1\"},\"name\":\"2\"},\"name\":\"0\"}", json1, "Era esperado valores iguais, mas  '{\'dv\':{\'dv\':{\'dv\':{\'$ref\':\'$\'},\'name\':\'1\'},\'name\':\'2\'},\'name\':\'0\'}' é diferente de " + " json1")
chamada antiga: assertEquals(0L, date.getTime())
nova chamada: assertEquals(0L, date.getTime(), "Era esperado valores iguais, mas  0L é diferente de " + result4233 + " <date.getTime()>")
chamada antiga: assertEquals(0, object.to(Bean.class).date.getTime())
nova chamada: assertEquals(0, object.to(Bean.class).date.getTime(), "Era esperado valores iguais, mas  0 é diferente de " + result4234 + " <object.to(Bean.class).date.getTime()>")
chamada antiga: assertSame(statusCode, statusCode1)
nova chamada: assertSame(statusCode, statusCode1, "Era esperado objetos iguais, mas  statusCode é diferente de " + " statusCode1")
chamada antiga: assertTrue(o instanceof String[])
nova chamada: assertTrue(o instanceof String[], "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertArrayEquals(split, (String[]) o)
nova chamada: assertArrayEquals(split, (String[]) o, "Era esperado arrays iguais, mas  split é diferente de " + " (String[]) o")
chamada antiga: assertArrayEquals(split, (String[]) o)
nova chamada: assertArrayEquals(split, (String[]) o, "Era esperado arrays iguais, mas  split é diferente de " + " (String[]) o")
chamada antiga: assertArrayEquals(split, (String[][]) o)
nova chamada: assertArrayEquals(split, (String[][]) o, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o")
chamada antiga: assertArrayEquals(split, (String[][]) o1)
nova chamada: assertArrayEquals(split, (String[][]) o1, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o1")
chamada antiga: assertArrayEquals(split, (String[][]) o)
nova chamada: assertArrayEquals(split, (String[][]) o, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o")
chamada antiga: assertArrayEquals(split, (String[][]) o1)
nova chamada: assertArrayEquals(split, (String[][]) o1, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o1")
chamada antiga: assertArrayEquals(split, (String[][]) o)
nova chamada: assertArrayEquals(split, (String[][]) o, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o")
chamada antiga: assertArrayEquals(split, (String[][]) o1)
nova chamada: assertArrayEquals(split, (String[][]) o1, "Era esperado arrays iguais, mas  split é diferente de " + " (String[][]) o1")
chamada antiga: assertEquals(new BigDecimal("1.111"), bean.data)
nova chamada: assertEquals(new BigDecimal("1.111"), bean.data, "Era esperado valores iguais, mas  new BigDecimal('1.111') é diferente de " + " bean.data")
chamada antiga: assertEquals(1, InstantReader.INSTANCE.count.get())
nova chamada: assertEquals(1, InstantReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result4235 + " <InstantReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(new BigDecimal("1.111"), bean.data)
nova chamada: assertEquals(new BigDecimal("1.111"), bean.data, "Era esperado valores iguais, mas  new BigDecimal('1.111') é diferente de " + " bean.data")
chamada antiga: assertEquals(1, InstantReader.INSTANCE.count.get())
nova chamada: assertEquals(1, InstantReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result4236 + " <InstantReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(new BigDecimal("1.111"), bean.data)
nova chamada: assertEquals(new BigDecimal("1.111"), bean.data, "Era esperado valores iguais, mas  new BigDecimal('1.111') é diferente de " + " bean.data")
chamada antiga: assertEquals(1, InstantReader.INSTANCE.count.get())
nova chamada: assertEquals(1, InstantReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result4237 + " <InstantReader.INSTANCE.count.get()>")
chamada antiga: Assertions.assertFalse(JSON.isValidArray(jsonObjectStr))
nova chamada: assertFalse(JSON.isValidArray(jsonObjectStr), "Era esperado falso, mas " + result4238 + " <JSON.isValidArray(jsonObjectStr)> é verdadeiro ")
chamada antiga: Assertions.assertFalse(JSON.isValidArray(value))
nova chamada: assertFalse(JSON.isValidArray(value), "Era esperado falso, mas " + result4239 + " <JSON.isValidArray(value)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean.class).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean.class).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"null\"}", Bean.class).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"null\"}", Bean.class).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}").to(Bean.class).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}").to(Bean.class).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"null\"}").to(Bean.class).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"null\"}").to(Bean.class).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertNull(JSON.parseObject("{\"value\":\"\"}", Bean1.class).value)
nova chamada: assertNull(JSON.parseObject("{\"value\":\"\"}", Bean1.class).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"value\":\"null\"}", Bean1.class).value)
nova chamada: assertNull(JSON.parseObject("{\"value\":\"null\"}", Bean1.class).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"value\":\"\"}").to(Bean1.class).value)
nova chamada: assertNull(JSON.parseObject("{\"value\":\"\"}").to(Bean1.class).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"value\":\"null\"}").to(Bean1.class).value)
nova chamada: assertNull(JSON.parseObject("{\"value\":\"null\"}").to(Bean1.class).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.issues.Issue752$Bean\",\n" + "\t\"param\":[\n" + "\t\t\"int\",\n" + "\t\t\"int\"\n" + "\t]\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.issues.Issue752$Bean\",\n" + "\t\"param\":[\n" + "\t\t\"int\",\n" + "\t\t\"int\"\n" + "\t]\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.issues.Issue752$Bean\',\n' + '\t\'param\':[\n' + '\t\t\'int\',\n' + '\t\t\'int\'\n' + '\t]\n' + '}' é diferente de " + result4240 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertArrayEquals(bean.param, bean1.param)
nova chamada: assertArrayEquals(bean.param, bean1.param, "Era esperado arrays iguais, mas  bean.param é diferente de " + " bean1.param")
chamada antiga: assertEquals(1662950912, JSON.parseObject(str).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(str).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4241 + " <JSON.parseObject(str).get('visit_time')>")
chamada antiga: assertEquals(1662950912, JSON.parseObject(chars).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(chars).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4242 + " <JSON.parseObject(chars).get('visit_time')>")
chamada antiga: assertEquals(1662950912, JSON.parseObject(bytes).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(bytes).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4243 + " <JSON.parseObject(bytes).get('visit_time')>")
chamada antiga: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4244 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8).get('visit_time')>")
chamada antiga: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4245 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get('visit_time')>")
chamada antiga: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("visit_time"))
nova chamada: assertEquals(1662950912, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get("visit_time"), "Era esperado valores iguais, mas  1662950912 é diferente de " + result4246 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.ISO_8859_1).get('visit_time')>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, bean.getData().size())
nova chamada: assertEquals(4, bean.getData().size(), "Era esperado valores iguais, mas  4 é diferente de " + result4247 + " <bean.getData().size()>")
chamada antiga: assertEquals("测试公司", test.getDeptName())
nova chamada: assertEquals("测试公司", test.getDeptName(), "Era esperado valores iguais, mas  '测试公司' é diferente de " + result4248 + " <test.getDeptName()>")
chamada antiga: assertEquals("测试公司", test.getDeptName())
nova chamada: assertEquals("测试公司", test.getDeptName(), "Era esperado valores iguais, mas  '测试公司' é diferente de " + result4249 + " <test.getDeptName()>")
chamada antiga: assertEquals("zhangsan", bean.name)
nova chamada: assertEquals("zhangsan", bean.name, "Era esperado valores iguais, mas  'zhangsan' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, bean.books.size())
nova chamada: assertEquals(1, bean.books.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4250 + " <bean.books.size()>")
chamada antiga: assertEquals("西游记", bean.books.get(0))
nova chamada: assertEquals("西游记", bean.books.get(0), "Era esperado valores iguais, mas  '西游记' é diferente de " + result4251 + " <bean.books.get(0)>")
chamada antiga: assertEquals("zhangsan", bean.name)
nova chamada: assertEquals("zhangsan", bean.name, "Era esperado valores iguais, mas  'zhangsan' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, bean.books.size())
nova chamada: assertEquals(1, bean.books.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4252 + " <bean.books.size()>")
chamada antiga: assertEquals("西游记", bean.books.get(0))
nova chamada: assertEquals("西游记", bean.books.get(0), "Era esperado valores iguais, mas  '西游记' é diferente de " + result4253 + " <bean.books.get(0)>")
chamada antiga: assertEquals("zhangsan", bean.name)
nova chamada: assertEquals("zhangsan", bean.name, "Era esperado valores iguais, mas  'zhangsan' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, bean.books.size())
nova chamada: assertEquals(1, bean.books.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4254 + " <bean.books.size()>")
chamada antiga: assertEquals("西游记", bean.books.get(0))
nova chamada: assertEquals("西游记", bean.books.get(0), "Era esperado valores iguais, mas  '西游记' é diferente de " + result4255 + " <bean.books.get(0)>")
chamada antiga: assertEquals("zhangsan", bean.name)
nova chamada: assertEquals("zhangsan", bean.name, "Era esperado valores iguais, mas  'zhangsan' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, bean.books.size())
nova chamada: assertEquals(1, bean.books.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4256 + " <bean.books.size()>")
chamada antiga: assertEquals("西游记", bean.books.get(0))
nova chamada: assertEquals("西游记", bean.books.get(0), "Era esperado valores iguais, mas  '西游记' é diferente de " + result4257 + " <bean.books.get(0)>")
chamada antiga: assertEquals("zhangsan", bean.name)
nova chamada: assertEquals("zhangsan", bean.name, "Era esperado valores iguais, mas  'zhangsan' é diferente de " + " bean.name")
chamada antiga: assertEquals(1, bean.books.size())
nova chamada: assertEquals(1, bean.books.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4258 + " <bean.books.size()>")
chamada antiga: assertEquals("西游记", bean.books.get(0))
nova chamada: assertEquals("西游记", bean.books.get(0), "Era esperado valores iguais, mas  '西游记' é diferente de " + result4259 + " <bean.books.get(0)>")
chamada antiga: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'date\':\'2022-06-15\'}' é diferente de " + result4260 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '{\'date\':\'2022-06-15\'}' é diferente de " + result4261 + " <JSON.toJSONString(bean, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "millis"))
nova chamada: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "millis"), "Era esperado valores iguais, mas  '{\'date\':\'2022-06-15\'}' é diferente de " + result4262 + " <JSON.toJSONString(bean, 'millis')>")
chamada antiga: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "iso8601"))
nova chamada: assertEquals("{\"date\":\"2022-06-15\"}", JSON.toJSONString(bean, "iso8601"), "Era esperado valores iguais, mas  '{\'date\':\'2022-06-15\'}' é diferente de " + result4263 + " <JSON.toJSONString(bean, 'iso8601')>")
chamada antiga: assertEquals("{\"guId\":\"abc\"}", str)
nova chamada: assertEquals("{\"guId\":\"abc\"}", str, "Era esperado valores iguais, mas  '{\'guId\':\'abc\'}' é diferente de " + " str")
chamada antiga: assertEquals("abc", dto2.getGuId())
nova chamada: assertEquals("abc", dto2.getGuId(), "Era esperado valores iguais, mas  'abc' é diferente de " + result4264 + " <dto2.getGuId()>")
chamada antiga: Assert.assertEquals(json1A, json1B)
nova chamada: assertEquals(json1A, json1B, "Era esperado valores iguais, mas  json1A é diferente de " + " json1B")
chamada antiga: Assert.assertEquals("{\"c\":\"c value\"}", json2)
nova chamada: assertEquals("{\"c\":\"c value\"}", json2, "Era esperado valores iguais, mas  '{\'c\':\'c value\'}' é diferente de " + " json2")
chamada antiga: Assert.assertEquals("{\"a\":null,\"b\":null,\"c\":\"c value\"}", json3)
nova chamada: assertEquals("{\"a\":null,\"b\":null,\"c\":\"c value\"}", json3, "Era esperado valores iguais, mas  '{\'a\':null,\'b\':null,\'c\':\'c value\'}' é diferente de " + " json3")
chamada antiga: Assert.assertEquals("{\"a\":null,\"b\":\"b value\",\"c\":null}", json4)
nova chamada: assertEquals("{\"a\":null,\"b\":\"b value\",\"c\":null}", json4, "Era esperado valores iguais, mas  '{\'a\':null,\'b\':\'b value\',\'c\':null}' é diferente de " + " json4")
chamada antiga: assertEquals("{\"tShirtType\":[\"Sweater Vest\"]}", JSON.toJSONString(clothing))
nova chamada: assertEquals("{\"tShirtType\":[\"Sweater Vest\"]}", JSON.toJSONString(clothing), "Era esperado valores iguais, mas  '{\'tShirtType\':[\'Sweater Vest\']}' é diferente de " + result4265 + " <JSON.toJSONString(clothing)>")
chamada antiga: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
nova chamada: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text, "Era esperado valores iguais, mas  '{\'remark\':\'支付订单\',\'value\':1}' é diferente de " + " text")
chamada antiga: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
nova chamada: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text, "Era esperado valores iguais, mas  '{\'remark\':\'支付订单\',\'value\':1}' é diferente de " + " text")
chamada antiga: assertEquals("{\"userid\":101}", str)
nova chamada: assertEquals("{\"userid\":101}", str, "Era esperado valores iguais, mas  '{\'userid\':101}' é diferente de " + " str")
chamada antiga: assertEquals(101, object.get("userid"))
nova chamada: assertEquals(101, object.get("userid"), "Era esperado valores iguais, mas  101 é diferente de " + result4266 + " <object.get('userid')>")
chamada antiga: assertEquals(1453528763137919643L, jsonPath.extract(parser))
nova chamada: assertEquals(1453528763137919643L, jsonPath.extract(parser), "Era esperado valores iguais, mas  1453528763137919643L é diferente de " + result4267 + " <jsonPath.extract(parser)>")
chamada antiga: assertNull(JSONPath.eval(object, "$[?(@.c =~ /a+/)]"))
nova chamada: assertNull(JSONPath.eval(object, "$[?(@.c =~ /a+/)]"), "Era esperado nulo, mas " + result4268 + " <JSONPath.eval(object, '$[?(@.c =~ /a+/)]')> não é nulo")
chamada antiga: assertEquals("ddd", JSONPath.eval(object, "$..c.min()"))
nova chamada: assertEquals("ddd", JSONPath.eval(object, "$..c.min()"), "Era esperado valores iguais, mas  'ddd' é diferente de " + result4269 + " <JSONPath.eval(object, '$..c.min()')>")
chamada antiga: assertEquals("[]", JSONPath.eval(object, "$..b[?(@.c == 12)]").toString())
nova chamada: assertEquals("[]", JSONPath.eval(object, "$..b[?(@.c == 12)]").toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4270 + " <JSONPath.eval(object, '$..b[?(@.c == 12)]').toString()>")
chamada antiga: assertEquals("[1,\"Hello world\",1,2,3,4,5,2,3,\"ddd\"]", JSONPath.eval(object, "$..*").toString())
nova chamada: assertEquals("[1,\"Hello world\",1,2,3,4,5,2,3,\"ddd\"]", JSONPath.eval(object, "$..*").toString(), "Era esperado valores iguais, mas  '[1,\'Hello world\',1,2,3,4,5,2,3,\'ddd\']' é diferente de " + result4271 + " <JSONPath.eval(object, '$..*').toString()>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4272 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4273 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4274 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4275 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4276 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4277 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4278 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4279 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4280 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4281 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4282 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4283 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4284 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4285 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4286 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4287 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4288 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4289 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, bean.items.size())
nova chamada: assertEquals(2, bean.items.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4290 + " <bean.items.size()>")
chamada antiga: assertNull(bean.items.get(0))
nova chamada: assertNull(bean.items.get(0), "Era esperado nulo, mas " + result4291 + " <bean.items.get(0)> não é nulo")
chamada antiga: assertNull(bean.items.get(1))
nova chamada: assertNull(bean.items.get(1), "Era esperado nulo, mas " + result4292 + " <bean.items.get(1)> não é nulo")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.values.size(), bean1.values.size())
nova chamada: assertEquals(bean.values.size(), bean1.values.size(), "Era esperado valores iguais, mas " + result4293 + " <bean.values.size()> é diferente de " + result4294 + " <bean1.values.size()>")
chamada antiga: assertEquals(1, bean.values.size())
nova chamada: assertEquals(1, bean.values.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4295 + " <bean.values.size()>")
chamada antiga: assertEquals(101, bean.values.get(0))
nova chamada: assertEquals(101, bean.values.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result4296 + " <bean.values.get(0)>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString())
nova chamada: assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString(), "Era esperado valores iguais, mas  '[\'30.40.202.23\',\'美国 俄亥俄州哥伦布市国防部网络信息中心\']' é diferente de " + result4297 + " <result.toString()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString())
nova chamada: assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString(), "Era esperado valores iguais, mas  '[\'30.40.202.23\',\'美国 俄亥俄州哥伦布市国防部网络信息中心\']' é diferente de " + result4298 + " <result.toString()>")
chamada antiga: assertNull(admin.password)
nova chamada: assertNull(admin.password, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(parse)
nova chamada: assertNotNull(parse, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(parse)
nova chamada: assertNotNull(parse, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"a\":180,\"b\":1}", JSON.toJSONString(u, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"a\":180,\"b\":1}", JSON.toJSONString(u, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'a\':180,\'b\':1}' é diferente de " + result4299 + " <JSON.toJSONString(u, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + result4300 + " <JSON.toJSONString(response, JSONWriter.Feature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{\"success\":true}", JSON.toJSONString(response))
nova chamada: assertEquals("{\"success\":true}", JSON.toJSONString(response), "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + result4301 + " <JSON.toJSONString(response)>")
chamada antiga: assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.BrowserCompatible))
nova chamada: assertEquals("{\"success\":true}", JSON.toJSONString(response, JSONWriter.Feature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + result4302 + " <JSON.toJSONString(response, JSONWriter.Feature.BrowserCompatible)>")
chamada antiga: assertEquals(2022, zdt.getYear())
nova chamada: assertEquals(2022, zdt.getYear(), "Era esperado valores iguais, mas  2022 é diferente de " + result4303 + " <zdt.getYear()>")
chamada antiga: assertEquals(12, zdt.getMonthValue())
nova chamada: assertEquals(12, zdt.getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result4304 + " <zdt.getMonthValue()>")
chamada antiga: assertEquals(7, zdt.getDayOfMonth())
nova chamada: assertEquals(7, zdt.getDayOfMonth(), "Era esperado valores iguais, mas  7 é diferente de " + result4305 + " <zdt.getDayOfMonth()>")
chamada antiga: assertEquals(10, zdt.getHour())
nova chamada: assertEquals(10, zdt.getHour(), "Era esperado valores iguais, mas  10 é diferente de " + result4306 + " <zdt.getHour()>")
chamada antiga: assertEquals(55, zdt.getMinute())
nova chamada: assertEquals(55, zdt.getMinute(), "Era esperado valores iguais, mas  55 é diferente de " + result4307 + " <zdt.getMinute()>")
chamada antiga: assertEquals(19, zdt.getSecond())
nova chamada: assertEquals(19, zdt.getSecond(), "Era esperado valores iguais, mas  19 é diferente de " + result4308 + " <zdt.getSecond()>")
chamada antiga: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
nova chamada: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)), "Era esperado valores iguais, mas  json é diferente de " + result4309 + " <JSON.toJSONString(bean, new JSONWriter.Context(fmt))>")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result4310 + " <bean.date.getTime()> é diferente de " + result4311 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result4312 + " <bean.date.getTime()> é diferente de " + result4313 + " <bean2.date.getTime()>")
chamada antiga: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
nova chamada: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)), "Era esperado valores iguais, mas  json é diferente de " + result4314 + " <JSON.toJSONString(bean, new JSONWriter.Context(fmt))>")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result4315 + " <bean.date.getTime()> é diferente de " + result4316 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result4317 + " <bean.date.getTime()> é diferente de " + result4318 + " <bean2.date.getTime()>")
chamada antiga: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)))
nova chamada: assertEquals(json, JSON.toJSONString(bean, new JSONWriter.Context(fmt)), "Era esperado valores iguais, mas  json é diferente de " + result4319 + " <JSON.toJSONString(bean, new JSONWriter.Context(fmt))>")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result4320 + " <bean.date.getTime()> é diferente de " + result4321 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result4322 + " <bean.date.getTime()> é diferente de " + result4323 + " <bean2.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean3.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean3.date.getTime(), "Era esperado valores iguais, mas " + result4324 + " <bean.date.getTime()> é diferente de " + result4325 + " <bean3.date.getTime()>")
chamada antiga: assertEquals(1, JSON.parseObject(str).get("type_number"))
nova chamada: assertEquals(1, JSON.parseObject(str).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4326 + " <JSON.parseObject(str).get('type_number')>")
chamada antiga: assertEquals(1, JSON.parseObject(bytes).get("type_number"))
nova chamada: assertEquals(1, JSON.parseObject(bytes).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4327 + " <JSON.parseObject(bytes).get('type_number')>")
chamada antiga: assertEquals(1, JSON.parseObject(bytes, 0, bytes.length).get("type_number"))
nova chamada: assertEquals(1, JSON.parseObject(bytes, 0, bytes.length).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4328 + " <JSON.parseObject(bytes, 0, bytes.length).get('type_number')>")
chamada antiga: assertEquals(1, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("type_number"))
nova chamada: assertEquals(1, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4329 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII).get('type_number')>")
chamada antiga: assertEquals(1, JSON.parseObject(utf16Bytes, 0, utf16Bytes.length, StandardCharsets.UTF_16).get("type_number"))
nova chamada: assertEquals(1, JSON.parseObject(utf16Bytes, 0, utf16Bytes.length, StandardCharsets.UTF_16).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4330 + " <JSON.parseObject(utf16Bytes, 0, utf16Bytes.length, StandardCharsets.UTF_16).get('type_number')>")
chamada antiga: assertEquals(1, jsonReaderStr.read(JSONObject.class).get("type_number"))
nova chamada: assertEquals(1, jsonReaderStr.read(JSONObject.class).get("type_number"), "Era esperado valores iguais, mas  1 é diferente de " + result4331 + " <jsonReaderStr.read(JSONObject.class).get('type_number')>")
chamada antiga: assertEquals("{\"b\":false,\"a\":false}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"b\":false,\"a\":false}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'b\':false,\'a\':false}' é diferente de " + result4332 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"height\":185.5,\"name\":\"MASON\",\"age\":20,\"adult\":true,\"weight\":145.5}", peopleStr)
nova chamada: assertEquals("{\"height\":185.5,\"name\":\"MASON\",\"age\":20,\"adult\":true,\"weight\":145.5}", peopleStr, "Era esperado valores iguais, mas  '{\'height\':185.5,\'name\':\'MASON\',\'age\':20,\'adult\':true,\'weight\':145.5}' é diferente de " + " peopleStr")
chamada antiga: assertNotNull(bean.data)
nova chamada: assertNotNull(bean.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("123465", test)
nova chamada: assertEquals("123465", test, "Era esperado valores iguais, mas  '123465' é diferente de " + " test")
chamada antiga: assertEquals(1, list1.size())
nova chamada: assertEquals(1, list1.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4333 + " <list1.size()>")
chamada antiga: assertEquals(list.get(0), list1.get(0))
nova chamada: assertEquals(list.get(0), list1.get(0), "Era esperado valores iguais, mas " + result4334 + " <list.get(0)> é diferente de " + result4335 + " <list1.get(0)>")
chamada antiga: assertNotNull(bean.data)
nova chamada: assertNotNull(bean.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("123465", test)
nova chamada: assertEquals("123465", test, "Era esperado valores iguais, mas  '123465' é diferente de " + " test")
chamada antiga: assertEquals(list.size(), list2.size())
nova chamada: assertEquals(list.size(), list2.size(), "Era esperado valores iguais, mas " + result4336 + " <list.size()> é diferente de " + result4337 + " <list2.size()>")
chamada antiga: assertEquals(list.get(0), list2.get(0))
nova chamada: assertEquals(list.get(0), list2.get(0), "Era esperado valores iguais, mas " + result4338 + " <list.get(0)> é diferente de " + result4339 + " <list2.get(0)>")
chamada antiga: assertEquals(list.get(1), list2.get(1))
nova chamada: assertEquals(list.get(1), list2.get(1), "Era esperado valores iguais, mas " + result4340 + " <list.get(1)> é diferente de " + result4341 + " <list2.get(1)>")
chamada antiga: assertEquals(list.size(), list2.size())
nova chamada: assertEquals(list.size(), list2.size(), "Era esperado valores iguais, mas " + result4342 + " <list.size()> é diferente de " + result4343 + " <list2.size()>")
chamada antiga: assertEquals(list.get(0), list2.get(0))
nova chamada: assertEquals(list.get(0), list2.get(0), "Era esperado valores iguais, mas " + result4344 + " <list.get(0)> é diferente de " + result4345 + " <list2.get(0)>")
chamada antiga: assertEquals(list.get(1), list2.get(1))
nova chamada: assertEquals(list.get(1), list2.get(1), "Era esperado valores iguais, mas " + result4346 + " <list.get(1)> é diferente de " + result4347 + " <list2.get(1)>")
chamada antiga: assertEquals(list.size(), list2.size())
nova chamada: assertEquals(list.size(), list2.size(), "Era esperado valores iguais, mas " + result4348 + " <list.size()> é diferente de " + result4349 + " <list2.size()>")
chamada antiga: assertEquals(list.get(0), list2.get(0))
nova chamada: assertEquals(list.get(0), list2.get(0), "Era esperado valores iguais, mas " + result4350 + " <list.get(0)> é diferente de " + result4351 + " <list2.get(0)>")
chamada antiga: assertEquals(list.get(1), list2.get(1))
nova chamada: assertEquals(list.get(1), list2.get(1), "Era esperado valores iguais, mas " + result4352 + " <list.get(1)> é diferente de " + result4353 + " <list2.get(1)>")
chamada antiga: assertEquals(str, Character.toString(a))
nova chamada: assertEquals(str, Character.toString(a), "Era esperado valores iguais, mas  str é diferente de " + result4354 + " <Character.toString(a)>")
chamada antiga: assertEquals(a, b)
nova chamada: assertEquals(a, b, "Era esperado valores iguais, mas  a é diferente de " + " b")
chamada antiga: assertEquals(rt1, rt2)
nova chamada: assertEquals(rt1, rt2, "Era esperado valores iguais, mas  rt1 é diferente de " + " rt2")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1"), "Era esperado verdadeiro, mas " + result4355 + " <JSONPath.contains(jsonObject, '$.a1')> é falso")
chamada antiga: assertFalse(JSONPath.contains(jsonObject, "$.a2"))
nova chamada: assertFalse(JSONPath.contains(jsonObject, "$.a2"), "Era esperado falso, mas " + result4356 + " <JSONPath.contains(jsonObject, '$.a2')> é verdadeiro ")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1"), "Era esperado verdadeiro, mas " + result4357 + " <JSONPath.contains(jsonObject, '$.a1')> é falso")
chamada antiga: assertFalse(JSONPath.contains(jsonObject, "$.a2"))
nova chamada: assertFalse(JSONPath.contains(jsonObject, "$.a2"), "Era esperado falso, mas " + result4358 + " <JSONPath.contains(jsonObject, '$.a2')> é verdadeiro ")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"), "Era esperado verdadeiro, mas " + result4359 + " <JSONPath.contains(jsonObject, '$.a1.a2')> é falso")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1"), "Era esperado verdadeiro, mas " + result4360 + " <JSONPath.contains(jsonObject, '$.a1')> é falso")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2"), "Era esperado verdadeiro, mas " + result4361 + " <JSONPath.contains(jsonObject, '$.a1.a2')> é falso")
chamada antiga: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2.a3"))
nova chamada: assertTrue(JSONPath.contains(jsonObject, "$.a1.a2.a3"), "Era esperado verdadeiro, mas " + result4362 + " <JSONPath.contains(jsonObject, '$.a1.a2.a3')> é falso")
chamada antiga: assertNull(enterpriseCloudServiceVO.cloudStyle)
nova chamada: assertNull(enterpriseCloudServiceVO.cloudStyle, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(enterpriseCloudServiceVO.cloudStyle)
nova chamada: assertNull(enterpriseCloudServiceVO.cloudStyle, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"age\":99,\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty)
nova chamada: assertEquals("{\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"age\":99,\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty, "Era esperado valores iguais, mas  '{\n' + '\t\'passengerId\':\'220802200005217748\',\n' + '\t\'firstName\':\'Hong\',\n' + '\t\'lastName\':\'Test\',\n' + '\t\'age\':99,\n' + '\t\'telephone\':\'13104362222\'\n' + '}' é diferente de " + " pretty")
chamada antiga: assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty)
nova chamada: assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", pretty, "Era esperado valores iguais, mas  '{\n' + '\t\'age\':99,\n' + '\t\'firstName\':\'Hong\',\n' + '\t\'lastName\':\'Test\',\n' + '\t\'passengerId\':\'220802200005217748\',\n' + '\t\'telephone\':\'13104362222\'\n' + '}' é diferente de " + " pretty")
chamada antiga: assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", new String(prettyBytes))
nova chamada: assertEquals("{\n" + "\t\"age\":99,\n" + "\t\"firstName\":\"Hong\",\n" + "\t\"lastName\":\"Test\",\n" + "\t\"passengerId\":\"220802200005217748\",\n" + "\t\"telephone\":\"13104362222\"\n" + "}", new String(prettyBytes), "Era esperado valores iguais, mas  '{\n' + '\t\'age\':99,\n' + '\t\'firstName\':\'Hong\',\n' + '\t\'lastName\':\'Test\',\n' + '\t\'passengerId\':\'220802200005217748\',\n' + '\t\'telephone\':\'13104362222\'\n' + '}' é diferente de " + " new String(prettyBytes)")
chamada antiga: assertEquals("lisi", p.name)
nova chamada: assertEquals("lisi", p.name, "Era esperado valores iguais, mas  'lisi' é diferente de " + " p.name")
chamada antiga: assertEquals(12, p.extra.get("age"))
nova chamada: assertEquals(12, p.extra.get("age"), "Era esperado valores iguais, mas  12 é diferente de " + result4363 + " <p.extra.get('age')>")
chamada antiga: assertEquals(13, p.extra.get("age"))
nova chamada: assertEquals(13, p.extra.get("age"), "Era esperado valores iguais, mas  13 é diferente de " + result4364 + " <p.extra.get('age')>")
chamada antiga: assertEquals("lisi", p.name)
nova chamada: assertEquals("lisi", p.name, "Era esperado valores iguais, mas  'lisi' é diferente de " + " p.name")
chamada antiga: assertEquals(12, p.extra.get("age"))
nova chamada: assertEquals(12, p.extra.get("age"), "Era esperado valores iguais, mas  12 é diferente de " + result4365 + " <p.extra.get('age')>")
chamada antiga: assertEquals(13, p.extra.get("age"))
nova chamada: assertEquals(13, p.extra.get("age"), "Era esperado valores iguais, mas  13 é diferente de " + result4366 + " <p.extra.get('age')>")
chamada antiga: assertEquals("200", responseMO.Status)
nova chamada: assertEquals("200", responseMO.Status, "Era esperado valores iguais, mas  '200' é diferente de " + " responseMO.Status")
chamada antiga: assertEquals("{\"1\":2,\"3\":4}", object.toString())
nova chamada: assertEquals("{\"1\":2,\"3\":4}", object.toString(), "Era esperado valores iguais, mas  '{\'1\':2,\'3\':4}' é diferente de " + result4367 + " <object.toString()>")
chamada antiga: assertEquals("{\"1\":2,\"2\":null,\"3\":4}", object.toString(JSONWriter.Feature.WriteMapNullValue))
nova chamada: assertEquals("{\"1\":2,\"2\":null,\"3\":4}", object.toString(JSONWriter.Feature.WriteMapNullValue), "Era esperado valores iguais, mas  '{\'1\':2,\'2\':null,\'3\':4}' é diferente de " + result4368 + " <object.toString(JSONWriter.Feature.WriteMapNullValue)>")
chamada antiga: assertEquals("\"2022-06-29 13:12:30.452\"", str)
nova chamada: assertEquals("\"2022-06-29 13:12:30.452\"", str, "Era esperado valores iguais, mas  '\'2022-06-29 13:12:30.452\'' é diferente de " + " str")
chamada antiga: assertEquals("\"2022-06-29 13:12:30.452\"", str)
nova chamada: assertEquals("\"2022-06-29 13:12:30.452\"", str, "Era esperado valores iguais, mas  '\'2022-06-29 13:12:30.452\'' é diferente de " + " str")
chamada antiga: assertEquals("\"2022-06-29 13:12:30.452\"", str)
nova chamada: assertEquals("\"2022-06-29 13:12:30.452\"", str, "Era esperado valores iguais, mas  '\'2022-06-29 13:12:30.452\'' é diferente de " + " str")
chamada antiga: assertEquals("{}", json)
nova chamada: assertEquals("{}", json, "Era esperado valores iguais, mas  '{}' é diferente de " + " json")
chamada antiga: assertEquals(1, jsonObject.size())
nova chamada: assertEquals(1, jsonObject.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4369 + " <jsonObject.size()>")
chamada antiga: assertEquals(101, jsonObject.get("item_id"))
nova chamada: assertEquals(101, jsonObject.get("item_id"), "Era esperado valores iguais, mas  101 é diferente de " + result4370 + " <jsonObject.get('item_id')>")
chamada antiga: assertEquals(1, jsonObject.size())
nova chamada: assertEquals(1, jsonObject.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4371 + " <jsonObject.size()>")
chamada antiga: assertEquals(101, jsonObject.get("item_id"))
nova chamada: assertEquals(101, jsonObject.get("item_id"), "Era esperado valores iguais, mas  101 é diferente de " + result4372 + " <jsonObject.get('item_id')>")
chamada antiga: assertEquals(1, jsonObject.size())
nova chamada: assertEquals(1, jsonObject.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4373 + " <jsonObject.size()>")
chamada antiga: assertEquals(101, jsonObject.get("itemId"))
nova chamada: assertEquals(101, jsonObject.get("itemId"), "Era esperado valores iguais, mas  101 é diferente de " + result4374 + " <jsonObject.get('itemId')>")
chamada antiga: assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"))
nova chamada: assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"), "Era esperado valores iguais, mas  101 é diferente de " + result4375 + " <jsonObject.getJSONArray('items').getJSONObject(0).get('itemId')>")
chamada antiga: assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"))
nova chamada: assertEquals(101, jsonObject.getJSONArray("items").getJSONObject(0).get("itemId"), "Era esperado valores iguais, mas  101 é diferente de " + result4376 + " <jsonObject.getJSONArray('items').getJSONObject(0).get('itemId')>")
chamada antiga: assertEquals(102, jsonObject.getJSONArray("items").getJSONObject(0).get("item_id"))
nova chamada: assertEquals(102, jsonObject.getJSONArray("items").getJSONObject(0).get("item_id"), "Era esperado valores iguais, mas  102 é diferente de " + result4377 + " <jsonObject.getJSONArray('items').getJSONObject(0).get('item_id')>")
chamada antiga: assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("item_id"))
nova chamada: assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("item_id"), "Era esperado valores iguais, mas  102 é diferente de " + result4378 + " <jsonObject.getJSONObject('root').getJSONArray('items').getJSONArray(0).getJSONObject(0).get('item_id')>")
chamada antiga: assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("itemId"))
nova chamada: assertEquals(102, jsonObject.getJSONObject("root").getJSONArray("items").getJSONArray(0).getJSONObject(0).get("itemId"), "Era esperado valores iguais, mas  102 é diferente de " + result4379 + " <jsonObject.getJSONObject('root').getJSONArray('items').getJSONArray(0).getJSONObject(0).get('itemId')>")
chamada antiga: assertEquals("{\"age\":101,\"name\":\"DataWorks\",\"score\":102.0,\"tags\":[\"abc\"]}", str)
nova chamada: assertEquals("{\"age\":101,\"name\":\"DataWorks\",\"score\":102.0,\"tags\":[\"abc\"]}", str, "Era esperado valores iguais, mas  '{\'age\':101,\'name\':\'DataWorks\',\'score\':102.0,\'tags\':[\'abc\']}' é diferente de " + " str")
chamada antiga: assertEquals(bean.age, bean1.age)
nova chamada: assertEquals(bean.age, bean1.age, "Era esperado valores iguais, mas  bean.age é diferente de " + " bean1.age")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals(bean.score, bean1.score)
nova chamada: assertEquals(bean.score, bean1.score, "Era esperado valores iguais, mas  bean.score é diferente de " + " bean1.score")
chamada antiga: assertArrayEquals(bean.tags, bean1.tags)
nova chamada: assertArrayEquals(bean.tags, bean1.tags, "Era esperado arrays iguais, mas  bean.tags é diferente de " + " bean1.tags")
chamada antiga: assertEquals("{\"ID\":101}", str)
nova chamada: assertEquals("{\"ID\":101}", str, "Era esperado valores iguais, mas  '{\'ID\':101}' é diferente de " + " str")
chamada antiga: assertEquals(1, object.id)
nova chamada: assertEquals(1, object.id, "Era esperado valores iguais, mas  1 é diferente de " + " object.id")
chamada antiga: assertEquals("Name", object.name)
nova chamada: assertEquals("Name", object.name, "Era esperado valores iguais, mas  'Name' é diferente de " + " object.name")
chamada antiga: assertEquals("User name", object.userName)
nova chamada: assertEquals("User name", object.userName, "Era esperado valores iguais, mas  'User name' é diferente de " + " object.userName")
chamada antiga: assertEquals("{\"id\":1,\"name\":\"Name\",\"user_name\":\"User name\"}", result)
nova chamada: assertEquals("{\"id\":1,\"name\":\"Name\",\"user_name\":\"User name\"}", result, "Era esperado valores iguais, mas  '{\'id\':1,\'name\':\'Name\',\'user_name\':\'User name\'}' é diferente de " + " result")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("[{\"value\":0.28,\"hb\":-0.04}]", JSON.toJSONString(fastjsonRes))
nova chamada: assertEquals("[{\"value\":0.28,\"hb\":-0.04}]", JSON.toJSONString(fastjsonRes), "Era esperado valores iguais, mas  '[{\'value\':0.28,\'hb\':-0.04}]' é diferente de " + result4380 + " <JSON.toJSONString(fastjsonRes)>")
chamada antiga: assertTrue(bean.value)
nova chamada: assertTrue(bean.value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4381 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4382 + " <list.get(0)>")
chamada antiga: assertEquals("2", list.get(1))
nova chamada: assertEquals("2", list.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4383 + " <list.get(1)>")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals("1", array[0])
nova chamada: assertEquals("1", array[0], "Era esperado valores iguais, mas  '1' é diferente de " + " array[0]")
chamada antiga: assertEquals("2", array[1])
nova chamada: assertEquals("2", array[1], "Era esperado valores iguais, mas  '2' é diferente de " + " array[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals("1", array[0])
nova chamada: assertEquals("1", array[0], "Era esperado valores iguais, mas  '1' é diferente de " + " array[0]")
chamada antiga: assertEquals("2", array[1])
nova chamada: assertEquals("2", array[1], "Era esperado valores iguais, mas  '2' é diferente de " + " array[1]")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4384 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4385 + " <list.get(0)>")
chamada antiga: assertEquals("2", list.get(1))
nova chamada: assertEquals("2", list.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4386 + " <list.get(1)>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4387 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4388 + " <list.get(0)>")
chamada antiga: assertEquals("2", list.get(1))
nova chamada: assertEquals("2", list.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4389 + " <list.get(1)>")
chamada antiga: assertEquals("{\"id\":10}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":10}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':10}' é diferente de " + result4390 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"id\":10}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":10}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':10}' é diferente de " + result4391 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("20221020144047985V4EMPSB512", entity.id)
nova chamada: assertEquals("20221020144047985V4EMPSB512", entity.id, "Era esperado valores iguais, mas  '20221020144047985V4EMPSB512' é diferente de " + " entity.id")
chamada antiga: assertEquals("3", entity.type)
nova chamada: assertEquals("3", entity.type, "Era esperado valores iguais, mas  '3' é diferente de " + " entity.type")
chamada antiga: assertEquals("{\"validDate\":\"2022-05-27\"}", str)
nova chamada: assertEquals("{\"validDate\":\"2022-05-27\"}", str, "Era esperado valores iguais, mas  '{\'validDate\':\'2022-05-27\'}' é diferente de " + " str")
chamada antiga: assertEquals(vo.validDate, vo2.validDate)
nova chamada: assertEquals(vo.validDate, vo2.validDate, "Era esperado valores iguais, mas  vo.validDate é diferente de " + " vo2.validDate")
chamada antiga: assertEquals(vo.validDate, vo3.validDate)
nova chamada: assertEquals(vo.validDate, vo3.validDate, "Era esperado valores iguais, mas  vo.validDate é diferente de " + " vo3.validDate")
chamada antiga: assertEquals("{}", JSON.toJSONString(JSONObject.of(), JSONFactory.createWriteContext()))
nova chamada: assertEquals("{}", JSON.toJSONString(JSONObject.of(), JSONFactory.createWriteContext()), "Era esperado valores iguais, mas  '{}' é diferente de " + result4392 + " <JSON.toJSONString(JSONObject.of(), JSONFactory.createWriteContext())>")
chamada antiga: assertEquals("{}", JSON.toJSONString(JSONObject.of(), (JSONWriter.Context) null))
nova chamada: assertEquals("{}", JSON.toJSONString(JSONObject.of(), (JSONWriter.Context) null), "Era esperado valores iguais, mas  '{}' é diferente de " + result4393 + " <JSON.toJSONString(JSONObject.of(), (JSONWriter.Context) null)>")
chamada antiga: assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), JSONFactory.createWriteContext())))
nova chamada: assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), JSONFactory.createWriteContext())), "Era esperado valores iguais, mas  '{}' é diferente de " + result4394 + " <JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), JSONFactory.createWriteContext()))>")
chamada antiga: assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), (JSONWriter.Context) null)))
nova chamada: assertEquals("{}", JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), (JSONWriter.Context) null)), "Era esperado valores iguais, mas  '{}' é diferente de " + result4395 + " <JSONB.toJSONString(JSONB.toBytes(JSONObject.of(), (JSONWriter.Context) null))>")
chamada antiga: assertEquals("19", row)
nova chamada: assertEquals("19", row, "Era esperado valores iguais, mas  '19' é diferente de " + " row")
chamada antiga: assertEquals("C", col)
nova chamada: assertEquals("C", col, "Era esperado valores iguais, mas  'C' é diferente de " + " col")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[\"19\",\"C\"]", result.toString())
nova chamada: assertEquals("[\"19\",\"C\"]", result.toString(), "Era esperado valores iguais, mas  '[\'19\',\'C\']' é diferente de " + result4396 + " <result.toString()>")
chamada antiga: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado falso, mas " + result4397 + " <JSON.isEnabled(JSONReader.Feature.SupportSmartMatch)> é verdadeiro ")
chamada antiga: assertTrue(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertTrue(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado verdadeiro, mas " + result4398 + " <JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch)> é falso")
chamada antiga: assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado verdadeiro, mas " + result4399 + " <JSON.isEnabled(JSONReader.Feature.SupportSmartMatch)> é falso")
chamada antiga: assertFalse(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertFalse(JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado falso, mas " + result4400 + " <JSONFactory.createReadContext().isEnabled(JSONReader.Feature.SupportSmartMatch)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado falso, mas " + result4401 + " <JSON.isEnabled(JSONReader.Feature.SupportSmartMatch)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertTrue(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado verdadeiro, mas " + result4402 + " <JSON.isEnabled(JSONReader.Feature.SupportSmartMatch)> é falso")
chamada antiga: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch))
nova chamada: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportSmartMatch), "Era esperado falso, mas " + result4403 + " <JSON.isEnabled(JSONReader.Feature.SupportSmartMatch)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField), "Era esperado falso, mas " + result4404 + " <JSON.isEnabled(JSONWriter.Feature.MapSortField)> é verdadeiro ")
chamada antiga: assertTrue(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertTrue(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField), "Era esperado verdadeiro, mas " + result4405 + " <JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField)> é falso")
chamada antiga: assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField), "Era esperado verdadeiro, mas " + result4406 + " <JSON.isEnabled(JSONWriter.Feature.MapSortField)> é falso")
chamada antiga: assertFalse(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertFalse(JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField), "Era esperado falso, mas " + result4407 + " <JSONFactory.createWriteContext().isEnabled(JSONWriter.Feature.MapSortField)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField), "Era esperado falso, mas " + result4408 + " <JSON.isEnabled(JSONWriter.Feature.MapSortField)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertTrue(JSON.isEnabled(JSONWriter.Feature.MapSortField), "Era esperado verdadeiro, mas " + result4409 + " <JSON.isEnabled(JSONWriter.Feature.MapSortField)> é falso")
chamada antiga: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField))
nova chamada: assertFalse(JSON.isEnabled(JSONWriter.Feature.MapSortField), "Era esperado falso, mas " + result4410 + " <JSON.isEnabled(JSONWriter.Feature.MapSortField)> é verdadeiro ")
chamada antiga: assertEquals("{\"a\":\"\",\"c\":\"1\"}", JSON.toJSONString(b, valueFilter, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"a\":\"\",\"c\":\"1\"}", JSON.toJSONString(b, valueFilter, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'a\':\'\',\'c\':\'1\'}' é diferente de " + result4411 + " <JSON.toJSONString(b, valueFilter, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"values\":\"\"}", JSON.toJSONString(bean, valueFilter, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"values\":\"\"}", JSON.toJSONString(bean, valueFilter, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'values\':\'\'}' é diferente de " + result4412 + " <JSON.toJSONString(bean, valueFilter, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(sourceContent, targetV2Json.toString())
nova chamada: assertEquals(sourceContent, targetV2Json.toString(), "Era esperado valores iguais, mas  sourceContent é diferente de " + result4413 + " <targetV2Json.toString()>")
chamada antiga: assertEquals(sourceContent, com.alibaba.fastjson2.JSON.toJSONString(targetV2))
nova chamada: assertEquals(sourceContent, com.alibaba.fastjson2.JSON.toJSONString(targetV2), "Era esperado valores iguais, mas  sourceContent é diferente de " + result4414 + " <com.alibaba.fastjson2.JSON.toJSONString(targetV2)>")
chamada antiga: assertEquals(JSON.toJSONString(source.child), JSON.toJSONString(targetV2Json.getObject("child", TestItem.class)))
nova chamada: assertEquals(JSON.toJSONString(source.child), JSON.toJSONString(targetV2Json.getObject("child", TestItem.class)), "Era esperado valores iguais, mas " + result4415 + " <JSON.toJSONString(source.child)> é diferente de " + result4416 + " <JSON.toJSONString(targetV2Json.getObject('child', TestItem.class))>")
chamada antiga: assertEquals(1672502399000L, DateUtils.parseMillis19("2022-12-31 23:59:59", ZoneId.of("Asia/Shanghai")))
nova chamada: assertEquals(1672502399000L, DateUtils.parseMillis19("2022-12-31 23:59:59", ZoneId.of("Asia/Shanghai")), "Era esperado valores iguais, mas  1672502399000L é diferente de " + result4417 + " <DateUtils.parseMillis19('2022-12-31 23:59:59', ZoneId.of('Asia/Shanghai'))>")
chamada antiga: assertEquals("2.99", Double.toString(val.doubleValue()))
nova chamada: assertEquals("2.99", Double.toString(val.doubleValue()), "Era esperado valores iguais, mas  '2.99' é diferente de " + result4418 + " <Double.toString(val.doubleValue())>")
chamada antiga: assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", json.toJSONString())
nova chamada: assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", json.toJSONString(), "Era esperado valores iguais, mas  '{\'test_prr\':2.9900000000000002131628207280300557613372802734375}' é diferente de " + result4419 + " <json.toJSONString()>")
chamada antiga: assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", JSON.toJSONString(json))
nova chamada: assertEquals("{\"test_prr\":2.9900000000000002131628207280300557613372802734375}", JSON.toJSONString(json), "Era esperado valores iguais, mas  '{\'test_prr\':2.9900000000000002131628207280300557613372802734375}' é diferente de " + result4420 + " <JSON.toJSONString(json)>")
chamada antiga: assertEquals(array.size(), array1.size())
nova chamada: assertEquals(array.size(), array1.size(), "Era esperado valores iguais, mas " + result4421 + " <array.size()> é diferente de " + result4422 + " <array1.size()>")
chamada antiga: assertTrue(bean1.isSuccess)
nova chamada: assertTrue(bean1.isSuccess, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"success\":false}", str1)
nova chamada: assertEquals("{\"success\":false}", str1, "Era esperado valores iguais, mas  '{\'success\':false}' é diferente de " + " str1")
chamada antiga: assertEquals("{\"success\":true}", str2)
nova chamada: assertEquals("{\"success\":true}", str2, "Era esperado valores iguais, mas  '{\'success\':true}' é diferente de " + " str2")
chamada antiga: assertEquals("{\"int32\":10,\"int64\":100}", json)
nova chamada: assertEquals("{\"int32\":10,\"int64\":100}", json, "Era esperado valores iguais, mas  '{\'int32\':10,\'int64\':100}' é diferente de " + " json")
chamada antiga: assertEquals(t.int32, tt.int32)
nova chamada: assertEquals(t.int32, tt.int32, "Era esperado valores iguais, mas  t.int32 é diferente de " + " tt.int32")
chamada antiga: assertEquals(t.int64, tt.int64)
nova chamada: assertEquals(t.int64, tt.int64, "Era esperado valores iguais, mas  t.int64 é diferente de " + " tt.int64")
chamada antiga: assertEquals("{\"int32\":10,\"int64\":100}", json)
nova chamada: assertEquals("{\"int32\":10,\"int64\":100}", json, "Era esperado valores iguais, mas  '{\'int32\':10,\'int64\':100}' é diferente de " + " json")
chamada antiga: assertEquals(t.int32, tt.int32)
nova chamada: assertEquals(t.int32, tt.int32, "Era esperado valores iguais, mas  t.int32 é diferente de " + " tt.int32")
chamada antiga: assertEquals(t.int64, tt.int64)
nova chamada: assertEquals(t.int64, tt.int64, "Era esperado valores iguais, mas  t.int64 é diferente de " + " tt.int64")
chamada antiga: assertEquals("{\"int32\":10,\"int64\":100}", json)
nova chamada: assertEquals("{\"int32\":10,\"int64\":100}", json, "Era esperado valores iguais, mas  '{\'int32\':10,\'int64\':100}' é diferente de " + " json")
chamada antiga: assertEquals(t.int32, tt.int32)
nova chamada: assertEquals(t.int32, tt.int32, "Era esperado valores iguais, mas  t.int32 é diferente de " + " tt.int32")
chamada antiga: assertEquals(t.int64, tt.int64)
nova chamada: assertEquals(t.int64, tt.int64, "Era esperado valores iguais, mas  t.int64 é diferente de " + " tt.int64")
chamada antiga: assertNull(JSON.parseObject(emtpy, User.class))
nova chamada: assertNull(JSON.parseObject(emtpy, User.class), "Era esperado nulo, mas " + result4423 + " <JSON.parseObject(emtpy, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(emptyBytes, User.class))
nova chamada: assertNull(JSON.parseObject(emptyBytes, User.class), "Era esperado nulo, mas " + result4424 + " <JSON.parseObject(emptyBytes, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(emptyBytes, 0, emptyBytes.length, StandardCharsets.US_ASCII, User.class))
nova chamada: assertNull(JSON.parseObject(emptyBytes, 0, emptyBytes.length, StandardCharsets.US_ASCII, User.class), "Era esperado nulo, mas " + result4425 + " <JSON.parseObject(emptyBytes, 0, emptyBytes.length, StandardCharsets.US_ASCII, User.class)> não é nulo")
chamada antiga: assertNull(user.exception)
nova chamada: assertNull(user.exception, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(user.exception)
nova chamada: assertNull(user.exception, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(user.exception)
nova chamada: assertNull(user.exception, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(user.exception)
nova chamada: assertNull(user.exception, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(9, bean.resourceIds.size())
nova chamada: assertEquals(9, bean.resourceIds.size(), "Era esperado valores iguais, mas  9 é diferente de " + result4426 + " <bean.resourceIds.size()>")
chamada antiga: assertEquals("[1,100,1000,1001,1002,1003,1004,1005,1006]", JSON.toJSONString(bean.resourceIds))
nova chamada: assertEquals("[1,100,1000,1001,1002,1003,1004,1005,1006]", JSON.toJSONString(bean.resourceIds), "Era esperado valores iguais, mas  '[1,100,1000,1001,1002,1003,1004,1005,1006]' é diferente de " + result4427 + " <JSON.toJSONString(bean.resourceIds)>")
chamada antiga: assertEquals("{\"b\":{\"a\":{\"$ref\":\"$\"}}}", str)
nova chamada: assertEquals("{\"b\":{\"a\":{\"$ref\":\"$\"}}}", str, "Era esperado valores iguais, mas  '{\'b\':{\'a\':{\'$ref\':\'$\'}}}' é diferente de " + " str")
chamada antiga: assertSame(a1, a1.b.a)
nova chamada: assertSame(a1, a1.b.a, "Era esperado objetos iguais, mas  a1 é diferente de " + " a1.b.a")
chamada antiga: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str)
nova chamada: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str, "Era esperado valores iguais, mas  '{\'current\':\'2022-06-09 09:19:13.000000017\',\'history\':\'2022-06-09 09\',\'tomorrow\':\'2022-06-09 09:18\',\'yesterday\':\'1990-12-11\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1)
nova chamada: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1, "Era esperado valores iguais, mas  '{\'current\':\'2022-06-09 09:19:13.000000017\',\'history\':\'2022-06-09 09\',\'tomorrow\':\'2022-06-09 09:18\',\'yesterday\':\'1990-12-11\'}' é diferente de " + " str1")
chamada antiga: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str)
nova chamada: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str, "Era esperado valores iguais, mas  '{\'current\':\'2022-06-09 09:19:13.000000017\',\'history\':\'2022-06-09 09\',\'tomorrow\':\'2022-06-09 09:18\',\'yesterday\':\'1990-12-11\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1)
nova chamada: assertEquals("{\"current\":\"2022-06-09 09:19:13.000000017\",\"history\":\"2022-06-09 09\",\"tomorrow\":\"2022-06-09 09:18\",\"yesterday\":\"1990-12-11\"}", str1, "Era esperado valores iguais, mas  '{\'current\':\'2022-06-09 09:19:13.000000017\',\'history\':\'2022-06-09 09\',\'tomorrow\':\'2022-06-09 09:18\',\'yesterday\':\'1990-12-11\'}' é diferente de " + " str1")
chamada antiga: assertEquals("{\"value\":true}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":true}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + result4428 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new HashMap())).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new HashMap())).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4429 + " <JSON.parse('{}', JSONFactory.createReadContext(() -> new HashMap())).getClass()>")
chamada antiga: assertEquals(LinkedHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new LinkedHashMap())).getClass())
nova chamada: assertEquals(LinkedHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new LinkedHashMap())).getClass(), "Era esperado valores iguais, mas  LinkedHashMap.class é diferente de " + result4430 + " <JSON.parse('{}', JSONFactory.createReadContext(() -> new LinkedHashMap())).getClass()>")
chamada antiga: assertEquals(TreeMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new TreeMap())).getClass())
nova chamada: assertEquals(TreeMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new TreeMap())).getClass(), "Era esperado valores iguais, mas  TreeMap.class é diferente de " + result4431 + " <JSON.parse('{}', JSONFactory.createReadContext(() -> new TreeMap())).getClass()>")
chamada antiga: assertEquals(ConcurrentHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new ConcurrentHashMap())).getClass())
nova chamada: assertEquals(ConcurrentHashMap.class, JSON.parse("{}", JSONFactory.createReadContext(() -> new ConcurrentHashMap())).getClass(), "Era esperado valores iguais, mas  ConcurrentHashMap.class é diferente de " + result4432 + " <JSON.parse('{}', JSONFactory.createReadContext(() -> new ConcurrentHashMap())).getClass()>")
chamada antiga: assertEquals(ArrayList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayList())).getClass())
nova chamada: assertEquals(ArrayList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayList())).getClass(), "Era esperado valores iguais, mas  ArrayList.class é diferente de " + result4433 + " <JSON.parse('[]', JSONFactory.createReadContext(null, () -> new ArrayList())).getClass()>")
chamada antiga: assertEquals(LinkedList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new LinkedList())).getClass())
nova chamada: assertEquals(LinkedList.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new LinkedList())).getClass(), "Era esperado valores iguais, mas  LinkedList.class é diferente de " + result4434 + " <JSON.parse('[]', JSONFactory.createReadContext(null, () -> new LinkedList())).getClass()>")
chamada antiga: assertEquals(ArrayDeque.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayDeque())).getClass())
nova chamada: assertEquals(ArrayDeque.class, JSON.parse("[]", JSONFactory.createReadContext(null, () -> new ArrayDeque())).getClass(), "Era esperado valores iguais, mas  ArrayDeque.class é diferente de " + result4435 + " <JSON.parse('[]', JSONFactory.createReadContext(null, () -> new ArrayDeque())).getClass()>")
chamada antiga: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", str)
nova chamada: assertEquals("{\"name\":\"DataWorks\",\"id\":101}", str, "Era esperado valores iguais, mas  '{\'name\':\'DataWorks\',\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"BName\":\"DataWorks\",\"id\":101}", str)
nova chamada: assertEquals("{\"BName\":\"DataWorks\",\"id\":101}", str, "Era esperado valores iguais, mas  '{\'BName\':\'DataWorks\',\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals(b.id, b1.id)
nova chamada: assertEquals(b.id, b1.id, "Era esperado valores iguais, mas  b.id é diferente de " + " b1.id")
chamada antiga: assertEquals(b.name, b1.name)
nova chamada: assertEquals(b.name, b1.name, "Era esperado valores iguais, mas  b.name é diferente de " + " b1.name")
chamada antiga: assertFalse(bean.isSuccess)
nova chamada: assertFalse(bean.isSuccess, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse("{}".equals(json))
nova chamada: assertFalse("{}".equals(json), "Era esperado falso, mas " + result4436 + " <'{}'.equals(json)> é verdadeiro ")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(JSON.parseObject("{\"time\":\"\"}").to(Bean.class).time)
nova chamada: assertNull(JSON.parseObject("{\"time\":\"\"}").to(Bean.class).time, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"time\":\"null\"}").to(Bean.class).time)
nova chamada: assertNull(JSON.parseObject("{\"time\":\"null\"}").to(Bean.class).time, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"time\":null}").to(Bean.class).time)
nova chamada: assertNull(JSON.parseObject("{\"time\":null}").to(Bean.class).time, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(testDTO2.subDTO.fouDTO)
nova chamada: assertNotNull(testDTO2.subDTO.fouDTO, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(testDTO2.subDTO2.fouDTO)
nova chamada: assertNotNull(testDTO2.subDTO2.fouDTO, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(testDTO2.subDTO.fouDTO)
nova chamada: assertNotNull(testDTO2.subDTO.fouDTO, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(testDTO2.subDTO2.fouDTO)
nova chamada: assertNotNull(testDTO2.subDTO2.fouDTO, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(teacherList)
nova chamada: assertNotNull(teacherList, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, teacherList.size())
nova chamada: assertEquals(1, teacherList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4437 + " <teacherList.size()>")
chamada antiga: assertEquals("朱忠恕", teacherJson.userName)
nova chamada: assertEquals("朱忠恕", teacherJson.userName, "Era esperado valores iguais, mas  '朱忠恕' é diferente de " + " teacherJson.userName")
chamada antiga: assertEquals("{\"t1\":3234567890}", json2.toString())
nova chamada: assertEquals("{\"t1\":3234567890}", json2.toString(), "Era esperado valores iguais, mas  '{\'t1\':3234567890}' é diferente de " + result4438 + " <json2.toString()>")
chamada antiga: assertEquals("{\"t1\":-3234567890}", json2.toString())
nova chamada: assertEquals("{\"t1\":-3234567890}", json2.toString(), "Era esperado valores iguais, mas  '{\'t1\':-3234567890}' é diferente de " + result4439 + " <json2.toString()>")
chamada antiga: assertEquals("{\"t1\":10223372036854775808}", json2.toString())
nova chamada: assertEquals("{\"t1\":10223372036854775808}", json2.toString(), "Era esperado valores iguais, mas  '{\'t1\':10223372036854775808}' é diferente de " + result4440 + " <json2.toString()>")
chamada antiga: assertEquals("{\"t1\":-10223372036854775808}", json2.toString())
nova chamada: assertEquals("{\"t1\":-10223372036854775808}", json2.toString(), "Era esperado valores iguais, mas  '{\'t1\':-10223372036854775808}' é diferente de " + result4441 + " <json2.toString()>")
chamada antiga: assertEquals(3234567890L, vo.getV0000())
nova chamada: assertEquals(3234567890L, vo.getV0000(), "Era esperado valores iguais, mas  3234567890L é diferente de " + result4442 + " <vo.getV0000()>")
chamada antiga: assertEquals(-2.0089457919266330204e-15, JSON.parseObject("{\"V\": -2.0089457919266330204e-15}").get("V"))
nova chamada: assertEquals(-2.0089457919266330204e-15, JSON.parseObject("{\"V\": -2.0089457919266330204e-15}").get("V"), "Era esperado valores iguais, mas  -2.0089457919266330204e-15 é diferente de " + result4443 + " <JSON.parseObject('{\'V\': -2.0089457919266330204e-15}').get('V')>")
chamada antiga: assertEquals(bean.ids, bean1.ids)
nova chamada: assertEquals(bean.ids, bean1.ids, "Era esperado valores iguais, mas  bean.ids é diferente de " + " bean1.ids")
chamada antiga: assertEquals("1", testModel.OneDemo)
nova chamada: assertEquals("1", testModel.OneDemo, "Era esperado valores iguais, mas  '1' é diferente de " + " testModel.OneDemo")
chamada antiga: assertEquals("2", testModel.TDemo)
nova chamada: assertEquals("2", testModel.TDemo, "Era esperado valores iguais, mas  '2' é diferente de " + " testModel.TDemo")
chamada antiga: assertEquals("3", testModel.ThDemo)
nova chamada: assertEquals("3", testModel.ThDemo, "Era esperado valores iguais, mas  '3' é diferente de " + " testModel.ThDemo")
chamada antiga: assertEquals("{\"status\":2}", JSON.toJSONString(t))
nova chamada: assertEquals("{\"status\":2}", JSON.toJSONString(t), "Era esperado valores iguais, mas  '{\'status\':2}' é diferente de " + result4444 + " <JSON.toJSONString(t)>")
chamada antiga: assertNull(o)
nova chamada: assertNull(o, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean1.value)
nova chamada: assertNull(bean1.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean3.value)
nova chamada: assertNull(bean3.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"pickUpTime\":\"2014-03-18\"}", JSON.toJSONString(bean, "millis"))
nova chamada: assertEquals("{\"pickUpTime\":\"2014-03-18\"}", JSON.toJSONString(bean, "millis"), "Era esperado valores iguais, mas  '{\'pickUpTime\':\'2014-03-18\'}' é diferente de " + result4445 + " <JSON.toJSONString(bean, 'millis')>")
chamada antiga: assertEquals(true, obj.getBoolean("IsSuccess"))
nova chamada: assertEquals(true, obj.getBoolean("IsSuccess"), "Era esperado valores iguais, mas  true é diferente de " + result4446 + " <obj.getBoolean('IsSuccess')>")
chamada antiga: assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"))
nova chamada: assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"), "Era esperado valores iguais, mas  '1fd1717837744bd2ba967167a6f6f417' é diferente de " + result4447 + " <obj.getString('Data')>")
chamada antiga: assertEquals("获取身份令牌成功", obj.getString("Message"))
nova chamada: assertEquals("获取身份令牌成功", obj.getString("Message"), "Era esperado valores iguais, mas  '获取身份令牌成功' é diferente de " + result4448 + " <obj.getString('Message')>")
chamada antiga: assertEquals(true, result.isIsSuccess())
nova chamada: assertEquals(true, result.isIsSuccess(), "Era esperado valores iguais, mas  true é diferente de " + result4449 + " <result.isIsSuccess()>")
chamada antiga: assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData())
nova chamada: assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData(), "Era esperado valores iguais, mas  '1fd1717837744bd2ba967167a6f6f417' é diferente de " + result4450 + " <result.getData()>")
chamada antiga: assertEquals("获取身份令牌成功", result.getMessage())
nova chamada: assertEquals("获取身份令牌成功", result.getMessage(), "Era esperado valores iguais, mas  '获取身份令牌成功' é diferente de " + result4451 + " <result.getMessage()>")
chamada antiga: assertEquals(1.1111111E7, jsonObject.get("avaLimit"))
nova chamada: assertEquals(1.1111111E7, jsonObject.get("avaLimit"), "Era esperado valores iguais, mas  1.1111111E7 é diferente de " + result4452 + " <jsonObject.get('avaLimit')>")
chamada antiga: assertEquals(new BigDecimal("1.1111111E7"), jsonObject.getBigDecimal("avaLimit"))
nova chamada: assertEquals(new BigDecimal("1.1111111E7"), jsonObject.getBigDecimal("avaLimit"), "Era esperado valores iguais, mas  new BigDecimal('1.1111111E7') é diferente de " + result4453 + " <jsonObject.getBigDecimal('avaLimit')>")
chamada antiga: assertEquals(new BigDecimal("1.1111111E7"), bean.avaLimit)
nova chamada: assertEquals(new BigDecimal("1.1111111E7"), bean.avaLimit, "Era esperado valores iguais, mas  new BigDecimal('1.1111111E7') é diferente de " + " bean.avaLimit")
chamada antiga: assertEquals("{\"a\":[{\"b\":1}]}", jsonObject.toString())
nova chamada: assertEquals("{\"a\":[{\"b\":1}]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'a\':[{\'b\':1}]}' é diferente de " + result4454 + " <jsonObject.toString()>")
chamada antiga: assertNotNull(simpleDto2.getESkuSnList())
nova chamada: assertNotNull(simpleDto2.getESkuSnList(), "Era esperado não nulo, mas " + result4455 + " <simpleDto2.getESkuSnList()> é nulo")
chamada antiga: assertNotNull(simpleDto21.getESkuSnList())
nova chamada: assertNotNull(simpleDto21.getESkuSnList(), "Era esperado não nulo, mas " + result4456 + " <simpleDto21.getESkuSnList()> é nulo")
chamada antiga: assertNotNull(simpleDto22.getESkuSnList())
nova chamada: assertNotNull(simpleDto22.getESkuSnList(), "Era esperado não nulo, mas " + result4457 + " <simpleDto22.getESkuSnList()> é nulo")
chamada antiga: assertEquals("com.af.v4.system.api.model.LoginUser", parse.get("@type"))
nova chamada: assertEquals("com.af.v4.system.api.model.LoginUser", parse.get("@type"), "Era esperado valores iguais, mas  'com.af.v4.system.api.model.LoginUser' é diferente de " + result4458 + " <parse.get('@type')>")
chamada antiga: assertFalse(first.isEmpty())
nova chamada: assertFalse(first.isEmpty(), "Era esperado falso, mas " + result4459 + " <first.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str)
nova chamada: assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str, "Era esperado valores iguais, mas  '{\'@type\':\'java.util.HashMap\',1L:\'张三\',2L:\'张四\'}' é diferente de " + " str")
chamada antiga: assertEquals(1L, map2.keySet().iterator().next())
nova chamada: assertEquals(1L, map2.keySet().iterator().next(), "Era esperado valores iguais, mas  1L é diferente de " + result4460 + " <map2.keySet().iterator().next()>")
chamada antiga: assertEquals("张三", map2.get(1L))
nova chamada: assertEquals("张三", map2.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4461 + " <map2.get(1L)>")
chamada antiga: assertEquals("张四", map2.get(2L))
nova chamada: assertEquals("张四", map2.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4462 + " <map2.get(2L)>")
chamada antiga: assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str)
nova chamada: assertEquals("{\"@type\":\"java.util.HashMap\",1L:\"张三\",2L:\"张四\"}", str, "Era esperado valores iguais, mas  '{\'@type\':\'java.util.HashMap\',1L:\'张三\',2L:\'张四\'}' é diferente de " + " str")
chamada antiga: assertEquals("张三", map2.get(1L))
nova chamada: assertEquals("张三", map2.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4463 + " <map2.get(1L)>")
chamada antiga: assertEquals("张四", map2.get(2L))
nova chamada: assertEquals("张四", map2.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4464 + " <map2.get(2L)>")
chamada antiga: assertEquals("张三", object.get(1L))
nova chamada: assertEquals("张三", object.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4465 + " <object.get(1L)>")
chamada antiga: assertEquals("张四", object.get(2L))
nova chamada: assertEquals("张四", object.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4466 + " <object.get(2L)>")
chamada antiga: assertEquals(2, object.size())
nova chamada: assertEquals(2, object.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4467 + " <object.size()>")
chamada antiga: assertEquals("张三", map.get(1L))
nova chamada: assertEquals("张三", map.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4468 + " <map.get(1L)>")
chamada antiga: assertEquals("张四", map.get(2L))
nova chamada: assertEquals("张四", map.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4469 + " <map.get(2L)>")
chamada antiga: assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4470 + " <map.size()>")
chamada antiga: assertEquals("张三", map1.get(1L))
nova chamada: assertEquals("张三", map1.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4471 + " <map1.get(1L)>")
chamada antiga: assertEquals("张四", map1.get(2L))
nova chamada: assertEquals("张四", map1.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4472 + " <map1.get(2L)>")
chamada antiga: assertEquals(2, map1.size())
nova chamada: assertEquals(2, map1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4473 + " <map1.size()>")
chamada antiga: assertEquals("张三", map2.get(1L))
nova chamada: assertEquals("张三", map2.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4474 + " <map2.get(1L)>")
chamada antiga: assertEquals("张四", map2.get(2L))
nova chamada: assertEquals("张四", map2.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4475 + " <map2.get(2L)>")
chamada antiga: assertEquals(2, map2.size())
nova chamada: assertEquals(2, map2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4476 + " <map2.size()>")
chamada antiga: assertEquals("张三", map.get(1L))
nova chamada: assertEquals("张三", map.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4477 + " <map.get(1L)>")
chamada antiga: assertEquals("张四", map.get(2L))
nova chamada: assertEquals("张四", map.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4478 + " <map.get(2L)>")
chamada antiga: assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4479 + " <map.size()>")
chamada antiga: assertEquals("张三", map1.get(1L))
nova chamada: assertEquals("张三", map1.get(1L), "Era esperado valores iguais, mas  '张三' é diferente de " + result4480 + " <map1.get(1L)>")
chamada antiga: assertEquals("张四", map1.get(2L))
nova chamada: assertEquals("张四", map1.get(2L), "Era esperado valores iguais, mas  '张四' é diferente de " + result4481 + " <map1.get(2L)>")
chamada antiga: assertEquals(2, map1.size())
nova chamada: assertEquals(2, map1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4482 + " <map1.size()>")
chamada antiga: assertEquals("张三", map2.get(1))
nova chamada: assertEquals("张三", map2.get(1), "Era esperado valores iguais, mas  '张三' é diferente de " + result4483 + " <map2.get(1)>")
chamada antiga: assertEquals("张四", map2.get(2))
nova chamada: assertEquals("张四", map2.get(2), "Era esperado valores iguais, mas  '张四' é diferente de " + result4484 + " <map2.get(2)>")
chamada antiga: assertEquals(2, map2.size())
nova chamada: assertEquals(2, map2.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4485 + " <map2.size()>")
chamada antiga: assertEquals(2020, object.getJSONObject("name").get("one"))
nova chamada: assertEquals(2020, object.getJSONObject("name").get("one"), "Era esperado valores iguais, mas  2020 é diferente de " + result4486 + " <object.getJSONObject('name').get('one')>")
chamada antiga: assertEquals(2020, object.getJSONObject("name").get("one"))
nova chamada: assertEquals(2020, object.getJSONObject("name").get("one"), "Era esperado valores iguais, mas  2020 é diferente de " + result4487 + " <object.getJSONObject('name').get('one')>")
chamada antiga: assertEquals(2020, object.getJSONObject("name").get("one"))
nova chamada: assertEquals(2020, object.getJSONObject("name").get("one"), "Era esperado valores iguais, mas  2020 é diferente de " + result4488 + " <object.getJSONObject('name').get('one')>")
chamada antiga: assertEquals(2020, object.getJSONObject("name").get("one"))
nova chamada: assertEquals(2020, object.getJSONObject("name").get("one"), "Era esperado valores iguais, mas  2020 é diferente de " + result4489 + " <object.getJSONObject('name').get('one')>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4490 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4491 + " <list.get(0)>")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals("1", values[0])
nova chamada: assertEquals("1", values[0], "Era esperado valores iguais, mas  '1' é diferente de " + " values[0]")
chamada antiga: assertEquals("2", values[1])
nova chamada: assertEquals("2", values[1], "Era esperado valores iguais, mas  '2' é diferente de " + " values[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(1, array[0])
nova chamada: assertEquals(1, array[0], "Era esperado valores iguais, mas  1 é diferente de " + " array[0]")
chamada antiga: assertEquals(2, array[1])
nova chamada: assertEquals(2, array[1], "Era esperado valores iguais, mas  2 é diferente de " + " array[1]")
chamada antiga: assertEquals(4, floatArray.length)
nova chamada: assertEquals(4, floatArray.length, "Era esperado valores iguais, mas  4 é diferente de " + " floatArray.length")
chamada antiga: assertEquals(1, floatArray[0])
nova chamada: assertEquals(1, floatArray[0], "Era esperado valores iguais, mas  1 é diferente de " + " floatArray[0]")
chamada antiga: assertEquals(2, floatArray[1])
nova chamada: assertEquals(2, floatArray[1], "Era esperado valores iguais, mas  2 é diferente de " + " floatArray[1]")
chamada antiga: assertEquals(3, floatArray[2])
nova chamada: assertEquals(3, floatArray[2], "Era esperado valores iguais, mas  3 é diferente de " + " floatArray[2]")
chamada antiga: assertEquals(4, floatArray[3])
nova chamada: assertEquals(4, floatArray[3], "Era esperado valores iguais, mas  4 é diferente de " + " floatArray[3]")
chamada antiga: assertEquals(4, doubles.length)
nova chamada: assertEquals(4, doubles.length, "Era esperado valores iguais, mas  4 é diferente de " + " doubles.length")
chamada antiga: assertEquals(1, doubles[0])
nova chamada: assertEquals(1, doubles[0], "Era esperado valores iguais, mas  1 é diferente de " + " doubles[0]")
chamada antiga: assertEquals(2, doubles[1])
nova chamada: assertEquals(2, doubles[1], "Era esperado valores iguais, mas  2 é diferente de " + " doubles[1]")
chamada antiga: assertEquals(3, doubles[2])
nova chamada: assertEquals(3, doubles[2], "Era esperado valores iguais, mas  3 é diferente de " + " doubles[2]")
chamada antiga: assertEquals(4, doubles[3])
nova chamada: assertEquals(4, doubles[3], "Era esperado valores iguais, mas  4 é diferente de " + " doubles[3]")
chamada antiga: assertEquals(4, floats.length)
nova chamada: assertEquals(4, floats.length, "Era esperado valores iguais, mas  4 é diferente de " + " floats.length")
chamada antiga: assertEquals(1, floats[0])
nova chamada: assertEquals(1, floats[0], "Era esperado valores iguais, mas  1 é diferente de " + " floats[0]")
chamada antiga: assertEquals(2, floats[1])
nova chamada: assertEquals(2, floats[1], "Era esperado valores iguais, mas  2 é diferente de " + " floats[1]")
chamada antiga: assertEquals(3, floats[2])
nova chamada: assertEquals(3, floats[2], "Era esperado valores iguais, mas  3 é diferente de " + " floats[2]")
chamada antiga: assertEquals(4, floats[3])
nova chamada: assertEquals(4, floats[3], "Era esperado valores iguais, mas  4 é diferente de " + " floats[3]")
chamada antiga: assertEquals(Data.class, o.getClass())
nova chamada: assertEquals(Data.class, o.getClass(), "Era esperado valores iguais, mas  Data.class é diferente de " + result4492 + " <o.getClass()>")
chamada antiga: assertEquals("1111111", userInfoBody.getCard_number())
nova chamada: assertEquals("1111111", userInfoBody.getCard_number(), "Era esperado valores iguais, mas  '1111111' é diferente de " + result4493 + " <userInfoBody.getCard_number()>")
chamada antiga: assertEquals("1111111", userInfoBody1.getCard_number())
nova chamada: assertEquals("1111111", userInfoBody1.getCard_number(), "Era esperado valores iguais, mas  '1111111' é diferente de " + result4494 + " <userInfoBody1.getCard_number()>")
chamada antiga: assertEquals("1111111", userInfoBody2.getCard_number())
nova chamada: assertEquals("1111111", userInfoBody2.getCard_number(), "Era esperado valores iguais, mas  '1111111' é diferente de " + result4495 + " <userInfoBody2.getCard_number()>")
chamada antiga: assertEquals(String.class, bean.type)
nova chamada: assertEquals(String.class, bean.type, "Era esperado valores iguais, mas  String.class é diferente de " + " bean.type")
chamada antiga: assertFalse(JSON.isValid(json))
nova chamada: assertFalse(JSON.isValid(json), "Era esperado falso, mas " + result4496 + " <JSON.isValid(json)> é verdadeiro ")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean1.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean2.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean2.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean2.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean3.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean3.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean3.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean4.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean4.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean4.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean5.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean5.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean5.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean5.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean6.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean6.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean6.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean6.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean7.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean7.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean7.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean7.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean8.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean8.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean8.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean8.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean9.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean9.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean9.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean9.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean10.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean10.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean10.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean10.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean11.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean11.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean11.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").to(Bean11.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"t1\":{\"a\":\"a\"},\"t2\":{\"b\":\"b\"}}", JSON.toJSONString(data))
nova chamada: assertEquals("{\"t1\":{\"a\":\"a\"},\"t2\":{\"b\":\"b\"}}", JSON.toJSONString(data), "Era esperado valores iguais, mas  '{\'t1\':{\'a\':\'a\'},\'t2\':{\'b\':\'b\'}}' é diferente de " + result4497 + " <JSON.toJSONString(data)>")
chamada antiga: assertEquals(1, strings.size())
nova chamada: assertEquals(1, strings.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4498 + " <strings.size()>")
chamada antiga: assertEquals("abc", strings.get(0))
nova chamada: assertEquals("abc", strings.get(0), "Era esperado valores iguais, mas  'abc' é diferente de " + result4499 + " <strings.get(0)>")
chamada antiga: assertEquals(array.get(0), list.get(0))
nova chamada: assertEquals(array.get(0), list.get(0), "Era esperado valores iguais, mas " + result4500 + " <array.get(0)> é diferente de " + result4501 + " <list.get(0)>")
chamada antiga: assertEquals("{\"date\":1655097829796}", str)
nova chamada: assertEquals("{\"date\":1655097829796}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829796}' é diferente de " + " str")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result4502 + " <bean.date.getTime()> é diferente de " + result4503 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result4504 + " <bean.date.getTime()> é diferente de " + result4505 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"date\":1655097829796}", str)
nova chamada: assertEquals("{\"date\":1655097829796}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829796}' é diferente de " + " str")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result4506 + " <bean.date.getTime()> é diferente de " + result4507 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result4508 + " <bean.date.getTime()> é diferente de " + result4509 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"date\":1655097829}", str)
nova chamada: assertEquals("{\"date\":1655097829}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829}' é diferente de " + " str")
chamada antiga: assertEquals(1655097829000L, bean1.date.getTime())
nova chamada: assertEquals(1655097829000L, bean1.date.getTime(), "Era esperado valores iguais, mas  1655097829000L é diferente de " + result4510 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(1655097829000L, bean2.date.getTime())
nova chamada: assertEquals(1655097829000L, bean2.date.getTime(), "Era esperado valores iguais, mas  1655097829000L é diferente de " + result4511 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'localDate\':\'2022-07-01\',\'localDateTime\':\'2022-07-01 08:47:45\',\'localTime\':\'08:47:45\'}' é diferente de " + result4512 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"localDate\":\"2022/07/01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"localDate\":\"2022/07/01\",\"localDateTime\":\"2022-07-01 08:47:45\",\"localTime\":\"08:47:45\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'localDate\':\'2022/07/01\',\'localDateTime\':\'2022-07-01 08:47:45\',\'localTime\':\'08:47:45\'}' é diferente de " + result4513 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45.514\",\"localTime\":\"08:47:45.515\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"localDate\":\"2022-07-01\",\"localDateTime\":\"2022-07-01 08:47:45.514\",\"localTime\":\"08:47:45.515\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'localDate\':\'2022-07-01\',\'localDateTime\':\'2022-07-01 08:47:45.514\',\'localTime\':\'08:47:45.515\'}' é diferente de " + result4514 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals(1654053162000L, date.getTime())
nova chamada: assertEquals(1654053162000L, date.getTime(), "Era esperado valores iguais, mas  1654053162000L é diferente de " + result4515 + " <date.getTime()>")
chamada antiga: assertEquals(1654053162000L, date.getTime())
nova chamada: assertEquals(1654053162000L, date.getTime(), "Era esperado valores iguais, mas  1654053162000L é diferente de " + result4516 + " <date.getTime()>")
chamada antiga: assertEquals(1654053162000L, date.getTime())
nova chamada: assertEquals(1654053162000L, date.getTime(), "Era esperado valores iguais, mas  1654053162000L é diferente de " + result4517 + " <date.getTime()>")
chamada antiga: assertEquals(1654053162000L, date.getTime())
nova chamada: assertEquals(1654053162000L, date.getTime(), "Era esperado valores iguais, mas  1654053162000L é diferente de " + result4518 + " <date.getTime()>")
chamada antiga: assertEquals(165405316000L, date.getTime())
nova chamada: assertEquals(165405316000L, date.getTime(), "Era esperado valores iguais, mas  165405316000L é diferente de " + result4519 + " <date.getTime()>")
chamada antiga: assertEquals(16540531000L, date.getTime())
nova chamada: assertEquals(16540531000L, date.getTime(), "Era esperado valores iguais, mas  16540531000L é diferente de " + result4520 + " <date.getTime()>")
chamada antiga: assertEquals(1654053000L, date.getTime())
nova chamada: assertEquals(1654053000L, date.getTime(), "Era esperado valores iguais, mas  1654053000L é diferente de " + result4521 + " <date.getTime()>")
chamada antiga: assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj))
nova chamada: assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj), "Era esperado valores iguais, mas  '[{\'key\':\'value1\'}]' é diferente de " + result4522 + " <JSON.toJSONString(tmpObj)>")
chamada antiga: assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj))
nova chamada: assertEquals("[{\"key\":\"value1\"}]", JSON.toJSONString(tmpObj), "Era esperado valores iguais, mas  '[{\'key\':\'value1\'}]' é diferente de " + result4523 + " <JSON.toJSONString(tmpObj)>")
chamada antiga: assertNotNull(aa)
nova chamada: assertNotNull(aa, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(aa.time)
nova chamada: assertNotNull(aa.time, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(aa.nest.time)
nova chamada: assertNotNull(aa.nest.time, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(awardRule)
nova chamada: assertNotNull(awardRule, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("{\"1\":\"\\\\\"}", string)
nova chamada: assertEquals("{\"1\":\"\\\\\"}", string, "Era esperado valores iguais, mas  '{\'1\':\'\\\\\'}' é diferente de " + " string")
chamada antiga: Assertions.assertEquals("{\"1\":\"\\\"\"}", string)
nova chamada: assertEquals("{\"1\":\"\\\"\"}", string, "Era esperado valores iguais, mas  '{\'1\':\'\\\'\'}' é diferente de " + " string")
chamada antiga: assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4524 + " <set.size()>")
chamada antiga: assertTrue(set.contains("1541357098843803649"))
nova chamada: assertTrue(set.contains("1541357098843803649"), "Era esperado verdadeiro, mas " + result4525 + " <set.contains('1541357098843803649')> é falso")
chamada antiga: assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4526 + " <set.size()>")
chamada antiga: assertTrue(set.contains("1541357098843803649"))
nova chamada: assertTrue(set.contains("1541357098843803649"), "Era esperado verdadeiro, mas " + result4527 + " <set.contains('1541357098843803649')> é falso")
chamada antiga: assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4528 + " <set.size()>")
chamada antiga: assertTrue(set.contains("1541357098843803649"))
nova chamada: assertTrue(set.contains("1541357098843803649"), "Era esperado verdadeiro, mas " + result4529 + " <set.contains('1541357098843803649')> é falso")
chamada antiga: assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4530 + " <set.size()>")
chamada antiga: assertTrue(set.contains("1541357098843803649"))
nova chamada: assertTrue(set.contains("1541357098843803649"), "Era esperado verdadeiro, mas " + result4531 + " <set.contains('1541357098843803649')> é falso")
chamada antiga: assertEquals(1655714717589L, jsonObject.getDate("time").getTime())
nova chamada: assertEquals(1655714717589L, jsonObject.getDate("time").getTime(), "Era esperado valores iguais, mas  1655714717589L é diferente de " + result4532 + " <jsonObject.getDate('time').getTime()>")
chamada antiga: assertNotNull(result.get(0).getList().get(0))
nova chamada: assertNotNull(result.get(0).getList().get(0), "Era esperado não nulo, mas " + result4533 + " <result.get(0).getList().get(0)> é nulo")
chamada antiga: assertNotNull(result.get(0).getList().get(0).getArriveStaName())
nova chamada: assertNotNull(result.get(0).getList().get(0).getArriveStaName(), "Era esperado não nulo, mas " + result4534 + " <result.get(0).getList().get(0).getArriveStaName()> é nulo")
chamada antiga: assertEquals(1, data.size())
nova chamada: assertEquals(1, data.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4535 + " <data.size()>")
chamada antiga: assertEquals("{\"aaa\":{\"ccc\":\"c111\",\"ddd\":\"d11111\"},\"bbb\":\"b11111\"}", jsonObject.toString())
nova chamada: assertEquals("{\"aaa\":{\"ccc\":\"c111\",\"ddd\":\"d11111\"},\"bbb\":\"b11111\"}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'aaa\':{\'ccc\':\'c111\',\'ddd\':\'d11111\'},\'bbb\':\'b11111\'}' é diferente de " + result4536 + " <jsonObject.toString()>")
chamada antiga: assertEquals(101, object.get("id"))
nova chamada: assertEquals(101, object.get("id"), "Era esperado valores iguais, mas  101 é diferente de " + result4537 + " <object.get('id')>")
chamada antiga: assertEquals(102, object.get("id"))
nova chamada: assertEquals(102, object.get("id"), "Era esperado valores iguais, mas  102 é diferente de " + result4538 + " <object.get('id')>")
chamada antiga: assertEquals("[102,103]", object.get("id").toString())
nova chamada: assertEquals("[102,103]", object.get("id").toString(), "Era esperado valores iguais, mas  '[102,103]' é diferente de " + result4539 + " <object.get('id').toString()>")
chamada antiga: assertEquals(2, strings.length)
nova chamada: assertEquals(2, strings.length, "Era esperado valores iguais, mas  2 é diferente de " + " strings.length")
chamada antiga: assertEquals("x", strings[0])
nova chamada: assertEquals("x", strings[0], "Era esperado valores iguais, mas  'x' é diferente de " + " strings[0]")
chamada antiga: assertEquals("y", strings[1])
nova chamada: assertEquals("y", strings[1], "Era esperado valores iguais, mas  'y' é diferente de " + " strings[1]")
chamada antiga: assertEquals("{\"adult\":\"true\",\"age\":\"20\",\"weight\":\"145.5\",\"weight2\":\"145.5\"}", peopleStr)
nova chamada: assertEquals("{\"adult\":\"true\",\"age\":\"20\",\"weight\":\"145.5\",\"weight2\":\"145.5\"}", peopleStr, "Era esperado valores iguais, mas  '{\'adult\':\'true\',\'age\':\'20\',\'weight\':\'145.5\',\'weight2\':\'145.5\'}' é diferente de " + " peopleStr")
chamada antiga: assertEquals(student.address, student2.address)
nova chamada: assertEquals(student.address, student2.address, "Era esperado valores iguais, mas  student.address é diferente de " + " student2.address")
chamada antiga: assertEquals(student.sge, student2.sge)
nova chamada: assertEquals(student.sge, student2.sge, "Era esperado valores iguais, mas  student.sge é diferente de " + " student2.sge")
chamada antiga: assertEquals(student.address, student2.address)
nova chamada: assertEquals(student.address, student2.address, "Era esperado valores iguais, mas  student.address é diferente de " + " student2.address")
chamada antiga: assertEquals(expected, JSON.toJSONString(map))
nova chamada: assertEquals(expected, JSON.toJSONString(map), "Era esperado valores iguais, mas  expected é diferente de " + result4540 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals(expected, new String(JSON.toJSONBytes(map)))
nova chamada: assertEquals(expected, new String(JSON.toJSONBytes(map)), "Era esperado valores iguais, mas  expected é diferente de " + " new String(JSON.toJSONBytes(map))")
chamada antiga: assertEquals("{\n" + "\t\"value\":\"zhinan\",\n" + "\t\"label\":\"指南\",\n" + "\t\"children\":[\n" + "\t\t{\n" + "\t\t\t\"value\":\"shejiyuanze\",\n" + "\t\t\t\"label\":\"设计原则\"\n" + "\t\t}\n" + "\t]\n" + "}", jsonObject.toString(JSONWriter.Feature.NotWriteEmptyArray, JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals("{\n" + "\t\"value\":\"zhinan\",\n" + "\t\"label\":\"指南\",\n" + "\t\"children\":[\n" + "\t\t{\n" + "\t\t\t\"value\":\"shejiyuanze\",\n" + "\t\t\t\"label\":\"设计原则\"\n" + "\t\t}\n" + "\t]\n" + "}", jsonObject.toString(JSONWriter.Feature.NotWriteEmptyArray, JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas  '{\n' + '\t\'value\':\'zhinan\',\n' + '\t\'label\':\'指南\',\n' + '\t\'children\':[\n' + '\t\t{\n' + '\t\t\t\'value\':\'shejiyuanze\',\n' + '\t\t\t\'label\':\'设计原则\'\n' + '\t\t}\n' + '\t]\n' + '}' é diferente de " + result4541 + " <jsonObject.toString(JSONWriter.Feature.NotWriteEmptyArray, JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertEquals("{\"values\":[]}", object.toString())
nova chamada: assertEquals("{\"values\":[]}", object.toString(), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result4542 + " <object.toString()>")
chamada antiga: assertEquals("{}", object.toString(JSONWriter.Feature.NotWriteEmptyArray))
nova chamada: assertEquals("{}", object.toString(JSONWriter.Feature.NotWriteEmptyArray), "Era esperado valores iguais, mas  '{}' é diferente de " + result4543 + " <object.toString(JSONWriter.Feature.NotWriteEmptyArray)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result4544 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray), "Era esperado valores iguais, mas  '{}' é diferente de " + result4545 + " <JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result4546 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray), "Era esperado valores iguais, mas  '{}' é diferente de " + result4547 + " <JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result4548 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray), "Era esperado valores iguais, mas  '{}' é diferente de " + result4549 + " <JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray)>")
chamada antiga: assertEquals("{\"values\":[]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"values\":[]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result4550 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray), "Era esperado valores iguais, mas  '{}' é diferente de " + result4551 + " <JSON.toJSONString(bean, JSONWriter.Feature.NotWriteEmptyArray)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new Bean5()))
nova chamada: assertEquals("{}", JSON.toJSONString(new Bean5()), "Era esperado valores iguais, mas  '{}' é diferente de " + result4552 + " <JSON.toJSONString(new Bean5())>")
chamada antiga: assertEquals("{\"file\":\"/User/xxx/JsonTest.java\"}", json)
nova chamada: assertEquals("{\"file\":\"/User/xxx/JsonTest.java\"}", json, "Era esperado valores iguais, mas  '{\'file\':\'/User/xxx/JsonTest.java\'}' é diferente de " + " json")
chamada antiga: assertEquals("/User/xxx/JsonTest.java", file.toString())
nova chamada: assertEquals("/User/xxx/JsonTest.java", file.toString(), "Era esperado valores iguais, mas  '/User/xxx/JsonTest.java' é diferente de " + result4553 + " <file.toString()>")
chamada antiga: assertEquals("\"yyyy-MM-dd\"", str)
nova chamada: assertEquals("\"yyyy-MM-dd\"", str, "Era esperado valores iguais, mas  '\'yyyy-MM-dd\'' é diferente de " + " str")
chamada antiga: assertEquals(format.toPattern(), format2.toPattern())
nova chamada: assertEquals(format.toPattern(), format2.toPattern(), "Era esperado valores iguais, mas " + result4554 + " <format.toPattern()> é diferente de " + result4555 + " <format2.toPattern()>")
chamada antiga: assertEquals("\"abc\"", JSON.toJSONString(new StringBuffer("abc")))
nova chamada: assertEquals("\"abc\"", JSON.toJSONString(new StringBuffer("abc")), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result4556 + " <JSON.toJSONString(new StringBuffer('abc'))>")
chamada antiga: assertEquals("\"abc\"", JSON.toJSONString(new StringBuilder("abc")))
nova chamada: assertEquals("\"abc\"", JSON.toJSONString(new StringBuilder("abc")), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result4557 + " <JSON.toJSONString(new StringBuilder('abc'))>")
chamada antiga: assertEquals("{\"date\":\"1663595616049\"}", s)
nova chamada: assertEquals("{\"date\":\"1663595616049\"}", s, "Era esperado valores iguais, mas  '{\'date\':\'1663595616049\'}' é diferente de " + " s")
chamada antiga: assertEquals("{\"date\":1663595616049}", s)
nova chamada: assertEquals("{\"date\":1663595616049}", s, "Era esperado valores iguais, mas  '{\'date\':1663595616049}' é diferente de " + " s")
chamada antiga: assertEquals("{\"date\":\"1663595616049\"}", s)
nova chamada: assertEquals("{\"date\":\"1663595616049\"}", s, "Era esperado valores iguais, mas  '{\'date\':\'1663595616049\'}' é diferente de " + " s")
chamada antiga: assertEquals("{\"date\":1663595616049}", s)
nova chamada: assertEquals("{\"date\":1663595616049}", s, "Era esperado valores iguais, mas  '{\'date\':1663595616049}' é diferente de " + " s")
chamada antiga: assertEquals("{\"date\":\"1663595616049\"}", s)
nova chamada: assertEquals("{\"date\":\"1663595616049\"}", s, "Era esperado valores iguais, mas  '{\'date\':\'1663595616049\'}' é diferente de " + " s")
chamada antiga: assertEquals("{\"date\":\"1663595616049\"}", s)
nova chamada: assertEquals("{\"date\":\"1663595616049\"}", s, "Era esperado valores iguais, mas  '{\'date\':\'1663595616049\'}' é diferente de " + " s")
chamada antiga: assertSame(ReturnWay.EXPRESS, parsed)
nova chamada: assertSame(ReturnWay.EXPRESS, parsed, "Era esperado objetos iguais, mas  ReturnWay.EXPRESS é diferente de " + " parsed")
chamada antiga: assertEquals(JSONObject.of("time", "0000-00-00").getDate("time"), JSONObject.of("time", "0000-00-00 00:00:00").getDate("time"))
nova chamada: assertEquals(JSONObject.of("time", "0000-00-00").getDate("time"), JSONObject.of("time", "0000-00-00 00:00:00").getDate("time"), "Era esperado valores iguais, mas " + result4558 + " <JSONObject.of('time', '0000-00-00').getDate('time')> é diferente de " + result4559 + " <JSONObject.of('time', '0000-00-00 00:00:00').getDate('time')>")
chamada antiga: assertEquals("00", object.get("code"))
nova chamada: assertEquals("00", object.get("code"), "Era esperado valores iguais, mas  '00' é diferente de " + result4560 + " <object.get('code')>")
chamada antiga: assertNull(JSON.parseObject(""))
nova chamada: assertNull(JSON.parseObject(""), "Era esperado nulo, mas " + result4561 + " <JSON.parseObject('')> não é nulo")
chamada antiga: assertNull(JSON.parseObject(utf8Bytes))
nova chamada: assertNull(JSON.parseObject(utf8Bytes), "Era esperado nulo, mas " + result4562 + " <JSON.parseObject(utf8Bytes)> não é nulo")
chamada antiga: assertNull(JSON.parse(null))
nova chamada: assertNull(JSON.parse(null), "Era esperado nulo, mas " + result4563 + " <JSON.parse(null)> não é nulo")
chamada antiga: assertNull(JSON.parse(""))
nova chamada: assertNull(JSON.parse(""), "Era esperado nulo, mas " + result4564 + " <JSON.parse('')> não é nulo")
chamada antiga: assertNull(JSON.parse((String) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parse((String) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4565 + " <JSON.parse((String) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parse("", JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parse("", JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4566 + " <JSON.parse('', JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parse(null, (JSONReader.Context) null))
nova chamada: assertNull(JSON.parse(null, (JSONReader.Context) null), "Era esperado nulo, mas " + result4567 + " <JSON.parse(null, (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parse("", (JSONReader.Context) null))
nova chamada: assertNull(JSON.parse("", (JSONReader.Context) null), "Era esperado nulo, mas " + result4568 + " <JSON.parse('', (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parse((byte[]) null))
nova chamada: assertNull(JSON.parse((byte[]) null), "Era esperado nulo, mas " + result4569 + " <JSON.parse((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parse(new byte[0]))
nova chamada: assertNull(JSON.parse(new byte[0]), "Era esperado nulo, mas " + result4570 + " <JSON.parse(new byte[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null))
nova chamada: assertNull(JSON.parseObject((String) null), "Era esperado nulo, mas " + result4571 + " <JSON.parseObject((String) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null))
nova chamada: assertNull(JSON.parseObject((byte[]) null), "Era esperado nulo, mas " + result4572 + " <JSON.parseObject((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null))
nova chamada: assertNull(JSON.parseObject((InputStream) null), "Era esperado nulo, mas " + result4573 + " <JSON.parseObject((InputStream) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((Reader) null))
nova chamada: assertNull(JSON.parseObject((Reader) null), "Era esperado nulo, mas " + result4574 + " <JSON.parseObject((Reader) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4575 + " <JSON.parseObject((String) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4576 + " <JSON.parseObject((byte[]) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((InputStream) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4577 + " <JSON.parseObject((InputStream) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((Reader) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((Reader) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4578 + " <JSON.parseObject((Reader) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(null, (JSONReader.Context) null))
nova chamada: assertNull(JSON.parseObject(null, (JSONReader.Context) null), "Era esperado nulo, mas " + result4579 + " <JSON.parseObject(null, (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (JSONReader.Context) null))
nova chamada: assertNull(JSON.parseObject("", (JSONReader.Context) null), "Era esperado nulo, mas " + result4580 + " <JSON.parseObject('', (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class))
nova chamada: assertNull(JSON.parseObject("", Object.class), "Era esperado nulo, mas " + result4581 + " <JSON.parseObject('', Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(utf8Bytes, Object.class))
nova chamada: assertNull(JSON.parseObject(utf8Bytes, Object.class), "Era esperado nulo, mas " + result4582 + " <JSON.parseObject(utf8Bytes, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject("", Object.class, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4583 + " <JSON.parseObject('', Object.class, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (Type) Object.class, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject("", (Type) Object.class, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4584 + " <JSON.parseObject('', (Type) Object.class, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(utf8Bytes, Object.class, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject(utf8Bytes, Object.class, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4585 + " <JSON.parseObject(utf8Bytes, Object.class, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4586 + " <JSON.parseObject(utf8Bytes, (Type) Object.class, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4587 + " <JSON.parseObject((String) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject("", (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4588 + " <JSON.parseObject('', (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject((byte[]) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4589 + " <JSON.parseObject((byte[]) null, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject(utf8Bytes, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result4590 + " <JSON.parseObject(utf8Bytes, (Type) Object.class, (Filter) null, JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, Object.class))
nova chamada: assertNull(JSON.parseObject((String) null, Object.class), "Era esperado nulo, mas " + result4591 + " <JSON.parseObject((String) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, Object.class))
nova chamada: assertNull(JSON.parseObject((byte[]) null, Object.class), "Era esperado nulo, mas " + result4592 + " <JSON.parseObject((byte[]) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, Object.class))
nova chamada: assertNull(JSON.parseObject((InputStream) null, Object.class), "Era esperado nulo, mas " + result4593 + " <JSON.parseObject((InputStream) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((Reader) null, Object.class))
nova chamada: assertNull(JSON.parseObject((Reader) null, Object.class), "Era esperado nulo, mas " + result4594 + " <JSON.parseObject((Reader) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((URL) null, Object.class))
nova chamada: assertNull(JSON.parseObject((URL) null, Object.class), "Era esperado nulo, mas " + result4595 + " <JSON.parseObject((URL) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((URL) null, (Type) Object.class))
nova chamada: assertNull(JSON.parseObject((URL) null, (Type) Object.class), "Era esperado nulo, mas " + result4596 + " <JSON.parseObject((URL) null, (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((URL) null, (Function) null))
nova chamada: assertNull(JSON.parseObject((URL) null, (Function) null), "Era esperado nulo, mas " + result4597 + " <JSON.parseObject((URL) null, (Function) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class))
nova chamada: assertNull(JSON.parseObject("", Object.class), "Era esperado nulo, mas " + result4598 + " <JSON.parseObject('', Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], Object.class))
nova chamada: assertNull(JSON.parseObject(new byte[0], Object.class), "Era esperado nulo, mas " + result4599 + " <JSON.parseObject(new byte[0], Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new ByteArrayInputStream(new byte[0]), Object.class))
nova chamada: assertNull(JSON.parseObject(new ByteArrayInputStream(new byte[0]), Object.class), "Era esperado nulo, mas " + result4600 + " <JSON.parseObject(new ByteArrayInputStream(new byte[0]), Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new StringReader(""), Object.class))
nova chamada: assertNull(JSON.parseObject(new StringReader(""), Object.class), "Era esperado nulo, mas " + result4601 + " <JSON.parseObject(new StringReader(''), Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, Object.class, (JSONReader.Context) null))
nova chamada: assertNull(JSON.parseObject((String) null, Object.class, (JSONReader.Context) null), "Era esperado nulo, mas " + result4602 + " <JSON.parseObject((String) null, Object.class, (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class, (JSONReader.Context) null))
nova chamada: assertNull(JSON.parseObject("", Object.class, (JSONReader.Context) null), "Era esperado nulo, mas " + result4603 + " <JSON.parseObject('', Object.class, (JSONReader.Context) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes)))
nova chamada: assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes)), "Era esperado nulo, mas " + result4604 + " <JSON.parseObject(new ByteArrayInputStream(utf8Bytes))> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new StringReader("")))
nova chamada: assertNull(JSON.parseObject(new StringReader("")), "Era esperado nulo, mas " + result4605 + " <JSON.parseObject(new StringReader(''))> não é nulo")
chamada antiga: assertTrue(JSON.parseObject(new StringReader("{}")).isEmpty())
nova chamada: assertTrue(JSON.parseObject(new StringReader("{}")).isEmpty(), "Era esperado verdadeiro, mas " + result4606 + " <JSON.parseObject(new StringReader('{}')).isEmpty()> é falso")
chamada antiga: assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes), Object.class))
nova chamada: assertNull(JSON.parseObject(new ByteArrayInputStream(utf8Bytes), Object.class), "Era esperado nulo, mas " + result4607 + " <JSON.parseObject(new ByteArrayInputStream(utf8Bytes), Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new StringReader(""), Object.class))
nova chamada: assertNull(JSON.parseObject(new StringReader(""), Object.class), "Era esperado nulo, mas " + result4608 + " <JSON.parseObject(new StringReader(''), Object.class)> não é nulo")
chamada antiga: assertTrue(((JSONObject) JSON.parseObject(new StringReader("{}"), JSONObject.class)).isEmpty())
nova chamada: assertTrue(((JSONObject) JSON.parseObject(new StringReader("{}"), JSONObject.class)).isEmpty(), "Era esperado verdadeiro, mas " + result4609 + " <((JSONObject) JSON.parseObject(new StringReader('{}'), JSONObject.class)).isEmpty()> é falso")
chamada antiga: assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str)
nova chamada: assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str, "Era esperado valores iguais, mas  '{\'parems\':{},\'success\':true,\'wxId\':\'abc\'}' é diferente de " + " str")
chamada antiga: assertEquals(bo.wxId, bo1.wxId)
nova chamada: assertEquals(bo.wxId, bo1.wxId, "Era esperado valores iguais, mas  bo.wxId é diferente de " + " bo1.wxId")
chamada antiga: assertEquals(bo.isSuccess, bo1.isSuccess)
nova chamada: assertEquals(bo.isSuccess, bo1.isSuccess, "Era esperado valores iguais, mas  bo.isSuccess é diferente de " + " bo1.isSuccess")
chamada antiga: assertEquals(bo.parems, bo1.parems)
nova chamada: assertEquals(bo.parems, bo1.parems, "Era esperado valores iguais, mas  bo.parems é diferente de " + " bo1.parems")
chamada antiga: assertNull(bo1.parems)
nova chamada: assertNull(bo1.parems, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bo1.params)
nova chamada: assertNull(bo1.params, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bo1.params)
nova chamada: assertNull(bo1.params, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"C\":101}", json)
nova chamada: assertEquals("{\"C\":101}", json, "Era esperado valores iguais, mas  '{\'C\':101}' é diferente de " + " json")
chamada antiga: assertEquals(entity.C, entity1.C)
nova chamada: assertEquals(entity.C, entity1.C, "Era esperado valores iguais, mas  entity.C é diferente de " + " entity1.C")
chamada antiga: assertEquals(entity.C, entity2.C)
nova chamada: assertEquals(entity.C, entity2.C, "Era esperado valores iguais, mas  entity.C é diferente de " + " entity2.C")
chamada antiga: assertEquals("{\"C\":101}", json)
nova chamada: assertEquals("{\"C\":101}", json, "Era esperado valores iguais, mas  '{\'C\':101}' é diferente de " + " json")
chamada antiga: assertEquals(entity.C, entity1.C)
nova chamada: assertEquals(entity.C, entity1.C, "Era esperado valores iguais, mas  entity.C é diferente de " + " entity1.C")
chamada antiga: assertEquals(entity.C, entity2.C)
nova chamada: assertEquals(entity.C, entity2.C, "Era esperado valores iguais, mas  entity.C é diferente de " + " entity2.C")
chamada antiga: assertEquals("{\"ID\":101}", json)
nova chamada: assertEquals("{\"ID\":101}", json, "Era esperado valores iguais, mas  '{\'ID\':101}' é diferente de " + " json")
chamada antiga: assertEquals(entity.ID, entity1.ID)
nova chamada: assertEquals(entity.ID, entity1.ID, "Era esperado valores iguais, mas  entity.ID é diferente de " + " entity1.ID")
chamada antiga: assertEquals(entity.ID, entity2.ID)
nova chamada: assertEquals(entity.ID, entity2.ID, "Era esperado valores iguais, mas  entity.ID é diferente de " + " entity2.ID")
chamada antiga: assertEquals("{\"ID\":101}", json)
nova chamada: assertEquals("{\"ID\":101}", json, "Era esperado valores iguais, mas  '{\'ID\':101}' é diferente de " + " json")
chamada antiga: assertEquals(entity.ID, entity1.ID)
nova chamada: assertEquals(entity.ID, entity1.ID, "Era esperado valores iguais, mas  entity.ID é diferente de " + " entity1.ID")
chamada antiga: assertEquals(entity.ID, entity2.ID)
nova chamada: assertEquals(entity.ID, entity2.ID, "Era esperado valores iguais, mas  entity.ID é diferente de " + " entity2.ID")
chamada antiga: assertTrue(bean.getAa() instanceof Long)
nova chamada: assertTrue(bean.getAa() instanceof Long, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object.getAa() instanceof Long)
nova chamada: assertTrue(object.getAa() instanceof Long, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object1.getAa() instanceof Long)
nova chamada: assertTrue(object1.getAa() instanceof Long, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bean.getAa() instanceof Short)
nova chamada: assertTrue(bean.getAa() instanceof Short, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object.getAa() instanceof Short)
nova chamada: assertTrue(object.getAa() instanceof Short, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object1.getAa() instanceof Short)
nova chamada: assertTrue(object1.getAa() instanceof Short, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bean.getAa() instanceof Byte)
nova chamada: assertTrue(bean.getAa() instanceof Byte, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object.getAa() instanceof Byte)
nova chamada: assertTrue(object.getAa() instanceof Byte, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object1.getAa() instanceof Byte)
nova chamada: assertTrue(object1.getAa() instanceof Byte, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bean.getAa() instanceof Float)
nova chamada: assertTrue(bean.getAa() instanceof Float, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object.getAa() instanceof Float)
nova chamada: assertTrue(object.getAa() instanceof Float, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object1.getAa() instanceof Float)
nova chamada: assertTrue(object1.getAa() instanceof Float, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(bean.getAa() instanceof Double)
nova chamada: assertTrue(bean.getAa() instanceof Double, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object.getAa() instanceof Double)
nova chamada: assertTrue(object.getAa() instanceof Double, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(object1.getAa() instanceof Double)
nova chamada: assertTrue(object1.getAa() instanceof Double, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':{\'5\':\'设置成功\'}}' é diferente de " + result4610 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data))
nova chamada: assertEquals("{\"obj\":{\"5\":\"设置成功\"}}", JSONObject.toJSONString(data), "Era esperado valores iguais, mas  '{\'obj\':{\'5\':\'设置成功\'}}' é diferente de " + result4611 + " <JSONObject.toJSONString(data)>")
chamada antiga: assertEquals("xxx", bean.wxId)
nova chamada: assertEquals("xxx", bean.wxId, "Era esperado valores iguais, mas  'xxx' é diferente de " + " bean.wxId")
chamada antiga: assertEquals(true, bean.isSuccess)
nova chamada: assertEquals(true, bean.isSuccess, "Era esperado valores iguais, mas  true é diferente de " + " bean.isSuccess")
chamada antiga: assertEquals(null, bean.params)
nova chamada: assertEquals(null, bean.params, "Era esperado valores iguais, mas  null é diferente de " + " bean.params")
chamada antiga: assertEquals("jhahah", result.getMiddleEntity().getEntity().getName())
nova chamada: assertEquals("jhahah", result.getMiddleEntity().getEntity().getName(), "Era esperado valores iguais, mas  'jhahah' é diferente de " + result4612 + " <result.getMiddleEntity().getEntity().getName()>")
chamada antiga: assertEquals("jhahah", result.getMiddleEntity().getEntity().getName())
nova chamada: assertEquals("jhahah", result.getMiddleEntity().getEntity().getName(), "Era esperado valores iguais, mas  'jhahah' é diferente de " + result4613 + " <result.getMiddleEntity().getEntity().getName()>")
chamada antiga: assertEquals(xx.base.getClass(), x.base.getClass())
nova chamada: assertEquals(xx.base.getClass(), x.base.getClass(), "Era esperado valores iguais, mas " + result4614 + " <xx.base.getClass()> é diferente de " + result4615 + " <x.base.getClass()>")
chamada antiga: assertNull(JSON.parseObject((String) null))
nova chamada: assertNull(JSON.parseObject((String) null), "Era esperado nulo, mas " + result4616 + " <JSON.parseObject((String) null)> não é nulo")
chamada antiga: assertNotNull(jsonObject)
nova chamada: assertNotNull(jsonObject, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("item"))
nova chamada: assertTrue(error.getMessage().contains("item"), "Era esperado verdadeiro, mas " + result4617 + " <error.getMessage().contains('item')> é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("item"))
nova chamada: assertTrue(error.getMessage().contains("item"), "Era esperado verdadeiro, mas " + result4618 + " <error.getMessage().contains('item')> é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().contains("item"))
nova chamada: assertTrue(error.getMessage().contains("item"), "Era esperado verdadeiro, mas " + result4619 + " <error.getMessage().contains('item')> é falso")
chamada antiga: assertEquals("1514499072599498753", bean2.storeRemark.get(0).storeId)
nova chamada: assertEquals("1514499072599498753", bean2.storeRemark.get(0).storeId, "Era esperado valores iguais, mas  '1514499072599498753' é diferente de " + " bean2.storeRemark.get(0).storeId")
chamada antiga: assertEquals("{\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(bean, "millis"))
nova chamada: assertEquals("{\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(bean, "millis"), "Era esperado valores iguais, mas  '{\'timestamp\':\'2017-03-15 12:13:14\'}' é diferente de " + result4620 + " <JSON.toJSONString(bean, 'millis')>")
chamada antiga: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(appResp))
nova chamada: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(appResp), "Era esperado valores iguais, mas  '{\'message\':\'成功\',\'status\':\'200\',\'timestamp\':\'2017-03-15 12:13:14\'}' é diferente de " + result4621 + " <JSON.toJSONString(appResp)>")
chamada antiga: assertEquals(0, JSON.parseObject(str, LongValue1.class).getV0000())
nova chamada: assertEquals(0, JSON.parseObject(str, LongValue1.class).getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result4622 + " <JSON.parseObject(str, LongValue1.class).getV0000()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(user, JSONWriter.Feature.IgnoreNonFieldGetter))
nova chamada: assertEquals("{}", JSON.toJSONString(user, JSONWriter.Feature.IgnoreNonFieldGetter), "Era esperado valores iguais, mas  '{}' é diferente de " + result4623 + " <JSON.toJSONString(user, JSONWriter.Feature.IgnoreNonFieldGetter)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4624 + " <list.size()>")
chamada antiga: assertEquals(date.getTime(), ((Date) result.get("date")).getTime())
nova chamada: assertEquals(date.getTime(), ((Date) result.get("date")).getTime(), "Era esperado valores iguais, mas " + result4625 + " <date.getTime()> é diferente de " + result4626 + " <((Date) result.get('date')).getTime()>")
chamada antiga: assertEquals("{\"user\":{\"score\":[100.0,80.05]}}", root.toString())
nova chamada: assertEquals("{\"user\":{\"score\":[100.0,80.05]}}", root.toString(), "Era esperado valores iguais, mas  '{\'user\':{\'score\':[100.0,80.05]}}' é diferente de " + result4627 + " <root.toString()>")
chamada antiga: assertEquals("{\"s0\":[100.0,80.05]}", root.toString())
nova chamada: assertEquals("{\"s0\":[100.0,80.05]}", root.toString(), "Era esperado valores iguais, mas  '{\'s0\':[100.0,80.05]}' é diferente de " + result4628 + " <root.toString()>")
chamada antiga: assertEquals("{\"s0\":{\"s1\":{\"s2\":[100.0,80.05]}}}", root.toString())
nova chamada: assertEquals("{\"s0\":{\"s1\":{\"s2\":[100.0,80.05]}}}", root.toString(), "Era esperado valores iguais, mas  '{\'s0\':{\'s1\':{\'s2\':[100.0,80.05]}}}' é diferente de " + result4629 + " <root.toString()>")
chamada antiga: assertEquals("\"09:10:00\"", JSON.toJSONString(time))
nova chamada: assertEquals("\"09:10:00\"", JSON.toJSONString(time), "Era esperado valores iguais, mas  '\'09:10:00\'' é diferente de " + result4630 + " <JSON.toJSONString(time)>")
chamada antiga: assertEquals("4200000", JSON.toJSONString(time, "millis"))
nova chamada: assertEquals("4200000", JSON.toJSONString(time, "millis"), "Era esperado valores iguais, mas  '4200000' é diferente de " + result4631 + " <JSON.toJSONString(time, 'millis')>")
chamada antiga: assertEquals("4200", JSON.toJSONString(time, "unixtime"))
nova chamada: assertEquals("4200", JSON.toJSONString(time, "unixtime"), "Era esperado valores iguais, mas  '4200' é diferente de " + result4632 + " <JSON.toJSONString(time, 'unixtime')>")
chamada antiga: assertEquals(time, JSON.parseObject("4200000", LocalTime.class))
nova chamada: assertEquals(time, JSON.parseObject("4200000", LocalTime.class), "Era esperado valores iguais, mas  time é diferente de " + result4633 + " <JSON.parseObject('4200000', LocalTime.class)>")
chamada antiga: assertEquals("{\"time\":\"09:00\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"time\":\"09:00\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'time\':\'09:00\'}' é diferente de " + result4634 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("\"09:00\"", JSON.toJSONString(bean.time, "HH:mm"))
nova chamada: assertEquals("\"09:00\"", JSON.toJSONString(bean.time, "HH:mm"), "Era esperado valores iguais, mas  '\'09:00\'' é diferente de " + result4635 + " <JSON.toJSONString(bean.time, 'HH:mm')>")
chamada antiga: assertEquals("{\"time\":33000000}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"time\":33000000}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'time\':33000000}' é diferente de " + result4636 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":33000}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"time\":33000}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'time\':33000}' é diferente de " + result4637 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals(LocalTime.of(9, 10), bean.time)
nova chamada: assertEquals(LocalTime.of(9, 10), bean.time, "Era esperado valores iguais, mas " + result4638 + " <LocalTime.of(9, 10)> é diferente de " + " bean.time")
chamada antiga: assertEquals(LocalTime.of(9, 10), bean.time)
nova chamada: assertEquals(LocalTime.of(9, 10), bean.time, "Era esperado valores iguais, mas " + result4639 + " <LocalTime.of(9, 10)> é diferente de " + " bean.time")
chamada antiga: assertEquals(LocalTime.of(9, 10), bean.time)
nova chamada: assertEquals(LocalTime.of(9, 10), bean.time, "Era esperado valores iguais, mas " + result4640 + " <LocalTime.of(9, 10)> é diferente de " + " bean.time")
chamada antiga: assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", JSON.toJSONString(object))
nova chamada: assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", JSON.toJSONString(object), "Era esperado valores iguais, mas  '{\'test\':\'Pixel 民\\u0011\\n XL\'}' é diferente de " + result4641 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", jsonStr)
nova chamada: assertEquals("{\"test\":\"Pixel 民\\u0011\\n XL\"}", jsonStr, "Era esperado valores iguais, mas  '{\'test\':\'Pixel 民\\u0011\\n XL\'}' é diferente de " + " jsonStr")
chamada antiga: assertFalse(JSON.isValid(errorJson))
nova chamada: assertFalse(JSON.isValid(errorJson), "Era esperado falso, mas " + result4642 + " <JSON.isValid(errorJson)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(errorJson))
nova chamada: assertFalse(JSON.isValidArray(errorJson), "Era esperado falso, mas " + result4643 + " <JSON.isValidArray(errorJson)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid(errorJson))
nova chamada: assertTrue(JSON.isValid(errorJson), "Era esperado verdadeiro, mas " + result4644 + " <JSON.isValid(errorJson)> é falso")
chamada antiga: assertFalse(valid)
nova chamada: assertFalse(valid, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(valid)
nova chamada: assertTrue(valid, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(JSON.isValid(errorJson))
nova chamada: assertFalse(JSON.isValid(errorJson), "Era esperado falso, mas " + result4645 + " <JSON.isValid(errorJson)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(errorJson))
nova chamada: assertFalse(JSON.isValidArray(errorJson), "Era esperado falso, mas " + result4646 + " <JSON.isValidArray(errorJson)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid(errorJson))
nova chamada: assertTrue(JSON.isValid(errorJson), "Era esperado verdadeiro, mas " + result4647 + " <JSON.isValid(errorJson)> é falso")
chamada antiga: assertFalse(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII))
nova chamada: assertFalse(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII), "Era esperado falso, mas " + result4648 + " <JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(errorJson))
nova chamada: assertFalse(JSON.isValidArray(errorJson), "Era esperado falso, mas " + result4649 + " <JSON.isValidArray(errorJson)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII))
nova chamada: assertTrue(JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII), "Era esperado verdadeiro, mas " + result4650 + " <JSON.isValid(errorJson, 0, errorJson.length, StandardCharsets.US_ASCII)> é falso")
chamada antiga: assertEquals("{\"c\":\"c\",\"a\":{\"b\":\"123\"}}", jsonObject.toJSONString())
nova chamada: assertEquals("{\"c\":\"c\",\"a\":{\"b\":\"123\"}}", jsonObject.toJSONString(), "Era esperado valores iguais, mas  '{\'c\':\'c\',\'a\':{\'b\':\'123\'}}' é diferente de " + result4651 + " <jsonObject.toJSONString()>")
chamada antiga: assertEquals("{1:111,2:222}", json)
nova chamada: assertEquals("{1:111,2:222}", json, "Era esperado valores iguais, mas  '{1:111,2:222}' é diferente de " + " json")
chamada antiga: assertEquals(111L, map1.get(1))
nova chamada: assertEquals(111L, map1.get(1), "Era esperado valores iguais, mas  111L é diferente de " + result4652 + " <map1.get(1)>")
chamada antiga: assertEquals(222L, map1.get(2))
nova chamada: assertEquals(222L, map1.get(2), "Era esperado valores iguais, mas  222L é diferente de " + result4653 + " <map1.get(2)>")
chamada antiga: assertEquals("111", map2.get(1))
nova chamada: assertEquals("111", map2.get(1), "Era esperado valores iguais, mas  '111' é diferente de " + result4654 + " <map2.get(1)>")
chamada antiga: assertEquals("222", map2.get(2))
nova chamada: assertEquals("222", map2.get(2), "Era esperado valores iguais, mas  '222' é diferente de " + result4655 + " <map2.get(2)>")
chamada antiga: assertEquals((short) 111, map3.get(1L))
nova chamada: assertEquals((short) 111, map3.get(1L), "Era esperado valores iguais, mas  (short) 111 é diferente de " + result4656 + " <map3.get(1L)>")
chamada antiga: assertEquals((short) 222, map3.get(2L))
nova chamada: assertEquals((short) 222, map3.get(2L), "Era esperado valores iguais, mas  (short) 222 é diferente de " + result4657 + " <map3.get(2L)>")
chamada antiga: assertEquals(458647883248488448L, jsonObject.getLongValue("log_id"))
nova chamada: assertEquals(458647883248488448L, jsonObject.getLongValue("log_id"), "Era esperado valores iguais, mas  458647883248488448L é diferente de " + result4658 + " <jsonObject.getLongValue('log_id')>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(object1, object)
nova chamada: assertEquals(object1, object, "Era esperado valores iguais, mas  object1 é diferente de " + " object")
chamada antiga: assertTrue(jsonReader.nextIfObjectStart())
nova chamada: assertTrue(jsonReader.nextIfObjectStart(), "Era esperado verdadeiro, mas " + result4659 + " <jsonReader.nextIfObjectStart()> é falso")
chamada antiga: assertEquals(Fnv.hashCode64(key), jsonReader.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64(key), jsonReader.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result4660 + " <Fnv.hashCode64(key)> é diferente de " + result4661 + " <jsonReader.readFieldNameHashCode()>")
chamada antiga: assertEquals(key, jsonReader.getFieldName())
nova chamada: assertEquals(key, jsonReader.getFieldName(), "Era esperado valores iguais, mas  key é diferente de " + result4662 + " <jsonReader.getFieldName()>")
chamada antiga: assertEquals(object1, object)
nova chamada: assertEquals(object1, object, "Era esperado valores iguais, mas  object1 é diferente de " + " object")
chamada antiga: assertTrue(jsonReader.nextIfObjectStart())
nova chamada: assertTrue(jsonReader.nextIfObjectStart(), "Era esperado verdadeiro, mas " + result4663 + " <jsonReader.nextIfObjectStart()> é falso")
chamada antiga: assertEquals(Fnv.hashCode64("@type"), jsonReader.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("@type"), jsonReader.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result4664 + " <Fnv.hashCode64('@type')> é diferente de " + result4665 + " <jsonReader.readFieldNameHashCode()>")
chamada antiga: assertEquals("@type", jsonReader.getFieldName())
nova chamada: assertEquals("@type", jsonReader.getFieldName(), "Era esperado valores iguais, mas  '@type' é diferente de " + result4666 + " <jsonReader.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64(key), jsonReader.readValueHashCode())
nova chamada: assertEquals(Fnv.hashCode64(key), jsonReader.readValueHashCode(), "Era esperado valores iguais, mas " + result4667 + " <Fnv.hashCode64(key)> é diferente de " + result4668 + " <jsonReader.readValueHashCode()>")
chamada antiga: assertEquals(key, jsonReader.getString())
nova chamada: assertEquals(key, jsonReader.getString(), "Era esperado valores iguais, mas  key é diferente de " + result4669 + " <jsonReader.getString()>")
chamada antiga: assertTrue(jsonReader.nextIfObjectEnd())
nova chamada: assertTrue(jsonReader.nextIfObjectEnd(), "Era esperado verdadeiro, mas " + result4670 + " <jsonReader.nextIfObjectEnd()> é falso")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4671 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4672 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4673 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4674 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4675 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertEquals(object, JSONB.parseObject(bytes))
nova chamada: assertEquals(object, JSONB.parseObject(bytes), "Era esperado valores iguais, mas  object é diferente de " + result4676 + " <JSONB.parseObject(bytes)>")
chamada antiga: assertNull(JSONB.parseObject(null, A.class, null, new Filter[0]))
nova chamada: assertNull(JSONB.parseObject(null, A.class, null, new Filter[0]), "Era esperado nulo, mas " + result4677 + " <JSONB.parseObject(null, A.class, null, new Filter[0])> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(new byte[0], A.class, null, new Filter[0]))
nova chamada: assertNull(JSONB.parseObject(new byte[0], A.class, null, new Filter[0]), "Era esperado nulo, mas " + result4678 + " <JSONB.parseObject(new byte[0], A.class, null, new Filter[0])> não é nulo")
chamada antiga: assertEquals(1, symbolTable.size())
nova chamada: assertEquals(1, symbolTable.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4679 + " <symbolTable.size()>")
chamada antiga: assertEquals(bean.getV0000(), bean1.getV0000())
nova chamada: assertEquals(bean.getV0000(), bean1.getV0000(), "Era esperado valores iguais, mas " + result4680 + " <bean.getV0000()> é diferente de " + result4681 + " <bean1.getV0000()>")
chamada antiga: assertEquals(bean.getV0000(), bean1.getV0000())
nova chamada: assertEquals(bean.getV0000(), bean1.getV0000(), "Era esperado valores iguais, mas " + result4682 + " <bean.getV0000()> é diferente de " + result4683 + " <bean1.getV0000()>")
chamada antiga: assertEquals(2, symbolTable.size())
nova chamada: assertEquals(2, symbolTable.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4684 + " <symbolTable.size()>")
chamada antiga: assertEquals(hash("id", "name"), symbolTable.hashCode64())
nova chamada: assertEquals(hash("id", "name"), symbolTable.hashCode64(), "Era esperado valores iguais, mas " + result4685 + " <hash('id', 'name')> é diferente de " + result4686 + " <symbolTable.hashCode64()>")
chamada antiga: assertTrue(JSONReader.ofJSONB(JSONB.toBytes("")).nextIfNullOrEmptyString())
nova chamada: assertTrue(JSONReader.ofJSONB(JSONB.toBytes("")).nextIfNullOrEmptyString(), "Era esperado verdadeiro, mas " + result4687 + " <JSONReader.ofJSONB(JSONB.toBytes('')).nextIfNullOrEmptyString()> é falso")
chamada antiga: assertEquals(text, JSON.toJSONString(user))
nova chamada: assertEquals(text, JSON.toJSONString(user), "Era esperado valores iguais, mas  text é diferente de " + result4688 + " <JSON.toJSONString(user)>")
chamada antiga: assertEquals(user.id, user1.id)
nova chamada: assertEquals(user.id, user1.id, "Era esperado valores iguais, mas  user.id é diferente de " + " user1.id")
chamada antiga: assertEquals(user.name, user1.name)
nova chamada: assertEquals(user.name, user1.name, "Era esperado valores iguais, mas  user.name é diferente de " + " user1.name")
chamada antiga: assertEquals(text, JSON.toJSONString(users))
nova chamada: assertEquals(text, JSON.toJSONString(users), "Era esperado valores iguais, mas  text é diferente de " + result4689 + " <JSON.toJSONString(users)>")
chamada antiga: assertEquals(1, user.id)
nova chamada: assertEquals(1, user.id, "Era esperado valores iguais, mas  1 é diferente de " + " user.id")
chamada antiga: assertEquals("kraity", user.name)
nova chamada: assertEquals("kraity", user.name, "Era esperado valores iguais, mas  'kraity' é diferente de " + " user.name")
chamada antiga: assertEquals(1, users.size())
nova chamada: assertEquals(1, users.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4690 + " <users.size()>")
chamada antiga: assertEquals(1, users.get(0).id)
nova chamada: assertEquals(1, users.get(0).id, "Era esperado valores iguais, mas  1 é diferente de " + " users.get(0).id")
chamada antiga: assertEquals("kraity", users.get(0).name)
nova chamada: assertEquals("kraity", users.get(0).name, "Era esperado valores iguais, mas  'kraity' é diferente de " + " users.get(0).name")
chamada antiga: assertTrue(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls))
nova chamada: assertTrue(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls), "Era esperado verdadeiro, mas " + result4691 + " <jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls)> é falso")
chamada antiga: assertTrue(jsonWriter.getContext().isEnabled(JSONWriter.Feature.WriteNulls))
nova chamada: assertTrue(jsonWriter.getContext().isEnabled(JSONWriter.Feature.WriteNulls), "Era esperado verdadeiro, mas " + result4692 + " <jsonWriter.getContext().isEnabled(JSONWriter.Feature.WriteNulls)> é falso")
chamada antiga: assertTrue(JSONWriter.ofUTF8().isUTF8())
nova chamada: assertTrue(JSONWriter.ofUTF8().isUTF8(), "Era esperado verdadeiro, mas " + result4693 + " <JSONWriter.ofUTF8().isUTF8()> é falso")
chamada antiga: assertTrue(JSONWriter.ofUTF16().isUTF16())
nova chamada: assertTrue(JSONWriter.ofUTF16().isUTF16(), "Era esperado verdadeiro, mas " + result4694 + " <JSONWriter.ofUTF16().isUTF16()> é falso")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4695 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4696 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4697 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4698 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4699 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4700 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4701 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4702 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4703 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4704 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4705 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4706 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4707 + " <str.length()>")
chamada antiga: assertEquals(COUNT, str.length())
nova chamada: assertEquals(COUNT, str.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result4708 + " <str.length()>")
chamada antiga: assertEquals("[0.0,1.0]", jsonWriter.toString())
nova chamada: assertEquals("[0.0,1.0]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[0.0,1.0]' é diferente de " + result4709 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[0.0,1.0]", jsonWriter.toString())
nova chamada: assertEquals("[0.0,1.0]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[0.0,1.0]' é diferente de " + result4710 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString())
nova chamada: assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'values\':[{\'$ref\':\'values\'}]}' é diferente de " + result4711 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString())
nova chamada: assertEquals("{\"values\":[{\"$ref\":\"values\"}]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'values\':[{\'$ref\':\'values\'}]}' é diferente de " + result4712 + " <jsonWriter.toString()>")
chamada antiga: assertNull(jsonWriter.getSymbolTable())
nova chamada: assertNull(jsonWriter.getSymbolTable(), "Era esperado nulo, mas " + result4713 + " <jsonWriter.getSymbolTable()> não é nulo")
chamada antiga: assertEquals("1", jsonWriter.toString())
nova chamada: assertEquals("1", jsonWriter.toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result4714 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("1", new String(out.toByteArray()))
nova chamada: assertEquals("1", new String(out.toByteArray()), "Era esperado valores iguais, mas  '1' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("101", jsonWriter.toString())
nova chamada: assertEquals("101", jsonWriter.toString(), "Era esperado valores iguais, mas  '101' é diferente de " + result4715 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("101", new String(out.toByteArray()))
nova chamada: assertEquals("101", new String(out.toByteArray()), "Era esperado valores iguais, mas  '101' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4716 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4717 + " <writer.toString()>")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4718 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4719 + " <writer.toString()>")
chamada antiga: assertEquals("\"id\"", jsonWriter.toString())
nova chamada: assertEquals("\"id\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'id\'' é diferente de " + result4720 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"id\"", writer.toString())
nova chamada: assertEquals("\"id\"", writer.toString(), "Era esperado valores iguais, mas  '\'id\'' é diferente de " + result4721 + " <writer.toString()>")
chamada antiga: assertNull(context.getPropertyPreFilter())
nova chamada: assertNull(context.getPropertyPreFilter(), "Era esperado nulo, mas " + result4722 + " <context.getPropertyPreFilter()> não é nulo")
chamada antiga: assertNull(context.getNameFilter())
nova chamada: assertNull(context.getNameFilter(), "Era esperado nulo, mas " + result4723 + " <context.getNameFilter()> não é nulo")
chamada antiga: assertNull(context.getValueFilter())
nova chamada: assertNull(context.getValueFilter(), "Era esperado nulo, mas " + result4724 + " <context.getValueFilter()> não é nulo")
chamada antiga: assertNull(context.getPropertyFilter())
nova chamada: assertNull(context.getPropertyFilter(), "Era esperado nulo, mas " + result4725 + " <context.getPropertyFilter()> não é nulo")
chamada antiga: assertNull(context.getContextValueFilter())
nova chamada: assertNull(context.getContextValueFilter(), "Era esperado nulo, mas " + result4726 + " <context.getContextValueFilter()> não é nulo")
chamada antiga: assertNull(context.getContextNameFilter())
nova chamada: assertNull(context.getContextNameFilter(), "Era esperado nulo, mas " + result4727 + " <context.getContextNameFilter()> não é nulo")
chamada antiga: assertNull(context.getAfterFilter())
nova chamada: assertNull(context.getAfterFilter(), "Era esperado nulo, mas " + result4728 + " <context.getAfterFilter()> não é nulo")
chamada antiga: assertNull(context.getBeforeFilter())
nova chamada: assertNull(context.getBeforeFilter(), "Era esperado nulo, mas " + result4729 + " <context.getBeforeFilter()> não é nulo")
chamada antiga: assertNull(context.getLabelFilter())
nova chamada: assertNull(context.getLabelFilter(), "Era esperado nulo, mas " + result4730 + " <context.getLabelFilter()> não é nulo")
chamada antiga: assertArrayEquals(new byte[] { '"', 'a', '"' }, jsonWriter.getBytes())
nova chamada: assertArrayEquals(new byte[] { '"', 'a', '"' }, jsonWriter.getBytes(), "Era esperado arrays iguais, mas  new byte[] { ''', 'a', ''' } é diferente de " + result4731 + " <jsonWriter.getBytes()>")
chamada antiga: assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask))
nova chamada: assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask), "Era esperado verdadeiro, mas " + result4732 + " <jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask)> é falso")
chamada antiga: assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask))
nova chamada: assertTrue(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask), "Era esperado verdadeiro, mas " + result4733 + " <jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask)> é falso")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4734 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4735 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[1,2,3]", jsonWriter.toString())
nova chamada: assertEquals("[1,2,3]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result4736 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(1, JSONB.parse(bytes))
nova chamada: assertEquals(1, JSONB.parse(bytes), "Era esperado valores iguais, mas  1 é diferente de " + result4737 + " <JSONB.parse(bytes)>")
chamada antiga: assertEquals("$.A", new JSONWriter.Path(ROOT, "A").toString())
nova chamada: assertEquals("$.A", new JSONWriter.Path(ROOT, "A").toString(), "Era esperado valores iguais, mas  '$.A' é diferente de " + result4738 + " <new JSONWriter.Path(ROOT, 'A').toString()>")
chamada antiga: assertEquals("$.ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE", new JSONWriter.Path(ROOT, "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE").toString())
nova chamada: assertEquals("$.ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE", new JSONWriter.Path(ROOT, "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE").toString(), "Era esperado valores iguais, mas  '$.ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE' é diferente de " + result4739 + " <new JSONWriter.Path(ROOT, 'ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE').toString()>")
chamada antiga: assertEquals("$.中", new JSONWriter.Path(ROOT, "中").toString())
nova chamada: assertEquals("$.中", new JSONWriter.Path(ROOT, "中").toString(), "Era esperado valores iguais, mas  '$.中' é diferente de " + result4740 + " <new JSONWriter.Path(ROOT, '中').toString()>")
chamada antiga: assertEquals("$.中中中中中中中中中中中中中中中中中中中中中中中中中", new JSONWriter.Path(ROOT, "中中中中中中中中中中中中中中中中中中中中中中中中中").toString())
nova chamada: assertEquals("$.中中中中中中中中中中中中中中中中中中中中中中中中中", new JSONWriter.Path(ROOT, "中中中中中中中中中中中中中中中中中中中中中中中中中").toString(), "Era esperado valores iguais, mas  '$.中中中中中中中中中中中中中中中中中中中中中中中中中' é diferente de " + result4741 + " <new JSONWriter.Path(ROOT, '中中中中中中中中中中中中中中中中中中中中中中中中中').toString()>")
chamada antiga: assertEquals("$.\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B").toString())
nova chamada: assertEquals("$.\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B").toString(), "Era esperado valores iguais, mas  '$.\uD83D\uDE0B' é diferente de " + result4742 + " <new JSONWriter.Path(ROOT, '\uD83D\uDE0B').toString()>")
chamada antiga: assertEquals("$.\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B").toString())
nova chamada: assertEquals("$.\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B", new JSONWriter.Path(ROOT, "\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B").toString(), "Era esperado valores iguais, mas  '$.\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B' é diferente de " + result4743 + " <new JSONWriter.Path(ROOT, '\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B\uD83D\uDE0B').toString()>")
chamada antiga: assertEquals("$.Ɛ", new JSONWriter.Path(ROOT, "Ɛ").toString())
nova chamada: assertEquals("$.Ɛ", new JSONWriter.Path(ROOT, "Ɛ").toString(), "Era esperado valores iguais, mas  '$.Ɛ' é diferente de " + result4744 + " <new JSONWriter.Path(ROOT, 'Ɛ').toString()>")
chamada antiga: assertEquals("$.ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ", new JSONWriter.Path(ROOT, "ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ").toString())
nova chamada: assertEquals("$.ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ", new JSONWriter.Path(ROOT, "ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ").toString(), "Era esperado valores iguais, mas  '$.ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ' é diferente de " + result4745 + " <new JSONWriter.Path(ROOT, 'ƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐƐ').toString()>")
chamada antiga: assertEquals("$.?", new JSONWriter.Path(ROOT, "\uDC00").toString())
nova chamada: assertEquals("$.?", new JSONWriter.Path(ROOT, "\uDC00").toString(), "Era esperado valores iguais, mas  '$.?' é diferente de " + result4746 + " <new JSONWriter.Path(ROOT, '\uDC00').toString()>")
chamada antiga: assertEquals(result, array.toString())
nova chamada: assertEquals(result, array.toString(), "Era esperado valores iguais, mas  result é diferente de " + result4747 + " <array.toString()>")
chamada antiga: assertEquals(prettyResult, array.toString(PrettyFormat))
nova chamada: assertEquals(prettyResult, array.toString(PrettyFormat), "Era esperado valores iguais, mas  prettyResult é diferente de " + result4748 + " <array.toString(PrettyFormat)>")
chamada antiga: assertEquals(prettyResult, JSONB.toJSONString(array.toJSONBBytes()))
nova chamada: assertEquals(prettyResult, JSONB.toJSONString(array.toJSONBBytes()), "Era esperado valores iguais, mas  prettyResult é diferente de " + result4749 + " <JSONB.toJSONString(array.toJSONBBytes())>")
chamada antiga: assertEquals(result, object.toString())
nova chamada: assertEquals(result, object.toString(), "Era esperado valores iguais, mas  result é diferente de " + result4750 + " <object.toString()>")
chamada antiga: assertEquals(prettyResult, object.toString(PrettyFormat))
nova chamada: assertEquals(prettyResult, object.toString(PrettyFormat), "Era esperado valores iguais, mas  prettyResult é diferente de " + result4751 + " <object.toString(PrettyFormat)>")
chamada antiga: assertEquals(result, object.toString())
nova chamada: assertEquals(result, object.toString(), "Era esperado valores iguais, mas  result é diferente de " + result4752 + " <object.toString()>")
chamada antiga: assertEquals(prettyResult, object.toString(PrettyFormat))
nova chamada: assertEquals(prettyResult, object.toString(PrettyFormat), "Era esperado valores iguais, mas  prettyResult é diferente de " + result4753 + " <object.toString(PrettyFormat)>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.JSONWriterTest$A#0\",\n" + "\t\"@value\":{\n" + "\t\t\"id\":1001,\n" + "\t\t\"value\":{\n" + "\t\t\t\"@type\":\"#0\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"id\":1002\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.JSONWriterTest$A#0\",\n" + "\t\"@value\":{\n" + "\t\t\"id\":1001,\n" + "\t\t\"value\":{\n" + "\t\t\t\"@type\":\"#0\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"id\":1002\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.JSONWriterTest$A#0\',\n' + '\t\'@value\':{\n' + '\t\t\'id\':1001,\n' + '\t\t\'value\':{\n' + '\t\t\t\'@type\':\'#0\',\n' + '\t\t\t\'@value\':{\n' + '\t\t\t\t\'id\':1002\n' + '\t\t\t}\n' + '\t\t}\n' + '\t}\n' + '}' é diferente de " + result4754 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.id, o.id)
nova chamada: assertEquals(a.id, o.id, "Era esperado valores iguais, mas  a.id é diferente de " + " o.id")
chamada antiga: assertEquals(((A) a.value).id, ((A) o.value).id)
nova chamada: assertEquals(((A) a.value).id, ((A) o.value).id, "Era esperado valores iguais, mas  ((A) a.value).id é diferente de " + " ((A) o.value).id")
chamada antiga: assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4755 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.id, o.id)
nova chamada: assertEquals(a.id, o.id, "Era esperado valores iguais, mas  a.id é diferente de " + " o.id")
chamada antiga: assertEquals(a1.id, ((JSONObject) o.value).getIntValue("id"))
nova chamada: assertEquals(a1.id, ((JSONObject) o.value).getIntValue("id"), "Era esperado valores iguais, mas  a1.id é diferente de " + result4756 + " <((JSONObject) o.value).getIntValue('id')>")
chamada antiga: assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4757 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.id, root.getIntValue("id"))
nova chamada: assertEquals(a.id, root.getIntValue("id"), "Era esperado valores iguais, mas  a.id é diferente de " + result4758 + " <root.getIntValue('id')>")
chamada antiga: assertEquals(a1.id, root.getJSONObject("value").getIntValue("id"))
nova chamada: assertEquals(a1.id, root.getJSONObject("value").getIntValue("id"), "Era esperado valores iguais, mas  a1.id é diferente de " + result4759 + " <root.getJSONObject('value').getIntValue('id')>")
chamada antiga: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'a1234567890id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4760 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"))
nova chamada: assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"), "Era esperado valores iguais, mas  a.a1234567890id é diferente de " + result4761 + " <root.getIntValue('a1234567890id')>")
chamada antiga: assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"))
nova chamada: assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"), "Era esperado valores iguais, mas  a1.a1234567890id é diferente de " + result4762 + " <root.getJSONObject('value').getIntValue('a1234567890id')>")
chamada antiga: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'a1234567890id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4763 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"))
nova chamada: assertEquals(a.a1234567890id, root.getIntValue("a1234567890id"), "Era esperado valores iguais, mas  a.a1234567890id é diferente de " + result4764 + " <root.getIntValue('a1234567890id')>")
chamada antiga: assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"))
nova chamada: assertEquals(a1.a1234567890id, root.getJSONObject("value").getIntValue("a1234567890id"), "Era esperado valores iguais, mas  a1.a1234567890id é diferente de " + result4765 + " <root.getJSONObject('value').getIntValue('a1234567890id')>")
chamada antiga: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'a1234567890id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4766 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.a1234567890id, o.a1234567890id)
nova chamada: assertEquals(a.a1234567890id, o.a1234567890id, "Era esperado valores iguais, mas  a.a1234567890id é diferente de " + " o.a1234567890id")
chamada antiga: assertEquals(a1.a1234567890id, o.value.a1234567890id)
nova chamada: assertEquals(a1.a1234567890id, o.value.a1234567890id, "Era esperado valores iguais, mas  a1.a1234567890id é diferente de " + " o.value.a1234567890id")
chamada antiga: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"a1234567890id#0\":1001,\n" + "\t\"value#1\":{\n" + "\t\t\"#0\":1002\n" + "\t}\n" + "}", new JSONBDump(jsonbBytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'a1234567890id#0\':1001,\n' + '\t\'value#1\':{\n' + '\t\t\'#0\':1002\n' + '\t}\n' + '}' é diferente de " + result4767 + " <new JSONBDump(jsonbBytes, true).toString()>")
chamada antiga: assertEquals(a.a1234567890id, o.a1234567890id)
nova chamada: assertEquals(a.a1234567890id, o.a1234567890id, "Era esperado valores iguais, mas  a.a1234567890id é diferente de " + " o.a1234567890id")
chamada antiga: assertEquals(a1.a1234567890id, o.value.a1234567890id)
nova chamada: assertEquals(a1.a1234567890id, o.value.a1234567890id, "Era esperado valores iguais, mas  a1.a1234567890id é diferente de " + " o.value.a1234567890id")
chamada antiga: assertEquals("{\"a\":{},\"b\":{}}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"a\":{},\"b\":{}}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'a\':{},\'b\':{}}' é diferente de " + result4768 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"a\":{}}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNoneSerializable))
nova chamada: assertEquals("{\"a\":{}}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNoneSerializable), "Era esperado valores iguais, mas  '{\'a\':{}}' é diferente de " + result4769 + " <JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNoneSerializable)>")
chamada antiga: assertNotNull(bean.a)
nova chamada: assertNotNull(bean.a, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.b)
nova chamada: assertNotNull(bean.b, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.a)
nova chamada: assertNotNull(bean2.a, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean2.b)
nova chamada: assertNull(bean2.b, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)))
nova chamada: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean)), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{},\n' + '\t\'b\':{}\n' + '}' é diferente de " + result4770 + " <JSONB.toJSONString(JSONB.toBytes(bean))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable)))
nova chamada: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable)), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{}\n' + '}' é diferente de " + result4771 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable), JSONB.symbolTable("id")))
nova chamada: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable), JSONB.symbolTable("id")), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{}\n' + '}' é diferente de " + result4772 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable), JSONB.symbolTable('id'))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)))
nova chamada: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{},\n' + '\t\'b\':{}\n' + '}' é diferente de " + result4773 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)))
nova chamada: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{}\n' + '}' é diferente de " + result4774 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased), JSONB.symbolTable("id")))
nova chamada: assertEquals("{\n" + "\t\"a\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased), JSONB.symbolTable("id")), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{}\n' + '}' é diferente de " + result4775 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased), JSONB.symbolTable('id'))>")
chamada antiga: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)))
nova chamada: assertEquals("{\n" + "\t\"a\":{},\n" + "\t\"b\":{}\n" + "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased)), "Era esperado valores iguais, mas  '{\n' + '\t\'a\':{},\n' + '\t\'b\':{}\n' + '}' é diferente de " + result4776 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.FieldBased))>")
chamada antiga: assertEquals("null", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)))
nova chamada: assertEquals("null", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased)), "Era esperado valores iguais, mas  'null' é diferente de " + result4777 + " <JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable, JSONWriter.Feature.FieldBased))>")
chamada antiga: assertEquals("{\"value\":{}}", JSON.toJSONString(object))
nova chamada: assertEquals("{\"value\":{}}", JSON.toJSONString(object), "Era esperado valores iguais, mas  '{\'value\':{}}' é diferente de " + result4778 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("{\"value\":null}", JSON.toJSONString(object, JSONWriter.Feature.IgnoreNoneSerializable))
nova chamada: assertEquals("{\"value\":null}", JSON.toJSONString(object, JSONWriter.Feature.IgnoreNoneSerializable), "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + result4779 + " <JSON.toJSONString(object, JSONWriter.Feature.IgnoreNoneSerializable)>")
chamada antiga: assertEquals("{\n" + "\t\"value\":{}\n" + "}", JSONB.toJSONString(object.toJSONBBytes()))
nova chamada: assertEquals("{\n" + "\t\"value\":{}\n" + "}", JSONB.toJSONString(object.toJSONBBytes()), "Era esperado valores iguais, mas  '{\n' + '\t\'value\':{}\n' + '}' é diferente de " + result4780 + " <JSONB.toJSONString(object.toJSONBBytes())>")
chamada antiga: assertEquals("{\n" + "\t\"value\":null\n" + "}", JSONB.toJSONString(object.toJSONBBytes(JSONWriter.Feature.IgnoreNoneSerializable)))
nova chamada: assertEquals("{\n" + "\t\"value\":null\n" + "}", JSONB.toJSONString(object.toJSONBBytes(JSONWriter.Feature.IgnoreNoneSerializable)), "Era esperado valores iguais, mas  '{\n' + '\t\'value\':null\n' + '}' é diferente de " + result4781 + " <JSONB.toJSONString(object.toJSONBBytes(JSONWriter.Feature.IgnoreNoneSerializable))>")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Date.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Date.class), "Era esperado não nulo, mas " + result4782 + " <JSONObject.of('date', '0000-00-00').getObject('date', Date.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Timestamp.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Timestamp.class), "Era esperado não nulo, mas " + result4783 + " <JSONObject.of('date', '0000-00-00').getObject('date', Timestamp.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Time.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00").getObject("date", Time.class), "Era esperado não nulo, mas " + result4784 + " <JSONObject.of('date', '0000-00-00').getObject('date', Time.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Date.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Date.class), "Era esperado não nulo, mas " + result4785 + " <JSONObject.of('date', '0000-00-00 00:00:00').getObject('date', Date.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Timestamp.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Timestamp.class), "Era esperado não nulo, mas " + result4786 + " <JSONObject.of('date', '0000-00-00 00:00:00').getObject('date', Timestamp.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Time.class))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").getObject("date", Time.class), "Era esperado não nulo, mas " + result4787 + " <JSONObject.of('date', '0000-00-00 00:00:00').getObject('date', Time.class)> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Date>>() {
}.getType()))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Date>>() {
}.getType()), "Era esperado não nulo, mas " + result4788 + " <JSONObject.of('date', '0000-00-00 00:00:00').toJavaObject(new TypeReference<Bean<Date>>() {\n}.getType())> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Timestamp>>() {
}.getType()))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Timestamp>>() {
}.getType()), "Era esperado não nulo, mas " + result4789 + " <JSONObject.of('date', '0000-00-00 00:00:00').toJavaObject(new TypeReference<Bean<Timestamp>>() {\n}.getType())> é nulo")
chamada antiga: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Time>>() {
}.getType()))
nova chamada: assertNotNull(JSONObject.of("date", "0000-00-00 00:00:00").toJavaObject(new TypeReference<Bean<Time>>() {
}.getType()), "Era esperado não nulo, mas " + result4790 + " <JSONObject.of('date', '0000-00-00 00:00:00').toJavaObject(new TypeReference<Bean<Time>>() {\n}.getType())> é nulo")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result4791 + " <bean.getId()>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4792 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4793 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4794 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4795 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4796 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4797 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4798 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4799 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4800 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4801 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4802 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4803 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4804 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4805 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4806 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4807 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4808 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4809 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4810 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4811 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4812 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4813 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4814 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4815 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4816 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4817 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4818 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4819 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4820 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4821 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4822 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4823 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4824 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4825 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4826 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4827 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4828 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4829 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4830 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4831 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4832 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4833 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":12.34}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':12.34}' é diferente de " + result4834 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[12.34]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result4835 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4836 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4837 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4838 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4839 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4840 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4841 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4842 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4843 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4844 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4845 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4846 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4847 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4848 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4849 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4850 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4851 + " <JSON.toJSONString(bean, JSONWriter.Feature.FieldBased, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4852 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4853 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4854 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4855 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4856 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4857 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4858 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4859 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4860 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4861 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4862 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4863 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4864 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4865 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"value\":[12.34]}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'value\':[12.34]}' é diferente de " + result4866 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[12.34]]", JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[12.34]]' é diferente de " + result4867 + " <JSON.toJSONString(bean, JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().intValue(), v.getValue().intValue())
nova chamada: assertEquals(v1.getValue().intValue(), v.getValue().intValue(), "Era esperado valores iguais, mas " + result4868 + " <v1.getValue().intValue()> é diferente de " + result4869 + " <v.getValue().intValue()>")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.value.intValue(), v.value.intValue())
nova chamada: assertEquals(v1.value.intValue(), v.value.intValue(), "Era esperado valores iguais, mas " + result4870 + " <v1.value.intValue()> é diferente de " + result4871 + " <v.value.intValue()>")
chamada antiga: assertEquals("{\"value\":{\"id\":123}}", text)
nova chamada: assertEquals("{\"value\":{\"id\":123}}", text, "Era esperado valores iguais, mas  '{\'value\':{\'id\':123}}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().get().id, v.getValue().get().id)
nova chamada: assertEquals(v1.getValue().get().id, v.getValue().get().id, "Era esperado valores iguais, mas  v1.getValue().get().id é diferente de " + " v.getValue().get().id")
chamada antiga: assertEquals("{\"value\":{\"id\":123}}", text)
nova chamada: assertEquals("{\"value\":{\"id\":123}}", text, "Era esperado valores iguais, mas  '{\'value\':{\'id\':123}}' é diferente de " + " text")
chamada antiga: assertEquals(v1.value.get().id, v.value.get().id)
nova chamada: assertEquals(v1.value.get().id, v.value.get().id, "Era esperado valores iguais, mas  v1.value.get().id é diferente de " + " v.value.get().id")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result4872 + " <v1.getValue()> é diferente de " + result4873 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":[1,2]}", text)
nova chamada: assertEquals("{\"value\":[1,2]}", text, "Era esperado valores iguais, mas  '{\'value\':[1,2]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().intValue(), v.getValue().intValue())
nova chamada: assertEquals(v1.getValue().intValue(), v.getValue().intValue(), "Era esperado valores iguais, mas " + result4874 + " <v1.getValue().intValue()> é diferente de " + result4875 + " <v.getValue().intValue()>")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.value.intValue(), v.value.intValue())
nova chamada: assertEquals(v1.value.intValue(), v.value.intValue(), "Era esperado valores iguais, mas " + result4876 + " <v1.value.intValue()> é diferente de " + result4877 + " <v.value.intValue()>")
chamada antiga: assertEquals("{\"value\":{\"id\":123}}", text)
nova chamada: assertEquals("{\"value\":{\"id\":123}}", text, "Era esperado valores iguais, mas  '{\'value\':{\'id\':123}}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().get().id, v.getValue().get().id)
nova chamada: assertEquals(v1.getValue().get().id, v.getValue().get().id, "Era esperado valores iguais, mas  v1.getValue().get().id é diferente de " + " v.getValue().get().id")
chamada antiga: assertEquals(v1.getValue().get().id, v.getValue().get().id)
nova chamada: assertEquals(v1.getValue().get().id, v.getValue().get().id, "Era esperado valores iguais, mas  v1.getValue().get().id é diferente de " + " v.getValue().get().id")
chamada antiga: assertEquals("{\"value\":{\"id\":123}}", text)
nova chamada: assertEquals("{\"value\":{\"id\":123}}", text, "Era esperado valores iguais, mas  '{\'value\':{\'id\':123}}' é diferente de " + " text")
chamada antiga: assertEquals(v1.value.get().id, v.value.get().id)
nova chamada: assertEquals(v1.value.get().id, v.value.get().id, "Era esperado valores iguais, mas  v1.value.get().id é diferente de " + " v.value.get().id")
chamada antiga: assertEquals(v1.value.get().id, v.value.get().id)
nova chamada: assertEquals(v1.value.get().id, v.value.get().id, "Era esperado valores iguais, mas  v1.value.get().id é diferente de " + " v.value.get().id")
chamada antiga: assertEquals("{\"value\":true}", text)
nova chamada: assertEquals("{\"value\":true}", text, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().get(), v.getValue().get())
nova chamada: assertEquals(v1.getValue().get(), v.getValue().get(), "Era esperado valores iguais, mas " + result4878 + " <v1.getValue().get()> é diferente de " + result4879 + " <v.getValue().get()>")
chamada antiga: assertEquals("{\"value\":true}", text)
nova chamada: assertEquals("{\"value\":true}", text, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " text")
chamada antiga: assertEquals(v1.value.get(), v.value.get())
nova chamada: assertEquals(v1.value.get(), v.value.get(), "Era esperado valores iguais, mas " + result4880 + " <v1.value.get()> é diferente de " + result4881 + " <v.value.get()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result4882 + " <v1.getValue()> é diferente de " + result4883 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":[1,2]}", text)
nova chamada: assertEquals("{\"value\":[1,2]}", text, "Era esperado valores iguais, mas  '{\'value\':[1,2]}' é diferente de " + " text")
chamada antiga: assertEquals(a.getClass(), a1.getClass())
nova chamada: assertEquals(a.getClass(), a1.getClass(), "Era esperado valores iguais, mas " + result4884 + " <a.getClass()> é diferente de " + result4885 + " <a1.getClass()>")
chamada antiga: assertEquals(json, JSON.toJSONString(http))
nova chamada: assertEquals(json, JSON.toJSONString(http), "Era esperado valores iguais, mas  json é diferente de " + result4886 + " <JSON.toJSONString(http)>")
chamada antiga: assertSame(Http.class, checker.getClass())
nova chamada: assertSame(Http.class, checker.getClass(), "Era esperado objetos iguais, mas  Http.class é diferente de " + result4887 + " <checker.getClass()>")
chamada antiga: assertSame(None.class, checker.getClass())
nova chamada: assertSame(None.class, checker.getClass(), "Era esperado objetos iguais, mas  None.class é diferente de " + result4888 + " <checker.getClass()>")
chamada antiga: assertSame(TestChecker.class, checker.getClass())
nova chamada: assertSame(TestChecker.class, checker.getClass(), "Era esperado objetos iguais, mas  TestChecker.class é diferente de " + result4889 + " <checker.getClass()>")
chamada antiga: assertSame(XChecker.class, checker.getClass())
nova chamada: assertSame(XChecker.class, checker.getClass(), "Era esperado objetos iguais, mas  XChecker.class é diferente de " + result4890 + " <checker.getClass()>")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result4891 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter), "Era esperado valores iguais, mas  '{}' é diferente de " + result4892 + " <JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter)>")
chamada antiga: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'f0\':10,\'f1\':11,\'f2\':12}' é diferente de " + result4893 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter))
nova chamada: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter), "Era esperado valores iguais, mas  '{\'f0\':10,\'f1\':11,\'f2\':12}' é diferente de " + result4894 + " <JSON.toJSONString(bean, JSONWriter.Feature.IgnoreNonFieldGetter)>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4895 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4896 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, object.getJSONArray("item").size())
nova chamada: assertEquals(2, object.getJSONArray("item").size(), "Era esperado valores iguais, mas  2 é diferente de " + result4897 + " <object.getJSONArray('item').size()>")
chamada antiga: assertEquals("[1,2]", object.getJSONArray("item").toString())
nova chamada: assertEquals("[1,2]", object.getJSONArray("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4898 + " <object.getJSONArray('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4899 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4900 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, object.getJSONArray("item").size())
nova chamada: assertEquals(2, object.getJSONArray("item").size(), "Era esperado valores iguais, mas  2 é diferente de " + result4901 + " <object.getJSONArray('item').size()>")
chamada antiga: assertEquals("[1,2]", object.getJSONArray("item").toString())
nova chamada: assertEquals("[1,2]", object.getJSONArray("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4902 + " <object.getJSONArray('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4903 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4904 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, ((Collection) object.get("item")).size())
nova chamada: assertEquals(2, ((Collection) object.get("item")).size(), "Era esperado valores iguais, mas  2 é diferente de " + result4905 + " <((Collection) object.get('item')).size()>")
chamada antiga: assertEquals("[\"1\",\"2\"]", object.get("item").toString())
nova chamada: assertEquals("[\"1\",\"2\"]", object.get("item").toString(), "Era esperado valores iguais, mas  '[\'1\',\'2\']' é diferente de " + result4906 + " <object.get('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4907 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4908 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, ((Collection) object.get("item")).size())
nova chamada: assertEquals(2, ((Collection) object.get("item")).size(), "Era esperado valores iguais, mas  2 é diferente de " + result4909 + " <((Collection) object.get('item')).size()>")
chamada antiga: assertEquals("[1,2]", object.get("item").toString())
nova chamada: assertEquals("[1,2]", object.get("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4910 + " <object.get('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4911 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4912 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, ((Collection) object.get("item")).size())
nova chamada: assertEquals(2, ((Collection) object.get("item")).size(), "Era esperado valores iguais, mas  2 é diferente de " + result4913 + " <((Collection) object.get('item')).size()>")
chamada antiga: assertEquals("[1,2]", object.get("item").toString())
nova chamada: assertEquals("[1,2]", object.get("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4914 + " <object.get('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4915 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4916 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, ((Collection) object.get("item")).size())
nova chamada: assertEquals(2, ((Collection) object.get("item")).size(), "Era esperado valores iguais, mas  2 é diferente de " + result4917 + " <((Collection) object.get('item')).size()>")
chamada antiga: assertEquals("[1,2]", object.get("item").toString())
nova chamada: assertEquals("[1,2]", object.get("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4918 + " <object.get('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4919 + " <object.size()>")
chamada antiga: assertEquals(JSONArray.class, object.get("item").getClass())
nova chamada: assertEquals(JSONArray.class, object.get("item").getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result4920 + " <object.get('item').getClass()>")
chamada antiga: assertEquals(2, ((Collection) object.get("item")).size())
nova chamada: assertEquals(2, ((Collection) object.get("item")).size(), "Era esperado valores iguais, mas  2 é diferente de " + result4921 + " <((Collection) object.get('item')).size()>")
chamada antiga: assertEquals("[1,2]", object.get("item").toString())
nova chamada: assertEquals("[1,2]", object.get("item").toString(), "Era esperado valores iguais, mas  '[1,2]' é diferente de " + result4922 + " <object.get('item').toString()>")
chamada antiga: assertEquals(HashMap.class, JSON.parse("{}", JSONReader.Feature.UseNativeObject).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parse("{}", JSONReader.Feature.UseNativeObject).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4923 + " <JSON.parse('{}', JSONReader.Feature.UseNativeObject).getClass()>")
chamada antiga: assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONReader.Feature.UseNativeObject).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONReader.Feature.UseNativeObject).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4924 + " <JSON.parseObject('{}', Object.class, JSONReader.Feature.UseNativeObject).getClass()>")
chamada antiga: assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(HashMap::new)).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parse("{}", JSONFactory.createReadContext(HashMap::new)).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4925 + " <JSON.parse('{}', JSONFactory.createReadContext(HashMap::new)).getClass()>")
chamada antiga: assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONFactory.createReadContext(HashMap::new)).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parseObject("{}", Object.class, JSONFactory.createReadContext(HashMap::new)).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4926 + " <JSON.parseObject('{}', Object.class, JSONFactory.createReadContext(HashMap::new)).getClass()>")
chamada antiga: assertEquals(HashMap.class, JSON.parseObject("{}".getBytes(StandardCharsets.UTF_8), Object.class, JSONFactory.createReadContext(HashMap::new)).getClass())
nova chamada: assertEquals(HashMap.class, JSON.parseObject("{}".getBytes(StandardCharsets.UTF_8), Object.class, JSONFactory.createReadContext(HashMap::new)).getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result4927 + " <JSON.parseObject('{}'.getBytes(StandardCharsets.UTF_8), Object.class, JSONFactory.createReadContext(HashMap::new)).getClass()>")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str, "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str, "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(bean.properties, bean2.properties)
nova chamada: assertEquals(bean.properties, bean2.properties, "Era esperado valores iguais, mas  bean.properties é diferente de " + " bean2.properties")
chamada antiga: assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean1.class, JSONReader.Feature.SupportSmartMatch).properties)
nova chamada: assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean1.class, JSONReader.Feature.SupportSmartMatch).properties, "Era esperado valores iguais, mas  bean.properties é diferente de " + " JSON.parseObject(str, ExtendableBean1.class, JSONReader.Feature.SupportSmartMatch).properties")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str, "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(bean.properties, bean2.properties)
nova chamada: assertEquals(bean.properties, bean2.properties, "Era esperado valores iguais, mas  bean.properties é diferente de " + " bean2.properties")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str)
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", str, "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(bean.properties, bean2.properties)
nova chamada: assertEquals(bean.properties, bean2.properties, "Era esperado valores iguais, mas  bean.properties é diferente de " + " bean2.properties")
chamada antiga: assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean2.class, JSONReader.Feature.SupportSmartMatch).properties)
nova chamada: assertEquals(bean.properties, JSON.parseObject(str, ExtendableBean2.class, JSONReader.Feature.SupportSmartMatch).properties, "Era esperado valores iguais, mas  bean.properties é diferente de " + " JSON.parseObject(str, ExtendableBean2.class, JSONReader.Feature.SupportSmartMatch).properties")
chamada antiga: assertEquals("My bean", bean2.name)
nova chamada: assertEquals("My bean", bean2.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean2.name")
chamada antiga: assertEquals("val1", bean2.properties.get("attr1"))
nova chamada: assertEquals("val1", bean2.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4928 + " <bean2.properties.get('attr1')>")
chamada antiga: assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties)
nova chamada: assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties, "Era esperado valores iguais, mas  bean2.properties é diferente de " + " JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties")
chamada antiga: assertEquals("My bean", bean2.name)
nova chamada: assertEquals("My bean", bean2.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean2.name")
chamada antiga: assertEquals("val1", bean2.properties.get("attr1"))
nova chamada: assertEquals("val1", bean2.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4929 + " <bean2.properties.get('attr1')>")
chamada antiga: assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties)
nova chamada: assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties, "Era esperado valores iguais, mas  bean2.properties é diferente de " + " JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4930 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF1.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF1.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4931 + " <JSON.parseObject(str, ExtendableBeanF1.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4932 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF2.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF2.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4933 + " <JSON.parseObject(str, ExtendableBeanF2.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4934 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF3.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF3.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4935 + " <JSON.parseObject(str, ExtendableBeanF3.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4936 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF4.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF4.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4937 + " <JSON.parseObject(str, ExtendableBeanF4.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4938 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF5.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF5.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4939 + " <JSON.parseObject(str, ExtendableBeanF5.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4940 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF6.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF6.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4941 + " <JSON.parseObject(str, ExtendableBeanF6.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4942 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4943 + " <JSON.parseObject(str, ExtendableBeanF7.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("val1", bean.properties.get("attr1"))
nova chamada: assertEquals("val1", bean.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4944 + " <bean.properties.get('attr1')>")
chamada antiga: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7P.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"))
nova chamada: assertEquals("val1", JSON.parseObject(str, ExtendableBeanF7P.class, JSONReader.Feature.SupportSmartMatch).properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result4945 + " <JSON.parseObject(str, ExtendableBeanF7P.class, JSONReader.Feature.SupportSmartMatch).properties.get('attr1')>")
chamada antiga: assertEquals("a b", JSON.parseObject(json, JSONReader.Feature.TrimString).getString("value"))
nova chamada: assertEquals("a b", JSON.parseObject(json, JSONReader.Feature.TrimString).getString("value"), "Era esperado valores iguais, mas  'a b' é diferente de " + result4946 + " <JSON.parseObject(json, JSONReader.Feature.TrimString).getString('value')>")
chamada antiga: assertEquals("a b", JSON.parseObject(utf8Bytes, JSONReader.Feature.TrimString).getString("value"))
nova chamada: assertEquals("a b", JSON.parseObject(utf8Bytes, JSONReader.Feature.TrimString).getString("value"), "Era esperado valores iguais, mas  'a b' é diferente de " + result4947 + " <JSON.parseObject(utf8Bytes, JSONReader.Feature.TrimString).getString('value')>")
chamada antiga: assertEquals("a b", JSON.parseObject(utf8Bytes, 0, utf8Bytes.length, StandardCharsets.US_ASCII, JSONReader.Feature.TrimString).getString("value"))
nova chamada: assertEquals("a b", JSON.parseObject(utf8Bytes, 0, utf8Bytes.length, StandardCharsets.US_ASCII, JSONReader.Feature.TrimString).getString("value"), "Era esperado valores iguais, mas  'a b' é diferente de " + result4948 + " <JSON.parseObject(utf8Bytes, 0, utf8Bytes.length, StandardCharsets.US_ASCII, JSONReader.Feature.TrimString).getString('value')>")
chamada antiga: assertEquals("a b", JSONB.parseObject(jsonbBytes, JSONReader.Feature.TrimString).getString("value"))
nova chamada: assertEquals("a b", JSONB.parseObject(jsonbBytes, JSONReader.Feature.TrimString).getString("value"), "Era esperado valores iguais, mas  'a b' é diferente de " + result4949 + " <JSONB.parseObject(jsonbBytes, JSONReader.Feature.TrimString).getString('value')>")
chamada antiga: assertEquals("1B", JSON.toJSONString((byte) 1, JSONWriter.Feature.WriteClassName))
nova chamada: assertEquals("1B", JSON.toJSONString((byte) 1, JSONWriter.Feature.WriteClassName), "Era esperado valores iguais, mas  '1B' é diferente de " + result4950 + " <JSON.toJSONString((byte) 1, JSONWriter.Feature.WriteClassName)>")
chamada antiga: assertEquals("1S", JSON.toJSONString((short) 1, JSONWriter.Feature.WriteClassName))
nova chamada: assertEquals("1S", JSON.toJSONString((short) 1, JSONWriter.Feature.WriteClassName), "Era esperado valores iguais, mas  '1S' é diferente de " + result4951 + " <JSON.toJSONString((short) 1, JSONWriter.Feature.WriteClassName)>")
chamada antiga: assertEquals("1L", JSON.toJSONString((long) 1, JSONWriter.Feature.WriteClassName))
nova chamada: assertEquals("1L", JSON.toJSONString((long) 1, JSONWriter.Feature.WriteClassName), "Era esperado valores iguais, mas  '1L' é diferente de " + result4952 + " <JSON.toJSONString((long) 1, JSONWriter.Feature.WriteClassName)>")
chamada antiga: assertEquals("2147483648", JSON.toJSONString(2147483648L, JSONWriter.Feature.WriteClassName))
nova chamada: assertEquals("2147483648", JSON.toJSONString(2147483648L, JSONWriter.Feature.WriteClassName), "Era esperado valores iguais, mas  '2147483648' é diferente de " + result4953 + " <JSON.toJSONString(2147483648L, JSONWriter.Feature.WriteClassName)>")
chamada antiga: assertEquals("{\"value\":1}", str)
nova chamada: assertEquals("{\"value\":1}", str, "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":1}", str)
nova chamada: assertEquals("{\"value\":1}", str, "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":1}", str)
nova chamada: assertEquals("{\"value\":1}", str, "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":1.0}", str)
nova chamada: assertEquals("{\"value\":1.0}", str, "Era esperado valores iguais, mas  '{\'value\':1.0}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":1.0}", str)
nova chamada: assertEquals("{\"value\":1.0}", str, "Era esperado valores iguais, mas  '{\'value\':1.0}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":1B}", JSON.toJSONString(new BeanObject((byte) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1B}", JSON.toJSONString(new BeanObject((byte) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1B}' é diferente de " + result4954 + " <JSON.toJSONString(new BeanObject((byte) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":1S}", JSON.toJSONString(new BeanObject((short) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1S}", JSON.toJSONString(new BeanObject((short) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1S}' é diferente de " + result4955 + " <JSON.toJSONString(new BeanObject((short) 1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + result4956 + " <JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1}", JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1}' é diferente de " + result4957 + " <JSON.toJSONString(new BeanObject(1), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":2147483647L}", JSON.toJSONString(new BeanObject(2147483647L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":2147483647L}", JSON.toJSONString(new BeanObject(2147483647L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':2147483647L}' é diferente de " + result4958 + " <JSON.toJSONString(new BeanObject(2147483647L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":2147483648}", JSON.toJSONString(new BeanObject(2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":2147483648}", JSON.toJSONString(new BeanObject(2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':2147483648}' é diferente de " + result4959 + " <JSON.toJSONString(new BeanObject(2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":-2147483649}", JSON.toJSONString(new BeanObject(-2147483649L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":-2147483649}", JSON.toJSONString(new BeanObject(-2147483649L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':-2147483649}' é diferente de " + result4960 + " <JSON.toJSONString(new BeanObject(-2147483649L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":-2147483648L}", JSON.toJSONString(new BeanObject(-2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":-2147483648L}", JSON.toJSONString(new BeanObject(-2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':-2147483648L}' é diferente de " + result4961 + " <JSON.toJSONString(new BeanObject(-2147483648L), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":1.0F}", JSON.toJSONString(new BeanObject(1F), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1.0F}", JSON.toJSONString(new BeanObject(1F), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1.0F}' é diferente de " + result4962 + " <JSON.toJSONString(new BeanObject(1F), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("{\"value\":1.0D}", JSON.toJSONString(new BeanObject(1D), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertEquals("{\"value\":1.0D}", JSON.toJSONString(new BeanObject(1D), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName), "Era esperado valores iguais, mas  '{\'value\':1.0D}' é diferente de " + result4963 + " <JSON.toJSONString(new BeanObject(1D), JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName)>")
chamada antiga: assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", JSONWriter.Feature.UseSingleQuotes))
nova chamada: assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", JSONWriter.Feature.UseSingleQuotes), "Era esperado valores iguais, mas  ''a\\'bc'' é diferente de " + result4964 + " <JSON.toJSONString('a'bc', JSONWriter.Feature.UseSingleQuotes)>")
chamada antiga: assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", JSONWriter.Feature.UseSingleQuotes)))
nova chamada: assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", JSONWriter.Feature.UseSingleQuotes)), "Era esperado valores iguais, mas  ''a\\'bc'' é diferente de " + " new String(JSON.toJSONBytes('a'bc', JSONWriter.Feature.UseSingleQuotes))")
chamada antiga: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes))
nova chamada: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + result4965 + " <JSON.toJSONString(new JSONObject().fluentPut('val', 'a'bc'), JSONWriter.Feature.UseSingleQuotes)>")
chamada antiga: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes)))
nova chamada: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), JSONWriter.Feature.UseSingleQuotes)), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + " new String(JSON.toJSONBytes(new JSONObject().fluentPut('val', 'a'bc'), JSONWriter.Feature.UseSingleQuotes))")
chamada antiga: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, JSONWriter.Feature.UseSingleQuotes))
nova chamada: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, JSONWriter.Feature.UseSingleQuotes), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + result4966 + " <JSON.toJSONString(bean, JSONWriter.Feature.UseSingleQuotes)>")
chamada antiga: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, JSONWriter.Feature.UseSingleQuotes)))
nova chamada: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, JSONWriter.Feature.UseSingleQuotes)), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + " new String(JSON.toJSONBytes(bean, JSONWriter.Feature.UseSingleQuotes))")
chamada antiga: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1)))
nova chamada: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1)), "Era esperado valores iguais, mas  '{\'v2\':2,\'v1\':1}' é diferente de " + result4967 + " <JSON.toJSONString(JSONObject.of('v2', 2, 'v1', 1))>")
chamada antiga: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1), JSONWriter.Feature.MapSortField))
nova chamada: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(JSONObject.of("v2", 2, "v1", 1), JSONWriter.Feature.MapSortField), "Era esperado valores iguais, mas  '{\'v1\':1,\'v2\':2}' é diferente de " + result4968 + " <JSON.toJSONString(JSONObject.of('v2', 2, 'v1', 1), JSONWriter.Feature.MapSortField)>")
chamada antiga: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map))
nova chamada: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map), "Era esperado valores iguais, mas  '{\'v2\':2,\'v1\':1}' é diferente de " + result4969 + " <JSON.toJSONString(map)>")
chamada antiga: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField))
nova chamada: assertEquals("{\"v2\":2,\"v1\":1}", JSON.toJSONString(map, JSONWriter.Feature.MapSortField), "Era esperado valores iguais, mas  '{\'v2\':2,\'v1\':1}' é diferente de " + result4970 + " <JSON.toJSONString(map, JSONWriter.Feature.MapSortField)>")
chamada antiga: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2))
nova chamada: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2), "Era esperado valores iguais, mas  '{\'v1\':1,\'v2\':2}' é diferente de " + result4971 + " <JSON.toJSONString(map2)>")
chamada antiga: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2, JSONWriter.Feature.MapSortField))
nova chamada: assertEquals("{\"v1\":1,\"v2\":2}", JSON.toJSONString(map2, JSONWriter.Feature.MapSortField), "Era esperado valores iguais, mas  '{\'v1\':1,\'v2\':2}' é diferente de " + result4972 + " <JSON.toJSONString(map2, JSONWriter.Feature.MapSortField)>")
chamada antiga: assertNotNull(val)
nova chamada: assertNotNull(val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Float.class, val.getClass())
nova chamada: assertEquals(Float.class, val.getClass(), "Era esperado valores iguais, mas  Float.class é diferente de " + result4973 + " <val.getClass()>")
chamada antiga: assertNotNull(val)
nova chamada: assertNotNull(val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Float.class, val.getClass())
nova chamada: assertEquals(Float.class, val.getClass(), "Era esperado valores iguais, mas  Float.class é diferente de " + result4974 + " <val.getClass()>")
chamada antiga: assertNotNull(val)
nova chamada: assertNotNull(val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Double.class, val.getClass())
nova chamada: assertEquals(Double.class, val.getClass(), "Era esperado valores iguais, mas  Double.class é diferente de " + result4975 + " <val.getClass()>")
chamada antiga: assertNotNull(val)
nova chamada: assertNotNull(val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Double.class, val.getClass())
nova chamada: assertEquals(Double.class, val.getClass(), "Era esperado valores iguais, mas  Double.class é diferente de " + result4976 + " <val.getClass()>")
chamada antiga: assertEquals("{\"@type\":\"com.alibaba.fastjson2.features.WriteClassNameWithFilterTest$Bean\",\"id\":101}", str)
nova chamada: assertEquals("{\"@type\":\"com.alibaba.fastjson2.features.WriteClassNameWithFilterTest$Bean\",\"id\":101}", str, "Era esperado valores iguais, mas  '{\'@type\':\'com.alibaba.fastjson2.features.WriteClassNameWithFilterTest$Bean\',\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u003c\\u003e\'' é diferente de " + result4977 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u0028\\u0029\'' é diferente de " + result4978 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"A\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"A\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'A\\u0029\'' é diferente de " + result4979 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u0029A\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u0029A\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u0029A\'' é diferente de " + result4980 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u003c\\u003e\\u0028\\u0029\'' é diferente de " + result4981 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcd\\u003c\\u003e\\u0028\\u0029\'' é diferente de " + result4982 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u003c\\u003e\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u003c\\u003e\'' é diferente de " + result4983 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u0028\\u0029\'' é diferente de " + result4984 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"A\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"A\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'A\\u0029\'' é diferente de " + result4985 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u0029A\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u0029A\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u0029A\'' é diferente de " + result4986 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\u003c\\u003e\\u0028\\u0029\'' é diferente de " + result4987 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcd\\u003c\\u003e\\u0028\\u0029\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcd\\u003c\\u003e\\u0028\\u0029\'' é diferente de " + result4988 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", JSON.toJSONString(bean, JSONWriter.Feature.ReferenceDetection))
nova chamada: assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", JSON.toJSONString(bean, JSONWriter.Feature.ReferenceDetection), "Era esperado valores iguais, mas  '{\'items\':[{},null,{\'$ref\':\'$.items[0]\'}]}' é diferente de " + result4989 + " <JSON.toJSONString(bean, JSONWriter.Feature.ReferenceDetection)>")
chamada antiga: assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", jsonWriter.toString())
nova chamada: assertEquals("{\"items\":[{},null,{\"$ref\":\"$.items[0]\"}]}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'items\':[{},null,{\'$ref\':\'$.items[0]\'}]}' é diferente de " + result4990 + " <jsonWriter.toString()>")
chamada antiga: assertArrayEquals(bean.stackTrace, bean1.stackTrace)
nova chamada: assertArrayEquals(bean.stackTrace, bean1.stackTrace, "Era esperado arrays iguais, mas  bean.stackTrace é diferente de " + " bean1.stackTrace")
chamada antiga: assertArrayEquals(bean.stackTrace, bean2.stackTrace)
nova chamada: assertArrayEquals(bean.stackTrace, bean2.stackTrace, "Era esperado arrays iguais, mas  bean.stackTrace é diferente de " + " bean2.stackTrace")
chamada antiga: assertArrayEquals(bean.stackTrace, bean1.stackTrace)
nova chamada: assertArrayEquals(bean.stackTrace, bean1.stackTrace, "Era esperado arrays iguais, mas  bean.stackTrace é diferente de " + " bean1.stackTrace")
chamada antiga: assertArrayEquals(bean.stackTrace, bean2.stackTrace)
nova chamada: assertArrayEquals(bean.stackTrace, bean2.stackTrace, "Era esperado arrays iguais, mas  bean.stackTrace é diferente de " + " bean2.stackTrace")
chamada antiga: assertEquals(bean.stackTrace, bean1.stackTrace)
nova chamada: assertEquals(bean.stackTrace, bean1.stackTrace, "Era esperado valores iguais, mas  bean.stackTrace é diferente de " + " bean1.stackTrace")
chamada antiga: assertEquals(bean.stackTrace, bean2.stackTrace)
nova chamada: assertEquals(bean.stackTrace, bean2.stackTrace, "Era esperado valores iguais, mas  bean.stackTrace é diferente de " + " bean2.stackTrace")
chamada antiga: assertEquals(bean.stackTrace, bean1.stackTrace)
nova chamada: assertEquals(bean.stackTrace, bean1.stackTrace, "Era esperado valores iguais, mas  bean.stackTrace é diferente de " + " bean1.stackTrace")
chamada antiga: assertEquals(bean.stackTrace, bean2.stackTrace)
nova chamada: assertEquals(bean.stackTrace, bean2.stackTrace, "Era esperado valores iguais, mas  bean.stackTrace é diferente de " + " bean2.stackTrace")
chamada antiga: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
nova chamada: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId, "Era esperado valores iguais, mas  101 é diferente de " + " TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId")
chamada antiga: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
nova chamada: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId, "Era esperado valores iguais, mas  101 é diferente de " + " TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId")
chamada antiga: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
nova chamada: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId, "Era esperado valores iguais, mas  101 é diferente de " + " TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId")
chamada antiga: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(str, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId)
nova chamada: assertEquals(101, JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.US_ASCII, Bean.class, JSONReader.Feature.SupportSmartMatch).userId")
chamada antiga: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId)
nova chamada: assertEquals(101, TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId, "Era esperado valores iguais, mas  101 é diferente de " + " TestUtils.createJSONReaderStr(str, JSONReader.Feature.SupportSmartMatch).read(Bean.class).userId")
chamada antiga: assertEquals(123, bean.userId)
nova chamada: assertEquals(123, bean.userId, "Era esperado valores iguais, mas  123 é diferente de " + " bean.userId")
chamada antiga: assertEquals(123, bean.userId)
nova chamada: assertEquals(123, bean.userId, "Era esperado valores iguais, mas  123 é diferente de " + " bean.userId")
chamada antiga: assertEquals(201, bean.item.itemId)
nova chamada: assertEquals(201, bean.item.itemId, "Era esperado valores iguais, mas  201 é diferente de " + " bean.item.itemId")
chamada antiga: assertEquals(101, JSONObject.from(new Item(101)).get("itemId"))
nova chamada: assertEquals(101, JSONObject.from(new Item(101)).get("itemId"), "Era esperado valores iguais, mas  101 é diferente de " + result4991 + " <JSONObject.from(new Item(101)).get('itemId')>")
chamada antiga: assertEquals(bean.getItems().get(0).itemId, JSONObject.from(bean).to(Bean.class).items.get(0).itemId)
nova chamada: assertEquals(bean.getItems().get(0).itemId, JSONObject.from(bean).to(Bean.class).items.get(0).itemId, "Era esperado valores iguais, mas  bean.getItems().get(0).itemId é diferente de " + " JSONObject.from(bean).to(Bean.class).items.get(0).itemId")
chamada antiga: assertEquals(bean.items.get("101").itemId, JSONObject.from(bean).to(Bean1.class).items.get("101").itemId)
nova chamada: assertEquals(bean.items.get("101").itemId, JSONObject.from(bean).to(Bean1.class).items.get("101").itemId, "Era esperado valores iguais, mas  bean.items.get('101').itemId é diferente de " + " JSONObject.from(bean).to(Bean1.class).items.get('101').itemId")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result4992 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"a\"", jsonWriter.toString())
nova chamada: assertEquals("\"a\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'a\'' é diferente de " + result4993 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\\"\\\"\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\\"\\\"\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\\'\\\'\'' é diferente de " + result4994 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abc\"", jsonWriter.toString())
nova chamada: assertEquals("\"abc\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result4995 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcdefghijklmn01234567890\'' é diferente de " + result4996 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"中国\"", jsonWriter.toString())
nova chamada: assertEquals("\"中国\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'中国\'' é diferente de " + result4997 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"^á\"", jsonWriter.toString())
nova chamada: assertEquals("\"^á\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'^á\'' é diferente de " + result4998 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(origin.length(), str.length())
nova chamada: assertEquals(origin.length(), str.length(), "Era esperado valores iguais, mas " + result4999 + " <origin.length()> é diferente de " + result5000 + " <str.length()>")
chamada antiga: assertEquals(origin, str)
nova chamada: assertEquals(origin, str, "Era esperado valores iguais, mas  origin é diferente de " + " str")
chamada antiga: assertEquals("{\"^á\":0}", jsonWriter.toString())
nova chamada: assertEquals("{\"^á\":0}", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'^á\':0}' é diferente de " + result5001 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\r\\n\\t\\f\\b\\\'\'' é diferente de " + result5002 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(chars.length + 2, jsonWriter.toString().length())
nova chamada: assertEquals(chars.length + 2, jsonWriter.toString().length(), "Era esperado valores iguais, mas  chars.length + 2 é diferente de " + result5003 + " <jsonWriter.toString().length()>")
chamada antiga: assertEquals("null", jsonWriter.toString())
nova chamada: assertEquals("null", jsonWriter.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result5004 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"a\"", jsonWriter.toString())
nova chamada: assertEquals("\"a\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'a\'' é diferente de " + result5005 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"\\\"\\\"\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\\"\\\"\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\\'\\\'\'' é diferente de " + result5006 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abc\"", jsonWriter.toString())
nova chamada: assertEquals("\"abc\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result5007 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString())
nova chamada: assertEquals("\"abcdefghijklmn01234567890\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'abcdefghijklmn01234567890\'' é diferente de " + result5008 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"中国\"", jsonWriter.toString())
nova chamada: assertEquals("\"中国\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'中国\'' é diferente de " + result5009 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"^á\"", jsonWriter.toString())
nova chamada: assertEquals("\"^á\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'^á\'' é diferente de " + result5010 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(origin.length(), str.length())
nova chamada: assertEquals(origin.length(), str.length(), "Era esperado valores iguais, mas " + result5011 + " <origin.length()> é diferente de " + result5012 + " <str.length()>")
chamada antiga: assertEquals(origin, str)
nova chamada: assertEquals(origin, str, "Era esperado valores iguais, mas  origin é diferente de " + " str")
chamada antiga: assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString())
nova chamada: assertEquals("\"\\r\\n\\t\\f\\b\\\"\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'\\r\\n\\t\\f\\b\\\'\'' é diferente de " + result5013 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(chars.length + 2, jsonWriter.toString().length())
nova chamada: assertEquals(chars.length + 2, jsonWriter.toString().length(), "Era esperado valores iguais, mas  chars.length + 2 é diferente de " + result5014 + " <jsonWriter.toString().length()>")
chamada antiga: assertEquals("A", jsonWriter.toString())
nova chamada: assertEquals("A", jsonWriter.toString(), "Era esperado valores iguais, mas  'A' é diferente de " + result5015 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"abc\":", jsonWriter.toString())
nova chamada: assertEquals("{\"abc\":", jsonWriter.toString(), "Era esperado valores iguais, mas  '{\'abc\':' é diferente de " + result5016 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("\"2018-06-23\"", jsonWriter.toString())
nova chamada: assertEquals("\"2018-06-23\"", jsonWriter.toString(), "Era esperado valores iguais, mas  '\'2018-06-23\'' é diferente de " + result5017 + " <jsonWriter.toString()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5018 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5019 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5020 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5021 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5022 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5023 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5024 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5025 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5026 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5027 + " <string.length()>")
chamada antiga: assertEquals(COUNT, string.length())
nova chamada: assertEquals(COUNT, string.length(), "Era esperado valores iguais, mas  COUNT é diferente de " + result5028 + " <string.length()>")
chamada antiga: assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString())
nova chamada: assertEquals("[\"9007199254740992\",\"-9007199254740992\"]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[\'9007199254740992\',\'-9007199254740992\']' é diferente de " + result5029 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString())
nova chamada: assertEquals("[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]", jsonWriter.toString(), "Era esperado valores iguais, mas  '[-9223372036854775808,-9223372036854775808,9007199254740992,-9007199254740992]' é diferente de " + result5030 + " <jsonWriter.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"$\"}", writer.toString())
nova chamada: assertEquals("{\"$ref\":\"$\"}", writer.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'$\'}' é diferente de " + result5031 + " <writer.toString()>")
chamada antiga: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString())
nova chamada: assertEquals("{\"$ref\":\"$\"}{\"$ref\":\"中\"}", writer.toString(), "Era esperado valores iguais, mas  '{\'$ref\':\'$\'}{\'$ref\':\'中\'}' é diferente de " + result5032 + " <writer.toString()>")
chamada antiga: assertEquals("{", writer.toString())
nova chamada: assertEquals("{", writer.toString(), "Era esperado valores iguais, mas  '{' é diferente de " + result5033 + " <writer.toString()>")
chamada antiga: assertEquals("[", writer.toString())
nova chamada: assertEquals("[", writer.toString(), "Era esperado valores iguais, mas  '[' é diferente de " + result5034 + " <writer.toString()>")
chamada antiga: assertEquals(":", writer.toString())
nova chamada: assertEquals(":", writer.toString(), "Era esperado valores iguais, mas  ':' é diferente de " + result5035 + " <writer.toString()>")
chamada antiga: assertEquals(",", writer.toString())
nova chamada: assertEquals(",", writer.toString(), "Era esperado valores iguais, mas  ',' é diferente de " + result5036 + " <writer.toString()>")
chamada antiga: assertEquals(":", writer.toString())
nova chamada: assertEquals(":", writer.toString(), "Era esperado valores iguais, mas  ':' é diferente de " + result5037 + " <writer.toString()>")
chamada antiga: assertEquals("}", writer.toString())
nova chamada: assertEquals("}", writer.toString(), "Era esperado valores iguais, mas  '}' é diferente de " + result5038 + " <writer.toString()>")
chamada antiga: assertEquals("]", writer.toString())
nova chamada: assertEquals("]", writer.toString(), "Era esperado valores iguais, mas  ']' é diferente de " + result5039 + " <writer.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result5040 + " <writer.toString()>")
chamada antiga: assertEquals("[\"1.0\",\"2.0\",[\"3.0\",\"4.0\"],[\"5.0\",\"6.0\"]]", writer.toString())
nova chamada: assertEquals("[\"1.0\",\"2.0\",[\"3.0\",\"4.0\"],[\"5.0\",\"6.0\"]]", writer.toString(), "Era esperado valores iguais, mas  '[\'1.0\',\'2.0\',[\'3.0\',\'4.0\'],[\'5.0\',\'6.0\']]' é diferente de " + result5041 + " <writer.toString()>")
chamada antiga: assertTrue(ob instanceof List<?>)
nova chamada: assertTrue(ob instanceof List<?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ob instanceof Map<?, ?>)
nova chamada: assertTrue(ob instanceof Map<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(data[4], 6)
nova chamada: assertEquals(data[4], 6, "Era esperado valores iguais, mas  data[4] é diferente de " + " 6")
chamada antiga: assertEquals(data[4], 12)
nova chamada: assertEquals(data[4], 12, "Era esperado valores iguais, mas  data[4] é diferente de " + " 12")
chamada antiga: assertEquals(data[4], 6)
nova chamada: assertEquals(data[4], 6, "Era esperado valores iguais, mas  data[4] é diferente de " + " 6")
chamada antiga: assertEquals(data[4], 12)
nova chamada: assertEquals(data[4], 12, "Era esperado valores iguais, mas  data[4] é diferente de " + " 12")
chamada antiga: assertEquals(data.get(4), 6)
nova chamada: assertEquals(data.get(4), 6, "Era esperado valores iguais, mas " + result5042 + " <data.get(4)> é diferente de " + " 6")
chamada antiga: assertEquals(data.get(4), 12)
nova chamada: assertEquals(data.get(4), 12, "Era esperado valores iguais, mas " + result5043 + " <data.get(4)> é diferente de " + " 12")
chamada antiga: assertEquals(data[0], 2)
nova chamada: assertEquals(data[0], 2, "Era esperado valores iguais, mas  data[0] é diferente de " + " 2")
chamada antiga: assertEquals(data[0], 7)
nova chamada: assertEquals(data[0], 7, "Era esperado valores iguais, mas  data[0] é diferente de " + " 7")
chamada antiga: assertEquals(data[0], 2)
nova chamada: assertEquals(data[0], 2, "Era esperado valores iguais, mas  data[0] é diferente de " + " 2")
chamada antiga: assertEquals(data[0], 7)
nova chamada: assertEquals(data[0], 7, "Era esperado valores iguais, mas  data[0] é diferente de " + " 7")
chamada antiga: assertEquals(data.get(0), 2)
nova chamada: assertEquals(data.get(0), 2, "Era esperado valores iguais, mas " + result5044 + " <data.get(0)> é diferente de " + " 2")
chamada antiga: assertEquals(data.get(0), 7)
nova chamada: assertEquals(data.get(0), 7, "Era esperado valores iguais, mas " + result5045 + " <data.get(0)> é diferente de " + " 7")
chamada antiga: assertEquals(data[1], 3)
nova chamada: assertEquals(data[1], 3, "Era esperado valores iguais, mas  data[1] é diferente de " + " 3")
chamada antiga: assertEquals(data[1], 8)
nova chamada: assertEquals(data[1], 8, "Era esperado valores iguais, mas  data[1] é diferente de " + " 8")
chamada antiga: assertEquals(data[1], 3)
nova chamada: assertEquals(data[1], 3, "Era esperado valores iguais, mas  data[1] é diferente de " + " 3")
chamada antiga: assertEquals(data[1], 8)
nova chamada: assertEquals(data[1], 8, "Era esperado valores iguais, mas  data[1] é diferente de " + " 8")
chamada antiga: assertEquals(data.get(1), 3)
nova chamada: assertEquals(data.get(1), 3, "Era esperado valores iguais, mas " + result5046 + " <data.get(1)> é diferente de " + " 3")
chamada antiga: assertEquals(data.get(1), 8)
nova chamada: assertEquals(data.get(1), 8, "Era esperado valores iguais, mas " + result5047 + " <data.get(1)> é diferente de " + " 8")
chamada antiga: assertEquals(data[3], 5)
nova chamada: assertEquals(data[3], 5, "Era esperado valores iguais, mas  data[3] é diferente de " + " 5")
chamada antiga: assertEquals(data[3], 10)
nova chamada: assertEquals(data[3], 10, "Era esperado valores iguais, mas  data[3] é diferente de " + " 10")
chamada antiga: assertEquals(data[3], 5)
nova chamada: assertEquals(data[3], 5, "Era esperado valores iguais, mas  data[3] é diferente de " + " 5")
chamada antiga: assertEquals(data[3], 10)
nova chamada: assertEquals(data[3], 10, "Era esperado valores iguais, mas  data[3] é diferente de " + " 10")
chamada antiga: assertEquals(data.get(3), 5)
nova chamada: assertEquals(data.get(3), 5, "Era esperado valores iguais, mas " + result5048 + " <data.get(3)> é diferente de " + " 5")
chamada antiga: assertEquals(data.get(3), 10)
nova chamada: assertEquals(data.get(3), 10, "Era esperado valores iguais, mas " + result5049 + " <data.get(3)> é diferente de " + " 10")
chamada antiga: assertArrayEquals(data, compare)
nova chamada: assertArrayEquals(data, compare, "Era esperado arrays iguais, mas  data é diferente de " + " compare")
chamada antiga: assertArrayEquals(data, compare)
nova chamada: assertArrayEquals(data, compare, "Era esperado arrays iguais, mas  data é diferente de " + " compare")
chamada antiga: assertTrue(data.equals(compare))
nova chamada: assertTrue(data.equals(compare), "Era esperado verdadeiro, mas " + result5050 + " <data.equals(compare)> é falso")
chamada antiga: assertEquals(value.getV0000(), copy.getV0000())
nova chamada: assertEquals(value.getV0000(), copy.getV0000(), "Era esperado valores iguais, mas " + result5051 + " <value.getV0000()> é diferente de " + result5052 + " <copy.getV0000()>")
chamada antiga: assertEquals(value.getV0001(), copy.getV0001())
nova chamada: assertEquals(value.getV0001(), copy.getV0001(), "Era esperado valores iguais, mas " + result5053 + " <value.getV0001()> é diferente de " + result5054 + " <copy.getV0001()>")
chamada antiga: assertEquals(bean.v0, copy.v0)
nova chamada: assertEquals(bean.v0, copy.v0, "Era esperado valores iguais, mas  bean.v0 é diferente de " + " copy.v0")
chamada antiga: assertEquals(bean.v1, copy.v1)
nova chamada: assertEquals(bean.v1, copy.v1, "Era esperado valores iguais, mas  bean.v1 é diferente de " + " copy.v1")
chamada antiga: assertEquals(bean.v0, copy2.v0)
nova chamada: assertEquals(bean.v0, copy2.v0, "Era esperado valores iguais, mas  bean.v0 é diferente de " + " copy2.v0")
chamada antiga: assertEquals(bean.v1, copy2.v1)
nova chamada: assertEquals(bean.v1, copy2.v1, "Era esperado valores iguais, mas  bean.v1 é diferente de " + " copy2.v1")
chamada antiga: assertEquals(bean.v0, copy3.v0)
nova chamada: assertEquals(bean.v0, copy3.v0, "Era esperado valores iguais, mas  bean.v0 é diferente de " + " copy3.v0")
chamada antiga: assertEquals(bean.v1, copy3.v1)
nova chamada: assertEquals(bean.v1, copy3.v1, "Era esperado valores iguais, mas  bean.v1 é diferente de " + " copy3.v1")
chamada antiga: assertEquals(bean.v0, bean1.v0)
nova chamada: assertEquals(bean.v0, bean1.v0, "Era esperado valores iguais, mas  bean.v0 é diferente de " + " bean1.v0")
chamada antiga: assertEquals(bean.v1, bean1.v1)
nova chamada: assertEquals(bean.v1, bean1.v1, "Era esperado valores iguais, mas  bean.v1 é diferente de " + " bean1.v1")
chamada antiga: assertEquals(bean.v0, bean2.v0)
nova chamada: assertEquals(bean.v0, bean2.v0, "Era esperado valores iguais, mas  bean.v0 é diferente de " + " bean2.v0")
chamada antiga: assertEquals(bean.v1, bean2.v1)
nova chamada: assertEquals(bean.v1, bean2.v1, "Era esperado valores iguais, mas  bean.v1 é diferente de " + " bean2.v1")
chamada antiga: assertEquals(bean.tCode, copy.tCode)
nova chamada: assertEquals(bean.tCode, copy.tCode, "Era esperado valores iguais, mas  bean.tCode é diferente de " + " copy.tCode")
chamada antiga: assertEquals(bean.num, copy.num)
nova chamada: assertEquals(bean.num, copy.num, "Era esperado valores iguais, mas  bean.num é diferente de " + " copy.num")
chamada antiga: assertEquals(bean.stringSet, copy.stringSet)
nova chamada: assertEquals(bean.stringSet, copy.stringSet, "Era esperado valores iguais, mas  bean.stringSet é diferente de " + " copy.stringSet")
chamada antiga: assertEquals(bean.bigDecimal, copy.bigDecimal)
nova chamada: assertEquals(bean.bigDecimal, copy.bigDecimal, "Era esperado valores iguais, mas  bean.bigDecimal é diferente de " + " copy.bigDecimal")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals(bean.id, bean2.id)
nova chamada: assertEquals(bean.id, bean2.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean2.id")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(0, bean1.id)
nova chamada: assertEquals(0, bean1.id, "Era esperado valores iguais, mas  0 é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals(0, bean2.id)
nova chamada: assertEquals(0, bean2.id, "Era esperado valores iguais, mas  0 é diferente de " + " bean2.id")
chamada antiga: assertEquals(bean.name, bean2.name)
nova chamada: assertEquals(bean.name, bean2.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean2.name")
chamada antiga: assertEquals(bean.id, bean3.id)
nova chamada: assertEquals(bean.id, bean3.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean3.id")
chamada antiga: assertEquals(bean.name, bean3.name)
nova chamada: assertEquals(bean.name, bean3.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean3.name")
chamada antiga: assertEquals(bean.id, bean4.id)
nova chamada: assertEquals(bean.id, bean4.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean4.id")
chamada antiga: assertEquals(bean.name, bean4.name)
nova chamada: assertEquals(bean.name, bean4.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean4.name")
chamada antiga: assertEquals(102, object.getIntValue("id"))
nova chamada: assertEquals(102, object.getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5055 + " <object.getIntValue('id')>")
chamada antiga: assertEquals(102, object.getIntValue("id"))
nova chamada: assertEquals(102, object.getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5056 + " <object.getIntValue('id')>")
chamada antiga: assertEquals(102, object.getIntValue("id"))
nova chamada: assertEquals(102, object.getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5057 + " <object.getIntValue('id')>")
chamada antiga: assertEquals(102, object.getIntValue("id"))
nova chamada: assertEquals(102, object.getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5058 + " <object.getIntValue('id')>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5059 + " <object.size()>")
chamada antiga: assertEquals(102, object.getJSONObject("item").getIntValue("id"))
nova chamada: assertEquals(102, object.getJSONObject("item").getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5060 + " <object.getJSONObject('item').getIntValue('id')>")
chamada antiga: assertEquals(102, object.getJSONObject("item").getIntValue("id"))
nova chamada: assertEquals(102, object.getJSONObject("item").getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5061 + " <object.getJSONObject('item').getIntValue('id')>")
chamada antiga: assertEquals(1, object.getJSONObject("item").size())
nova chamada: assertEquals(1, object.getJSONObject("item").size(), "Era esperado valores iguais, mas  1 é diferente de " + result5062 + " <object.getJSONObject('item').size()>")
chamada antiga: assertEquals(102, object.getJSONObject("item").getIntValue("id"))
nova chamada: assertEquals(102, object.getJSONObject("item").getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5063 + " <object.getJSONObject('item').getIntValue('id')>")
chamada antiga: assertEquals(102, object.getJSONObject("item").getIntValue("id"))
nova chamada: assertEquals(102, object.getJSONObject("item").getIntValue("id"), "Era esperado valores iguais, mas  102 é diferente de " + result5064 + " <object.getJSONObject('item').getIntValue('id')>")
chamada antiga: assertEquals(1, object.getJSONObject("item").size())
nova chamada: assertEquals(1, object.getJSONObject("item").size(), "Era esperado valores iguais, mas  1 é diferente de " + result5065 + " <object.getJSONObject('item').size()>")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5066 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5067 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertEquals(1, object.getJSONArray("items").size())
nova chamada: assertEquals(1, object.getJSONArray("items").size(), "Era esperado valores iguais, mas  1 é diferente de " + result5068 + " <object.getJSONArray('items').size()>")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5069 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5070 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertEquals(1, object.getJSONArray("items").size())
nova chamada: assertEquals(1, object.getJSONArray("items").size(), "Era esperado valores iguais, mas  1 é diferente de " + result5071 + " <object.getJSONArray('items').size()>")
chamada antiga: assertEquals(102, array.getJSONArray(0).get(0))
nova chamada: assertEquals(102, array.getJSONArray(0).get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5072 + " <array.getJSONArray(0).get(0)>")
chamada antiga: assertNull(array.getJSONArray(1))
nova chamada: assertNull(array.getJSONArray(1), "Era esperado nulo, mas " + result5073 + " <array.getJSONArray(1)> não é nulo")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5074 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertNull(object.getJSONArray("items1"))
nova chamada: assertNull(object.getJSONArray("items1"), "Era esperado nulo, mas " + result5075 + " <object.getJSONArray('items1')> não é nulo")
chamada antiga: assertEquals(102, object.getJSONArray("items").get(0))
nova chamada: assertEquals(102, object.getJSONArray("items").get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5076 + " <object.getJSONArray('items').get(0)>")
chamada antiga: assertEquals(1, object.getJSONArray("items").size())
nova chamada: assertEquals(1, object.getJSONArray("items").size(), "Era esperado valores iguais, mas  1 é diferente de " + result5077 + " <object.getJSONArray('items').size()>")
chamada antiga: assertEquals(102, array.getJSONArray(0).get(0))
nova chamada: assertEquals(102, array.getJSONArray(0).get(0), "Era esperado valores iguais, mas  102 é diferente de " + result5078 + " <array.getJSONArray(0).get(0)>")
chamada antiga: assertNull(array.getJSONArray(1))
nova chamada: assertNull(array.getJSONArray(1), "Era esperado nulo, mas " + result5079 + " <array.getJSONArray(1)> não é nulo")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str)
nova chamada: assertEquals("{\n" + "\t\"@type\":\"circle\",\n" + "\t\"name\":\"CustomCircle\",\n" + "\t\"radius\":1.0\n" + "}", str, "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'circle\',\n' + '\t\'name\':\'CustomCircle\',\n' + '\t\'radius\':1.0\n' + '}' é diferente de " + " str")
chamada antiga: assertEquals(shape.getClass(), shape1.getClass())
nova chamada: assertEquals(shape.getClass(), shape1.getClass(), "Era esperado valores iguais, mas " + result5080 + " <shape.getClass()> é diferente de " + result5081 + " <shape1.getClass()>")
chamada antiga: assertEquals(cycle.name, cycle1.name)
nova chamada: assertEquals(cycle.name, cycle1.name, "Era esperado valores iguais, mas  cycle.name é diferente de " + " cycle1.name")
chamada antiga: assertEquals(cycle.radius, cycle1.radius)
nova chamada: assertEquals(cycle.radius, cycle1.radius, "Era esperado valores iguais, mas  cycle.radius é diferente de " + " cycle1.radius")
chamada antiga: assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student))
nova chamada: assertEquals("{\"rollNo\":1,\"name\":\"Mark\"}", JSON.toJSONString(student), "Era esperado valores iguais, mas  '{\'rollNo\':1,\'name\':\'Mark\'}' é diferente de " + result5082 + " <JSON.toJSONString(student)>")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"time\":\"121314\"}", str)
nova chamada: assertEquals("{\"time\":\"121314\"}", str, "Era esperado valores iguais, mas  '{\'time\':\'121314\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.time, bean1.time)
nova chamada: assertEquals(bean.time, bean1.time, "Era esperado valores iguais, mas  bean.time é diferente de " + " bean1.time")
chamada antiga: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"name\":\"My bean\",\"attr1\":\"val1\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'name\':\'My bean\',\'attr1\':\'val1\'}' é diferente de " + result5083 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("\"Hangzhou\"", str)
nova chamada: assertEquals("\"Hangzhou\"", str, "Era esperado valores iguais, mas  '\'Hangzhou\'' é diferente de " + " str")
chamada antiga: assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1))
nova chamada: assertEquals("\"Type A\"", JSON.toJSONString(TypeEnumWithValue.TYPE1), "Era esperado valores iguais, mas  '\'Type A\'' é diferente de " + result5084 + " <JSON.toJSONString(TypeEnumWithValue.TYPE1)>")
chamada antiga: assertEquals("{\"id\":123}", json)
nova chamada: assertEquals("{\"id\":123}", json, "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + " json")
chamada antiga: assertEquals(123, bean1.id)
nova chamada: assertEquals(123, bean1.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean1.id")
chamada antiga: assertEquals("XXX", bean1.name)
nova chamada: assertEquals("XXX", bean1.name, "Era esperado valores iguais, mas  'XXX' é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertNull(bean1.name)
nova chamada: assertNull(bean1.name, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json)
nova chamada: assertEquals("{\"id\":123,\"name\":\"XXX\"}", json, "Era esperado valores iguais, mas  '{\'id\':123,\'name\':\'XXX\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101,\"name\":null}", str)
nova chamada: assertEquals("{\"id\":101,\"name\":null}", str, "Era esperado valores iguais, mas  '{\'id\':101,\'name\':null}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("{\"jid\":\"abc\"}", str)
nova chamada: assertEquals("{\"jid\":\"abc\"}", str, "Era esperado valores iguais, mas  '{\'jid\':\'abc\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":\"001\",\"name\":\"DataWorks\"}", str)
nova chamada: assertEquals("{\"id\":\"001\",\"name\":\"DataWorks\"}", str, "Era esperado valores iguais, mas  '{\'id\':\'001\',\'name\':\'DataWorks\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("My bean", bean.name)
nova chamada: assertEquals("My bean", bean.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean.name")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bookCategory\":\"Tech\"}", json)
nova chamada: assertEquals("{\"bookCategory\":\"Tech\"}", json, "Era esperado valores iguais, mas  '{\'bookCategory\':\'Tech\'}' é diferente de " + " json")
chamada antiga: assertEquals(bean.category, bean1.category)
nova chamada: assertEquals(bean.category, bean1.category, "Era esperado valores iguais, mas  bean.category é diferente de " + " bean1.category")
chamada antiga: assertEquals("{\"bean_id\":1001}", str)
nova chamada: assertEquals("{\"bean_id\":1001}", str, "Era esperado valores iguais, mas  '{\'bean_id\':1001}' é diferente de " + " str")
chamada antiga: assertEquals("{\"id\":101}", str)
nova chamada: assertEquals("{\"id\":101}", str, "Era esperado valores iguais, mas  '{\'id\':101}' é diferente de " + " str")
chamada antiga: assertEquals("My bean", bean2.name)
nova chamada: assertEquals("My bean", bean2.name, "Era esperado valores iguais, mas  'My bean' é diferente de " + " bean2.name")
chamada antiga: assertEquals("val1", bean2.properties.get("attr1"))
nova chamada: assertEquals("val1", bean2.properties.get("attr1"), "Era esperado valores iguais, mas  'val1' é diferente de " + result5085 + " <bean2.properties.get('attr1')>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result5086 + " <JSON.toJSONString(new A('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A1("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A1("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result5087 + " <JSON.toJSONString(new A1('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A2("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A2("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result5088 + " <JSON.toJSONString(new A2('101'))>")
chamada antiga: assertEquals("{}", JSON.toJSONString(new A3("101")))
nova chamada: assertEquals("{}", JSON.toJSONString(new A3("101")), "Era esperado valores iguais, mas  '{}' é diferente de " + result5089 + " <JSON.toJSONString(new A3('101'))>")
chamada antiga: assertNull(JSON.parseObject(str, A.class).id)
nova chamada: assertNull(JSON.parseObject(str, A.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject(str, A1.class).id)
nova chamada: assertNull(JSON.parseObject(str, A1.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject(str, A2.class).id)
nova chamada: assertNull(JSON.parseObject(str, A2.class).id, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("\"ok\"", JSON.toJSONString(Type.OK))
nova chamada: assertEquals("\"ok\"", JSON.toJSONString(Type.OK), "Era esperado valores iguais, mas  '\'ok\'' é diferente de " + result5090 + " <JSON.toJSONString(Type.OK)>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5091 + " <bean.values.getClass()> é diferente de " + result5092 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5093 + " <bean.values.size()> é diferente de " + result5094 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean2.item, bean2.values.keySet().iterator().next())
nova chamada: assertEquals(bean2.item, bean2.values.keySet().iterator().next(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5095 + " <bean2.values.keySet().iterator().next()>")
chamada antiga: assertEquals(bean2.item, bean2.values2.keySet().iterator().next())
nova chamada: assertEquals(bean2.item, bean2.values2.keySet().iterator().next(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5096 + " <bean2.values2.keySet().iterator().next()>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Bean1#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item#1\":{\n" + "\t\t\t\"id#2\":101\n" + "\t\t},\n" + "\t\t\"values#3\":{\n" + "\t\t\t\"@type\":\"M#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\n" + "\t\t\t\t\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Item#5\",\n" + "\t\t\t\t\t\"@value\":{\n" + "\t\t\t\t\t\t\"#2\":101\n" + "\t\t\t\t\t}\n" + "\t\t\t\t}:\"101\"\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"values2#6\":{\n" + "\t\t\t\"@type\":\"#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\"$ref\":\"$.item\"}:null\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Bean1#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item#1\":{\n" + "\t\t\t\"id#2\":101\n" + "\t\t},\n" + "\t\t\"values#3\":{\n" + "\t\t\t\"@type\":\"M#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\n" + "\t\t\t\t\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest21$Item#5\",\n" + "\t\t\t\t\t\"@value\":{\n" + "\t\t\t\t\t\t\"#2\":101\n" + "\t\t\t\t\t}\n" + "\t\t\t\t}:\"101\"\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"values2#6\":{\n" + "\t\t\t\"@type\":\"#4\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t{\"$ref\":\"$.item\"}:null\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest21$Bean1#0\',\n' + '\t\'@value\':{\n' + '\t\t\'item#1\':{\n' + '\t\t\t\'id#2\':101\n' + '\t\t},\n' + '\t\t\'values#3\':{\n' + '\t\t\t\'@type\':\'M#4\',\n' + '\t\t\t\'@value\':{\n' + '\t\t\t\t{\n' + '\t\t\t\t\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest21$Item#5\',\n' + '\t\t\t\t\t\'@value\':{\n' + '\t\t\t\t\t\t\'#2\':101\n' + '\t\t\t\t\t}\n' + '\t\t\t\t}:\'101\'\n' + '\t\t\t}\n' + '\t\t},\n' + '\t\t\'values2#6\':{\n' + '\t\t\t\'@type\':\'#4\',\n' + '\t\t\t\'@value\':{\n' + '\t\t\t\t{\'$ref\':\'$.item\'}:null\n' + '\t\t\t}\n' + '\t\t}\n' + '\t}\n' + '}' é diferente de " + result5097 + " <new JSONBDump(bytes, true).toString()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5098 + " <bean.values.getClass()> é diferente de " + result5099 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5100 + " <bean.values.size()> é diferente de " + result5101 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean2.item, bean2.values.keySet().iterator().next())
nova chamada: assertEquals(bean2.item, bean2.values.keySet().iterator().next(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5102 + " <bean2.values.keySet().iterator().next()>")
chamada antiga: assertEquals(bean2.item, bean2.values2.keySet().iterator().next())
nova chamada: assertEquals(bean2.item, bean2.values2.keySet().iterator().next(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5103 + " <bean2.values2.keySet().iterator().next()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5104 + " <bean.values.getClass()> é diferente de " + result5105 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5106 + " <bean.values.size()> é diferente de " + result5107 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean2.item, bean2.values.keySet().iterator().next())
nova chamada: assertEquals(bean2.item, bean2.values.keySet().iterator().next(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5108 + " <bean2.values.keySet().iterator().next()>")
chamada antiga: assertEquals(bean2.item, ((Map.Entry) bean2.values2.entrySet().iterator().next()).getKey())
nova chamada: assertEquals(bean2.item, ((Map.Entry) bean2.values2.entrySet().iterator().next()).getKey(), "Era esperado valores iguais, mas  bean2.item é diferente de " + result5109 + " <((Map.Entry) bean2.values2.entrySet().iterator().next()).getKey()>")
chamada antiga: assertSame(object2.get("val"), object2.get("val1"))
nova chamada: assertSame(object2.get("val"), object2.get("val1"), "Era esperado objetos iguais, mas " + result5110 + " <object2.get('val')> é diferente de " + result5111 + " <object2.get('val1')>")
chamada antiga: assertSame(object2.get("val"), object2.get("val1"))
nova chamada: assertSame(object2.get("val"), object2.get("val1"), "Era esperado objetos iguais, mas " + result5112 + " <object2.get('val')> é diferente de " + result5113 + " <object2.get('val1')>")
chamada antiga: assertEquals(java.util.Currency.class, object2.get("val").getClass())
nova chamada: assertEquals(java.util.Currency.class, object2.get("val").getClass(), "Era esperado valores iguais, mas  java.util.Currency.class é diferente de " + result5114 + " <object2.get('val').getClass()>")
chamada antiga: assertEquals(object, object2)
nova chamada: assertEquals(object, object2, "Era esperado valores iguais, mas  object é diferente de " + " object2")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertEquals(bean.unit, bean2.unit)
nova chamada: assertEquals(bean.unit, bean2.unit, "Era esperado valores iguais, mas  bean.unit é diferente de " + " bean2.unit")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5115 + " <bean.getClass()> é diferente de " + result5116 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5117 + " <bean.values.getClass()> é diferente de " + result5118 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5119 + " <bean.values.size()> é diferente de " + result5120 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get("abc"), bean2.values.get("abc"))
nova chamada: assertEquals(bean.values.get("abc"), bean2.values.get("abc"), "Era esperado valores iguais, mas " + result5121 + " <bean.values.get('abc')> é diferente de " + result5122 + " <bean2.values.get('abc')>")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest7$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertSame(a2.value.getClass(), C.class)
nova chamada: assertSame(a2.value.getClass(), C.class, "Era esperado objetos iguais, mas " + result5123 + " <a2.value.getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest7$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertSame(a2.value.getClass(), C.class)
nova chamada: assertSame(a2.value.getClass(), C.class, "Era esperado objetos iguais, mas " + result5124 + " <a2.value.getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest7$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest7$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(list.getClass(), list2.getClass())
nova chamada: assertEquals(list.getClass(), list2.getClass(), "Era esperado valores iguais, mas " + result5125 + " <list.getClass()> é diferente de " + result5126 + " <list2.getClass()>")
chamada antiga: assertEquals(list.get(0).getClass(), list2.get(0).getClass())
nova chamada: assertEquals(list.get(0).getClass(), list2.get(0).getClass(), "Era esperado valores iguais, mas " + result5127 + " <list.get(0).getClass()> é diferente de " + result5128 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(list2.getClass(), list2.getClass())
nova chamada: assertEquals(list2.getClass(), list2.getClass(), "Era esperado valores iguais, mas " + result5129 + " <list2.getClass()> é diferente de " + result5130 + " <list2.getClass()>")
chamada antiga: assertEquals(list2.get(0).getClass(), list2.get(0).getClass())
nova chamada: assertEquals(list2.get(0).getClass(), list2.get(0).getClass(), "Era esperado valores iguais, mas " + result5131 + " <list2.get(0).getClass()> é diferente de " + result5132 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(list.get(0).getClass(), list2.get(0).getClass())
nova chamada: assertEquals(list.get(0).getClass(), list2.get(0).getClass(), "Era esperado valores iguais, mas " + result5133 + " <list.get(0).getClass()> é diferente de " + result5134 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(list.get(0).getClass(), list2.get(0).getClass())
nova chamada: assertEquals(list.get(0).getClass(), list2.get(0).getClass(), "Era esperado valores iguais, mas " + result5135 + " <list.get(0).getClass()> é diferente de " + result5136 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(array[0].getClass(), array2[0].getClass())
nova chamada: assertEquals(array[0].getClass(), array2[0].getClass(), "Era esperado valores iguais, mas " + result5137 + " <array[0].getClass()> é diferente de " + result5138 + " <array2[0].getClass()>")
chamada antiga: assertEquals(array[1].getClass(), array2[1].getClass())
nova chamada: assertEquals(array[1].getClass(), array2[1].getClass(), "Era esperado valores iguais, mas " + result5139 + " <array[1].getClass()> é diferente de " + result5140 + " <array2[1].getClass()>")
chamada antiga: assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass())
nova chamada: assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass(), "Era esperado valores iguais, mas " + result5141 + " <object.getInnerMap().getClass()> é diferente de " + result5142 + " <object2.getInnerMap().getClass()>")
chamada antiga: assertEquals(bean.value, bean2.value)
nova chamada: assertEquals(bean.value, bean2.value, "Era esperado valores iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertEquals(bean.params.getClass(), bean2.params.getClass())
nova chamada: assertEquals(bean.params.getClass(), bean2.params.getClass(), "Era esperado valores iguais, mas " + result5143 + " <bean.params.getClass()> é diferente de " + result5144 + " <bean2.params.getClass()>")
chamada antiga: assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass())
nova chamada: assertEquals(object.getInnerMap().getClass(), object2.getInnerMap().getClass(), "Era esperado valores iguais, mas " + result5145 + " <object.getInnerMap().getClass()> é diferente de " + result5146 + " <object2.getInnerMap().getClass()>")
chamada antiga: assertEquals(bean.params.getClass(), bean2.params.getClass())
nova chamada: assertEquals(bean.params.getClass(), bean2.params.getClass(), "Era esperado valores iguais, mas " + result5147 + " <bean.params.getClass()> é diferente de " + result5148 + " <bean2.params.getClass()>")
chamada antiga: assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass())
nova chamada: assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass(), "Era esperado valores iguais, mas " + result5149 + " <bean.params.get(0).getClass()> é diferente de " + result5150 + " <bean2.params.get(0).getClass()>")
chamada antiga: assertEquals(bean.params.getClass(), bean2.params.getClass())
nova chamada: assertEquals(bean.params.getClass(), bean2.params.getClass(), "Era esperado valores iguais, mas " + result5151 + " <bean.params.getClass()> é diferente de " + result5152 + " <bean2.params.getClass()>")
chamada antiga: assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass())
nova chamada: assertEquals(bean.params.get(0).getClass(), bean2.params.get(0).getClass(), "Era esperado valores iguais, mas " + result5153 + " <bean.params.get(0).getClass()> é diferente de " + result5154 + " <bean2.params.get(0).getClass()>")
chamada antiga: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1002}]}", json)
nova chamada: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest2$C\",\"id\":1002}]}", json, "Era esperado valores iguais, mas  '{\'list\':[{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest2$C\',\'id\':1001},{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest2$C\',\'id\':1002}]}' é diferente de " + " json")
chamada antiga: assertSame(a2.list.get(0).getClass(), C.class)
nova chamada: assertSame(a2.list.get(0).getClass(), C.class, "Era esperado objetos iguais, mas " + result5155 + " <a2.list.get(0).getClass()> é diferente de " + " C.class")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5156 + " <bean.items.getClass()> é diferente de " + result5157 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5158 + " <bean.items.size()> é diferente de " + result5159 + " <bean2.items.size()>")
chamada antiga: assertEquals("a", value2.stream().findFirst().get())
nova chamada: assertEquals("a", value2.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result5160 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(1, value2.size())
nova chamada: assertEquals(1, value2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5161 + " <value2.size()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5162 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals("a", value2.stream().findFirst().get())
nova chamada: assertEquals("a", value2.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result5163 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(1, value2.size())
nova chamada: assertEquals(1, value2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5164 + " <value2.size()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5165 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals("a", value2.stream().findFirst().get())
nova chamada: assertEquals("a", value2.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result5166 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(1, value2.size())
nova chamada: assertEquals(1, value2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5167 + " <value2.size()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5168 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals("a", value2.stream().findFirst().get())
nova chamada: assertEquals("a", value2.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result5169 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(1, value2.size())
nova chamada: assertEquals(1, value2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5170 + " <value2.size()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5171 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals("a", value2.stream().findFirst().get())
nova chamada: assertEquals("a", value2.stream().findFirst().get(), "Era esperado valores iguais, mas  'a' é diferente de " + result5172 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(1, value2.size())
nova chamada: assertEquals(1, value2.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5173 + " <value2.size()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5174 + " <value2.stream().findFirst().get()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5175 + " <bean.items.getClass()> é diferente de " + result5176 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5177 + " <bean.items.size()> é diferente de " + result5178 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.get(0), bean2.items.get(0))
nova chamada: assertEquals(bean.items.get(0), bean2.items.get(0), "Era esperado valores iguais, mas " + result5179 + " <bean.items.get(0)> é diferente de " + result5180 + " <bean2.items.get(0)>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5181 + " <bean.items.getClass()> é diferente de " + result5182 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5183 + " <bean.items.size()> é diferente de " + result5184 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.get(0), bean2.items.get(0))
nova chamada: assertEquals(bean.items.get(0), bean2.items.get(0), "Era esperado valores iguais, mas " + result5185 + " <bean.items.get(0)> é diferente de " + result5186 + " <bean2.items.get(0)>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest30$Bean2\",\n" + "\t\"value\":\"1001\"\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest30$Bean2\",\n" + "\t\"value\":\"1001\"\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest30$Bean2\',\n' + '\t\'value\':\'1001\'\n' + '}' é diferente de " + result5187 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5188 + " <bean.value.getClass()> é diferente de " + result5189 + " <bean2.value.getClass()>")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2[0])
nova chamada: assertNotNull(array2[0], "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array[0], array2[0])
nova chamada: assertEquals(array[0], array2[0], "Era esperado valores iguais, mas  array[0] é diferente de " + " array2[0]")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values[0], bean2.values[0])
nova chamada: assertEquals(bean.values[0], bean2.values[0], "Era esperado valores iguais, mas  bean.values[0] é diferente de " + " bean2.values[0]")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values[0], bean2.values[0])
nova chamada: assertEquals(bean.values[0], bean2.values[0], "Era esperado valores iguais, mas  bean.values[0] é diferente de " + " bean2.values[0]")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5190 + " <bean.value.getClass()> é diferente de " + result5191 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5192 + " <bean.value.getClass()> é diferente de " + result5193 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5194 + " <bean.value.getClass()> é diferente de " + result5195 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(dataSource)
nova chamada: assertNotNull(dataSource, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5196 + " <bean.items.size()> é diferente de " + result5197 + " <bean2.items.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5198 + " <bean.items.getClass()> é diferente de " + result5199 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5200 + " <bean.items.getClass()> é diferente de " + result5201 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5202 + " <bean.items.getClass()> é diferente de " + result5203 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5204 + " <bean.items.getClass()> é diferente de " + result5205 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5206 + " <bean.items.getClass()> é diferente de " + result5207 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5208 + " <bean.items.getClass()> é diferente de " + result5209 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5210 + " <bean.items.getClass()> é diferente de " + result5211 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5212 + " <bean.items.getClass()> é diferente de " + result5213 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5214 + " <bean.items.size()> é diferente de " + result5215 + " <bean2.items.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5216 + " <bean.items.getClass()> é diferente de " + result5217 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5218 + " <bean.items.size()> é diferente de " + result5219 + " <bean2.items.size()>")
chamada antiga: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1002}]}", json)
nova chamada: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest1$C\",\"id\":1002}]}", json, "Era esperado valores iguais, mas  '{\'list\':[{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest1$C\',\'id\':1001},{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest1$C\',\'id\':1002}]}' é diferente de " + " json")
chamada antiga: assertSame(a2.list.get(0).getClass(), C.class)
nova chamada: assertSame(a2.list.get(0).getClass(), C.class, "Era esperado objetos iguais, mas " + result5220 + " <a2.list.get(0).getClass()> é diferente de " + " C.class")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5221 + " <bean.values.getClass()> é diferente de " + result5222 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5223 + " <bean.values.size()> é diferente de " + result5224 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5225 + " <bean.values.get(0).getClass()> é diferente de " + result5226 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5227 + " <bean.values.get(1).getClass()> é diferente de " + result5228 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass())
nova chamada: assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass(), "Era esperado valores iguais, mas " + result5229 + " <bean.values.get(2).getClass()> é diferente de " + result5230 + " <bean2.values.get(2).getClass()>")
chamada antiga: assertEquals(bean.values.get(3).getClass(), bean2.values.get(3).getClass())
nova chamada: assertEquals(bean.values.get(3).getClass(), bean2.values.get(3).getClass(), "Era esperado valores iguais, mas " + result5231 + " <bean.values.get(3).getClass()> é diferente de " + result5232 + " <bean2.values.get(3).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5233 + " <bean.values.getClass()> é diferente de " + result5234 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5235 + " <bean.values.size()> é diferente de " + result5236 + " <bean2.values.size()>")
chamada antiga: assertEquals(array[0].getClass(), array2[0].getClass())
nova chamada: assertEquals(array[0].getClass(), array2[0].getClass(), "Era esperado valores iguais, mas " + result5237 + " <array[0].getClass()> é diferente de " + result5238 + " <array2[0].getClass()>")
chamada antiga: assertEquals(array[1].getClass(), array2[1].getClass())
nova chamada: assertEquals(array[1].getClass(), array2[1].getClass(), "Era esperado valores iguais, mas " + result5239 + " <array[1].getClass()> é diferente de " + result5240 + " <array2[1].getClass()>")
chamada antiga: assertEquals(array[2].getClass(), array2[2].getClass())
nova chamada: assertEquals(array[2].getClass(), array2[2].getClass(), "Era esperado valores iguais, mas " + result5241 + " <array[2].getClass()> é diferente de " + result5242 + " <array2[2].getClass()>")
chamada antiga: assertEquals(array[3].getClass(), array2[3].getClass())
nova chamada: assertEquals(array[3].getClass(), array2[3].getClass(), "Era esperado valores iguais, mas " + result5243 + " <array[3].getClass()> é diferente de " + result5244 + " <array2[3].getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5245 + " <bean.values.getClass()> é diferente de " + result5246 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5247 + " <bean.values.size()> é diferente de " + result5248 + " <bean2.values.size()>")
chamada antiga: assertEquals(array[0].getClass(), array2[0].getClass())
nova chamada: assertEquals(array[0].getClass(), array2[0].getClass(), "Era esperado valores iguais, mas " + result5249 + " <array[0].getClass()> é diferente de " + result5250 + " <array2[0].getClass()>")
chamada antiga: assertEquals(array[1].getClass(), array2[1].getClass())
nova chamada: assertEquals(array[1].getClass(), array2[1].getClass(), "Era esperado valores iguais, mas " + result5251 + " <array[1].getClass()> é diferente de " + result5252 + " <array2[1].getClass()>")
chamada antiga: assertEquals(array[2].getClass(), array2[2].getClass())
nova chamada: assertEquals(array[2].getClass(), array2[2].getClass(), "Era esperado valores iguais, mas " + result5253 + " <array[2].getClass()> é diferente de " + result5254 + " <array2[2].getClass()>")
chamada antiga: assertEquals(array[3].getClass(), array2[3].getClass())
nova chamada: assertEquals(array[3].getClass(), array2[3].getClass(), "Era esperado valores iguais, mas " + result5255 + " <array[3].getClass()> é diferente de " + result5256 + " <array2[3].getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5257 + " <bean.values.getClass()> é diferente de " + result5258 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5259 + " <bean.values.size()> é diferente de " + result5260 + " <bean2.values.size()>")
chamada antiga: assertEquals(array[0].getClass(), array2[0].getClass())
nova chamada: assertEquals(array[0].getClass(), array2[0].getClass(), "Era esperado valores iguais, mas " + result5261 + " <array[0].getClass()> é diferente de " + result5262 + " <array2[0].getClass()>")
chamada antiga: assertEquals(array[1].getClass(), array2[1].getClass())
nova chamada: assertEquals(array[1].getClass(), array2[1].getClass(), "Era esperado valores iguais, mas " + result5263 + " <array[1].getClass()> é diferente de " + result5264 + " <array2[1].getClass()>")
chamada antiga: assertEquals(array[2].getClass(), array2[2].getClass())
nova chamada: assertEquals(array[2].getClass(), array2[2].getClass(), "Era esperado valores iguais, mas " + result5265 + " <array[2].getClass()> é diferente de " + result5266 + " <array2[2].getClass()>")
chamada antiga: assertEquals(array[3].getClass(), array2[3].getClass())
nova chamada: assertEquals(array[3].getClass(), array2[3].getClass(), "Era esperado valores iguais, mas " + result5267 + " <array[3].getClass()> é diferente de " + result5268 + " <array2[3].getClass()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5269 + " <bean.items.getClass()> é diferente de " + result5270 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5271 + " <bean.items.size()> é diferente de " + result5272 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5273 + " <bean.items.stream().findFirst().get()> é diferente de " + result5274 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5275 + " <bean.items.getClass()> é diferente de " + result5276 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5277 + " <bean.items.size()> é diferente de " + result5278 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5279 + " <bean.items.stream().findFirst().get()> é diferente de " + result5280 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5281 + " <bean.items.getClass()> é diferente de " + result5282 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5283 + " <bean.items.size()> é diferente de " + result5284 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5285 + " <bean.items.stream().findFirst().get()> é diferente de " + result5286 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5287 + " <bean.items.getClass()> é diferente de " + result5288 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5289 + " <bean.items.size()> é diferente de " + result5290 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5291 + " <bean.items.stream().findFirst().get()> é diferente de " + result5292 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5293 + " <bean.items.getClass()> é diferente de " + result5294 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5295 + " <bean.items.size()> é diferente de " + result5296 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5297 + " <bean.items.stream().findFirst().get()> é diferente de " + result5298 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(o instanceof JSONObject)
nova chamada: assertTrue(o instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(e.getStackTrace().length, e1.getStackTrace().length)
nova chamada: assertEquals(e.getStackTrace().length, e1.getStackTrace().length, "Era esperado valores iguais, mas  e.getStackTrace().length é diferente de " + " e1.getStackTrace().length")
chamada antiga: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(HashSet.class)))
nova chamada: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(HashSet.class)), "Era esperado valores iguais, mas  set é diferente de " + result5299 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(HashSet.class))>")
chamada antiga: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Set")))
nova chamada: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Set")), "Era esperado valores iguais, mas  set é diferente de " + result5300 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('Set'))>")
chamada antiga: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet")))
nova chamada: assertEquals(set, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet")), "Era esperado valores iguais, mas  set é diferente de " + result5301 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('HashSet'))>")
chamada antiga: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object[].class), features))
nova chamada: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object[].class), features), "Era esperado arrays iguais, mas  array é diferente de " + " (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object[].class), features)")
chamada antiga: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object.class), features))
nova chamada: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object.class), features), "Era esperado arrays iguais, mas  array é diferente de " + " (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class, Object.class), features)")
chamada antiga: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object[].class.getName()), features))
nova chamada: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object[].class.getName()), features), "Era esperado arrays iguais, mas  array é diferente de " + " (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object[].class.getName()), features)")
chamada antiga: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object.class.getName()), features))
nova chamada: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object.class.getName()), features), "Era esperado arrays iguais, mas  array é diferente de " + " (Object[]) JSONB.parseObject(jsonbBytes, Object.class, JSONReader.autoTypeFilter(String.class.getName(), Object.class.getName()), features)")
chamada antiga: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, new ContextAutoTypeBeforeHandler(true), features))
nova chamada: assertArrayEquals(array, (Object[]) JSONB.parseObject(jsonbBytes, Object.class, new ContextAutoTypeBeforeHandler(true), features), "Era esperado arrays iguais, mas  array é diferente de " + " (Object[]) JSONB.parseObject(jsonbBytes, Object.class, new ContextAutoTypeBeforeHandler(true), features)")
chamada antiga: assertNotNull(error2.getStackTrace())
nova chamada: assertNotNull(error2.getStackTrace(), "Era esperado não nulo, mas " + result5302 + " <error2.getStackTrace()> é nulo")
chamada antiga: assertEquals(error.getStackTrace().length, error2.getStackTrace().length)
nova chamada: assertEquals(error.getStackTrace().length, error2.getStackTrace().length, "Era esperado valores iguais, mas  error.getStackTrace().length é diferente de " + " error2.getStackTrace().length")
chamada antiga: assertEquals(error.getClass(), error2.getClass())
nova chamada: assertEquals(error.getClass(), error2.getClass(), "Era esperado valores iguais, mas " + result5303 + " <error.getClass()> é diferente de " + result5304 + " <error2.getClass()>")
chamada antiga: assertNotNull(error2.getStackTrace())
nova chamada: assertNotNull(error2.getStackTrace(), "Era esperado não nulo, mas " + result5305 + " <error2.getStackTrace()> é nulo")
chamada antiga: assertEquals(value.getClass(), value2.getClass())
nova chamada: assertEquals(value.getClass(), value2.getClass(), "Era esperado valores iguais, mas " + result5306 + " <value.getClass()> é diferente de " + result5307 + " <value2.getClass()>")
chamada antiga: assertEquals(value.size(), value2.size())
nova chamada: assertEquals(value.size(), value2.size(), "Era esperado valores iguais, mas " + result5308 + " <value.size()> é diferente de " + result5309 + " <value2.size()>")
chamada antiga: assertEquals(value.get(0), value2.get(0))
nova chamada: assertEquals(value.get(0), value2.get(0), "Era esperado valores iguais, mas " + result5310 + " <value.get(0)> é diferente de " + result5311 + " <value2.get(0)>")
chamada antiga: assertEquals(value.get(1), value2.get(1))
nova chamada: assertEquals(value.get(1), value2.get(1), "Era esperado valores iguais, mas " + result5312 + " <value.get(1)> é diferente de " + result5313 + " <value2.get(1)>")
chamada antiga: assertEquals(value.get(2), value2.get(2))
nova chamada: assertEquals(value.get(2), value2.get(2), "Era esperado valores iguais, mas " + result5314 + " <value.get(2)> é diferente de " + result5315 + " <value2.get(2)>")
chamada antiga: Assertions.assertEquals("[101,102,101]", str)
nova chamada: assertEquals("[101,102,101]", str, "Era esperado valores iguais, mas  '[101,102,101]' é diferente de " + " str")
chamada antiga: assertEquals(value.getClass(), value2.getClass())
nova chamada: assertEquals(value.getClass(), value2.getClass(), "Era esperado valores iguais, mas " + result5316 + " <value.getClass()> é diferente de " + result5317 + " <value2.getClass()>")
chamada antiga: assertEquals(value.size(), value2.size())
nova chamada: assertEquals(value.size(), value2.size(), "Era esperado valores iguais, mas " + result5318 + " <value.size()> é diferente de " + result5319 + " <value2.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5320 + " <bean.values.getClass()> é diferente de " + result5321 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5322 + " <bean.values.size()> é diferente de " + result5323 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0), bean2.values.get(0))
nova chamada: assertEquals(bean.values.get(0), bean2.values.get(0), "Era esperado valores iguais, mas " + result5324 + " <bean.values.get(0)> é diferente de " + result5325 + " <bean2.values.get(0)>")
chamada antiga: assertEquals(bean.values.get(1), bean2.values.get(1))
nova chamada: assertEquals(bean.values.get(1), bean2.values.get(1), "Era esperado valores iguais, mas " + result5326 + " <bean.values.get(1)> é diferente de " + result5327 + " <bean2.values.get(1)>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5328 + " <bean.values.getClass()> é diferente de " + result5329 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5330 + " <bean.values.size()> é diferente de " + result5331 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5332 + " <bean.values.get(0).getClass()> é diferente de " + result5333 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5334 + " <bean.items.getClass()> é diferente de " + result5335 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5336 + " <bean.items.size()> é diferente de " + result5337 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5338 + " <bean.items.stream().findFirst().get()> é diferente de " + result5339 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5340 + " <bean.items.getClass()> é diferente de " + result5341 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5342 + " <bean.items.size()> é diferente de " + result5343 + " <bean2.items.size()>")
chamada antiga: assertEquals(map.get("a").getClass(), map2.get("a").getClass())
nova chamada: assertEquals(map.get("a").getClass(), map2.get("a").getClass(), "Era esperado valores iguais, mas " + result5344 + " <map.get('a').getClass()> é diferente de " + result5345 + " <map2.get('a').getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5346 + " <bean.values.getClass()> é diferente de " + result5347 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5348 + " <bean.values.size()> é diferente de " + result5349 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5350 + " <bean.values.get(0).getClass()> é diferente de " + result5351 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5352 + " <bean.values.get(1).getClass()> é diferente de " + result5353 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5354 + " <bean.values.getClass()> é diferente de " + result5355 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5356 + " <bean.values.size()> é diferente de " + result5357 + " <bean2.values.size()>")
chamada antiga: assertEquals(array[0].getClass(), array2[0].getClass())
nova chamada: assertEquals(array[0].getClass(), array2[0].getClass(), "Era esperado valores iguais, mas " + result5358 + " <array[0].getClass()> é diferente de " + result5359 + " <array2[0].getClass()>")
chamada antiga: assertEquals(array[1].getClass(), array2[1].getClass())
nova chamada: assertEquals(array[1].getClass(), array2[1].getClass(), "Era esperado valores iguais, mas " + result5360 + " <array[1].getClass()> é diferente de " + result5361 + " <array2[1].getClass()>")
chamada antiga: assertEquals(array[2].getClass(), array2[2].getClass())
nova chamada: assertEquals(array[2].getClass(), array2[2].getClass(), "Era esperado valores iguais, mas " + result5362 + " <array[2].getClass()> é diferente de " + result5363 + " <array2[2].getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5364 + " <bean.values.getClass()> é diferente de " + result5365 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5366 + " <bean.values.size()> é diferente de " + result5367 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5368 + " <bean.values.get(0).getClass()> é diferente de " + result5369 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5370 + " <bean.values.get(1).getClass()> é diferente de " + result5371 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5372 + " <bean.values.getClass()> é diferente de " + result5373 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5374 + " <bean.values.size()> é diferente de " + result5375 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5376 + " <bean.values.get(0).getClass()> é diferente de " + result5377 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5378 + " <bean.values.getClass()> é diferente de " + result5379 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5380 + " <bean.values.size()> é diferente de " + result5381 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5382 + " <bean.values.get(0).getClass()> é diferente de " + result5383 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5384 + " <bean.values.get(1).getClass()> é diferente de " + result5385 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass())
nova chamada: assertEquals(bean.values.get(2).getClass(), bean2.values.get(2).getClass(), "Era esperado valores iguais, mas " + result5386 + " <bean.values.get(2).getClass()> é diferente de " + result5387 + " <bean2.values.get(2).getClass()>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item0#1\":{\n" + "\t\t\t\"id#2\":1001\n" + "\t\t},\n" + "\t\t\"item1#3\":{\"$ref\":\"$.item0\"},\n" + "\t\t\"item2#4\":{\"$ref\":\"#-1\"},\n" + "\t\t\"item3#5\":{\"$ref\":\"#-1\"}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"item0#1\":{\n" + "\t\t\t\"id#2\":1001\n" + "\t\t},\n" + "\t\t\"item1#3\":{\"$ref\":\"$.item0\"},\n" + "\t\t\"item2#4\":{\"$ref\":\"#-1\"},\n" + "\t\t\"item3#5\":{\"$ref\":\"#-1\"}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean#0\',\n' + '\t\'@value\':{\n' + '\t\t\'item0#1\':{\n' + '\t\t\t\'id#2\':1001\n' + '\t\t},\n' + '\t\t\'item1#3\':{\'$ref\':\'$.item0\'},\n' + '\t\t\'item2#4\':{\'$ref\':\'#-1\'},\n' + '\t\t\'item3#5\':{\'$ref\':\'#-1\'}\n' + '\t}\n' + '}' é diferente de " + result5388 + " <new JSONBDump(bytes, true).toString()>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean\",\n" + "\t\"item0\":{\n" + "\t\t\"id\":1001\n" + "\t},\n" + "\t\"item1\":{\"$ref\":\"$.item0\"},\n" + "\t\"item2\":{\"$ref\":\"#-1\"},\n" + "\t\"item3\":{\"$ref\":\"#-1\"}\n" + "}", new JSONBDump(bytes, false).toString())
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean\",\n" + "\t\"item0\":{\n" + "\t\t\"id\":1001\n" + "\t},\n" + "\t\"item1\":{\"$ref\":\"$.item0\"},\n" + "\t\"item2\":{\"$ref\":\"#-1\"},\n" + "\t\"item3\":{\"$ref\":\"#-1\"}\n" + "}", new JSONBDump(bytes, false).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest41_dupRef$Bean\',\n' + '\t\'item0\':{\n' + '\t\t\'id\':1001\n' + '\t},\n' + '\t\'item1\':{\'$ref\':\'$.item0\'},\n' + '\t\'item2\':{\'$ref\':\'#-1\'},\n' + '\t\'item3\':{\'$ref\':\'#-1\'}\n' + '}' é diferente de " + result5389 + " <new JSONBDump(bytes, false).toString()>")
chamada antiga: assertEquals(bean.item0.getClass(), bean2.item0.getClass())
nova chamada: assertEquals(bean.item0.getClass(), bean2.item0.getClass(), "Era esperado valores iguais, mas " + result5390 + " <bean.item0.getClass()> é diferente de " + result5391 + " <bean2.item0.getClass()>")
chamada antiga: assertSame(bean2.item0, bean2.item1)
nova chamada: assertSame(bean2.item0, bean2.item1, "Era esperado objetos iguais, mas  bean2.item0 é diferente de " + " bean2.item1")
chamada antiga: assertSame(bean2.item0, bean2.item2)
nova chamada: assertSame(bean2.item0, bean2.item2, "Era esperado objetos iguais, mas  bean2.item0 é diferente de " + " bean2.item2")
chamada antiga: assertSame(bean2.item0, bean2.item3)
nova chamada: assertSame(bean2.item0, bean2.item3, "Era esperado objetos iguais, mas  bean2.item0 é diferente de " + " bean2.item3")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5392 + " <bean.items.getClass()> é diferente de " + result5393 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5394 + " <bean.items.size()> é diferente de " + result5395 + " <bean2.items.size()>")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5396 + " <bean.items.getClass()> é diferente de " + result5397 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5398 + " <bean.items.size()> é diferente de " + result5399 + " <bean2.items.size()>")
chamada antiga: assertSame(bean.items.get("a").getClass(), bean2.items.get("a").getClass())
nova chamada: assertSame(bean.items.get("a").getClass(), bean2.items.get("a").getClass(), "Era esperado objetos iguais, mas " + result5400 + " <bean.items.get('a').getClass()> é diferente de " + result5401 + " <bean2.items.get('a').getClass()>")
chamada antiga: assertSame(bean.items.get("a").id, bean2.items.get("a").id)
nova chamada: assertSame(bean.items.get("a").id, bean2.items.get("a").id, "Era esperado objetos iguais, mas  bean.items.get('a').id é diferente de " + " bean2.items.get('a').id")
chamada antiga: assertNotNull(a1)
nova chamada: assertNotNull(a1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(b1)
nova chamada: assertNotNull(b1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(A.class, array2[0].getClass())
nova chamada: assertEquals(A.class, array2[0].getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5402 + " <array2[0].getClass()>")
chamada antiga: assertEquals(B.class, array2[1].getClass())
nova chamada: assertEquals(B.class, array2[1].getClass(), "Era esperado valores iguais, mas  B.class é diferente de " + result5403 + " <array2[1].getClass()>")
chamada antiga: assertEquals(A1[].class, bean2.values.getClass())
nova chamada: assertEquals(A1[].class, bean2.values.getClass(), "Era esperado valores iguais, mas  A1[].class é diferente de " + result5404 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(A.class, list2.get(0).getClass())
nova chamada: assertEquals(A.class, list2.get(0).getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5405 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(A.class, list2.get(0).getClass())
nova chamada: assertEquals(A.class, list2.get(0).getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5406 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(A.class, list2.get(0).getClass())
nova chamada: assertEquals(A.class, list2.get(0).getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5407 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(A.class, list2.get(0).getClass())
nova chamada: assertEquals(A.class, list2.get(0).getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5408 + " <list2.get(0).getClass()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5409 + " <bean.items.getClass()> é diferente de " + result5410 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5411 + " <bean.items.size()> é diferente de " + result5412 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5413 + " <bean.items.stream().findFirst().get()> é diferente de " + result5414 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5415 + " <bean.items.getClass()> é diferente de " + result5416 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5417 + " <bean.items.size()> é diferente de " + result5418 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5419 + " <bean.items.stream().findFirst().get()> é diferente de " + result5420 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5421 + " <bean.items.getClass()> é diferente de " + result5422 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5423 + " <bean.items.size()> é diferente de " + result5424 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5425 + " <bean.items.stream().findFirst().get()> é diferente de " + result5426 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5427 + " <bean.items.getClass()> é diferente de " + result5428 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5429 + " <bean.items.size()> é diferente de " + result5430 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5431 + " <bean.items.stream().findFirst().get()> é diferente de " + result5432 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5433 + " <bean.items.getClass()> é diferente de " + result5434 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5435 + " <bean.items.size()> é diferente de " + result5436 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertEquals(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5437 + " <bean.items.stream().findFirst().get()> é diferente de " + result5438 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest6$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest6$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest6$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertSame(a2.value.getClass(), B.class)
nova chamada: assertSame(a2.value.getClass(), B.class, "Era esperado objetos iguais, mas " + result5439 + " <a2.value.getClass()> é diferente de " + " B.class")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest5$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest5$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest5$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertEquals(A.class, a1.getClass())
nova chamada: assertEquals(A.class, a1.getClass(), "Era esperado valores iguais, mas  A.class é diferente de " + result5440 + " <a1.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean2.values)
nova chamada: assertNull(bean2.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(array2)
nova chamada: assertNotNull(array2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(array.length, array2.length)
nova chamada: assertEquals(array.length, array2.length, "Era esperado valores iguais, mas  array.length é diferente de " + " array2.length")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5441 + " <bean.value.getClass()> é diferente de " + result5442 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5443 + " <bean.value.getClass()> é diferente de " + result5444 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.value)
nova chamada: assertNotNull(bean2.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.value.getClass(), bean2.value.getClass())
nova chamada: assertSame(bean.value.getClass(), bean2.value.getClass(), "Era esperado objetos iguais, mas " + result5445 + " <bean.value.getClass()> é diferente de " + result5446 + " <bean2.value.getClass()>")
chamada antiga: assertSame(bean.value, bean2.value)
nova chamada: assertSame(bean.value, bean2.value, "Era esperado objetos iguais, mas  bean.value é diferente de " + " bean2.value")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5447 + " <bean.getClass()> é diferente de " + result5448 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.map.getClass(), bean2.map.getClass())
nova chamada: assertEquals(bean.map.getClass(), bean2.map.getClass(), "Era esperado valores iguais, mas " + result5449 + " <bean.map.getClass()> é diferente de " + result5450 + " <bean2.map.getClass()>")
chamada antiga: assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass())
nova chamada: assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass(), "Era esperado valores iguais, mas " + result5451 + " <bean.map.get('123').getClass()> é diferente de " + result5452 + " <bean2.map.get('123').getClass()>")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5453 + " <bean.getClass()> é diferente de " + result5454 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.map.getClass(), bean2.map.getClass())
nova chamada: assertEquals(bean.map.getClass(), bean2.map.getClass(), "Era esperado valores iguais, mas " + result5455 + " <bean.map.getClass()> é diferente de " + result5456 + " <bean2.map.getClass()>")
chamada antiga: assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass())
nova chamada: assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass(), "Era esperado valores iguais, mas " + result5457 + " <bean.map.get('123').getClass()> é diferente de " + result5458 + " <bean2.map.get('123').getClass()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5459 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(101, value2.stream().findFirst().get())
nova chamada: assertEquals(101, value2.stream().findFirst().get(), "Era esperado valores iguais, mas  101 é diferente de " + result5460 + " <value2.stream().findFirst().get()>")
chamada antiga: assertEquals(101, map2.get("a"))
nova chamada: assertEquals(101, map2.get("a"), "Era esperado valores iguais, mas  101 é diferente de " + result5461 + " <map2.get('a')>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items1)
nova chamada: assertNotNull(bean2.items1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean2.items, bean2.items1)
nova chamada: assertSame(bean2.items, bean2.items1, "Era esperado objetos iguais, mas  bean2.items é diferente de " + " bean2.items1")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items1)
nova chamada: assertNotNull(bean2.items1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean2.items, bean2.items1)
nova chamada: assertSame(bean2.items, bean2.items1, "Era esperado objetos iguais, mas  bean2.items é diferente de " + " bean2.items1")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5462 + " <bean.getClass()> é diferente de " + result5463 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5464 + " <bean.values.getClass()> é diferente de " + result5465 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5466 + " <bean.values.size()> é diferente de " + result5467 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get())
nova chamada: assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5468 + " <bean.values.stream().findFirst().get()> é diferente de " + result5469 + " <bean2.values.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5470 + " <bean.getClass()> é diferente de " + result5471 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5472 + " <bean.values.getClass()> é diferente de " + result5473 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5474 + " <bean.values.size()> é diferente de " + result5475 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get())
nova chamada: assertEquals(bean.values.stream().findFirst().get(), bean2.values.stream().findFirst().get(), "Era esperado valores iguais, mas " + result5476 + " <bean.values.stream().findFirst().get()> é diferente de " + result5477 + " <bean2.values.stream().findFirst().get()>")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5478 + " <bean.getClass()> é diferente de " + result5479 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5480 + " <bean.values.getClass()> é diferente de " + result5481 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5482 + " <bean.values.size()> é diferente de " + result5483 + " <bean2.values.size()>")
chamada antiga: assertTrue(differ.diff())
nova chamada: assertTrue(differ.diff(), "Era esperado verdadeiro, mas " + result5484 + " <differ.diff()> é falso")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean2.map.size(), bean2.map.size())
nova chamada: assertEquals(bean2.map.size(), bean2.map.size(), "Era esperado valores iguais, mas " + result5485 + " <bean2.map.size()> é diferente de " + result5486 + " <bean2.map.size()>")
chamada antiga: assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next())
nova chamada: assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next(), "Era esperado valores iguais, mas " + result5487 + " <bean2.map.keySet().iterator().next()> é diferente de " + result5488 + " <bean2.map.keySet().iterator().next()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean2.map.size(), bean2.map.size())
nova chamada: assertEquals(bean2.map.size(), bean2.map.size(), "Era esperado valores iguais, mas " + result5489 + " <bean2.map.size()> é diferente de " + result5490 + " <bean2.map.size()>")
chamada antiga: assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next())
nova chamada: assertEquals(bean2.map.keySet().iterator().next(), bean2.map.keySet().iterator().next(), "Era esperado valores iguais, mas " + result5491 + " <bean2.map.keySet().iterator().next()> é diferente de " + result5492 + " <bean2.map.keySet().iterator().next()>")
chamada antiga: assertEquals("key", pair.getLeft())
nova chamada: assertEquals("key", pair.getLeft(), "Era esperado valores iguais, mas  'key' é diferente de " + result5493 + " <pair.getLeft()>")
chamada antiga: assertEquals(101, pair.getRight())
nova chamada: assertEquals(101, pair.getRight(), "Era esperado valores iguais, mas  101 é diferente de " + result5494 + " <pair.getRight()>")
chamada antiga: assertEquals("key", pair.getLeft())
nova chamada: assertEquals("key", pair.getLeft(), "Era esperado valores iguais, mas  'key' é diferente de " + result5495 + " <pair.getLeft()>")
chamada antiga: assertEquals(101, pair.getRight())
nova chamada: assertEquals(101, pair.getRight(), "Era esperado valores iguais, mas  101 é diferente de " + result5496 + " <pair.getRight()>")
chamada antiga: assertEquals(101, proxy.getId())
nova chamada: assertEquals(101, proxy.getId(), "Era esperado valores iguais, mas  101 é diferente de " + result5497 + " <proxy.getId()>")
chamada antiga: assertEquals(101, object.get("id"))
nova chamada: assertEquals(101, object.get("id"), "Era esperado valores iguais, mas  101 é diferente de " + result5498 + " <object.get('id')>")
chamada antiga: assertEquals(102, proxy.getId())
nova chamada: assertEquals(102, proxy.getId(), "Era esperado valores iguais, mas  102 é diferente de " + result5499 + " <proxy.getId()>")
chamada antiga: assertEquals(1, ((Map) proxy).size())
nova chamada: assertEquals(1, ((Map) proxy).size(), "Era esperado valores iguais, mas  1 é diferente de " + result5500 + " <((Map) proxy).size()>")
chamada antiga: assertEquals(false, ((Map) proxy).isEmpty())
nova chamada: assertEquals(false, ((Map) proxy).isEmpty(), "Era esperado valores iguais, mas  false é diferente de " + result5501 + " <((Map) proxy).isEmpty()>")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest43_dynamic$Model\",\n" + "\t\"id\":102\n" + "}", JSONB.toJSONString(bytes))
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest43_dynamic$Model\",\n" + "\t\"id\":102\n" + "}", JSONB.toJSONString(bytes), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest43_dynamic$Model\',\n' + '\t\'id\':102\n' + '}' é diferente de " + result5502 + " <JSONB.toJSONString(bytes)>")
chamada antiga: assertEquals(102, value2.getId())
nova chamada: assertEquals(102, value2.getId(), "Era esperado valores iguais, mas  102 é diferente de " + result5503 + " <value2.getId()>")
chamada antiga: assertEquals(144, bytes.length)
nova chamada: assertEquals(144, bytes.length, "Era esperado valores iguais, mas  144 é diferente de " + " bytes.length")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5504 + " <bean.getClass()> é diferente de " + result5505 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5506 + " <bean.items.getClass()> é diferente de " + result5507 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5508 + " <bean.items.size()> é diferente de " + result5509 + " <bean2.items.size()>")
chamada antiga: assertEquals(bean.items.values().stream().findFirst().get().getClass(), bean2.items.values().stream().findFirst().get().getClass())
nova chamada: assertEquals(bean.items.values().stream().findFirst().get().getClass(), bean2.items.values().stream().findFirst().get().getClass(), "Era esperado valores iguais, mas " + result5510 + " <bean.items.values().stream().findFirst().get().getClass()> é diferente de " + result5511 + " <bean2.items.values().stream().findFirst().get().getClass()>")
chamada antiga: assertEquals(map.getClass(), map2.getClass())
nova chamada: assertEquals(map.getClass(), map2.getClass(), "Era esperado valores iguais, mas " + result5512 + " <map.getClass()> é diferente de " + result5513 + " <map2.getClass()>")
chamada antiga: assertEquals(map.values().stream().findFirst().get().getClass(), map2.values().stream().findFirst().get().getClass())
nova chamada: assertEquals(map.values().stream().findFirst().get().getClass(), map2.values().stream().findFirst().get().getClass(), "Era esperado valores iguais, mas " + result5514 + " <map.values().stream().findFirst().get().getClass()> é diferente de " + result5515 + " <map2.values().stream().findFirst().get().getClass()>")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest3$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest3$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest3$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertSame(a2.value.getClass(), C.class)
nova chamada: assertSame(a2.value.getClass(), C.class, "Era esperado objetos iguais, mas " + result5516 + " <a2.value.getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest4$C\",\"id\":1001}}", json)
nova chamada: assertEquals("{\"value\":{\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest4$C\",\"id\":1001}}", json, "Era esperado valores iguais, mas  '{\'value\':{\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest4$C\',\'id\':1001}}' é diferente de " + " json")
chamada antiga: assertSame(a2.value.getClass(), C.class)
nova chamada: assertSame(a2.value.getClass(), C.class, "Era esperado objetos iguais, mas " + result5517 + " <a2.value.getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5518 + " <bean.items.getClass()> é diferente de " + result5519 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5520 + " <bean.items.getClass()> é diferente de " + result5521 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5522 + " <bean.items.getClass()> é diferente de " + result5523 + " <bean2.items.getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5524 + " <bean.items.getClass()> é diferente de " + result5525 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5526 + " <bean.items.size()> é diferente de " + result5527 + " <bean2.items.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5528 + " <bean.items.getClass()> é diferente de " + result5529 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5530 + " <bean.items.size()> é diferente de " + result5531 + " <bean2.items.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5532 + " <bean.items.getClass()> é diferente de " + result5533 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5534 + " <bean.items.size()> é diferente de " + result5535 + " <bean2.items.size()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5536 + " <bean.items.size()> é diferente de " + result5537 + " <bean2.items.size()>")
chamada antiga: assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado objetos iguais, mas " + result5538 + " <bean.items.stream().findFirst().get()> é diferente de " + result5539 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.items)
nova chamada: assertNotNull(bean2.items, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertSame(bean.items.getClass(), bean2.items.getClass(), "Era esperado objetos iguais, mas " + result5540 + " <bean.items.getClass()> é diferente de " + result5541 + " <bean2.items.getClass()>")
chamada antiga: assertSame(bean.items.size(), bean2.items.size())
nova chamada: assertSame(bean.items.size(), bean2.items.size(), "Era esperado objetos iguais, mas " + result5542 + " <bean.items.size()> é diferente de " + result5543 + " <bean2.items.size()>")
chamada antiga: assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get())
nova chamada: assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get(), "Era esperado objetos iguais, mas " + result5544 + " <bean.items.stream().findFirst().get()> é diferente de " + result5545 + " <bean2.items.stream().findFirst().get()>")
chamada antiga: assertNotNull(object2)
nova chamada: assertNotNull(object2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(object.get(1L), object2.get(1L))
nova chamada: assertEquals(object.get(1L), object2.get(1L), "Era esperado valores iguais, mas " + result5546 + " <object.get(1L)> é diferente de " + result5547 + " <object2.get(1L)>")
chamada antiga: assertNotNull(object2)
nova chamada: assertNotNull(object2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(object.get(String.class), object2.get(String.class))
nova chamada: assertEquals(object.get(String.class), object2.get(String.class), "Era esperado valores iguais, mas " + result5548 + " <object.get(String.class)> é diferente de " + result5549 + " <object2.get(String.class)>")
chamada antiga: assertNotNull(object2)
nova chamada: assertNotNull(object2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(object.getClass(), object2.getClass())
nova chamada: assertEquals(object.getClass(), object2.getClass(), "Era esperado valores iguais, mas " + result5550 + " <object.getClass()> é diferente de " + result5551 + " <object2.getClass()>")
chamada antiga: assertEquals(object.get(String.class), object2.get(String.class))
nova chamada: assertEquals(object.get(String.class), object2.get(String.class), "Era esperado valores iguais, mas " + result5552 + " <object.get(String.class)> é diferente de " + result5553 + " <object2.get(String.class)>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5554 + " <bean.values.getClass()> é diferente de " + result5555 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5556 + " <bean.values.getClass()> é diferente de " + result5557 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5558 + " <bean.values.getClass()> é diferente de " + result5559 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.get("set").getClass(), bean2.values.get("set").getClass())
nova chamada: assertEquals(bean.values.get("set").getClass(), bean2.values.get("set").getClass(), "Era esperado valores iguais, mas " + result5560 + " <bean.values.get('set').getClass()> é diferente de " + result5561 + " <bean2.values.get('set').getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5562 + " <bean.values.getClass()> é diferente de " + result5563 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5564 + " <bean.values.get(0).getClass()> é diferente de " + result5565 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5566 + " <bean.values.getClass()> é diferente de " + result5567 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5568 + " <bean.values.get(0).getClass()> é diferente de " + result5569 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5570 + " <bean.values.getClass()> é diferente de " + result5571 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.get("data").getClass(), bean2.values.get("data").getClass())
nova chamada: assertEquals(bean.values.get("data").getClass(), bean2.values.get("data").getClass(), "Era esperado valores iguais, mas " + result5572 + " <bean.values.get('data').getClass()> é diferente de " + result5573 + " <bean2.values.get('data').getClass()>")
chamada antiga: assertEquals(((ArrayList) bean.values.get("data")).get(0).getClass(), ((ArrayList) bean2.values.get("data")).get(0).getClass())
nova chamada: assertEquals(((ArrayList) bean.values.get("data")).get(0).getClass(), ((ArrayList) bean2.values.get("data")).get(0).getClass(), "Era esperado valores iguais, mas " + result5574 + " <((ArrayList) bean.values.get('data')).get(0).getClass()> é diferente de " + result5575 + " <((ArrayList) bean2.values.get('data')).get(0).getClass()>")
chamada antiga: assertEquals("{\"@type\":\"com.alibaba.fastjson2.autoType.SetTest$Bean\",\"content\":Set[]}", str)
nova chamada: assertEquals("{\"@type\":\"com.alibaba.fastjson2.autoType.SetTest$Bean\",\"content\":Set[]}", str, "Era esperado valores iguais, mas  '{\'@type\':\'com.alibaba.fastjson2.autoType.SetTest$Bean\',\'content\':Set[]}' é diferente de " + " str")
chamada antiga: assertNotNull(bean1.content)
nova chamada: assertNotNull(bean1.content, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, bean1.content.size())
nova chamada: assertEquals(0, bean1.content.size(), "Era esperado valores iguais, mas  0 é diferente de " + result5576 + " <bean1.content.size()>")
chamada antiga: assertNotNull(bean1.content)
nova chamada: assertNotNull(bean1.content, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, bean1.content.size())
nova chamada: assertEquals(0, bean1.content.size(), "Era esperado valores iguais, mas  0 é diferente de " + result5577 + " <bean1.content.size()>")
chamada antiga: assertNotNull(object.get("content"))
nova chamada: assertNotNull(object.get("content"), "Era esperado não nulo, mas " + result5578 + " <object.get('content')> é nulo")
chamada antiga: assertEquals(0, object.getJSONArray("content").size())
nova chamada: assertEquals(0, object.getJSONArray("content").size(), "Era esperado valores iguais, mas  0 é diferente de " + result5579 + " <object.getJSONArray('content').size()>")
chamada antiga: assertNotNull(map.get("content"))
nova chamada: assertNotNull(map.get("content"), "Era esperado não nulo, mas " + result5580 + " <map.get('content')> é nulo")
chamada antiga: assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result5581 + " <set.size()>")
chamada antiga: assertNotNull(map.get("content"))
nova chamada: assertNotNull(map.get("content"), "Era esperado não nulo, mas " + result5582 + " <map.get('content')> é nulo")
chamada antiga: assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result5583 + " <set.size()>")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.items.getClass(), bean2.items.getClass())
nova chamada: assertEquals(bean.items.getClass(), bean2.items.getClass(), "Era esperado valores iguais, mas " + result5584 + " <bean.items.getClass()> é diferente de " + result5585 + " <bean2.items.getClass()>")
chamada antiga: assertEquals(bean.items.size(), bean2.items.size())
nova chamada: assertEquals(bean.items.size(), bean2.items.size(), "Era esperado valores iguais, mas " + result5586 + " <bean.items.size()> é diferente de " + result5587 + " <bean2.items.size()>")
chamada antiga: assertNotNull(list2)
nova chamada: assertNotNull(list2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, model.v0000)
nova chamada: assertEquals(123, model.v0000, "Era esperado valores iguais, mas  123 é diferente de " + " model.v0000")
chamada antiga: assertTrue(parse instanceof java.util.Map)
nova chamada: assertTrue(parse instanceof java.util.Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(123, model2.v0000)
nova chamada: assertEquals(123, model2.v0000, "Era esperado valores iguais, mas  123 é diferente de " + " model2.v0000")
chamada antiga: assertEquals(123, model.v0000)
nova chamada: assertEquals(123, model.v0000, "Era esperado valores iguais, mas  123 é diferente de " + " model.v0000")
chamada antiga: assertEquals(123, model.get("v0000"))
nova chamada: assertEquals(123, model.get("v0000"), "Era esperado valores iguais, mas  123 é diferente de " + result5588 + " <model.get('v0000')>")
chamada antiga: assertEquals(123, model.get("v0000"))
nova chamada: assertEquals(123, model.get("v0000"), "Era esperado valores iguais, mas  123 é diferente de " + result5589 + " <model.get('v0000')>")
chamada antiga: assertEquals("java.util.TreeMap", model.get("@type"))
nova chamada: assertEquals("java.util.TreeMap", model.get("@type"), "Era esperado valores iguais, mas  'java.util.TreeMap' é diferente de " + result5590 + " <model.get('@type')>")
chamada antiga: assertEquals(123, model.get("v0000"))
nova chamada: assertEquals(123, model.get("v0000"), "Era esperado valores iguais, mas  123 é diferente de " + result5591 + " <model.get('v0000')>")
chamada antiga: assertEquals("java.util.TreeMap", model.get("@type"))
nova chamada: assertEquals("java.util.TreeMap", model.get("@type"), "Era esperado valores iguais, mas  'java.util.TreeMap' é diferente de " + result5592 + " <model.get('@type')>")
chamada antiga: assertEquals(123, model.get("v0000"))
nova chamada: assertEquals(123, model.get("v0000"), "Era esperado valores iguais, mas  123 é diferente de " + result5593 + " <model.get('v0000')>")
chamada antiga: assertEquals(9, jsonbBytes.length)
nova chamada: assertEquals(9, jsonbBytes.length, "Era esperado valores iguais, mas  9 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals("java.util.TreeMap", model.get("@type"))
nova chamada: assertEquals("java.util.TreeMap", model.get("@type"), "Era esperado valores iguais, mas  'java.util.TreeMap' é diferente de " + result5594 + " <model.get('@type')>")
chamada antiga: assertEquals(16, model.get("v0000"))
nova chamada: assertEquals(16, model.get("v0000"), "Era esperado valores iguais, mas  16 é diferente de " + result5595 + " <model.get('v0000')>")
chamada antiga: assertEquals(9, jsonbBytes.length)
nova chamada: assertEquals(9, jsonbBytes.length, "Era esperado valores iguais, mas  9 é diferente de " + " jsonbBytes.length")
chamada antiga: assertEquals(1, model.size())
nova chamada: assertEquals(1, model.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5596 + " <model.size()>")
chamada antiga: assertEquals(16, model.get("v0000"))
nova chamada: assertEquals(16, model.get("v0000"), "Era esperado valores iguais, mas  16 é diferente de " + result5597 + " <model.get('v0000')>")
chamada antiga: assertEquals(32, model.size())
nova chamada: assertEquals(32, model.size(), "Era esperado valores iguais, mas  32 é diferente de " + result5598 + " <model.size()>")
chamada antiga: assertEquals(text, "{\"@type\":\"com.alibaba.fastjson2_vo.IntField1\",\"v0000\":123}")
nova chamada: assertEquals(text, "{\"@type\":\"com.alibaba.fastjson2_vo.IntField1\",\"v0000\":123}", "Era esperado valores iguais, mas  text é diferente de " + " '{\'@type\':\'com.alibaba.fastjson2_vo.IntField1\',\'v0000\':123}'")
chamada antiga: assertEquals(m.v0000, model.v0000)
nova chamada: assertEquals(m.v0000, model.v0000, "Era esperado valores iguais, mas  m.v0000 é diferente de " + " model.v0000")
chamada antiga: assertEquals(text, "{\"v0000\":123}")
nova chamada: assertEquals(text, "{\"v0000\":123}", "Era esperado valores iguais, mas  text é diferente de " + " '{\'v0000\':123}'")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.item)
nova chamada: assertNotNull(bean2.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.item1)
nova chamada: assertNotNull(bean2.item1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(bean2.item, bean2.item1)
nova chamada: assertSame(bean2.item, bean2.item1, "Era esperado objetos iguais, mas  bean2.item é diferente de " + " bean2.item1")
chamada antiga: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest46_Pair$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"pair1#1\":{\n" + "\t\t\t\"@type\":\"org.apache.commons.lang3.tuple.ImmutablePair#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"left#3\":\"101\",\n" + "\t\t\t\t\"right#4\":true\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"pair2#5\":{\n" + "\t\t\t\"@type\":\"#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"#3\":\"102\",\n" + "\t\t\t\t\"#4\":true\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString())
nova chamada: assertEquals("{\n" + "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest46_Pair$Bean#0\",\n" + "\t\"@value\":{\n" + "\t\t\"pair1#1\":{\n" + "\t\t\t\"@type\":\"org.apache.commons.lang3.tuple.ImmutablePair#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"left#3\":\"101\",\n" + "\t\t\t\t\"right#4\":true\n" + "\t\t\t}\n" + "\t\t},\n" + "\t\t\"pair2#5\":{\n" + "\t\t\t\"@type\":\"#2\",\n" + "\t\t\t\"@value\":{\n" + "\t\t\t\t\"#3\":\"102\",\n" + "\t\t\t\t\"#4\":true\n" + "\t\t\t}\n" + "\t\t}\n" + "\t}\n" + "}", new JSONBDump(bytes, true).toString(), "Era esperado valores iguais, mas  '{\n' + '\t\'@type\':\'com.alibaba.fastjson2.autoType.AutoTypeTest46_Pair$Bean#0\',\n' + '\t\'@value\':{\n' + '\t\t\'pair1#1\':{\n' + '\t\t\t\'@type\':\'org.apache.commons.lang3.tuple.ImmutablePair#2\',\n' + '\t\t\t\'@value\':{\n' + '\t\t\t\t\'left#3\':\'101\',\n' + '\t\t\t\t\'right#4\':true\n' + '\t\t\t}\n' + '\t\t},\n' + '\t\t\'pair2#5\':{\n' + '\t\t\t\'@type\':\'#2\',\n' + '\t\t\t\'@value\':{\n' + '\t\t\t\t\'#3\':\'102\',\n' + '\t\t\t\t\'#4\':true\n' + '\t\t\t}\n' + '\t\t}\n' + '\t}\n' + '}' é diferente de " + result5599 + " <new JSONBDump(bytes, true).toString()>")
chamada antiga: assertNotNull(bean2.pair1)
nova chamada: assertNotNull(bean2.pair1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.pair1.getLeft())
nova chamada: assertNotNull(bean2.pair1.getLeft(), "Era esperado não nulo, mas " + result5600 + " <bean2.pair1.getLeft()> é nulo")
chamada antiga: assertNotNull(bean2.pair1.getRight())
nova chamada: assertNotNull(bean2.pair1.getRight(), "Era esperado não nulo, mas " + result5601 + " <bean2.pair1.getRight()> é nulo")
chamada antiga: assertNotNull(bean2.pair2)
nova chamada: assertNotNull(bean2.pair2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.pair2.getLeft())
nova chamada: assertNotNull(bean2.pair2.getLeft(), "Era esperado não nulo, mas " + result5602 + " <bean2.pair2.getLeft()> é nulo")
chamada antiga: assertNotNull(bean2.pair2.getRight())
nova chamada: assertNotNull(bean2.pair2.getRight(), "Era esperado não nulo, mas " + result5603 + " <bean2.pair2.getRight()> é nulo")
chamada antiga: assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName())
nova chamada: assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName(), "Era esperado valores iguais, mas  'com.alibaba.fastjson2.JSONObject' é diferente de " + result5604 + " <object.getClass().getName()>")
chamada antiga: assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName())
nova chamada: assertEquals("com.alibaba.fastjson2.JSONObject", object.getClass().getName(), "Era esperado valores iguais, mas  'com.alibaba.fastjson2.JSONObject' é diferente de " + result5605 + " <object.getClass().getName()>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LM"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LM"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5606 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('LM'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5607 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('LinkedHashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5608 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.LinkedHashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("M"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("M"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5609 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('M'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5610 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('HashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(map, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  map é diferente de " + result5611 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.HashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("A"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("A"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5612 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('A'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5613 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('ArrayList'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.ArrayList"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5614 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.ArrayList'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LA"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LA"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5615 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('LA'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5616 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('LinkedList'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedList"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5617 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.LinkedList'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5618 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('HashSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.HashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5619 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.HashSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5620 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('TreeSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.TreeSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5621 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.TreeSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5622 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('LinkedHashSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.LinkedHashSet"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5623 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.LinkedHashSet'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5624 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('ConcurrentHashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentHashMap"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5625 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.concurrent.ConcurrentHashMap'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5626 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('JSONObject'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson2.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson2.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5627 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('com.alibaba.fastjson2.JSONObject'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JO1"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("JO1"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5628 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('JO1'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(values, JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("com.alibaba.fastjson.JSONObject"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  values é diferente de " + result5629 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('com.alibaba.fastjson.JSONObject'), JSONReader.Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5630 + " <values.getClass()> é diferente de " + result5631 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('ConcurrentLinkedQueue'), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedQueue.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedQueue.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5632 + " <values.getClass()> é diferente de " + result5633 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedQueue.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedQueue"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5634 + " <values.getClass()> é diferente de " + result5635 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.concurrent.ConcurrentLinkedQueue'), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5636 + " <values.getClass()> é diferente de " + result5637 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('ConcurrentLinkedDeque'), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedDeque.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedDeque.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5638 + " <values.getClass()> é diferente de " + result5639 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(ConcurrentLinkedDeque.class), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass())
nova chamada: assertEquals(values.getClass(), JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.concurrent.ConcurrentLinkedDeque"), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass(), "Era esperado valores iguais, mas " + result5640 + " <values.getClass()> é diferente de " + result5641 + " <JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.concurrent.ConcurrentLinkedDeque'), JSONReader.Feature.ErrorOnNotSupportAutoType).getClass()>")
chamada antiga: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('UUID'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(UUID.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(UUID.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(UUID.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.UUID"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (UUID[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.UUID'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('Date'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Date.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Date.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Date.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Date"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Date[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('Date'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('Calendar'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Calendar.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Calendar.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(Calendar.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.util.Calendar"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (Calendar[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.util.Calendar'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('SimpleDateFormat'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(SimpleDateFormat.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(SimpleDateFormat.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(SimpleDateFormat.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.text.SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.text.SimpleDateFormat"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (SimpleDateFormat[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.text.SimpleDateFormat'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(LocalDate.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(LocalDate.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(LocalDate.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.time.LocalDate"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.time.LocalDate"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (LocalDate[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.time.LocalDate'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("String"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("String"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('String'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(String.class), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(String.class), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter(String.class), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.lang.String"), JSONReader.Feature.ErrorOnNotSupportAutoType))
nova chamada: assertArrayEquals(values, (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter("java.lang.String"), JSONReader.Feature.ErrorOnNotSupportAutoType), "Era esperado arrays iguais, mas  values é diferente de " + " (String[]) JSONB.parseObject(bytes, Object.class, JSONReader.autoTypeFilter('java.lang.String'), JSONReader.Feature.ErrorOnNotSupportAutoType)")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5642 + " <bean.values.getClass()> é diferente de " + result5643 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5644 + " <bean.values.size()> é diferente de " + result5645 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5646 + " <bean.values.get(0).getClass()> é diferente de " + result5647 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5648 + " <bean.values.get(1).getClass()> é diferente de " + result5649 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5650 + " <bean.values.getClass()> é diferente de " + result5651 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.length, bean2.values.length)
nova chamada: assertEquals(bean.values.length, bean2.values.length, "Era esperado valores iguais, mas  bean.values.length é diferente de " + " bean2.values.length")
chamada antiga: assertEquals(bean.values[0].getClass(), bean2.values[0].getClass())
nova chamada: assertEquals(bean.values[0].getClass(), bean2.values[0].getClass(), "Era esperado valores iguais, mas " + result5652 + " <bean.values[0].getClass()> é diferente de " + result5653 + " <bean2.values[0].getClass()>")
chamada antiga: assertEquals(bean.values[1].getClass(), bean2.values[1].getClass())
nova chamada: assertEquals(bean.values[1].getClass(), bean2.values[1].getClass(), "Era esperado valores iguais, mas " + result5654 + " <bean.values[1].getClass()> é diferente de " + result5655 + " <bean2.values[1].getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5656 + " <bean.values.getClass()> é diferente de " + result5657 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.length, bean2.values.length)
nova chamada: assertEquals(bean.values.length, bean2.values.length, "Era esperado valores iguais, mas  bean.values.length é diferente de " + " bean2.values.length")
chamada antiga: assertEquals(bean.values[0].getClass(), bean2.values[0].getClass())
nova chamada: assertEquals(bean.values[0].getClass(), bean2.values[0].getClass(), "Era esperado valores iguais, mas " + result5658 + " <bean.values[0].getClass()> é diferente de " + result5659 + " <bean2.values[0].getClass()>")
chamada antiga: assertEquals(bean.values[1].getClass(), bean2.values[1].getClass())
nova chamada: assertEquals(bean.values[1].getClass(), bean2.values[1].getClass(), "Era esperado valores iguais, mas " + result5660 + " <bean.values[1].getClass()> é diferente de " + result5661 + " <bean2.values[1].getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5662 + " <bean.values.getClass()> é diferente de " + result5663 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5664 + " <bean.values.size()> é diferente de " + result5665 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass())
nova chamada: assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass(), "Era esperado valores iguais, mas " + result5666 + " <bean.values.get('0').getClass()> é diferente de " + result5667 + " <bean2.values.get('0').getClass()>")
chamada antiga: assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass())
nova chamada: assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass(), "Era esperado valores iguais, mas " + result5668 + " <bean.values.get('1').getClass()> é diferente de " + result5669 + " <bean2.values.get('1').getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5670 + " <bean.values.getClass()> é diferente de " + result5671 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5672 + " <bean.values.size()> é diferente de " + result5673 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass())
nova chamada: assertEquals(bean.values.get("0").getClass(), bean2.values.get("0").getClass(), "Era esperado valores iguais, mas " + result5674 + " <bean.values.get('0').getClass()> é diferente de " + result5675 + " <bean2.values.get('0').getClass()>")
chamada antiga: assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass())
nova chamada: assertEquals(bean.values.get("1").getClass(), bean2.values.get("1").getClass(), "Era esperado valores iguais, mas " + result5676 + " <bean.values.get('1').getClass()> é diferente de " + result5677 + " <bean2.values.get('1').getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5678 + " <bean.values.getClass()> é diferente de " + result5679 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5680 + " <bean.values.size()> é diferente de " + result5681 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5682 + " <bean.values.get(0).getClass()> é diferente de " + result5683 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5684 + " <bean.values.get(1).getClass()> é diferente de " + result5685 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertNotNull(bean2)
nova chamada: assertNotNull(bean2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean2.values)
nova chamada: assertNotNull(bean2.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.values.getClass(), bean2.values.getClass())
nova chamada: assertEquals(bean.values.getClass(), bean2.values.getClass(), "Era esperado valores iguais, mas " + result5686 + " <bean.values.getClass()> é diferente de " + result5687 + " <bean2.values.getClass()>")
chamada antiga: assertEquals(bean.values.size(), bean2.values.size())
nova chamada: assertEquals(bean.values.size(), bean2.values.size(), "Era esperado valores iguais, mas " + result5688 + " <bean.values.size()> é diferente de " + result5689 + " <bean2.values.size()>")
chamada antiga: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass())
nova chamada: assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass(), "Era esperado valores iguais, mas " + result5690 + " <bean.values.get(0).getClass()> é diferente de " + result5691 + " <bean2.values.get(0).getClass()>")
chamada antiga: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass())
nova chamada: assertEquals(bean.values.get(1).getClass(), bean2.values.get(1).getClass(), "Era esperado valores iguais, mas " + result5692 + " <bean.values.get(1).getClass()> é diferente de " + result5693 + " <bean2.values.get(1).getClass()>")
chamada antiga: assertEquals(bean.getClass(), bean2.getClass())
nova chamada: assertEquals(bean.getClass(), bean2.getClass(), "Era esperado valores iguais, mas " + result5694 + " <bean.getClass()> é diferente de " + result5695 + " <bean2.getClass()>")
chamada antiga: assertEquals(bean.first.getClass(), bean2.first.getClass())
nova chamada: assertEquals(bean.first.getClass(), bean2.first.getClass(), "Era esperado valores iguais, mas " + result5696 + " <bean.first.getClass()> é diferente de " + result5697 + " <bean2.first.getClass()>")
chamada antiga: assertEquals(bean.second.getClass(), bean2.second.getClass())
nova chamada: assertEquals(bean.second.getClass(), bean2.second.getClass(), "Era esperado valores iguais, mas " + result5698 + " <bean.second.getClass()> é diferente de " + result5699 + " <bean2.second.getClass()>")
chamada antiga: assertEquals(bean.third.getClass(), bean2.third.getClass())
nova chamada: assertEquals(bean.third.getClass(), bean2.third.getClass(), "Era esperado valores iguais, mas " + result5700 + " <bean.third.getClass()> é diferente de " + result5701 + " <bean2.third.getClass()>")
chamada antiga: assertEquals(((Item) bean.first).id, ((Item) bean2.first).id)
nova chamada: assertEquals(((Item) bean.first).id, ((Item) bean2.first).id, "Era esperado valores iguais, mas  ((Item) bean.first).id é diferente de " + " ((Item) bean2.first).id")
chamada antiga: assertEquals(((Item) bean.second).id, ((Item) bean2.second).id)
nova chamada: assertEquals(((Item) bean.second).id, ((Item) bean2.second).id, "Era esperado valores iguais, mas  ((Item) bean.second).id é diferente de " + " ((Item) bean2.second).id")
chamada antiga: assertEquals(((Item) bean.third).id, ((Item) bean2.third).id)
nova chamada: assertEquals(((Item) bean.third).id, ((Item) bean2.third).id, "Era esperado valores iguais, mas  ((Item) bean.third).id é diferente de " + " ((Item) bean2.third).id")
chamada antiga: assertEquals(((Item) bean.first).name, ((Item) bean2.first).name)
nova chamada: assertEquals(((Item) bean.first).name, ((Item) bean2.first).name, "Era esperado valores iguais, mas  ((Item) bean.first).name é diferente de " + " ((Item) bean2.first).name")
chamada antiga: assertEquals(((Item) bean.second).name, ((Item) bean2.second).name)
nova chamada: assertEquals(((Item) bean.second).name, ((Item) bean2.second).name, "Era esperado valores iguais, mas  ((Item) bean.second).name é diferente de " + " ((Item) bean2.second).name")
chamada antiga: assertEquals(((Item) bean.third).name, ((Item) bean2.third).name)
nova chamada: assertEquals(((Item) bean.third).name, ((Item) bean2.third).name, "Era esperado valores iguais, mas  ((Item) bean.third).name é diferente de " + " ((Item) bean2.third).name")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result5702 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result5703 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result5704 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result5705 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result5706 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result5707 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result5708 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result5709 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result5710 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result5711 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result5712 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result5713 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result5714 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result5715 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result5716 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result5717 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result5718 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result5719 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result5720 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result5721 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(id, jsonPath.eval(object))
nova chamada: assertEquals(id, jsonPath.eval(object), "Era esperado valores iguais, mas  id é diferente de " + result5722 + " <jsonPath.eval(object)>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.of(json)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.of(json)), "Era esperado valores iguais, mas  id é diferente de " + result5723 + " <jsonPath.extract(JSONReader.of(json))>")
chamada antiga: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  id é diferente de " + result5724 + " <jsonPath.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(id, jsonPath.extract(json))
nova chamada: assertEquals(id, jsonPath.extract(json), "Era esperado valores iguais, mas  id é diferente de " + result5725 + " <jsonPath.extract(json)>")
chamada antiga: assertEquals(id, jsonPath.extract(jsonBytes))
nova chamada: assertEquals(id, jsonPath.extract(jsonBytes), "Era esperado valores iguais, mas  id é diferente de " + result5726 + " <jsonPath.extract(jsonBytes)>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5727 + " <object.size()>")
chamada antiga: assertEquals("2", object.get("item").toString())
nova chamada: assertEquals("2", object.get("item").toString(), "Era esperado valores iguais, mas  '2' é diferente de " + result5728 + " <object.get('item').toString()>")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5729 + " <object.size()>")
chamada antiga: assertEquals("2", object.get("item").toString())
nova chamada: assertEquals("2", object.get("item").toString(), "Era esperado valores iguais, mas  '2' é diferente de " + result5730 + " <object.get('item').toString()>")
chamada antiga: assertEquals("1", extractScalar)
nova chamada: assertEquals("1", extractScalar, "Era esperado valores iguais, mas  '1' é diferente de " + " extractScalar")
chamada antiga: assertEquals("[123]", segmentIndex.toString())
nova chamada: assertEquals("[123]", segmentIndex.toString(), "Era esperado valores iguais, mas  '[123]' é diferente de " + result5731 + " <segmentIndex.toString()>")
chamada antiga: assertSame(jsonPath, JSONPath.compile("$"))
nova chamada: assertSame(jsonPath, JSONPath.compile("$"), "Era esperado objetos iguais, mas  jsonPath é diferente de " + result5732 + " <JSONPath.compile('$')>")
chamada antiga: assertEquals("1", jsonPath.extractScalar(JSONReader.of("1")))
nova chamada: assertEquals("1", jsonPath.extractScalar(JSONReader.of("1")), "Era esperado valores iguais, mas  '1' é diferente de " + result5733 + " <jsonPath.extractScalar(JSONReader.of('1'))>")
chamada antiga: assertSame(jsonPath, JSONPath.of("#-1", JSONPath.Feature.AlwaysReturnList))
nova chamada: assertSame(jsonPath, JSONPath.of("#-1", JSONPath.Feature.AlwaysReturnList), "Era esperado objetos iguais, mas  jsonPath é diferente de " + result5734 + " <JSONPath.of('#-1', JSONPath.Feature.AlwaysReturnList)>")
chamada antiga: assertEquals("234", array.get(0))
nova chamada: assertEquals("234", array.get(0), "Era esperado valores iguais, mas  '234' é diferente de " + result5735 + " <array.get(0)>")
chamada antiga: assertEquals("345", array.get(0))
nova chamada: assertEquals("345", array.get(0), "Era esperado valores iguais, mas  '345' é diferente de " + result5736 + " <array.get(0)>")
chamada antiga: assertEquals("[1.0,2.0,3.0,4]", jsonPath.eval(array).toString())
nova chamada: assertEquals("[1.0,2.0,3.0,4]", jsonPath.eval(array).toString(), "Era esperado valores iguais, mas  '[1.0,2.0,3.0,4]' é diferente de " + result5737 + " <jsonPath.eval(array).toString()>")
chamada antiga: assertEquals("[2.0,3.0,4.0,5]", jsonPath.eval(array).toString())
nova chamada: assertEquals("[2.0,3.0,4.0,5]", jsonPath.eval(array).toString(), "Era esperado valores iguais, mas  '[2.0,3.0,4.0,5]' é diferente de " + result5738 + " <jsonPath.eval(array).toString()>")
chamada antiga: assertNull(jsonPath.eval(null))
nova chamada: assertNull(jsonPath.eval(null), "Era esperado nulo, mas " + result5739 + " <jsonPath.eval(null)> não é nulo")
chamada antiga: assertEquals(-1, jsonPath.eval(1))
nova chamada: assertEquals(-1, jsonPath.eval(1), "Era esperado valores iguais, mas  -1 é diferente de " + result5740 + " <jsonPath.eval(1)>")
chamada antiga: assertEquals(-1L, jsonPath.eval(1L))
nova chamada: assertEquals(-1L, jsonPath.eval(1L), "Era esperado valores iguais, mas  -1L é diferente de " + result5741 + " <jsonPath.eval(1L)>")
chamada antiga: assertEquals((short) -1, jsonPath.eval((short) 1))
nova chamada: assertEquals((short) -1, jsonPath.eval((short) 1), "Era esperado valores iguais, mas  (short) -1 é diferente de " + result5742 + " <jsonPath.eval((short) 1)>")
chamada antiga: assertEquals((byte) -1, jsonPath.eval((byte) 1))
nova chamada: assertEquals((byte) -1, jsonPath.eval((byte) 1), "Era esperado valores iguais, mas  (byte) -1 é diferente de " + result5743 + " <jsonPath.eval((byte) 1)>")
chamada antiga: assertEquals(-1F, jsonPath.eval(1F))
nova chamada: assertEquals(-1F, jsonPath.eval(1F), "Era esperado valores iguais, mas  -1F é diferente de " + result5744 + " <jsonPath.eval(1F)>")
chamada antiga: assertEquals(-1D, jsonPath.eval(1D))
nova chamada: assertEquals(-1D, jsonPath.eval(1D), "Era esperado valores iguais, mas  -1D é diferente de " + result5745 + " <jsonPath.eval(1D)>")
chamada antiga: assertEquals(BigDecimal.ONE.negate(), jsonPath.eval(BigDecimal.ONE))
nova chamada: assertEquals(BigDecimal.ONE.negate(), jsonPath.eval(BigDecimal.ONE), "Era esperado valores iguais, mas " + result5746 + " <BigDecimal.ONE.negate()> é diferente de " + result5747 + " <jsonPath.eval(BigDecimal.ONE)>")
chamada antiga: assertEquals(BigInteger.ONE.negate(), jsonPath.eval(BigInteger.ONE))
nova chamada: assertEquals(BigInteger.ONE.negate(), jsonPath.eval(BigInteger.ONE), "Era esperado valores iguais, mas " + result5748 + " <BigInteger.ONE.negate()> é diferente de " + result5749 + " <jsonPath.eval(BigInteger.ONE)>")
chamada antiga: assertEquals("[null,-1,-1,-1,-1,-1.0,-1.0,-1,-1]", jsonPath.eval(array).toString())
nova chamada: assertEquals("[null,-1,-1,-1,-1,-1.0,-1.0,-1,-1]", jsonPath.eval(array).toString(), "Era esperado valores iguais, mas  '[null,-1,-1,-1,-1,-1.0,-1.0,-1,-1]' é diferente de " + result5750 + " <jsonPath.eval(array).toString()>")
chamada antiga: assertEquals(BigInteger.valueOf(Long.MIN_VALUE).negate(), jsonPath.eval(Long.MIN_VALUE))
nova chamada: assertEquals(BigInteger.valueOf(Long.MIN_VALUE).negate(), jsonPath.eval(Long.MIN_VALUE), "Era esperado valores iguais, mas " + result5751 + " <BigInteger.valueOf(Long.MIN_VALUE).negate()> é diferente de " + result5752 + " <jsonPath.eval(Long.MIN_VALUE)>")
chamada antiga: assertEquals(-(long) Integer.MIN_VALUE, jsonPath.eval(Integer.MIN_VALUE))
nova chamada: assertEquals(-(long) Integer.MIN_VALUE, jsonPath.eval(Integer.MIN_VALUE), "Era esperado valores iguais, mas  -(long) Integer.MIN_VALUE é diferente de " + result5753 + " <jsonPath.eval(Integer.MIN_VALUE)>")
chamada antiga: assertEquals(-(int) Short.MIN_VALUE, jsonPath.eval(Short.MIN_VALUE))
nova chamada: assertEquals(-(int) Short.MIN_VALUE, jsonPath.eval(Short.MIN_VALUE), "Era esperado valores iguais, mas  -(int) Short.MIN_VALUE é diferente de " + result5754 + " <jsonPath.eval(Short.MIN_VALUE)>")
chamada antiga: assertEquals(-(short) Byte.MIN_VALUE, jsonPath.eval(Byte.MIN_VALUE))
nova chamada: assertEquals(-(short) Byte.MIN_VALUE, jsonPath.eval(Byte.MIN_VALUE), "Era esperado valores iguais, mas  -(short) Byte.MIN_VALUE é diferente de " + result5755 + " <jsonPath.eval(Byte.MIN_VALUE)>")
chamada antiga: assertNull(jsonPath.eval(null))
nova chamada: assertNull(jsonPath.eval(null), "Era esperado nulo, mas " + result5756 + " <jsonPath.eval(null)> não é nulo")
chamada antiga: assertEquals(1, jsonPath.eval(-1))
nova chamada: assertEquals(1, jsonPath.eval(-1), "Era esperado valores iguais, mas  1 é diferente de " + result5757 + " <jsonPath.eval(-1)>")
chamada antiga: assertEquals(1L, jsonPath.eval(-1L))
nova chamada: assertEquals(1L, jsonPath.eval(-1L), "Era esperado valores iguais, mas  1L é diferente de " + result5758 + " <jsonPath.eval(-1L)>")
chamada antiga: assertEquals((short) 1, jsonPath.eval((short) -1))
nova chamada: assertEquals((short) 1, jsonPath.eval((short) -1), "Era esperado valores iguais, mas  (short) 1 é diferente de " + result5759 + " <jsonPath.eval((short) -1)>")
chamada antiga: assertEquals((byte) 1, jsonPath.eval((byte) -1))
nova chamada: assertEquals((byte) 1, jsonPath.eval((byte) -1), "Era esperado valores iguais, mas  (byte) 1 é diferente de " + result5760 + " <jsonPath.eval((byte) -1)>")
chamada antiga: assertEquals(1F, jsonPath.eval(-1F))
nova chamada: assertEquals(1F, jsonPath.eval(-1F), "Era esperado valores iguais, mas  1F é diferente de " + result5761 + " <jsonPath.eval(-1F)>")
chamada antiga: assertEquals(1D, jsonPath.eval(-1D))
nova chamada: assertEquals(1D, jsonPath.eval(-1D), "Era esperado valores iguais, mas  1D é diferente de " + result5762 + " <jsonPath.eval(-1D)>")
chamada antiga: assertEquals(BigDecimal.ONE, jsonPath.eval(BigDecimal.ONE.negate()))
nova chamada: assertEquals(BigDecimal.ONE, jsonPath.eval(BigDecimal.ONE.negate()), "Era esperado valores iguais, mas  BigDecimal.ONE é diferente de " + result5763 + " <jsonPath.eval(BigDecimal.ONE.negate())>")
chamada antiga: assertEquals(BigInteger.ONE, jsonPath.eval(BigInteger.ONE.negate()))
nova chamada: assertEquals(BigInteger.ONE, jsonPath.eval(BigInteger.ONE.negate()), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result5764 + " <jsonPath.eval(BigInteger.ONE.negate())>")
chamada antiga: assertEquals("[null,1,1,1,1,1.0,1.0,1,1]", jsonPath.eval(array).toString())
nova chamada: assertEquals("[null,1,1,1,1,1.0,1.0,1,1]", jsonPath.eval(array).toString(), "Era esperado valores iguais, mas  '[null,1,1,1,1,1.0,1.0,1,1]' é diferente de " + result5765 + " <jsonPath.eval(array).toString()>")
chamada antiga: assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("strict $.id")))
nova chamada: assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("strict $.id")), "Era esperado valores iguais, mas  101 é diferente de " + result5766 + " <JSONObject.of('id', 101).eval(JSONPath.of('strict $.id'))>")
chamada antiga: assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("lax $.id")))
nova chamada: assertEquals(101, JSONObject.of("id", 101).eval(JSONPath.of("lax $.id")), "Era esperado valores iguais, mas  101 é diferente de " + result5767 + " <JSONObject.of('id', 101).eval(JSONPath.of('lax $.id'))>")
chamada antiga: assertEquals("[123,\"wenshao\"]", JSONPath.extract("{\"id\":123,\"name\":\"wenshao\"}", "$.*").toString())
nova chamada: assertEquals("[123,\"wenshao\"]", JSONPath.extract("{\"id\":123,\"name\":\"wenshao\"}", "$.*").toString(), "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + result5768 + " <JSONPath.extract('{\'id\':123,\'name\':\'wenshao\'}', '$.*').toString()>")
chamada antiga: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'phones\':[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]}' é diferente de " + result5769 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5770 + " <JSONPath.extract(str, '$.phones').toString()>")
chamada antiga: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones.type").toString())
nova chamada: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones.type").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'home\']' é diferente de " + result5771 + " <JSONPath.extract(str, '$.phones.type').toString()>")
chamada antiga: assertEquals("{\"who\":\"Fred\",\"where\":\"General Products\",\"friends\":[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"who\":\"Fred\",\"where\":\"General Products\",\"friends\":[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'who\':\'Fred\',\'where\':\'General Products\',\'friends\':[{\'name\':\'Lili\',\'rank\':5},{\'name\':\'Hank\',\'rank\':7}]}' é diferente de " + result5772 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends").toString())
nova chamada: assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends").toString(), "Era esperado valores iguais, mas  '[{\'name\':\'Lili\',\'rank\':5},{\'name\':\'Hank\',\'rank\':7}]' é diferente de " + result5773 + " <JSONPath.extract(str, '$.friends').toString()>")
chamada antiga: assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends[*]").toString())
nova chamada: assertEquals("[{\"name\":\"Lili\",\"rank\":5},{\"name\":\"Hank\",\"rank\":7}]", JSONPath.extract(str, "$.friends[*]").toString(), "Era esperado valores iguais, mas  '[{\'name\':\'Lili\',\'rank\':5},{\'name\':\'Hank\',\'rank\':7}]' é diferente de " + result5774 + " <JSONPath.extract(str, '$.friends[*]').toString()>")
chamada antiga: assertEquals("[5,7]", JSONPath.extract(str, "$.friends[*].rank").toString())
nova chamada: assertEquals("[5,7]", JSONPath.extract(str, "$.friends[*].rank").toString(), "Era esperado valores iguais, mas  '[5,7]' é diferente de " + result5775 + " <JSONPath.extract(str, '$.friends[*].rank').toString()>")
chamada antiga: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'phones\':[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]}' é diferente de " + result5776 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5777 + " <JSONPath.extract(str, '$.phones').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5778 + " <JSONPath.extract(str, '$.phones[*]').toString()>")
chamada antiga: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*].type").toString())
nova chamada: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*].type").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'home\']' é diferente de " + result5779 + " <JSONPath.extract(str, '$.phones[*].type').toString()>")
chamada antiga: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"phones\":[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'phones\':[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]}' é diferente de " + result5780 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5781 + " <JSONPath.extract(str, '$.phones').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]? (exists(@.type))").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]? (exists(@.type))").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5782 + " <JSONPath.extract(str, '$.phones[*]? (exists(@.type))').toString()>")
chamada antiga: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*]? (exists(@.type)).type").toString())
nova chamada: assertEquals("[\"cell\",\"home\"]", JSONPath.extract(str, "$.phones[*]? (exists(@.type)).type").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'home\']' é diferente de " + result5783 + " <JSONPath.extract(str, '$.phones[*]? (exists(@.type)).type').toString()>")
chamada antiga: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.eval(JSON.parseObject(str), "$.phones.*").toString())
nova chamada: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.eval(JSON.parseObject(str), "$.phones.*").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'abc-defg\',\'pqr-wxyz\',\'home\',\'hij-klmn\']' é diferente de " + result5784 + " <JSONPath.eval(JSON.parseObject(str), '$.phones.*').toString()>")
chamada antiga: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones.*").toString())
nova chamada: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones.*").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'abc-defg\',\'pqr-wxyz\',\'home\',\'hij-klmn\']' é diferente de " + result5785 + " <JSONPath.extract(str, '$.phones.*').toString()>")
chamada antiga: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString())
nova chamada: assertEquals("[{\"type\":\"cell\",\"number\":\"abc-defg\"},{\"number\":\"pqr-wxyz\"},{\"type\":\"home\",\"number\":\"hij-klmn\"}]", JSONPath.extract(str, "$.phones[*]").toString(), "Era esperado valores iguais, mas  '[{\'type\':\'cell\',\'number\':\'abc-defg\'},{\'number\':\'pqr-wxyz\'},{\'type\':\'home\',\'number\':\'hij-klmn\'}]' é diferente de " + result5786 + " <JSONPath.extract(str, '$.phones[*]').toString()>")
chamada antiga: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones[*].*").toString())
nova chamada: assertEquals("[\"cell\",\"abc-defg\",\"pqr-wxyz\",\"home\",\"hij-klmn\"]", JSONPath.extract(str, "$.phones[*].*").toString(), "Era esperado valores iguais, mas  '[\'cell\',\'abc-defg\',\'pqr-wxyz\',\'home\',\'hij-klmn\']' é diferente de " + result5787 + " <JSONPath.extract(str, '$.phones[*].*').toString()>")
chamada antiga: assertEquals("{\"SF\":[10,11,12,13,15,16,17],\"FC\":[20,22,24],\"SJ\":[30,33]}", JSONPath.extract(str, "$.sensors").toString())
nova chamada: assertEquals("{\"SF\":[10,11,12,13,15,16,17],\"FC\":[20,22,24],\"SJ\":[30,33]}", JSONPath.extract(str, "$.sensors").toString(), "Era esperado valores iguais, mas  '{\'SF\':[10,11,12,13,15,16,17],\'FC\':[20,22,24],\'SJ\':[30,33]}' é diferente de " + result5788 + " <JSONPath.extract(str, '$.sensors').toString()>")
chamada antiga: assertEquals("[[10,11,12,13,15,16,17],[20,22,24],[30,33]]", JSONPath.extract(str, "$.sensors.*").toString())
nova chamada: assertEquals("[[10,11,12,13,15,16,17],[20,22,24],[30,33]]", JSONPath.extract(str, "$.sensors.*").toString(), "Era esperado valores iguais, mas  '[[10,11,12,13,15,16,17],[20,22,24],[30,33]]' é diferente de " + result5789 + " <JSONPath.extract(str, '$.sensors.*').toString()>")
chamada antiga: assertEquals("[10,17,12,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,last,2]").toString())
nova chamada: assertEquals("[10,17,12,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,last,2]").toString(), "Era esperado valores iguais, mas  '[10,17,12,20,24,24,30,33]' é diferente de " + result5790 + " <JSONPath.extract(str, '$.sensors.*[0,last,2]').toString()>")
chamada antiga: assertEquals("[10,12,17,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,2,last]").toString())
nova chamada: assertEquals("[10,12,17,20,24,24,30,33]", JSONPath.extract(str, "$.sensors.*[0,2,last]").toString(), "Era esperado valores iguais, mas  '[10,12,17,20,24,24,30,33]' é diferente de " + result5791 + " <JSONPath.extract(str, '$.sensors.*[0,2,last]').toString()>")
chamada antiga: assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'readings\':[15.2,-22.3,45.9]}' é diferente de " + result5792 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString())
nova chamada: assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString(), "Era esperado valores iguais, mas  '[15.2,-22.3,45.9]' é diferente de " + result5793 + " <JSONPath.extract(str, '$.readings').toString()>")
chamada antiga: assertEquals("[15,-23,45]", JSONPath.extract(str, "$.readings.floor()").toString())
nova chamada: assertEquals("[15,-23,45]", JSONPath.extract(str, "$.readings.floor()").toString(), "Era esperado valores iguais, mas  '[15,-23,45]' é diferente de " + result5794 + " <JSONPath.extract(str, '$.readings.floor()').toString()>")
chamada antiga: assertEquals("[-15,23,-45]", JSONPath.extract(str, "-$.readings.floor()").toString())
nova chamada: assertEquals("[-15,23,-45]", JSONPath.extract(str, "-$.readings.floor()").toString(), "Era esperado valores iguais, mas  '[-15,23,-45]' é diferente de " + result5795 + " <JSONPath.extract(str, '-$.readings.floor()').toString()>")
chamada antiga: assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"readings\":[15.2,-22.3,45.9]}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'readings\':[15.2,-22.3,45.9]}' é diferente de " + result5796 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString())
nova chamada: assertEquals("[15.2,-22.3,45.9]", JSONPath.extract(str, "$.readings").toString(), "Era esperado valores iguais, mas  '[15.2,-22.3,45.9]' é diferente de " + result5797 + " <JSONPath.extract(str, '$.readings').toString()>")
chamada antiga: assertEquals("[-15.2,22.3,-45.9]", JSONPath.extract(str, "-$.readings").toString())
nova chamada: assertEquals("[-15.2,22.3,-45.9]", JSONPath.extract(str, "-$.readings").toString(), "Era esperado valores iguais, mas  '[-15.2,22.3,-45.9]' é diferente de " + result5798 + " <JSONPath.extract(str, '-$.readings').toString()>")
chamada antiga: assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'pay\':100,\'hours\':\'ten\'}' é diferente de " + result5799 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "@").toString())
nova chamada: assertEquals("{\"pay\":100,\"hours\":\"ten\"}", JSONPath.extract(str, "@").toString(), "Era esperado valores iguais, mas  '{\'pay\':100,\'hours\':\'ten\'}' é diferente de " + result5800 + " <JSONPath.extract(str, '@').toString()>")
chamada antiga: assertEquals("100", JSONPath.extract(str, "@.pay").toString())
nova chamada: assertEquals("100", JSONPath.extract(str, "@.pay").toString(), "Era esperado valores iguais, mas  '100' é diferente de " + result5801 + " <JSONPath.extract(str, '@.pay').toString()>")
chamada antiga: assertEquals("\"ten\"", JSON.toJSONString(JSONPath.extract(str, "@.hours")))
nova chamada: assertEquals("\"ten\"", JSON.toJSONString(JSONPath.extract(str, "@.hours")), "Era esperado valores iguais, mas  '\'ten\'' é diferente de " + result5802 + " <JSON.toJSONString(JSONPath.extract(str, '@.hours'))>")
chamada antiga: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$").toString())
nova chamada: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$").toString(), "Era esperado valores iguais, mas  '{\'name\':{\'first\':\'Manny\',\'last\':\'Moe\'},\'points\':123}' é diferente de " + result5803 + " <JSONPath.extract(str, '$').toString()>")
chamada antiga: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "@").toString())
nova chamada: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "@").toString(), "Era esperado valores iguais, mas  '{\'name\':{\'first\':\'Manny\',\'last\':\'Moe\'},\'points\':123}' é diferente de " + result5804 + " <JSONPath.extract(str, '@').toString()>")
chamada antiga: assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "@.name").toString())
nova chamada: assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "@.name").toString(), "Era esperado valores iguais, mas  '{\'first\':\'Manny\',\'last\':\'Moe\'}' é diferente de " + result5805 + " <JSONPath.extract(str, '@.name').toString()>")
chamada antiga: assertEquals("true", JSONPath.extract(str, "exists (@.name)").toString())
nova chamada: assertEquals("true", JSONPath.extract(str, "exists (@.name)").toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result5806 + " <JSONPath.extract(str, 'exists (@.name)').toString()>")
chamada antiga: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$?(exists (@.name)) ").toString())
nova chamada: assertEquals("{\"name\":{\"first\":\"Manny\",\"last\":\"Moe\"},\"points\":123}", JSONPath.extract(str, "$?(exists (@.name)) ").toString(), "Era esperado valores iguais, mas  '{\'name\':{\'first\':\'Manny\',\'last\':\'Moe\'},\'points\':123}' é diferente de " + result5807 + " <JSONPath.extract(str, '$?(exists (@.name)) ').toString()>")
chamada antiga: assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "$?(exists (@.name)).name ").toString())
nova chamada: assertEquals("{\"first\":\"Manny\",\"last\":\"Moe\"}", JSONPath.extract(str, "$?(exists (@.name)).name ").toString(), "Era esperado valores iguais, mas  '{\'first\':\'Manny\',\'last\':\'Moe\'}' é diferente de " + result5808 + " <JSONPath.extract(str, '$?(exists (@.name)).name ').toString()>")
chamada antiga: assertFalse(JSONReader.ofJSONB(JSONB.toBytes("1")).nextIfNullOrEmptyString())
nova chamada: assertFalse(JSONReader.ofJSONB(JSONB.toBytes("1")).nextIfNullOrEmptyString(), "Era esperado falso, mas " + result5809 + " <JSONReader.ofJSONB(JSONB.toBytes('1')).nextIfNullOrEmptyString()> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls.mask))
nova chamada: assertFalse(jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls.mask), "Era esperado falso, mas " + result5810 + " <jsonWriter.isEnabled(JSONWriter.Feature.WriteNulls.mask)> é verdadeiro ")
chamada antiga: assertFalse(JSONWriter.ofUTF8().isUTF16())
nova chamada: assertFalse(JSONWriter.ofUTF8().isUTF16(), "Era esperado falso, mas " + result5811 + " <JSONWriter.ofUTF8().isUTF16()> é verdadeiro ")
chamada antiga: assertFalse(JSONWriter.ofUTF16().isUTF8())
nova chamada: assertFalse(JSONWriter.ofUTF16().isUTF8(), "Era esperado falso, mas " + result5812 + " <JSONWriter.ofUTF16().isUTF8()> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isWriteMapTypeInfo(null, null, 0))
nova chamada: assertFalse(jsonWriter.isWriteMapTypeInfo(null, null, 0), "Era esperado falso, mas " + result5813 + " <jsonWriter.isWriteMapTypeInfo(null, null, 0)> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, 0))
nova chamada: assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, 0), "Era esperado falso, mas " + result5814 + " <jsonWriter.isWriteMapTypeInfo(map, Map.class, 0)> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask | NotWriteRootClassName.mask))
nova chamada: assertFalse(jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask | NotWriteRootClassName.mask), "Era esperado falso, mas " + result5815 + " <jsonWriter.isWriteMapTypeInfo(map, Map.class, WriteClassName.mask | NotWriteRootClassName.mask)> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteHashMapArrayListClassName.mask))
nova chamada: assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteHashMapArrayListClassName.mask), "Era esperado falso, mas " + result5816 + " <jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteHashMapArrayListClassName.mask)> é verdadeiro ")
chamada antiga: assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteRootClassName.mask | NotWriteHashMapArrayListClassName.mask))
nova chamada: assertFalse(jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteRootClassName.mask | NotWriteHashMapArrayListClassName.mask), "Era esperado falso, mas " + result5817 + " <jsonWriter.isWriteMapTypeInfo(map1, Map.class, WriteClassName.mask | NotWriteRootClassName.mask | NotWriteHashMapArrayListClassName.mask)> é verdadeiro ")
chamada antiga: assertFalse(ROOT.equals(null))
nova chamada: assertFalse(ROOT.equals(null), "Era esperado falso, mas " + result5818 + " <ROOT.equals(null)> é verdadeiro ")
chamada antiga: assertFalse(ROOT.equals(new Object()))
nova chamada: assertFalse(ROOT.equals(new Object()), "Era esperado falso, mas " + result5819 + " <ROOT.equals(new Object())> é verdadeiro ")
chamada antiga: assertFalse(str.contains("$ref"))
nova chamada: assertFalse(str.contains("$ref"), "Era esperado falso, mas " + result5820 + " <str.contains('$ref')> é verdadeiro ")
chamada antiga: assertFalse(str.contains("$ref"))
nova chamada: assertFalse(str.contains("$ref"), "Era esperado falso, mas " + result5821 + " <str.contains('$ref')> é verdadeiro ")
chamada antiga: assertFalse(jsonPath.remove(null))
nova chamada: assertFalse(jsonPath.remove(null), "Era esperado falso, mas " + result5822 + " <jsonPath.remove(null)> é verdadeiro ")
chamada antiga: assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet").contains(root))
nova chamada: assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet").contains(root), "Era esperado verdadeiro, mas " + result5823 + " <JSONPath.of('$.queryScene.scene.queryDataSet.dataSet').contains(root)> é falso")
chamada antiga: assertFalse(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.abcd").contains(root))
nova chamada: assertFalse(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.abcd").contains(root), "Era esperado falso, mas " + result5824 + " <JSONPath.of('$.queryScene.scene.queryDataSet.dataSet.abcd').contains(root)> é verdadeiro ")
chamada antiga: assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.name").contains(root))
nova chamada: assertTrue(JSONPath.of("$.queryScene.scene.queryDataSet.dataSet.name").contains(root), "Era esperado verdadeiro, mas " + result5825 + " <JSONPath.of('$.queryScene.scene.queryDataSet.dataSet.name').contains(root)> é falso")
chamada antiga: Assertions.assertEquals("haha", o)
nova chamada: assertEquals("haha", o, "Era esperado valores iguais, mas  'haha' é diferente de " + " o")
chamada antiga: assertEquals(1, m2.values.size())
nova chamada: assertEquals(1, m2.values.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5826 + " <m2.values.size()>")
chamada antiga: assertEquals(1, m2.subInvokes.size())
nova chamada: assertEquals(1, m2.subInvokes.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5827 + " <m2.subInvokes.size()>")
chamada antiga: assertEquals(123, obj)
nova chamada: assertEquals(123, obj, "Era esperado valores iguais, mas  123 é diferente de " + " obj")
chamada antiga: assertEquals(1, result)
nova chamada: assertEquals(1, result, "Era esperado valores iguais, mas  1 é diferente de " + " result")
chamada antiga: assertEquals(1, path.eval(rootObject))
nova chamada: assertEquals(1, path.eval(rootObject), "Era esperado valores iguais, mas  1 é diferente de " + result5828 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(1, result)
nova chamada: assertEquals(1, result, "Era esperado valores iguais, mas  1 é diferente de " + " result")
chamada antiga: assertEquals("Windows NT 6.1", result)
nova chamada: assertEquals("Windows NT 6.1", result, "Era esperado valores iguais, mas  'Windows NT 6.1' é diferente de " + " result")
chamada antiga: assertEquals("Windows NT 6.1", path.eval(rootObject))
nova chamada: assertEquals("Windows NT 6.1", path.eval(rootObject), "Era esperado valores iguais, mas  'Windows NT 6.1' é diferente de " + result5829 + " <path.eval(rootObject)>")
chamada antiga: assertEquals("Windows NT 6.1", result)
nova chamada: assertEquals("Windows NT 6.1", result, "Era esperado valores iguais, mas  'Windows NT 6.1' é diferente de " + " result")
chamada antiga: assertEquals("summer-sale", result)
nova chamada: assertEquals("summer-sale", result, "Era esperado valores iguais, mas  'summer-sale' é diferente de " + " result")
chamada antiga: assertEquals("summer-sale", path.eval(rootObject))
nova chamada: assertEquals("summer-sale", path.eval(rootObject), "Era esperado valores iguais, mas  'summer-sale' é diferente de " + result5830 + " <path.eval(rootObject)>")
chamada antiga: assertEquals("summer-sale", result)
nova chamada: assertEquals("summer-sale", result, "Era esperado valores iguais, mas  'summer-sale' é diferente de " + " result")
chamada antiga: assertEquals("sports", result)
nova chamada: assertEquals("sports", result, "Era esperado valores iguais, mas  'sports' é diferente de " + " result")
chamada antiga: assertEquals("sports", path.eval(rootObject))
nova chamada: assertEquals("sports", path.eval(rootObject), "Era esperado valores iguais, mas  'sports' é diferente de " + result5831 + " <path.eval(rootObject)>")
chamada antiga: assertEquals("sports", result)
nova chamada: assertEquals("sports", result, "Era esperado valores iguais, mas  'sports' é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5832 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject))
nova chamada: assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject), "Era esperado valores iguais, mas  new JSONArray('Mozilla/5.0', 'Windows NT 6.1', '1024x4069') é diferente de " + result5833 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5834 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5835 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject))
nova chamada: assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), path.eval(rootObject), "Era esperado valores iguais, mas  new JSONArray('Mozilla/5.0', 'Windows NT 6.1', '1024x4069') é diferente de " + result5836 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5837 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1"))
nova chamada: assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1"), "Era esperado verdadeiro, mas " + result5838 + " <JSONPath.contains(o, '$.10\\.0\\.0\\.1')> é falso")
chamada antiga: assertEquals("{\"region\":\"xxx\"}", JSONPath.eval(o, "$.10\\.0\\.0\\.1").toString())
nova chamada: assertEquals("{\"region\":\"xxx\"}", JSONPath.eval(o, "$.10\\.0\\.0\\.1").toString(), "Era esperado valores iguais, mas  '{\'region\':\'xxx\'}' é diferente de " + result5839 + " <JSONPath.eval(o, '$.10\\.0\\.0\\.1').toString()>")
chamada antiga: assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1.region"))
nova chamada: assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1.region"), "Era esperado verdadeiro, mas " + result5840 + " <JSONPath.contains(o, '$.10\\.0\\.0\\.1.region')> é falso")
chamada antiga: assertEquals("xxx", JSONPath.eval(o, "$.10\\.0\\.0\\.1.region"))
nova chamada: assertEquals("xxx", JSONPath.eval(o, "$.10\\.0\\.0\\.1.region"), "Era esperado valores iguais, mas  'xxx' é diferente de " + result5841 + " <JSONPath.eval(o, '$.10\\.0\\.0\\.1.region')>")
chamada antiga: assertEquals(3, ids.size())
nova chamada: assertEquals(3, ids.size(), "Era esperado valores iguais, mas  3 é diferente de " + result5842 + " <ids.size()>")
chamada antiga: assertEquals(1001, ids.get(0))
nova chamada: assertEquals(1001, ids.get(0), "Era esperado valores iguais, mas  1001 é diferente de " + result5843 + " <ids.get(0)>")
chamada antiga: assertEquals(1002, ids.get(1))
nova chamada: assertEquals(1002, ids.get(1), "Era esperado valores iguais, mas  1002 é diferente de " + result5844 + " <ids.get(1)>")
chamada antiga: assertEquals(1003, ids.get(2))
nova chamada: assertEquals(1003, ids.get(2), "Era esperado valores iguais, mas  1003 é diferente de " + result5845 + " <ids.get(2)>")
chamada antiga: assertEquals("[1.1,2.1]", JSONPath.extract("[[1.1,1.2],[2.1,1.2]]", "$[*][0]").toString())
nova chamada: assertEquals("[1.1,2.1]", JSONPath.extract("[[1.1,1.2],[2.1,1.2]]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[1.1,2.1]' é diferente de " + result5846 + " <JSONPath.extract('[[1.1,1.2],[2.1,1.2]]', '$[*][0]').toString()>")
chamada antiga: assertEquals("[1,2,3,4,5]", JSONPath.extract("[1,2,3,4,5]", "$[*][0]").toString())
nova chamada: assertEquals("[1,2,3,4,5]", JSONPath.extract("[1,2,3,4,5]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[1,2,3,4,5]' é diferente de " + result5847 + " <JSONPath.extract('[1,2,3,4,5]', '$[*][0]').toString()>")
chamada antiga: assertEquals("[[],2,3,4,5]", JSONPath.extract("[[[]],2,3,4,5]", "$[*][0]").toString())
nova chamada: assertEquals("[[],2,3,4,5]", JSONPath.extract("[[[]],2,3,4,5]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[[],2,3,4,5]' é diferente de " + result5848 + " <JSONPath.extract('[[[]],2,3,4,5]', '$[*][0]').toString()>")
chamada antiga: assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],3,4,5]", "$[*][0]").toString())
nova chamada: assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],3,4,5]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[[],[2],3,4,5]' é diferente de " + result5849 + " <JSONPath.extract('[[[]],[[2]],3,4,5]', '$[*][0]').toString()>")
chamada antiga: assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],[3],4,5]", "$[*][0]").toString())
nova chamada: assertEquals("[[],[2],3,4,5]", JSONPath.extract("[[[]],[[2]],[3],4,5]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[[],[2],3,4,5]' é diferente de " + result5850 + " <JSONPath.extract('[[[]],[[2]],[3],4,5]', '$[*][0]').toString()>")
chamada antiga: assertEquals("[1,2,3]", JSONPath.extract("[[1,2],[2,3],[3,4]]", "$[*][0]").toString())
nova chamada: assertEquals("[1,2,3]", JSONPath.extract("[[1,2],[2,3],[3,4]]", "$[*][0]").toString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result5851 + " <JSONPath.extract('[[1,2],[2,3],[3,4]]', '$[*][0]').toString()>")
chamada antiga: assertEquals("{\"0\":1}", JSONPath.extract("{\"key\":{\"0\":1}}", "$[*][0]").toString())
nova chamada: assertEquals("{\"0\":1}", JSONPath.extract("{\"key\":{\"0\":1}}", "$[*][0]").toString(), "Era esperado valores iguais, mas  '{\'0\':1}' é diferente de " + result5852 + " <JSONPath.extract('{\'key\':{\'0\':1}}', '$[*][0]').toString()>")
chamada antiga: assertEquals("1", JSONPath.extract("{\"key\":{\"0\":1}}", "$.key[0]").toString())
nova chamada: assertEquals("1", JSONPath.extract("{\"key\":{\"0\":1}}", "$.key[0]").toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result5853 + " <JSONPath.extract('{\'key\':{\'0\':1}}', '$.key[0]').toString()>")
chamada antiga: assertEquals(5, segments.size())
nova chamada: assertEquals(5, segments.size(), "Era esperado valores iguais, mas  5 é diferente de " + result5854 + " <segments.size()>")
chamada antiga: assertEquals("[100,\"AFRICA\"]", JSONPath.extract("{\"customer\" : 100, \"region\" : \"AFRICA\"}", "$.*").toString())
nova chamada: assertEquals("[100,\"AFRICA\"]", JSONPath.extract("{\"customer\" : 100, \"region\" : \"AFRICA\"}", "$.*").toString(), "Era esperado valores iguais, mas  '[100,\'AFRICA\']' é diferente de " + result5855 + " <JSONPath.extract('{\'customer\' : 100, \'region\' : \'AFRICA\'}', '$.*').toString()>")
chamada antiga: assertEquals("[\"ASIA\"]", JSONPath.extract("{\"region\" : \"ASIA\"}", "$.*").toString())
nova chamada: assertEquals("[\"ASIA\"]", JSONPath.extract("{\"region\" : \"ASIA\"}", "$.*").toString(), "Era esperado valores iguais, mas  '[\'ASIA\']' é diferente de " + result5856 + " <JSONPath.extract('{\'region\' : \'ASIA\'}', '$.*').toString()>")
chamada antiga: assertEquals("[300,\"AFRICA\",null]", JSONPath.extract("{\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}", "$.*").toString())
nova chamada: assertEquals("[300,\"AFRICA\",null]", JSONPath.extract("{\"customer\" : 300, \"region\" : \"AFRICA\", \"comment\" : null}", "$.*").toString(), "Era esperado valores iguais, mas  '[300,\'AFRICA\',null]' é diferente de " + result5857 + " <JSONPath.extract('{\'customer\' : 300, \'region\' : \'AFRICA\', \'comment\' : null}', '$.*').toString()>")
chamada antiga: assertEquals("2", JSONPath.extract("[0, 1, 2]", "$[last]").toString())
nova chamada: assertEquals("2", JSONPath.extract("[0, 1, 2]", "$[last]").toString(), "Era esperado valores iguais, mas  '2' é diferente de " + result5858 + " <JSONPath.extract('[0, 1, 2]', '$[last]').toString()>")
chamada antiga: assertEquals("[1]", JSONPath.extract("[0, 1, 2]", "$[?(@>0 && @<2)]").toString())
nova chamada: assertEquals("[1]", JSONPath.extract("[0, 1, 2]", "$[?(@>0 && @<2)]").toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result5859 + " <JSONPath.extract('[0, 1, 2]', '$[?(@>0 && @<2)]').toString()>")
chamada antiga: assertEquals("[\"abc\",\"abb\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ starts with 'ab')]").toString())
nova chamada: assertEquals("[\"abc\",\"abb\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ starts with 'ab')]").toString(), "Era esperado valores iguais, mas  '[\'abc\',\'abb\']' é diferente de " + result5860 + " <JSONPath.extract('['abc','aaa','abb']', '$[?(@ starts with 'ab')]').toString()>")
chamada antiga: assertEquals("[\"abc\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ ends with 'bc')]").toString())
nova chamada: assertEquals("[\"abc\"]", JSONPath.extract("['abc','aaa','abb']", "$[?(@ ends with 'bc')]").toString(), "Era esperado valores iguais, mas  '[\'abc\']' é diferente de " + result5861 + " <JSONPath.extract('['abc','aaa','abb']', '$[?(@ ends with 'bc')]').toString()>")
chamada antiga: assertEquals(2D, JSONPath.extract("2", "$.double()"))
nova chamada: assertEquals(2D, JSONPath.extract("2", "$.double()"), "Era esperado valores iguais, mas  2D é diferente de " + result5862 + " <JSONPath.extract('2', '$.double()')>")
chamada antiga: assertEquals("2", JSONPath.extract("2.1", "$.floor()").toString())
nova chamada: assertEquals("2", JSONPath.extract("2.1", "$.floor()").toString(), "Era esperado valores iguais, mas  '2' é diferente de " + result5863 + " <JSONPath.extract('2.1', '$.floor()').toString()>")
chamada antiga: assertEquals("-1", JSONPath.extract("-1.5", "$.ceiling()").toString())
nova chamada: assertEquals("-1", JSONPath.extract("-1.5", "$.ceiling()").toString(), "Era esperado valores iguais, mas  '-1' é diferente de " + result5864 + " <JSONPath.extract('-1.5', '$.ceiling()').toString()>")
chamada antiga: assertEquals(3, JSONPath.eval(JSONArray.of(1, "a", null), "$.size()"))
nova chamada: assertEquals(3, JSONPath.eval(JSONArray.of(1, "a", null), "$.size()"), "Era esperado valores iguais, mas  3 é diferente de " + result5865 + " <JSONPath.eval(JSONArray.of(1, 'a', null), '$.size()')>")
chamada antiga: assertEquals(2, JSONPath.eval(JSONObject.of("key1", 1.0, "key2", true), "$.size()"))
nova chamada: assertEquals(2, JSONPath.eval(JSONObject.of("key1", 1.0, "key2", true), "$.size()"), "Era esperado valores iguais, mas  2 é diferente de " + result5866 + " <JSONPath.eval(JSONObject.of('key1', 1.0, 'key2', true), '$.size()')>")
chamada antiga: assertEquals(1, JSONPath.eval(-2e3, "$.size()"))
nova chamada: assertEquals(1, JSONPath.eval(-2e3, "$.size()"), "Era esperado valores iguais, mas  1 é diferente de " + result5867 + " <JSONPath.eval(-2e3, '$.size()')>")
chamada antiga: assertEquals(1, result)
nova chamada: assertEquals(1, result, "Era esperado valores iguais, mas  1 é diferente de " + " result")
chamada antiga: assertEquals("Windows NT 6.1", result)
nova chamada: assertEquals("Windows NT 6.1", result, "Era esperado valores iguais, mas  'Windows NT 6.1' é diferente de " + " result")
chamada antiga: assertEquals("summer-sale", result)
nova chamada: assertEquals("summer-sale", result, "Era esperado valores iguais, mas  'summer-sale' é diferente de " + " result")
chamada antiga: assertEquals("sports", result)
nova chamada: assertEquals("sports", result, "Era esperado valores iguais, mas  'sports' é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5868 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result)
nova chamada: assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result, "Era esperado valores iguais, mas " + result5869 + " <Arrays.asList('Mozilla/5.0', 'Windows NT 6.1', '1024x4069')> é diferente de " + " result")
chamada antiga: assertEquals("1", JSON.toJSONString(min))
nova chamada: assertEquals("1", JSON.toJSONString(min), "Era esperado valores iguais, mas  '1' é diferente de " + result5870 + " <JSON.toJSONString(min)>")
chamada antiga: assertEquals("23", JSON.toJSONString(min))
nova chamada: assertEquals("23", JSON.toJSONString(min), "Era esperado valores iguais, mas  '23' é diferente de " + result5871 + " <JSON.toJSONString(min)>")
chamada antiga: assertEquals("[{\"c\":\"aaaa\"}]", JSON.toJSONString(min))
nova chamada: assertEquals("[{\"c\":\"aaaa\"}]", JSON.toJSONString(min), "Era esperado valores iguais, mas  '[{\'c\':\'aaaa\'}]' é diferente de " + result5872 + " <JSON.toJSONString(min)>")
chamada antiga: assertEquals("{\"csiLive\":[{\"id\":\"123\"}]}", JSON.toJSONString(csiObject))
nova chamada: assertEquals("{\"csiLive\":[{\"id\":\"123\"}]}", JSON.toJSONString(csiObject), "Era esperado valores iguais, mas  '{\'csiLive\':[{\'id\':\'123\'}]}' é diferente de " + result5873 + " <JSON.toJSONString(csiObject)>")
chamada antiga: assertEquals("{\"live\":{\"id\":123}}", JSON.toJSONString(csiObject))
nova chamada: assertEquals("{\"live\":{\"id\":123}}", JSON.toJSONString(csiObject), "Era esperado valores iguais, mas  '{\'live\':{\'id\':123}}' é diferente de " + result5874 + " <JSON.toJSONString(csiObject)>")
chamada antiga: assertEquals("{\"item\":{\"live\":{\"id\":123}}}", JSON.toJSONString(csiObject))
nova chamada: assertEquals("{\"item\":{\"live\":{\"id\":123}}}", JSON.toJSONString(csiObject), "Era esperado valores iguais, mas  '{\'item\':{\'live\':{\'id\':123}}}' é diferente de " + result5875 + " <JSON.toJSONString(csiObject)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5876 + " <result.size()>")
chamada antiga: assertSame(list.get(0), result.get(0))
nova chamada: assertSame(list.get(0), result.get(0), "Era esperado objetos iguais, mas " + result5877 + " <list.get(0)> é diferente de " + result5878 + " <result.get(0)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result5879 + " <result.size()>")
chamada antiga: assertSame(list.get(0), result.get(0))
nova chamada: assertSame(list.get(0), result.get(0), "Era esperado objetos iguais, mas " + result5880 + " <list.get(0)> é diferente de " + result5881 + " <result.get(0)>")
chamada antiga: assertSame(list.get(1), result.get(1))
nova chamada: assertSame(list.get(1), result.get(1), "Era esperado objetos iguais, mas " + result5882 + " <list.get(1)> é diferente de " + result5883 + " <result.get(1)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result5884 + " <result.size()>")
chamada antiga: assertSame(list.get(2), result.get(0))
nova chamada: assertSame(list.get(2), result.get(0), "Era esperado objetos iguais, mas " + result5885 + " <list.get(2)> é diferente de " + result5886 + " <result.get(0)>")
chamada antiga: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString())
nova chamada: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'id\':101,\'name\':\'DataWorks\'},{\'id\':102,\'name\':\'MaxCompute\'}]' é diferente de " + result5887 + " <JSONPath.of('$[?(@.id between 101 and 102)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString())
nova chamada: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id between 101 and 102)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'id\':101,\'name\':\'DataWorks\'},{\'id\':102,\'name\':\'MaxCompute\'}]' é diferente de " + result5888 + " <JSONPath.of('$[?(@.id between 101 and 102)]').eval(array).toString()>")
chamada antiga: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(array).toString())
nova chamada: assertEquals("[{\"id\":101,\"name\":\"DataWorks\"},{\"id\":102,\"name\":\"MaxCompute\"}]", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(array).toString(), "Era esperado valores iguais, mas  '[{\'id\':101,\'name\':\'DataWorks\'},{\'id\':102,\'name\':\'MaxCompute\'}]' é diferente de " + result5889 + " <JSONPath.of('$[?(@.id >= 101 and @.id <= 102)]').eval(array).toString()>")
chamada antiga: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(object).toString())
nova chamada: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id >= 101 and @.id <= 102)]").eval(object).toString(), "Era esperado valores iguais, mas  '{\'id\':101,\'name\':\'DataWorks\'}' é diferente de " + result5890 + " <JSONPath.of('$[?(@.id >= 101 and @.id <= 102)]').eval(object).toString()>")
chamada antiga: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id <= 101 or @.id >= 102)]").eval(object).toString())
nova chamada: assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSONPath.of("$[?(@.id <= 101 or @.id >= 102)]").eval(object).toString(), "Era esperado valores iguais, mas  '{\'id\':101,\'name\':\'DataWorks\'}' é diferente de " + result5891 + " <JSONPath.of('$[?(@.id <= 101 or @.id >= 102)]').eval(object).toString()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5892 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5893 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5894 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5895 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5896 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5897 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5898 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5899 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5900 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5901 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5902 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5903 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals("[262144,18000000]", JSON.toJSONString(jsonPath.extract(JSONReader.of(str))))
nova chamada: assertEquals("[262144,18000000]", JSON.toJSONString(jsonPath.extract(JSONReader.of(str))), "Era esperado valores iguais, mas  '[262144,18000000]' é diferente de " + result5904 + " <JSON.toJSONString(jsonPath.extract(JSONReader.of(str)))>")
chamada antiga: assertEquals("[1,2,3,4,5]", JSONPath.extract(str, "$[*][0]").toString())
nova chamada: assertEquals("[1,2,3,4,5]", JSONPath.extract(str, "$[*][0]").toString(), "Era esperado valores iguais, mas  '[1,2,3,4,5]' é diferente de " + result5905 + " <JSONPath.extract(str, '$[*][0]').toString()>")
chamada antiga: assertEquals("\"1\"", result.toString())
nova chamada: assertEquals("\"1\"", result.toString(), "Era esperado valores iguais, mas  '\'1\'' é diferente de " + result5906 + " <result.toString()>")
chamada antiga: assertEquals("\"2020-01-06 17:00:00\"", result.toString())
nova chamada: assertEquals("\"2020-01-06 17:00:00\"", result.toString(), "Era esperado valores iguais, mas  '\'2020-01-06 17:00:00\'' é diferente de " + result5907 + " <result.toString()>")
chamada antiga: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
nova chamada: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root), "Era esperado valores iguais, mas  '{\'models\':[{\'x\':\'y2\'},{\'x\':\'y2\'}]}' é diferente de " + result5908 + " <JSON.toJSONString(root)>")
chamada antiga: assertEquals(1323L, JSONPath.of("$.inputs.values()[*][0].sum()").eval(JSON.parseObject(str)))
nova chamada: assertEquals(1323L, JSONPath.of("$.inputs.values()[*][0].sum()").eval(JSON.parseObject(str)), "Era esperado valores iguais, mas  1323L é diferente de " + result5909 + " <JSONPath.of('$.inputs.values()[*][0].sum()').eval(JSON.parseObject(str))>")
chamada antiga: assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").eval(JSON.parseObject(str)))
nova chamada: assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").eval(JSON.parseObject(str)), "Era esperado valores iguais, mas  19483761L é diferente de " + result5910 + " <JSONPath.of('$.inputs.values()[*][1].sum()').eval(JSON.parseObject(str))>")
chamada antiga: assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").extract(JSONReader.of(str)))
nova chamada: assertEquals(19483761L, JSONPath.of("$.inputs.values()[*][1].sum()").extract(JSONReader.of(str)), "Era esperado valores iguais, mas  19483761L é diferente de " + result5911 + " <JSONPath.of('$.inputs.values()[*][1].sum()').extract(JSONReader.of(str))>")
chamada antiga: assertEquals("[\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\"]", JSONPath.of("$.inputs.keys()").eval(JSON.parseObject(str)).toString())
nova chamada: assertEquals("[\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\"]", JSONPath.of("$.inputs.keys()").eval(JSON.parseObject(str)).toString(), "Era esperado valores iguais, mas  '[\'sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\']' é diferente de " + result5912 + " <JSONPath.of('$.inputs.keys()').eval(JSON.parseObject(str)).toString()>")
chamada antiga: assertSame(object, JSONPath.of("$").eval(object))
nova chamada: assertSame(object, JSONPath.of("$").eval(object), "Era esperado objetos iguais, mas  object é diferente de " + result5913 + " <JSONPath.of('$').eval(object)>")
chamada antiga: assertEquals("[{\"key\":\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\",\"value\":[1323,19483761]}]", JSONPath.of("$.inputs.entrySet()").eval(JSON.parseObject(str)).toString())
nova chamada: assertEquals("[{\"key\":\"sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\",\"value\":[1323,19483761]}]", JSONPath.of("$.inputs.entrySet()").eval(JSON.parseObject(str)).toString(), "Era esperado valores iguais, mas  '[{\'key\':\'sls_log_archive.mytable/project_id=101/category=log_game/import_time=1655031945_0\',\'value\':[1323,19483761]}]' é diferente de " + result5914 + " <JSONPath.of('$.inputs.entrySet()').eval(JSON.parseObject(str)).toString()>")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result, "Era esperado valores iguais, mas " + result5915 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject))
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject), "Era esperado valores iguais, mas " + result5916 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + result5917 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result, "Era esperado valores iguais, mas " + result5918 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject))
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), path.eval(rootObject), "Era esperado valores iguais, mas " + result5919 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + result5920 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(2, ((Collection) result).size())
nova chamada: assertEquals(2, ((Collection) result).size(), "Era esperado valores iguais, mas  2 é diferente de " + result5921 + " <((Collection) result).size()>")
chamada antiga: assertEquals(2, ((Collection) path.eval(rootObject)).size())
nova chamada: assertEquals(2, ((Collection) path.eval(rootObject)).size(), "Era esperado valores iguais, mas  2 é diferente de " + result5922 + " <((Collection) path.eval(rootObject)).size()>")
chamada antiga: assertEquals("[8.95,12.99,8.99,22.99,19.95]", result.toString())
nova chamada: assertEquals("[8.95,12.99,8.99,22.99,19.95]", result.toString(), "Era esperado valores iguais, mas  '[8.95,12.99,8.99,22.99,19.95]' é diferente de " + result5923 + " <result.toString()>")
chamada antiga: assertEquals(5, ((Collection) result).size())
nova chamada: assertEquals(5, ((Collection) result).size(), "Era esperado valores iguais, mas  5 é diferente de " + result5924 + " <((Collection) result).size()>")
chamada antiga: assertEquals(5, ((Collection) path.eval(rootObject)).size())
nova chamada: assertEquals(5, ((Collection) path.eval(rootObject)).size(), "Era esperado valores iguais, mas  5 é diferente de " + result5925 + " <((Collection) path.eval(rootObject)).size()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5926 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5927 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5928 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5929 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5930 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5931 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5932 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5933 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5934 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5935 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5936 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5937 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5938 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5939 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5940 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5941 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5942 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5943 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5944 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5945 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5946 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5947 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(expected, result.toString())
nova chamada: assertEquals(expected, result.toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5948 + " <result.toString()>")
chamada antiga: assertEquals(expected, path.eval(rootObject).toString())
nova chamada: assertEquals(expected, path.eval(rootObject).toString(), "Era esperado valores iguais, mas  expected é diferente de " + result5949 + " <path.eval(rootObject).toString()>")
chamada antiga: assertEquals(4, result)
nova chamada: assertEquals(4, result, "Era esperado valores iguais, mas  4 é diferente de " + " result")
chamada antiga: assertEquals(4, path.eval(rootObject))
nova chamada: assertEquals(4, path.eval(rootObject), "Era esperado valores iguais, mas  4 é diferente de " + result5950 + " <path.eval(rootObject)>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5951 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5952 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5953 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5954 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result5955 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result5956 + " <vo.v3.shortValue()>")
chamada antiga: assertNotNull(obj)
nova chamada: assertNotNull(obj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(obj)
nova chamada: assertNotNull(obj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(obj)
nova chamada: assertNotNull(obj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(obj, JSONPath.of("$").eval(obj))
nova chamada: assertSame(obj, JSONPath.of("$").eval(obj), "Era esperado objetos iguais, mas  obj é diferente de " + result5957 + " <JSONPath.of('$').eval(obj)>")
chamada antiga: assertNull(JSONPath.of("$").extract((String) null))
nova chamada: assertNull(JSONPath.of("$").extract((String) null), "Era esperado nulo, mas " + result5958 + " <JSONPath.of('$').extract((String) null)> não é nulo")
chamada antiga: assertNull(JSONPath.of("$").extract((byte[]) null))
nova chamada: assertNull(JSONPath.of("$").extract((byte[]) null), "Era esperado nulo, mas " + result5959 + " <JSONPath.of('$').extract((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSONPath.of("$").extract((JSONReader) null))
nova chamada: assertNull(JSONPath.of("$").extract((JSONReader) null), "Era esperado nulo, mas " + result5960 + " <JSONPath.of('$').extract((JSONReader) null)> não é nulo")
chamada antiga: assertSame(map.get("val"), JSONPath.of("$.val").eval(map))
nova chamada: assertSame(map.get("val"), JSONPath.of("$.val").eval(map), "Era esperado objetos iguais, mas " + result5961 + " <map.get('val')> é diferente de " + result5962 + " <JSONPath.of('$.val').eval(map)>")
chamada antiga: assertSame(entity.getValue(), JSONPath.of("$.value").eval(entity))
nova chamada: assertSame(entity.getValue(), JSONPath.of("$.value").eval(entity), "Era esperado objetos iguais, mas " + result5963 + " <entity.getValue()> é diferente de " + result5964 + " <JSONPath.of('$.value').eval(entity)>")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result, "Era esperado valores iguais, mas " + result5965 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + " result")
chamada antiga: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result)
nova chamada: assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result, "Era esperado valores iguais, mas " + result5966 + " <Arrays.asList('Nigel Rees', 'Evelyn Waugh', 'Herman Melville', 'J. R. R. Tolkien')> é diferente de " + " result")
chamada antiga: assertEquals(3, ids.size())
nova chamada: assertEquals(3, ids.size(), "Era esperado valores iguais, mas  3 é diferente de " + result5967 + " <ids.size()>")
chamada antiga: assertEquals(1001, ids.get(0))
nova chamada: assertEquals(1001, ids.get(0), "Era esperado valores iguais, mas  1001 é diferente de " + result5968 + " <ids.get(0)>")
chamada antiga: assertEquals(1002, ids.get(1))
nova chamada: assertEquals(1002, ids.get(1), "Era esperado valores iguais, mas  1002 é diferente de " + result5969 + " <ids.get(1)>")
chamada antiga: assertEquals(1003, ids.get(2))
nova chamada: assertEquals(1003, ids.get(2), "Era esperado valores iguais, mas  1003 é diferente de " + result5970 + " <ids.get(2)>")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(101, path.eval(bean))
nova chamada: assertEquals(101, path.eval(bean), "Era esperado valores iguais, mas  101 é diferente de " + result5971 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.item.id)
nova chamada: assertEquals(102, bean.item.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(102, path.eval(bean))
nova chamada: assertEquals(102, path.eval(bean), "Era esperado valores iguais, mas  102 é diferente de " + result5972 + " <path.eval(bean)>")
chamada antiga: assertEquals(2.0D, path.eval(bean))
nova chamada: assertEquals(2.0D, path.eval(bean), "Era esperado valores iguais, mas  2.0D é diferente de " + result5973 + " <path.eval(bean)>")
chamada antiga: assertEquals(1, JSONPath.of("$.min()").eval(array))
nova chamada: assertEquals(1, JSONPath.of("$.min()").eval(array), "Era esperado valores iguais, mas  1 é diferente de " + result5974 + " <JSONPath.of('$.min()').eval(array)>")
chamada antiga: assertEquals(4, JSONPath.of("$.max()").eval(array))
nova chamada: assertEquals(4, JSONPath.of("$.max()").eval(array), "Era esperado valores iguais, mas  4 é diferente de " + result5975 + " <JSONPath.of('$.max()').eval(array)>")
chamada antiga: assertEquals("\"1\"", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
nova chamada: assertEquals("\"1\"", JSON.toJSONString(JSONPath.of("$.min()").eval(array)), "Era esperado valores iguais, mas  '\'1\'' é diferente de " + result5976 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(array))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(array)), "Era esperado valores iguais, mas  '4' é diferente de " + result5977 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(array))>")
chamada antiga: assertEquals("2.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
nova chamada: assertEquals("2.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)), "Era esperado valores iguais, mas  '2.0' é diferente de " + result5978 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(array))>")
chamada antiga: assertEquals("\"21474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
nova chamada: assertEquals("\"21474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)), "Era esperado valores iguais, mas  '\'21474836480\'' é diferente de " + result5979 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(array))>")
chamada antiga: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
nova chamada: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(array)), "Era esperado valores iguais, mas  '3.0' é diferente de " + result5980 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(array))>")
chamada antiga: assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
nova chamada: assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)), "Era esperado valores iguais, mas  '\'214748364802147483648021474836480\'' é diferente de " + result5981 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(array))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(array)))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(array)), "Era esperado valores iguais, mas  '3' é diferente de " + result5982 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(array))>")
chamada antiga: assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)))
nova chamada: assertEquals("\"214748364802147483648021474836480\"", JSON.toJSONString(JSONPath.of("$.max()").eval(array)), "Era esperado valores iguais, mas  '\'214748364802147483648021474836480\'' é diferente de " + result5983 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(array))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3 })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3 })), "Era esperado valores iguais, mas  '3' é diferente de " + result5984 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { BigDecimal.valueOf(4), 3 }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3 })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3 })), "Era esperado valores iguais, mas  '4' é diferente de " + result5985 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { BigDecimal.valueOf(4), 3 }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3L })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3L })), "Era esperado valores iguais, mas  '3' é diferente de " + result5986 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { BigDecimal.valueOf(4), 3L }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3L })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3L })), "Era esperado valores iguais, mas  '4' é diferente de " + result5987 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { BigDecimal.valueOf(4), 3L }))>")
chamada antiga: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3F })))
nova chamada: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3F })), "Era esperado valores iguais, mas  '3.0' é diferente de " + result5988 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { BigDecimal.valueOf(4), 3F }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3F })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3F })), "Era esperado valores iguais, mas  '4' é diferente de " + result5989 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { BigDecimal.valueOf(4), 3F }))>")
chamada antiga: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3D })))
nova chamada: assertEquals("3.0", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), 3D })), "Era esperado valores iguais, mas  '3.0' é diferente de " + result5990 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { BigDecimal.valueOf(4), 3D }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3D })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), 3D })), "Era esperado valores iguais, mas  '4' é diferente de " + result5991 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { BigDecimal.valueOf(4), 3D }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '3' é diferente de " + result5992 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '4' é diferente de " + result5993 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { BigDecimal.valueOf(4), BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, 3 })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, 3 })), "Era esperado valores iguais, mas  '3' é diferente de " + result5994 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4L, 3 }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3 })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3 })), "Era esperado valores iguais, mas  '4' é diferente de " + result5995 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4L, 3 }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, BigDecimal.valueOf(3) })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4L, BigDecimal.valueOf(3) })), "Era esperado valores iguais, mas  '3' é diferente de " + result5996 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4L, BigDecimal.valueOf(3) }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, BigInteger.valueOf(3) })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '4' é diferente de " + result5997 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4L, BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3F })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3F })), "Era esperado valores iguais, mas  '4' é diferente de " + result5998 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4L, 3F }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3D })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, 3D })), "Era esperado valores iguais, mas  '4' é diferente de " + result5999 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4L, 3D }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, "3" })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4L, "3" })), "Era esperado valores iguais, mas  '4' é diferente de " + result6000 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4L, '3' }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, 3L })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, 3L })), "Era esperado valores iguais, mas  '3' é diferente de " + result6001 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4, 3L }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3 })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3 })), "Era esperado valores iguais, mas  '4' é diferente de " + result6002 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4, 3 }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, BigDecimal.valueOf(3) })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4, BigDecimal.valueOf(3) })), "Era esperado valores iguais, mas  '3' é diferente de " + result6003 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4, BigDecimal.valueOf(3) }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, BigInteger.valueOf(3) })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '4' é diferente de " + result6004 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4, BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3F })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3F })), "Era esperado valores iguais, mas  '4' é diferente de " + result6005 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4, 3F }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3D })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, 3D })), "Era esperado valores iguais, mas  '4' é diferente de " + result6006 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4, 3D }))>")
chamada antiga: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, "3" })))
nova chamada: assertEquals("4", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4, "3" })), "Era esperado valores iguais, mas  '4' é diferente de " + result6007 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4, '3' }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, 3L })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, 3L })), "Era esperado valores iguais, mas  '3' é diferente de " + result6008 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4F, 3L }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3 })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3 })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6009 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4F, 3 }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, BigDecimal.valueOf(3) })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4F, BigDecimal.valueOf(3) })), "Era esperado valores iguais, mas  '3' é diferente de " + result6010 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4F, BigDecimal.valueOf(3) }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, BigInteger.valueOf(3) })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6011 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4F, BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3F })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3F })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6012 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4F, 3F }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3D })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, 3D })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6013 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4F, 3D }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, "3" })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4F, "3" })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6014 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4F, '3' }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, 3L })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, 3L })), "Era esperado valores iguais, mas  '3' é diferente de " + result6015 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4D, 3L }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3 })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3 })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6016 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4D, 3 }))>")
chamada antiga: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, BigDecimal.valueOf(3) })))
nova chamada: assertEquals("3", JSON.toJSONString(JSONPath.of("$.min()").eval(new Object[] { 4D, BigDecimal.valueOf(3) })), "Era esperado valores iguais, mas  '3' é diferente de " + result6017 + " <JSON.toJSONString(JSONPath.of('$.min()').eval(new Object[] { 4D, BigDecimal.valueOf(3) }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, BigInteger.valueOf(3) })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, BigInteger.valueOf(3) })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6018 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4D, BigInteger.valueOf(3) }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3F })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, 3F })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6019 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4D, 3F }))>")
chamada antiga: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, "3" })))
nova chamada: assertEquals("4.0", JSON.toJSONString(JSONPath.of("$.max()").eval(new Object[] { 4D, "3" })), "Era esperado valores iguais, mas  '4.0' é diferente de " + result6020 + " <JSON.toJSONString(JSONPath.of('$.max()').eval(new Object[] { 4D, '3' }))>")
chamada antiga: assertEquals(2, JSONPath.extract(str, "$.size()"))
nova chamada: assertEquals(2, JSONPath.extract(str, "$.size()"), "Era esperado valores iguais, mas  2 é diferente de " + result6021 + " <JSONPath.extract(str, '$.size()')>")
chamada antiga: assertEquals("array", JSONPath.extract(str, "$.type()"))
nova chamada: assertEquals("array", JSONPath.extract(str, "$.type()"), "Era esperado valores iguais, mas  'array' é diferente de " + result6022 + " <JSONPath.extract(str, '$.type()')>")
chamada antiga: assertEquals("object", JSONPath.of("$[0].type()").extract(JSONReader.of(str)))
nova chamada: assertEquals("object", JSONPath.of("$[0].type()").extract(JSONReader.of(str)), "Era esperado valores iguais, mas  'object' é diferente de " + result6023 + " <JSONPath.of('$[0].type()').extract(JSONReader.of(str))>")
chamada antiga: assertEquals("number", JSONPath.extract(str, "$[0].id.type()"))
nova chamada: assertEquals("number", JSONPath.extract(str, "$[0].id.type()"), "Era esperado valores iguais, mas  'number' é diferente de " + result6024 + " <JSONPath.extract(str, '$[0].id.type()')>")
chamada antiga: assertEquals("string", JSONPath.extract(str, "$[0].name.type()"))
nova chamada: assertEquals("string", JSONPath.extract(str, "$[0].name.type()"), "Era esperado valores iguais, mas  'string' é diferente de " + result6025 + " <JSONPath.extract(str, '$[0].name.type()')>")
chamada antiga: assertEquals("boolean", JSONPath.extract(str, "$[0].valid.type()"))
nova chamada: assertEquals("boolean", JSONPath.extract(str, "$[0].valid.type()"), "Era esperado valores iguais, mas  'boolean' é diferente de " + result6026 + " <JSONPath.extract(str, '$[0].valid.type()')>")
chamada antiga: assertEquals("null", JSONPath.extract(str, "$[0].xx.type()"))
nova chamada: assertEquals("null", JSONPath.extract(str, "$[0].xx.type()"), "Era esperado valores iguais, mas  'null' é diferente de " + result6027 + " <JSONPath.extract(str, '$[0].xx.type()')>")
chamada antiga: assertEquals("string", JSONPath.eval(root, "$.id.type()"))
nova chamada: assertEquals("string", JSONPath.eval(root, "$.id.type()"), "Era esperado valores iguais, mas  'string' é diferente de " + result6028 + " <JSONPath.eval(root, '$.id.type()')>")
chamada antiga: assertEquals("string", JSONPath.eval(root, "$.unit.type()"))
nova chamada: assertEquals("string", JSONPath.eval(root, "$.unit.type()"), "Era esperado valores iguais, mas  'string' é diferente de " + result6029 + " <JSONPath.eval(root, '$.unit.type()')>")
chamada antiga: assertNull(JSONPath.of("$[?( @.salary > 100000 )]").extract(JSONReader.of(str)))
nova chamada: assertNull(JSONPath.of("$[?( @.salary > 100000 )]").extract(JSONReader.of(str)), "Era esperado nulo, mas " + result6030 + " <JSONPath.of('$[?( @.salary > 100000 )]').extract(JSONReader.of(str))> não é nulo")
chamada antiga: assertEquals(JSON.parseObject(str), JSONPath.extract(str, "$[?( @.salary > 1000 )]"))
nova chamada: assertEquals(JSON.parseObject(str), JSONPath.extract(str, "$[?( @.salary > 1000 )]"), "Era esperado valores iguais, mas " + result6031 + " <JSON.parseObject(str)> é diferente de " + result6032 + " <JSONPath.extract(str, '$[?( @.salary > 1000 )]')>")
chamada antiga: assertEquals("[[10,20],[100]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20],[100]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20],[100]]' é diferente de " + result6033 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6034 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6035 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6036 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6037 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6038 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20],{\'id\':1001}]' é diferente de " + result6039 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20]]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20]]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20]]' é diferente de " + result6040 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object))
nova chamada: assertEquals("[[10,20],{\"id\":1001}]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[[10,20],{\'id\':1001}]' é diferente de " + result6041 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[15,-23,45]", JSON.toJSONString(object))
nova chamada: assertEquals("[15,-23,45]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[15,-23,45]' é diferente de " + result6042 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("[15,-23,45]", JSON.toJSONString(object))
nova chamada: assertEquals("[15,-23,45]", JSON.toJSONString(object), "Era esperado valores iguais, mas  '[15,-23,45]' é diferente de " + result6043 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals(BigDecimal.valueOf(15), JSONPath.extract(str, "$.readings[0].floor()"))
nova chamada: assertEquals(BigDecimal.valueOf(15), JSONPath.extract(str, "$.readings[0].floor()"), "Era esperado valores iguais, mas " + result6044 + " <BigDecimal.valueOf(15)> é diferente de " + result6045 + " <JSONPath.extract(str, '$.readings[0].floor()')>")
chamada antiga: assertEquals(13, JSONPath.extract(str, "$.readings[1].floor()"))
nova chamada: assertEquals(13, JSONPath.extract(str, "$.readings[1].floor()"), "Era esperado valores iguais, mas  13 é diferente de " + result6046 + " <JSONPath.extract(str, '$.readings[1].floor()')>")
chamada antiga: assertEquals(1D, JSONPath.eval(array, "$[0].floor()"))
nova chamada: assertEquals(1D, JSONPath.eval(array, "$[0].floor()"), "Era esperado valores iguais, mas  1D é diferente de " + result6047 + " <JSONPath.eval(array, '$[0].floor()')>")
chamada antiga: assertEquals(2D, JSONPath.eval(array, "$[1].floor()"))
nova chamada: assertEquals(2D, JSONPath.eval(array, "$[1].floor()"), "Era esperado valores iguais, mas  2D é diferente de " + result6048 + " <JSONPath.eval(array, '$[1].floor()')>")
chamada antiga: assertEquals((byte) 3, JSONPath.eval(array, "$[2].floor()"))
nova chamada: assertEquals((byte) 3, JSONPath.eval(array, "$[2].floor()"), "Era esperado valores iguais, mas  (byte) 3 é diferente de " + result6049 + " <JSONPath.eval(array, '$[2].floor()')>")
chamada antiga: assertEquals((short) 4, JSONPath.eval(array, "$[3].floor()"))
nova chamada: assertEquals((short) 4, JSONPath.eval(array, "$[3].floor()"), "Era esperado valores iguais, mas  (short) 4 é diferente de " + result6050 + " <JSONPath.eval(array, '$[3].floor()')>")
chamada antiga: assertEquals(5, JSONPath.eval(array, "$[4].floor()"))
nova chamada: assertEquals(5, JSONPath.eval(array, "$[4].floor()"), "Era esperado valores iguais, mas  5 é diferente de " + result6051 + " <JSONPath.eval(array, '$[4].floor()')>")
chamada antiga: assertEquals(6L, JSONPath.eval(array, "$[5].floor()"))
nova chamada: assertEquals(6L, JSONPath.eval(array, "$[5].floor()"), "Era esperado valores iguais, mas  6L é diferente de " + result6052 + " <JSONPath.eval(array, '$[5].floor()')>")
chamada antiga: assertEquals(BigInteger.valueOf(7), JSONPath.eval(array, "$[6].floor()"))
nova chamada: assertEquals(BigInteger.valueOf(7), JSONPath.eval(array, "$[6].floor()"), "Era esperado valores iguais, mas " + result6053 + " <BigInteger.valueOf(7)> é diferente de " + result6054 + " <JSONPath.eval(array, '$[6].floor()')>")
chamada antiga: assertEquals((Integer) vo.get("a.b"), (Integer) JSONPath.eval(vo, "a\\.b"))
nova chamada: assertEquals((Integer) vo.get("a.b"), (Integer) JSONPath.eval(vo, "a\\.b"), "Era esperado valores iguais, mas  (Integer) vo.get('a.b') é diferente de " + " (Integer) JSONPath.eval(vo, 'a\\.b')")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result6055 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result6056 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result6057 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result6058 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(10, vo.v0)
nova chamada: assertEquals(10, vo.v0, "Era esperado valores iguais, mas  10 é diferente de " + " vo.v0")
chamada antiga: assertEquals(11, vo.v1)
nova chamada: assertEquals(11, vo.v1, "Era esperado valores iguais, mas  11 é diferente de " + " vo.v1")
chamada antiga: assertEquals(12, vo.v2.byteValue())
nova chamada: assertEquals(12, vo.v2.byteValue(), "Era esperado valores iguais, mas  12 é diferente de " + result6059 + " <vo.v2.byteValue()>")
chamada antiga: assertEquals(13, vo.v3.shortValue())
nova chamada: assertEquals(13, vo.v3.shortValue(), "Era esperado valores iguais, mas  13 é diferente de " + result6060 + " <vo.v3.shortValue()>")
chamada antiga: assertEquals(1001, vo.getV0000())
nova chamada: assertEquals(1001, vo.getV0000(), "Era esperado valores iguais, mas  1001 é diferente de " + result6061 + " <vo.getV0000()>")
chamada antiga: assertTrue(JSONPath.of("$.v0000").remove(vo))
nova chamada: assertTrue(JSONPath.of("$.v0000").remove(vo), "Era esperado verdadeiro, mas " + result6062 + " <JSONPath.of('$.v0000').remove(vo)> é falso")
chamada antiga: assertEquals(0, vo.getV0000())
nova chamada: assertEquals(0, vo.getV0000(), "Era esperado valores iguais, mas  0 é diferente de " + result6063 + " <vo.getV0000()>")
chamada antiga: assertEquals(3, paths.size())
nova chamada: assertEquals(3, paths.size(), "Era esperado valores iguais, mas  3 é diferente de " + result6064 + " <paths.size()>")
chamada antiga: assertNotNull(m.f1)
nova chamada: assertNotNull(m.f1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(m.f1)
nova chamada: assertNull(m.f1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(3, paths.size())
nova chamada: assertEquals(3, paths.size(), "Era esperado valores iguais, mas  3 é diferente de " + result6065 + " <paths.size()>")
chamada antiga: assertEquals("$.f0", path.toString())
nova chamada: assertEquals("$.f0", path.toString(), "Era esperado valores iguais, mas  '$.f0' é diferente de " + result6066 + " <path.toString()>")
chamada antiga: assertEquals(1001, path.eval(map))
nova chamada: assertEquals(1001, path.eval(map), "Era esperado valores iguais, mas  1001 é diferente de " + result6067 + " <path.eval(map)>")
chamada antiga: assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6068 + " <map.size()>")
chamada antiga: assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6069 + " <map.size()>")
chamada antiga: assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount <= 1)]").eval(root).toString())
nova chamada: assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount <= 1)]").eval(root).toString(), "Era esperado valores iguais, mas  '[{\'id\':101,\'amount\':1}]' é diferente de " + result6070 + " <JSONPath.of('$.user[?(@.amount <= 1)]').eval(root).toString()>")
chamada antiga: assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount < 2)]").eval(root).toString())
nova chamada: assertEquals("[{\"id\":101,\"amount\":1}]", JSONPath.of("$.user[?(@.amount < 2)]").eval(root).toString(), "Era esperado valores iguais, mas  '[{\'id\':101,\'amount\':1}]' é diferente de " + result6071 + " <JSONPath.of('$.user[?(@.amount < 2)]').eval(root).toString()>")
chamada antiga: assertEquals("[{\"id\":102,\"amount\":2.0},{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount >= 2)]").eval(root).toString())
nova chamada: assertEquals("[{\"id\":102,\"amount\":2.0},{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount >= 2)]").eval(root).toString(), "Era esperado valores iguais, mas  '[{\'id\':102,\'amount\':2.0},{\'id\':103,\'amount\':3.0}]' é diferente de " + result6072 + " <JSONPath.of('$.user[?(@.amount >= 2)]').eval(root).toString()>")
chamada antiga: assertEquals("[{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount > 2)]").eval(root).toString())
nova chamada: assertEquals("[{\"id\":103,\"amount\":3.0}]", JSONPath.of("$.user[?(@.amount > 2)]").eval(root).toString(), "Era esperado valores iguais, mas  '[{\'id\':103,\'amount\':3.0}]' é diferente de " + result6073 + " <JSONPath.of('$.user[?(@.amount > 2)]').eval(root).toString()>")
chamada antiga: assertEquals("0", JSONPath.of("$.length()").eval(Collections.emptySet()).toString())
nova chamada: assertEquals("0", JSONPath.of("$.length()").eval(Collections.emptySet()).toString(), "Era esperado valores iguais, mas  '0' é diferente de " + result6074 + " <JSONPath.of('$.length()').eval(Collections.emptySet()).toString()>")
chamada antiga: assertEquals("0", JSONPath.of("$.length()").eval(new Object[0]).toString())
nova chamada: assertEquals("0", JSONPath.of("$.length()").eval(new Object[0]).toString(), "Era esperado valores iguais, mas  '0' é diferente de " + result6075 + " <JSONPath.of('$.length()').eval(new Object[0]).toString()>")
chamada antiga: assertEquals(path.extract(JSONReader.of(content)), "1")
nova chamada: assertEquals(path.extract(JSONReader.of(content)), "1", "Era esperado valores iguais, mas " + result6076 + " <path.extract(JSONReader.of(content))> é diferente de " + " '1'")
chamada antiga: assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root))
nova chamada: assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root), "Era esperado valores iguais, mas  '{\'company\':{\'name\':\'jobs\'}}' é diferente de " + result6077 + " <JSON.toJSONString(root)>")
chamada antiga: assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root))
nova chamada: assertEquals("{\"company\":{\"name\":\"jobs\"}}", JSON.toJSONString(root), "Era esperado valores iguais, mas  '{\'company\':{\'name\':\'jobs\'}}' é diferente de " + result6078 + " <JSON.toJSONString(root)>")
chamada antiga: assertEquals(Size.Small.name(), JSONPath.eval(model, "$.size.name"))
nova chamada: assertEquals(Size.Small.name(), JSONPath.eval(model, "$.size.name"), "Era esperado valores iguais, mas " + result6079 + " <Size.Small.name()> é diferente de " + result6080 + " <JSONPath.eval(model, '$.size.name')>")
chamada antiga: assertEquals(Size.Small.ordinal(), JSONPath.eval(model, "$.size.ordinal"))
nova chamada: assertEquals(Size.Small.ordinal(), JSONPath.eval(model, "$.size.ordinal"), "Era esperado valores iguais, mas " + result6081 + " <Size.Small.ordinal()> é diferente de " + result6082 + " <JSONPath.eval(model, '$.size.ordinal')>")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals(101, path.eval(bean))
nova chamada: assertEquals(101, path.eval(bean), "Era esperado valores iguais, mas  101 é diferente de " + result6083 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals(102, path.eval(bean))
nova chamada: assertEquals(102, path.eval(bean), "Era esperado valores iguais, mas  102 é diferente de " + result6084 + " <path.eval(bean)>")
chamada antiga: assertEquals(103, bean.id)
nova chamada: assertEquals(103, bean.id, "Era esperado valores iguais, mas  103 é diferente de " + " bean.id")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(101, path.eval(bean))
nova chamada: assertEquals(101, path.eval(bean), "Era esperado valores iguais, mas  101 é diferente de " + result6085 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.item.id)
nova chamada: assertEquals(102, bean.item.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(102, path.eval(bean))
nova chamada: assertEquals(102, path.eval(bean), "Era esperado valores iguais, mas  102 é diferente de " + result6086 + " <path.eval(bean)>")
chamada antiga: assertEquals(103, bean.item.id)
nova chamada: assertEquals(103, bean.item.id, "Era esperado valores iguais, mas  103 é diferente de " + " bean.item.id")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals(101L, path.eval(bean))
nova chamada: assertEquals(101L, path.eval(bean), "Era esperado valores iguais, mas  101L é diferente de " + result6087 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals(102L, path.eval(bean))
nova chamada: assertEquals(102L, path.eval(bean), "Era esperado valores iguais, mas  102L é diferente de " + result6088 + " <path.eval(bean)>")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals(101F, path.eval(bean))
nova chamada: assertEquals(101F, path.eval(bean), "Era esperado valores iguais, mas  101F é diferente de " + result6089 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals(102F, path.eval(bean))
nova chamada: assertEquals(102F, path.eval(bean), "Era esperado valores iguais, mas  102F é diferente de " + result6090 + " <path.eval(bean)>")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals(101D, path.eval(bean))
nova chamada: assertEquals(101D, path.eval(bean), "Era esperado valores iguais, mas  101D é diferente de " + result6091 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals(102D, path.eval(bean))
nova chamada: assertEquals(102D, path.eval(bean), "Era esperado valores iguais, mas  102D é diferente de " + result6092 + " <path.eval(bean)>")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals((short) 101, path.eval(bean))
nova chamada: assertEquals((short) 101, path.eval(bean), "Era esperado valores iguais, mas  (short) 101 é diferente de " + result6093 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals((short) 102, path.eval(bean))
nova chamada: assertEquals((short) 102, path.eval(bean), "Era esperado valores iguais, mas  (short) 102 é diferente de " + result6094 + " <path.eval(bean)>")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals((byte) 101, path.eval(bean))
nova chamada: assertEquals((byte) 101, path.eval(bean), "Era esperado valores iguais, mas  (byte) 101 é diferente de " + result6095 + " <path.eval(bean)>")
chamada antiga: assertEquals(102, bean.id)
nova chamada: assertEquals(102, bean.id, "Era esperado valores iguais, mas  102 é diferente de " + " bean.id")
chamada antiga: assertEquals((byte) 102, path.eval(bean))
nova chamada: assertEquals((byte) 102, path.eval(bean), "Era esperado valores iguais, mas  (byte) 102 é diferente de " + result6096 + " <path.eval(bean)>")
chamada antiga: assertEquals(true, bean.id)
nova chamada: assertEquals(true, bean.id, "Era esperado valores iguais, mas  true é diferente de " + " bean.id")
chamada antiga: assertEquals(true, path.eval(bean))
nova chamada: assertEquals(true, path.eval(bean), "Era esperado valores iguais, mas  true é diferente de " + result6097 + " <path.eval(bean)>")
chamada antiga: assertEquals('8', bean.id)
nova chamada: assertEquals('8', bean.id, "Era esperado valores iguais, mas  '8' é diferente de " + " bean.id")
chamada antiga: assertEquals('8', path.eval(bean))
nova chamada: assertEquals('8', path.eval(bean), "Era esperado valores iguais, mas  '8' é diferente de " + result6098 + " <path.eval(bean)>")
chamada antiga: assertNotNull(value)
nova chamada: assertNotNull(value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6099 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6100 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6101 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6102 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6103 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6104 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6105 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6106 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6107 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6108 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals(10F, vo.v0)
nova chamada: assertEquals(10F, vo.v0, "Era esperado valores iguais, mas  10F é diferente de " + " vo.v0")
chamada antiga: assertEquals(11D, vo.v1)
nova chamada: assertEquals(11D, vo.v1, "Era esperado valores iguais, mas  11D é diferente de " + " vo.v1")
chamada antiga: assertEquals(12F, vo.v2.floatValue())
nova chamada: assertEquals(12F, vo.v2.floatValue(), "Era esperado valores iguais, mas  12F é diferente de " + result6109 + " <vo.v2.floatValue()>")
chamada antiga: assertEquals(13D, vo.v3.doubleValue())
nova chamada: assertEquals(13D, vo.v3.doubleValue(), "Era esperado valores iguais, mas  13D é diferente de " + result6110 + " <vo.v3.doubleValue()>")
chamada antiga: assertEquals("[0,9,2,3]", array.toJSONString())
nova chamada: assertEquals("[0,9,2,3]", array.toJSONString(), "Era esperado valores iguais, mas  '[0,9,2,3]' é diferente de " + result6111 + " <array.toJSONString()>")
chamada antiga: assertEquals("[0,9,2,3]", JSONPath.set("[0,1,2,3]", "$[?(@ == 1)]", 9))
nova chamada: assertEquals("[0,9,2,3]", JSONPath.set("[0,1,2,3]", "$[?(@ == 1)]", 9), "Era esperado valores iguais, mas  '[0,9,2,3]' é diferente de " + result6112 + " <JSONPath.set('[0,1,2,3]', '$[?(@ == 1)]', 9)>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", object.toJSONString())
nova chamada: assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", object.toJSONString(), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'a\',\'x1\']}}' é diferente de " + result6113 + " <object.toJSONString()>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", JSONPath.set("{'store':{'book':['x0','x1']}}", "$.store.book[0]", "a"))
nova chamada: assertEquals("{\"store\":{\"book\":[\"a\",\"x1\"]}}", JSONPath.set("{'store':{'book':['x0','x1']}}", "$.store.book[0]", "a"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'a\',\'x1\']}}' é diferente de " + result6114 + " <JSONPath.set('{'store':{'book':['x0','x1']}}', '$.store.book[0]', 'a')>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", object.toJSONString())
nova chamada: assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", object.toJSONString(), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'a\',\'a\',\'x2\',\'x3\']}}' é diferente de " + result6115 + " <object.toJSONString()>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", JSONPath.set("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]", "a"))
nova chamada: assertEquals("{\"store\":{\"book\":[\"a\",\"a\",\"x2\",\"x3\"]}}", JSONPath.set("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]", "a"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'a\',\'a\',\'x2\',\'x3\']}}' é diferente de " + result6116 + " <JSONPath.set('{'store':{'book':['x0','x1','x2','x3']}}', '$.store.book[0:2]', 'a')>")
chamada antiga: assertEquals("[0,2,3]", array.toJSONString())
nova chamada: assertEquals("[0,2,3]", array.toJSONString(), "Era esperado valores iguais, mas  '[0,2,3]' é diferente de " + result6117 + " <array.toJSONString()>")
chamada antiga: assertEquals("[0,2,3]", JSONPath.remove("[0,1,2,3]", "$[?(@ == 1)]"))
nova chamada: assertEquals("[0,2,3]", JSONPath.remove("[0,1,2,3]", "$[?(@ == 1)]"), "Era esperado valores iguais, mas  '[0,2,3]' é diferente de " + result6118 + " <JSONPath.remove('[0,1,2,3]', '$[?(@ == 1)]')>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"x1\"]}}", object.toJSONString())
nova chamada: assertEquals("{\"store\":{\"book\":[\"x1\"]}}", object.toJSONString(), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'x1\']}}' é diferente de " + result6119 + " <object.toJSONString()>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"x1\"]}}", JSONPath.remove("{'store':{'book':['x0','x1']}}", "$.store.book[0]"))
nova chamada: assertEquals("{\"store\":{\"book\":[\"x1\"]}}", JSONPath.remove("{'store':{'book':['x0','x1']}}", "$.store.book[0]"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'x1\']}}' é diferente de " + result6120 + " <JSONPath.remove('{'store':{'book':['x0','x1']}}', '$.store.book[0]')>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", object.toJSONString())
nova chamada: assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", object.toJSONString(), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'x2\',\'x3\']}}' é diferente de " + result6121 + " <object.toJSONString()>")
chamada antiga: assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]"))
nova chamada: assertEquals("{\"store\":{\"book\":[\"x2\",\"x3\"]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[0:2]"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[\'x2\',\'x3\']}}' é diferente de " + result6122 + " <JSONPath.remove('{'store':{'book':['x0','x1','x2','x3']}}', '$.store.book[0:2]')>")
chamada antiga: assertEquals("{\"store\":{}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.*"))
nova chamada: assertEquals("{\"store\":{}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.*"), "Era esperado valores iguais, mas  '{\'store\':{}}' é diferente de " + result6123 + " <JSONPath.remove('{'store':{'book':['x0','x1','x2','x3']}}', '$.store.*')>")
chamada antiga: assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"))
nova chamada: assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[]}}' é diferente de " + result6124 + " <JSONPath.remove('{'store':{'book':['x0','x1','x2','x3']}}', '$.store.book[*]')>")
chamada antiga: assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"))
nova chamada: assertEquals("{\"store\":{\"book\":[]}}", JSONPath.remove("{'store':{'book':['x0','x1','x2','x3']}}", "$.store.book[*]"), "Era esperado valores iguais, mas  '{\'store\':{\'book\':[]}}' é diferente de " + result6125 + " <JSONPath.remove('{'store':{'book':['x0','x1','x2','x3']}}', '$.store.book[*]')>")
chamada antiga: assertEquals("number", JSONPath.extract("1", "$.type()"))
nova chamada: assertEquals("number", JSONPath.extract("1", "$.type()"), "Era esperado valores iguais, mas  'number' é diferente de " + result6126 + " <JSONPath.extract('1', '$.type()')>")
chamada antiga: assertEquals("number", JSONPath.extract("1.0", "$.type()"))
nova chamada: assertEquals("number", JSONPath.extract("1.0", "$.type()"), "Era esperado valores iguais, mas  'number' é diferente de " + result6127 + " <JSONPath.extract('1.0', '$.type()')>")
chamada antiga: assertEquals("string", JSONPath.extract("'1'", "$.type()"))
nova chamada: assertEquals("string", JSONPath.extract("'1'", "$.type()"), "Era esperado valores iguais, mas  'string' é diferente de " + result6128 + " <JSONPath.extract(''1'', '$.type()')>")
chamada antiga: assertEquals("string", JSONPath.extract("\"abc\"", "$.type()"))
nova chamada: assertEquals("string", JSONPath.extract("\"abc\"", "$.type()"), "Era esperado valores iguais, mas  'string' é diferente de " + result6129 + " <JSONPath.extract('\'abc\'', '$.type()')>")
chamada antiga: assertEquals("boolean", JSONPath.extract("true", "$.type()"))
nova chamada: assertEquals("boolean", JSONPath.extract("true", "$.type()"), "Era esperado valores iguais, mas  'boolean' é diferente de " + result6130 + " <JSONPath.extract('true', '$.type()')>")
chamada antiga: assertEquals("boolean", JSONPath.extract("false", "$.type()"))
nova chamada: assertEquals("boolean", JSONPath.extract("false", "$.type()"), "Era esperado valores iguais, mas  'boolean' é diferente de " + result6131 + " <JSONPath.extract('false', '$.type()')>")
chamada antiga: assertEquals("object", JSONPath.extract("{}", "$.type()"))
nova chamada: assertEquals("object", JSONPath.extract("{}", "$.type()"), "Era esperado valores iguais, mas  'object' é diferente de " + result6132 + " <JSONPath.extract('{}', '$.type()')>")
chamada antiga: assertEquals("array", JSONPath.extract("[]", "$.type()"))
nova chamada: assertEquals("array", JSONPath.extract("[]", "$.type()"), "Era esperado valores iguais, mas  'array' é diferente de " + result6133 + " <JSONPath.extract('[]', '$.type()')>")
chamada antiga: assertEquals("null", JSONPath.extract("null", "$.type()"))
nova chamada: assertEquals("null", JSONPath.extract("null", "$.type()"), "Era esperado valores iguais, mas  'null' é diferente de " + result6134 + " <JSONPath.extract('null', '$.type()')>")
chamada antiga: assertEquals(0, JSONPath.extract("[]", "$.size()"))
nova chamada: assertEquals(0, JSONPath.extract("[]", "$.size()"), "Era esperado valores iguais, mas  0 é diferente de " + result6135 + " <JSONPath.extract('[]', '$.size()')>")
chamada antiga: assertEquals(1, JSONPath.extract("[0]", "$.size()"))
nova chamada: assertEquals(1, JSONPath.extract("[0]", "$.size()"), "Era esperado valores iguais, mas  1 é diferente de " + result6136 + " <JSONPath.extract('[0]', '$.size()')>")
chamada antiga: assertEquals(0, JSONPath.extract("{}", "$.size()"))
nova chamada: assertEquals(0, JSONPath.extract("{}", "$.size()"), "Era esperado valores iguais, mas  0 é diferente de " + result6137 + " <JSONPath.extract('{}', '$.size()')>")
chamada antiga: assertEquals(1, JSONPath.extract("{\"id\":123}", "$.size()"))
nova chamada: assertEquals(1, JSONPath.extract("{\"id\":123}", "$.size()"), "Era esperado valores iguais, mas  1 é diferente de " + result6138 + " <JSONPath.extract('{\'id\':123}', '$.size()')>")
chamada antiga: assertEquals(1, JSONPath.extract("1", "$.abs()"))
nova chamada: assertEquals(1, JSONPath.extract("1", "$.abs()"), "Era esperado valores iguais, mas  1 é diferente de " + result6139 + " <JSONPath.extract('1', '$.abs()')>")
chamada antiga: assertEquals(1, JSONPath.extract("-1", "$.abs()"))
nova chamada: assertEquals(1, JSONPath.extract("-1", "$.abs()"), "Era esperado valores iguais, mas  1 é diferente de " + result6140 + " <JSONPath.extract('-1', '$.abs()')>")
chamada antiga: assertEquals(1L, JSONPath.extract("1L", "$.abs()"))
nova chamada: assertEquals(1L, JSONPath.extract("1L", "$.abs()"), "Era esperado valores iguais, mas  1L é diferente de " + result6141 + " <JSONPath.extract('1L', '$.abs()')>")
chamada antiga: assertEquals(1L, JSONPath.extract("-1L", "$.abs()"))
nova chamada: assertEquals(1L, JSONPath.extract("-1L", "$.abs()"), "Era esperado valores iguais, mas  1L é diferente de " + result6142 + " <JSONPath.extract('-1L', '$.abs()')>")
chamada antiga: assertEquals(new BigDecimal("1.0"), JSONPath.extract("1.0", "$.abs()"))
nova chamada: assertEquals(new BigDecimal("1.0"), JSONPath.extract("1.0", "$.abs()"), "Era esperado valores iguais, mas  new BigDecimal('1.0') é diferente de " + result6143 + " <JSONPath.extract('1.0', '$.abs()')>")
chamada antiga: assertEquals(new BigDecimal("1.0"), JSONPath.extract("-1.0", "$.abs()"))
nova chamada: assertEquals(new BigDecimal("1.0"), JSONPath.extract("-1.0", "$.abs()"), "Era esperado valores iguais, mas  new BigDecimal('1.0') é diferente de " + result6144 + " <JSONPath.extract('-1.0', '$.abs()')>")
chamada antiga: assertEquals(1.0F, JSONPath.extract("1.0F", "$.abs()"))
nova chamada: assertEquals(1.0F, JSONPath.extract("1.0F", "$.abs()"), "Era esperado valores iguais, mas  1.0F é diferente de " + result6145 + " <JSONPath.extract('1.0F', '$.abs()')>")
chamada antiga: assertEquals(1.0F, JSONPath.extract("-1.0F", "$.abs()"))
nova chamada: assertEquals(1.0F, JSONPath.extract("-1.0F", "$.abs()"), "Era esperado valores iguais, mas  1.0F é diferente de " + result6146 + " <JSONPath.extract('-1.0F', '$.abs()')>")
chamada antiga: assertEquals(1.0D, JSONPath.extract("1.0D", "$.abs()"))
nova chamada: assertEquals(1.0D, JSONPath.extract("1.0D", "$.abs()"), "Era esperado valores iguais, mas  1.0D é diferente de " + result6147 + " <JSONPath.extract('1.0D', '$.abs()')>")
chamada antiga: assertEquals(1.0D, JSONPath.extract("-1.0D", "$.abs()"))
nova chamada: assertEquals(1.0D, JSONPath.extract("-1.0D", "$.abs()"), "Era esperado valores iguais, mas  1.0D é diferente de " + result6148 + " <JSONPath.extract('-1.0D', '$.abs()')>")
chamada antiga: assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(1), "$.abs()"))
nova chamada: assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(1), "$.abs()"), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result6149 + " <JSONPath.eval(BigInteger.valueOf(1), '$.abs()')>")
chamada antiga: assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(-1), "$.abs()"))
nova chamada: assertEquals(BigInteger.ONE, JSONPath.eval(BigInteger.valueOf(-1), "$.abs()"), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result6150 + " <JSONPath.eval(BigInteger.valueOf(-1), '$.abs()')>")
chamada antiga: assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"))
nova chamada: assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"), "Era esperado valores iguais, mas  1 é diferente de " + result6151 + " <JSONPath.extract('{'id':1}', '$.id.abs()')>")
chamada antiga: assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"))
nova chamada: assertEquals(1, JSONPath.extract("{'id':1}", "$.id.abs()"), "Era esperado valores iguais, mas  1 é diferente de " + result6152 + " <JSONPath.extract('{'id':1}', '$.id.abs()')>")
chamada antiga: assertEquals(1D, JSONPath.extract("1", "$.double()"))
nova chamada: assertEquals(1D, JSONPath.extract("1", "$.double()"), "Era esperado valores iguais, mas  1D é diferente de " + result6153 + " <JSONPath.extract('1', '$.double()')>")
chamada antiga: assertEquals(JSONArray.of(1D), JSONPath.extract("[1]", "$.double()"))
nova chamada: assertEquals(JSONArray.of(1D), JSONPath.extract("[1]", "$.double()"), "Era esperado valores iguais, mas " + result6154 + " <JSONArray.of(1D)> é diferente de " + result6155 + " <JSONPath.extract('[1]', '$.double()')>")
chamada antiga: assertEquals(JSONArray.of(1D, 2D, 3D, 4D, 5D, null), JSONPath.extract("[1.0, 2, 3F, 4D, \"5\", \"\"]", "$.double()"))
nova chamada: assertEquals(JSONArray.of(1D, 2D, 3D, 4D, 5D, null), JSONPath.extract("[1.0, 2, 3F, 4D, \"5\", \"\"]", "$.double()"), "Era esperado valores iguais, mas " + result6156 + " <JSONArray.of(1D, 2D, 3D, 4D, 5D, null)> é diferente de " + result6157 + " <JSONPath.extract('[1.0, 2, 3F, 4D, \'5\', \'\']', '$.double()')>")
chamada antiga: assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"))
nova chamada: assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"), "Era esperado valores iguais, mas  1D é diferente de " + result6158 + " <JSONPath.extract('{'id':1}', '$.id.double()')>")
chamada antiga: assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"))
nova chamada: assertEquals(1D, JSONPath.extract("{'id':1}", "$.id.double()"), "Era esperado valores iguais, mas  1D é diferente de " + result6159 + " <JSONPath.extract('{'id':1}', '$.id.double()')>")
chamada antiga: assertEquals(1, JSONPath.extract("1", "$.floor()"))
nova chamada: assertEquals(1, JSONPath.extract("1", "$.floor()"), "Era esperado valores iguais, mas  1 é diferente de " + result6160 + " <JSONPath.extract('1', '$.floor()')>")
chamada antiga: assertEquals(new BigDecimal("1"), JSONPath.extract("1.1", "$.floor()"))
nova chamada: assertEquals(new BigDecimal("1"), JSONPath.extract("1.1", "$.floor()"), "Era esperado valores iguais, mas  new BigDecimal('1') é diferente de " + result6161 + " <JSONPath.extract('1.1', '$.floor()')>")
chamada antiga: assertEquals(1D, JSONPath.extract("1.1F", "$.floor()"))
nova chamada: assertEquals(1D, JSONPath.extract("1.1F", "$.floor()"), "Era esperado valores iguais, mas  1D é diferente de " + result6162 + " <JSONPath.extract('1.1F', '$.floor()')>")
chamada antiga: assertEquals(1D, JSONPath.extract("1.1D", "$.floor()"))
nova chamada: assertEquals(1D, JSONPath.extract("1.1D", "$.floor()"), "Era esperado valores iguais, mas  1D é diferente de " + result6163 + " <JSONPath.extract('1.1D', '$.floor()')>")
chamada antiga: assertEquals("1", result.toString())
nova chamada: assertEquals("1", result.toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result6164 + " <result.toString()>")
chamada antiga: assertEquals("2020-01-06 17:00:00", result.toString())
nova chamada: assertEquals("2020-01-06 17:00:00", result.toString(), "Era esperado valores iguais, mas  '2020-01-06 17:00:00' é diferente de " + result6165 + " <result.toString()>")
chamada antiga: assertEquals("450", result.toString())
nova chamada: assertEquals("450", result.toString(), "Era esperado valores iguais, mas  '450' é diferente de " + result6166 + " <result.toString()>")
chamada antiga: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.color == 'red' )]"), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.color == 'red' )]"), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'color\':\'red\',\'price\':19.95,\'gears\':[23,50],\'extra\':{\'x\':0},\'escape\':\'Esc\\b\\f\\n\\r\\t*\',\'nullValue\':null}' é diferente de " + result6167 + " <JSON.toJSONString(JSONPath.extract(STR, '$.store.bicycle[?(@.color == 'red' )]'), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 50])]"), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 50])]"), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'color\':\'red\',\'price\':19.95,\'gears\':[23,50],\'extra\':{\'x\':0},\'escape\':\'Esc\\b\\f\\n\\r\\t*\',\'nullValue\':null}' é diferente de " + result6168 + " <JSON.toJSONString(JSONPath.extract(STR, '$.store.bicycle[?(@.gears == [23, 50])]'), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertNull(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 77])]"))
nova chamada: assertNull(JSONPath.extract(STR, "$.store.bicycle[?(@.gears == [23, 77])]"), "Era esperado nulo, mas " + result6169 + " <JSONPath.extract(STR, '$.store.bicycle[?(@.gears == [23, 77])]')> não é nulo")
chamada antiga: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.extra == {\"x\":0})]"), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.extra == {\"x\":0})]"), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'color\':\'red\',\'price\':19.95,\'gears\':[23,50],\'extra\':{\'x\':0},\'escape\':\'Esc\\b\\f\\n\\r\\t*\',\'nullValue\':null}' é diferente de " + result6170 + " <JSON.toJSONString(JSONPath.extract(STR, '$.store.bicycle[?(@.extra == {\'x\':0})]'), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.escape == 'Esc\\b\\f\\n\\r\\t\\u002A')]"), JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("{\"color\":\"red\",\"price\":19.95,\"gears\":[23,50],\"extra\":{\"x\":0},\"escape\":\"Esc\\b\\f\\n\\r\\t*\",\"nullValue\":null}", JSON.toJSONString(JSONPath.extract(STR, "$.store.bicycle[?(@.escape == 'Esc\\b\\f\\n\\r\\t\\u002A')]"), JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  '{\'color\':\'red\',\'price\':19.95,\'gears\':[23,50],\'extra\':{\'x\':0},\'escape\':\'Esc\\b\\f\\n\\r\\t*\',\'nullValue\':null}' é diferente de " + result6171 + " <JSON.toJSONString(JSONPath.extract(STR, '$.store.bicycle[?(@.escape == 'Esc\\b\\f\\n\\r\\t\\u002A')]'), JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6172 + " <result.size()>")
chamada antiga: assertSame(list.get(0), result.get(0))
nova chamada: assertSame(list.get(0), result.get(0), "Era esperado objetos iguais, mas " + result6173 + " <list.get(0)> é diferente de " + result6174 + " <result.get(0)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6175 + " <result.size()>")
chamada antiga: assertSame(list.get(0), result.get(0))
nova chamada: assertSame(list.get(0), result.get(0), "Era esperado objetos iguais, mas " + result6176 + " <list.get(0)> é diferente de " + result6177 + " <result.get(0)>")
chamada antiga: assertSame(list.get(1), result.get(1))
nova chamada: assertSame(list.get(1), result.get(1), "Era esperado objetos iguais, mas " + result6178 + " <list.get(1)> é diferente de " + result6179 + " <result.get(1)>")
chamada antiga: assertEquals(1, result.size())
nova chamada: assertEquals(1, result.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6180 + " <result.size()>")
chamada antiga: assertSame(list.get(2), result.get(0))
nova chamada: assertSame(list.get(2), result.get(0), "Era esperado objetos iguais, mas " + result6181 + " <list.get(2)> é diferente de " + result6182 + " <result.get(0)>")
chamada antiga: assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str)
nova chamada: assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str, "Era esperado valores iguais, mas  '{\'brokerAddrs\':{0:\'0.0.0.0\'}}' é diferente de " + " str")
chamada antiga: assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L))
nova chamada: assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L), "Era esperado valores iguais, mas  '0.0.0.0' é diferente de " + result6183 + " <brokerData1.getBrokerAddrs().get(0L)>")
chamada antiga: assertEquals(cmd.code, cmd1.code)
nova chamada: assertEquals(cmd.code, cmd1.code, "Era esperado valores iguais, mas  cmd.code é diferente de " + " cmd1.code")
chamada antiga: assertTrue(JSONValidator.from("{}").validate())
nova chamada: assertTrue(JSONValidator.from("{}").validate(), "Era esperado verdadeiro, mas " + result6184 + " <JSONValidator.from('{}').validate()> é falso")
chamada antiga: assertTrue(JSONValidator.fromUtf8("{}".getBytes(StandardCharsets.UTF_8)).validate())
nova chamada: assertTrue(JSONValidator.fromUtf8("{}".getBytes(StandardCharsets.UTF_8)).validate(), "Era esperado verdadeiro, mas " + result6185 + " <JSONValidator.fromUtf8('{}'.getBytes(StandardCharsets.UTF_8)).validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from("[]").validate())
nova chamada: assertTrue(JSONValidator.from("[]").validate(), "Era esperado verdadeiro, mas " + result6186 + " <JSONValidator.from('[]').validate()> é falso")
chamada antiga: assertTrue(JSONValidator.fromUtf8("[]".getBytes(StandardCharsets.UTF_8)).validate())
nova chamada: assertTrue(JSONValidator.fromUtf8("[]".getBytes(StandardCharsets.UTF_8)).validate(), "Era esperado verdadeiro, mas " + result6187 + " <JSONValidator.fromUtf8('[]'.getBytes(StandardCharsets.UTF_8)).validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from("1").validate())
nova chamada: assertTrue(JSONValidator.from("1").validate(), "Era esperado verdadeiro, mas " + result6188 + " <JSONValidator.from('1').validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from("\"123\"").validate())
nova chamada: assertTrue(JSONValidator.from("\"123\"").validate(), "Era esperado verdadeiro, mas " + result6189 + " <JSONValidator.from('\'123\'').validate()> é falso")
chamada antiga: assertEquals(JSONValidator.Type.Value, JSONValidator.from("\"123\"").getType())
nova chamada: assertEquals(JSONValidator.Type.Value, JSONValidator.from("\"123\"").getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result6190 + " <JSONValidator.from('\'123\'').getType()>")
chamada antiga: assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result6191 + " <validator.validate()> é falso")
chamada antiga: assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result6192 + " <validator.validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "{}")).validate())
nova chamada: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "{}")).validate(), "Era esperado verdadeiro, mas " + result6193 + " <JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), '{}')).validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "[]")).validate())
nova chamada: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "[]")).validate(), "Era esperado verdadeiro, mas " + result6194 + " <JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), '[]')).validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "1")).validate())
nova chamada: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "1")).validate(), "Era esperado verdadeiro, mas " + result6195 + " <JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), '1')).validate()> é falso")
chamada antiga: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).validate())
nova chamada: assertTrue(JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).validate(), "Era esperado verdadeiro, mas " + result6196 + " <JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), '\'123\'')).validate()> é falso")
chamada antiga: assertEquals(JSONValidator.Type.Value, JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).getType())
nova chamada: assertEquals(JSONValidator.Type.Value, JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), "\"123\"")).getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result6197 + " <JSONValidator.from(new JSONReaderStr(JSONFactory.createReadContext(), '\'123\'')).getType()>")
chamada antiga: assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result6198 + " <validator.validate()> é falso")
chamada antiga: assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result6199 + " <validator.validate()> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[]"))
nova chamada: assertTrue(JSON.isValidArray("[]"), "Era esperado verdadeiro, mas " + result6200 + " <JSON.isValidArray('[]')> é falso")
chamada antiga: assertEquals(1, array.get(0))
nova chamada: assertEquals(1, array.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result6201 + " <array.get(0)>")
chamada antiga: assertEquals(2L, array.get(1))
nova chamada: assertEquals(2L, array.get(1), "Era esperado valores iguais, mas  2L é diferente de " + result6202 + " <array.get(1)>")
chamada antiga: assertEquals("3", array.get(2))
nova chamada: assertEquals("3", array.get(2), "Era esperado valores iguais, mas  '3' é diferente de " + result6203 + " <array.get(2)>")
chamada antiga: assertNull(JSON.parseArray(str))
nova chamada: assertNull(JSON.parseArray(str), "Era esperado nulo, mas " + result6204 + " <JSON.parseArray(str)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(str, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray(str, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6205 + " <JSON.parseArray(str, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(str.toCharArray()))
nova chamada: assertNull(JSON.parseArray(str.toCharArray()), "Era esperado nulo, mas " + result6206 + " <JSON.parseArray(str.toCharArray())> não é nulo")
chamada antiga: assertNull(JSON.parseArray(strBytes))
nova chamada: assertNull(JSON.parseArray(strBytes), "Era esperado nulo, mas " + result6207 + " <JSON.parseArray(strBytes)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(strBytes, 0, strBytes.length, StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseArray(strBytes, 0, strBytes.length, StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6208 + " <JSON.parseArray(strBytes, 0, strBytes.length, StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertEquals(2, jsonArray.size())
nova chamada: assertEquals(2, jsonArray.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6209 + " <jsonArray.size()>")
chamada antiga: assertNotSame(jsonArray.get(0), jsonArray.get(1))
nova chamada: assertNotSame(jsonArray.get(0), jsonArray.get(1), "Era esperado objetos diferentes, mas " + result6210 + " <jsonArray.get(0)> é igual a " + result6211 + " <jsonArray.get(1)>")
chamada antiga: assertEquals(2, jsonArray1.size())
nova chamada: assertEquals(2, jsonArray1.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6212 + " <jsonArray1.size()>")
chamada antiga: assertNotSame(jsonArray1.get(0), jsonArray1.get(1))
nova chamada: assertNotSame(jsonArray1.get(0), jsonArray1.get(1), "Era esperado objetos diferentes, mas " + result6213 + " <jsonArray1.get(0)> é igual a " + result6214 + " <jsonArray1.get(1)>")
chamada antiga: assertEquals(101, intField1.v0000)
nova chamada: assertEquals(101, intField1.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " intField1.v0000")
chamada antiga: assertNotNull(date1.getDate())
nova chamada: assertNotNull(date1.getDate(), "Era esperado não nulo, mas " + result6215 + " <date1.getDate()> é nulo")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(101, intField1.v0000)
nova chamada: assertEquals(101, intField1.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " intField1.v0000")
chamada antiga: assertNotNull(date1.getDate())
nova chamada: assertNotNull(date1.getDate(), "Era esperado não nulo, mas " + result6216 + " <date1.getDate()> é nulo")
chamada antiga: assertEquals(101, intField1.v0000)
nova chamada: assertEquals(101, intField1.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " intField1.v0000")
chamada antiga: assertNotNull(date1.getDate())
nova chamada: assertNotNull(date1.getDate(), "Era esperado não nulo, mas " + result6217 + " <date1.getDate()> é nulo")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertNull(JSON.parseObject((ByteBuffer) null, IntField1.class))
nova chamada: assertNull(JSON.parseObject((ByteBuffer) null, IntField1.class), "Era esperado nulo, mas " + result6218 + " <JSON.parseObject((ByteBuffer) null, IntField1.class)> não é nulo")
chamada antiga: assertEquals(101, vo.v0000)
nova chamada: assertEquals(101, vo.v0000, "Era esperado valores iguais, mas  101 é diferente de " + " vo.v0000")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, new Filter[0])))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, new Filter[0])), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, new Filter[0]))")
chamada antiga: assertEquals("null", new String(out.toByteArray()))
nova chamada: assertEquals("null", new String(out.toByteArray()), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("\"test\"", new String(JSON.toJSONBytes("test", new Filter[0], JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("\"test\"", new String(JSON.toJSONBytes("test", new Filter[0], JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '\'test\'' é diferente de " + " new String(JSON.toJSONBytes('test', new Filter[0], JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("\"test\"", new String(JSON.toJSONBytes("test", Arrays.asList(new SimplePropertyPreFilter()).toArray(new Filter[0]), JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("\"test\"", new String(JSON.toJSONBytes("test", Arrays.asList(new SimplePropertyPreFilter()).toArray(new Filter[0]), JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  '\'test\'' é diferente de " + " new String(JSON.toJSONBytes('test', Arrays.asList(new SimplePropertyPreFilter()).toArray(new Filter[0]), JSONWriter.Feature.WriteNulls))")
chamada antiga: assertTrue(object.isEmpty())
nova chamada: assertTrue(object.isEmpty(), "Era esperado verdadeiro, mas " + result6219 + " <object.isEmpty()> é falso")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6220 + " <object.size()>")
chamada antiga: assertEquals(123, object.get("id"))
nova chamada: assertEquals(123, object.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result6221 + " <object.get('id')>")
chamada antiga: assertTrue(object.isEmpty())
nova chamada: assertTrue(object.isEmpty(), "Era esperado verdadeiro, mas " + result6222 + " <object.isEmpty()> é falso")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6223 + " <object.size()>")
chamada antiga: assertEquals(123, object.get("id"))
nova chamada: assertEquals(123, object.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result6224 + " <object.get('id')>")
chamada antiga: assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result6225 + " <list.isEmpty()> é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6226 + " <list.size()>")
chamada antiga: assertEquals(123, list.get(0))
nova chamada: assertEquals(123, list.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6227 + " <list.get(0)>")
chamada antiga: assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result6228 + " <list.isEmpty()> é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6229 + " <list.size()>")
chamada antiga: assertEquals(123, list.get(0))
nova chamada: assertEquals(123, list.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6230 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6231 + " <list.size()>")
chamada antiga: assertEquals("123", list.get(0))
nova chamada: assertEquals("123", list.get(0), "Era esperado valores iguais, mas  '123' é diferente de " + result6232 + " <list.get(0)>")
chamada antiga: assertEquals("\"2017-03-17\"", json1)
nova chamada: assertEquals("\"2017-03-17\"", json1, "Era esperado valores iguais, mas  '\'2017-03-17\'' é diferente de " + " json1")
chamada antiga: assertEquals("\"2017-03-17 00:00:01\"", json2)
nova chamada: assertEquals("\"2017-03-17 00:00:01\"", json2, "Era esperado valores iguais, mas  '\'2017-03-17 00:00:01\'' é diferente de " + " json2")
chamada antiga: assertNotNull(date1)
nova chamada: assertNotNull(date1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(date2)
nova chamada: assertNotNull(date2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(JSON.parse("null"))
nova chamada: assertNull(JSON.parse("null"), "Era esperado nulo, mas " + result6233 + " <JSON.parse('null')> não é nulo")
chamada antiga: assertNull(JSON.parse(""))
nova chamada: assertNull(JSON.parse(""), "Era esperado nulo, mas " + result6234 + " <JSON.parse('')> não é nulo")
chamada antiga: assertNull(JSON.parse(null, 0, 0))
nova chamada: assertNull(JSON.parse(null, 0, 0), "Era esperado nulo, mas " + result6235 + " <JSON.parse(null, 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parse("", 0, 0))
nova chamada: assertNull(JSON.parse("", 0, 0), "Era esperado nulo, mas " + result6236 + " <JSON.parse('', 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parse("abc", 0, 0))
nova chamada: assertNull(JSON.parse("abc", 0, 0), "Era esperado nulo, mas " + result6237 + " <JSON.parse('abc', 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null"))
nova chamada: assertNull(JSON.parseObject("null"), "Era esperado nulo, mas " + result6238 + " <JSON.parseObject('null')> não é nulo")
chamada antiga: assertNull(JSON.parseObject(""))
nova chamada: assertNull(JSON.parseObject(""), "Era esperado nulo, mas " + result6239 + " <JSON.parseObject('')> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject("null", JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result6240 + " <JSON.parseObject('null', JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", JSONReader.Feature.SupportSmartMatch))
nova chamada: assertNull(JSON.parseObject("", JSONReader.Feature.SupportSmartMatch), "Era esperado nulo, mas " + result6241 + " <JSON.parseObject('', JSONReader.Feature.SupportSmartMatch)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", JSONFactory.createReadContext()))
nova chamada: assertNull(JSON.parseObject("null", JSONFactory.createReadContext()), "Era esperado nulo, mas " + result6242 + " <JSON.parseObject('null', JSONFactory.createReadContext())> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", JSONFactory.createReadContext(JSONReader.Feature.SupportSmartMatch)))
nova chamada: assertNull(JSON.parseObject("null", JSONFactory.createReadContext(JSONReader.Feature.SupportSmartMatch)), "Era esperado nulo, mas " + result6243 + " <JSON.parseObject('null', JSONFactory.createReadContext(JSONReader.Feature.SupportSmartMatch))> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", JSONFactory.createReadContext()))
nova chamada: assertNull(JSON.parseObject("", JSONFactory.createReadContext()), "Era esperado nulo, mas " + result6244 + " <JSON.parseObject('', JSONFactory.createReadContext())> não é nulo")
chamada antiga: assertEquals("{}", JSON.parseObject("{}", JSONFactory.createReadContext()).toString())
nova chamada: assertEquals("{}", JSON.parseObject("{}", JSONFactory.createReadContext()).toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result6245 + " <JSON.parseObject('{}', JSONFactory.createReadContext()).toString()>")
chamada antiga: assertNull(JSON.parseObject((String) null, 0, 0))
nova chamada: assertNull(JSON.parseObject((String) null, 0, 0), "Era esperado nulo, mas " + result6246 + " <JSON.parseObject((String) null, 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", 0, 0))
nova chamada: assertNull(JSON.parseObject("", 0, 0), "Era esperado nulo, mas " + result6247 + " <JSON.parseObject('', 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("abc", 0, 0))
nova chamada: assertNull(JSON.parseObject("abc", 0, 0), "Era esperado nulo, mas " + result6248 + " <JSON.parseObject('abc', 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", 0, 4))
nova chamada: assertNull(JSON.parseObject("null", 0, 4), "Era esperado nulo, mas " + result6249 + " <JSON.parseObject('null', 0, 4)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null))
nova chamada: assertNull(JSON.parseObject((byte[]) null), "Era esperado nulo, mas " + result6250 + " <JSON.parseObject((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0]))
nova chamada: assertNull(JSON.parseObject(new byte[0]), "Era esperado nulo, mas " + result6251 + " <JSON.parseObject(new byte[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8)), "Era esperado nulo, mas " + result6252 + " <JSON.parseObject('null'.getBytes(StandardCharsets.UTF_8))> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0), "Era esperado nulo, mas " + result6253 + " <JSON.parseObject((byte[]) null, 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0), "Era esperado nulo, mas " + result6254 + " <JSON.parseObject(new byte[0], 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0))
nova chamada: assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0), "Era esperado nulo, mas " + result6255 + " <JSON.parseObject('abc'.getBytes(StandardCharsets.UTF_8), 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4))
nova chamada: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4), "Era esperado nulo, mas " + result6256 + " <JSON.parseObject('null'.getBytes(StandardCharsets.UTF_8), 0, 4)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.US_ASCII))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.US_ASCII), "Era esperado nulo, mas " + result6257 + " <JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.US_ASCII)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.US_ASCII))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.US_ASCII), "Era esperado nulo, mas " + result6258 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.US_ASCII)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0, StandardCharsets.US_ASCII))
nova chamada: assertNull(JSON.parseObject("abc".getBytes(StandardCharsets.UTF_8), 0, 0, StandardCharsets.US_ASCII), "Era esperado nulo, mas " + result6259 + " <JSON.parseObject('abc'.getBytes(StandardCharsets.UTF_8), 0, 0, StandardCharsets.US_ASCII)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4, StandardCharsets.US_ASCII))
nova chamada: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), 0, 4, StandardCharsets.US_ASCII), "Era esperado nulo, mas " + result6260 + " <JSON.parseObject('null'.getBytes(StandardCharsets.UTF_8), 0, 4, StandardCharsets.US_ASCII)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject((String) null, Object.class, (Filter) null), "Era esperado nulo, mas " + result6261 + " <JSON.parseObject((String) null, Object.class, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject("", Object.class, (Filter) null), "Era esperado nulo, mas " + result6262 + " <JSON.parseObject('', Object.class, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject("null", Object.class, (Filter) null), "Era esperado nulo, mas " + result6263 + " <JSON.parseObject('null', Object.class, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, Object.class))
nova chamada: assertNull(JSON.parseObject((String) null, Object.class), "Era esperado nulo, mas " + result6264 + " <JSON.parseObject((String) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class))
nova chamada: assertNull(JSON.parseObject("", Object.class), "Era esperado nulo, mas " + result6265 + " <JSON.parseObject('', Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Object.class))
nova chamada: assertNull(JSON.parseObject("null", Object.class), "Era esperado nulo, mas " + result6266 + " <JSON.parseObject('null', Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) Object.class))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) Object.class), "Era esperado nulo, mas " + result6267 + " <JSON.parseObject((String) null, (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (Type) Object.class))
nova chamada: assertNull(JSON.parseObject("", (Type) Object.class), "Era esperado nulo, mas " + result6268 + " <JSON.parseObject('', (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", (Type) Object.class))
nova chamada: assertNull(JSON.parseObject("null", (Type) Object.class), "Era esperado nulo, mas " + result6269 + " <JSON.parseObject('null', (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, 0, 0, Object.class))
nova chamada: assertNull(JSON.parseObject((String) null, 0, 0, Object.class), "Era esperado nulo, mas " + result6270 + " <JSON.parseObject((String) null, 0, 0, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", 0, 0, Object.class))
nova chamada: assertNull(JSON.parseObject("", 0, 0, Object.class), "Era esperado nulo, mas " + result6271 + " <JSON.parseObject('', 0, 0, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", 0, 0, Object.class))
nova chamada: assertNull(JSON.parseObject("null", 0, 0, Object.class), "Era esperado nulo, mas " + result6272 + " <JSON.parseObject('null', 0, 0, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject((String) null, Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6273 + " <JSON.parseObject((String) null, Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject("", Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6274 + " <JSON.parseObject('', Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject("null", Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6275 + " <JSON.parseObject('null', Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject((byte[]) null, Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6276 + " <JSON.parseObject((byte[]) null, Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject("".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject("".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6277 + " <JSON.parseObject(''.getBytes(StandardCharsets.UTF_8), Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]))
nova chamada: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, "", new Filter[0]), "Era esperado nulo, mas " + result6278 + " <JSON.parseObject('null'.getBytes(StandardCharsets.UTF_8), Object.class, '', new Filter[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, new TypeReference<List<Map>>() {
}, (Filter) null))
nova chamada: assertNull(JSON.parseObject((String) null, new TypeReference<List<Map>>() {
}, (Filter) null), "Era esperado nulo, mas " + result6279 + " <JSON.parseObject((String) null, new TypeReference<List<Map>>() {\n}, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", new TypeReference<List<Map>>() {
}, (Filter) null))
nova chamada: assertNull(JSON.parseObject("", new TypeReference<List<Map>>() {
}, (Filter) null), "Era esperado nulo, mas " + result6280 + " <JSON.parseObject('', new TypeReference<List<Map>>() {\n}, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null", new TypeReference<List<Map>>() {
}, (Filter) null))
nova chamada: assertNull(JSON.parseObject("null", new TypeReference<List<Map>>() {
}, (Filter) null), "Era esperado nulo, mas " + result6281 + " <JSON.parseObject('null', new TypeReference<List<Map>>() {\n}, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((byte[]) null, (Type) Object.class))
nova chamada: assertNull(JSON.parseArray((byte[]) null, (Type) Object.class), "Era esperado nulo, mas " + result6282 + " <JSON.parseArray((byte[]) null, (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new byte[0], (Type) Object.class))
nova chamada: assertNull(JSON.parseArray(new byte[0], (Type) Object.class), "Era esperado nulo, mas " + result6283 + " <JSON.parseArray(new byte[0], (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("null".getBytes(StandardCharsets.UTF_8), (Type) Object.class))
nova chamada: assertNull(JSON.parseArray("null".getBytes(StandardCharsets.UTF_8), (Type) Object.class), "Era esperado nulo, mas " + result6284 + " <JSON.parseArray('null'.getBytes(StandardCharsets.UTF_8), (Type) Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("null", new Type[0]))
nova chamada: assertNull(JSON.parseArray("null", new Type[0]), "Era esperado nulo, mas " + result6285 + " <JSON.parseArray('null', new Type[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject((byte[]) null, Object.class, (Filter) null), "Era esperado nulo, mas " + result6286 + " <JSON.parseObject((byte[]) null, Object.class, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject(new byte[0], Object.class, (Filter) null), "Era esperado nulo, mas " + result6287 + " <JSON.parseObject(new byte[0], Object.class, (Filter) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, (Filter) null))
nova chamada: assertNull(JSON.parseObject("null".getBytes(StandardCharsets.UTF_8), Object.class, (Filter) null), "Era esperado nulo, mas " + result6288 + " <JSON.parseObject('null'.getBytes(StandardCharsets.UTF_8), Object.class, (Filter) null)> não é nulo")
chamada antiga: assertEquals("null", JSON.toJSONString(null, JSONWriter.Feature.WriteNulls))
nova chamada: assertEquals("null", JSON.toJSONString(null, JSONWriter.Feature.WriteNulls), "Era esperado valores iguais, mas  'null' é diferente de " + result6289 + " <JSON.toJSONString(null, JSONWriter.Feature.WriteNulls)>")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("[1]", new String(out.toByteArray()))
nova chamada: assertEquals("[1]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("null", new String(out.toByteArray()))
nova chamada: assertEquals("null", new String(out.toByteArray()), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("[1]", new String(out.toByteArray()))
nova chamada: assertEquals("[1]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("[1]", new String(out.toByteArray()))
nova chamada: assertEquals("[1]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("[1]", new String(out.toByteArray()))
nova chamada: assertEquals("[1]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertEquals("[1][1]", new String(out.toByteArray()))
nova chamada: assertEquals("[1][1]", new String(out.toByteArray()), "Era esperado valores iguais, mas  '[1][1]' é diferente de " + " new String(out.toByteArray())")
chamada antiga: assertTrue((Boolean) JSON.parse("true"))
nova chamada: assertTrue((Boolean) JSON.parse("true"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(str, JSON.parse("\"" + str + "\""))
nova chamada: assertEquals(str, JSON.parse("\"" + str + "\""), "Era esperado valores iguais, mas  str é diferente de " + result6290 + " <JSON.parse('\'' + str + '\'')>")
chamada antiga: assertEquals(0, JSON.parse("0"))
nova chamada: assertEquals(0, JSON.parse("0"), "Era esperado valores iguais, mas  0 é diferente de " + result6291 + " <JSON.parse('0')>")
chamada antiga: assertNull(ObjectReaderImplList.INSTANCE.getFieldReader(0))
nova chamada: assertNull(ObjectReaderImplList.INSTANCE.getFieldReader(0), "Era esperado nulo, mas " + result6292 + " <ObjectReaderImplList.INSTANCE.getFieldReader(0)> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("@type"), ObjectReaderImplList.INSTANCE.getTypeKeyHash())
nova chamada: assertEquals(Fnv.hashCode64("@type"), ObjectReaderImplList.INSTANCE.getTypeKeyHash(), "Era esperado valores iguais, mas " + result6293 + " <Fnv.hashCode64('@type')> é diferente de " + result6294 + " <ObjectReaderImplList.INSTANCE.getTypeKeyHash()>")
chamada antiga: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<List<Integer>>() {
}.getType())).get(0))
nova chamada: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<List<Integer>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6295 + " <((List) JSON.parseObject('\'123\'', new TypeReference<List<Integer>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<LinkedList<Integer>>() {
}.getType())).get(0))
nova chamada: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<LinkedList<Integer>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6296 + " <((List) JSON.parseObject('\'123\'', new TypeReference<LinkedList<Integer>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<ArrayList<Integer>>() {
}.getType())).get(0))
nova chamada: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<ArrayList<Integer>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6297 + " <((List) JSON.parseObject('\'123\'', new TypeReference<ArrayList<Integer>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<AbstractList<Integer>>() {
}.getType())).get(0))
nova chamada: assertEquals(123, ((List) JSON.parseObject("\"123\"", new TypeReference<AbstractList<Integer>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6298 + " <((List) JSON.parseObject('\'123\'', new TypeReference<AbstractList<Integer>>() {\n}.getType())).get(0)>")
chamada antiga: assertNotNull(instance)
nova chamada: assertNotNull(instance, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<List<String>>() {
}.getType())).get(0))
nova chamada: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<List<String>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  '123' é diferente de " + result6299 + " <((List) JSON.parseObject('[\'123\']', new TypeReference<List<String>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<LinkedList<String>>() {
}.getType())).get(0))
nova chamada: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<LinkedList<String>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  '123' é diferente de " + result6300 + " <((List) JSON.parseObject('[\'123\']', new TypeReference<LinkedList<String>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<ArrayList<String>>() {
}.getType())).get(0))
nova chamada: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<ArrayList<String>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  '123' é diferente de " + result6301 + " <((List) JSON.parseObject('[\'123\']', new TypeReference<ArrayList<String>>() {\n}.getType())).get(0)>")
chamada antiga: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<AbstractList<String>>() {
}.getType())).get(0))
nova chamada: assertEquals("123", ((List) JSON.parseObject("[\"123\"]", new TypeReference<AbstractList<String>>() {
}.getType())).get(0), "Era esperado valores iguais, mas  '123' é diferente de " + result6302 + " <((List) JSON.parseObject('[\'123\']', new TypeReference<AbstractList<String>>() {\n}.getType())).get(0)>")
chamada antiga: assertNull(new ObjectReaderImplListStr(MyList.class, MyList.class).getFieldReader(0))
nova chamada: assertNull(new ObjectReaderImplListStr(MyList.class, MyList.class).getFieldReader(0), "Era esperado nulo, mas " + result6303 + " <new ObjectReaderImplListStr(MyList.class, MyList.class).getFieldReader(0)> não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(users)
nova chamada: assertNotNull(users, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, users.size())
nova chamada: assertEquals(1, users.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6304 + " <users.size()>")
chamada antiga: assertNotNull(user)
nova chamada: assertNotNull(user, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, user.id)
nova chamada: assertEquals(1, user.id, "Era esperado valores iguais, mas  1 é diferente de " + " user.id")
chamada antiga: assertEquals("kraity", user.name)
nova chamada: assertEquals("kraity", user.name, "Era esperado valores iguais, mas  'kraity' é diferente de " + " user.name")
chamada antiga: assertNull(JSON.parse(null))
nova chamada: assertNull(JSON.parse(null), "Era esperado nulo, mas " + result6305 + " <JSON.parse(null)> não é nulo")
chamada antiga: assertNull(JSON.parse((byte[]) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parse((byte[]) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6306 + " <JSON.parse((byte[]) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parse((String) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parse((String) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6307 + " <JSON.parse((String) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null))
nova chamada: assertNull(JSON.parseObject((String) null), "Era esperado nulo, mas " + result6308 + " <JSON.parseObject((String) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6309 + " <JSON.parseObject((String) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null))
nova chamada: assertNull(JSON.parseObject((byte[]) null), "Era esperado nulo, mas " + result6310 + " <JSON.parseObject((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6311 + " <JSON.parseObject((byte[]) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0]))
nova chamada: assertNull(JSON.parseObject(new byte[0]), "Era esperado nulo, mas " + result6312 + " <JSON.parseObject(new byte[0])> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject(new byte[0], JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6313 + " <JSON.parseObject(new byte[0], JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, User.class))
nova chamada: assertNull(JSON.parseObject((byte[]) null, User.class), "Era esperado nulo, mas " + result6314 + " <JSON.parseObject((byte[]) null, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, User.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, User.class, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6315 + " <JSON.parseObject((byte[]) null, User.class, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, (Type) User.class))
nova chamada: assertNull(JSON.parseObject((byte[]) null, (Type) User.class), "Era esperado nulo, mas " + result6316 + " <JSON.parseObject((byte[]) null, (Type) User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6317 + " <JSON.parseObject((byte[]) null, (Type) User.class, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, ""))
nova chamada: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, ""), "Era esperado nulo, mas " + result6318 + " <JSON.parseObject((byte[]) null, (Type) User.class, '')> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6319 + " <JSON.parseObject((byte[]) null, (Type) User.class, '', JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], (Type) User.class, ""))
nova chamada: assertNull(JSON.parseObject(new byte[0], (Type) User.class, ""), "Era esperado nulo, mas " + result6320 + " <JSON.parseObject(new byte[0], (Type) User.class, '')> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], (Type) User.class, "", JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject(new byte[0], (Type) User.class, "", JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6321 + " <JSON.parseObject(new byte[0], (Type) User.class, '', JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, (Type) User.class))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, (Type) User.class), "Era esperado nulo, mas " + result6322 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, (Type) User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new char[0], 0, 0, User.class))
nova chamada: assertNull(JSON.parseObject(new char[0], 0, 0, User.class), "Era esperado nulo, mas " + result6323 + " <JSON.parseObject(new char[0], 0, 0, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new char[0], 0, 0))
nova chamada: assertNull(JSON.parseObject(new char[0], 0, 0), "Era esperado nulo, mas " + result6324 + " <JSON.parseObject(new char[0], 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new char[0]))
nova chamada: assertNull(JSON.parseObject(new char[0]), "Era esperado nulo, mas " + result6325 + " <JSON.parseObject(new char[0])> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new char[0]))
nova chamada: assertNull(JSON.parseArray(new char[0]), "Era esperado nulo, mas " + result6326 + " <JSON.parseArray(new char[0])> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new char[0], User.class))
nova chamada: assertNull(JSON.parseArray(new char[0], User.class), "Era esperado nulo, mas " + result6327 + " <JSON.parseArray(new char[0], User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((char[]) null, 0, 0, User.class))
nova chamada: assertNull(JSON.parseObject((char[]) null, 0, 0, User.class), "Era esperado nulo, mas " + result6328 + " <JSON.parseObject((char[]) null, 0, 0, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((char[]) null, 0, 0))
nova chamada: assertNull(JSON.parseObject((char[]) null, 0, 0), "Era esperado nulo, mas " + result6329 + " <JSON.parseObject((char[]) null, 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((char[]) null))
nova chamada: assertNull(JSON.parseObject((char[]) null), "Era esperado nulo, mas " + result6330 + " <JSON.parseObject((char[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".toCharArray()))
nova chamada: assertNull(JSON.parseObject("null".toCharArray()), "Era esperado nulo, mas " + result6331 + " <JSON.parseObject('null'.toCharArray())> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".toCharArray(), User.class))
nova chamada: assertNull(JSON.parseObject("null".toCharArray(), User.class), "Era esperado nulo, mas " + result6332 + " <JSON.parseObject('null'.toCharArray(), User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((char[]) null, User.class))
nova chamada: assertNull(JSON.parseObject((char[]) null, User.class), "Era esperado nulo, mas " + result6333 + " <JSON.parseObject((char[]) null, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new char[0], User.class))
nova chamada: assertNull(JSON.parseObject(new char[0], User.class), "Era esperado nulo, mas " + result6334 + " <JSON.parseObject(new char[0], User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((char[]) null))
nova chamada: assertNull(JSON.parseArray((char[]) null), "Era esperado nulo, mas " + result6335 + " <JSON.parseArray((char[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((char[]) null, User.class))
nova chamada: assertNull(JSON.parseArray((char[]) null, User.class), "Era esperado nulo, mas " + result6336 + " <JSON.parseArray((char[]) null, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new char[0], User.class))
nova chamada: assertNull(JSON.parseArray(new char[0], User.class), "Era esperado nulo, mas " + result6337 + " <JSON.parseArray(new char[0], User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".toCharArray(), 0, "null".length()))
nova chamada: assertNull(JSON.parseObject("null".toCharArray(), 0, "null".length()), "Era esperado nulo, mas " + result6338 + " <JSON.parseObject('null'.toCharArray(), 0, 'null'.length())> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0, User.class))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0, User.class), "Era esperado nulo, mas " + result6339 + " <JSON.parseObject((byte[]) null, 0, 0, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0), "Era esperado nulo, mas " + result6340 + " <JSON.parseObject((byte[]) null, 0, 0)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null))
nova chamada: assertNull(JSON.parseObject((byte[]) null), "Era esperado nulo, mas " + result6341 + " <JSON.parseObject((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((byte[]) null))
nova chamada: assertNull(JSON.parseArray((byte[]) null), "Era esperado nulo, mas " + result6342 + " <JSON.parseArray((byte[]) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((byte[]) null, User.class))
nova chamada: assertNull(JSON.parseArray((byte[]) null, User.class), "Era esperado nulo, mas " + result6343 + " <JSON.parseArray((byte[]) null, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((URL) null))
nova chamada: assertNull(JSON.parseArray((URL) null), "Era esperado nulo, mas " + result6344 + " <JSON.parseArray((URL) null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, User.class, JSONFactory.createReadContext()))
nova chamada: assertNull(JSON.parseObject((byte[]) null, User.class, JSONFactory.createReadContext()), "Era esperado nulo, mas " + result6345 + " <JSON.parseObject((byte[]) null, User.class, JSONFactory.createReadContext())> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], User.class, JSONFactory.createReadContext()))
nova chamada: assertNull(JSON.parseObject(new byte[0], User.class, JSONFactory.createReadContext()), "Era esperado nulo, mas " + result6346 + " <JSON.parseObject(new byte[0], User.class, JSONFactory.createReadContext())> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6347 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6348 + " <JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new ByteArrayInputStream("null".getBytes()), StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseObject(new ByteArrayInputStream("null".getBytes()), StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6349 + " <JSON.parseObject(new ByteArrayInputStream('null'.getBytes()), StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("null".getBytes(), JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseObject("null".getBytes(), JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6350 + " <JSON.parseObject('null'.getBytes(), JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new ByteArrayInputStream("null".getBytes()), JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseArray(new ByteArrayInputStream("null".getBytes()), JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6351 + " <JSON.parseArray(new ByteArrayInputStream('null'.getBytes()), JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("", (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseArray("", (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6352 + " <JSON.parseArray('', (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((String) null, (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseArray((String) null, (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6353 + " <JSON.parseArray((String) null, (Type) User.class, JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable))
nova chamada: assertNull(JSON.parseArray((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable), "Era esperado nulo, mas " + result6354 + " <JSON.parseArray((byte[]) null, 0, 0, StandardCharsets.UTF_8, User.class, JSONReader.Feature.IgnoreNoneSerializable)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6355 + " <JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(null, 0, 0, StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseArray(null, 0, 0, StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6356 + " <JSON.parseArray(null, 0, 0, StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8, User.class))
nova chamada: assertNull(JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8, User.class), "Era esperado nulo, mas " + result6357 + " <JSON.parseObject(null, 0, 0, StandardCharsets.UTF_8, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6358 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(new byte[0], 0, 0, StandardCharsets.UTF_8))
nova chamada: assertNull(JSON.parseArray(new byte[0], 0, 0, StandardCharsets.UTF_8), "Era esperado nulo, mas " + result6359 + " <JSON.parseArray(new byte[0], 0, 0, StandardCharsets.UTF_8)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class), "Era esperado nulo, mas " + result6360 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, User.class))
nova chamada: assertNull(JSON.parseObject((String) null, User.class), "Era esperado nulo, mas " + result6361 + " <JSON.parseObject((String) null, User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, User.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, User.class, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6362 + " <JSON.parseObject((String) null, User.class, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) User.class))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) User.class), "Era esperado nulo, mas " + result6363 + " <JSON.parseObject((String) null, (Type) User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) User.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) User.class, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6364 + " <JSON.parseObject((String) null, (Type) User.class, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, User.class, ""))
nova chamada: assertNull(JSON.parseObject((String) null, User.class, ""), "Era esperado nulo, mas " + result6365 + " <JSON.parseObject((String) null, User.class, '')> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, User.class, "", JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, User.class, "", JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6366 + " <JSON.parseObject((String) null, User.class, '', JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) User.class, ""))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) User.class, ""), "Era esperado nulo, mas " + result6367 + " <JSON.parseObject((String) null, (Type) User.class, '')> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) User.class, "", JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6368 + " <JSON.parseObject((String) null, (Type) User.class, '', JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}))
nova chamada: assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}), "Era esperado nulo, mas " + result6369 + " <JSON.parseObject((String) null, new TypeReference<List<User>>() {\n})> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, new TypeReference<List<User>>() {
}, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6370 + " <JSON.parseObject((String) null, new TypeReference<List<User>>() {\n}, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((String) null))
nova chamada: assertNull(JSON.parseArray((String) null), "Era esperado nulo, mas " + result6371 + " <JSON.parseArray((String) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6372 + " <JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray(""))
nova chamada: assertNull(JSON.parseArray(""), "Era esperado nulo, mas " + result6373 + " <JSON.parseArray('')> não é nulo")
chamada antiga: assertNull(JSON.parseArray("", JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray("", JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6374 + " <JSON.parseArray('', JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((String) null))
nova chamada: assertNull(JSON.parseArray((String) null), "Era esperado nulo, mas " + result6375 + " <JSON.parseArray((String) null)> não é nulo")
chamada antiga: assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6376 + " <JSON.parseArray((String) null, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("", User.class))
nova chamada: assertNull(JSON.parseArray("", User.class), "Era esperado nulo, mas " + result6377 + " <JSON.parseArray('', User.class)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("", User.class, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray("", User.class, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6378 + " <JSON.parseArray('', User.class, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseArray("", new Type[] { User.class }, JSONReader.Feature.SupportAutoType))
nova chamada: assertNull(JSON.parseArray("", new Type[] { User.class }, JSONReader.Feature.SupportAutoType), "Era esperado nulo, mas " + result6379 + " <JSON.parseArray('', new Type[] { User.class }, JSONReader.Feature.SupportAutoType)> não é nulo")
chamada antiga: assertEquals("null", JSON.toJSONString(null, (Filter) null))
nova chamada: assertEquals("null", JSON.toJSONString(null, (Filter) null), "Era esperado valores iguais, mas  'null' é diferente de " + result6380 + " <JSON.toJSONString(null, (Filter) null)>")
chamada antiga: assertEquals("null", JSON.toJSONString(null, (Filter[]) null))
nova chamada: assertEquals("null", JSON.toJSONString(null, (Filter[]) null), "Era esperado valores iguais, mas  'null' é diferente de " + result6381 + " <JSON.toJSONString(null, (Filter[]) null)>")
chamada antiga: assertEquals("null", JSON.toJSONString(null, ""))
nova chamada: assertEquals("null", JSON.toJSONString(null, ""), "Era esperado valores iguais, mas  'null' é diferente de " + result6382 + " <JSON.toJSONString(null, '')>")
chamada antiga: assertEquals("null", JSON.toJSONString(null, "", (Filter[]) null))
nova chamada: assertEquals("null", JSON.toJSONString(null, "", (Filter[]) null), "Era esperado valores iguais, mas  'null' é diferente de " + result6383 + " <JSON.toJSONString(null, '', (Filter[]) null)>")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter) null)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter) null)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, (Filter) null))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, (Filter[]) null))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null, JSONWriter.Feature.WriteNulls)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, (Filter[]) null, JSONWriter.Feature.WriteNulls)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, (Filter[]) null, JSONWriter.Feature.WriteNulls))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, "", (Filter[]) null)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, "", (Filter[]) null)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, '', (Filter[]) null))")
chamada antiga: assertNull(JSON.toJSON(null))
nova chamada: assertNull(JSON.toJSON(null), "Era esperado nulo, mas " + result6384 + " <JSON.toJSON(null)> não é nulo")
chamada antiga: assertNull(JSON.toJavaObject(null, null))
nova chamada: assertNull(JSON.toJavaObject(null, null), "Era esperado nulo, mas " + result6385 + " <JSON.toJavaObject(null, null)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((URL) null))
nova chamada: assertNull(JSON.parseObject((URL) null), "Era esperado nulo, mas " + result6386 + " <JSON.parseObject((URL) null)> não é nulo")
chamada antiga: assertSame(object, JSON.toJSON(object))
nova chamada: assertSame(object, JSON.toJSON(object), "Era esperado objetos iguais, mas  object é diferente de " + result6387 + " <JSON.toJSON(object)>")
chamada antiga: assertSame(array, JSON.toJSON(array))
nova chamada: assertSame(array, JSON.toJSON(array), "Era esperado objetos iguais, mas  array é diferente de " + result6388 + " <JSON.toJSON(array)>")
chamada antiga: assertEquals(1, JSON.toJSON(1))
nova chamada: assertEquals(1, JSON.toJSON(1), "Era esperado valores iguais, mas  1 é diferente de " + result6389 + " <JSON.toJSON(1)>")
chamada antiga: assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6390 + " <JSON.isValidArray('[]'.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, utf8))
nova chamada: assertNull(JSON.parseObject((InputStream) null, utf8), "Era esperado nulo, mas " + result6391 + " <JSON.parseObject((InputStream) null, utf8)> não é nulo")
chamada antiga: assertEquals(0, object.size())
nova chamada: assertEquals(0, object.size(), "Era esperado valores iguais, mas  0 é diferente de " + result6392 + " <object.size()>")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result6393 + " <map.isEmpty()> é falso")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result6394 + " <map.isEmpty()> é falso")
chamada antiga: assertNotNull(map)
nova chamada: assertNotNull(map, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(map.isEmpty())
nova chamada: assertTrue(map.isEmpty(), "Era esperado verdadeiro, mas " + result6395 + " <map.isEmpty()> é falso")
chamada antiga: assertEquals("{\"dates\":[\"022022\"]}", str)
nova chamada: assertEquals("{\"dates\":[\"022022\"]}", str, "Era esperado valores iguais, mas  '{\'dates\':[\'022022\']}' é diferente de " + " str")
chamada antiga: assertEquals(1, bean1.dates.size())
nova chamada: assertEquals(1, bean1.dates.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6396 + " <bean1.dates.size()>")
chamada antiga: assertEquals(2022, instance.get(Calendar.YEAR))
nova chamada: assertEquals(2022, instance.get(Calendar.YEAR), "Era esperado valores iguais, mas  2022 é diferente de " + result6397 + " <instance.get(Calendar.YEAR)>")
chamada antiga: assertEquals(1, instance.get(Calendar.MONTH))
nova chamada: assertEquals(1, instance.get(Calendar.MONTH), "Era esperado valores iguais, mas  1 é diferente de " + result6398 + " <instance.get(Calendar.MONTH)>")
chamada antiga: assertEquals("{\"dates\":null}", str)
nova chamada: assertEquals("{\"dates\":null}", str, "Era esperado valores iguais, mas  '{\'dates\':null}' é diferente de " + " str")
chamada antiga: assertEquals("{\"dates\":null}", str)
nova chamada: assertEquals("{\"dates\":null}", str, "Era esperado valores iguais, mas  '{\'dates\':null}' é diferente de " + " str")
chamada antiga: assertEquals("{\"date\":\"1970-01-01 00:00:00\"}", jw.toString())
nova chamada: assertEquals("{\"date\":\"1970-01-01 00:00:00\"}", jw.toString(), "Era esperado valores iguais, mas  '{\'date\':\'1970-01-01 00:00:00\'}' é diferente de " + result6399 + " <jw.toString()>")
chamada antiga: assertEquals("[null]", JSON.toJSONString(dates))
nova chamada: assertEquals("[null]", JSON.toJSONString(dates), "Era esperado valores iguais, mas  '[null]' é diferente de " + result6400 + " <JSON.toJSONString(dates)>")
chamada antiga: assertEquals(date.getDate(), bean2.getDate())
nova chamada: assertEquals(date.getDate(), bean2.getDate(), "Era esperado valores iguais, mas " + result6401 + " <date.getDate()> é diferente de " + result6402 + " <bean2.getDate()>")
chamada antiga: assertEquals("\"1970-01-01 00:00:00\"", jw.toString())
nova chamada: assertEquals("\"1970-01-01 00:00:00\"", jw.toString(), "Era esperado valores iguais, mas  '\'1970-01-01 00:00:00\'' é diferente de " + result6403 + " <jw.toString()>")
chamada antiga: assertEquals("\"1970-01-01T00:00:00Z\"", jw.toString())
nova chamada: assertEquals("\"1970-01-01T00:00:00Z\"", jw.toString(), "Era esperado valores iguais, mas  '\'1970-01-01T00:00:00Z\'' é diferente de " + result6404 + " <jw.toString()>")
chamada antiga: assertEquals("\"1970-01-01T00:00Z\"", jw.toString())
nova chamada: assertEquals("\"1970-01-01T00:00Z\"", jw.toString(), "Era esperado valores iguais, mas  '\'1970-01-01T00:00Z\'' é diferente de " + result6405 + " <jw.toString()>")
chamada antiga: assertEquals("\"1970-01-01 00:00:00\"", jw.toString())
nova chamada: assertEquals("\"1970-01-01 00:00:00\"", jw.toString(), "Era esperado valores iguais, mas  '\'1970-01-01 00:00:00\'' é diferente de " + result6406 + " <jw.toString()>")
chamada antiga: assertEquals("\"1970-01-01\"", jw.toString())
nova chamada: assertEquals("\"1970-01-01\"", jw.toString(), "Era esperado valores iguais, mas  '\'1970-01-01\'' é diferente de " + result6407 + " <jw.toString()>")
chamada antiga: assertEquals("\"12:13:14\"", jw.toString())
nova chamada: assertEquals("\"12:13:14\"", jw.toString(), "Era esperado valores iguais, mas  '\'12:13:14\'' é diferente de " + result6408 + " <jw.toString()>")
chamada antiga: assertEquals("\"12:13:14\"", jw.toString())
nova chamada: assertEquals("\"12:13:14\"", jw.toString(), "Era esperado valores iguais, mas  '\'12:13:14\'' é diferente de " + result6409 + " <jw.toString()>")
chamada antiga: assertEquals("\"" + zoneId + "\"", jw.toString())
nova chamada: assertEquals("\"" + zoneId + "\"", jw.toString(), "Era esperado valores iguais, mas  '\'' + zoneId + '\'' é diferente de " + result6410 + " <jw.toString()>")
chamada antiga: assertEquals("\"" + timeZone.getID() + "\"", jw.toString())
nova chamada: assertEquals("\"" + timeZone.getID() + "\"", jw.toString(), "Era esperado valores iguais, mas  '\'' + timeZone.getID() + '\'' é diferente de " + result6411 + " <jw.toString()>")
chamada antiga: assertNull(JSON.copyTo(null, HashMap.class))
nova chamada: assertNull(JSON.copyTo(null, HashMap.class), "Era esperado nulo, mas " + result6412 + " <JSON.copyTo(null, HashMap.class)> não é nulo")
chamada antiga: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.FieldBased))
nova chamada: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.FieldBased), "Era esperado nulo, mas " + result6413 + " <JSON.copyTo(null, HashMap.class, JSONWriter.Feature.FieldBased)> não é nulo")
chamada antiga: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray))
nova chamada: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray), "Era esperado nulo, mas " + result6414 + " <JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray)> não é nulo")
chamada antiga: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection))
nova chamada: assertNull(JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection), "Era esperado nulo, mas " + result6415 + " <JSON.copyTo(null, HashMap.class, JSONWriter.Feature.BeanToArray, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection)> não é nulo")
chamada antiga: assertEquals(map.get("id"), object.get("id"))
nova chamada: assertEquals(map.get("id"), object.get("id"), "Era esperado valores iguais, mas " + result6416 + " <map.get('id')> é diferente de " + result6417 + " <object.get('id')>")
chamada antiga: assertEquals(map1.get("id"), object.get("id"))
nova chamada: assertEquals(map1.get("id"), object.get("id"), "Era esperado valores iguais, mas " + result6418 + " <map1.get('id')> é diferente de " + result6419 + " <object.get('id')>")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6420 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6421 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6422 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6423 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6424 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6425 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId3"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId3"), "Era esperado não nulo, mas " + result6426 + " <objectReader.getFieldReader('userId3')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")), "Era esperado não nulo, mas " + result6427 + " <objectReader.getFieldReader(Fnv.hashCode64('userId3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")), "Era esperado não nulo, mas " + result6428 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid3'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6429 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6430 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6431 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]' é diferente de " + result6432 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0],[101,0,0],[201,202,0],[301,302,303],[401,402,403],[501,502,503],[601,602,603]]' é diferente de " + result6433 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(123L, bean.value)
nova chamada: assertEquals(123L, bean.value, "Era esperado valores iguais, mas  123L é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101L é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201L é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123L é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals((short) 123, bean.value)
nova chamada: assertEquals((short) 123, bean.value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals((short) 101, bean.value)
nova chamada: assertEquals((short) 101, bean.value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 101, bean.value)
nova chamada: assertEquals((short) 101, bean.value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 102, bean.value)
nova chamada: assertEquals((short) 102, bean.value, "Era esperado valores iguais, mas  (short) 102 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals((short) 201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  (short) 201 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6434 + " <bean.value.getTime()>")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
nova chamada: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")), "Era esperado não nulo, mas " + result6435 + " <fieldReader.getObjectReader(JSONReader.of(''))> é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6436 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6437 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6438 + " <objectReader.readObject(JSONReader.of('{\'value\':\'2017-07-03 12:13:14\'}'), 0).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6439 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03 12:13:14\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6440 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
nova chamada: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6441 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6442 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6443 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'20170703121314000+0800\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6444 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03T12:13:14\'}')).value.getTime()>")
chamada antiga: assertEquals(123F, bean.value)
nova chamada: assertEquals(123F, bean.value, "Era esperado valores iguais, mas  123F é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(12.34F, ((Float) fieldValue).floatValue())
nova chamada: assertEquals(12.34F, ((Float) fieldValue).floatValue(), "Era esperado valores iguais, mas  12.34F é diferente de " + result6445 + " <((Float) fieldValue).floatValue()>")
chamada antiga: assertEquals(123L, bean.data)
nova chamada: assertEquals(123L, bean.data, "Era esperado valores iguais, mas  123L é diferente de " + " bean.data")
chamada antiga: assertEquals(1, LongReader.INSTANCE.count.get())
nova chamada: assertEquals(1, LongReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result6446 + " <LongReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(123L, bean.data)
nova chamada: assertEquals(123L, bean.data, "Era esperado valores iguais, mas  123L é diferente de " + " bean.data")
chamada antiga: assertEquals(1, LongReader.INSTANCE.count.get())
nova chamada: assertEquals(1, LongReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result6447 + " <LongReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(123L, bean.data)
nova chamada: assertEquals(123L, bean.data, "Era esperado valores iguais, mas  123L é diferente de " + " bean.data")
chamada antiga: assertEquals(1, LongReader.INSTANCE.count.get())
nova chamada: assertEquals(1, LongReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result6448 + " <LongReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(123L, bean.data)
nova chamada: assertEquals(123L, bean.data, "Era esperado valores iguais, mas  123L é diferente de " + " bean.data")
chamada antiga: assertEquals(1, LongReader.INSTANCE.count.get())
nova chamada: assertEquals(1, LongReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result6449 + " <LongReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(BigInteger.valueOf(123), bean.data)
nova chamada: assertEquals(BigInteger.valueOf(123), bean.data, "Era esperado valores iguais, mas " + result6450 + " <BigInteger.valueOf(123)> é diferente de " + " bean.data")
chamada antiga: assertEquals(1, BigIntegerReader.INSTANCE.count.get())
nova chamada: assertEquals(1, BigIntegerReader.INSTANCE.count.get(), "Era esperado valores iguais, mas  1 é diferente de " + result6451 + " <BigIntegerReader.INSTANCE.count.get()>")
chamada antiga: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0))
nova chamada: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6452 + " <JSON.parseObject(str, Bean.class).value.get(0)>")
chamada antiga: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0))
nova chamada: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6453 + " <JSON.parseObject(str).to(Bean.class).value.get(0)>")
chamada antiga: assertEquals("getValue", fieldReader.toString())
nova chamada: assertEquals("getValue", fieldReader.toString(), "Era esperado valores iguais, mas  'getValue' é diferente de " + result6454 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6455 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(123, bean1.value.get(0))
nova chamada: assertEquals(123, bean1.value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6456 + " <bean1.value.get(0)>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(0, bean1.value.get(0))
nova chamada: assertEquals(0, bean1.value.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result6457 + " <bean1.value.get(0)>")
chamada antiga: assertEquals(new BigDecimal("123"), bean.value)
nova chamada: assertEquals(new BigDecimal("123"), bean.value, "Era esperado valores iguais, mas  new BigDecimal('123') é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(new BigDecimal("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(new BigDecimal("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  new BigDecimal('101') é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(new BigDecimal("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(new BigDecimal("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  new BigDecimal('201') é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(123, JSON.parseObject(str, Bean.class).value.get())
nova chamada: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6458 + " <JSON.parseObject(str, Bean.class).value.get()>")
chamada antiga: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get())
nova chamada: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6459 + " <JSON.parseObject(str).to(Bean.class).value.get()>")
chamada antiga: assertEquals("getValue", fieldReader.toString())
nova chamada: assertEquals("getValue", fieldReader.toString(), "Era esperado valores iguais, mas  'getValue' é diferente de " + result6460 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6461 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(123, bean1.value.get())
nova chamada: assertEquals(123, bean1.value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6462 + " <bean1.value.get()>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(0, bean1.value.get())
nova chamada: assertEquals(0, bean1.value.get(), "Era esperado valores iguais, mas  0 é diferente de " + result6463 + " <bean1.value.get()>")
chamada antiga: assertNotNull(exception)
nova chamada: assertNotNull(exception, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("xx", exception.getMessage())
nova chamada: assertEquals("xx", exception.getMessage(), "Era esperado valores iguais, mas  'xx' é diferente de " + result6464 + " <exception.getMessage()>")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123D, bean.value)
nova chamada: assertEquals(123D, bean.value, "Era esperado valores iguais, mas  123D é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101D, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101D, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101D é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201D é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201D, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201D é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Long.class, fieldReader.getItemType())
nova chamada: assertEquals(Long.class, fieldReader.getItemType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result6465 + " <fieldReader.getItemType()>")
chamada antiga: assertEquals(123L, bean.values.get(0))
nova chamada: assertEquals(123L, bean.values.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result6466 + " <bean.values.get(0)>")
chamada antiga: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
nova chamada: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result6467 + " <objectReader.readObject(JSONReader.of('{\'values\':[101]}'), 0).values.get(0)>")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Long.class, fieldReader.getItemType())
nova chamada: assertEquals(Long.class, fieldReader.getItemType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result6468 + " <fieldReader.getItemType()>")
chamada antiga: assertEquals(123L, bean.values.get(0))
nova chamada: assertEquals(123L, bean.values.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result6469 + " <bean.values.get(0)>")
chamada antiga: assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1))
nova chamada: assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1), "Era esperado valores iguais, mas  102L é diferente de " + result6470 + " <objectReader.readObject(JSONReader.of('{\'id\':123,\'values\':[101,102]}'), 0).values.get(1)>")
chamada antiga: assertEquals(101L, bean1.values.get(0))
nova chamada: assertEquals(101L, bean1.values.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result6471 + " <bean1.values.get(0)>")
chamada antiga: assertEquals(102L, bean1.values.get(1))
nova chamada: assertEquals(102L, bean1.values.get(1), "Era esperado valores iguais, mas  102L é diferente de " + result6472 + " <bean1.values.get(1)>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6473 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6474 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6475 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6476 + " <bean.date.getTime()>")
chamada antiga: assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplDate.INSTANCE é diferente de " + result6477 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6478 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6479 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6480 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6481 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6482 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6483 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6484 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6485 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6486 + " <bean.date.getTime()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.getTime())
nova chamada: assertEquals(epochMilli, bean.date.getTime(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6487 + " <bean.date.getTime()>")
chamada antiga: assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplDate.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplDate.INSTANCE é diferente de " + result6488 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6489 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6490 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6491 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6492 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6493 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6494 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6495 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6496 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6497 + " <bean.toMillis(zoneId)>")
chamada antiga: assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplLocalDateTime.INSTANCE é diferente de " + result6498 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6499 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6500 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6501 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6502 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6503 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6504 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6505 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6506 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6507 + " <bean.toMillis(zoneId)>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.toMillis(zoneId))
nova chamada: assertEquals(epochMilli, bean.toMillis(zoneId), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6508 + " <bean.toMillis(zoneId)>")
chamada antiga: assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplLocalDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplLocalDateTime.INSTANCE é diferente de " + result6509 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6510 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6511 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6512 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6513 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6514 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6515 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6516 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6517 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6518 + " <bean.date.toEpochMilli()>")
chamada antiga: assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplInstant.INSTANCE é diferente de " + result6519 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6520 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6521 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6522 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6523 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6524 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6525 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6526 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6527 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6528 + " <bean.date.toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6529 + " <bean.date.toEpochMilli()>")
chamada antiga: assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplInstant.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplInstant.INSTANCE é diferente de " + result6530 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6531 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6532 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6533 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6534 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6535 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6536 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6537 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6538 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6539 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6540 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplZonedDateTime.INSTANCE é diferente de " + result6541 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6542 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6543 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6544 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6545 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6546 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6547 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6548 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6549 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6550 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli())
nova chamada: assertEquals(epochMilli, bean.date.toInstant().toEpochMilli(), "Era esperado valores iguais, mas  epochMilli é diferente de " + result6551 + " <bean.date.toInstant().toEpochMilli()>")
chamada antiga: assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()))
nova chamada: assertSame(ObjectReaderImplZonedDateTime.INSTANCE, fieldReader.getObjectReader(JSONFactory.createReadContext()), "Era esperado objetos iguais, mas  ObjectReaderImplZonedDateTime.INSTANCE é diferente de " + result6552 + " <fieldReader.getObjectReader(JSONFactory.createReadContext())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(instant))
nova chamada: assertEquals(bean.date, fieldReader.apply(instant), "Era esperado valores iguais, mas  bean.date é diferente de " + result6553 + " <fieldReader.apply(instant)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(epochMilli))
nova chamada: assertEquals(bean.date, fieldReader.apply(epochMilli), "Era esperado valores iguais, mas  bean.date é diferente de " + result6554 + " <fieldReader.apply(epochMilli)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt), "Era esperado valores iguais, mas  bean.date é diferente de " + result6555 + " <fieldReader.apply(zdt)>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()))
nova chamada: assertEquals(bean.date, fieldReader.apply(zdt.toLocalDateTime()), "Era esperado valores iguais, mas  bean.date é diferente de " + result6556 + " <fieldReader.apply(zdt.toLocalDateTime())>")
chamada antiga: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)))
nova chamada: assertEquals(bean.date, fieldReader.apply(new Date(epochMilli)), "Era esperado valores iguais, mas  bean.date é diferente de " + result6557 + " <fieldReader.apply(new Date(epochMilli))>")
chamada antiga: assertEquals(123F, bean.value)
nova chamada: assertEquals(123F, bean.value, "Era esperado valores iguais, mas  123F é diferente de " + " bean.value")
chamada antiga: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123F é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6558 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6559 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6560 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6561 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6562 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6563 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6564 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6565 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6566 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(101, bean.userId1)
nova chamada: assertEquals(101, bean.userId1, "Era esperado valores iguais, mas  101 é diferente de " + " bean.userId1")
chamada antiga: assertEquals(102, bean.userId2)
nova chamada: assertEquals(102, bean.userId2, "Era esperado valores iguais, mas  102 é diferente de " + " bean.userId2")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0],[101,0],[102,103],[104,105],[107,108]]' é diferente de " + result6567 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0],[101,0],[102,103],[104,105],[107,108]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0],[101,0],[102,103],[104,105],[107,108]]' é diferente de " + result6568 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106), JSONArray.of(107, 108, 109)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(new BigDecimal("123"), bean.value)
nova chamada: assertEquals(new BigDecimal("123"), bean.value, "Era esperado valores iguais, mas  new BigDecimal('123') é diferente de " + " bean.value")
chamada antiga: assertEquals(0xff000000, color.getRGB())
nova chamada: assertEquals(0xff000000, color.getRGB(), "Era esperado valores iguais, mas  0xff000000 é diferente de " + result6569 + " <color.getRGB()>")
chamada antiga: assertEquals(123L, fieldReader.readFieldValue(JSONReader.of("123")))
nova chamada: assertEquals(123L, fieldReader.readFieldValue(JSONReader.of("123")), "Era esperado valores iguais, mas  123L é diferente de " + result6570 + " <fieldReader.readFieldValue(JSONReader.of('123'))>")
chamada antiga: assertTrue(bean2.value)
nova chamada: assertTrue(bean2.value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals('A', bean.value)
nova chamada: assertEquals('A', bean.value, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.value")
chamada antiga: assertEquals(12.34F, bean.value)
nova chamada: assertEquals(12.34F, bean.value, "Era esperado valores iguais, mas  12.34F é diferente de " + " bean.value")
chamada antiga: assertEquals("12.34", bean.value)
nova chamada: assertEquals("12.34", bean.value, "Era esperado valores iguais, mas  '12.34' é diferente de " + " bean.value")
chamada antiga: assertEquals("12.34", bean.value)
nova chamada: assertEquals("12.34", bean.value, "Era esperado valores iguais, mas  '12.34' é diferente de " + " bean.value")
chamada antiga: assertEquals("12.34", bean.value)
nova chamada: assertEquals("12.34", bean.value, "Era esperado valores iguais, mas  '12.34' é diferente de " + " bean.value")
chamada antiga: assertEquals(2, bean.values.size())
nova chamada: assertEquals(2, bean.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6571 + " <bean.values.size()>")
chamada antiga: assertEquals("12", bean.values.get(0))
nova chamada: assertEquals("12", bean.values.get(0), "Era esperado valores iguais, mas  '12' é diferente de " + result6572 + " <bean.values.get(0)>")
chamada antiga: assertEquals("34", bean.values.get(1))
nova chamada: assertEquals("34", bean.values.get(1), "Era esperado valores iguais, mas  '34' é diferente de " + result6573 + " <bean.values.get(1)>")
chamada antiga: assertEquals(2, bean.values.size())
nova chamada: assertEquals(2, bean.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6574 + " <bean.values.size()>")
chamada antiga: assertEquals("12", bean.values.get(0))
nova chamada: assertEquals("12", bean.values.get(0), "Era esperado valores iguais, mas  '12' é diferente de " + result6575 + " <bean.values.get(0)>")
chamada antiga: assertEquals("34", bean.values.get(1))
nova chamada: assertEquals("34", bean.values.get(1), "Era esperado valores iguais, mas  '34' é diferente de " + result6576 + " <bean.values.get(1)>")
chamada antiga: assertEquals(2, bean.values.size())
nova chamada: assertEquals(2, bean.values.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6577 + " <bean.values.size()>")
chamada antiga: assertEquals("12", bean.values.get(0))
nova chamada: assertEquals("12", bean.values.get(0), "Era esperado valores iguais, mas  '12' é diferente de " + result6578 + " <bean.values.get(0)>")
chamada antiga: assertEquals("34", bean.values.get(1))
nova chamada: assertEquals("34", bean.values.get(1), "Era esperado valores iguais, mas  '34' é diferente de " + result6579 + " <bean.values.get(1)>")
chamada antiga: assertEquals("123", bean.value)
nova chamada: assertEquals("123", bean.value, "Era esperado valores iguais, mas  '123' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  '101' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
nova chamada: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value, "Era esperado valores iguais, mas  'AB' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'AB\'}'), 0).value")
chamada antiga: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  '123' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
nova chamada: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value, "Era esperado valores iguais, mas  'abc' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\' abc \'}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123L, bean.value)
nova chamada: assertEquals(123L, bean.value, "Era esperado valores iguais, mas  123L é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101L é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201L é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201L, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201L é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123L é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(true, JSON.parseObject(str, Bean.class).value.get())
nova chamada: assertEquals(true, JSON.parseObject(str, Bean.class).value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6580 + " <JSON.parseObject(str, Bean.class).value.get()>")
chamada antiga: assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get())
nova chamada: assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6581 + " <JSON.parseObject(str).to(Bean.class).value.get()>")
chamada antiga: assertEquals("getValue", fieldReader.toString())
nova chamada: assertEquals("getValue", fieldReader.toString(), "Era esperado valores iguais, mas  'getValue' é diferente de " + result6582 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6583 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(true, bean1.value.get())
nova chamada: assertEquals(true, bean1.value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6584 + " <bean1.value.get()>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(false, bean1.value.get())
nova chamada: assertEquals(false, bean1.value.get(), "Era esperado valores iguais, mas  false é diferente de " + result6585 + " <bean1.value.get()>")
chamada antiga: assertEquals(123, JSON.parseObject(str, Bean.class).value.get())
nova chamada: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6586 + " <JSON.parseObject(str, Bean.class).value.get()>")
chamada antiga: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get())
nova chamada: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6587 + " <JSON.parseObject(str).to(Bean.class).value.get()>")
chamada antiga: assertEquals("getValue", fieldReader.toString())
nova chamada: assertEquals("getValue", fieldReader.toString(), "Era esperado valores iguais, mas  'getValue' é diferente de " + result6588 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6589 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(123, bean1.value.get())
nova chamada: assertEquals(123, bean1.value.get(), "Era esperado valores iguais, mas  123 é diferente de " + result6590 + " <bean1.value.get()>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(0, bean1.value.get())
nova chamada: assertEquals(0, bean1.value.get(), "Era esperado valores iguais, mas  0 é diferente de " + result6591 + " <bean1.value.get()>")
chamada antiga: assertEquals(123F, bean.value)
nova chamada: assertEquals(123F, bean.value, "Era esperado valores iguais, mas  123F é diferente de " + " bean.value")
chamada antiga: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123F, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123F é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123D, bean.value)
nova chamada: assertEquals(123D, bean.value, "Era esperado valores iguais, mas  123D é diferente de " + " bean.value")
chamada antiga: assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123D é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6592 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6593 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6594 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6595 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6596 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6597 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId3"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId3"), "Era esperado não nulo, mas " + result6598 + " <objectReader.getFieldReader('userId3')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")), "Era esperado não nulo, mas " + result6599 + " <objectReader.getFieldReader(Fnv.hashCode64('userId3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")), "Era esperado não nulo, mas " + result6600 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId4"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId4"), "Era esperado não nulo, mas " + result6601 + " <objectReader.getFieldReader('userId4')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")), "Era esperado não nulo, mas " + result6602 + " <objectReader.getFieldReader(Fnv.hashCode64('userId4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")), "Era esperado não nulo, mas " + result6603 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId5"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId5"), "Era esperado não nulo, mas " + result6604 + " <objectReader.getFieldReader('userId5')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")), "Era esperado não nulo, mas " + result6605 + " <objectReader.getFieldReader(Fnv.hashCode64('userId5'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")), "Era esperado não nulo, mas " + result6606 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid5'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId6"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId6"), "Era esperado não nulo, mas " + result6607 + " <objectReader.getFieldReader('userId6')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")), "Era esperado não nulo, mas " + result6608 + " <objectReader.getFieldReader(Fnv.hashCode64('userId6'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")), "Era esperado não nulo, mas " + result6609 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid6'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId7"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId7"), "Era esperado não nulo, mas " + result6610 + " <objectReader.getFieldReader('userId7')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId7")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId7")), "Era esperado não nulo, mas " + result6611 + " <objectReader.getFieldReader(Fnv.hashCode64('userId7'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid7")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid7")), "Era esperado não nulo, mas " + result6612 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid7'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6613 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6614 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6615 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[' + '[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0],' + '[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0],' + '[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0],' + '[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207],' + '[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]' + ']' é diferente de " + result6616 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[" + "[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0]," + "[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0]," + "[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0]," + "[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207]," + "[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[' + '[0,0,0,0,0,0,0],[101,0,0,0,0,0,0],[201,202,0,0,0,0,0],[301,302,303,0,0,0,0],' + '[401,402,403,0,0,0,0],[501,502,503,504,0,0,0],[601,602,603,604,0,0,0],[701,702,703,704,705,0,0],' + '[801,802,803,804,805,0,0],[901,902,903,904,905,906,0],[1001,1002,1003,1004,1005,1006,0],' + '[1101,1102,1103,1104,1105,1106,1107],[1201,1202,1203,1204,1205,1206,1207],' + '[1301,1302,1303,1304,1305,1306,1307],[1401,1402,1403,1404,1405,1406,1407]' + ']' é diferente de " + result6617 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207), JSONArray.of(1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308), JSONArray.of(1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals((short) 123, bean.value)
nova chamada: assertEquals((short) 123, bean.value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals((short) 101, bean.value)
nova chamada: assertEquals((short) 101, bean.value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 102, bean.value)
nova chamada: assertEquals((short) 102, bean.value, "Era esperado valores iguais, mas  (short) 102 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(bean.value, bean1.value)
nova chamada: assertEquals(bean.value, bean1.value, "Era esperado valores iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(bean.value, bean1.value)
nova chamada: assertEquals(bean.value, bean1.value, "Era esperado valores iguais, mas  bean.value é diferente de " + " bean1.value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':true}'), 0).value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':true}')).value")
chamada antiga: assertEquals(123F, bean.value)
nova chamada: assertEquals(123F, bean.value, "Era esperado valores iguais, mas  123F é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(12.34F, ((Float) fieldValue).floatValue())
nova chamada: assertEquals(12.34F, ((Float) fieldValue).floatValue(), "Era esperado valores iguais, mas  12.34F é diferente de " + result6618 + " <((Float) fieldValue).floatValue()>")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId"), "Era esperado não nulo, mas " + result6619 + " <objectReader.getFieldReader('userId')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId")), "Era esperado não nulo, mas " + result6620 + " <objectReader.getFieldReader(Fnv.hashCode64('userId'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid")), "Era esperado não nulo, mas " + result6621 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6622 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6623 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6624 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(101, bean.userId)
nova chamada: assertEquals(101, bean.userId, "Era esperado valores iguais, mas  101 é diferente de " + " bean.userId")
chamada antiga: assertEquals(101, bean.userId)
nova chamada: assertEquals(101, bean.userId, "Era esperado valores iguais, mas  101 é diferente de " + " bean.userId")
chamada antiga: assertEquals(101, bean.userId)
nova chamada: assertEquals(101, bean.userId, "Era esperado valores iguais, mas  101 é diferente de " + " bean.userId")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId")
chamada antiga: assertEquals("[[0],[101],[102],[104]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0],[101],[102],[104]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0],[101],[102],[104]]' é diferente de " + result6625 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(102, 103), JSONArray.of(104, 105, 106)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals((byte) 123, bean.value)
nova chamada: assertEquals((byte) 123, bean.value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals((byte) 101, bean.value)
nova chamada: assertEquals((byte) 101, bean.value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 102, bean.value)
nova chamada: assertEquals((byte) 102, bean.value, "Era esperado valores iguais, mas  (byte) 102 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals((byte) 123, bean.value)
nova chamada: assertEquals((byte) 123, bean.value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 65, bean.value)
nova chamada: assertEquals((byte) 65, bean.value, "Era esperado valores iguais, mas  (byte) 65 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 66, bean.value)
nova chamada: assertEquals((byte) 66, bean.value, "Era esperado valores iguais, mas  (byte) 66 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(true, JSON.parseObject(str, Bean.class).value.get())
nova chamada: assertEquals(true, JSON.parseObject(str, Bean.class).value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6626 + " <JSON.parseObject(str, Bean.class).value.get()>")
chamada antiga: assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get())
nova chamada: assertEquals(true, JSON.parseObject(str).to(Bean.class).value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6627 + " <JSON.parseObject(str).to(Bean.class).value.get()>")
chamada antiga: assertEquals("value", fieldReader.toString())
nova chamada: assertEquals("value", fieldReader.toString(), "Era esperado valores iguais, mas  'value' é diferente de " + result6628 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6629 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(true, bean1.value.get())
nova chamada: assertEquals(true, bean1.value.get(), "Era esperado valores iguais, mas  true é diferente de " + result6630 + " <bean1.value.get()>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(false, bean1.value.get())
nova chamada: assertEquals(false, bean1.value.get(), "Era esperado valores iguais, mas  false é diferente de " + result6631 + " <bean1.value.get()>")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6632 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6633 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6634 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6635 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6636 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6637 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId3"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId3"), "Era esperado não nulo, mas " + result6638 + " <objectReader.getFieldReader('userId3')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")), "Era esperado não nulo, mas " + result6639 + " <objectReader.getFieldReader(Fnv.hashCode64('userId3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")), "Era esperado não nulo, mas " + result6640 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId4"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId4"), "Era esperado não nulo, mas " + result6641 + " <objectReader.getFieldReader('userId4')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")), "Era esperado não nulo, mas " + result6642 + " <objectReader.getFieldReader(Fnv.hashCode64('userId4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")), "Era esperado não nulo, mas " + result6643 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId5"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId5"), "Era esperado não nulo, mas " + result6644 + " <objectReader.getFieldReader('userId5')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")), "Era esperado não nulo, mas " + result6645 + " <objectReader.getFieldReader(Fnv.hashCode64('userId5'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")), "Era esperado não nulo, mas " + result6646 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid5'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6647 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6648 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6649 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0],' + '[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905],' + '[1001,1002,1003,1004,1005]]' é diferente de " + result6650 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0]," + "[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905]," + "[1001,1002,1003,1004,1005]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0,0,0],[101,0,0,0,0],[201,202,0,0,0],[301,302,303,0,0],[401,402,403,0,0],' + '[501,502,503,504,0],[601,602,603,604,0],[701,702,703,704,705],[801,802,803,804,805],[901,902,903,904,905],' + '[1001,1002,1003,1004,1005]]' é diferente de " + result6651 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0))
nova chamada: assertEquals(123, JSON.parseObject(str, Bean.class).value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6652 + " <JSON.parseObject(str, Bean.class).value.get(0)>")
chamada antiga: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0))
nova chamada: assertEquals(123, JSON.parseObject(str).to(Bean.class).value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6653 + " <JSON.parseObject(str).to(Bean.class).value.get(0)>")
chamada antiga: assertEquals("getValue", fieldReader.toString())
nova chamada: assertEquals("getValue", fieldReader.toString(), "Era esperado valores iguais, mas  'getValue' é diferente de " + result6654 + " <fieldReader.toString()>")
chamada antiga: assertTrue(fieldReader.isReadOnly())
nova chamada: assertTrue(fieldReader.isReadOnly(), "Era esperado verdadeiro, mas " + result6655 + " <fieldReader.isReadOnly()> é falso")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(123, bean1.value.get(0))
nova chamada: assertEquals(123, bean1.value.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result6656 + " <bean1.value.get(0)>")
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals(101, bean1.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean1.id")
chamada antiga: assertEquals(0, bean1.value.get(0))
nova chamada: assertEquals(0, bean1.value.get(0), "Era esperado valores iguais, mas  0 é diferente de " + result6657 + " <bean1.value.get(0)>")
chamada antiga: assertEquals(new BigInteger("123"), bean.value)
nova chamada: assertEquals(new BigInteger("123"), bean.value, "Era esperado valores iguais, mas  new BigInteger('123') é diferente de " + " bean.value")
chamada antiga: assertEquals(new BigDecimal("123"), bean.value)
nova chamada: assertEquals(new BigDecimal("123"), bean.value, "Era esperado valores iguais, mas  new BigDecimal('123') é diferente de " + " bean.value")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6658 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6659 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6660 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6661 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6662 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6663 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId3"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId3"), "Era esperado não nulo, mas " + result6664 + " <objectReader.getFieldReader('userId3')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")), "Era esperado não nulo, mas " + result6665 + " <objectReader.getFieldReader(Fnv.hashCode64('userId3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")), "Era esperado não nulo, mas " + result6666 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId4"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId4"), "Era esperado não nulo, mas " + result6667 + " <objectReader.getFieldReader('userId4')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")), "Era esperado não nulo, mas " + result6668 + " <objectReader.getFieldReader(Fnv.hashCode64('userId4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")), "Era esperado não nulo, mas " + result6669 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId5"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId5"), "Era esperado não nulo, mas " + result6670 + " <objectReader.getFieldReader('userId5')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId5")), "Era esperado não nulo, mas " + result6671 + " <objectReader.getFieldReader(Fnv.hashCode64('userId5'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid5")), "Era esperado não nulo, mas " + result6672 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid5'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId6"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId6"), "Era esperado não nulo, mas " + result6673 + " <objectReader.getFieldReader('userId6')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId6")), "Era esperado não nulo, mas " + result6674 + " <objectReader.getFieldReader(Fnv.hashCode64('userId6'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid6")), "Era esperado não nulo, mas " + result6675 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid6'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6676 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6677 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6678 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[' + '[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0],' + '[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0],' + '[801,802,803,804,805,0],[901,902,903,904,905,906],' + '[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]' + ']' é diferente de " + result6679 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider(), JSONReader.Feature.SupportArrayToBean)).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider(), JSONReader.Feature.SupportArrayToBean)).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider(), JSONReader.Feature.SupportArrayToBean)).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean)).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean)).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean)).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean, JSONReader.Feature.FieldBased)).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean, JSONReader.Feature.FieldBased)).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, new JSONReader.Context(JSONReader.Feature.SupportArrayToBean, JSONReader.Feature.FieldBased)).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[" + "[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0]," + "[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0]," + "[801,802,803,804,805,0],[901,902,903,904,905,906]," + "[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]" + "]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[' + '[0,0,0,0,0,0],[101,0,0,0,0,0],[201,202,0,0,0,0],[301,302,303,0,0,0],[401,402,403,0,0,0],' + '[501,502,503,504,0,0],[601,602,603,604,0,0],[701,702,703,704,705,0],' + '[801,802,803,804,805,0],[901,902,903,904,905,906],' + '[1001,1002,1003,1004,1005,1006],[1101,1102,1103,1104,1105,1106],[1201,1202,1203,1204,1205,1206]' + ']' é diferente de " + result6680 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805), JSONArray.of(901, 902, 903, 904, 905, 906), JSONArray.of(1001, 1002, 1003, 1004, 1005, 1006), JSONArray.of(1101, 1102, 1103, 1104, 1105, 1106, 1107), JSONArray.of(1201, 1202, 1203, 1204, 1205, 1206, 1207)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertEquals('A', bean.value)
nova chamada: assertEquals('A', bean.value, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals('B', bean.value)
nova chamada: assertEquals('B', bean.value, "Era esperado valores iguais, mas  'B' é diferente de " + " bean.value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'A\'}'), 0).value")
chamada antiga: assertEquals('A', bean.value)
nova chamada: assertEquals('A', bean.value, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals('B', bean.value)
nova chamada: assertEquals('B', bean.value, "Era esperado valores iguais, mas  'B' é diferente de " + " bean.value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'A\'}'), 0).value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'A\'}')).value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'A\'}')).value")
chamada antiga: assertEquals(123F, bean.value)
nova chamada: assertEquals(123F, bean.value, "Era esperado valores iguais, mas  123F é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101F, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201F, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201F é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals(12.34D, ((Double) fieldValue).doubleValue())
nova chamada: assertEquals(12.34D, ((Double) fieldValue).doubleValue(), "Era esperado valores iguais, mas  12.34D é diferente de " + result6681 + " <((Double) fieldValue).doubleValue()>")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Long.class, fieldReader.getItemType())
nova chamada: assertEquals(Long.class, fieldReader.getItemType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result6682 + " <fieldReader.getItemType()>")
chamada antiga: assertEquals(123L, bean.values.get(0))
nova chamada: assertEquals(123L, bean.values.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result6683 + " <bean.values.get(0)>")
chamada antiga: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
nova chamada: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result6684 + " <objectReader.readObject(JSONReader.of('{\'values\':[101]}'), 0).values.get(0)>")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Long.class, fieldReader.getItemType())
nova chamada: assertEquals(Long.class, fieldReader.getItemType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result6685 + " <fieldReader.getItemType()>")
chamada antiga: assertEquals(123L, bean.values.get(0))
nova chamada: assertEquals(123L, bean.values.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result6686 + " <bean.values.get(0)>")
chamada antiga: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0))
nova chamada: assertEquals(101L, objectReader.readObject(JSONReader.of("{\"values\":[101]}"), 0).values.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result6687 + " <objectReader.readObject(JSONReader.of('{\'values\':[101]}'), 0).values.get(0)>")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Long.class, fieldReader.getItemType())
nova chamada: assertEquals(Long.class, fieldReader.getItemType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result6688 + " <fieldReader.getItemType()>")
chamada antiga: assertEquals(123L, bean.values.get(0))
nova chamada: assertEquals(123L, bean.values.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result6689 + " <bean.values.get(0)>")
chamada antiga: assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1))
nova chamada: assertEquals(102L, objectReader.readObject(JSONReader.of("{\"id\":123,\"values\":[101,102]}"), 0).values.get(1), "Era esperado valores iguais, mas  102L é diferente de " + result6690 + " <objectReader.readObject(JSONReader.of('{\'id\':123,\'values\':[101,102]}'), 0).values.get(1)>")
chamada antiga: assertEquals(101L, bean1.values.get(0))
nova chamada: assertEquals(101L, bean1.values.get(0), "Era esperado valores iguais, mas  101L é diferente de " + result6691 + " <bean1.values.get(0)>")
chamada antiga: assertEquals(102L, bean1.values.get(1))
nova chamada: assertEquals(102L, bean1.values.get(1), "Era esperado valores iguais, mas  102L é diferente de " + result6692 + " <bean1.values.get(1)>")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertNull(fieldReader.getItemClass())
nova chamada: assertNull(fieldReader.getItemClass(), "Era esperado nulo, mas " + result6693 + " <fieldReader.getItemClass()> não é nulo")
chamada antiga: assertEquals(0, fieldReader.getItemClassHash())
nova chamada: assertEquals(0, fieldReader.getItemClassHash(), "Era esperado valores iguais, mas  0 é diferente de " + result6694 + " <fieldReader.getItemClassHash()>")
chamada antiga: assertNotNull(fieldObjectReader)
nova chamada: assertNotNull(fieldObjectReader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(fieldObjectReader, fieldReader.getObjectReader(context))
nova chamada: assertSame(fieldObjectReader, fieldReader.getObjectReader(context), "Era esperado objetos iguais, mas  fieldObjectReader é diferente de " + result6695 + " <fieldReader.getObjectReader(context)>")
chamada antiga: assertNotNull(fieldObjectReader)
nova chamada: assertNotNull(fieldObjectReader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(fieldObjectReader, fieldReader.getObjectReader(jsonReader))
nova chamada: assertSame(fieldObjectReader, fieldReader.getObjectReader(jsonReader), "Era esperado objetos iguais, mas  fieldObjectReader é diferente de " + result6696 + " <fieldReader.getObjectReader(jsonReader)>")
chamada antiga: assertNull(fieldReader.checkObjectAutoType(jsonReader))
nova chamada: assertNull(fieldReader.checkObjectAutoType(jsonReader), "Era esperado nulo, mas " + result6697 + " <fieldReader.checkObjectAutoType(jsonReader)> não é nulo")
chamada antiga: assertNotNull(fieldReader)
nova chamada: assertNotNull(fieldReader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(new BigDecimal("12.34"), fieldReader.readFieldValue(JSONReader.of("12.34")))
nova chamada: assertEquals(new BigDecimal("12.34"), fieldReader.readFieldValue(JSONReader.of("12.34")), "Era esperado valores iguais, mas  new BigDecimal('12.34') é diferente de " + result6698 + " <fieldReader.readFieldValue(JSONReader.of('12.34'))>")
chamada antiga: assertEquals(new BigInteger("1234"), fieldReader.readFieldValue(JSONReader.of("1234")))
nova chamada: assertEquals(new BigInteger("1234"), fieldReader.readFieldValue(JSONReader.of("1234")), "Era esperado valores iguais, mas  new BigInteger('1234') é diferente de " + result6699 + " <fieldReader.readFieldValue(JSONReader.of('1234'))>")
chamada antiga: assertEquals(12.34D, fieldReader.readFieldValue(JSONReader.of("12.34")))
nova chamada: assertEquals(12.34D, fieldReader.readFieldValue(JSONReader.of("12.34")), "Era esperado valores iguais, mas  12.34D é diferente de " + result6700 + " <fieldReader.readFieldValue(JSONReader.of('12.34'))>")
chamada antiga: assertEquals((byte) 12, fieldReader.readFieldValue(JSONReader.of("12")))
nova chamada: assertEquals((byte) 12, fieldReader.readFieldValue(JSONReader.of("12")), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result6701 + " <fieldReader.readFieldValue(JSONReader.of('12'))>")
chamada antiga: assertEquals(12, bean.value)
nova chamada: assertEquals(12, bean.value, "Era esperado valores iguais, mas  12 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.createList(context))
nova chamada: assertNotNull(fieldReader.createList(context), "Era esperado não nulo, mas " + result6702 + " <fieldReader.createList(context)> é nulo")
chamada antiga: assertNotNull(bean.values)
nova chamada: assertNotNull(bean.values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertNotNull(fieldReader.field)
nova chamada: assertNotNull(fieldReader.field, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6703 + " <bean.value.getTime()>")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
nova chamada: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")), "Era esperado não nulo, mas " + result6704 + " <fieldReader.getObjectReader(JSONReader.of(''))> é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6705 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6706 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6707 + " <objectReader.readObject(JSONReader.of('{\'value\':\'2017-07-03 12:13:14\'}'), 0).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6708 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03 12:13:14\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6709 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
nova chamada: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6710 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6711 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6712 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'20170703121314000+0800\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6713 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03T12:13:14\'}')).value.getTime()>")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6714 + " <bean.value.getTime()>")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")))
nova chamada: assertNotNull(fieldReader.getObjectReader(JSONReader.of("")), "Era esperado não nulo, mas " + result6715 + " <fieldReader.getObjectReader(JSONReader.of(''))> é nulo")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6716 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, bean.value.getTime())
nova chamada: assertEquals(1499055194000L, bean.value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6717 + " <bean.value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"value\":\"2017-07-03 12:13:14\"}"), 0).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6718 + " <objectReader.readObject(JSONReader.of('{\'value\':\'2017-07-03 12:13:14\'}'), 0).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03 12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6719 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03 12:13:14\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6720 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value)
nova chamada: assertNull(objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":null}")).value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6721 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":1499055194000}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6722 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':1499055194000}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"20170703121314000+0800\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6723 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'20170703121314000+0800\'}')).value.getTime()>")
chamada antiga: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime())
nova chamada: assertEquals(1499055194000L, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"2017-07-03T12:13:14\"}")).value.getTime(), "Era esperado valores iguais, mas  1499055194000L é diferente de " + result6724 + " <objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'2017-07-03T12:13:14\'}')).value.getTime()>")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':true}'), 0).value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":true}")).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':true}')).value")
chamada antiga: assertEquals(123D, bean.value)
nova chamada: assertEquals(123D, bean.value, "Era esperado valores iguais, mas  123D é diferente de " + " bean.value")
chamada antiga: assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123D, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123D é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(201, objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  201 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(1, bean.f0)
nova chamada: assertEquals(1, bean.f0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.f0")
chamada antiga: assertEquals(2, bean.f1)
nova chamada: assertEquals(2, bean.f1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.f1")
chamada antiga: assertEquals(3, bean.f2)
nova chamada: assertEquals(3, bean.f2, "Era esperado valores iguais, mas  3 é diferente de " + " bean.f2")
chamada antiga: assertEquals(4, bean.f3)
nova chamada: assertEquals(4, bean.f3, "Era esperado valores iguais, mas  4 é diferente de " + " bean.f3")
chamada antiga: assertEquals(5, bean.f4)
nova chamada: assertEquals(5, bean.f4, "Era esperado valores iguais, mas  5 é diferente de " + " bean.f4")
chamada antiga: assertEquals(6, bean.f5)
nova chamada: assertEquals(6, bean.f5, "Era esperado valores iguais, mas  6 é diferente de " + " bean.f5")
chamada antiga: assertEquals(true, bean.f6)
nova chamada: assertEquals(true, bean.f6, "Era esperado valores iguais, mas  true é diferente de " + " bean.f6")
chamada antiga: assertEquals('A', bean.f7)
nova chamada: assertEquals('A', bean.f7, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.f7")
chamada antiga: assertEquals(1, bean.f0)
nova chamada: assertEquals(1, bean.f0, "Era esperado valores iguais, mas  1 é diferente de " + " bean.f0")
chamada antiga: assertEquals(2, bean.f1)
nova chamada: assertEquals(2, bean.f1, "Era esperado valores iguais, mas  2 é diferente de " + " bean.f1")
chamada antiga: assertEquals(3, bean.f2)
nova chamada: assertEquals(3, bean.f2, "Era esperado valores iguais, mas  3 é diferente de " + " bean.f2")
chamada antiga: assertEquals(4, bean.f3)
nova chamada: assertEquals(4, bean.f3, "Era esperado valores iguais, mas  4 é diferente de " + " bean.f3")
chamada antiga: assertEquals(5, bean.f4)
nova chamada: assertEquals(5, bean.f4, "Era esperado valores iguais, mas  5 é diferente de " + " bean.f4")
chamada antiga: assertEquals(6, bean.f5)
nova chamada: assertEquals(6, bean.f5, "Era esperado valores iguais, mas  6 é diferente de " + " bean.f5")
chamada antiga: assertEquals(true, bean.f6)
nova chamada: assertEquals(true, bean.f6, "Era esperado valores iguais, mas  true é diferente de " + " bean.f6")
chamada antiga: assertEquals('A', bean.f7)
nova chamada: assertEquals('A', bean.f7, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.f7")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals('A', bean.value)
nova chamada: assertEquals('A', bean.value, "Era esperado valores iguais, mas  'A' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.field)
nova chamada: assertNotNull(fieldReader.field, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals('B', bean.value)
nova chamada: assertEquals('B', bean.value, "Era esperado valores iguais, mas  'B' é diferente de " + " bean.value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"value\":\"A\"}"), 0).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'A\'}'), 0).value")
chamada antiga: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value)
nova chamada: assertEquals('A', objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"A\"}")).value, "Era esperado valores iguais, mas  'A' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'A\'}')).value")
chamada antiga: assertEquals(new BigInteger("123"), bean.value)
nova chamada: assertEquals(new BigInteger("123"), bean.value, "Era esperado valores iguais, mas  new BigInteger('123') é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(new BigInteger("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(new BigInteger("101"), objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  new BigInteger('101') é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals(new BigInteger("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value)
nova chamada: assertEquals(new BigInteger("201"), objectReader.readObject(JSONReader.of("{\"value\":201}"), 0).value, "Era esperado valores iguais, mas  new BigInteger('201') é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':201}'), 0).value")
chamada antiga: assertEquals((short) 123, bean.value)
nova chamada: assertEquals((short) 123, bean.value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " bean.value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertEquals(123, bean.code)
nova chamada: assertEquals(123, bean.code, "Era esperado valores iguais, mas  123 é diferente de " + " bean.code")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((short) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (short) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((short) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (short) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals("123", bean.value)
nova chamada: assertEquals("123", bean.value, "Era esperado valores iguais, mas  '123' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  '101' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value)
nova chamada: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value, "Era esperado valores iguais, mas  'abc' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\' abc \'}'), 0).value")
chamada antiga: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
nova chamada: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value, "Era esperado valores iguais, mas  'AB' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'AB\'}'), 0).value")
chamada antiga: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  '123' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
nova chamada: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value, "Era esperado valores iguais, mas  'abc' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\' abc \'}')).value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.field)
nova chamada: assertNotNull(fieldReader.field, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':true}'), 0).value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':true}'), 0).value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'true\'}')).value")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId1"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId1"), "Era esperado não nulo, mas " + result6725 + " <objectReader.getFieldReader('userId1')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId1")), "Era esperado não nulo, mas " + result6726 + " <objectReader.getFieldReader(Fnv.hashCode64('userId1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid1")), "Era esperado não nulo, mas " + result6727 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid1'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId2"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId2"), "Era esperado não nulo, mas " + result6728 + " <objectReader.getFieldReader('userId2')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId2")), "Era esperado não nulo, mas " + result6729 + " <objectReader.getFieldReader(Fnv.hashCode64('userId2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid2")), "Era esperado não nulo, mas " + result6730 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid2'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId3"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId3"), "Era esperado não nulo, mas " + result6731 + " <objectReader.getFieldReader('userId3')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId3")), "Era esperado não nulo, mas " + result6732 + " <objectReader.getFieldReader(Fnv.hashCode64('userId3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid3")), "Era esperado não nulo, mas " + result6733 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid3'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader("userId4"))
nova chamada: assertNotNull(objectReader.getFieldReader("userId4"), "Era esperado não nulo, mas " + result6734 + " <objectReader.getFieldReader('userId4')> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")))
nova chamada: assertNotNull(objectReader.getFieldReader(Fnv.hashCode64("userId4")), "Era esperado não nulo, mas " + result6735 + " <objectReader.getFieldReader(Fnv.hashCode64('userId4'))> é nulo")
chamada antiga: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")))
nova chamada: assertNotNull(objectReader.getFieldReaderLCase(Fnv.hashCode64("userid4")), "Era esperado não nulo, mas " + result6736 + " <objectReader.getFieldReaderLCase(Fnv.hashCode64('userid4'))> é nulo")
chamada antiga: assertNull(objectReader.getFieldReader("id"))
nova chamada: assertNull(objectReader.getFieldReader("id"), "Era esperado nulo, mas " + result6737 + " <objectReader.getFieldReader('id')> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReader(0))
nova chamada: assertNull(objectReader.getFieldReader(0), "Era esperado nulo, mas " + result6738 + " <objectReader.getFieldReader(0)> não é nulo")
chamada antiga: assertNull(objectReader.getFieldReaderLCase(0))
nova chamada: assertNull(objectReader.getFieldReaderLCase(0), "Era esperado nulo, mas " + result6739 + " <objectReader.getFieldReaderLCase(0)> não é nulo")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean1.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]' é diferente de " + result6740 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean1[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(0, JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  0 é diferente de " + " JSONB.parseObject(JSONArray.of().toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0)
nova chamada: assertEquals(101, JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0, "Era esperado valores iguais, mas  101 é diferente de " + " JSONB.parseObject(JSONArray.of(101, 102).toJSONBBytes(), Bean2.class, JSONReader.Feature.SupportArrayToBean).userId0")
chamada antiga: assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray))
nova chamada: assertEquals("[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]", JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray), "Era esperado valores iguais, mas  '[[0,0,0,0],[101,0,0,0],[201,202,0,0],[301,302,303,0],[401,402,403,0],[501,502,503,504],[601,602,603,604],[701,702,703,704],[801,802,803,804]]' é diferente de " + result6741 + " <JSON.toJSONString(JSONB.parseObject(JSONArray.of(JSONArray.of(), JSONArray.of(101), JSONArray.of(201, 202), JSONArray.of(301, 302, 303), JSONArray.of(401, 402, 403), JSONArray.of(501, 502, 503, 504), JSONArray.of(601, 602, 603, 604), JSONArray.of(701, 702, 703, 704, 705), JSONArray.of(801, 802, 803, 804, 805)).toJSONBBytes(), Bean2[].class, JSONReader.Feature.SupportArrayToBean), JSONWriter.Feature.BeanToArray)>")
chamada antiga: assertEquals((byte) 123, bean.value)
nova chamada: assertEquals((byte) 123, bean.value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals((byte) 101, bean.value)
nova chamada: assertEquals((byte) 101, bean.value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 102, bean.value)
nova chamada: assertEquals((byte) 102, bean.value, "Era esperado valores iguais, mas  (byte) 102 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 103, bean.value)
nova chamada: assertEquals((byte) 103, bean.value, "Era esperado valores iguais, mas  (byte) 103 é diferente de " + " bean.value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 85, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":85}")).value)
nova chamada: assertEquals((byte) 85, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":85}")).value, "Era esperado valores iguais, mas  (byte) 85 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':85}')).value")
chamada antiga: assertEquals(new BigInteger("123"), bean.value)
nova chamada: assertEquals(new BigInteger("123"), bean.value, "Era esperado valores iguais, mas  new BigInteger('123') é diferente de " + " bean.value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.method)
nova chamada: assertNotNull(fieldReader.method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(101, bean.value)
nova chamada: assertEquals(101, bean.value, "Era esperado valores iguais, mas  101 é diferente de " + " bean.value")
chamada antiga: assertEquals(102, bean.value)
nova chamada: assertEquals(102, bean.value, "Era esperado valores iguais, mas  102 é diferente de " + " bean.value")
chamada antiga: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals(101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals((byte) 101, objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  (byte) 101 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals((byte) 123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  (byte) 123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(10, objects.length)
nova chamada: assertEquals(10, objects.length, "Era esperado valores iguais, mas  10 é diferente de " + " objects.length")
chamada antiga: assertEquals(1, objects[0])
nova chamada: assertEquals(1, objects[0], "Era esperado valores iguais, mas  1 é diferente de " + " objects[0]")
chamada antiga: assertEquals("abc", objects[1])
nova chamada: assertEquals("abc", objects[1], "Era esperado valores iguais, mas  'abc' é diferente de " + " objects[1]")
chamada antiga: assertEquals(new JSONObject(), objects[2])
nova chamada: assertEquals(new JSONObject(), objects[2], "Era esperado valores iguais, mas  new JSONObject() é diferente de " + " objects[2]")
chamada antiga: assertEquals(new JSONArray(), objects[3])
nova chamada: assertEquals(new JSONArray(), objects[3], "Era esperado valores iguais, mas  new JSONArray() é diferente de " + " objects[3]")
chamada antiga: assertNull(objects[4])
nova chamada: assertNull(objects[4], "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(new BigDecimal("0.3"), objects[5])
nova chamada: assertEquals(new BigDecimal("0.3"), objects[5], "Era esperado valores iguais, mas  new BigDecimal('0.3') é diferente de " + " objects[5]")
chamada antiga: assertEquals(-1, objects[6])
nova chamada: assertEquals(-1, objects[6], "Era esperado valores iguais, mas  -1 é diferente de " + " objects[6]")
chamada antiga: assertEquals(Boolean.TRUE, objects[7])
nova chamada: assertEquals(Boolean.TRUE, objects[7], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " objects[7]")
chamada antiga: assertEquals(Boolean.FALSE, objects[8])
nova chamada: assertEquals(Boolean.FALSE, objects[8], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " objects[8]")
chamada antiga: assertEquals(2147483649L, objects[9])
nova chamada: assertEquals(2147483649L, objects[9], "Era esperado valores iguais, mas  2147483649L é diferente de " + " objects[9]")
chamada antiga: assertArrayEquals(objects, values)
nova chamada: assertArrayEquals(objects, values, "Era esperado arrays iguais, mas  objects é diferente de " + " values")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean1.value)
nova chamada: assertNull(bean1.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean2.value)
nova chamada: assertNull(bean2.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(bean3.value)
nova chamada: assertNull(bean3.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(ints.length, objects.length)
nova chamada: assertEquals(ints.length, objects.length, "Era esperado valores iguais, mas  ints.length é diferente de " + " objects.length")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.field)
nova chamada: assertNotNull(fieldReader.field, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(false, bean.value)
nova chamada: assertEquals(false, bean.value, "Era esperado valores iguais, mas  false é diferente de " + " bean.value")
chamada antiga: assertEquals(true, bean.value)
nova chamada: assertEquals(true, bean.value, "Era esperado valores iguais, mas  true é diferente de " + " bean.value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"value\":true}"), 0).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':true}'), 0).value")
chamada antiga: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value)
nova chamada: assertEquals(true, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\"true\"}")).value, "Era esperado valores iguais, mas  true é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\'true\'}')).value")
chamada antiga: assertEquals("123", bean.value)
nova chamada: assertEquals("123", bean.value, "Era esperado valores iguais, mas  '123' é diferente de " + " bean.value")
chamada antiga: assertNotNull(fieldReader.field)
nova chamada: assertNotNull(fieldReader.field, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(bean.value)
nova chamada: assertNull(bean.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("abc", bean.value)
nova chamada: assertEquals("abc", bean.value, "Era esperado valores iguais, mas  'abc' é diferente de " + " bean.value")
chamada antiga: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value)
nova chamada: assertEquals("101", objectReader.readObject(JSONReader.of("{\"value\":101}"), 0).value, "Era esperado valores iguais, mas  '101' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':101}'), 0).value")
chamada antiga: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value)
nova chamada: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"value\":\" abc \"}"), 0).value, "Era esperado valores iguais, mas  'abc' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\' abc \'}'), 0).value")
chamada antiga: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value)
nova chamada: assertEquals("AB", objectReader.readObject(JSONReader.of("{\"value\":\"AB\"}"), 0).value, "Era esperado valores iguais, mas  'AB' é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':\'AB\'}'), 0).value")
chamada antiga: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals("123", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  '123' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value)
nova chamada: assertEquals("abc", objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":\" abc \"}")).value, "Era esperado valores iguais, mas  'abc' é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':\' abc \'}')).value")
chamada antiga: assertNull(impl.getFieldReader(0L))
nova chamada: assertNull(impl.getFieldReader(0L), "Era esperado nulo, mas " + result6742 + " <impl.getFieldReader(0L)> não é nulo")
chamada antiga: assertEquals(123, cat.id)
nova chamada: assertEquals(123, cat.id, "Era esperado valores iguais, mas  123 é diferente de " + " cat.id")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'value\':123}')).value")
chamada antiga: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value)
nova chamada: assertEquals(123, objectReader.readObject(JSONReader.of("{\"id\":101, \"value\":123}")).value, "Era esperado valores iguais, mas  123 é diferente de " + " objectReader.readObject(JSONReader.of('{\'id\':101, \'value\':123}')).value")
chamada antiga: assertEquals(101, path.extract(JSONReader.ofJSONB(jsonbBytes)))
nova chamada: assertEquals(101, path.extract(JSONReader.ofJSONB(jsonbBytes)), "Era esperado valores iguais, mas  101 é diferente de " + result6743 + " <path.extract(JSONReader.ofJSONB(jsonbBytes))>")
chamada antiga: assertEquals(101, path.eval(array))
nova chamada: assertEquals(101, path.eval(array), "Era esperado valores iguais, mas  101 é diferente de " + result6744 + " <path.eval(array)>")
chamada antiga: assertEquals(101, path.eval(array2))
nova chamada: assertEquals(101, path.eval(array2), "Era esperado valores iguais, mas  101 é diferente de " + result6745 + " <path.eval(array2)>")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean.item.getId())
nova chamada: assertEquals(123, bean.item.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result6746 + " <bean.item.getId()>")
chamada antiga: assertNotNull(bean2.item)
nova chamada: assertNotNull(bean2.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean2.item.getId())
nova chamada: assertEquals(123, bean2.item.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result6747 + " <bean2.item.getId()>")
chamada antiga: assertNotNull(bean3.item)
nova chamada: assertNotNull(bean3.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(234, bean3.item.getId())
nova chamada: assertEquals(234, bean3.item.getId(), "Era esperado valores iguais, mas  234 é diferente de " + result6748 + " <bean3.item.getId()>")
chamada antiga: assertEquals(123, item.getId())
nova chamada: assertEquals(123, item.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result6749 + " <item.getId()>")
chamada antiga: assertEquals(john.getEmail(), jsonObject.getString("email"))
nova chamada: assertEquals(john.getEmail(), jsonObject.getString("email"), "Era esperado valores iguais, mas " + result6750 + " <john.getEmail()> é diferente de " + result6751 + " <jsonObject.getString('email')>")
chamada antiga: assertEquals(john.getId(), jsonObject.getIntValue("id"))
nova chamada: assertEquals(john.getId(), jsonObject.getIntValue("id"), "Era esperado valores iguais, mas " + result6752 + " <john.getId()> é diferente de " + result6753 + " <jsonObject.getIntValue('id')>")
chamada antiga: assertEquals(john.getName(), jsonObject.getString("name"))
nova chamada: assertEquals(john.getName(), jsonObject.getString("name"), "Era esperado valores iguais, mas " + result6754 + " <john.getName()> é diferente de " + result6755 + " <jsonObject.getString('name')>")
chamada antiga: assertEquals(john.getEmail(), jsonObject.getString("email"))
nova chamada: assertEquals(john.getEmail(), jsonObject.getString("email"), "Era esperado valores iguais, mas " + result6756 + " <john.getEmail()> é diferente de " + result6757 + " <jsonObject.getString('email')>")
chamada antiga: assertEquals(john.getId(), jsonObject.getIntValue("id"))
nova chamada: assertEquals(john.getId(), jsonObject.getIntValue("id"), "Era esperado valores iguais, mas " + result6758 + " <john.getId()> é diferente de " + result6759 + " <jsonObject.getIntValue('id')>")
chamada antiga: assertEquals(john.getName(), jsonObject.getString("name"))
nova chamada: assertEquals(john.getName(), jsonObject.getString("name"), "Era esperado valores iguais, mas " + result6760 + " <john.getName()> é diferente de " + result6761 + " <jsonObject.getString('name')>")
chamada antiga: assertEquals(john.getEmail(), jsonObject.getString("email"))
nova chamada: assertEquals(john.getEmail(), jsonObject.getString("email"), "Era esperado valores iguais, mas " + result6762 + " <john.getEmail()> é diferente de " + result6763 + " <jsonObject.getString('email')>")
chamada antiga: assertEquals(john.getId(), jsonObject.getIntValue("id"))
nova chamada: assertEquals(john.getId(), jsonObject.getIntValue("id"), "Era esperado valores iguais, mas " + result6764 + " <john.getId()> é diferente de " + result6765 + " <jsonObject.getIntValue('id')>")
chamada antiga: assertEquals(john.getName(), jsonObject.getString("name"))
nova chamada: assertEquals(john.getName(), jsonObject.getString("name"), "Era esperado valores iguais, mas " + result6766 + " <john.getName()> é diferente de " + result6767 + " <jsonObject.getString('name')>")
chamada antiga: assertFalse(JSONPath.of("$.v0001").remove(vo))
nova chamada: assertFalse(JSONPath.of("$.v0001").remove(vo), "Era esperado falso, mas " + result6768 + " <JSONPath.of('$.v0001').remove(vo)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{noQuotationMarksError}"))
nova chamada: assertFalse(JSON.isValid("{noQuotationMarksError}"), "Era esperado falso, mas " + result6769 + " <JSON.isValid('{noQuotationMarksError}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(utf8))
nova chamada: assertFalse(JSON.isValid(utf8), "Era esperado falso, mas " + result6770 + " <JSON.isValid(utf8)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8))
nova chamada: assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8), "Era esperado falso, mas " + result6771 + " <JSON.isValid(utf8, 0, utf8.length, StandardCharsets.UTF_8)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII))
nova chamada: assertFalse(JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII), "Era esperado falso, mas " + result6772 + " <JSON.isValid(utf8, 0, utf8.length, StandardCharsets.US_ASCII)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}"))
nova chamada: assertFalse(JSON.isValidArray("{}"), "Era esperado falso, mas " + result6773 + " <JSON.isValidArray('{}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid((char[]) null))
nova chamada: assertFalse(JSON.isValid((char[]) null), "Era esperado falso, mas " + result6774 + " <JSON.isValid((char[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(new char[0]))
nova chamada: assertFalse(JSON.isValid(new char[0]), "Era esperado falso, mas " + result6775 + " <JSON.isValid(new char[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{}1".toCharArray()))
nova chamada: assertFalse(JSON.isValid("{}1".toCharArray()), "Era esperado falso, mas " + result6776 + " <JSON.isValid('{}1'.toCharArray())> é verdadeiro ")
chamada antiga: assertFalse((Boolean) JSON.parse("false"))
nova chamada: assertFalse((Boolean) JSON.parse("false"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.isValid((String) null))
nova chamada: assertFalse(JSON.isValid((String) null), "Era esperado falso, mas " + result6777 + " <JSON.isValid((String) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(""))
nova chamada: assertFalse(JSON.isValid(""), "Era esperado falso, mas " + result6778 + " <JSON.isValid('')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid((byte[]) null))
nova chamada: assertFalse(JSON.isValid((byte[]) null), "Era esperado falso, mas " + result6779 + " <JSON.isValid((byte[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(new byte[0]))
nova chamada: assertFalse(JSON.isValid(new byte[0]), "Era esperado falso, mas " + result6780 + " <JSON.isValid(new byte[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.US_ASCII))
nova chamada: assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.US_ASCII), "Era esperado falso, mas " + result6781 + " <JSON.isValid(new byte[0], 0, 0, StandardCharsets.US_ASCII)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray((String) null))
nova chamada: assertFalse(JSON.isValidArray((String) null), "Era esperado falso, mas " + result6782 + " <JSON.isValidArray((String) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(""))
nova chamada: assertFalse(JSON.isValidArray(""), "Era esperado falso, mas " + result6783 + " <JSON.isValidArray('')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray((byte[]) null))
nova chamada: assertFalse(JSON.isValidArray((byte[]) null), "Era esperado falso, mas " + result6784 + " <JSON.isValidArray((byte[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(new byte[0]))
nova chamada: assertFalse(JSON.isValidArray(new byte[0]), "Era esperado falso, mas " + result6785 + " <JSON.isValidArray(new byte[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6786 + " <JSON.isValidArray('{}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportAutoType))
nova chamada: assertFalse(JSON.isEnabled(JSONReader.Feature.SupportAutoType), "Era esperado falso, mas " + result6787 + " <JSON.isEnabled(JSONReader.Feature.SupportAutoType)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("123"))
nova chamada: assertTrue(JSON.isValid("123"), "Era esperado verdadeiro, mas " + result6788 + " <JSON.isValid('123')> é falso")
chamada antiga: assertFalse(JSON.isValid("1}"))
nova chamada: assertFalse(JSON.isValid("1}"), "Era esperado falso, mas " + result6789 + " <JSON.isValid('1}')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("\"aaa\""))
nova chamada: assertTrue(JSON.isValid("\"aaa\""), "Era esperado verdadeiro, mas " + result6790 + " <JSON.isValid('\'aaa\'')> é falso")
chamada antiga: assertFalse(JSON.isValid("\"aaa\"}"))
nova chamada: assertFalse(JSON.isValid("\"aaa\"}"), "Era esperado falso, mas " + result6791 + " <JSON.isValid('\'aaa\'}')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("{}"))
nova chamada: assertTrue(JSON.isValid("{}"), "Era esperado verdadeiro, mas " + result6792 + " <JSON.isValid('{}')> é falso")
chamada antiga: assertFalse(JSON.isValid("{}]"))
nova chamada: assertFalse(JSON.isValid("{}]"), "Era esperado falso, mas " + result6793 + " <JSON.isValid('{}]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid((byte[]) null))
nova chamada: assertFalse(JSON.isValid((byte[]) null), "Era esperado falso, mas " + result6794 + " <JSON.isValid((byte[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(new byte[0]))
nova chamada: assertFalse(JSON.isValid(new byte[0]), "Era esperado falso, mas " + result6795 + " <JSON.isValid(new byte[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid((byte[]) null, 0, 0, StandardCharsets.UTF_8))
nova chamada: assertFalse(JSON.isValid((byte[]) null, 0, 0, StandardCharsets.UTF_8), "Era esperado falso, mas " + result6796 + " <JSON.isValid((byte[]) null, 0, 0, StandardCharsets.UTF_8)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.UTF_8))
nova chamada: assertFalse(JSON.isValid(new byte[0], 0, 0, StandardCharsets.UTF_8), "Era esperado falso, mas " + result6797 + " <JSON.isValid(new byte[0], 0, 0, StandardCharsets.UTF_8)> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("123".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValid("123".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6798 + " <JSON.isValid('123'.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertFalse(JSON.isValid("1}.getBytes(StandardCharsets.UTF_8)"))
nova chamada: assertFalse(JSON.isValid("1}.getBytes(StandardCharsets.UTF_8)"), "Era esperado falso, mas " + result6799 + " <JSON.isValid('1}.getBytes(StandardCharsets.UTF_8)')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValid("\"aaa\"".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6800 + " <JSON.isValid('\'aaa\''.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertFalse(JSON.isValid("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValid("\"aaa\"}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6801 + " <JSON.isValid('\'aaa\'}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("{}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValid("{}".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6802 + " <JSON.isValid('{}'.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertFalse(JSON.isValid("{}]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValid("{}]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6803 + " <JSON.isValid('{}]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("123"))
nova chamada: assertFalse(JSON.isValidArray("123"), "Era esperado falso, mas " + result6804 + " <JSON.isValidArray('123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("1}"))
nova chamada: assertFalse(JSON.isValidArray("1}"), "Era esperado falso, mas " + result6805 + " <JSON.isValidArray('1}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("\"aaa\""))
nova chamada: assertFalse(JSON.isValidArray("\"aaa\""), "Era esperado falso, mas " + result6806 + " <JSON.isValidArray('\'aaa\'')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("\"aaa\"}"))
nova chamada: assertFalse(JSON.isValidArray("\"aaa\"}"), "Era esperado falso, mas " + result6807 + " <JSON.isValidArray('\'aaa\'}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}"))
nova chamada: assertFalse(JSON.isValidArray("{}"), "Era esperado falso, mas " + result6808 + " <JSON.isValidArray('{}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}]"))
nova chamada: assertFalse(JSON.isValidArray("{}]"), "Era esperado falso, mas " + result6809 + " <JSON.isValidArray('{}]')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValidArray("[]"))
nova chamada: assertTrue(JSON.isValidArray("[]"), "Era esperado verdadeiro, mas " + result6810 + " <JSON.isValidArray('[]')> é falso")
chamada antiga: assertFalse(JSON.isValidArray("[]]"))
nova chamada: assertFalse(JSON.isValidArray("[]]"), "Era esperado falso, mas " + result6811 + " <JSON.isValidArray('[]]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray((byte[]) null))
nova chamada: assertFalse(JSON.isValidArray((byte[]) null), "Era esperado falso, mas " + result6812 + " <JSON.isValidArray((byte[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray(new byte[0]))
nova chamada: assertFalse(JSON.isValidArray(new byte[0]), "Era esperado falso, mas " + result6813 + " <JSON.isValidArray(new byte[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("123".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("123".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6814 + " <JSON.isValidArray('123'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("1}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("1}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6815 + " <JSON.isValidArray('1}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("\"aaa\"".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6816 + " <JSON.isValidArray('\'aaa\''.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("\"aaa\"}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6817 + " <JSON.isValidArray('\'aaa\'}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("{}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6818 + " <JSON.isValidArray('{}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("{}]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("{}]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6819 + " <JSON.isValidArray('{}]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValidArray("[]".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6820 + " <JSON.isValidArray('[]'.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertFalse(JSON.isValidArray("[]]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidArray("[]]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6821 + " <JSON.isValidArray('[]]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject((String) null))
nova chamada: assertFalse(JSON.isValidObject((String) null), "Era esperado falso, mas " + result6822 + " <JSON.isValidObject((String) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject(""))
nova chamada: assertFalse(JSON.isValidObject(""), "Era esperado falso, mas " + result6823 + " <JSON.isValidObject('')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("123"))
nova chamada: assertFalse(JSON.isValidObject("123"), "Era esperado falso, mas " + result6824 + " <JSON.isValidObject('123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("1}"))
nova chamada: assertFalse(JSON.isValidObject("1}"), "Era esperado falso, mas " + result6825 + " <JSON.isValidObject('1}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("\"aaa\""))
nova chamada: assertFalse(JSON.isValidObject("\"aaa\""), "Era esperado falso, mas " + result6826 + " <JSON.isValidObject('\'aaa\'')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("\"aaa\"}"))
nova chamada: assertFalse(JSON.isValidObject("\"aaa\"}"), "Era esperado falso, mas " + result6827 + " <JSON.isValidObject('\'aaa\'}')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValidObject("{}"))
nova chamada: assertTrue(JSON.isValidObject("{}"), "Era esperado verdadeiro, mas " + result6828 + " <JSON.isValidObject('{}')> é falso")
chamada antiga: assertFalse(JSON.isValidObject("{}]"))
nova chamada: assertFalse(JSON.isValidObject("{}]"), "Era esperado falso, mas " + result6829 + " <JSON.isValidObject('{}]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{]"))
nova chamada: assertFalse(JSON.isValidObject("{]"), "Era esperado falso, mas " + result6830 + " <JSON.isValidObject('{]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{"))
nova chamada: assertFalse(JSON.isValidObject("{"), "Era esperado falso, mas " + result6831 + " <JSON.isValidObject('{')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("[]"))
nova chamada: assertFalse(JSON.isValidObject("[]"), "Era esperado falso, mas " + result6832 + " <JSON.isValidObject('[]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("[]]"))
nova chamada: assertFalse(JSON.isValidObject("[]]"), "Era esperado falso, mas " + result6833 + " <JSON.isValidObject('[]]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject((byte[]) null))
nova chamada: assertFalse(JSON.isValidObject((byte[]) null), "Era esperado falso, mas " + result6834 + " <JSON.isValidObject((byte[]) null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject(new byte[0]))
nova chamada: assertFalse(JSON.isValidObject(new byte[0]), "Era esperado falso, mas " + result6835 + " <JSON.isValidObject(new byte[0])> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("123".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("123".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6836 + " <JSON.isValidObject('123'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("1}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("1}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6837 + " <JSON.isValidObject('1}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("\"aaa\"".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("\"aaa\"".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6838 + " <JSON.isValidObject('\'aaa\''.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("\"aaa\"}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("\"aaa\"}".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6839 + " <JSON.isValidObject('\'aaa\'}'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValidObject("{}".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertTrue(JSON.isValidObject("{}".getBytes(StandardCharsets.UTF_8)), "Era esperado verdadeiro, mas " + result6840 + " <JSON.isValidObject('{}'.getBytes(StandardCharsets.UTF_8))> é falso")
chamada antiga: assertFalse(JSON.isValidObject("{}]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("{}]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6841 + " <JSON.isValidObject('{}]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("{]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6842 + " <JSON.isValidObject('{]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("{".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6843 + " <JSON.isValidObject('{'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("[]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("[]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6844 + " <JSON.isValidObject('[]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("[]]".getBytes(StandardCharsets.UTF_8)))
nova chamada: assertFalse(JSON.isValidObject("[]]".getBytes(StandardCharsets.UTF_8)), "Era esperado falso, mas " + result6845 + " <JSON.isValidObject('[]]'.getBytes(StandardCharsets.UTF_8))> é verdadeiro ")
chamada antiga: assertEquals(model.name, model2.name)
nova chamada: assertEquals(model.name, model2.name, "Era esperado valores iguais, mas  model.name é diferente de " + " model2.name")
chamada antiga: assertEquals(model.name, model2.name)
nova chamada: assertEquals(model.name, model2.name, "Era esperado valores iguais, mas  model.name é diferente de " + " model2.name")
chamada antiga: assertEquals(model.name, model2.name)
nova chamada: assertEquals(model.name, model2.name, "Era esperado valores iguais, mas  model.name é diferente de " + " model2.name")
chamada antiga: assertEquals("{\"name\":\"\\u003c\\u003e\"}", str)
nova chamada: assertEquals("{\"name\":\"\\u003c\\u003e\"}", str, "Era esperado valores iguais, mas  '{\'name\':\'\\u003c\\u003e\'}' é diferente de " + " str")
chamada antiga: assertTrue(reader.nextIfObjectStart())
nova chamada: assertTrue(reader.nextIfObjectStart(), "Era esperado verdadeiro, mas " + result6846 + " <reader.nextIfObjectStart()> é falso")
chamada antiga: assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCodeUnquote())
nova chamada: assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCodeUnquote(), "Era esperado valores iguais, mas " + result6847 + " <Fnv.hashCode64('id')> é diferente de " + result6848 + " <reader.readFieldNameHashCodeUnquote()>")
chamada antiga: assertEquals(123, reader.readInt32().intValue())
nova chamada: assertEquals(123, reader.readInt32().intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result6849 + " <reader.readInt32().intValue()>")
chamada antiga: assertEquals(Fnv.hashCode64("DataWorks"), reader.readValueHashCode())
nova chamada: assertEquals(Fnv.hashCode64("DataWorks"), reader.readValueHashCode(), "Era esperado valores iguais, mas " + result6850 + " <Fnv.hashCode64('DataWorks')> é diferente de " + result6851 + " <reader.readValueHashCode()>")
chamada antiga: assertTrue(reader.nextIfObjectStart())
nova chamada: assertTrue(reader.nextIfObjectStart(), "Era esperado verdadeiro, mas " + result6852 + " <reader.nextIfObjectStart()> é falso")
chamada antiga: assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), reader.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6853 + " <Fnv.hashCode64('id')> é diferente de " + result6854 + " <reader.readFieldNameHashCode()>")
chamada antiga: assertEquals(uuid, reader.readUUID())
nova chamada: assertEquals(uuid, reader.readUUID(), "Era esperado valores iguais, mas  uuid é diferente de " + result6855 + " <reader.readUUID()>")
chamada antiga: assertEquals(Fnv.hashCode64("count"), reader.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("count"), reader.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6856 + " <Fnv.hashCode64('count')> é diferente de " + result6857 + " <reader.readFieldNameHashCode()>")
chamada antiga: assertEquals(1238, reader.readInt64().intValue())
nova chamada: assertEquals(1238, reader.readInt64().intValue(), "Era esperado valores iguais, mas  1238 é diferente de " + result6858 + " <reader.readInt64().intValue()>")
chamada antiga: assertNotNull(instant)
nova chamada: assertNotNull(instant, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(JSONValidator.from(reader).validate())
nova chamada: assertTrue(JSONValidator.from(reader).validate(), "Era esperado verdadeiro, mas " + result6859 + " <JSONValidator.from(reader).validate()> é falso")
chamada antiga: assertEquals("{1001=1, 1000=0}", map.toString())
nova chamada: assertEquals("{1001=1, 1000=0}", map.toString(), "Era esperado valores iguais, mas  '{1001=1, 1000=0}' é diferente de " + result6860 + " <map.toString()>")
chamada antiga: assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result6861 + " <map.size()>")
chamada antiga: assertEquals(0, map.get(1000L))
nova chamada: assertEquals(0, map.get(1000L), "Era esperado valores iguais, mas  0 é diferente de " + result6862 + " <map.get(1000L)>")
chamada antiga: assertEquals(1, map.get(1001L))
nova chamada: assertEquals(1, map.get(1001L), "Era esperado valores iguais, mas  1 é diferente de " + result6863 + " <map.get(1001L)>")
chamada antiga: assertEquals(-1, map.get(1000000L))
nova chamada: assertEquals(-1, map.get(1000000L), "Era esperado valores iguais, mas  -1 é diferente de " + result6864 + " <map.get(1000000L)>")
chamada antiga: assertEquals(102, map.putIfAbsent(101, 102))
nova chamada: assertEquals(102, map.putIfAbsent(101, 102), "Era esperado valores iguais, mas  102 é diferente de " + result6865 + " <map.putIfAbsent(101, 102)>")
chamada antiga: assertEquals(102, map.putIfAbsent(101, 103))
nova chamada: assertEquals(102, map.putIfAbsent(101, 103), "Era esperado valores iguais, mas  102 é diferente de " + result6866 + " <map.putIfAbsent(101, 103)>")
chamada antiga: assertNotNull(new SimpleGrantedAuthorityMixin(""))
nova chamada: assertNotNull(new SimpleGrantedAuthorityMixin(""), "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(pojo.parentClass.getClass(), pojo1.parentClass.getClass())
nova chamada: assertEquals(pojo.parentClass.getClass(), pojo1.parentClass.getClass(), "Era esperado valores iguais, mas " + result6867 + " <pojo.parentClass.getClass()> é diferente de " + result6868 + " <pojo1.parentClass.getClass()>")
chamada antiga: assertNotNull(exception1)
nova chamada: assertNotNull(exception1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(stackTrace)
nova chamada: assertNotNull(stackTrace, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(map, o)
nova chamada: assertEquals(map, o, "Era esperado valores iguais, mas  map é diferente de " + " o")
chamada antiga: assertNotNull(jsonbBytes)
nova chamada: assertNotNull(jsonbBytes, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(obj.getMessage())
nova chamada: assertNull(obj.getMessage(), "Era esperado nulo, mas " + result6869 + " <obj.getMessage()> não é nulo")
chamada antiga: assertEquals(message, obj.getMessage())
nova chamada: assertEquals(message, obj.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result6870 + " <obj.getMessage()>")
chamada antiga: assertEquals(message2, obj.getMessage())
nova chamada: assertEquals(message2, obj.getMessage(), "Era esperado valores iguais, mas  message2 é diferente de " + result6871 + " <obj.getMessage()>")
chamada antiga: assertEquals(message1, obj.getCause().getMessage())
nova chamada: assertEquals(message1, obj.getCause().getMessage(), "Era esperado valores iguais, mas  message1 é diferente de " + result6872 + " <obj.getCause().getMessage()>")
chamada antiga: assertEquals(message, obj.getMessage())
nova chamada: assertEquals(message, obj.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result6873 + " <obj.getMessage()>")
chamada antiga: assertEquals(message, obj.getMessage())
nova chamada: assertEquals(message, obj.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result6874 + " <obj.getMessage()>")
chamada antiga: assertEquals(ex.code, obj.code)
nova chamada: assertEquals(ex.code, obj.code, "Era esperado valores iguais, mas  ex.code é diferente de " + " obj.code")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6875 + " <ex.getMessage()> é diferente de " + result6876 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.code, ex1.code)
nova chamada: assertEquals(ex.code, ex1.code, "Era esperado valores iguais, mas  ex.code é diferente de " + " ex1.code")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6877 + " <ex.getMessage()> é diferente de " + result6878 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.getErrorIndex(), ex1.getErrorIndex())
nova chamada: assertEquals(ex.getErrorIndex(), ex1.getErrorIndex(), "Era esperado valores iguais, mas " + result6879 + " <ex.getErrorIndex()> é diferente de " + result6880 + " <ex1.getErrorIndex()>")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6881 + " <ex.getMessage()> é diferente de " + result6882 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage())
nova chamada: assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage(), "Era esperado valores iguais, mas " + result6883 + " <ex.getCause().getMessage()> é diferente de " + result6884 + " <ex1.getCause().getMessage()>")
chamada antiga: assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage())
nova chamada: assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage(), "Era esperado valores iguais, mas " + result6885 + " <ex.getCause().getMessage()> é diferente de " + result6886 + " <ex1.getCause().getMessage()>")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6887 + " <ex.getMessage()> é diferente de " + result6888 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6889 + " <ex.getMessage()> é diferente de " + result6890 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.getCause(), ex1.getCause())
nova chamada: assertEquals(ex.getCause(), ex1.getCause(), "Era esperado valores iguais, mas " + result6891 + " <ex.getCause()> é diferente de " + result6892 + " <ex1.getCause()>")
chamada antiga: assertEquals(ex.getMessage(), ex1.getMessage())
nova chamada: assertEquals(ex.getMessage(), ex1.getMessage(), "Era esperado valores iguais, mas " + result6893 + " <ex.getMessage()> é diferente de " + result6894 + " <ex1.getMessage()>")
chamada antiga: assertEquals(ex.getCause(), ex1.getCause())
nova chamada: assertEquals(ex.getCause(), ex1.getCause(), "Era esperado valores iguais, mas " + result6895 + " <ex.getCause()> é diferente de " + result6896 + " <ex1.getCause()>")
chamada antiga: assertEquals("com.qiyi.dubboapi.StreamService", str)
nova chamada: assertEquals("com.qiyi.dubboapi.StreamService", str, "Era esperado valores iguais, mas  'com.qiyi.dubboapi.StreamService' é diferente de " + " str")
chamada antiga: assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased))
nova chamada: assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased), "Era esperado valores iguais, mas  map é diferente de " + result6897 + " <JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased)>")
chamada antiga: assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased))
nova chamada: assertEquals(map, JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased), "Era esperado valores iguais, mas  map é diferente de " + result6898 + " <JSONB.parseObject(jsonbBytes, Object.class, filter, JSONReader.Feature.UseDefaultConstructorAsPossible, JSONReader.Feature.SupportClassForName, JSONReader.Feature.ErrorOnNoneSerializable, JSONReader.Feature.UseNativeObject, JSONReader.Feature.FieldBased)>")
chamada antiga: assertEquals(bean.type, bean1.type)
nova chamada: assertEquals(bean.type, bean1.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean1.type")
chamada antiga: assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter))
nova chamada: assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter), "Era esperado valores iguais, mas  String.class é diferente de " + result6899 + " <JSON.parseObject('\'java.lang.String\'', Class.class, filter)>")
chamada antiga: assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter))
nova chamada: assertEquals(String.class, JSON.parseObject("\"java.lang.String\"", Class.class, filter), "Era esperado valores iguais, mas  String.class é diferente de " + result6900 + " <JSON.parseObject('\'java.lang.String\'', Class.class, filter)>")
chamada antiga: assertEquals(bean.type, bean1.type)
nova chamada: assertEquals(bean.type, bean1.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean1.type")
chamada antiga: assertEquals(bean.type, bean2.type)
nova chamada: assertEquals(bean.type, bean2.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean2.type")
chamada antiga: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
nova chamada: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str, "Era esperado valores iguais, mas  '{\'Id\':101,\'Name\':\'DataWorks\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
nova chamada: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str, "Era esperado valores iguais, mas  '{\'Id\':101,\'Name\':\'DataWorks\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str)
nova chamada: assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", str, "Era esperado valores iguais, mas  '{\'Id\':101,\'Name\':\'DataWorks\'}' é diferente de " + " str")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertNull(provider.unregisterObjectReader(Bean.class))
nova chamada: assertNull(provider.unregisterObjectReader(Bean.class), "Era esperado nulo, mas " + result6901 + " <provider.unregisterObjectReader(Bean.class)> não é nulo")
chamada antiga: assertNull(provider.register(Bean.class, reader))
nova chamada: assertNull(provider.register(Bean.class, reader), "Era esperado nulo, mas " + result6902 + " <provider.register(Bean.class, reader)> não é nulo")
chamada antiga: assertSame(reader, provider.register(Bean.class, reader1))
nova chamada: assertSame(reader, provider.register(Bean.class, reader1), "Era esperado objetos iguais, mas  reader é diferente de " + result6903 + " <provider.register(Bean.class, reader1)>")
chamada antiga: assertTrue(provider.unregisterObjectReader(Bean.class, reader1))
nova chamada: assertTrue(provider.unregisterObjectReader(Bean.class, reader1), "Era esperado verdadeiro, mas " + result6904 + " <provider.unregisterObjectReader(Bean.class, reader1)> é falso")
chamada antiga: assertNull(provider.register(Bean.class, reader1))
nova chamada: assertNull(provider.register(Bean.class, reader1), "Era esperado nulo, mas " + result6905 + " <provider.register(Bean.class, reader1)> não é nulo")
chamada antiga: assertSame(reader1, provider.unregisterObjectReader(Bean.class))
nova chamada: assertSame(reader1, provider.unregisterObjectReader(Bean.class), "Era esperado objetos iguais, mas  reader1 é diferente de " + result6906 + " <provider.unregisterObjectReader(Bean.class)>")
chamada antiga: assertNull(provider.unregisterObjectReader(Bean.class))
nova chamada: assertNull(provider.unregisterObjectReader(Bean.class), "Era esperado nulo, mas " + result6907 + " <provider.unregisterObjectReader(Bean.class)> não é nulo")
chamada antiga: assertNull(JSON.register(Bean.class, reader))
nova chamada: assertNull(JSON.register(Bean.class, reader), "Era esperado nulo, mas " + result6908 + " <JSON.register(Bean.class, reader)> não é nulo")
chamada antiga: assertSame(reader, JSON.register(Bean.class, reader))
nova chamada: assertSame(reader, JSON.register(Bean.class, reader), "Era esperado objetos iguais, mas  reader é diferente de " + result6909 + " <JSON.register(Bean.class, reader)>")
chamada antiga: assertSame(reader, JSON.register(Bean.class, reader1))
nova chamada: assertSame(reader, JSON.register(Bean.class, reader1), "Era esperado objetos iguais, mas  reader é diferente de " + result6910 + " <JSON.register(Bean.class, reader1)>")
chamada antiga: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1))
nova chamada: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1), "Era esperado objetos iguais, mas  reader1 é diferente de " + result6911 + " <JSON.registerIfAbsent(Bean.class, reader1)>")
chamada antiga: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1))
nova chamada: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader1), "Era esperado objetos iguais, mas  reader1 é diferente de " + result6912 + " <JSON.registerIfAbsent(Bean.class, reader1)>")
chamada antiga: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader))
nova chamada: assertSame(reader1, JSON.registerIfAbsent(Bean.class, reader), "Era esperado objetos iguais, mas  reader1 é diferente de " + result6913 + " <JSON.registerIfAbsent(Bean.class, reader)>")
chamada antiga: assertTrue(provider.register(modoule))
nova chamada: assertTrue(provider.register(modoule), "Era esperado verdadeiro, mas " + result6914 + " <provider.register(modoule)> é falso")
chamada antiga: assertTrue(provider.register(modoule1))
nova chamada: assertTrue(provider.register(modoule1), "Era esperado verdadeiro, mas " + result6915 + " <provider.register(modoule1)> é falso")
chamada antiga: assertTrue(provider.unregister(modoule))
nova chamada: assertTrue(provider.unregister(modoule), "Era esperado verdadeiro, mas " + result6916 + " <provider.unregister(modoule)> é falso")
chamada antiga: assertTrue(provider.unregister(modoule1))
nova chamada: assertTrue(provider.unregister(modoule1), "Era esperado verdadeiro, mas " + result6917 + " <provider.unregister(modoule1)> é falso")
chamada antiga: assertNull(provider.getAutoTypeBeforeHandler())
nova chamada: assertNull(provider.getAutoTypeBeforeHandler(), "Era esperado nulo, mas " + result6918 + " <provider.getAutoTypeBeforeHandler()> não é nulo")
chamada antiga: assertNull(provider.getAutoTypeHandler())
nova chamada: assertNull(provider.getAutoTypeHandler(), "Era esperado nulo, mas " + result6919 + " <provider.getAutoTypeHandler()> não é nulo")
chamada antiga: assertNotNull(provider.getAutoTypeHandler())
nova chamada: assertNotNull(provider.getAutoTypeHandler(), "Era esperado não nulo, mas " + result6920 + " <provider.getAutoTypeHandler()> é nulo")
chamada antiga: assertEquals(1, provider.getAutoTypeList().size())
nova chamada: assertEquals(1, provider.getAutoTypeList().size(), "Era esperado valores iguais, mas  1 é diferente de " + result6921 + " <provider.getAutoTypeList().size()>")
chamada antiga: assertNotNull(provider.getAutoTypeList().get("java.lang.Integer"))
nova chamada: assertNotNull(provider.getAutoTypeList().get("java.lang.Integer"), "Era esperado não nulo, mas " + result6922 + " <provider.getAutoTypeList().get('java.lang.Integer')> é nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result6923 + " <list.size()>")
chamada antiga: assertEquals(Integer.class, list.get(0))
nova chamada: assertEquals(Integer.class, list.get(0), "Era esperado valores iguais, mas  Integer.class é diferente de " + result6924 + " <list.get(0)>")
chamada antiga: assertNull(provider.checkAutoType(null, null, 0))
nova chamada: assertNull(provider.checkAutoType(null, null, 0), "Era esperado nulo, mas " + result6925 + " <provider.checkAutoType(null, null, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("", null, 0))
nova chamada: assertNull(provider.checkAutoType("", null, 0), "Era esperado nulo, mas " + result6926 + " <provider.checkAutoType('', null, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
nova chamada: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0), "Era esperado nulo, mas " + result6927 + " <provider.checkAutoType('[java.lang.Integer', Object.class, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
nova chamada: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0), "Era esperado nulo, mas " + result6928 + " <provider.checkAutoType('[java.lang.Integer', Object.class, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("java.lang.Short", Number.class, 0))
nova chamada: assertNull(provider.checkAutoType("java.lang.Short", Number.class, 0), "Era esperado nulo, mas " + result6929 + " <provider.checkAutoType('java.lang.Short', Number.class, 0)> não é nulo")
chamada antiga: assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, 0))
nova chamada: assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, 0), "Era esperado valores iguais, mas  Short.class é diferente de " + result6930 + " <provider.checkAutoType('java.lang.Short', Number.class, 0)>")
chamada antiga: assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, JSONReader.Feature.SupportAutoType.mask))
nova chamada: assertEquals(Short.class, provider.checkAutoType("java.lang.Short", Number.class, JSONReader.Feature.SupportAutoType.mask), "Era esperado valores iguais, mas  Short.class é diferente de " + result6931 + " <provider.checkAutoType('java.lang.Short', Number.class, JSONReader.Feature.SupportAutoType.mask)>")
chamada antiga: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0))
nova chamada: assertNull(provider.checkAutoType("[java.lang.Integer", Object.class, 0), "Era esperado nulo, mas " + result6932 + " <provider.checkAutoType('[java.lang.Integer', Object.class, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0))
nova chamada: assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0), "Era esperado nulo, mas " + result6933 + " <provider.checkAutoType('[java.lang.Long', Object.class, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0))
nova chamada: assertNull(provider.checkAutoType("[java.lang.Long", Object.class, 0), "Era esperado nulo, mas " + result6934 + " <provider.checkAutoType('[java.lang.Long', Object.class, 0)> não é nulo")
chamada antiga: assertNull(provider.checkAutoType("java.lang.Long", Number.class, 0))
nova chamada: assertNull(provider.checkAutoType("java.lang.Long", Number.class, 0), "Era esperado nulo, mas " + result6935 + " <provider.checkAutoType('java.lang.Long', Number.class, 0)> não é nulo")
chamada antiga: assertEquals(Long.class, provider.checkAutoType("java.lang.Long", Number.class, JSONReader.Feature.SupportAutoType.mask))
nova chamada: assertEquals(Long.class, provider.checkAutoType("java.lang.Long", Number.class, JSONReader.Feature.SupportAutoType.mask), "Era esperado valores iguais, mas  Long.class é diferente de " + result6936 + " <provider.checkAutoType('java.lang.Long', Number.class, JSONReader.Feature.SupportAutoType.mask)>")
chamada antiga: assertEquals(B.class, provider.checkAutoType("com.alibaba.fastjson2.read.ObjectReaderProviderTest$B", A.class, JSONReader.Feature.SupportAutoType.mask))
nova chamada: assertEquals(B.class, provider.checkAutoType("com.alibaba.fastjson2.read.ObjectReaderProviderTest$B", A.class, JSONReader.Feature.SupportAutoType.mask), "Era esperado valores iguais, mas  B.class é diferente de " + result6937 + " <provider.checkAutoType('com.alibaba.fastjson2.read.ObjectReaderProviderTest$B', A.class, JSONReader.Feature.SupportAutoType.mask)>")
chamada antiga: assertEquals(singleSetClass, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(singleSetClass).getObjectClass())
nova chamada: assertEquals(singleSetClass, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(singleSetClass).getObjectClass(), "Era esperado valores iguais, mas  singleSetClass é diferente de " + result6938 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(singleSetClass).getObjectClass()>")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals(101, bean.item.id)
nova chamada: assertEquals(101, bean.item.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.item.id")
chamada antiga: assertEquals("DataWorks", bean.item.name)
nova chamada: assertEquals("DataWorks", bean.item.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.item.name")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result6939 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("ID"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("ID"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6940 + " <Fnv.hashCode64('ID')> é diferente de " + result6941 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6942 + " <Fnv.hashCode64LCase('id')> é diferente de " + result6943 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("ID", lexer.getFieldName())
nova chamada: assertEquals("ID", lexer.getFieldName(), "Era esperado valores iguais, mas  'ID' é diferente de " + result6944 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result6945 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("Name"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("Name"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6946 + " <Fnv.hashCode64('Name')> é diferente de " + result6947 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("name"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("name"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6948 + " <Fnv.hashCode64LCase('name')> é diferente de " + result6949 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("Name", lexer.getFieldName())
nova chamada: assertEquals("Name", lexer.getFieldName(), "Era esperado valores iguais, mas  'Name' é diferente de " + result6950 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("jobs", lexer.readString())
nova chamada: assertEquals("jobs", lexer.readString(), "Era esperado valores iguais, mas  'jobs' é diferente de " + result6951 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result6952 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result6953 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result6954 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("Object Id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("Object Id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6955 + " <Fnv.hashCode64('Object Id')> é diferente de " + result6956 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("object id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("object id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6957 + " <Fnv.hashCode64LCase('object id')> é diferente de " + result6958 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("Object Id", lexer.getFieldName())
nova chamada: assertEquals("Object Id", lexer.getFieldName(), "Era esperado valores iguais, mas  'Object Id' é diferente de " + result6959 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(-123, lexer.readInt32Value())
nova chamada: assertEquals(-123, lexer.readInt32Value(), "Era esperado valores iguais, mas  -123 é diferente de " + result6960 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("Full \" Name"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("Full \" Name"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6961 + " <Fnv.hashCode64('Full \' Name')> é diferente de " + result6962 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("full \" name"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("full \" name"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6963 + " <Fnv.hashCode64LCase('full \' name')> é diferente de " + result6964 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("Full \" Name", lexer.getFieldName())
nova chamada: assertEquals("Full \" Name", lexer.getFieldName(), "Era esperado valores iguais, mas  'Full \' Name' é diferente de " + result6965 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("Steve \" Jobs", lexer.readString())
nova chamada: assertEquals("Steve \" Jobs", lexer.readString(), "Era esperado valores iguais, mas  'Steve \' Jobs' é diferente de " + result6966 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result6967 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result6968 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result6969 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("ab®cd"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("ab®cd"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6970 + " <Fnv.hashCode64('ab®cd')> é diferente de " + result6971 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("ab®cd"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("ab®cd"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6972 + " <Fnv.hashCode64LCase('ab®cd')> é diferente de " + result6973 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("ab®cd", lexer.getFieldName())
nova chamada: assertEquals("ab®cd", lexer.getFieldName(), "Era esperado valores iguais, mas  'ab®cd' é diferente de " + result6974 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result6975 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("¼½¾"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("¼½¾"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6976 + " <Fnv.hashCode64('¼½¾')> é diferente de " + result6977 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("¼½¾"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("¼½¾"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6978 + " <Fnv.hashCode64LCase('¼½¾')> é diferente de " + result6979 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("¼½¾", lexer.getFieldName())
nova chamada: assertEquals("¼½¾", lexer.getFieldName(), "Era esperado valores iguais, mas  '¼½¾' é diferente de " + result6980 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("123µ45", lexer.readString())
nova chamada: assertEquals("123µ45", lexer.readString(), "Era esperado valores iguais, mas  '123µ45' é diferente de " + result6981 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result6982 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result6983 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result6984 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6985 + " <Fnv.hashCode64('id')> é diferente de " + result6986 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6987 + " <Fnv.hashCode64LCase('id')> é diferente de " + result6988 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("id", lexer.getFieldName())
nova chamada: assertEquals("id", lexer.getFieldName(), "Era esperado valores iguais, mas  'id' é diferente de " + result6989 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123456789, lexer.readNumber())
nova chamada: assertEquals(123456789, lexer.readNumber(), "Era esperado valores iguais, mas  123456789 é diferente de " + result6990 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6991 + " <Fnv.hashCode64('v0')> é diferente de " + result6992 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6993 + " <Fnv.hashCode64LCase('v0')> é diferente de " + result6994 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v0", lexer.getFieldName())
nova chamada: assertEquals("v0", lexer.getFieldName(), "Era esperado valores iguais, mas  'v0' é diferente de " + result6995 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readNumber())
nova chamada: assertEquals(123, lexer.readNumber(), "Era esperado valores iguais, mas  123 é diferente de " + result6996 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result6997 + " <Fnv.hashCode64('v1')> é diferente de " + result6998 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result6999 + " <Fnv.hashCode64LCase('v1')> é diferente de " + result7000 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v1", lexer.getFieldName())
nova chamada: assertEquals("v1", lexer.getFieldName(), "Era esperado valores iguais, mas  'v1' é diferente de " + result7001 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123456789012345678L, lexer.readNumber())
nova chamada: assertEquals(123456789012345678L, lexer.readNumber(), "Era esperado valores iguais, mas  123456789012345678L é diferente de " + result7002 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7003 + " <Fnv.hashCode64('v2')> é diferente de " + result7004 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7005 + " <Fnv.hashCode64LCase('v2')> é diferente de " + result7006 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v2", lexer.getFieldName())
nova chamada: assertEquals("v2", lexer.getFieldName(), "Era esperado valores iguais, mas  'v2' é diferente de " + result7007 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readNumber())
nova chamada: assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readNumber(), "Era esperado valores iguais, mas  new BigInteger('123456789012345678901234567890') é diferente de " + result7008 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7009 + " <Fnv.hashCode64('v3')> é diferente de " + result7010 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7011 + " <Fnv.hashCode64LCase('v3')> é diferente de " + result7012 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v3", lexer.getFieldName())
nova chamada: assertEquals("v3", lexer.getFieldName(), "Era esperado valores iguais, mas  'v3' é diferente de " + result7013 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(new BigDecimal("123.45"), lexer.readNumber())
nova chamada: assertEquals(new BigDecimal("123.45"), lexer.readNumber(), "Era esperado valores iguais, mas  new BigDecimal('123.45') é diferente de " + result7014 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7015 + " <Fnv.hashCode64('v4')> é diferente de " + result7016 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7017 + " <Fnv.hashCode64LCase('v4')> é diferente de " + result7018 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v4", lexer.getFieldName())
nova chamada: assertEquals("v4", lexer.getFieldName(), "Era esperado valores iguais, mas  'v4' é diferente de " + result7019 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123e4, lexer.readNumber())
nova chamada: assertEquals(123e4, lexer.readNumber(), "Era esperado valores iguais, mas  123e4 é diferente de " + result7020 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7021 + " <Fnv.hashCode64('v5')> é diferente de " + result7022 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7023 + " <Fnv.hashCode64LCase('v5')> é diferente de " + result7024 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v5", lexer.getFieldName())
nova chamada: assertEquals("v5", lexer.getFieldName(), "Era esperado valores iguais, mas  'v5' é diferente de " + result7025 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7026 + " <Fnv.hashCode64('v6')> é diferente de " + result7027 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7028 + " <Fnv.hashCode64LCase('v6')> é diferente de " + result7029 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v6", lexer.getFieldName())
nova chamada: assertEquals("v6", lexer.getFieldName(), "Era esperado valores iguais, mas  'v6' é diferente de " + result7030 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readNumber())
nova chamada: assertNull(lexer.readNumber(), "Era esperado nulo, mas " + result7031 + " <lexer.readNumber()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7032 + " <Fnv.hashCode64('v7')> é diferente de " + result7033 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7034 + " <Fnv.hashCode64LCase('v7')> é diferente de " + result7035 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v7", lexer.getFieldName())
nova chamada: assertEquals("v7", lexer.getFieldName(), "Era esperado valores iguais, mas  'v7' é diferente de " + result7036 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readNumber())
nova chamada: assertNull(lexer.readNumber(), "Era esperado nulo, mas " + result7037 + " <lexer.readNumber()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7038 + " <Fnv.hashCode64('v8')> é diferente de " + result7039 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7040 + " <Fnv.hashCode64LCase('v8')> é diferente de " + result7041 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v8", lexer.getFieldName())
nova chamada: assertEquals("v8", lexer.getFieldName(), "Era esperado valores iguais, mas  'v8' é diferente de " + result7042 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1, lexer.readNumber())
nova chamada: assertEquals(1, lexer.readNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result7043 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7044 + " <Fnv.hashCode64('v9')> é diferente de " + result7045 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7046 + " <Fnv.hashCode64LCase('v9')> é diferente de " + result7047 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v9", lexer.getFieldName())
nova chamada: assertEquals("v9", lexer.getFieldName(), "Era esperado valores iguais, mas  'v9' é diferente de " + result7048 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readNumber())
nova chamada: assertEquals(0, lexer.readNumber(), "Era esperado valores iguais, mas  0 é diferente de " + result7049 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7050 + " <Fnv.hashCode64('v10')> é diferente de " + result7051 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7052 + " <Fnv.hashCode64LCase('v10')> é diferente de " + result7053 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v10", lexer.getFieldName())
nova chamada: assertEquals("v10", lexer.getFieldName(), "Era esperado valores iguais, mas  'v10' é diferente de " + result7054 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readNumber())
nova chamada: assertEquals(123, lexer.readNumber(), "Era esperado valores iguais, mas  123 é diferente de " + result7055 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7056 + " <Fnv.hashCode64('v11')> é diferente de " + result7057 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7058 + " <Fnv.hashCode64LCase('v11')> é diferente de " + result7059 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v11", lexer.getFieldName())
nova chamada: assertEquals("v11", lexer.getFieldName(), "Era esperado valores iguais, mas  'v11' é diferente de " + result7060 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readNumber())
nova chamada: assertNull(lexer.readNumber(), "Era esperado nulo, mas " + result7061 + " <lexer.readNumber()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7062 + " <Fnv.hashCode64('v12')> é diferente de " + result7063 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7064 + " <Fnv.hashCode64LCase('v12')> é diferente de " + result7065 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v12", lexer.getFieldName())
nova chamada: assertEquals("v12", lexer.getFieldName(), "Era esperado valores iguais, mas  'v12' é diferente de " + result7066 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1234, lexer.readNumber())
nova chamada: assertEquals(1234, lexer.readNumber(), "Era esperado valores iguais, mas  1234 é diferente de " + result7067 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7068 + " <Fnv.hashCode64('v13')> é diferente de " + result7069 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7070 + " <Fnv.hashCode64LCase('v13')> é diferente de " + result7071 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v13", lexer.getFieldName())
nova chamada: assertEquals("v13", lexer.getFieldName(), "Era esperado valores iguais, mas  'v13' é diferente de " + result7072 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(new BigDecimal("12.34"), lexer.readNumber())
nova chamada: assertEquals(new BigDecimal("12.34"), lexer.readNumber(), "Era esperado valores iguais, mas  new BigDecimal('12.34') é diferente de " + result7073 + " <lexer.readNumber()>")
chamada antiga: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7074 + " <Fnv.hashCode64('v14')> é diferente de " + result7075 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7076 + " <Fnv.hashCode64LCase('v14')> é diferente de " + result7077 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v14", lexer.getFieldName())
nova chamada: assertEquals("v14", lexer.getFieldName(), "Era esperado valores iguais, mas  'v14' é diferente de " + result7078 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readNumber())
nova chamada: assertNull(lexer.readNumber(), "Era esperado nulo, mas " + result7079 + " <lexer.readNumber()> não é nulo")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7080 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7081 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7082 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("序号"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("序号"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7083 + " <Fnv.hashCode64('序号')> é diferente de " + result7084 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals("序号", lexer.getFieldName())
nova chamada: assertEquals("序号", lexer.getFieldName(), "Era esperado valores iguais, mas  '序号' é diferente de " + result7085 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7086 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("名称"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("名称"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7087 + " <Fnv.hashCode64('名称')> é diferente de " + result7088 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals("名称", lexer.getFieldName())
nova chamada: assertEquals("名称", lexer.getFieldName(), "Era esperado valores iguais, mas  '名称' é diferente de " + result7089 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("计算平台", lexer.readString())
nova chamada: assertEquals("计算平台", lexer.readString(), "Era esperado valores iguais, mas  '计算平台' é diferente de " + result7090 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7091 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7092 + " <lexer.current()>")
chamada antiga: assertEquals(8, map.size())
nova chamada: assertEquals(8, map.size(), "Era esperado valores iguais, mas  8 é diferente de " + result7093 + " <map.size()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7094 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7095 + " <Fnv.hashCode64('id')> é diferente de " + result7096 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7097 + " <Fnv.hashCode64LCase('id')> é diferente de " + result7098 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("id", lexer.getFieldName())
nova chamada: assertEquals("id", lexer.getFieldName(), "Era esperado valores iguais, mas  'id' é diferente de " + result7099 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123456789, lexer.readInt32Value())
nova chamada: assertEquals(123456789, lexer.readInt32Value(), "Era esperado valores iguais, mas  123456789 é diferente de " + result7100 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7101 + " <Fnv.hashCode64('v0')> é diferente de " + result7102 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7103 + " <Fnv.hashCode64LCase('v0')> é diferente de " + result7104 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v0", lexer.getFieldName())
nova chamada: assertEquals("v0", lexer.getFieldName(), "Era esperado valores iguais, mas  'v0' é diferente de " + result7105 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(-123, lexer.readInt32Value())
nova chamada: assertEquals(-123, lexer.readInt32Value(), "Era esperado valores iguais, mas  -123 é diferente de " + result7106 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7107 + " <Fnv.hashCode64('v1')> é diferente de " + result7108 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7109 + " <Fnv.hashCode64LCase('v1')> é diferente de " + result7110 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v1", lexer.getFieldName())
nova chamada: assertEquals("v1", lexer.getFieldName(), "Era esperado valores iguais, mas  'v1' é diferente de " + result7111 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7112 + " <Fnv.hashCode64('v2')> é diferente de " + result7113 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7114 + " <Fnv.hashCode64LCase('v2')> é diferente de " + result7115 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v2", lexer.getFieldName())
nova chamada: assertEquals("v2", lexer.getFieldName(), "Era esperado valores iguais, mas  'v2' é diferente de " + result7116 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7117 + " <Fnv.hashCode64('v3')> é diferente de " + result7118 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7119 + " <Fnv.hashCode64LCase('v3')> é diferente de " + result7120 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v3", lexer.getFieldName())
nova chamada: assertEquals("v3", lexer.getFieldName(), "Era esperado valores iguais, mas  'v3' é diferente de " + result7121 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7122 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7123 + " <Fnv.hashCode64('v4')> é diferente de " + result7124 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7125 + " <Fnv.hashCode64LCase('v4')> é diferente de " + result7126 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v4", lexer.getFieldName())
nova chamada: assertEquals("v4", lexer.getFieldName(), "Era esperado valores iguais, mas  'v4' é diferente de " + result7127 + " <lexer.getFieldName()>")
chamada antiga: assertEquals((int) (123e4), lexer.readInt32Value())
nova chamada: assertEquals((int) (123e4), lexer.readInt32Value(), "Era esperado valores iguais, mas  (int) (123e4) é diferente de " + result7128 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7129 + " <Fnv.hashCode64('v5')> é diferente de " + result7130 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7131 + " <Fnv.hashCode64LCase('v5')> é diferente de " + result7132 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v5", lexer.getFieldName())
nova chamada: assertEquals("v5", lexer.getFieldName(), "Era esperado valores iguais, mas  'v5' é diferente de " + result7133 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7134 + " <Fnv.hashCode64('v6')> é diferente de " + result7135 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7136 + " <Fnv.hashCode64LCase('v6')> é diferente de " + result7137 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v6", lexer.getFieldName())
nova chamada: assertEquals("v6", lexer.getFieldName(), "Era esperado valores iguais, mas  'v6' é diferente de " + result7138 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt32Value())
nova chamada: assertEquals(0, lexer.readInt32Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7139 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7140 + " <Fnv.hashCode64('v7')> é diferente de " + result7141 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7142 + " <Fnv.hashCode64LCase('v7')> é diferente de " + result7143 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v7", lexer.getFieldName())
nova chamada: assertEquals("v7", lexer.getFieldName(), "Era esperado valores iguais, mas  'v7' é diferente de " + result7144 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt32Value())
nova chamada: assertEquals(0, lexer.readInt32Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7145 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7146 + " <Fnv.hashCode64('v8')> é diferente de " + result7147 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7148 + " <Fnv.hashCode64LCase('v8')> é diferente de " + result7149 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v8", lexer.getFieldName())
nova chamada: assertEquals("v8", lexer.getFieldName(), "Era esperado valores iguais, mas  'v8' é diferente de " + result7150 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1, lexer.readInt32Value())
nova chamada: assertEquals(1, lexer.readInt32Value(), "Era esperado valores iguais, mas  1 é diferente de " + result7151 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7152 + " <Fnv.hashCode64('v9')> é diferente de " + result7153 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7154 + " <Fnv.hashCode64LCase('v9')> é diferente de " + result7155 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v9", lexer.getFieldName())
nova chamada: assertEquals("v9", lexer.getFieldName(), "Era esperado valores iguais, mas  'v9' é diferente de " + result7156 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt32Value())
nova chamada: assertEquals(0, lexer.readInt32Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7157 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7158 + " <Fnv.hashCode64('v10')> é diferente de " + result7159 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7160 + " <Fnv.hashCode64LCase('v10')> é diferente de " + result7161 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v10", lexer.getFieldName())
nova chamada: assertEquals("v10", lexer.getFieldName(), "Era esperado valores iguais, mas  'v10' é diferente de " + result7162 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7163 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7164 + " <Fnv.hashCode64('v11')> é diferente de " + result7165 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7166 + " <Fnv.hashCode64LCase('v11')> é diferente de " + result7167 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v11", lexer.getFieldName())
nova chamada: assertEquals("v11", lexer.getFieldName(), "Era esperado valores iguais, mas  'v11' é diferente de " + result7168 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt32Value())
nova chamada: assertEquals(0, lexer.readInt32Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7169 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7170 + " <Fnv.hashCode64('v12')> é diferente de " + result7171 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7172 + " <Fnv.hashCode64LCase('v12')> é diferente de " + result7173 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v12", lexer.getFieldName())
nova chamada: assertEquals("v12", lexer.getFieldName(), "Era esperado valores iguais, mas  'v12' é diferente de " + result7174 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1234, lexer.readInt32Value())
nova chamada: assertEquals(1234, lexer.readInt32Value(), "Era esperado valores iguais, mas  1234 é diferente de " + result7175 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7176 + " <Fnv.hashCode64('v13')> é diferente de " + result7177 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7178 + " <Fnv.hashCode64LCase('v13')> é diferente de " + result7179 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v13", lexer.getFieldName())
nova chamada: assertEquals("v13", lexer.getFieldName(), "Era esperado valores iguais, mas  'v13' é diferente de " + result7180 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(12, lexer.readInt32Value())
nova chamada: assertEquals(12, lexer.readInt32Value(), "Era esperado valores iguais, mas  12 é diferente de " + result7181 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7182 + " <Fnv.hashCode64('v14')> é diferente de " + result7183 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7184 + " <Fnv.hashCode64LCase('v14')> é diferente de " + result7185 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v14", lexer.getFieldName())
nova chamada: assertEquals("v14", lexer.getFieldName(), "Era esperado valores iguais, mas  'v14' é diferente de " + result7186 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7187 + " <Fnv.hashCode64('v15')> é diferente de " + result7188 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7189 + " <Fnv.hashCode64LCase('v15')> é diferente de " + result7190 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v15", lexer.getFieldName())
nova chamada: assertEquals("v15", lexer.getFieldName(), "Era esperado valores iguais, mas  'v15' é diferente de " + result7191 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7192 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7193 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7194 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7195 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7196 + " <Fnv.hashCode64LCase('id')> é diferente de " + result7197 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(123, lexer.readInt32Value())
nova chamada: assertEquals(123, lexer.readInt32Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7198 + " <lexer.readInt32Value()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("name"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64LCase("name"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7199 + " <Fnv.hashCode64LCase('name')> é diferente de " + result7200 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals("jobs", lexer.readString())
nova chamada: assertEquals("jobs", lexer.readString(), "Era esperado valores iguais, mas  'jobs' é diferente de " + result7201 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7202 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7203 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7204 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7205 + " <Fnv.hashCode64('id')> é diferente de " + result7206 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7207 + " <Fnv.hashCode64LCase('id')> é diferente de " + result7208 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("id", lexer.getFieldName())
nova chamada: assertEquals("id", lexer.getFieldName(), "Era esperado valores iguais, mas  'id' é diferente de " + result7209 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("123456789", lexer.readString())
nova chamada: assertEquals("123456789", lexer.readString(), "Era esperado valores iguais, mas  '123456789' é diferente de " + result7210 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7211 + " <Fnv.hashCode64('v0')> é diferente de " + result7212 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7213 + " <Fnv.hashCode64LCase('v0')> é diferente de " + result7214 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v0", lexer.getFieldName())
nova chamada: assertEquals("v0", lexer.getFieldName(), "Era esperado valores iguais, mas  'v0' é diferente de " + result7215 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("-123", lexer.readString())
nova chamada: assertEquals("-123", lexer.readString(), "Era esperado valores iguais, mas  '-123' é diferente de " + result7216 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7217 + " <Fnv.hashCode64('v1')> é diferente de " + result7218 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7219 + " <Fnv.hashCode64LCase('v1')> é diferente de " + result7220 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v1", lexer.getFieldName())
nova chamada: assertEquals("v1", lexer.getFieldName(), "Era esperado valores iguais, mas  'v1' é diferente de " + result7221 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("123456789012345678", lexer.readString())
nova chamada: assertEquals("123456789012345678", lexer.readString(), "Era esperado valores iguais, mas  '123456789012345678' é diferente de " + result7222 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7223 + " <Fnv.hashCode64('v2')> é diferente de " + result7224 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7225 + " <Fnv.hashCode64LCase('v2')> é diferente de " + result7226 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v2", lexer.getFieldName())
nova chamada: assertEquals("v2", lexer.getFieldName(), "Era esperado valores iguais, mas  'v2' é diferente de " + result7227 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("-123456789012345678901234567890", lexer.readString())
nova chamada: assertEquals("-123456789012345678901234567890", lexer.readString(), "Era esperado valores iguais, mas  '-123456789012345678901234567890' é diferente de " + result7228 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7229 + " <Fnv.hashCode64('v3')> é diferente de " + result7230 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7231 + " <Fnv.hashCode64LCase('v3')> é diferente de " + result7232 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v3", lexer.getFieldName())
nova chamada: assertEquals("v3", lexer.getFieldName(), "Era esperado valores iguais, mas  'v3' é diferente de " + result7233 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("123.45", lexer.readString())
nova chamada: assertEquals("123.45", lexer.readString(), "Era esperado valores iguais, mas  '123.45' é diferente de " + result7234 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7235 + " <Fnv.hashCode64('v4')> é diferente de " + result7236 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7237 + " <Fnv.hashCode64LCase('v4')> é diferente de " + result7238 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v4", lexer.getFieldName())
nova chamada: assertEquals("v4", lexer.getFieldName(), "Era esperado valores iguais, mas  'v4' é diferente de " + result7239 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("1230000.0", lexer.readString())
nova chamada: assertEquals("1230000.0", lexer.readString(), "Era esperado valores iguais, mas  '1230000.0' é diferente de " + result7240 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7241 + " <Fnv.hashCode64('v5')> é diferente de " + result7242 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7243 + " <Fnv.hashCode64LCase('v5')> é diferente de " + result7244 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v5", lexer.getFieldName())
nova chamada: assertEquals("v5", lexer.getFieldName(), "Era esperado valores iguais, mas  'v5' é diferente de " + result7245 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("abcdefg", lexer.readString())
nova chamada: assertEquals("abcdefg", lexer.readString(), "Era esperado valores iguais, mas  'abcdefg' é diferente de " + result7246 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7247 + " <Fnv.hashCode64('v6')> é diferente de " + result7248 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7249 + " <Fnv.hashCode64LCase('v6')> é diferente de " + result7250 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v6", lexer.getFieldName())
nova chamada: assertEquals("v6", lexer.getFieldName(), "Era esperado valores iguais, mas  'v6' é diferente de " + result7251 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readString())
nova chamada: assertNull(lexer.readString(), "Era esperado nulo, mas " + result7252 + " <lexer.readString()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7253 + " <Fnv.hashCode64('v7')> é diferente de " + result7254 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7255 + " <Fnv.hashCode64LCase('v7')> é diferente de " + result7256 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v7", lexer.getFieldName())
nova chamada: assertEquals("v7", lexer.getFieldName(), "Era esperado valores iguais, mas  'v7' é diferente de " + result7257 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("null", lexer.readString())
nova chamada: assertEquals("null", lexer.readString(), "Era esperado valores iguais, mas  'null' é diferente de " + result7258 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7259 + " <Fnv.hashCode64('v8')> é diferente de " + result7260 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7261 + " <Fnv.hashCode64LCase('v8')> é diferente de " + result7262 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v8", lexer.getFieldName())
nova chamada: assertEquals("v8", lexer.getFieldName(), "Era esperado valores iguais, mas  'v8' é diferente de " + result7263 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("true", lexer.readString())
nova chamada: assertEquals("true", lexer.readString(), "Era esperado valores iguais, mas  'true' é diferente de " + result7264 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7265 + " <Fnv.hashCode64('v9')> é diferente de " + result7266 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7267 + " <Fnv.hashCode64LCase('v9')> é diferente de " + result7268 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v9", lexer.getFieldName())
nova chamada: assertEquals("v9", lexer.getFieldName(), "Era esperado valores iguais, mas  'v9' é diferente de " + result7269 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("false", lexer.readString())
nova chamada: assertEquals("false", lexer.readString(), "Era esperado valores iguais, mas  'false' é diferente de " + result7270 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7271 + " <Fnv.hashCode64('v10')> é diferente de " + result7272 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7273 + " <Fnv.hashCode64LCase('v10')> é diferente de " + result7274 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v10", lexer.getFieldName())
nova chamada: assertEquals("v10", lexer.getFieldName(), "Era esperado valores iguais, mas  'v10' é diferente de " + result7275 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("{\"val\":123}", lexer.readString())
nova chamada: assertEquals("{\"val\":123}", lexer.readString(), "Era esperado valores iguais, mas  '{\'val\':123}' é diferente de " + result7276 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7277 + " <Fnv.hashCode64('v11')> é diferente de " + result7278 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7279 + " <Fnv.hashCode64LCase('v11')> é diferente de " + result7280 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v11", lexer.getFieldName())
nova chamada: assertEquals("v11", lexer.getFieldName(), "Era esperado valores iguais, mas  'v11' é diferente de " + result7281 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("{}", lexer.readString())
nova chamada: assertEquals("{}", lexer.readString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result7282 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7283 + " <Fnv.hashCode64('v12')> é diferente de " + result7284 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7285 + " <Fnv.hashCode64LCase('v12')> é diferente de " + result7286 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v12", lexer.getFieldName())
nova chamada: assertEquals("v12", lexer.getFieldName(), "Era esperado valores iguais, mas  'v12' é diferente de " + result7287 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("[1234]", lexer.readString())
nova chamada: assertEquals("[1234]", lexer.readString(), "Era esperado valores iguais, mas  '[1234]' é diferente de " + result7288 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7289 + " <Fnv.hashCode64('v13')> é diferente de " + result7290 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7291 + " <Fnv.hashCode64LCase('v13')> é diferente de " + result7292 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v13", lexer.getFieldName())
nova chamada: assertEquals("v13", lexer.getFieldName(), "Era esperado valores iguais, mas  'v13' é diferente de " + result7293 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("[12.34]", lexer.readString())
nova chamada: assertEquals("[12.34]", lexer.readString(), "Era esperado valores iguais, mas  '[12.34]' é diferente de " + result7294 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7295 + " <Fnv.hashCode64('v14')> é diferente de " + result7296 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7297 + " <Fnv.hashCode64LCase('v14')> é diferente de " + result7298 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v14", lexer.getFieldName())
nova chamada: assertEquals("v14", lexer.getFieldName(), "Era esperado valores iguais, mas  'v14' é diferente de " + result7299 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("[null]", lexer.readString())
nova chamada: assertEquals("[null]", lexer.readString(), "Era esperado valores iguais, mas  '[null]' é diferente de " + result7300 + " <lexer.readString()>")
chamada antiga: assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v15"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7301 + " <Fnv.hashCode64('v15')> é diferente de " + result7302 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v15"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7303 + " <Fnv.hashCode64LCase('v15')> é diferente de " + result7304 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v15", lexer.getFieldName())
nova chamada: assertEquals("v15", lexer.getFieldName(), "Era esperado valores iguais, mas  'v15' é diferente de " + result7305 + " <lexer.getFieldName()>")
chamada antiga: assertEquals("[\"123\"]", lexer.readString())
nova chamada: assertEquals("[\"123\"]", lexer.readString(), "Era esperado valores iguais, mas  '[\'123\']' é diferente de " + result7306 + " <lexer.readString()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7307 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7308 + " <lexer.current()>")
chamada antiga: assertEquals(6, array.size())
nova chamada: assertEquals(6, array.size(), "Era esperado valores iguais, mas  6 é diferente de " + result7309 + " <array.size()>")
chamada antiga: assertEquals(1, array.get(0))
nova chamada: assertEquals(1, array.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result7310 + " <array.get(0)>")
chamada antiga: assertEquals(2L, array.get(1))
nova chamada: assertEquals(2L, array.get(1), "Era esperado valores iguais, mas  2L é diferente de " + result7311 + " <array.get(1)>")
chamada antiga: assertEquals(3F, array.get(2))
nova chamada: assertEquals(3F, array.get(2), "Era esperado valores iguais, mas  3F é diferente de " + result7312 + " <array.get(2)>")
chamada antiga: assertEquals(4D, array.get(3))
nova chamada: assertEquals(4D, array.get(3), "Era esperado valores iguais, mas  4D é diferente de " + result7313 + " <array.get(3)>")
chamada antiga: assertEquals((byte) 5, array.get(4))
nova chamada: assertEquals((byte) 5, array.get(4), "Era esperado valores iguais, mas  (byte) 5 é diferente de " + result7314 + " <array.get(4)>")
chamada antiga: assertEquals((short) 6, array.get(5))
nova chamada: assertEquals((short) 6, array.get(5), "Era esperado valores iguais, mas  (short) 6 é diferente de " + result7315 + " <array.get(5)>")
chamada antiga: assertEquals(6, array2.size())
nova chamada: assertEquals(6, array2.size(), "Era esperado valores iguais, mas  6 é diferente de " + result7316 + " <array2.size()>")
chamada antiga: assertEquals(1, array2.get(0))
nova chamada: assertEquals(1, array2.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result7317 + " <array2.get(0)>")
chamada antiga: assertEquals(2L, array2.get(1))
nova chamada: assertEquals(2L, array2.get(1), "Era esperado valores iguais, mas  2L é diferente de " + result7318 + " <array2.get(1)>")
chamada antiga: assertEquals(3F, array2.get(2))
nova chamada: assertEquals(3F, array2.get(2), "Era esperado valores iguais, mas  3F é diferente de " + result7319 + " <array2.get(2)>")
chamada antiga: assertEquals(4D, array2.get(3))
nova chamada: assertEquals(4D, array2.get(3), "Era esperado valores iguais, mas  4D é diferente de " + result7320 + " <array2.get(3)>")
chamada antiga: assertEquals((byte) 5, array2.get(4))
nova chamada: assertEquals((byte) 5, array2.get(4), "Era esperado valores iguais, mas  (byte) 5 é diferente de " + result7321 + " <array2.get(4)>")
chamada antiga: assertEquals((short) 6, array2.get(5))
nova chamada: assertEquals((short) 6, array2.get(5), "Era esperado valores iguais, mas  (short) 6 é diferente de " + result7322 + " <array2.get(5)>")
chamada antiga: assertEquals(6, array3.size())
nova chamada: assertEquals(6, array3.size(), "Era esperado valores iguais, mas  6 é diferente de " + result7323 + " <array3.size()>")
chamada antiga: assertEquals(1, array3.get(0))
nova chamada: assertEquals(1, array3.get(0), "Era esperado valores iguais, mas  1 é diferente de " + result7324 + " <array3.get(0)>")
chamada antiga: assertEquals(2L, array3.get(1))
nova chamada: assertEquals(2L, array3.get(1), "Era esperado valores iguais, mas  2L é diferente de " + result7325 + " <array3.get(1)>")
chamada antiga: assertEquals(3F, array3.get(2))
nova chamada: assertEquals(3F, array3.get(2), "Era esperado valores iguais, mas  3F é diferente de " + result7326 + " <array3.get(2)>")
chamada antiga: assertEquals(4D, array3.get(3))
nova chamada: assertEquals(4D, array3.get(3), "Era esperado valores iguais, mas  4D é diferente de " + result7327 + " <array3.get(3)>")
chamada antiga: assertEquals((byte) 5, array3.get(4))
nova chamada: assertEquals((byte) 5, array3.get(4), "Era esperado valores iguais, mas  (byte) 5 é diferente de " + result7328 + " <array3.get(4)>")
chamada antiga: assertEquals((short) 6, array3.get(5))
nova chamada: assertEquals((short) 6, array3.get(5), "Era esperado valores iguais, mas  (short) 6 é diferente de " + result7329 + " <array3.get(5)>")
chamada antiga: assertEquals(123, id)
nova chamada: assertEquals(123, id, "Era esperado valores iguais, mas  123 é diferente de " + " id")
chamada antiga: assertEquals(123456789012345678L, id)
nova chamada: assertEquals(123456789012345678L, id, "Era esperado valores iguais, mas  123456789012345678L é diferente de " + " id")
chamada antiga: assertEquals("12345678901234567890", id.toString())
nova chamada: assertEquals("12345678901234567890", id.toString(), "Era esperado valores iguais, mas  '12345678901234567890' é diferente de " + result7330 + " <id.toString()>")
chamada antiga: assertEquals(-123456789012345678L, id)
nova chamada: assertEquals(-123456789012345678L, id, "Era esperado valores iguais, mas  -123456789012345678L é diferente de " + " id")
chamada antiga: assertEquals("-12345678901234567890", id.toString())
nova chamada: assertEquals("-12345678901234567890", id.toString(), "Era esperado valores iguais, mas  '-12345678901234567890' é diferente de " + result7331 + " <id.toString()>")
chamada antiga: assertEquals(1, signum)
nova chamada: assertEquals(1, signum, "Era esperado valores iguais, mas  1 é diferente de " + " signum")
chamada antiga: assertEquals(mag2, -1420514932)
nova chamada: assertEquals(mag2, -1420514932, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1420514932")
chamada antiga: assertEquals(mag3, -350287150)
nova chamada: assertEquals(mag3, -350287150, "Era esperado valores iguais, mas  mag3 é diferente de " + " -350287150")
chamada antiga: assertEquals(-1, signum)
nova chamada: assertEquals(-1, signum, "Era esperado valores iguais, mas  -1 é diferente de " + " signum")
chamada antiga: assertEquals(mag0, 155824374)
nova chamada: assertEquals(mag0, 155824374, "Era esperado valores iguais, mas  mag0 é diferente de " + " 155824374")
chamada antiga: assertEquals(mag1, -268291309)
nova chamada: assertEquals(mag1, -268291309, "Era esperado valores iguais, mas  mag1 é diferente de " + " -268291309")
chamada antiga: assertEquals(mag2, -1001811888)
nova chamada: assertEquals(mag2, -1001811888, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1001811888")
chamada antiga: assertEquals(mag3, -566693042)
nova chamada: assertEquals(mag3, -566693042, "Era esperado valores iguais, mas  mag3 é diferente de " + " -566693042")
chamada antiga: assertEquals(-1, signum)
nova chamada: assertEquals(-1, signum, "Era esperado valores iguais, mas  -1 é diferente de " + " signum")
chamada antiga: assertEquals(mag2, -1420514932)
nova chamada: assertEquals(mag2, -1420514932, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1420514932")
chamada antiga: assertEquals(mag3, -350287150)
nova chamada: assertEquals(mag3, -350287150, "Era esperado valores iguais, mas  mag3 é diferente de " + " -350287150")
chamada antiga: assertEquals(-1, signum)
nova chamada: assertEquals(-1, signum, "Era esperado valores iguais, mas  -1 é diferente de " + " signum")
chamada antiga: assertEquals(mag2, -1420514932)
nova chamada: assertEquals(mag2, -1420514932, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1420514932")
chamada antiga: assertEquals(mag3, -350287150)
nova chamada: assertEquals(mag3, -350287150, "Era esperado valores iguais, mas  mag3 é diferente de " + " -350287150")
chamada antiga: assertEquals(-1, signum)
nova chamada: assertEquals(-1, signum, "Era esperado valores iguais, mas  -1 é diferente de " + " signum")
chamada antiga: assertEquals(mag2, -1420514932)
nova chamada: assertEquals(mag2, -1420514932, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1420514932")
chamada antiga: assertEquals(mag3, -350287150)
nova chamada: assertEquals(mag3, -350287150, "Era esperado valores iguais, mas  mag3 é diferente de " + " -350287150")
chamada antiga: assertEquals(-1, signum)
nova chamada: assertEquals(-1, signum, "Era esperado valores iguais, mas  -1 é diferente de " + " signum")
chamada antiga: assertEquals(mag2, -1420514932)
nova chamada: assertEquals(mag2, -1420514932, "Era esperado valores iguais, mas  mag2 é diferente de " + " -1420514932")
chamada antiga: assertEquals(mag3, -350287150)
nova chamada: assertEquals(mag3, -350287150, "Era esperado valores iguais, mas  mag3 é diferente de " + " -350287150")
chamada antiga: assertEquals(str, num.toString())
nova chamada: assertEquals(str, num.toString(), "Era esperado valores iguais, mas  str é diferente de " + result7332 + " <num.toString()>")
chamada antiga: assertEquals(str, num.toString())
nova chamada: assertEquals(str, num.toString(), "Era esperado valores iguais, mas  str é diferente de " + result7333 + " <num.toString()>")
chamada antiga: assertEquals(str, num.toString())
nova chamada: assertEquals(str, num.toString(), "Era esperado valores iguais, mas  str é diferente de " + result7334 + " <num.toString()>")
chamada antiga: assertEquals(str, num.toString())
nova chamada: assertEquals(str, num.toString(), "Era esperado valores iguais, mas  str é diferente de " + result7335 + " <num.toString()>")
chamada antiga: assertEquals(str, num.toString())
nova chamada: assertEquals(str, num.toString(), "Era esperado valores iguais, mas  str é diferente de " + result7336 + " <num.toString()>")
chamada antiga: assertEquals("{\"type\":2,\"id\":\"cxcc\",\"uid\":\"uid\",\"data\":[{\"serviceTicket\":\"aa\",\"url\":\"111\"},{\"serviceTicket\":\"bbb\",\"url\":\"222\"}]}", jo.toJSONString())
nova chamada: assertEquals("{\"type\":2,\"id\":\"cxcc\",\"uid\":\"uid\",\"data\":[{\"serviceTicket\":\"aa\",\"url\":\"111\"},{\"serviceTicket\":\"bbb\",\"url\":\"222\"}]}", jo.toJSONString(), "Era esperado valores iguais, mas  '{\'type\':2,\'id\':\'cxcc\',\'uid\':\'uid\',\'data\':[{\'serviceTicket\':\'aa\',\'url\':\'111\'},{\'serviceTicket\':\'bbb\',\'url\':\'222\'}]}' é diferente de " + result7337 + " <jo.toJSONString()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7338 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7339 + " <Fnv.hashCode64('id')> é diferente de " + result7340 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7341 + " <Fnv.hashCode64LCase('id')> é diferente de " + result7342 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("id", lexer.getFieldName())
nova chamada: assertEquals("id", lexer.getFieldName(), "Era esperado valores iguais, mas  'id' é diferente de " + result7343 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(123456789), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(123456789), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7344 + " <BigInteger.valueOf(123456789)> é diferente de " + result7345 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7346 + " <Fnv.hashCode64('v0')> é diferente de " + result7347 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7348 + " <Fnv.hashCode64LCase('v0')> é diferente de " + result7349 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v0", lexer.getFieldName())
nova chamada: assertEquals("v0", lexer.getFieldName(), "Era esperado valores iguais, mas  'v0' é diferente de " + result7350 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7351 + " <BigInteger.valueOf(123)> é diferente de " + result7352 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7353 + " <Fnv.hashCode64('v1')> é diferente de " + result7354 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7355 + " <Fnv.hashCode64LCase('v1')> é diferente de " + result7356 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v1", lexer.getFieldName())
nova chamada: assertEquals("v1", lexer.getFieldName(), "Era esperado valores iguais, mas  'v1' é diferente de " + result7357 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(123456789012345678L), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(123456789012345678L), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7358 + " <BigInteger.valueOf(123456789012345678L)> é diferente de " + result7359 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7360 + " <Fnv.hashCode64('v2')> é diferente de " + result7361 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7362 + " <Fnv.hashCode64LCase('v2')> é diferente de " + result7363 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v2", lexer.getFieldName())
nova chamada: assertEquals("v2", lexer.getFieldName(), "Era esperado valores iguais, mas  'v2' é diferente de " + result7364 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readBigInteger())
nova chamada: assertEquals(new BigInteger("123456789012345678901234567890"), lexer.readBigInteger(), "Era esperado valores iguais, mas  new BigInteger('123456789012345678901234567890') é diferente de " + result7365 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7366 + " <Fnv.hashCode64('v3')> é diferente de " + result7367 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7368 + " <Fnv.hashCode64LCase('v3')> é diferente de " + result7369 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v3", lexer.getFieldName())
nova chamada: assertEquals("v3", lexer.getFieldName(), "Era esperado valores iguais, mas  'v3' é diferente de " + result7370 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7371 + " <BigInteger.valueOf(123)> é diferente de " + result7372 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7373 + " <Fnv.hashCode64('v4')> é diferente de " + result7374 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7375 + " <Fnv.hashCode64LCase('v4')> é diferente de " + result7376 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v4", lexer.getFieldName())
nova chamada: assertEquals("v4", lexer.getFieldName(), "Era esperado valores iguais, mas  'v4' é diferente de " + result7377 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf((long) 123e4), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf((long) 123e4), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7378 + " <BigInteger.valueOf((long) 123e4)> é diferente de " + result7379 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7380 + " <Fnv.hashCode64('v5')> é diferente de " + result7381 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7382 + " <Fnv.hashCode64LCase('v5')> é diferente de " + result7383 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v5", lexer.getFieldName())
nova chamada: assertEquals("v5", lexer.getFieldName(), "Era esperado valores iguais, mas  'v5' é diferente de " + result7384 + " <lexer.getFieldName()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7385 + " <Fnv.hashCode64('v6')> é diferente de " + result7386 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7387 + " <Fnv.hashCode64LCase('v6')> é diferente de " + result7388 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v6", lexer.getFieldName())
nova chamada: assertEquals("v6", lexer.getFieldName(), "Era esperado valores iguais, mas  'v6' é diferente de " + result7389 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readBigInteger())
nova chamada: assertNull(lexer.readBigInteger(), "Era esperado nulo, mas " + result7390 + " <lexer.readBigInteger()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7391 + " <Fnv.hashCode64('v7')> é diferente de " + result7392 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7393 + " <Fnv.hashCode64LCase('v7')> é diferente de " + result7394 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v7", lexer.getFieldName())
nova chamada: assertEquals("v7", lexer.getFieldName(), "Era esperado valores iguais, mas  'v7' é diferente de " + result7395 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readBigInteger())
nova chamada: assertNull(lexer.readBigInteger(), "Era esperado nulo, mas " + result7396 + " <lexer.readBigInteger()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7397 + " <Fnv.hashCode64('v8')> é diferente de " + result7398 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7399 + " <Fnv.hashCode64LCase('v8')> é diferente de " + result7400 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v8", lexer.getFieldName())
nova chamada: assertEquals("v8", lexer.getFieldName(), "Era esperado valores iguais, mas  'v8' é diferente de " + result7401 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.ONE, lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.ONE, lexer.readBigInteger(), "Era esperado valores iguais, mas  BigInteger.ONE é diferente de " + result7402 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7403 + " <Fnv.hashCode64('v9')> é diferente de " + result7404 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7405 + " <Fnv.hashCode64LCase('v9')> é diferente de " + result7406 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v9", lexer.getFieldName())
nova chamada: assertEquals("v9", lexer.getFieldName(), "Era esperado valores iguais, mas  'v9' é diferente de " + result7407 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.ZERO, lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.ZERO, lexer.readBigInteger(), "Era esperado valores iguais, mas  BigInteger.ZERO é diferente de " + result7408 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7409 + " <Fnv.hashCode64('v10')> é diferente de " + result7410 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7411 + " <Fnv.hashCode64LCase('v10')> é diferente de " + result7412 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v10", lexer.getFieldName())
nova chamada: assertEquals("v10", lexer.getFieldName(), "Era esperado valores iguais, mas  'v10' é diferente de " + result7413 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(123), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7414 + " <BigInteger.valueOf(123)> é diferente de " + result7415 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7416 + " <Fnv.hashCode64('v11')> é diferente de " + result7417 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7418 + " <Fnv.hashCode64LCase('v11')> é diferente de " + result7419 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v11", lexer.getFieldName())
nova chamada: assertEquals("v11", lexer.getFieldName(), "Era esperado valores iguais, mas  'v11' é diferente de " + result7420 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readBigInteger())
nova chamada: assertNull(lexer.readBigInteger(), "Era esperado nulo, mas " + result7421 + " <lexer.readBigInteger()> não é nulo")
chamada antiga: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7422 + " <Fnv.hashCode64('v12')> é diferente de " + result7423 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7424 + " <Fnv.hashCode64LCase('v12')> é diferente de " + result7425 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v12", lexer.getFieldName())
nova chamada: assertEquals("v12", lexer.getFieldName(), "Era esperado valores iguais, mas  'v12' é diferente de " + result7426 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(1234), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(1234), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7427 + " <BigInteger.valueOf(1234)> é diferente de " + result7428 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7429 + " <Fnv.hashCode64('v13')> é diferente de " + result7430 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7431 + " <Fnv.hashCode64LCase('v13')> é diferente de " + result7432 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v13", lexer.getFieldName())
nova chamada: assertEquals("v13", lexer.getFieldName(), "Era esperado valores iguais, mas  'v13' é diferente de " + result7433 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(BigInteger.valueOf(12), lexer.readBigInteger())
nova chamada: assertEquals(BigInteger.valueOf(12), lexer.readBigInteger(), "Era esperado valores iguais, mas " + result7434 + " <BigInteger.valueOf(12)> é diferente de " + result7435 + " <lexer.readBigInteger()>")
chamada antiga: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7436 + " <Fnv.hashCode64('v14')> é diferente de " + result7437 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7438 + " <Fnv.hashCode64LCase('v14')> é diferente de " + result7439 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v14", lexer.getFieldName())
nova chamada: assertEquals("v14", lexer.getFieldName(), "Era esperado valores iguais, mas  'v14' é diferente de " + result7440 + " <lexer.getFieldName()>")
chamada antiga: assertNull(lexer.readBigInteger())
nova chamada: assertNull(lexer.readBigInteger(), "Era esperado nulo, mas " + result7441 + " <lexer.readBigInteger()> não é nulo")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7442 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7443 + " <lexer.current()>")
chamada antiga: assertEquals('{', lexer.current())
nova chamada: assertEquals('{', lexer.current(), "Era esperado valores iguais, mas  '{' é diferente de " + result7444 + " <lexer.current()>")
chamada antiga: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("id"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7445 + " <Fnv.hashCode64('id')> é diferente de " + result7446 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("id"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7447 + " <Fnv.hashCode64LCase('id')> é diferente de " + result7448 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("id", lexer.getFieldName())
nova chamada: assertEquals("id", lexer.getFieldName(), "Era esperado valores iguais, mas  'id' é diferente de " + result7449 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123456789, lexer.readInt64Value())
nova chamada: assertEquals(123456789, lexer.readInt64Value(), "Era esperado valores iguais, mas  123456789 é diferente de " + result7450 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v0"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7451 + " <Fnv.hashCode64('v0')> é diferente de " + result7452 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v0"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7453 + " <Fnv.hashCode64LCase('v0')> é diferente de " + result7454 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v0", lexer.getFieldName())
nova chamada: assertEquals("v0", lexer.getFieldName(), "Era esperado valores iguais, mas  'v0' é diferente de " + result7455 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt64Value())
nova chamada: assertEquals(123, lexer.readInt64Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7456 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v1"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7457 + " <Fnv.hashCode64('v1')> é diferente de " + result7458 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v1"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7459 + " <Fnv.hashCode64LCase('v1')> é diferente de " + result7460 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v1", lexer.getFieldName())
nova chamada: assertEquals("v1", lexer.getFieldName(), "Era esperado valores iguais, mas  'v1' é diferente de " + result7461 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123456789012345678L, lexer.readInt64Value())
nova chamada: assertEquals(123456789012345678L, lexer.readInt64Value(), "Era esperado valores iguais, mas  123456789012345678L é diferente de " + result7462 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v2"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7463 + " <Fnv.hashCode64('v2')> é diferente de " + result7464 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v2"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7465 + " <Fnv.hashCode64LCase('v2')> é diferente de " + result7466 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v2", lexer.getFieldName())
nova chamada: assertEquals("v2", lexer.getFieldName(), "Era esperado valores iguais, mas  'v2' é diferente de " + result7467 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v3"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7468 + " <Fnv.hashCode64('v3')> é diferente de " + result7469 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v3"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7470 + " <Fnv.hashCode64LCase('v3')> é diferente de " + result7471 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v3", lexer.getFieldName())
nova chamada: assertEquals("v3", lexer.getFieldName(), "Era esperado valores iguais, mas  'v3' é diferente de " + result7472 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt64Value())
nova chamada: assertEquals(123, lexer.readInt64Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7473 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v4"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7474 + " <Fnv.hashCode64('v4')> é diferente de " + result7475 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v4"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7476 + " <Fnv.hashCode64LCase('v4')> é diferente de " + result7477 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v4", lexer.getFieldName())
nova chamada: assertEquals("v4", lexer.getFieldName(), "Era esperado valores iguais, mas  'v4' é diferente de " + result7478 + " <lexer.getFieldName()>")
chamada antiga: assertEquals((long) (123e4), lexer.readInt64Value())
nova chamada: assertEquals((long) (123e4), lexer.readInt64Value(), "Era esperado valores iguais, mas  (long) (123e4) é diferente de " + result7479 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v5"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7480 + " <Fnv.hashCode64('v5')> é diferente de " + result7481 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v5"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7482 + " <Fnv.hashCode64LCase('v5')> é diferente de " + result7483 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v5", lexer.getFieldName())
nova chamada: assertEquals("v5", lexer.getFieldName(), "Era esperado valores iguais, mas  'v5' é diferente de " + result7484 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v6"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7485 + " <Fnv.hashCode64('v6')> é diferente de " + result7486 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v6"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7487 + " <Fnv.hashCode64LCase('v6')> é diferente de " + result7488 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v6", lexer.getFieldName())
nova chamada: assertEquals("v6", lexer.getFieldName(), "Era esperado valores iguais, mas  'v6' é diferente de " + result7489 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt64Value())
nova chamada: assertEquals(0, lexer.readInt64Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7490 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v7"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7491 + " <Fnv.hashCode64('v7')> é diferente de " + result7492 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v7"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7493 + " <Fnv.hashCode64LCase('v7')> é diferente de " + result7494 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v7", lexer.getFieldName())
nova chamada: assertEquals("v7", lexer.getFieldName(), "Era esperado valores iguais, mas  'v7' é diferente de " + result7495 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt64Value())
nova chamada: assertEquals(0, lexer.readInt64Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7496 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v8"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7497 + " <Fnv.hashCode64('v8')> é diferente de " + result7498 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v8"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7499 + " <Fnv.hashCode64LCase('v8')> é diferente de " + result7500 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v8", lexer.getFieldName())
nova chamada: assertEquals("v8", lexer.getFieldName(), "Era esperado valores iguais, mas  'v8' é diferente de " + result7501 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1, lexer.readInt64Value())
nova chamada: assertEquals(1, lexer.readInt64Value(), "Era esperado valores iguais, mas  1 é diferente de " + result7502 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v9"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7503 + " <Fnv.hashCode64('v9')> é diferente de " + result7504 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v9"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7505 + " <Fnv.hashCode64LCase('v9')> é diferente de " + result7506 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v9", lexer.getFieldName())
nova chamada: assertEquals("v9", lexer.getFieldName(), "Era esperado valores iguais, mas  'v9' é diferente de " + result7507 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(0, lexer.readInt64Value())
nova chamada: assertEquals(0, lexer.readInt64Value(), "Era esperado valores iguais, mas  0 é diferente de " + result7508 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v10"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7509 + " <Fnv.hashCode64('v10')> é diferente de " + result7510 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v10"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7511 + " <Fnv.hashCode64LCase('v10')> é diferente de " + result7512 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v10", lexer.getFieldName())
nova chamada: assertEquals("v10", lexer.getFieldName(), "Era esperado valores iguais, mas  'v10' é diferente de " + result7513 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(123, lexer.readInt64Value())
nova chamada: assertEquals(123, lexer.readInt64Value(), "Era esperado valores iguais, mas  123 é diferente de " + result7514 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v11"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7515 + " <Fnv.hashCode64('v11')> é diferente de " + result7516 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v11"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7517 + " <Fnv.hashCode64LCase('v11')> é diferente de " + result7518 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v11", lexer.getFieldName())
nova chamada: assertEquals("v11", lexer.getFieldName(), "Era esperado valores iguais, mas  'v11' é diferente de " + result7519 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v12"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7520 + " <Fnv.hashCode64('v12')> é diferente de " + result7521 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v12"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7522 + " <Fnv.hashCode64LCase('v12')> é diferente de " + result7523 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v12", lexer.getFieldName())
nova chamada: assertEquals("v12", lexer.getFieldName(), "Era esperado valores iguais, mas  'v12' é diferente de " + result7524 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(1234, lexer.readInt64Value())
nova chamada: assertEquals(1234, lexer.readInt64Value(), "Era esperado valores iguais, mas  1234 é diferente de " + result7525 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v13"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7526 + " <Fnv.hashCode64('v13')> é diferente de " + result7527 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v13"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7528 + " <Fnv.hashCode64LCase('v13')> é diferente de " + result7529 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v13", lexer.getFieldName())
nova chamada: assertEquals("v13", lexer.getFieldName(), "Era esperado valores iguais, mas  'v13' é diferente de " + result7530 + " <lexer.getFieldName()>")
chamada antiga: assertEquals(12, lexer.readInt64Value())
nova chamada: assertEquals(12, lexer.readInt64Value(), "Era esperado valores iguais, mas  12 é diferente de " + result7531 + " <lexer.readInt64Value()>")
chamada antiga: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode())
nova chamada: assertEquals(Fnv.hashCode64("v14"), lexer.readFieldNameHashCode(), "Era esperado valores iguais, mas " + result7532 + " <Fnv.hashCode64('v14')> é diferente de " + result7533 + " <lexer.readFieldNameHashCode()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase())
nova chamada: assertEquals(Fnv.hashCode64LCase("v14"), lexer.getNameHashCodeLCase(), "Era esperado valores iguais, mas " + result7534 + " <Fnv.hashCode64LCase('v14')> é diferente de " + result7535 + " <lexer.getNameHashCodeLCase()>")
chamada antiga: assertEquals("v14", lexer.getFieldName())
nova chamada: assertEquals("v14", lexer.getFieldName(), "Era esperado valores iguais, mas  'v14' é diferente de " + result7536 + " <lexer.getFieldName()>")
chamada antiga: assertEquals('}', lexer.current())
nova chamada: assertEquals('}', lexer.current(), "Era esperado valores iguais, mas  '}' é diferente de " + result7537 + " <lexer.current()>")
chamada antiga: assertEquals(0x1A, lexer.current())
nova chamada: assertEquals(0x1A, lexer.current(), "Era esperado valores iguais, mas  0x1A é diferente de " + result7538 + " <lexer.current()>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals("123", bean.value)
nova chamada: assertEquals("123", bean.value, "Era esperado valores iguais, mas  '123' é diferente de " + " bean.value")
chamada antiga: assertEquals("123", bean.value)
nova chamada: assertEquals("123", bean.value, "Era esperado valores iguais, mas  '123' é diferente de " + " bean.value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertEquals(123, bean.value)
nova chamada: assertEquals(123, bean.value, "Era esperado valores iguais, mas  123 é diferente de " + " bean.value")
chamada antiga: assertNotNull(images)
nova chamada: assertNotNull(images, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, images.size())
nova chamada: assertEquals(2, images.size(), "Era esperado valores iguais, mas  2 é diferente de " + result7539 + " <images.size()>")
chamada antiga: assertEquals(5, image_0.size())
nova chamada: assertEquals(5, image_0.size(), "Era esperado valores iguais, mas  5 é diferente de " + result7540 + " <image_0.size()>")
chamada antiga: assertEquals(Integer.valueOf(768), image_0.get("height"))
nova chamada: assertEquals(Integer.valueOf(768), image_0.get("height"), "Era esperado valores iguais, mas " + result7541 + " <Integer.valueOf(768)> é diferente de " + result7542 + " <image_0.get('height')>")
chamada antiga: assertEquals("LARGE", image_0.get("size"))
nova chamada: assertEquals("LARGE", image_0.get("size"), "Era esperado valores iguais, mas  'LARGE' é diferente de " + result7543 + " <image_0.get('size')>")
chamada antiga: assertEquals("Javaone Keynote", image_0.get("title"))
nova chamada: assertEquals("Javaone Keynote", image_0.get("title"), "Era esperado valores iguais, mas  'Javaone Keynote' é diferente de " + result7544 + " <image_0.get('title')>")
chamada antiga: assertEquals("http://javaone.com/keynote_large.jpg", image_0.get("uri"))
nova chamada: assertEquals("http://javaone.com/keynote_large.jpg", image_0.get("uri"), "Era esperado valores iguais, mas  'http://javaone.com/keynote_large.jpg' é diferente de " + result7545 + " <image_0.get('uri')>")
chamada antiga: assertEquals(Integer.valueOf(1024), image_0.get("width"))
nova chamada: assertEquals(Integer.valueOf(1024), image_0.get("width"), "Era esperado valores iguais, mas " + result7546 + " <Integer.valueOf(1024)> é diferente de " + result7547 + " <image_0.get('width')>")
chamada antiga: assertEquals(5, image_0.size())
nova chamada: assertEquals(5, image_0.size(), "Era esperado valores iguais, mas  5 é diferente de " + result7548 + " <image_0.size()>")
chamada antiga: assertEquals(Integer.valueOf(240), image_1.get("height"))
nova chamada: assertEquals(Integer.valueOf(240), image_1.get("height"), "Era esperado valores iguais, mas " + result7549 + " <Integer.valueOf(240)> é diferente de " + result7550 + " <image_1.get('height')>")
chamada antiga: assertEquals("SMALL", image_1.get("size"))
nova chamada: assertEquals("SMALL", image_1.get("size"), "Era esperado valores iguais, mas  'SMALL' é diferente de " + result7551 + " <image_1.get('size')>")
chamada antiga: assertEquals("Javaone Keynote", image_1.get("title"))
nova chamada: assertEquals("Javaone Keynote", image_1.get("title"), "Era esperado valores iguais, mas  'Javaone Keynote' é diferente de " + result7552 + " <image_1.get('title')>")
chamada antiga: assertEquals("http://javaone.com/keynote_small.jpg", image_1.get("uri"))
nova chamada: assertEquals("http://javaone.com/keynote_small.jpg", image_1.get("uri"), "Era esperado valores iguais, mas  'http://javaone.com/keynote_small.jpg' é diferente de " + result7553 + " <image_1.get('uri')>")
chamada antiga: assertEquals(Integer.valueOf(320), image_1.get("width"))
nova chamada: assertEquals(Integer.valueOf(320), image_1.get("width"), "Era esperado valores iguais, mas " + result7554 + " <Integer.valueOf(320)> é diferente de " + result7555 + " <image_1.get('width')>")
chamada antiga: assertEquals(10, media.size())
nova chamada: assertEquals(10, media.size(), "Era esperado valores iguais, mas  10 é diferente de " + result7556 + " <media.size()>")
chamada antiga: assertEquals(Integer.valueOf(262144), media.get("bitrate"))
nova chamada: assertEquals(Integer.valueOf(262144), media.get("bitrate"), "Era esperado valores iguais, mas " + result7557 + " <Integer.valueOf(262144)> é diferente de " + result7558 + " <media.get('bitrate')>")
chamada antiga: assertEquals(Integer.valueOf(18000000), media.get("duration"))
nova chamada: assertEquals(Integer.valueOf(18000000), media.get("duration"), "Era esperado valores iguais, mas " + result7559 + " <Integer.valueOf(18000000)> é diferente de " + result7560 + " <media.get('duration')>")
chamada antiga: assertEquals("video/mpg4", media.get("format"))
nova chamada: assertEquals("video/mpg4", media.get("format"), "Era esperado valores iguais, mas  'video/mpg4' é diferente de " + result7561 + " <media.get('format')>")
chamada antiga: assertEquals(Integer.valueOf(480), media.get("height"))
nova chamada: assertEquals(Integer.valueOf(480), media.get("height"), "Era esperado valores iguais, mas " + result7562 + " <Integer.valueOf(480)> é diferente de " + result7563 + " <media.get('height')>")
chamada antiga: assertEquals(2, persons.size())
nova chamada: assertEquals(2, persons.size(), "Era esperado valores iguais, mas  2 é diferente de " + result7564 + " <persons.size()>")
chamada antiga: assertEquals("Bill Gates", persons.get(0))
nova chamada: assertEquals("Bill Gates", persons.get(0), "Era esperado valores iguais, mas  'Bill Gates' é diferente de " + result7565 + " <persons.get(0)>")
chamada antiga: assertEquals("Steve Jobs", persons.get(1))
nova chamada: assertEquals("Steve Jobs", persons.get(1), "Era esperado valores iguais, mas  'Steve Jobs' é diferente de " + result7566 + " <persons.get(1)>")
chamada antiga: assertEquals("JAVA", media.get("player"))
nova chamada: assertEquals("JAVA", media.get("player"), "Era esperado valores iguais, mas  'JAVA' é diferente de " + result7567 + " <media.get('player')>")
chamada antiga: assertEquals(Integer.valueOf(58982400), media.get("size"))
nova chamada: assertEquals(Integer.valueOf(58982400), media.get("size"), "Era esperado valores iguais, mas " + result7568 + " <Integer.valueOf(58982400)> é diferente de " + result7569 + " <media.get('size')>")
chamada antiga: assertEquals("Javaone Keynote", media.get("title"))
nova chamada: assertEquals("Javaone Keynote", media.get("title"), "Era esperado valores iguais, mas  'Javaone Keynote' é diferente de " + result7570 + " <media.get('title')>")
chamada antiga: assertEquals("http://javaone.com/keynote.mpg", media.get("uri"))
nova chamada: assertEquals("http://javaone.com/keynote.mpg", media.get("uri"), "Era esperado valores iguais, mas  'http://javaone.com/keynote.mpg' é diferente de " + result7571 + " <media.get('uri')>")
chamada antiga: assertEquals(Integer.valueOf(640), media.get("width"))
nova chamada: assertEquals(Integer.valueOf(640), media.get("width"), "Era esperado valores iguais, mas " + result7572 + " <Integer.valueOf(640)> é diferente de " + result7573 + " <media.get('width')>")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":1}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":1}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":3}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":3}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":true}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":true}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":1}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":1}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":3}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":3}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSON.parseObject("{\"value\":true}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertTrue(JSON.parseObject("{\"value\":true}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Boolean.TRUE, values[1])
nova chamada: assertEquals(Boolean.TRUE, values[1], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " values[1]")
chamada antiga: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"true\"}"))[1])
nova chamada: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"true\"}"))[1], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'true\'}'))[1]")
chamada antiga: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"TRUE\"}"))[1])
nova chamada: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"TRUE\"}"))[1], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'TRUE\'}'))[1]")
chamada antiga: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"1\"}"))[1])
nova chamada: assertEquals(Boolean.TRUE, ((Object[]) path.extract("{\"id\":123,\"value\":\"1\"}"))[1], "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'1\'}'))[1]")
chamada antiga: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"false\"}"))[1])
nova chamada: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"false\"}"))[1], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'false\'}'))[1]")
chamada antiga: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"FALSE\"}"))[1])
nova chamada: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"FALSE\"}"))[1], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'FALSE\'}'))[1]")
chamada antiga: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"0\"}"))[1])
nova chamada: assertEquals(Boolean.FALSE, ((Object[]) path.extract("{\"id\":123,\"value\":\"0\"}"))[1], "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + " ((Object[]) path.extract('{\'id\':123,\'value\':\'0\'}'))[1]")
chamada antiga: assertEquals(11, segments.size())
nova chamada: assertEquals(11, segments.size(), "Era esperado valores iguais, mas  11 é diferente de " + result7574 + " <segments.size()>")
chamada antiga: assertEquals("101", JSONPath.of("$.DAYS").eval(map))
nova chamada: assertEquals("101", JSONPath.of("$.DAYS").eval(map), "Era esperado valores iguais, mas  '101' é diferente de " + result7575 + " <JSONPath.of('$.DAYS').eval(map)>")
chamada antiga: assertEquals("101", JSONPath.of("$.values.DAYS").eval(root))
nova chamada: assertEquals("101", JSONPath.of("$.values.DAYS").eval(root), "Era esperado valores iguais, mas  '101' é diferente de " + result7576 + " <JSONPath.of('$.values.DAYS').eval(root)>")
chamada antiga: assertEquals("101", JSONPath.of("$.2748734281").eval(map))
nova chamada: assertEquals("101", JSONPath.of("$.2748734281").eval(map), "Era esperado valores iguais, mas  '101' é diferente de " + result7577 + " <JSONPath.of('$.2748734281').eval(map)>")
chamada antiga: assertEquals("101", JSONPath.of("$.values.2748734281").eval(root))
nova chamada: assertEquals("101", JSONPath.of("$.values.2748734281").eval(root), "Era esperado valores iguais, mas  '101' é diferente de " + result7578 + " <JSONPath.of('$.values.2748734281').eval(root)>")
chamada antiga: assertEquals("101", JSONPath.of("$.1773193982").eval(map))
nova chamada: assertEquals("101", JSONPath.of("$.1773193982").eval(map), "Era esperado valores iguais, mas  '101' é diferente de " + result7579 + " <JSONPath.of('$.1773193982').eval(map)>")
chamada antiga: assertEquals("101", JSONPath.of("$.values.1773193982").eval(root))
nova chamada: assertEquals("101", JSONPath.of("$.values.1773193982").eval(root), "Era esperado valores iguais, mas  '101' é diferente de " + result7580 + " <JSONPath.of('$.values.1773193982').eval(root)>")
chamada antiga: assertSame(JSONFactory.defaultObjectReaderProvider, JSONFactory.getDefaultObjectReaderProvider())
nova chamada: assertSame(JSONFactory.defaultObjectReaderProvider, JSONFactory.getDefaultObjectReaderProvider(), "Era esperado objetos iguais, mas  JSONFactory.defaultObjectReaderProvider é diferente de " + result7581 + " <JSONFactory.getDefaultObjectReaderProvider()>")
chamada antiga: assertSame(JSONFactory.defaultJSONPathCompiler, JSONFactory.getDefaultJSONPathCompiler())
nova chamada: assertSame(JSONFactory.defaultJSONPathCompiler, JSONFactory.getDefaultJSONPathCompiler(), "Era esperado objetos iguais, mas  JSONFactory.defaultJSONPathCompiler é diferente de " + result7582 + " <JSONFactory.getDefaultJSONPathCompiler()>")
chamada antiga: assertTrue(JSONFactory.isUseJacksonAnnotation())
nova chamada: assertTrue(JSONFactory.isUseJacksonAnnotation(), "Era esperado verdadeiro, mas " + result7583 + " <JSONFactory.isUseJacksonAnnotation()> é falso")
chamada antiga: assertSame(provider, context.getProvider())
nova chamada: assertSame(provider, context.getProvider(), "Era esperado objetos iguais, mas  provider é diferente de " + result7584 + " <context.getProvider()>")
chamada antiga: assertEquals("{\"value\":\"\"}", json)
nova chamada: assertEquals("{\"value\":\"\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " json")
chamada antiga: assertEquals(0, new JSONPathSegmentIndex(0).index)
nova chamada: assertEquals(0, new JSONPathSegmentIndex(0).index, "Era esperado valores iguais, mas  0 é diferente de " + " new JSONPathSegmentIndex(0).index")
chamada antiga: assertEquals(1, new JSONPathSegmentIndex(1).index)
nova chamada: assertEquals(1, new JSONPathSegmentIndex(1).index, "Era esperado valores iguais, mas  1 é diferente de " + " new JSONPathSegmentIndex(1).index")
chamada antiga: assertEquals(2, new JSONPathSegmentIndex(2).index)
nova chamada: assertEquals(2, new JSONPathSegmentIndex(2).index, "Era esperado valores iguais, mas  2 é diferente de " + " new JSONPathSegmentIndex(2).index")
chamada antiga: assertEquals(-1, new JSONPathSegmentIndex(-1).index)
nova chamada: assertEquals(-1, new JSONPathSegmentIndex(-1).index, "Era esperado valores iguais, mas  -1 é diferente de " + " new JSONPathSegmentIndex(-1).index")
chamada antiga: assertEquals(5, new JSONPathSegmentIndex(5).index)
nova chamada: assertEquals(5, new JSONPathSegmentIndex(5).index, "Era esperado valores iguais, mas  5 é diferente de " + " new JSONPathSegmentIndex(5).index")
chamada antiga: assertEquals(JSONPathSegmentIndex.ZERO, JSONPathSegmentIndex.of(0))
nova chamada: assertEquals(JSONPathSegmentIndex.ZERO, JSONPathSegmentIndex.of(0), "Era esperado valores iguais, mas  JSONPathSegmentIndex.ZERO é diferente de " + result7585 + " <JSONPathSegmentIndex.of(0)>")
chamada antiga: assertEquals(JSONPathSegmentIndex.ONE, JSONPathSegmentIndex.of(1))
nova chamada: assertEquals(JSONPathSegmentIndex.ONE, JSONPathSegmentIndex.of(1), "Era esperado valores iguais, mas  JSONPathSegmentIndex.ONE é diferente de " + result7586 + " <JSONPathSegmentIndex.of(1)>")
chamada antiga: assertEquals(JSONPathSegmentIndex.TWO, JSONPathSegmentIndex.of(2))
nova chamada: assertEquals(JSONPathSegmentIndex.TWO, JSONPathSegmentIndex.of(2), "Era esperado valores iguais, mas  JSONPathSegmentIndex.TWO é diferente de " + result7587 + " <JSONPathSegmentIndex.of(2)>")
chamada antiga: assertEquals(JSONPathSegmentIndex.LAST, JSONPathSegmentIndex.of(-1))
nova chamada: assertEquals(JSONPathSegmentIndex.LAST, JSONPathSegmentIndex.of(-1), "Era esperado valores iguais, mas  JSONPathSegmentIndex.LAST é diferente de " + result7588 + " <JSONPathSegmentIndex.of(-1)>")
chamada antiga: assertEquals(5, JSONPathSegmentIndex.of(5).index)
nova chamada: assertEquals(5, JSONPathSegmentIndex.of(5).index, "Era esperado valores iguais, mas  5 é diferente de " + " JSONPathSegmentIndex.of(5).index")
chamada antiga: assertEquals(JSONPathSegmentIndex.ZERO.toString(), "[0]")
nova chamada: assertEquals(JSONPathSegmentIndex.ZERO.toString(), "[0]", "Era esperado valores iguais, mas " + result7589 + " <JSONPathSegmentIndex.ZERO.toString()> é diferente de " + " '[0]'")
chamada antiga: assertEquals(JSONPathSegmentIndex.ONE.toString(), "[1]")
nova chamada: assertEquals(JSONPathSegmentIndex.ONE.toString(), "[1]", "Era esperado valores iguais, mas " + result7590 + " <JSONPathSegmentIndex.ONE.toString()> é diferente de " + " '[1]'")
chamada antiga: assertEquals(JSONPathSegmentIndex.TWO.toString(), "[2]")
nova chamada: assertEquals(JSONPathSegmentIndex.TWO.toString(), "[2]", "Era esperado valores iguais, mas " + result7591 + " <JSONPathSegmentIndex.TWO.toString()> é diferente de " + " '[2]'")
chamada antiga: assertEquals(JSONPathSegmentIndex.LAST.toString(), "[-1]")
nova chamada: assertEquals(JSONPathSegmentIndex.LAST.toString(), "[-1]", "Era esperado valores iguais, mas " + result7592 + " <JSONPathSegmentIndex.LAST.toString()> é diferente de " + " '[-1]'")
chamada antiga: assertEquals(new JSONPathSegmentIndex(6).toString(), "[6]")
nova chamada: assertEquals(new JSONPathSegmentIndex(6).toString(), "[6]", "Era esperado valores iguais, mas " + result7593 + " <new JSONPathSegmentIndex(6).toString()> é diferente de " + " '[6]'")
chamada antiga: assertEquals(new JSONPathSegmentIndex(-6).toString(), "[-6]")
nova chamada: assertEquals(new JSONPathSegmentIndex(-6).toString(), "[-6]", "Era esperado valores iguais, mas " + result7594 + " <new JSONPathSegmentIndex(-6).toString()> é diferente de " + " '[-6]'")
chamada antiga: assertTrue(context.eval)
nova chamada: assertTrue(context.eval, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(context.value != null ? Integer.parseInt("" + context.value) : null, value)
nova chamada: assertEquals(context.value != null ? Integer.parseInt("" + context.value) : null, value, "Era esperado valores iguais, mas  context.value != null ? Integer.parseInt('' + context.value) : null é diferente de " + " value")
chamada antiga: assertTrue(context.eval)
nova chamada: assertTrue(context.eval, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(context.value, value)
nova chamada: assertNotEquals(context.value, value, "Era esperado valores diferentes, mas  context.value é igual a " + " value")
chamada antiga: assertTrue(object.isEmpty())
nova chamada: assertTrue(object.isEmpty(), "Era esperado verdadeiro, mas " + result7595 + " <object.isEmpty()> é falso")
chamada antiga: assertEquals(1, object.size())
nova chamada: assertEquals(1, object.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7596 + " <object.size()>")
chamada antiga: assertEquals(123, ((Number) object.get("id")).intValue())
nova chamada: assertEquals(123, ((Number) object.get("id")).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result7597 + " <((Number) object.get('id')).intValue()>")
chamada antiga: assertTrue(list.isEmpty())
nova chamada: assertTrue(list.isEmpty(), "Era esperado verdadeiro, mas " + result7598 + " <list.isEmpty()> é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7599 + " <list.size()>")
chamada antiga: assertEquals(123, list.get(0).intValue())
nova chamada: assertEquals(123, list.get(0).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result7600 + " <list.get(0).intValue()>")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Object.class), "Era esperado nulo, mas " + result7601 + " <JSONB.parseObject(jsonbBytes, Object.class)> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Object.class), "Era esperado nulo, mas " + result7602 + " <JSONB.parseObject(jsonbBytes, Object.class)> não é nulo")
chamada antiga: assertNull(JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertNull(JSONB.parseObject(jsonbBytes, Object.class), "Era esperado nulo, mas " + result7603 + " <JSONB.parseObject(jsonbBytes, Object.class)> não é nulo")
chamada antiga: assertTrue((Boolean) JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertTrue((Boolean) JSONB.parseObject(jsonbBytes, Object.class), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class), "Era esperado valores iguais, mas  str é diferente de " + result7604 + " <JSONB.parseObject(jsonbBytes, Object.class)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class), "Era esperado valores iguais, mas  str é diferente de " + result7605 + " <JSONB.parseObject(jsonbBytes, Object.class)>")
chamada antiga: assertArrayEquals(jsonbBytes2, jsonbBytes)
nova chamada: assertArrayEquals(jsonbBytes2, jsonbBytes, "Era esperado arrays iguais, mas  jsonbBytes2 é diferente de " + " jsonbBytes")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, String.class), "Era esperado valores iguais, mas  str é diferente de " + result7606 + " <JSONB.parseObject(jsonbBytes, String.class)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class), "Era esperado valores iguais, mas  str é diferente de " + result7607 + " <JSONB.parseObject(jsonbBytes, Object.class)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class), "Era esperado valores iguais, mas  str é diferente de " + result7608 + " <JSONB.parseObject(jsonbBytes, Object.class)>")
chamada antiga: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertEquals(str, JSONB.parseObject(jsonbBytes, Object.class), "Era esperado valores iguais, mas  str é diferente de " + result7609 + " <JSONB.parseObject(jsonbBytes, Object.class)>")
chamada antiga: assertEquals(0, ((Number) JSONB.parseObject(jsonbBytes, Object.class)).intValue())
nova chamada: assertEquals(0, ((Number) JSONB.parseObject(jsonbBytes, Object.class)).intValue(), "Era esperado valores iguais, mas  0 é diferente de " + result7610 + " <((Number) JSONB.parseObject(jsonbBytes, Object.class)).intValue()>")
chamada antiga: assertEquals(123, ((Number) map.get("id")).intValue())
nova chamada: assertEquals(123, ((Number) map.get("id")).intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result7611 + " <((Number) map.get('id')).intValue()>")
chamada antiga: assertEquals("id", symbolTable.getNameByHashCode(Fnv.hashCode64("id")))
nova chamada: assertEquals("id", symbolTable.getNameByHashCode(Fnv.hashCode64("id")), "Era esperado valores iguais, mas  'id' é diferente de " + result7612 + " <symbolTable.getNameByHashCode(Fnv.hashCode64('id'))>")
chamada antiga: assertNull(symbolTable.getNameByHashCode(-1))
nova chamada: assertNull(symbolTable.getNameByHashCode(-1), "Era esperado nulo, mas " + result7613 + " <symbolTable.getNameByHashCode(-1)> não é nulo")
chamada antiga: assertEquals(-1, symbolTable.getOrdinalByHashCode(-1))
nova chamada: assertEquals(-1, symbolTable.getOrdinalByHashCode(-1), "Era esperado valores iguais, mas  -1 é diferente de " + result7614 + " <symbolTable.getOrdinalByHashCode(-1)>")
chamada antiga: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null))
nova chamada: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null), "Era esperado arrays iguais, mas  new byte[] { JSONB.Constants.BC_NULL } é diferente de " + result7615 + " <JSONB.toBytes((String) null)>")
chamada antiga: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null, (Charset) null))
nova chamada: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((String) null, (Charset) null), "Era esperado arrays iguais, mas  new byte[] { JSONB.Constants.BC_NULL } é diferente de " + result7616 + " <JSONB.toBytes((String) null, (Charset) null)>")
chamada antiga: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigInteger) null))
nova chamada: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigInteger) null), "Era esperado arrays iguais, mas  new byte[] { JSONB.Constants.BC_NULL } é diferente de " + result7617 + " <JSONB.toBytes((BigInteger) null)>")
chamada antiga: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigDecimal) null))
nova chamada: assertArrayEquals(new byte[] { JSONB.Constants.BC_NULL }, JSONB.toBytes((BigDecimal) null), "Era esperado arrays iguais, mas  new byte[] { JSONB.Constants.BC_NULL } é diferente de " + result7618 + " <JSONB.toBytes((BigDecimal) null)>")
chamada antiga: assertEquals(map.size(), map1.size())
nova chamada: assertEquals(map.size(), map1.size(), "Era esperado valores iguais, mas " + result7619 + " <map.size()> é diferente de " + result7620 + " <map1.size()>")
chamada antiga: assertEquals(map, map1)
nova chamada: assertEquals(map, map1, "Era esperado valores iguais, mas  map é diferente de " + " map1")
chamada antiga: assertEquals("[1]", JSON.toJSONString(JSONB.parse(out.toByteArray())))
nova chamada: assertEquals("[1]", JSON.toJSONString(JSONB.parse(out.toByteArray())), "Era esperado valores iguais, mas  '[1]' é diferente de " + result7621 + " <JSON.toJSONString(JSONB.parse(out.toByteArray()))>")
chamada antiga: assertArrayEquals(array, array2)
nova chamada: assertArrayEquals(array, array2, "Era esperado arrays iguais, mas  array é diferente de " + " array2")
chamada antiga: assertArrayEquals(array, array2)
nova chamada: assertArrayEquals(array, array2, "Era esperado arrays iguais, mas  array é diferente de " + " array2")
chamada antiga: assertArrayEquals(array, array2)
nova chamada: assertArrayEquals(array, array2, "Era esperado arrays iguais, mas  array é diferente de " + " array2")
chamada antiga: assertArrayEquals(array, array2)
nova chamada: assertArrayEquals(array, array2, "Era esperado arrays iguais, mas  array é diferente de " + " array2")
chamada antiga: assertArrayEquals(array, array2)
nova chamada: assertArrayEquals(array, array2, "Era esperado arrays iguais, mas  array é diferente de " + " array2")
chamada antiga: assertEquals(123, ((Bean1) array[0]).id)
nova chamada: assertEquals(123, ((Bean1) array[0]).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array[0]).id")
chamada antiga: assertEquals(234, ((Bean2) array[1]).id)
nova chamada: assertEquals(234, ((Bean2) array[1]).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array[1]).id")
chamada antiga: assertEquals(123, ((Bean1) array[0]).id)
nova chamada: assertEquals(123, ((Bean1) array[0]).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array[0]).id")
chamada antiga: assertEquals(234, ((Bean2) array[1]).id)
nova chamada: assertEquals(234, ((Bean2) array[1]).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array[1]).id")
chamada antiga: assertEquals(123, ((Bean1) array[0]).id)
nova chamada: assertEquals(123, ((Bean1) array[0]).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array[0]).id")
chamada antiga: assertEquals(234, ((Bean2) array[1]).id)
nova chamada: assertEquals(234, ((Bean2) array[1]).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array[1]).id")
chamada antiga: assertEquals(123, ((Bean1) array[0]).id)
nova chamada: assertEquals(123, ((Bean1) array[0]).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array[0]).id")
chamada antiga: assertEquals(234, ((Bean2) array[1]).id)
nova chamada: assertEquals(234, ((Bean2) array[1]).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array[1]).id")
chamada antiga: assertEquals(123, ((Bean1) array.get(0)).id)
nova chamada: assertEquals(123, ((Bean1) array.get(0)).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array.get(0)).id")
chamada antiga: assertEquals(234, ((Bean2) array.get(1)).id)
nova chamada: assertEquals(234, ((Bean2) array.get(1)).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array.get(1)).id")
chamada antiga: assertEquals(123, ((Bean1) array.get(0)).id)
nova chamada: assertEquals(123, ((Bean1) array.get(0)).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array.get(0)).id")
chamada antiga: assertEquals(234, ((Bean2) array.get(1)).id)
nova chamada: assertEquals(234, ((Bean2) array.get(1)).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array.get(1)).id")
chamada antiga: assertEquals(123, ((Bean1) array.get(0)).id)
nova chamada: assertEquals(123, ((Bean1) array.get(0)).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array.get(0)).id")
chamada antiga: assertEquals(234, ((Bean2) array.get(1)).id)
nova chamada: assertEquals(234, ((Bean2) array.get(1)).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array.get(1)).id")
chamada antiga: assertEquals(123, ((Bean1) array.get(0)).id)
nova chamada: assertEquals(123, ((Bean1) array.get(0)).id, "Era esperado valores iguais, mas  123 é diferente de " + " ((Bean1) array.get(0)).id")
chamada antiga: assertEquals(234, ((Bean2) array.get(1)).id)
nova chamada: assertEquals(234, ((Bean2) array.get(1)).id, "Era esperado valores iguais, mas  234 é diferente de " + " ((Bean2) array.get(1)).id")
chamada antiga: assertArrayEquals(new Object[] { "John", 27 }, values)
nova chamada: assertArrayEquals(new Object[] { "John", 27 }, values, "Era esperado arrays iguais, mas  new Object[] { 'John', 27 } é diferente de " + " values")
chamada antiga: assertArrayEquals(new Object[] { "John", 27 }, values)
nova chamada: assertArrayEquals(new Object[] { "John", 27 }, values, "Era esperado arrays iguais, mas  new Object[] { 'John', 27 } é diferente de " + " values")
chamada antiga: assertArrayEquals(Base64.getDecoder().decode("ZGluZ3hpYW9ibw=="), extractVals)
nova chamada: assertArrayEquals(Base64.getDecoder().decode("ZGluZ3hpYW9ibw=="), extractVals, "Era esperado arrays iguais, mas " + result7622 + " <Base64.getDecoder().decode('ZGluZ3hpYW9ibw==')> é diferente de " + " extractVals")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result7623 + " <list.size()>")
chamada antiga: assertEquals(101, list.get(0))
nova chamada: assertEquals(101, list.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result7624 + " <list.get(0)>")
chamada antiga: assertEquals(102, list.get(1))
nova chamada: assertEquals(102, list.get(1), "Era esperado valores iguais, mas  102 é diferente de " + result7625 + " <list.get(1)>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result7626 + " <list.size()>")
chamada antiga: assertEquals(101, list.get(0))
nova chamada: assertEquals(101, list.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result7627 + " <list.get(0)>")
chamada antiga: assertEquals(102, list.get(1))
nova chamada: assertEquals(102, list.get(1), "Era esperado valores iguais, mas  102 é diferente de " + result7628 + " <list.get(1)>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result7629 + " <list.size()>")
chamada antiga: assertEquals(101, list.get(0))
nova chamada: assertEquals(101, list.get(0), "Era esperado valores iguais, mas  101 é diferente de " + result7630 + " <list.get(0)>")
chamada antiga: assertEquals(102, list.get(1))
nova chamada: assertEquals(102, list.get(1), "Era esperado valores iguais, mas  102 é diferente de " + result7631 + " <list.get(1)>")
chamada antiga: assertEquals(order.getOrderNo(), o.iterator().next().getOrderNo())
nova chamada: assertEquals(order.getOrderNo(), o.iterator().next().getOrderNo(), "Era esperado valores iguais, mas " + result7632 + " <order.getOrderNo()> é diferente de " + result7633 + " <o.iterator().next().getOrderNo()>")
chamada antiga: assertEquals(order.getActualCharge(), o.iterator().next().getActualCharge())
nova chamada: assertEquals(order.getActualCharge(), o.iterator().next().getActualCharge(), "Era esperado valores iguais, mas " + result7634 + " <order.getActualCharge()> é diferente de " + result7635 + " <o.iterator().next().getActualCharge()>")
chamada antiga: assertEquals(123, integer.get())
nova chamada: assertEquals(123, integer.get(), "Era esperado valores iguais, mas  123 é diferente de " + result7636 + " <integer.get()>")
chamada antiga: assertEquals("123", ref.get())
nova chamada: assertEquals("123", ref.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result7637 + " <ref.get()>")
chamada antiga: assertEquals("123", ref.get())
nova chamada: assertEquals("123", ref.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result7638 + " <ref.get()>")
chamada antiga: assertEquals(true, ref.get())
nova chamada: assertEquals(true, ref.get(), "Era esperado valores iguais, mas  true é diferente de " + result7639 + " <ref.get()>")
chamada antiga: assertEquals(false, ref.get())
nova chamada: assertEquals(false, ref.get(), "Era esperado valores iguais, mas  false é diferente de " + result7640 + " <ref.get()>")
chamada antiga: assertEquals(null, ref.get())
nova chamada: assertEquals(null, ref.get(), "Era esperado valores iguais, mas  null é diferente de " + result7641 + " <ref.get()>")
chamada antiga: assertEquals(new JSONArray(), ref.get())
nova chamada: assertEquals(new JSONArray(), ref.get(), "Era esperado valores iguais, mas  new JSONArray() é diferente de " + result7642 + " <ref.get()>")
chamada antiga: assertEquals(new JSONObject(), ref.get())
nova chamada: assertEquals(new JSONObject(), ref.get(), "Era esperado valores iguais, mas  new JSONObject() é diferente de " + result7643 + " <ref.get()>")
chamada antiga: assertEquals("123", ref.get())
nova chamada: assertEquals("123", ref.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result7644 + " <ref.get()>")
chamada antiga: assertEquals("123", ref.get())
nova chamada: assertEquals("123", ref.get(), "Era esperado valores iguais, mas  '123' é diferente de " + result7645 + " <ref.get()>")
chamada antiga: assertEquals(")123\uD83D\uDE09®中国", ref.get())
nova chamada: assertEquals(")123\uD83D\uDE09®中国", ref.get(), "Era esperado valores iguais, mas  ')123\uD83D\uDE09®中国' é diferente de " + result7646 + " <ref.get()>")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(102, bean.item.itemId)
nova chamada: assertEquals(102, bean.item.itemId, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.itemId")
chamada antiga: assertEquals(101, bean.item.getParentId())
nova chamada: assertEquals(101, bean.item.getParentId(), "Era esperado valores iguais, mas  101 é diferente de " + result7647 + " <bean.item.getParentId()>")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(102, bean.item.itemId)
nova chamada: assertEquals(102, bean.item.itemId, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.itemId")
chamada antiga: assertEquals(101, bean.item.getParentId())
nova chamada: assertEquals(101, bean.item.getParentId(), "Era esperado valores iguais, mas  101 é diferente de " + result7648 + " <bean.item.getParentId()>")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(102, bean.item.itemId)
nova chamada: assertEquals(102, bean.item.itemId, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.itemId")
chamada antiga: assertEquals(101, bean.item.getParentId())
nova chamada: assertEquals(101, bean.item.getParentId(), "Era esperado valores iguais, mas  101 é diferente de " + result7649 + " <bean.item.getParentId()>")
chamada antiga: assertNotNull(bean.item)
nova chamada: assertNotNull(bean.item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(102, bean.item.itemId)
nova chamada: assertEquals(102, bean.item.itemId, "Era esperado valores iguais, mas  102 é diferente de " + " bean.item.itemId")
chamada antiga: assertEquals(101, bean.item.getParentId())
nova chamada: assertEquals(101, bean.item.getParentId(), "Era esperado valores iguais, mas  101 é diferente de " + result7650 + " <bean.item.getParentId()>")
chamada antiga: assertEquals(1, fieldWriters.size())
nova chamada: assertEquals(1, fieldWriters.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7651 + " <fieldWriters.size()>")
chamada antiga: assertEquals(C0.class, fieldWriters.get(0).method.getDeclaringClass())
nova chamada: assertEquals(C0.class, fieldWriters.get(0).method.getDeclaringClass(), "Era esperado valores iguais, mas  C0.class é diferente de " + result7652 + " <fieldWriters.get(0).method.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldReaders.length)
nova chamada: assertEquals(1, fieldReaders.length, "Era esperado valores iguais, mas  1 é diferente de " + " fieldReaders.length")
chamada antiga: assertEquals(C0.class, fieldReaders[0].method.getDeclaringClass())
nova chamada: assertEquals(C0.class, fieldReaders[0].method.getDeclaringClass(), "Era esperado valores iguais, mas  C0.class é diferente de " + result7653 + " <fieldReaders[0].method.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldWriters.size())
nova chamada: assertEquals(1, fieldWriters.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7654 + " <fieldWriters.size()>")
chamada antiga: assertEquals(C1.class, fieldWriters.get(0).method.getDeclaringClass())
nova chamada: assertEquals(C1.class, fieldWriters.get(0).method.getDeclaringClass(), "Era esperado valores iguais, mas  C1.class é diferente de " + result7655 + " <fieldWriters.get(0).method.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldReaders.length)
nova chamada: assertEquals(1, fieldReaders.length, "Era esperado valores iguais, mas  1 é diferente de " + " fieldReaders.length")
chamada antiga: assertEquals(C1.class, fieldReaders[0].method.getDeclaringClass())
nova chamada: assertEquals(C1.class, fieldReaders[0].method.getDeclaringClass(), "Era esperado valores iguais, mas  C1.class é diferente de " + result7656 + " <fieldReaders[0].method.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldWriters.size())
nova chamada: assertEquals(1, fieldWriters.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7657 + " <fieldWriters.size()>")
chamada antiga: assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass())
nova chamada: assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass(), "Era esperado valores iguais, mas  C2.class é diferente de " + result7658 + " <fieldWriters.get(0).field.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldWriters.size())
nova chamada: assertEquals(1, fieldWriters.size(), "Era esperado valores iguais, mas  1 é diferente de " + result7659 + " <fieldWriters.size()>")
chamada antiga: assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass())
nova chamada: assertEquals(C2.class, fieldWriters.get(0).field.getDeclaringClass(), "Era esperado valores iguais, mas  C2.class é diferente de " + result7660 + " <fieldWriters.get(0).field.getDeclaringClass()>")
chamada antiga: assertEquals(1, fieldReaders.length)
nova chamada: assertEquals(1, fieldReaders.length, "Era esperado valores iguais, mas  1 é diferente de " + " fieldReaders.length")
chamada antiga: assertEquals(C2.class, fieldReaders[0].field.getDeclaringClass())
nova chamada: assertEquals(C2.class, fieldReaders[0].field.getDeclaringClass(), "Era esperado valores iguais, mas  C2.class é diferente de " + result7661 + " <fieldReaders[0].field.getDeclaringClass()>")
chamada antiga: assertEquals("1.0", RyuFloat.toString(1F))
nova chamada: assertEquals("1.0", RyuFloat.toString(1F), "Era esperado valores iguais, mas  '1.0' é diferente de " + result7662 + " <RyuFloat.toString(1F)>")
chamada antiga: assertEquals("3.4028235E38", RyuFloat.toString(Float.MAX_VALUE))
nova chamada: assertEquals("3.4028235E38", RyuFloat.toString(Float.MAX_VALUE), "Era esperado valores iguais, mas  '3.4028235E38' é diferente de " + result7663 + " <RyuFloat.toString(Float.MAX_VALUE)>")
chamada antiga: assertEquals("1.4E-45", RyuFloat.toString(Float.MIN_VALUE))
nova chamada: assertEquals("1.4E-45", RyuFloat.toString(Float.MIN_VALUE), "Era esperado valores iguais, mas  '1.4E-45' é diferente de " + result7664 + " <RyuFloat.toString(Float.MIN_VALUE)>")
chamada antiga: assertEquals("1.0", RyuDouble.toString(1D))
nova chamada: assertEquals("1.0", RyuDouble.toString(1D), "Era esperado valores iguais, mas  '1.0' é diferente de " + result7665 + " <RyuDouble.toString(1D)>")
chamada antiga: assertEquals("1.7976931348623157E308", RyuDouble.toString(Double.MAX_VALUE))
nova chamada: assertEquals("1.7976931348623157E308", RyuDouble.toString(Double.MAX_VALUE), "Era esperado valores iguais, mas  '1.7976931348623157E308' é diferente de " + result7666 + " <RyuDouble.toString(Double.MAX_VALUE)>")
chamada antiga: assertEquals("4.9E-324", RyuDouble.toString(Double.MIN_VALUE))
nova chamada: assertEquals("4.9E-324", RyuDouble.toString(Double.MIN_VALUE), "Era esperado valores iguais, mas  '4.9E-324' é diferente de " + result7667 + " <RyuDouble.toString(Double.MIN_VALUE)>")
chamada antiga: assertNull(TypeUtils.toByte(null))
nova chamada: assertNull(TypeUtils.toByte(null), "Era esperado nulo, mas " + result7668 + " <TypeUtils.toByte(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toByte(""))
nova chamada: assertNull(TypeUtils.toByte(""), "Era esperado nulo, mas " + result7669 + " <TypeUtils.toByte('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toByte("null"))
nova chamada: assertNull(TypeUtils.toByte("null"), "Era esperado nulo, mas " + result7670 + " <TypeUtils.toByte('null')> não é nulo")
chamada antiga: assertEquals(0, TypeUtils.toByteValue(null))
nova chamada: assertEquals(0, TypeUtils.toByteValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result7671 + " <TypeUtils.toByteValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.toByteValue(""))
nova chamada: assertEquals(0, TypeUtils.toByteValue(""), "Era esperado valores iguais, mas  0 é diferente de " + result7672 + " <TypeUtils.toByteValue('')>")
chamada antiga: assertEquals(0, TypeUtils.toByteValue("null"))
nova chamada: assertEquals(0, TypeUtils.toByteValue("null"), "Era esperado valores iguais, mas  0 é diferente de " + result7673 + " <TypeUtils.toByteValue('null')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte("0"))
nova chamada: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte("0"), "Era esperado valores iguais, mas " + result7674 + " <Byte.valueOf((byte) 0)> é diferente de " + result7675 + " <TypeUtils.toByte('0')>")
chamada antiga: assertEquals(0, TypeUtils.toByteValue("0"))
nova chamada: assertEquals(0, TypeUtils.toByteValue("0"), "Era esperado valores iguais, mas  0 é diferente de " + result7676 + " <TypeUtils.toByteValue('0')>")
chamada antiga: assertEquals(0, TypeUtils.toByteValue((short) 0))
nova chamada: assertEquals(0, TypeUtils.toByteValue((short) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7677 + " <TypeUtils.toByteValue((short) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toByteValue((byte) 0))
nova chamada: assertEquals(0, TypeUtils.toByteValue((byte) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7678 + " <TypeUtils.toByteValue((byte) 0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((short) 0))
nova chamada: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((short) 0), "Era esperado valores iguais, mas " + result7679 + " <Byte.valueOf((byte) 0)> é diferente de " + result7680 + " <TypeUtils.toByte((short) 0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((byte) 0))
nova chamada: assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((byte) 0), "Era esperado valores iguais, mas " + result7681 + " <Byte.valueOf((byte) 0)> é diferente de " + result7682 + " <TypeUtils.toByte((byte) 0)>")
chamada antiga: assertNull(TypeUtils.toDouble(null))
nova chamada: assertNull(TypeUtils.toDouble(null), "Era esperado nulo, mas " + result7683 + " <TypeUtils.toDouble(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toDouble(""))
nova chamada: assertNull(TypeUtils.toDouble(""), "Era esperado nulo, mas " + result7684 + " <TypeUtils.toDouble('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toDouble("null"))
nova chamada: assertNull(TypeUtils.toDouble("null"), "Era esperado nulo, mas " + result7685 + " <TypeUtils.toDouble('null')> não é nulo")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue(null))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue(null), "Era esperado valores iguais, mas  0D é diferente de " + result7686 + " <TypeUtils.toDoubleValue(null)>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue(""))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue(""), "Era esperado valores iguais, mas  0D é diferente de " + result7687 + " <TypeUtils.toDoubleValue('')>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue("null"))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue("null"), "Era esperado valores iguais, mas  0D é diferente de " + result7688 + " <TypeUtils.toDoubleValue('null')>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue(0D))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue(0D), "Era esperado valores iguais, mas  0D é diferente de " + result7689 + " <TypeUtils.toDoubleValue(0D)>")
chamada antiga: assertEquals(0D, TypeUtils.toDouble(0D))
nova chamada: assertEquals(0D, TypeUtils.toDouble(0D), "Era esperado valores iguais, mas  0D é diferente de " + result7690 + " <TypeUtils.toDouble(0D)>")
chamada antiga: assertEquals(0D, TypeUtils.toDouble("0"))
nova chamada: assertEquals(0D, TypeUtils.toDouble("0"), "Era esperado valores iguais, mas  0D é diferente de " + result7691 + " <TypeUtils.toDouble('0')>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue("0"))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue("0"), "Era esperado valores iguais, mas  0D é diferente de " + result7692 + " <TypeUtils.toDoubleValue('0')>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue((short) 0))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue((short) 0), "Era esperado valores iguais, mas  0D é diferente de " + result7693 + " <TypeUtils.toDoubleValue((short) 0)>")
chamada antiga: assertEquals(0D, TypeUtils.toDoubleValue((byte) 0))
nova chamada: assertEquals(0D, TypeUtils.toDoubleValue((byte) 0), "Era esperado valores iguais, mas  0D é diferente de " + result7694 + " <TypeUtils.toDoubleValue((byte) 0)>")
chamada antiga: assertEquals(0D, TypeUtils.toDouble((short) 0))
nova chamada: assertEquals(0D, TypeUtils.toDouble((short) 0), "Era esperado valores iguais, mas  0D é diferente de " + result7695 + " <TypeUtils.toDouble((short) 0)>")
chamada antiga: assertEquals(0D, TypeUtils.toDouble((byte) 0))
nova chamada: assertEquals(0D, TypeUtils.toDouble((byte) 0), "Era esperado valores iguais, mas  0D é diferente de " + result7696 + " <TypeUtils.toDouble((byte) 0)>")
chamada antiga: assertNull(TypeUtils.toFloat(null))
nova chamada: assertNull(TypeUtils.toFloat(null), "Era esperado nulo, mas " + result7697 + " <TypeUtils.toFloat(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toFloat(""))
nova chamada: assertNull(TypeUtils.toFloat(""), "Era esperado nulo, mas " + result7698 + " <TypeUtils.toFloat('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toFloat("null"))
nova chamada: assertNull(TypeUtils.toFloat("null"), "Era esperado nulo, mas " + result7699 + " <TypeUtils.toFloat('null')> não é nulo")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue(null))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue(null), "Era esperado valores iguais, mas  0F é diferente de " + result7700 + " <TypeUtils.toFloatValue(null)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue(""))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue(""), "Era esperado valores iguais, mas  0F é diferente de " + result7701 + " <TypeUtils.toFloatValue('')>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue("null"))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue("null"), "Era esperado valores iguais, mas  0F é diferente de " + result7702 + " <TypeUtils.toFloatValue('null')>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue(0F))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue(0F), "Era esperado valores iguais, mas  0F é diferente de " + result7703 + " <TypeUtils.toFloatValue(0F)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloat(0F))
nova chamada: assertEquals(0F, TypeUtils.toFloat(0F), "Era esperado valores iguais, mas  0F é diferente de " + result7704 + " <TypeUtils.toFloat(0F)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloat("0"))
nova chamada: assertEquals(0F, TypeUtils.toFloat("0"), "Era esperado valores iguais, mas  0F é diferente de " + result7705 + " <TypeUtils.toFloat('0')>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue("0"))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue("0"), "Era esperado valores iguais, mas  0F é diferente de " + result7706 + " <TypeUtils.toFloatValue('0')>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue((short) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue((short) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7707 + " <TypeUtils.toFloatValue((short) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue((byte) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue((byte) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7708 + " <TypeUtils.toFloatValue((byte) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue((byte) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue((byte) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7709 + " <TypeUtils.toFloatValue((byte) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloatValue((float) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloatValue((float) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7710 + " <TypeUtils.toFloatValue((float) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloat((short) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloat((short) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7711 + " <TypeUtils.toFloat((short) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloat((byte) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloat((byte) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7712 + " <TypeUtils.toFloat((byte) 0)>")
chamada antiga: assertEquals(0F, TypeUtils.toFloat((float) 0))
nova chamada: assertEquals(0F, TypeUtils.toFloat((float) 0), "Era esperado valores iguais, mas  0F é diferente de " + result7713 + " <TypeUtils.toFloat((float) 0)>")
chamada antiga: assertNull(TypeUtils.toShort(null))
nova chamada: assertNull(TypeUtils.toShort(null), "Era esperado nulo, mas " + result7714 + " <TypeUtils.toShort(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toShort(""))
nova chamada: assertNull(TypeUtils.toShort(""), "Era esperado nulo, mas " + result7715 + " <TypeUtils.toShort('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toShort("null"))
nova chamada: assertNull(TypeUtils.toShort("null"), "Era esperado nulo, mas " + result7716 + " <TypeUtils.toShort('null')> não é nulo")
chamada antiga: assertEquals(0, TypeUtils.toShortValue(null))
nova chamada: assertEquals(0, TypeUtils.toShortValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result7717 + " <TypeUtils.toShortValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.toShortValue(""))
nova chamada: assertEquals(0, TypeUtils.toShortValue(""), "Era esperado valores iguais, mas  0 é diferente de " + result7718 + " <TypeUtils.toShortValue('')>")
chamada antiga: assertEquals(0, TypeUtils.toShortValue("null"))
nova chamada: assertEquals(0, TypeUtils.toShortValue("null"), "Era esperado valores iguais, mas  0 é diferente de " + result7719 + " <TypeUtils.toShortValue('null')>")
chamada antiga: assertEquals(Short.valueOf((short) 0), TypeUtils.toShort("0"))
nova chamada: assertEquals(Short.valueOf((short) 0), TypeUtils.toShort("0"), "Era esperado valores iguais, mas " + result7720 + " <Short.valueOf((short) 0)> é diferente de " + result7721 + " <TypeUtils.toShort('0')>")
chamada antiga: assertEquals(0, TypeUtils.toShortValue("0"))
nova chamada: assertEquals(0, TypeUtils.toShortValue("0"), "Era esperado valores iguais, mas  0 é diferente de " + result7722 + " <TypeUtils.toShortValue('0')>")
chamada antiga: assertEquals(0, TypeUtils.toShortValue((short) 0))
nova chamada: assertEquals(0, TypeUtils.toShortValue((short) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7723 + " <TypeUtils.toShortValue((short) 0)>")
chamada antiga: assertEquals(Short.valueOf((short) 0), TypeUtils.toShort((short) 0))
nova chamada: assertEquals(Short.valueOf((short) 0), TypeUtils.toShort((short) 0), "Era esperado valores iguais, mas " + result7724 + " <Short.valueOf((short) 0)> é diferente de " + result7725 + " <TypeUtils.toShort((short) 0)>")
chamada antiga: assertNull(TypeUtils.toInteger(null))
nova chamada: assertNull(TypeUtils.toInteger(null), "Era esperado nulo, mas " + result7726 + " <TypeUtils.toInteger(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toInteger(""))
nova chamada: assertNull(TypeUtils.toInteger(""), "Era esperado nulo, mas " + result7727 + " <TypeUtils.toInteger('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toInteger("null"))
nova chamada: assertNull(TypeUtils.toInteger("null"), "Era esperado nulo, mas " + result7728 + " <TypeUtils.toInteger('null')> não é nulo")
chamada antiga: assertEquals(0, TypeUtils.toIntValue(null))
nova chamada: assertEquals(0, TypeUtils.toIntValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result7729 + " <TypeUtils.toIntValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue(""))
nova chamada: assertEquals(0, TypeUtils.toIntValue(""), "Era esperado valores iguais, mas  0 é diferente de " + result7730 + " <TypeUtils.toIntValue('')>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue("null"))
nova chamada: assertEquals(0, TypeUtils.toIntValue("null"), "Era esperado valores iguais, mas  0 é diferente de " + result7731 + " <TypeUtils.toIntValue('null')>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue("0"))
nova chamada: assertEquals(0, TypeUtils.toIntValue("0"), "Era esperado valores iguais, mas  0 é diferente de " + result7732 + " <TypeUtils.toIntValue('0')>")
chamada antiga: assertEquals(Integer.valueOf(0), TypeUtils.toInteger("0"))
nova chamada: assertEquals(Integer.valueOf(0), TypeUtils.toInteger("0"), "Era esperado valores iguais, mas " + result7733 + " <Integer.valueOf(0)> é diferente de " + result7734 + " <TypeUtils.toInteger('0')>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue("0"))
nova chamada: assertEquals(0, TypeUtils.toIntValue("0"), "Era esperado valores iguais, mas  0 é diferente de " + result7735 + " <TypeUtils.toIntValue('0')>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue(0))
nova chamada: assertEquals(0, TypeUtils.toIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result7736 + " <TypeUtils.toIntValue(0)>")
chamada antiga: assertEquals(Integer.valueOf(0), TypeUtils.toInteger(0))
nova chamada: assertEquals(Integer.valueOf(0), TypeUtils.toInteger(0), "Era esperado valores iguais, mas " + result7737 + " <Integer.valueOf(0)> é diferente de " + result7738 + " <TypeUtils.toInteger(0)>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue((short) 0))
nova chamada: assertEquals(0, TypeUtils.toIntValue((short) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7739 + " <TypeUtils.toIntValue((short) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue((byte) 0))
nova chamada: assertEquals(0, TypeUtils.toIntValue((byte) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7740 + " <TypeUtils.toIntValue((byte) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue((byte) 0))
nova chamada: assertEquals(0, TypeUtils.toIntValue((byte) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7741 + " <TypeUtils.toIntValue((byte) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toIntValue((float) 0))
nova chamada: assertEquals(0, TypeUtils.toIntValue((float) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7742 + " <TypeUtils.toIntValue((float) 0)>")
chamada antiga: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((short) 0))
nova chamada: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((short) 0), "Era esperado valores iguais, mas " + result7743 + " <Integer.valueOf(0)> é diferente de " + result7744 + " <TypeUtils.toInteger((short) 0)>")
chamada antiga: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((byte) 0))
nova chamada: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((byte) 0), "Era esperado valores iguais, mas " + result7745 + " <Integer.valueOf(0)> é diferente de " + result7746 + " <TypeUtils.toInteger((byte) 0)>")
chamada antiga: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((float) 0))
nova chamada: assertEquals(Integer.valueOf(0), TypeUtils.toInteger((float) 0), "Era esperado valores iguais, mas " + result7747 + " <Integer.valueOf(0)> é diferente de " + result7748 + " <TypeUtils.toInteger((float) 0)>")
chamada antiga: assertEquals(Integer.valueOf(1), TypeUtils.toInteger(1))
nova chamada: assertEquals(Integer.valueOf(1), TypeUtils.toInteger(1), "Era esperado valores iguais, mas " + result7749 + " <Integer.valueOf(1)> é diferente de " + result7750 + " <TypeUtils.toInteger(1)>")
chamada antiga: assertNull(TypeUtils.toLong(null))
nova chamada: assertNull(TypeUtils.toLong(null), "Era esperado nulo, mas " + result7751 + " <TypeUtils.toLong(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toLong(""))
nova chamada: assertNull(TypeUtils.toLong(""), "Era esperado nulo, mas " + result7752 + " <TypeUtils.toLong('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toLong("null"))
nova chamada: assertNull(TypeUtils.toLong("null"), "Era esperado nulo, mas " + result7753 + " <TypeUtils.toLong('null')> não é nulo")
chamada antiga: assertEquals(0, TypeUtils.toLongValue(null))
nova chamada: assertEquals(0, TypeUtils.toLongValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result7754 + " <TypeUtils.toLongValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue(""))
nova chamada: assertEquals(0, TypeUtils.toLongValue(""), "Era esperado valores iguais, mas  0 é diferente de " + result7755 + " <TypeUtils.toLongValue('')>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue("null"))
nova chamada: assertEquals(0, TypeUtils.toLongValue("null"), "Era esperado valores iguais, mas  0 é diferente de " + result7756 + " <TypeUtils.toLongValue('null')>")
chamada antiga: assertEquals(Long.valueOf(0), TypeUtils.toLong("0"))
nova chamada: assertEquals(Long.valueOf(0), TypeUtils.toLong("0"), "Era esperado valores iguais, mas " + result7757 + " <Long.valueOf(0)> é diferente de " + result7758 + " <TypeUtils.toLong('0')>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue("0"))
nova chamada: assertEquals(0, TypeUtils.toLongValue("0"), "Era esperado valores iguais, mas  0 é diferente de " + result7759 + " <TypeUtils.toLongValue('0')>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue(0L))
nova chamada: assertEquals(0, TypeUtils.toLongValue(0L), "Era esperado valores iguais, mas  0 é diferente de " + result7760 + " <TypeUtils.toLongValue(0L)>")
chamada antiga: assertEquals(Long.valueOf(0), TypeUtils.toLong(0L))
nova chamada: assertEquals(Long.valueOf(0), TypeUtils.toLong(0L), "Era esperado valores iguais, mas " + result7761 + " <Long.valueOf(0)> é diferente de " + result7762 + " <TypeUtils.toLong(0L)>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue((short) 0))
nova chamada: assertEquals(0, TypeUtils.toLongValue((short) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7763 + " <TypeUtils.toLongValue((short) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue((byte) 0))
nova chamada: assertEquals(0, TypeUtils.toLongValue((byte) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7764 + " <TypeUtils.toLongValue((byte) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue((byte) 0))
nova chamada: assertEquals(0, TypeUtils.toLongValue((byte) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7765 + " <TypeUtils.toLongValue((byte) 0)>")
chamada antiga: assertEquals(0, TypeUtils.toLongValue((float) 0))
nova chamada: assertEquals(0, TypeUtils.toLongValue((float) 0), "Era esperado valores iguais, mas  0 é diferente de " + result7766 + " <TypeUtils.toLongValue((float) 0)>")
chamada antiga: assertEquals(Long.valueOf(0), TypeUtils.toLong((short) 0))
nova chamada: assertEquals(Long.valueOf(0), TypeUtils.toLong((short) 0), "Era esperado valores iguais, mas " + result7767 + " <Long.valueOf(0)> é diferente de " + result7768 + " <TypeUtils.toLong((short) 0)>")
chamada antiga: assertEquals(Long.valueOf(0), TypeUtils.toLong((byte) 0))
nova chamada: assertEquals(Long.valueOf(0), TypeUtils.toLong((byte) 0), "Era esperado valores iguais, mas " + result7769 + " <Long.valueOf(0)> é diferente de " + result7770 + " <TypeUtils.toLong((byte) 0)>")
chamada antiga: assertEquals(Long.valueOf(0), TypeUtils.toLong((float) 0))
nova chamada: assertEquals(Long.valueOf(0), TypeUtils.toLong((float) 0), "Era esperado valores iguais, mas " + result7771 + " <Long.valueOf(0)> é diferente de " + result7772 + " <TypeUtils.toLong((float) 0)>")
chamada antiga: assertEquals(Long.valueOf(1), TypeUtils.toLong(1))
nova chamada: assertEquals(Long.valueOf(1), TypeUtils.toLong(1), "Era esperado valores iguais, mas " + result7773 + " <Long.valueOf(1)> é diferente de " + result7774 + " <TypeUtils.toLong(1)>")
chamada antiga: assertNull(TypeUtils.toBigInteger(null))
nova chamada: assertNull(TypeUtils.toBigInteger(null), "Era esperado nulo, mas " + result7775 + " <TypeUtils.toBigInteger(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toBigInteger(""))
nova chamada: assertNull(TypeUtils.toBigInteger(""), "Era esperado nulo, mas " + result7776 + " <TypeUtils.toBigInteger('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toBigInteger("null"))
nova chamada: assertNull(TypeUtils.toBigInteger("null"), "Era esperado nulo, mas " + result7777 + " <TypeUtils.toBigInteger('null')> não é nulo")
chamada antiga: assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger(1))
nova chamada: assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger(1), "Era esperado valores iguais, mas " + result7778 + " <BigInteger.valueOf(1)> é diferente de " + result7779 + " <TypeUtils.toBigInteger(1)>")
chamada antiga: assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger("1"))
nova chamada: assertEquals(BigInteger.valueOf(1), TypeUtils.toBigInteger("1"), "Era esperado valores iguais, mas " + result7780 + " <BigInteger.valueOf(1)> é diferente de " + result7781 + " <TypeUtils.toBigInteger('1')>")
chamada antiga: assertNull(TypeUtils.toBigDecimal(null))
nova chamada: assertNull(TypeUtils.toBigDecimal(null), "Era esperado nulo, mas " + result7782 + " <TypeUtils.toBigDecimal(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.toBigDecimal(""))
nova chamada: assertNull(TypeUtils.toBigDecimal(""), "Era esperado nulo, mas " + result7783 + " <TypeUtils.toBigDecimal('')> não é nulo")
chamada antiga: assertNull(TypeUtils.toBigDecimal("null"))
nova chamada: assertNull(TypeUtils.toBigDecimal("null"), "Era esperado nulo, mas " + result7784 + " <TypeUtils.toBigDecimal('null')> não é nulo")
chamada antiga: assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal(1))
nova chamada: assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal(1), "Era esperado valores iguais, mas " + result7785 + " <BigDecimal.valueOf(1)> é diferente de " + result7786 + " <TypeUtils.toBigDecimal(1)>")
chamada antiga: assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal("1"))
nova chamada: assertEquals(BigDecimal.valueOf(1), TypeUtils.toBigDecimal("1"), "Era esperado valores iguais, mas " + result7787 + " <BigDecimal.valueOf(1)> é diferente de " + result7788 + " <TypeUtils.toBigDecimal('1')>")
chamada antiga: assertEquals(byte.class, TypeUtils.loadClass("B"))
nova chamada: assertEquals(byte.class, TypeUtils.loadClass("B"), "Era esperado valores iguais, mas  byte.class é diferente de " + result7789 + " <TypeUtils.loadClass('B')>")
chamada antiga: assertEquals(short.class, TypeUtils.loadClass("S"))
nova chamada: assertEquals(short.class, TypeUtils.loadClass("S"), "Era esperado valores iguais, mas  short.class é diferente de " + result7790 + " <TypeUtils.loadClass('S')>")
chamada antiga: assertEquals(int.class, TypeUtils.loadClass("I"))
nova chamada: assertEquals(int.class, TypeUtils.loadClass("I"), "Era esperado valores iguais, mas  int.class é diferente de " + result7791 + " <TypeUtils.loadClass('I')>")
chamada antiga: assertEquals(long.class, TypeUtils.loadClass("J"))
nova chamada: assertEquals(long.class, TypeUtils.loadClass("J"), "Era esperado valores iguais, mas  long.class é diferente de " + result7792 + " <TypeUtils.loadClass('J')>")
chamada antiga: assertEquals(float.class, TypeUtils.loadClass("F"))
nova chamada: assertEquals(float.class, TypeUtils.loadClass("F"), "Era esperado valores iguais, mas  float.class é diferente de " + result7793 + " <TypeUtils.loadClass('F')>")
chamada antiga: assertEquals(double.class, TypeUtils.loadClass("D"))
nova chamada: assertEquals(double.class, TypeUtils.loadClass("D"), "Era esperado valores iguais, mas  double.class é diferente de " + result7794 + " <TypeUtils.loadClass('D')>")
chamada antiga: assertEquals(boolean.class, TypeUtils.loadClass("Z"))
nova chamada: assertEquals(boolean.class, TypeUtils.loadClass("Z"), "Era esperado valores iguais, mas  boolean.class é diferente de " + result7795 + " <TypeUtils.loadClass('Z')>")
chamada antiga: assertEquals(char.class, TypeUtils.loadClass("C"))
nova chamada: assertEquals(char.class, TypeUtils.loadClass("C"), "Era esperado valores iguais, mas  char.class é diferente de " + result7796 + " <TypeUtils.loadClass('C')>")
chamada antiga: assertSame(o, TypeUtils.cast(o, Object.class))
nova chamada: assertSame(o, TypeUtils.cast(o, Object.class), "Era esperado objetos iguais, mas  o é diferente de " + result7797 + " <TypeUtils.cast(o, Object.class)>")
chamada antiga: assertNull(TypeUtils.cast(null, Object.class))
nova chamada: assertNull(TypeUtils.cast(null, Object.class), "Era esperado nulo, mas " + result7798 + " <TypeUtils.cast(null, Object.class)> não é nulo")
chamada antiga: assertSame(date, TypeUtils.cast(date, Date.class))
nova chamada: assertSame(date, TypeUtils.cast(date, Date.class), "Era esperado objetos iguais, mas  date é diferente de " + result7799 + " <TypeUtils.cast(date, Date.class)>")
chamada antiga: assertEquals(date, TypeUtils.cast(date.toInstant(), Date.class))
nova chamada: assertEquals(date, TypeUtils.cast(date.toInstant(), Date.class), "Era esperado valores iguais, mas  date é diferente de " + result7800 + " <TypeUtils.cast(date.toInstant(), Date.class)>")
chamada antiga: assertEquals(instant, TypeUtils.cast(date, Instant.class))
nova chamada: assertEquals(instant, TypeUtils.cast(date, Instant.class), "Era esperado valores iguais, mas  instant é diferente de " + result7801 + " <TypeUtils.cast(date, Instant.class)>")
chamada antiga: assertSame(instant, TypeUtils.cast(instant, Instant.class))
nova chamada: assertSame(instant, TypeUtils.cast(instant, Instant.class), "Era esperado objetos iguais, mas  instant é diferente de " + result7802 + " <TypeUtils.cast(instant, Instant.class)>")
chamada antiga: assertEquals(Instant.ofEpochSecond(instant.getEpochSecond()), TypeUtils.cast(JSONObject.of("epochSecond", instant.getEpochSecond()), Instant.class))
nova chamada: assertEquals(Instant.ofEpochSecond(instant.getEpochSecond()), TypeUtils.cast(JSONObject.of("epochSecond", instant.getEpochSecond()), Instant.class), "Era esperado valores iguais, mas " + result7803 + " <Instant.ofEpochSecond(instant.getEpochSecond())> é diferente de " + result7804 + " <TypeUtils.cast(JSONObject.of('epochSecond', instant.getEpochSecond()), Instant.class)>")
chamada antiga: assertEquals(instant, TypeUtils.cast(JSONObject.of("epochMilli", instant.toEpochMilli()), Instant.class))
nova chamada: assertEquals(instant, TypeUtils.cast(JSONObject.of("epochMilli", instant.toEpochMilli()), Instant.class), "Era esperado valores iguais, mas  instant é diferente de " + result7805 + " <TypeUtils.cast(JSONObject.of('epochMilli', instant.toEpochMilli()), Instant.class)>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(false, TypeUtils.getDefaultValue(boolean.class))
nova chamada: assertEquals(false, TypeUtils.getDefaultValue(boolean.class), "Era esperado valores iguais, mas  false é diferente de " + result7806 + " <TypeUtils.getDefaultValue(boolean.class)>")
chamada antiga: assertEquals((byte) 0, TypeUtils.getDefaultValue(byte.class))
nova chamada: assertEquals((byte) 0, TypeUtils.getDefaultValue(byte.class), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result7807 + " <TypeUtils.getDefaultValue(byte.class)>")
chamada antiga: assertEquals((short) 0, TypeUtils.getDefaultValue(short.class))
nova chamada: assertEquals((short) 0, TypeUtils.getDefaultValue(short.class), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result7808 + " <TypeUtils.getDefaultValue(short.class)>")
chamada antiga: assertEquals(0, TypeUtils.getDefaultValue(int.class))
nova chamada: assertEquals(0, TypeUtils.getDefaultValue(int.class), "Era esperado valores iguais, mas  0 é diferente de " + result7809 + " <TypeUtils.getDefaultValue(int.class)>")
chamada antiga: assertEquals(0L, TypeUtils.getDefaultValue(long.class))
nova chamada: assertEquals(0L, TypeUtils.getDefaultValue(long.class), "Era esperado valores iguais, mas  0L é diferente de " + result7810 + " <TypeUtils.getDefaultValue(long.class)>")
chamada antiga: assertEquals(0F, TypeUtils.getDefaultValue(float.class))
nova chamada: assertEquals(0F, TypeUtils.getDefaultValue(float.class), "Era esperado valores iguais, mas  0F é diferente de " + result7811 + " <TypeUtils.getDefaultValue(float.class)>")
chamada antiga: assertEquals(0D, TypeUtils.getDefaultValue(double.class))
nova chamada: assertEquals(0D, TypeUtils.getDefaultValue(double.class), "Era esperado valores iguais, mas  0D é diferente de " + result7812 + " <TypeUtils.getDefaultValue(double.class)>")
chamada antiga: assertEquals((char) 0, TypeUtils.getDefaultValue(char.class))
nova chamada: assertEquals((char) 0, TypeUtils.getDefaultValue(char.class), "Era esperado valores iguais, mas  (char) 0 é diferente de " + result7813 + " <TypeUtils.getDefaultValue(char.class)>")
chamada antiga: assertEquals(Optional.empty(), TypeUtils.getDefaultValue(Optional.class))
nova chamada: assertEquals(Optional.empty(), TypeUtils.getDefaultValue(Optional.class), "Era esperado valores iguais, mas " + result7814 + " <Optional.empty()> é diferente de " + result7815 + " <TypeUtils.getDefaultValue(Optional.class)>")
chamada antiga: assertEquals(OptionalInt.empty(), TypeUtils.getDefaultValue(OptionalInt.class))
nova chamada: assertEquals(OptionalInt.empty(), TypeUtils.getDefaultValue(OptionalInt.class), "Era esperado valores iguais, mas " + result7816 + " <OptionalInt.empty()> é diferente de " + result7817 + " <TypeUtils.getDefaultValue(OptionalInt.class)>")
chamada antiga: assertEquals(OptionalLong.empty(), TypeUtils.getDefaultValue(OptionalLong.class))
nova chamada: assertEquals(OptionalLong.empty(), TypeUtils.getDefaultValue(OptionalLong.class), "Era esperado valores iguais, mas " + result7818 + " <OptionalLong.empty()> é diferente de " + result7819 + " <TypeUtils.getDefaultValue(OptionalLong.class)>")
chamada antiga: assertEquals(OptionalDouble.empty(), TypeUtils.getDefaultValue(OptionalDouble.class))
nova chamada: assertEquals(OptionalDouble.empty(), TypeUtils.getDefaultValue(OptionalDouble.class), "Era esperado valores iguais, mas " + result7820 + " <OptionalDouble.empty()> é diferente de " + result7821 + " <TypeUtils.getDefaultValue(OptionalDouble.class)>")
chamada antiga: assertEquals(Integer.valueOf(1), TypeUtils.cast("1", (Type) Integer.class))
nova chamada: assertEquals(Integer.valueOf(1), TypeUtils.cast("1", (Type) Integer.class), "Era esperado valores iguais, mas " + result7822 + " <Integer.valueOf(1)> é diferente de " + result7823 + " <TypeUtils.cast('1', (Type) Integer.class)>")
chamada antiga: assertNull(TypeUtils.cast(null, (Type) Integer.class))
nova chamada: assertNull(TypeUtils.cast(null, (Type) Integer.class), "Era esperado nulo, mas " + result7824 + " <TypeUtils.cast(null, (Type) Integer.class)> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(123), ((Bean<Integer>) TypeUtils.cast(map, new TypeReference<Bean<Integer>>() {
}.getType())).id)
nova chamada: assertEquals(Integer.valueOf(123), ((Bean<Integer>) TypeUtils.cast(map, new TypeReference<Bean<Integer>>() {
}.getType())).id, "Era esperado valores iguais, mas " + result7825 + " <Integer.valueOf(123)> é diferente de " + " ((BeanInteger) TypeUtils.cast(map, new TypeReferenceBeanInteger() {\n}.getType())).id")
chamada antiga: assertEquals(Integer.valueOf(123), ((List<Bean<Integer>>) TypeUtils.cast(list, new TypeReference<List<Bean<Integer>>>() {
}.getType())).get(0).id)
nova chamada: assertEquals(Integer.valueOf(123), ((List<Bean<Integer>>) TypeUtils.cast(list, new TypeReference<List<Bean<Integer>>>() {
}.getType())).get(0).id, "Era esperado valores iguais, mas " + result7826 + " <Integer.valueOf(123)> é diferente de " + " ((ListBeanInteger) TypeUtils.cast(list, new TypeReferenceListBeanInteger() {\n}.getType())).get(0).id")
chamada antiga: assertNull(TypeUtils.toStringArray(null))
nova chamada: assertNull(TypeUtils.toStringArray(null), "Era esperado nulo, mas " + result7827 + " <TypeUtils.toStringArray(null)> não é nulo")
chamada antiga: assertArrayEquals(strings, TypeUtils.toStringArray(strings))
nova chamada: assertArrayEquals(strings, TypeUtils.toStringArray(strings), "Era esperado arrays iguais, mas  strings é diferente de " + result7828 + " <TypeUtils.toStringArray(strings)>")
chamada antiga: assertArrayEquals(strings, TypeUtils.toStringArray(Arrays.asList(strings)))
nova chamada: assertArrayEquals(strings, TypeUtils.toStringArray(Arrays.asList(strings)), "Era esperado arrays iguais, mas  strings é diferente de " + result7829 + " <TypeUtils.toStringArray(Arrays.asList(strings))>")
chamada antiga: assertArrayEquals(strings, TypeUtils.toStringArray(new Object[] { 1, 2, 3 }))
nova chamada: assertArrayEquals(strings, TypeUtils.toStringArray(new Object[] { 1, 2, 3 }), "Era esperado arrays iguais, mas  strings é diferente de " + result7830 + " <TypeUtils.toStringArray(new Object[] { 1, 2, 3 })>")
chamada antiga: assertNull(TypeUtils.cast(null, new Type[0]))
nova chamada: assertNull(TypeUtils.cast(null, new Type[0]), "Era esperado nulo, mas " + result7831 + " <TypeUtils.cast(null, new Type[0])> não é nulo")
chamada antiga: assertArrayEquals(new Object[] { 1, 2L, BigDecimal.valueOf(3) }, TypeUtils.cast(new String[] { "1", "2", "3" }, new Type[] { Integer.class, Long.class, BigDecimal.class }))
nova chamada: assertArrayEquals(new Object[] { 1, 2L, BigDecimal.valueOf(3) }, TypeUtils.cast(new String[] { "1", "2", "3" }, new Type[] { Integer.class, Long.class, BigDecimal.class }), "Era esperado arrays iguais, mas  new Object[] { 1, 2L, BigDecimal.valueOf(3) } é diferente de " + result7832 + " <TypeUtils.cast(new String[] { '1', '2', '3' }, new Type[] { Integer.class, Long.class, BigDecimal.class })>")
chamada antiga: assertSame(Collections.EMPTY_MAP.getClass(), TypeUtils.loadClass("java.util.Collections$EmptyMap"))
nova chamada: assertSame(Collections.EMPTY_MAP.getClass(), TypeUtils.loadClass("java.util.Collections$EmptyMap"), "Era esperado objetos iguais, mas " + result7833 + " <Collections.EMPTY_MAP.getClass()> é diferente de " + result7834 + " <TypeUtils.loadClass('java.util.Collections$EmptyMap')>")
chamada antiga: assertSame(Collections.EMPTY_SET.getClass(), TypeUtils.loadClass("java.util.Collections$EmptySet"))
nova chamada: assertSame(Collections.EMPTY_SET.getClass(), TypeUtils.loadClass("java.util.Collections$EmptySet"), "Era esperado objetos iguais, mas " + result7835 + " <Collections.EMPTY_SET.getClass()> é diferente de " + result7836 + " <TypeUtils.loadClass('java.util.Collections$EmptySet')>")
chamada antiga: assertSame(Collections.unmodifiableList(new ArrayList<>()).getClass(), TypeUtils.loadClass("java.util.Collections$UnmodifiableRandomAccessList"))
nova chamada: assertSame(Collections.unmodifiableList(new ArrayList<>()).getClass(), TypeUtils.loadClass("java.util.Collections$UnmodifiableRandomAccessList"), "Era esperado objetos iguais, mas " + result7837 + " <Collections.unmodifiableList(new ArrayList<>()).getClass()> é diferente de " + result7838 + " <TypeUtils.loadClass('java.util.Collections$UnmodifiableRandomAccessList')>")
chamada antiga: assertSame(java.util.Optional.class, TypeUtils.loadClass("java.util.Optional"))
nova chamada: assertSame(java.util.Optional.class, TypeUtils.loadClass("java.util.Optional"), "Era esperado objetos iguais, mas  java.util.Optional.class é diferente de " + result7839 + " <TypeUtils.loadClass('java.util.Optional')>")
chamada antiga: assertSame(java.util.OptionalInt.class, TypeUtils.loadClass("java.util.OptionalInt"))
nova chamada: assertSame(java.util.OptionalInt.class, TypeUtils.loadClass("java.util.OptionalInt"), "Era esperado objetos iguais, mas  java.util.OptionalInt.class é diferente de " + result7840 + " <TypeUtils.loadClass('java.util.OptionalInt')>")
chamada antiga: assertSame(java.util.OptionalLong.class, TypeUtils.loadClass("java.util.OptionalLong"))
nova chamada: assertSame(java.util.OptionalLong.class, TypeUtils.loadClass("java.util.OptionalLong"), "Era esperado objetos iguais, mas  java.util.OptionalLong.class é diferente de " + result7841 + " <TypeUtils.loadClass('java.util.OptionalLong')>")
chamada antiga: assertSame(List.class, TypeUtils.loadClass("java.util.List"))
nova chamada: assertSame(List.class, TypeUtils.loadClass("java.util.List"), "Era esperado objetos iguais, mas  List.class é diferente de " + result7842 + " <TypeUtils.loadClass('java.util.List')>")
chamada antiga: assertSame(List.class, TypeUtils.loadClass("List"))
nova chamada: assertSame(List.class, TypeUtils.loadClass("List"), "Era esperado objetos iguais, mas  List.class é diferente de " + result7843 + " <TypeUtils.loadClass('List')>")
chamada antiga: assertSame(Set.class, TypeUtils.loadClass("java.util.Set"))
nova chamada: assertSame(Set.class, TypeUtils.loadClass("java.util.Set"), "Era esperado objetos iguais, mas  Set.class é diferente de " + result7844 + " <TypeUtils.loadClass('java.util.Set')>")
chamada antiga: assertSame(String[].class, TypeUtils.loadClass("[String"))
nova chamada: assertSame(String[].class, TypeUtils.loadClass("[String"), "Era esperado objetos iguais, mas  String[].class é diferente de " + result7845 + " <TypeUtils.loadClass('[String')>")
chamada antiga: assertSame(String[].class, TypeUtils.loadClass("String[]"))
nova chamada: assertSame(String[].class, TypeUtils.loadClass("String[]"), "Era esperado objetos iguais, mas  String[].class é diferente de " + result7846 + " <TypeUtils.loadClass('String[]')>")
chamada antiga: assertSame(byte[].class, TypeUtils.loadClass("byte[]"))
nova chamada: assertSame(byte[].class, TypeUtils.loadClass("byte[]"), "Era esperado objetos iguais, mas  byte[].class é diferente de " + result7847 + " <TypeUtils.loadClass('byte[]')>")
chamada antiga: assertSame(short[].class, TypeUtils.loadClass("short[]"))
nova chamada: assertSame(short[].class, TypeUtils.loadClass("short[]"), "Era esperado objetos iguais, mas  short[].class é diferente de " + result7848 + " <TypeUtils.loadClass('short[]')>")
chamada antiga: assertSame(short[].class, TypeUtils.loadClass("[S"))
nova chamada: assertSame(short[].class, TypeUtils.loadClass("[S"), "Era esperado objetos iguais, mas  short[].class é diferente de " + result7849 + " <TypeUtils.loadClass('[S')>")
chamada antiga: assertSame(int[].class, TypeUtils.loadClass("[I"))
nova chamada: assertSame(int[].class, TypeUtils.loadClass("[I"), "Era esperado objetos iguais, mas  int[].class é diferente de " + result7850 + " <TypeUtils.loadClass('[I')>")
chamada antiga: assertSame(int[].class, TypeUtils.loadClass("int[]"))
nova chamada: assertSame(int[].class, TypeUtils.loadClass("int[]"), "Era esperado objetos iguais, mas  int[].class é diferente de " + result7851 + " <TypeUtils.loadClass('int[]')>")
chamada antiga: assertSame(long[].class, TypeUtils.loadClass("[J"))
nova chamada: assertSame(long[].class, TypeUtils.loadClass("[J"), "Era esperado objetos iguais, mas  long[].class é diferente de " + result7852 + " <TypeUtils.loadClass('[J')>")
chamada antiga: assertSame(long[].class, TypeUtils.loadClass("long[]"))
nova chamada: assertSame(long[].class, TypeUtils.loadClass("long[]"), "Era esperado objetos iguais, mas  long[].class é diferente de " + result7853 + " <TypeUtils.loadClass('long[]')>")
chamada antiga: assertSame(float[].class, TypeUtils.loadClass("[F"))
nova chamada: assertSame(float[].class, TypeUtils.loadClass("[F"), "Era esperado objetos iguais, mas  float[].class é diferente de " + result7854 + " <TypeUtils.loadClass('[F')>")
chamada antiga: assertSame(float[].class, TypeUtils.loadClass("float[]"))
nova chamada: assertSame(float[].class, TypeUtils.loadClass("float[]"), "Era esperado objetos iguais, mas  float[].class é diferente de " + result7855 + " <TypeUtils.loadClass('float[]')>")
chamada antiga: assertSame(double[].class, TypeUtils.loadClass("[D"))
nova chamada: assertSame(double[].class, TypeUtils.loadClass("[D"), "Era esperado objetos iguais, mas  double[].class é diferente de " + result7856 + " <TypeUtils.loadClass('[D')>")
chamada antiga: assertSame(double[].class, TypeUtils.loadClass("double[]"))
nova chamada: assertSame(double[].class, TypeUtils.loadClass("double[]"), "Era esperado objetos iguais, mas  double[].class é diferente de " + result7857 + " <TypeUtils.loadClass('double[]')>")
chamada antiga: assertSame(boolean[].class, TypeUtils.loadClass("[Z"))
nova chamada: assertSame(boolean[].class, TypeUtils.loadClass("[Z"), "Era esperado objetos iguais, mas  boolean[].class é diferente de " + result7858 + " <TypeUtils.loadClass('[Z')>")
chamada antiga: assertSame(boolean[].class, TypeUtils.loadClass("boolean[]"))
nova chamada: assertSame(boolean[].class, TypeUtils.loadClass("boolean[]"), "Era esperado objetos iguais, mas  boolean[].class é diferente de " + result7859 + " <TypeUtils.loadClass('boolean[]')>")
chamada antiga: assertSame(object.getInnerMap(), innerMap)
nova chamada: assertSame(object.getInnerMap(), innerMap, "Era esperado objetos iguais, mas " + result7860 + " <object.getInnerMap()> é diferente de " + " innerMap")
chamada antiga: assertArrayEquals(new String[] { "message" }, lookupParameterNames(IOException.class.getConstructor(String.class)))
nova chamada: assertArrayEquals(new String[] { "message" }, lookupParameterNames(IOException.class.getConstructor(String.class)), "Era esperado arrays iguais, mas  new String[] { 'message' } é diferente de " + result7861 + " <lookupParameterNames(IOException.class.getConstructor(String.class))>")
chamada antiga: assertArrayEquals(new String[] { "cause" }, lookupParameterNames(IOException.class.getConstructor(Throwable.class)))
nova chamada: assertArrayEquals(new String[] { "cause" }, lookupParameterNames(IOException.class.getConstructor(Throwable.class)), "Era esperado arrays iguais, mas  new String[] { 'cause' } é diferente de " + result7862 + " <lookupParameterNames(IOException.class.getConstructor(Throwable.class))>")
chamada antiga: assertArrayEquals(new String[] { "message", "cause" }, lookupParameterNames(IOException.class.getConstructor(String.class, Throwable.class)))
nova chamada: assertArrayEquals(new String[] { "message", "cause" }, lookupParameterNames(IOException.class.getConstructor(String.class, Throwable.class)), "Era esperado arrays iguais, mas  new String[] { 'message', 'cause' } é diferente de " + result7863 + " <lookupParameterNames(IOException.class.getConstructor(String.class, Throwable.class))>")
chamada antiga: assertArrayEquals(new String[] { "message", "parsedString", "errorIndex" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class)))
nova chamada: assertArrayEquals(new String[] { "message", "parsedString", "errorIndex" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class)), "Era esperado arrays iguais, mas  new String[] { 'message', 'parsedString', 'errorIndex' } é diferente de " + result7864 + " <lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class))>")
chamada antiga: assertArrayEquals(new String[] { "message", "parsedString", "errorIndex", "cause" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class, Throwable.class)))
nova chamada: assertArrayEquals(new String[] { "message", "parsedString", "errorIndex", "cause" }, lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class, Throwable.class)), "Era esperado arrays iguais, mas  new String[] { 'message', 'parsedString', 'errorIndex', 'cause' } é diferente de " + result7865 + " <lookupParameterNames(DateTimeParseException.class.getConstructor(String.class, CharSequence.class, int.class, Throwable.class))>")
chamada antiga: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.CLOB.class).getClass())
nova chamada: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.CLOB.class).getClass(), "Era esperado valores iguais, mas  JdbcSupport.ClobWriter.class é diferente de " + result7866 + " <provider.getObjectWriter(oracle.sql.CLOB.class).getClass()>")
chamada antiga: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.NCLOB.class).getClass())
nova chamada: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.sql.NCLOB.class).getClass(), "Era esperado valores iguais, mas  JdbcSupport.ClobWriter.class é diferente de " + result7867 + " <provider.getObjectWriter(oracle.sql.NCLOB.class).getClass()>")
chamada antiga: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleClob.class).getClass())
nova chamada: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleClob.class).getClass(), "Era esperado valores iguais, mas  JdbcSupport.ClobWriter.class é diferente de " + result7868 + " <provider.getObjectWriter(oracle.jdbc.driver.OracleClob.class).getClass()>")
chamada antiga: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleNClob.class).getClass())
nova chamada: assertEquals(JdbcSupport.ClobWriter.class, provider.getObjectWriter(oracle.jdbc.driver.OracleNClob.class).getClass(), "Era esperado valores iguais, mas  JdbcSupport.ClobWriter.class é diferente de " + result7869 + " <provider.getObjectWriter(oracle.jdbc.driver.OracleNClob.class).getClass()>")
chamada antiga: assertNull(DateUtils.parseDate(null))
nova chamada: assertNull(DateUtils.parseDate(null), "Era esperado nulo, mas " + result7870 + " <DateUtils.parseDate(null)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate(null, DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate(null, DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7871 + " <DateUtils.parseDate(null, DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result7872 + " <DateUtils.parseDate(null, 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate(null, "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7873 + " <DateUtils.parseDate(null, 'yyyy-MM-dd HH:mm:ss', DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate(""))
nova chamada: assertNull(DateUtils.parseDate(""), "Era esperado nulo, mas " + result7874 + " <DateUtils.parseDate('')> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("", DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate("", DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7875 + " <DateUtils.parseDate('', DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result7876 + " <DateUtils.parseDate('', 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate("", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7877 + " <DateUtils.parseDate('', 'yyyy-MM-dd HH:mm:ss', DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("null"))
nova chamada: assertNull(DateUtils.parseDate("null"), "Era esperado nulo, mas " + result7878 + " <DateUtils.parseDate('null')> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("null", DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate("null", DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7879 + " <DateUtils.parseDate('null', DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result7880 + " <DateUtils.parseDate('null', 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID))
nova chamada: assertNull(DateUtils.parseDate("null", "yyyy-MM-dd HH:mm:ss", DEFAULT_ZONE_ID), "Era esperado nulo, mas " + result7881 + " <DateUtils.parseDate('null', 'yyyy-MM-dd HH:mm:ss', DEFAULT_ZONE_ID)> não é nulo")
chamada antiga: assertEquals(0, DateUtils.parseMillis("null"))
nova chamada: assertEquals(0, DateUtils.parseMillis("null"), "Era esperado valores iguais, mas  0 é diferente de " + result7882 + " <DateUtils.parseMillis('null')>")
chamada antiga: assertEquals(0, DateUtils.parseMillis("null", DEFAULT_ZONE_ID))
nova chamada: assertEquals(0, DateUtils.parseMillis("null", DEFAULT_ZONE_ID), "Era esperado valores iguais, mas  0 é diferente de " + result7883 + " <DateUtils.parseMillis('null', DEFAULT_ZONE_ID)>")
chamada antiga: assertEquals(0, DateUtils.parseMillis("", DEFAULT_ZONE_ID))
nova chamada: assertEquals(0, DateUtils.parseMillis("", DEFAULT_ZONE_ID), "Era esperado valores iguais, mas  0 é diferente de " + result7884 + " <DateUtils.parseMillis('', DEFAULT_ZONE_ID)>")
chamada antiga: assertEquals(0, DateUtils.parseMillis(null, DEFAULT_ZONE_ID))
nova chamada: assertEquals(0, DateUtils.parseMillis(null, DEFAULT_ZONE_ID), "Era esperado valores iguais, mas  0 é diferente de " + result7885 + " <DateUtils.parseMillis(null, DEFAULT_ZONE_ID)>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7886 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7887 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7888 + " <DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7889 + " <DateUtils.parseDate(str, '', DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7890 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7891 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str, pattern, null).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str, pattern, null).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7892 + " <DateUtils.parseDate(str, pattern, null).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseMillis19(str, DEFAULT_ZONE_ID, DateUtils.DateTimeFormatPattern.DATE_TIME_FORMAT_19_DASH))
nova chamada: assertEquals(millis, DateUtils.parseMillis19(str, DEFAULT_ZONE_ID, DateUtils.DateTimeFormatPattern.DATE_TIME_FORMAT_19_DASH), "Era esperado valores iguais, mas  millis é diferente de " + result7893 + " <DateUtils.parseMillis19(str, DEFAULT_ZONE_ID, DateUtils.DateTimeFormatPattern.DATE_TIME_FORMAT_19_DASH)>")
chamada antiga: assertEquals(millis, DateUtils.parseMillis(str, DEFAULT_ZONE_ID))
nova chamada: assertEquals(millis, DateUtils.parseMillis(str, DEFAULT_ZONE_ID), "Era esperado valores iguais, mas  millis é diferente de " + result7894 + " <DateUtils.parseMillis(str, DEFAULT_ZONE_ID)>")
chamada antiga: assertEquals(millis, DateUtils.parseDateYMDHMS19(str).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDateYMDHMS19(str).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7895 + " <DateUtils.parseDateYMDHMS19(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7896 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7897 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7898 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7899 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7900 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7901 + " <DateUtils.parseDate(str, null, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, "", DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7902 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7903 + " <DateUtils.parseDate(str, '', DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7904 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7905 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7906 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7907 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime(), "Era esperado valores iguais, mas " + result7908 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7909 + " <DateUtils.parseDate(str, pattern, null).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDateYMDHMS19(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDateYMDHMS19(str).getTime(), "Era esperado valores iguais, mas " + result7910 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7911 + " <DateUtils.parseDateYMDHMS19(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7912 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7913 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7914 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7915 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7916 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7917 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7918 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7919 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7920 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7921 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7922 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7923 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7924 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7925 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7926 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7927 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime(), "Era esperado valores iguais, mas " + result7928 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7929 + " <DateUtils.parseDate(str, pattern, null).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7930 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7931 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7932 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7933 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7934 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7935 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7936 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7937 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7938 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7939 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7940 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7941 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7942 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7943 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7944 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7945 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, null).getTime(), "Era esperado valores iguais, mas " + result7946 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7947 + " <DateUtils.parseDate(str, pattern, null).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7948 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7949 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7950 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7951 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(millis, DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(millis, DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas  millis é diferente de " + result7952 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7953 + " <ldt.atZone(UTC).toInstant().toEpochMilli()> é diferente de " + result7954 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(UTC).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7955 + " <ldt.atZone(UTC).toInstant().toEpochMilli()> é diferente de " + result7956 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7957 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7958 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7959 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7960 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7961 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7962 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7963 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7964 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7965 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7966 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7967 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7968 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7969 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7970 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7971 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7972 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7973 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7974 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7975 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7976 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7977 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7978 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7979 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7980 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7981 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7982 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7983 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7984 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7985 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7986 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7987 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7988 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7989 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7990 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7991 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7992 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7993 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7994 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result7995 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7996 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result7997 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result7998 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result7999 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8000 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result8001 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8002 + " <DateUtils.parseDate(str, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern).getTime(), "Era esperado valores iguais, mas " + result8003 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8004 + " <DateUtils.parseDate(str, pattern).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime(), "Era esperado valores iguais, mas " + result8005 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8006 + " <DateUtils.parseDate(str, pattern, DEFAULT_ZONE_ID).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8007 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8008 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8009 + " <ldt.atZone(zoneId).toInstant().toEpochMilli()> é diferente de " + result8010 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8011 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8012 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8013 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8014 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8015 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8016 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8017 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8018 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8019 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8020 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8021 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8022 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8023 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8024 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8025 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8026 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8027 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8028 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8029 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8030 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8031 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8032 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8033 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8034 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8035 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8036 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8037 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8038 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8039 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8040 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8041 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8042 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8043 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8044 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8045 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8046 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8047 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8048 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8049 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8050 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt, DateUtils.parseLocalDateTime20(str, 0))
nova chamada: assertEquals(ldt, DateUtils.parseLocalDateTime20(str, 0), "Era esperado valores iguais, mas  ldt é diferente de " + result8051 + " <DateUtils.parseLocalDateTime20(str, 0)>")
chamada antiga: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8052 + " <ldt.atZone(zoneId).toInstant().toEpochMilli()> é diferente de " + result8053 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(zoneId).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8054 + " <ldt.atZone(zoneId).toInstant().toEpochMilli()> é diferente de " + result8055 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(ldt.atZone(SHANGHAI_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime())
nova chamada: assertEquals(ldt.atZone(SHANGHAI_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseDate(str).getTime(), "Era esperado valores iguais, mas " + result8056 + " <ldt.atZone(SHANGHAI_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8057 + " <DateUtils.parseDate(str).getTime()>")
chamada antiga: assertEquals(localDate, DateUtils.parseLocalDate(str))
nova chamada: assertEquals(localDate, DateUtils.parseLocalDate(str), "Era esperado valores iguais, mas  localDate é diferente de " + result8058 + " <DateUtils.parseLocalDate(str)>")
chamada antiga: assertEquals(localDate, DateUtils.parseLocalDate(str))
nova chamada: assertEquals(localDate, DateUtils.parseLocalDate(str), "Era esperado valores iguais, mas  localDate é diferente de " + result8059 + " <DateUtils.parseLocalDate(str)>")
chamada antiga: assertNull(DateUtils.parseLocalDate(null))
nova chamada: assertNull(DateUtils.parseLocalDate(null), "Era esperado nulo, mas " + result8060 + " <DateUtils.parseLocalDate(null)> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate(null, 0, 0))
nova chamada: assertNull(DateUtils.parseLocalDate(null, 0, 0), "Era esperado nulo, mas " + result8061 + " <DateUtils.parseLocalDate(null, 0, 0)> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate(""))
nova chamada: assertNull(DateUtils.parseLocalDate(""), "Era esperado nulo, mas " + result8062 + " <DateUtils.parseLocalDate('')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate("null"))
nova chamada: assertNull(DateUtils.parseLocalDate("null"), "Era esperado nulo, mas " + result8063 + " <DateUtils.parseLocalDate('null')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate("00000000"))
nova chamada: assertNull(DateUtils.parseLocalDate("00000000"), "Era esperado nulo, mas " + result8064 + " <DateUtils.parseLocalDate('00000000')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate("00000000"))
nova chamada: assertNull(DateUtils.parseLocalDate("00000000"), "Era esperado nulo, mas " + result8065 + " <DateUtils.parseLocalDate('00000000')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate("0000-0-00"))
nova chamada: assertNull(DateUtils.parseLocalDate("0000-0-00"), "Era esperado nulo, mas " + result8066 + " <DateUtils.parseLocalDate('0000-0-00')> não é nulo")
chamada antiga: assertEquals(localDate, DateUtils.parseLocalDate(str))
nova chamada: assertEquals(localDate, DateUtils.parseLocalDate(str), "Era esperado valores iguais, mas  localDate é diferente de " + result8067 + " <DateUtils.parseLocalDate(str)>")
chamada antiga: assertNull(DateUtils.parseLocalDate("0000-00-00"))
nova chamada: assertNull(DateUtils.parseLocalDate("0000-00-00"), "Era esperado nulo, mas " + result8068 + " <DateUtils.parseLocalDate('0000-00-00')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDate("0000年00月00日"))
nova chamada: assertNull(DateUtils.parseLocalDate("0000年00月00日"), "Era esperado nulo, mas " + result8069 + " <DateUtils.parseLocalDate('0000年00月00日')> não é nulo")
chamada antiga: assertEquals(ldt, DateUtils.parseLocalDateTime(str))
nova chamada: assertEquals(ldt, DateUtils.parseLocalDateTime(str), "Era esperado valores iguais, mas  ldt é diferente de " + result8070 + " <DateUtils.parseLocalDateTime(str)>")
chamada antiga: assertEquals(ldt, DateUtils.parseLocalDateTime(str))
nova chamada: assertEquals(ldt, DateUtils.parseLocalDateTime(str), "Era esperado valores iguais, mas  ldt é diferente de " + result8071 + " <DateUtils.parseLocalDateTime(str)>")
chamada antiga: assertEquals(ldt, DateUtils.parseLocalDateTime(str))
nova chamada: assertEquals(ldt, DateUtils.parseLocalDateTime(str), "Era esperado valores iguais, mas  ldt é diferente de " + result8072 + " <DateUtils.parseLocalDateTime(str)>")
chamada antiga: assertEquals(ldt, DateUtils.parseLocalDateTime(str))
nova chamada: assertEquals(ldt, DateUtils.parseLocalDateTime(str), "Era esperado valores iguais, mas  ldt é diferente de " + result8073 + " <DateUtils.parseLocalDateTime(str)>")
chamada antiga: assertNull(DateUtils.parseLocalDateTime(null))
nova chamada: assertNull(DateUtils.parseLocalDateTime(null), "Era esperado nulo, mas " + result8074 + " <DateUtils.parseLocalDateTime(null)> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime(null, 0, 0))
nova chamada: assertNull(DateUtils.parseLocalDateTime(null, 0, 0), "Era esperado nulo, mas " + result8075 + " <DateUtils.parseLocalDateTime(null, 0, 0)> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime(""))
nova chamada: assertNull(DateUtils.parseLocalDateTime(""), "Era esperado nulo, mas " + result8076 + " <DateUtils.parseLocalDateTime('')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime("null"))
nova chamada: assertNull(DateUtils.parseLocalDateTime("null"), "Era esperado nulo, mas " + result8077 + " <DateUtils.parseLocalDateTime('null')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime("000000000000"))
nova chamada: assertNull(DateUtils.parseLocalDateTime("000000000000"), "Era esperado nulo, mas " + result8078 + " <DateUtils.parseLocalDateTime('000000000000')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime("00000000"))
nova chamada: assertNull(DateUtils.parseLocalDateTime("00000000"), "Era esperado nulo, mas " + result8079 + " <DateUtils.parseLocalDateTime('00000000')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime("0000-00-0"))
nova chamada: assertNull(DateUtils.parseLocalDateTime("0000-00-0"), "Era esperado nulo, mas " + result8080 + " <DateUtils.parseLocalDateTime('0000-00-0')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTime("0000-00-00"))
nova chamada: assertNull(DateUtils.parseLocalDateTime("0000-00-00"), "Era esperado nulo, mas " + result8081 + " <DateUtils.parseLocalDateTime('0000-00-00')> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTimeX(null, 0, 0))
nova chamada: assertNull(DateUtils.parseLocalDateTimeX(null, 0, 0), "Era esperado nulo, mas " + result8082 + " <DateUtils.parseLocalDateTimeX(null, 0, 0)> não é nulo")
chamada antiga: assertNull(DateUtils.parseLocalDateTimeX("", 0, 0))
nova chamada: assertNull(DateUtils.parseLocalDateTimeX("", 0, 0), "Era esperado nulo, mas " + result8083 + " <DateUtils.parseLocalDateTimeX('', 0, 0)> não é nulo")
chamada antiga: assertNull(DateUtils.parseZonedDateTime(null))
nova chamada: assertNull(DateUtils.parseZonedDateTime(null), "Era esperado nulo, mas " + result8084 + " <DateUtils.parseZonedDateTime(null)> não é nulo")
chamada antiga: assertNull(DateUtils.parseZonedDateTime(""))
nova chamada: assertNull(DateUtils.parseZonedDateTime(""), "Era esperado nulo, mas " + result8085 + " <DateUtils.parseZonedDateTime('')> não é nulo")
chamada antiga: assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08T4:5:6", 0, 16))
nova chamada: assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08T4:5:6", 0, 16), "Era esperado valores iguais, mas " + result8086 + " <LocalDateTime.of(2021, 7, 8, 4, 5, 6)> é diferente de " + result8087 + " <DateUtils.parseLocalDateTime('2021-07-08T4:5:6', 0, 16)>")
chamada antiga: assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08 4:5:6", 0, 16))
nova chamada: assertEquals(LocalDateTime.of(2021, 7, 8, 4, 5, 6), DateUtils.parseLocalDateTime("2021-07-08 4:5:6", 0, 16), "Era esperado valores iguais, mas " + result8088 + " <LocalDateTime.of(2021, 7, 8, 4, 5, 6)> é diferente de " + result8089 + " <DateUtils.parseLocalDateTime('2021-07-08 4:5:6', 0, 16)>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8090 + " <UTC.getId()> é diferente de " + result8091 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8092 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8093 + " <UTC.getId()> é diferente de " + result8094 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8095 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8096 + " <UTC.getId()> é diferente de " + result8097 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8098 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8099 + " <UTC.getId()> é diferente de " + result8100 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8101 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8102 + " <UTC.getId()> é diferente de " + result8103 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8104 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8105 + " <UTC.getId()> é diferente de " + result8106 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8107 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8108 + " <UTC.getId()> é diferente de " + result8109 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, actual)
nova chamada: assertEquals(ldt, actual, "Era esperado valores iguais, mas  ldt é diferente de " + " actual")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8110 + " <UTC.getId()> é diferente de " + result8111 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8112 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8113 + " <UTC.getId()> é diferente de " + result8114 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8115 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(UTC.getId(), zdt.getZone().getId())
nova chamada: assertEquals(UTC.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8116 + " <UTC.getId()> é diferente de " + result8117 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8118 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(DEFAULT_ZONE_ID.getId(), zdt.getZone().getId())
nova chamada: assertEquals(DEFAULT_ZONE_ID.getId(), zdt.getZone().getId(), "Era esperado valores iguais, mas " + result8119 + " <DEFAULT_ZONE_ID.getId()> é diferente de " + result8120 + " <zdt.getZone().getId()>")
chamada antiga: assertEquals(ldt, zdt.toLocalDateTime())
nova chamada: assertEquals(ldt, zdt.toLocalDateTime(), "Era esperado valores iguais, mas  ldt é diferente de " + result8121 + " <zdt.toLocalDateTime()>")
chamada antiga: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19(str, null))
nova chamada: assertEquals(ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19(str, null), "Era esperado valores iguais, mas " + result8122 + " <ldt.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8123 + " <DateUtils.parseMillis19(str, null)>")
chamada antiga: assertEquals(ldt1.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19("0000-00-00 00:00:00", null))
nova chamada: assertEquals(ldt1.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli(), DateUtils.parseMillis19("0000-00-00 00:00:00", null), "Era esperado valores iguais, mas " + result8124 + " <ldt1.atZone(DEFAULT_ZONE_ID).toInstant().toEpochMilli()> é diferente de " + result8125 + " <DateUtils.parseMillis19('0000-00-00 00:00:00', null)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date))
nova chamada: assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.321' é diferente de " + result8126 + " <DateUtils.toString(date)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date.getTime(), false, SHANGHAI_ZONE_ID))
nova chamada: assertEquals("2022-09-24 17:14:03.321", DateUtils.toString(date.getTime(), false, SHANGHAI_ZONE_ID), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.321' é diferente de " + result8127 + " <DateUtils.toString(date.getTime(), false, SHANGHAI_ZONE_ID)>")
chamada antiga: assertEquals("2022-09-24 17:14:03.321+08:00", DateUtils.toString(date.getTime(), true, SHANGHAI_ZONE_ID))
nova chamada: assertEquals("2022-09-24 17:14:03.321+08:00", DateUtils.toString(date.getTime(), true, SHANGHAI_ZONE_ID), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.321+08:00' é diferente de " + result8128 + " <DateUtils.toString(date.getTime(), true, SHANGHAI_ZONE_ID)>")
chamada antiga: assertEquals("2022-09-24 09:14:03.321", DateUtils.toString(date.getTime(), false, UTC))
nova chamada: assertEquals("2022-09-24 09:14:03.321", DateUtils.toString(date.getTime(), false, UTC), "Era esperado valores iguais, mas  '2022-09-24 09:14:03.321' é diferente de " + result8129 + " <DateUtils.toString(date.getTime(), false, UTC)>")
chamada antiga: assertEquals("2022-09-24 09:14:03.321Z", DateUtils.toString(date.getTime(), true, UTC))
nova chamada: assertEquals("2022-09-24 09:14:03.321Z", DateUtils.toString(date.getTime(), true, UTC), "Era esperado valores iguais, mas  '2022-09-24 09:14:03.321Z' é diferente de " + result8130 + " <DateUtils.toString(date.getTime(), true, UTC)>")
chamada antiga: assertEquals("2022-09-24 16:14:03.321+07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+7")))
nova chamada: assertEquals("2022-09-24 16:14:03.321+07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+7")), "Era esperado valores iguais, mas  '2022-09-24 16:14:03.321+07:00' é diferente de " + result8131 + " <DateUtils.toString(date.getTime(), true, ZoneId.of('GMT+7'))>")
chamada antiga: assertEquals("2022-09-24 02:14:03.321-07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-7")))
nova chamada: assertEquals("2022-09-24 02:14:03.321-07:00", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-7")), "Era esperado valores iguais, mas  '2022-09-24 02:14:03.321-07:00' é diferente de " + result8132 + " <DateUtils.toString(date.getTime(), true, ZoneId.of('GMT-7'))>")
chamada antiga: assertEquals("2022-09-24 17:29:03.321+08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+08:15")))
nova chamada: assertEquals("2022-09-24 17:29:03.321+08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT+08:15")), "Era esperado valores iguais, mas  '2022-09-24 17:29:03.321+08:15' é diferente de " + result8133 + " <DateUtils.toString(date.getTime(), true, ZoneId.of('GMT+08:15'))>")
chamada antiga: assertEquals("2022-09-24 00:59:03.321-08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-08:15")))
nova chamada: assertEquals("2022-09-24 00:59:03.321-08:15", DateUtils.toString(date.getTime(), true, ZoneId.of("GMT-08:15")), "Era esperado valores iguais, mas  '2022-09-24 00:59:03.321-08:15' é diferente de " + result8134 + " <DateUtils.toString(date.getTime(), true, ZoneId.of('GMT-08:15'))>")
chamada antiga: assertEquals("2022-09-24 17:14:03.001", DateUtils.toString(new Date(1664010843001L)))
nova chamada: assertEquals("2022-09-24 17:14:03.001", DateUtils.toString(new Date(1664010843001L)), "Era esperado valores iguais, mas  '2022-09-24 17:14:03.001' é diferente de " + result8135 + " <DateUtils.toString(new Date(1664010843001L))>")
chamada antiga: assertEquals(0, DateUtils.month('J', 'u', 'a'))
nova chamada: assertEquals(0, DateUtils.month('J', 'u', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8136 + " <DateUtils.month('J', 'u', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('J', 'a', 'a'))
nova chamada: assertEquals(0, DateUtils.month('J', 'a', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8137 + " <DateUtils.month('J', 'a', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('F', 'a', 'a'))
nova chamada: assertEquals(0, DateUtils.month('F', 'a', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8138 + " <DateUtils.month('F', 'a', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('F', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('F', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8139 + " <DateUtils.month('F', 'e', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('A', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('A', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8140 + " <DateUtils.month('A', 'e', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('A', 'p', 'a'))
nova chamada: assertEquals(0, DateUtils.month('A', 'p', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8141 + " <DateUtils.month('A', 'p', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('M', 'p', 'a'))
nova chamada: assertEquals(0, DateUtils.month('M', 'p', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8142 + " <DateUtils.month('M', 'p', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('M', 'a', 'a'))
nova chamada: assertEquals(0, DateUtils.month('M', 'a', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8143 + " <DateUtils.month('M', 'a', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('J', 'a', 'a'))
nova chamada: assertEquals(0, DateUtils.month('J', 'a', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8144 + " <DateUtils.month('J', 'a', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('J', 'u', 'a'))
nova chamada: assertEquals(0, DateUtils.month('J', 'u', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8145 + " <DateUtils.month('J', 'u', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('A', 'a', 'a'))
nova chamada: assertEquals(0, DateUtils.month('A', 'a', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8146 + " <DateUtils.month('A', 'a', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('A', 'u', 'a'))
nova chamada: assertEquals(0, DateUtils.month('A', 'u', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8147 + " <DateUtils.month('A', 'u', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('S', 'u', 'a'))
nova chamada: assertEquals(0, DateUtils.month('S', 'u', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8148 + " <DateUtils.month('S', 'u', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('S', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('S', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8149 + " <DateUtils.month('S', 'e', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('O', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('O', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8150 + " <DateUtils.month('O', 'e', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('O', 'c', 'a'))
nova chamada: assertEquals(0, DateUtils.month('O', 'c', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8151 + " <DateUtils.month('O', 'c', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('N', 'c', 'a'))
nova chamada: assertEquals(0, DateUtils.month('N', 'c', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8152 + " <DateUtils.month('N', 'c', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('N', 'o', 'a'))
nova chamada: assertEquals(0, DateUtils.month('N', 'o', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8153 + " <DateUtils.month('N', 'o', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('D', 'o', 'a'))
nova chamada: assertEquals(0, DateUtils.month('D', 'o', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8154 + " <DateUtils.month('D', 'o', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('D', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('D', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8155 + " <DateUtils.month('D', 'e', 'a')>")
chamada antiga: assertEquals(0, DateUtils.month('K', 'e', 'a'))
nova chamada: assertEquals(0, DateUtils.month('K', 'e', 'a'), "Era esperado valores iguais, mas  0 é diferente de " + result8156 + " <DateUtils.month('K', 'e', 'a')>")
chamada antiga: assertEquals(2022, zdt.getYear())
nova chamada: assertEquals(2022, zdt.getYear(), "Era esperado valores iguais, mas  2022 é diferente de " + result8157 + " <zdt.getYear()>")
chamada antiga: assertEquals(12, zdt.getMonthValue())
nova chamada: assertEquals(12, zdt.getMonthValue(), "Era esperado valores iguais, mas  12 é diferente de " + result8158 + " <zdt.getMonthValue()>")
chamada antiga: assertEquals(7, zdt.getDayOfMonth())
nova chamada: assertEquals(7, zdt.getDayOfMonth(), "Era esperado valores iguais, mas  7 é diferente de " + result8159 + " <zdt.getDayOfMonth()>")
chamada antiga: assertEquals(10, zdt.getHour())
nova chamada: assertEquals(10, zdt.getHour(), "Era esperado valores iguais, mas  10 é diferente de " + result8160 + " <zdt.getHour()>")
chamada antiga: assertEquals(55, zdt.getMinute())
nova chamada: assertEquals(55, zdt.getMinute(), "Era esperado valores iguais, mas  55 é diferente de " + result8161 + " <zdt.getMinute()>")
chamada antiga: assertEquals(19, zdt.getSecond())
nova chamada: assertEquals(19, zdt.getSecond(), "Era esperado valores iguais, mas  19 é diferente de " + result8162 + " <zdt.getSecond()>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("A"), Fnv.hashCode64LCase("a"))
nova chamada: assertEquals(Fnv.hashCode64LCase("A"), Fnv.hashCode64LCase("a"), "Era esperado valores iguais, mas " + result8163 + " <Fnv.hashCode64LCase('A')> é diferente de " + result8164 + " <Fnv.hashCode64LCase('a')>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("_A"), Fnv.hashCode64LCase("a_"))
nova chamada: assertEquals(Fnv.hashCode64LCase("_A"), Fnv.hashCode64LCase("a_"), "Era esperado valores iguais, mas " + result8165 + " <Fnv.hashCode64LCase('_A')> é diferente de " + result8166 + " <Fnv.hashCode64LCase('a_')>")
chamada antiga: assertEquals(Fnv.hashCode64LCase("-A"), Fnv.hashCode64LCase("a-"))
nova chamada: assertEquals(Fnv.hashCode64LCase("-A"), Fnv.hashCode64LCase("a-"), "Era esperado valores iguais, mas " + result8167 + " <Fnv.hashCode64LCase('-A')> é diferente de " + result8168 + " <Fnv.hashCode64LCase('a-')>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8169 + " <bean.getId()>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8170 + " <bean.getId()>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8171 + " <bean.getId()>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8172 + " <bean.getId()>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8173 + " <bean.getId()>")
chamada antiga: assertEquals(123, bean.getId())
nova chamada: assertEquals(123, bean.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8174 + " <bean.getId()>")
chamada antiga: assertEquals(true, bean.getId())
nova chamada: assertEquals(true, bean.getId(), "Era esperado valores iguais, mas  true é diferente de " + result8175 + " <bean.getId()>")
chamada antiga: assertEquals('a', bean.getId())
nova chamada: assertEquals('a', bean.getId(), "Era esperado valores iguais, mas  'a' é diferente de " + result8176 + " <bean.getId()>")
chamada antiga: assertEquals("123", bean.getId())
nova chamada: assertEquals("123", bean.getId(), "Era esperado valores iguais, mas  '123' é diferente de " + result8177 + " <bean.getId()>")
chamada antiga: assertEquals("123", bean.getId())
nova chamada: assertEquals("123", bean.getId(), "Era esperado valores iguais, mas  '123' é diferente de " + result8178 + " <bean.getId()>")
chamada antiga: assertSame(value, value1)
nova chamada: assertSame(value, value1, "Era esperado objetos iguais, mas  value é diferente de " + " value1")
chamada antiga: assertNotNull(stringCreatorJDK8)
nova chamada: assertNotNull(stringCreatorJDK8, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(stringCreatorJDK11)
nova chamada: assertNotNull(stringCreatorJDK11, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(func)
nova chamada: assertNotNull(func, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(func)
nova chamada: assertNotNull(func, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(23, zdt.getDayOfMonth())
nova chamada: assertEquals(23, zdt.getDayOfMonth(), "Era esperado valores iguais, mas  23 é diferente de " + result8179 + " <zdt.getDayOfMonth()>")
chamada antiga: assertEquals(6, zdt.getMonthValue())
nova chamada: assertEquals(6, zdt.getMonthValue(), "Era esperado valores iguais, mas  6 é diferente de " + result8180 + " <zdt.getMonthValue()>")
chamada antiga: assertEquals(2012, zdt.getYear())
nova chamada: assertEquals(2012, zdt.getYear(), "Era esperado valores iguais, mas  2012 é diferente de " + result8181 + " <zdt.getYear()>")
chamada antiga: assertEquals(12, zdt.getHour())
nova chamada: assertEquals(12, zdt.getHour(), "Era esperado valores iguais, mas  12 é diferente de " + result8182 + " <zdt.getHour()>")
chamada antiga: assertEquals(13, zdt.getMinute())
nova chamada: assertEquals(13, zdt.getMinute(), "Era esperado valores iguais, mas  13 é diferente de " + result8183 + " <zdt.getMinute()>")
chamada antiga: assertEquals(14, zdt.getSecond())
nova chamada: assertEquals(14, zdt.getSecond(), "Era esperado valores iguais, mas  14 é diferente de " + result8184 + " <zdt.getSecond()>")
chamada antiga: assertEquals(str, beanTo.date)
nova chamada: assertEquals(str, beanTo.date, "Era esperado valores iguais, mas  str é diferente de " + " beanTo.date")
chamada antiga: assertEquals(bean.date, bean1.date)
nova chamada: assertEquals(bean.date, bean1.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean1.date")
chamada antiga: assertEquals(bean.date, bean2.date)
nova chamada: assertEquals(bean.date, bean2.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean2.date")
chamada antiga: assertEquals(bean.date, bean3.date)
nova chamada: assertEquals(bean.date, bean3.date, "Era esperado valores iguais, mas  bean.date é diferente de " + " bean3.date")
chamada antiga: assertSame(ZoneId.of("Asia/Shanghai").getRules(), ZoneId.of("Asia/Shanghai").getRules())
nova chamada: assertSame(ZoneId.of("Asia/Shanghai").getRules(), ZoneId.of("Asia/Shanghai").getRules(), "Era esperado objetos iguais, mas " + result8185 + " <ZoneId.of('Asia/Shanghai').getRules()> é diferente de " + result8186 + " <ZoneId.of('Asia/Shanghai').getRules()>")
chamada antiga: assertEquals(epochMilli, DateUtils.millis(ldt))
nova chamada: assertEquals(epochMilli, DateUtils.millis(ldt), "Era esperado valores iguais, mas  epochMilli é diferente de " + result8187 + " <DateUtils.millis(ldt)>")
chamada antiga: assertEquals(epochMilli, DateUtils.millis(ldt, DEFAULT_ZONE_ID))
nova chamada: assertEquals(epochMilli, DateUtils.millis(ldt, DEFAULT_ZONE_ID), "Era esperado valores iguais, mas  epochMilli é diferente de " + result8188 + " <DateUtils.millis(ldt, DEFAULT_ZONE_ID)>")
chamada antiga: assertNull(DateUtils.format((Date) null))
nova chamada: assertNull(DateUtils.format((Date) null), "Era esperado nulo, mas " + result8189 + " <DateUtils.format((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMDHMS19((Date) null))
nova chamada: assertNull(DateUtils.formatYMDHMS19((Date) null), "Era esperado nulo, mas " + result8190 + " <DateUtils.formatYMDHMS19((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.format((Date) null, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.format((Date) null, "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result8191 + " <DateUtils.format((Date) null, 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(date))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(date), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8192 + " <DateUtils.format(date)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(date, null))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(date, null), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8193 + " <DateUtils.format(date, null)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(date))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(date), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8194 + " <DateUtils.formatYMDHMS19(date)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(epochMilli))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(epochMilli), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8195 + " <DateUtils.format(epochMilli)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(date, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(date, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8196 + " <DateUtils.format(date, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-ddTHH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-ddTHH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8197 + " <DateUtils.format(date, 'yyyy-MM-ddTHH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-dd'T'HH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(date, "yyyy-MM-dd'T'HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8198 + " <DateUtils.format(date, 'yyyy-MM-dd'T'HH:mm:ss')>")
chamada antiga: assertEquals("23.06.2012 12:13:14", DateUtils.format(date, "dd.MM.yyyy HH:mm:ss"))
nova chamada: assertEquals("23.06.2012 12:13:14", DateUtils.format(date, "dd.MM.yyyy HH:mm:ss"), "Era esperado valores iguais, mas  '23.06.2012 12:13:14' é diferente de " + result8199 + " <DateUtils.format(date, 'dd.MM.yyyy HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"))
nova chamada: assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8200 + " <DateUtils.format(date, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("2012/06/23", DateUtils.format(date, "yyyy/MM/dd"))
nova chamada: assertEquals("2012/06/23", DateUtils.format(date, "yyyy/MM/dd"), "Era esperado valores iguais, mas  '2012/06/23' é diferente de " + result8201 + " <DateUtils.format(date, 'yyyy/MM/dd')>")
chamada antiga: assertEquals("23.06.2012", DateUtils.format(date, "dd.MM.yyyy"))
nova chamada: assertEquals("23.06.2012", DateUtils.format(date, "dd.MM.yyyy"), "Era esperado valores iguais, mas  '23.06.2012' é diferente de " + result8202 + " <DateUtils.format(date, 'dd.MM.yyyy')>")
chamada antiga: assertEquals("2012-6-23", DateUtils.format(date, "yyyy-M-dd"))
nova chamada: assertEquals("2012-6-23", DateUtils.format(date, "yyyy-M-dd"), "Era esperado valores iguais, mas  '2012-6-23' é diferente de " + result8203 + " <DateUtils.format(date, 'yyyy-M-dd')>")
chamada antiga: assertEquals("2012-Jun-23", DateUtils.format(date, "yyyy-MMM-dd"))
nova chamada: assertEquals("2012-Jun-23", DateUtils.format(date, "yyyy-MMM-dd"), "Era esperado valores iguais, mas  '2012-Jun-23' é diferente de " + result8204 + " <DateUtils.format(date, 'yyyy-MMM-dd')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"))
nova chamada: assertEquals("2012-06-23", DateUtils.format(date, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8205 + " <DateUtils.format(date, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.formatYMD10(date))
nova chamada: assertEquals("2012-06-23", DateUtils.formatYMD10(date), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8206 + " <DateUtils.formatYMD10(date)>")
chamada antiga: assertEquals("20120623", DateUtils.formatYMD8(date))
nova chamada: assertEquals("20120623", DateUtils.formatYMD8(date), "Era esperado valores iguais, mas  '20120623' é diferente de " + result8207 + " <DateUtils.formatYMD8(date)>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(2012, 6, 23))
nova chamada: assertEquals("2012-06-23", DateUtils.format(2012, 6, 23), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8208 + " <DateUtils.format(2012, 6, 23)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(2012, 6, 23, 12, 13, 14))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(2012, 6, 23, 12, 13, 14), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8209 + " <DateUtils.format(2012, 6, 23, 12, 13, 14)>")
chamada antiga: assertNull(DateUtils.formatYMDHMS19((Date) null))
nova chamada: assertNull(DateUtils.formatYMDHMS19((Date) null), "Era esperado nulo, mas " + result8210 + " <DateUtils.formatYMDHMS19((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.format((ZonedDateTime) null, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.format((ZonedDateTime) null, "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result8211 + " <DateUtils.format((ZonedDateTime) null, 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(zdt))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(zdt), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8212 + " <DateUtils.formatYMDHMS19(zdt)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(zdt, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(zdt, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8213 + " <DateUtils.format(zdt, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-ddTHH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-ddTHH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8214 + " <DateUtils.format(zdt, 'yyyy-MM-ddTHH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-dd'T'HH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(zdt, "yyyy-MM-dd'T'HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8215 + " <DateUtils.format(zdt, 'yyyy-MM-dd'T'HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(zdt, "yyyy-MM-dd"))
nova chamada: assertEquals("2012-06-23", DateUtils.format(zdt, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8216 + " <DateUtils.format(zdt, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("2012/06/23", DateUtils.format(zdt, "yyyy/MM/dd"))
nova chamada: assertEquals("2012/06/23", DateUtils.format(zdt, "yyyy/MM/dd"), "Era esperado valores iguais, mas  '2012/06/23' é diferente de " + result8217 + " <DateUtils.format(zdt, 'yyyy/MM/dd')>")
chamada antiga: assertEquals("23.06.2012", DateUtils.format(zdt, "dd.MM.yyyy"))
nova chamada: assertEquals("23.06.2012", DateUtils.format(zdt, "dd.MM.yyyy"), "Era esperado valores iguais, mas  '23.06.2012' é diferente de " + result8218 + " <DateUtils.format(zdt, 'dd.MM.yyyy')>")
chamada antiga: assertEquals("2012-6-23", DateUtils.format(zdt, "yyyy-M-dd"))
nova chamada: assertEquals("2012-6-23", DateUtils.format(zdt, "yyyy-M-dd"), "Era esperado valores iguais, mas  '2012-6-23' é diferente de " + result8219 + " <DateUtils.format(zdt, 'yyyy-M-dd')>")
chamada antiga: assertEquals("2012-Jun-23", DateUtils.format(zdt, "yyyy-MMM-dd"))
nova chamada: assertEquals("2012-Jun-23", DateUtils.format(zdt, "yyyy-MMM-dd"), "Era esperado valores iguais, mas  '2012-Jun-23' é diferente de " + result8220 + " <DateUtils.format(zdt, 'yyyy-MMM-dd')>")
chamada antiga: assertNull(DateUtils.formatYMDHMS19((Date) null))
nova chamada: assertNull(DateUtils.formatYMDHMS19((Date) null), "Era esperado nulo, mas " + result8221 + " <DateUtils.formatYMDHMS19((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.format((LocalDateTime) null, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.format((LocalDateTime) null, "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result8222 + " <DateUtils.format((LocalDateTime) null, 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(ldt))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.formatYMDHMS19(ldt), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8223 + " <DateUtils.formatYMDHMS19(ldt)>")
chamada antiga: assertEquals("2012-06-23 12:13:14", DateUtils.format(ldt, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("2012-06-23 12:13:14", DateUtils.format(ldt, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23 12:13:14' é diferente de " + result8224 + " <DateUtils.format(ldt, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-ddTHH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-ddTHH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8225 + " <DateUtils.format(ldt, 'yyyy-MM-ddTHH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-dd'T'HH:mm:ss"))
nova chamada: assertEquals("2012-06-23T12:13:14", DateUtils.format(ldt, "yyyy-MM-dd'T'HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T12:13:14' é diferente de " + result8226 + " <DateUtils.format(ldt, 'yyyy-MM-dd'T'HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(ldt, "yyyy-MM-dd"))
nova chamada: assertEquals("2012-06-23", DateUtils.format(ldt, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8227 + " <DateUtils.format(ldt, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("2012/06/23", DateUtils.format(ldt, "yyyy/MM/dd"))
nova chamada: assertEquals("2012/06/23", DateUtils.format(ldt, "yyyy/MM/dd"), "Era esperado valores iguais, mas  '2012/06/23' é diferente de " + result8228 + " <DateUtils.format(ldt, 'yyyy/MM/dd')>")
chamada antiga: assertEquals("23.06.2012", DateUtils.format(ldt, "dd.MM.yyyy"))
nova chamada: assertEquals("23.06.2012", DateUtils.format(ldt, "dd.MM.yyyy"), "Era esperado valores iguais, mas  '23.06.2012' é diferente de " + result8229 + " <DateUtils.format(ldt, 'dd.MM.yyyy')>")
chamada antiga: assertEquals("2012-6-23", DateUtils.format(ldt, "yyyy-M-dd"))
nova chamada: assertEquals("2012-6-23", DateUtils.format(ldt, "yyyy-M-dd"), "Era esperado valores iguais, mas  '2012-6-23' é diferente de " + result8230 + " <DateUtils.format(ldt, 'yyyy-M-dd')>")
chamada antiga: assertEquals("2012-Jun-23", DateUtils.format(ldt, "yyyy-MMM-dd"))
nova chamada: assertEquals("2012-Jun-23", DateUtils.format(ldt, "yyyy-MMM-dd"), "Era esperado valores iguais, mas  '2012-Jun-23' é diferente de " + result8231 + " <DateUtils.format(ldt, 'yyyy-MMM-dd')>")
chamada antiga: assertNull(DateUtils.formatYMDHMS19((LocalDate) null))
nova chamada: assertNull(DateUtils.formatYMDHMS19((LocalDate) null), "Era esperado nulo, mas " + result8232 + " <DateUtils.formatYMDHMS19((LocalDate) null)> não é nulo")
chamada antiga: assertNull(DateUtils.format((LocalDate) null, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertNull(DateUtils.format((LocalDate) null, "yyyy-MM-dd HH:mm:ss"), "Era esperado nulo, mas " + result8233 + " <DateUtils.format((LocalDate) null, 'yyyy-MM-dd HH:mm:ss')> não é nulo")
chamada antiga: assertEquals("2012-06-23 00:00:00", DateUtils.formatYMDHMS19(localDate))
nova chamada: assertEquals("2012-06-23 00:00:00", DateUtils.formatYMDHMS19(localDate), "Era esperado valores iguais, mas  '2012-06-23 00:00:00' é diferente de " + result8234 + " <DateUtils.formatYMDHMS19(localDate)>")
chamada antiga: assertEquals("2012-06-23 00:00:00", DateUtils.format(localDate, "yyyy-MM-dd HH:mm:ss"))
nova chamada: assertEquals("2012-06-23 00:00:00", DateUtils.format(localDate, "yyyy-MM-dd HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23 00:00:00' é diferente de " + result8235 + " <DateUtils.format(localDate, 'yyyy-MM-dd HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-ddTHH:mm:ss"))
nova chamada: assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-ddTHH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T00:00:00' é diferente de " + result8236 + " <DateUtils.format(localDate, 'yyyy-MM-ddTHH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-dd'T'HH:mm:ss"))
nova chamada: assertEquals("2012-06-23T00:00:00", DateUtils.format(localDate, "yyyy-MM-dd'T'HH:mm:ss"), "Era esperado valores iguais, mas  '2012-06-23T00:00:00' é diferente de " + result8237 + " <DateUtils.format(localDate, 'yyyy-MM-dd'T'HH:mm:ss')>")
chamada antiga: assertEquals("2012-06-23", DateUtils.format(localDate, "yyyy-MM-dd"))
nova chamada: assertEquals("2012-06-23", DateUtils.format(localDate, "yyyy-MM-dd"), "Era esperado valores iguais, mas  '2012-06-23' é diferente de " + result8238 + " <DateUtils.format(localDate, 'yyyy-MM-dd')>")
chamada antiga: assertEquals("2012/06/23", DateUtils.format(localDate, "yyyy/MM/dd"))
nova chamada: assertEquals("2012/06/23", DateUtils.format(localDate, "yyyy/MM/dd"), "Era esperado valores iguais, mas  '2012/06/23' é diferente de " + result8239 + " <DateUtils.format(localDate, 'yyyy/MM/dd')>")
chamada antiga: assertEquals("23.06.2012", DateUtils.format(localDate, "dd.MM.yyyy"))
nova chamada: assertEquals("23.06.2012", DateUtils.format(localDate, "dd.MM.yyyy"), "Era esperado valores iguais, mas  '23.06.2012' é diferente de " + result8240 + " <DateUtils.format(localDate, 'dd.MM.yyyy')>")
chamada antiga: assertEquals("2012-6-23", DateUtils.format(localDate, "yyyy-M-dd"))
nova chamada: assertEquals("2012-6-23", DateUtils.format(localDate, "yyyy-M-dd"), "Era esperado valores iguais, mas  '2012-6-23' é diferente de " + result8241 + " <DateUtils.format(localDate, 'yyyy-M-dd')>")
chamada antiga: assertEquals("2012-Jun-23", DateUtils.format(localDate, "yyyy-MMM-dd"))
nova chamada: assertEquals("2012-Jun-23", DateUtils.format(localDate, "yyyy-MMM-dd"), "Era esperado valores iguais, mas  '2012-Jun-23' é diferente de " + result8242 + " <DateUtils.format(localDate, 'yyyy-MMM-dd')>")
chamada antiga: assertEquals(ldt.atZone(ZoneOffset.UTC).toInstant().toEpochMilli(), utcMillis)
nova chamada: assertEquals(ldt.atZone(ZoneOffset.UTC).toInstant().toEpochMilli(), utcMillis, "Era esperado valores iguais, mas " + result8243 + " <ldt.atZone(ZoneOffset.UTC).toInstant().toEpochMilli()> é diferente de " + " utcMillis")
chamada antiga: assertNull(DateUtils.formatYMD8((Date) null))
nova chamada: assertNull(DateUtils.formatYMD8((Date) null), "Era esperado nulo, mas " + result8244 + " <DateUtils.formatYMD8((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMD8((LocalDate) null))
nova chamada: assertNull(DateUtils.formatYMD8((LocalDate) null), "Era esperado nulo, mas " + result8245 + " <DateUtils.formatYMD8((LocalDate) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMD8((Date) null))
nova chamada: assertNull(DateUtils.formatYMD8((Date) null), "Era esperado nulo, mas " + result8246 + " <DateUtils.formatYMD8((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMD10((Date) null))
nova chamada: assertNull(DateUtils.formatYMD10((Date) null), "Era esperado nulo, mas " + result8247 + " <DateUtils.formatYMD10((Date) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMD10((LocalDate) null))
nova chamada: assertNull(DateUtils.formatYMD10((LocalDate) null), "Era esperado nulo, mas " + result8248 + " <DateUtils.formatYMD10((LocalDate) null)> não é nulo")
chamada antiga: assertNull(DateUtils.formatYMD10((Date) null))
nova chamada: assertNull(DateUtils.formatYMD10((Date) null), "Era esperado nulo, mas " + result8249 + " <DateUtils.formatYMD10((Date) null)> não é nulo")
chamada antiga: assertEquals("NaN", RyuDouble.toString(Double.NaN))
nova chamada: assertEquals("NaN", RyuDouble.toString(Double.NaN), "Era esperado valores iguais, mas  'NaN' é diferente de " + result8250 + " <RyuDouble.toString(Double.NaN)>")
chamada antiga: assertEquals("Infinity", RyuDouble.toString(Double.POSITIVE_INFINITY))
nova chamada: assertEquals("Infinity", RyuDouble.toString(Double.POSITIVE_INFINITY), "Era esperado valores iguais, mas  'Infinity' é diferente de " + result8251 + " <RyuDouble.toString(Double.POSITIVE_INFINITY)>")
chamada antiga: assertEquals("-Infinity", RyuDouble.toString(Double.NEGATIVE_INFINITY))
nova chamada: assertEquals("-Infinity", RyuDouble.toString(Double.NEGATIVE_INFINITY), "Era esperado valores iguais, mas  '-Infinity' é diferente de " + result8252 + " <RyuDouble.toString(Double.NEGATIVE_INFINITY)>")
chamada antiga: assertEquals("-0.0", RyuDouble.toString(-0.0))
nova chamada: assertEquals("-0.0", RyuDouble.toString(-0.0), "Era esperado valores iguais, mas  '-0.0' é diferente de " + result8253 + " <RyuDouble.toString(-0.0)>")
chamada antiga: assertEquals("NaN", toString(Double.NaN))
nova chamada: assertEquals("NaN", toString(Double.NaN), "Era esperado valores iguais, mas  'NaN' é diferente de " + result8254 + " <toString(Double.NaN)>")
chamada antiga: assertEquals("Infinity", toString(Double.POSITIVE_INFINITY))
nova chamada: assertEquals("Infinity", toString(Double.POSITIVE_INFINITY), "Era esperado valores iguais, mas  'Infinity' é diferente de " + result8255 + " <toString(Double.POSITIVE_INFINITY)>")
chamada antiga: assertEquals("-Infinity", toString(Double.NEGATIVE_INFINITY))
nova chamada: assertEquals("-Infinity", toString(Double.NEGATIVE_INFINITY), "Era esperado valores iguais, mas  '-Infinity' é diferente de " + result8256 + " <toString(Double.NEGATIVE_INFINITY)>")
chamada antiga: assertEquals("-0.0", toString(-0.0))
nova chamada: assertEquals("-0.0", toString(-0.0), "Era esperado valores iguais, mas  '-0.0' é diferente de " + result8257 + " <toString(-0.0)>")
chamada antiga: assertNull(ApacheLang3Support.TripleMixIn.of(null, null, null))
nova chamada: assertNull(ApacheLang3Support.TripleMixIn.of(null, null, null), "Era esperado nulo, mas " + result8258 + " <ApacheLang3Support.TripleMixIn.of(null, null, null)> não é nulo")
chamada antiga: assertTrue(Differ.diff(1, 1))
nova chamada: assertTrue(Differ.diff(1, 1), "Era esperado verdadeiro, mas " + result8259 + " <Differ.diff(1, 1)> é falso")
chamada antiga: assertTrue(Differ.diff("a", "a"))
nova chamada: assertTrue(Differ.diff("a", "a"), "Era esperado verdadeiro, mas " + result8260 + " <Differ.diff('a', 'a')> é falso")
chamada antiga: assertTrue(Differ.diff(new Object[] { "a", 1 }, new Object[] { "a", 1 }))
nova chamada: assertTrue(Differ.diff(new Object[] { "a", 1 }, new Object[] { "a", 1 }), "Era esperado verdadeiro, mas " + result8261 + " <Differ.diff(new Object[] { 'a', 1 }, new Object[] { 'a', 1 })> é falso")
chamada antiga: assertTrue(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("a", "101")))
nova chamada: assertTrue(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("a", "101")), "Era esperado verdadeiro, mas " + result8262 + " <Differ.diff(Collections.singletonMap('a', '101'), Collections.singletonMap('a', '101'))> é falso")
chamada antiga: assertTrue(Differ.diff(Collections.singleton("a"), Collections.singleton("a")))
nova chamada: assertTrue(Differ.diff(Collections.singleton("a"), Collections.singleton("a")), "Era esperado verdadeiro, mas " + result8263 + " <Differ.diff(Collections.singleton('a'), Collections.singleton('a'))> é falso")
chamada antiga: assertTrue(Differ.diff(Collections.singletonList("a"), Collections.singletonList("a")))
nova chamada: assertTrue(Differ.diff(Collections.singletonList("a"), Collections.singletonList("a")), "Era esperado verdadeiro, mas " + result8264 + " <Differ.diff(Collections.singletonList('a'), Collections.singletonList('a'))> é falso")
chamada antiga: assertEquals("left", differ.getLeftName())
nova chamada: assertEquals("left", differ.getLeftName(), "Era esperado valores iguais, mas  'left' é diferente de " + result8265 + " <differ.getLeftName()>")
chamada antiga: assertEquals("right", differ.getRightName())
nova chamada: assertEquals("right", differ.getRightName(), "Era esperado valores iguais, mas  'right' é diferente de " + result8266 + " <differ.getRightName()>")
chamada antiga: assertTrue(differ.isReferenceDetect())
nova chamada: assertTrue(differ.isReferenceDetect(), "Era esperado verdadeiro, mas " + result8267 + " <differ.isReferenceDetect()> é falso")
chamada antiga: assertTrue(differ.isSkipTransient())
nova chamada: assertTrue(differ.isSkipTransient(), "Era esperado verdadeiro, mas " + result8268 + " <differ.isSkipTransient()> é falso")
chamada antiga: assertNull(differ.getOut())
nova chamada: assertNull(differ.getOut(), "Era esperado nulo, mas " + result8269 + " <differ.getOut()> não é nulo")
chamada antiga: assertNull(differ.getComparator())
nova chamada: assertNull(differ.getComparator(), "Era esperado nulo, mas " + result8270 + " <differ.getComparator()> não é nulo")
chamada antiga: assertTrue(Differ.diff(new Bean(1), new Bean(1)))
nova chamada: assertTrue(Differ.diff(new Bean(1), new Bean(1)), "Era esperado verdadeiro, mas " + result8271 + " <Differ.diff(new Bean(1), new Bean(1))> é falso")
chamada antiga: assertTrue(Differ.diff(new Bean2("a"), new Bean2("a")))
nova chamada: assertTrue(Differ.diff(new Bean2("a"), new Bean2("a")), "Era esperado verdadeiro, mas " + result8272 + " <Differ.diff(new Bean2('a'), new Bean2('a'))> é falso")
chamada antiga: assertTrue(Differ.diff(new Bean2(null), new Bean2(null)))
nova chamada: assertTrue(Differ.diff(new Bean2(null), new Bean2(null)), "Era esperado verdadeiro, mas " + result8273 + " <Differ.diff(new Bean2(null), new Bean2(null))> é falso")
chamada antiga: assertEquals(Long.toString(Long.MAX_VALUE), toString(Long.MAX_VALUE))
nova chamada: assertEquals(Long.toString(Long.MAX_VALUE), toString(Long.MAX_VALUE), "Era esperado valores iguais, mas " + result8274 + " <Long.toString(Long.MAX_VALUE)> é diferente de " + result8275 + " <toString(Long.MAX_VALUE)>")
chamada antiga: assertEquals(Long.toString(Long.MAX_VALUE), toString1(Long.MAX_VALUE))
nova chamada: assertEquals(Long.toString(Long.MAX_VALUE), toString1(Long.MAX_VALUE), "Era esperado valores iguais, mas " + result8276 + " <Long.toString(Long.MAX_VALUE)> é diferente de " + result8277 + " <toString1(Long.MAX_VALUE)>")
chamada antiga: assertEquals(str, str2)
nova chamada: assertEquals(str, str2, "Era esperado valores iguais, mas  str é diferente de " + " str2")
chamada antiga: assertEquals(-1, result)
nova chamada: assertEquals(-1, result, "Era esperado valores iguais, mas  -1 é diferente de " + " result")
chamada antiga: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(""))
nova chamada: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(""), "Era esperado valores iguais, mas  0F é diferente de " + result8278 + " <provider.getTypeConvert(String.class, float.class).apply('')>")
chamada antiga: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(""))
nova chamada: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(""), "Era esperado valores iguais, mas  0D é diferente de " + result8279 + " <provider.getTypeConvert(String.class, double.class).apply('')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(""))
nova chamada: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(""), "Era esperado valores iguais, mas " + result8280 + " <Byte.valueOf((byte) 0)> é diferente de " + result8281 + " <provider.getTypeConvert(String.class, byte.class).apply('')>")
chamada antiga: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(""))
nova chamada: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(""), "Era esperado valores iguais, mas " + result8282 + " <Short.valueOf((short) 0)> é diferente de " + result8283 + " <provider.getTypeConvert(String.class, short.class).apply('')>")
chamada antiga: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(""))
nova chamada: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(""), "Era esperado valores iguais, mas  0 é diferente de " + result8284 + " <provider.getTypeConvert(String.class, int.class).apply('')>")
chamada antiga: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(""))
nova chamada: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(""), "Era esperado valores iguais, mas  0L é diferente de " + result8285 + " <provider.getTypeConvert(String.class, long.class).apply('')>")
chamada antiga: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(""))
nova chamada: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(""), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result8286 + " <provider.getTypeConvert(String.class, boolean.class).apply('')>")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Integer.class).apply(""))
nova chamada: assertNull(provider.getTypeConvert(String.class, Integer.class).apply(""), "Era esperado nulo, mas " + result8287 + " <provider.getTypeConvert(String.class, Integer.class).apply('')> não é nulo")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Long.class).apply(""))
nova chamada: assertNull(provider.getTypeConvert(String.class, Long.class).apply(""), "Era esperado nulo, mas " + result8288 + " <provider.getTypeConvert(String.class, Long.class).apply('')> não é nulo")
chamada antiga: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply("null"))
nova chamada: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply("null"), "Era esperado valores iguais, mas  0F é diferente de " + result8289 + " <provider.getTypeConvert(String.class, float.class).apply('null')>")
chamada antiga: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply("null"))
nova chamada: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply("null"), "Era esperado valores iguais, mas  0D é diferente de " + result8290 + " <provider.getTypeConvert(String.class, double.class).apply('null')>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply("null"))
nova chamada: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply("null"), "Era esperado valores iguais, mas " + result8291 + " <Byte.valueOf((byte) 0)> é diferente de " + result8292 + " <provider.getTypeConvert(String.class, byte.class).apply('null')>")
chamada antiga: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply("null"))
nova chamada: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply("null"), "Era esperado valores iguais, mas " + result8293 + " <Short.valueOf((short) 0)> é diferente de " + result8294 + " <provider.getTypeConvert(String.class, short.class).apply('null')>")
chamada antiga: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply("null"))
nova chamada: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply("null"), "Era esperado valores iguais, mas  0 é diferente de " + result8295 + " <provider.getTypeConvert(String.class, int.class).apply('null')>")
chamada antiga: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply("null"))
nova chamada: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply("null"), "Era esperado valores iguais, mas  0L é diferente de " + result8296 + " <provider.getTypeConvert(String.class, long.class).apply('null')>")
chamada antiga: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply("null"))
nova chamada: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply("null"), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result8297 + " <provider.getTypeConvert(String.class, boolean.class).apply('null')>")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Integer.class).apply("null"))
nova chamada: assertNull(provider.getTypeConvert(String.class, Integer.class).apply("null"), "Era esperado nulo, mas " + result8298 + " <provider.getTypeConvert(String.class, Integer.class).apply('null')> não é nulo")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Long.class).apply("null"))
nova chamada: assertNull(provider.getTypeConvert(String.class, Long.class).apply("null"), "Era esperado nulo, mas " + result8299 + " <provider.getTypeConvert(String.class, Long.class).apply('null')> não é nulo")
chamada antiga: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(null))
nova chamada: assertEquals(0F, provider.getTypeConvert(String.class, float.class).apply(null), "Era esperado valores iguais, mas  0F é diferente de " + result8300 + " <provider.getTypeConvert(String.class, float.class).apply(null)>")
chamada antiga: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(null))
nova chamada: assertEquals(0D, provider.getTypeConvert(String.class, double.class).apply(null), "Era esperado valores iguais, mas  0D é diferente de " + result8301 + " <provider.getTypeConvert(String.class, double.class).apply(null)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(null))
nova chamada: assertEquals(Byte.valueOf((byte) 0), provider.getTypeConvert(String.class, byte.class).apply(null), "Era esperado valores iguais, mas " + result8302 + " <Byte.valueOf((byte) 0)> é diferente de " + result8303 + " <provider.getTypeConvert(String.class, byte.class).apply(null)>")
chamada antiga: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(null))
nova chamada: assertEquals(Short.valueOf((short) 0), provider.getTypeConvert(String.class, short.class).apply(null), "Era esperado valores iguais, mas " + result8304 + " <Short.valueOf((short) 0)> é diferente de " + result8305 + " <provider.getTypeConvert(String.class, short.class).apply(null)>")
chamada antiga: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(null))
nova chamada: assertEquals(0, provider.getTypeConvert(String.class, int.class).apply(null), "Era esperado valores iguais, mas  0 é diferente de " + result8306 + " <provider.getTypeConvert(String.class, int.class).apply(null)>")
chamada antiga: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(null))
nova chamada: assertEquals(0L, provider.getTypeConvert(String.class, long.class).apply(null), "Era esperado valores iguais, mas  0L é diferente de " + result8307 + " <provider.getTypeConvert(String.class, long.class).apply(null)>")
chamada antiga: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(null))
nova chamada: assertEquals(Boolean.FALSE, provider.getTypeConvert(String.class, boolean.class).apply(null), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result8308 + " <provider.getTypeConvert(String.class, boolean.class).apply(null)>")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Integer.class).apply(null))
nova chamada: assertNull(provider.getTypeConvert(String.class, Integer.class).apply(null), "Era esperado nulo, mas " + result8309 + " <provider.getTypeConvert(String.class, Integer.class).apply(null)> não é nulo")
chamada antiga: assertNull(provider.getTypeConvert(String.class, Long.class).apply(null))
nova chamada: assertNull(provider.getTypeConvert(String.class, Long.class).apply(null), "Era esperado nulo, mas " + result8310 + " <provider.getTypeConvert(String.class, Long.class).apply(null)> não é nulo")
chamada antiga: assertEquals(1, provider.getTypeConvert(String.class, Integer.class).apply("1"))
nova chamada: assertEquals(1, provider.getTypeConvert(String.class, Integer.class).apply("1"), "Era esperado valores iguais, mas  1 é diferente de " + result8311 + " <provider.getTypeConvert(String.class, Integer.class).apply('1')>")
chamada antiga: assertEquals(1L, provider.getTypeConvert(String.class, Long.class).apply("1"))
nova chamada: assertEquals(1L, provider.getTypeConvert(String.class, Long.class).apply("1"), "Era esperado valores iguais, mas  1L é diferente de " + result8312 + " <provider.getTypeConvert(String.class, Long.class).apply('1')>")
chamada antiga: assertNull(TypeUtils.parseInt(new byte[0], 0, 0))
nova chamada: assertNull(TypeUtils.parseInt(new byte[0], 0, 0), "Era esperado nulo, mas " + result8313 + " <TypeUtils.parseInt(new byte[0], 0, 0)> não é nulo")
chamada antiga: assertNull(TypeUtils.parseBigDecimal(new byte[0], 0, 0))
nova chamada: assertNull(TypeUtils.parseBigDecimal(new byte[0], 0, 0), "Era esperado nulo, mas " + result8314 + " <TypeUtils.parseBigDecimal(new byte[0], 0, 0)> não é nulo")
chamada antiga: assertNull(TypeUtils.parseLong(new byte[0], 0, 0))
nova chamada: assertNull(TypeUtils.parseLong(new byte[0], 0, 0), "Era esperado nulo, mas " + result8315 + " <TypeUtils.parseLong(new byte[0], 0, 0)> não é nulo")
chamada antiga: assertNull(TypeUtils.parseBoolean(new byte[0], 0, 0))
nova chamada: assertNull(TypeUtils.parseBoolean(new byte[0], 0, 0), "Era esperado nulo, mas " + result8316 + " <TypeUtils.parseBoolean(new byte[0], 0, 0)> não é nulo")
chamada antiga: assertSame(class0, class1)
nova chamada: assertSame(class0, class1, "Era esperado objetos iguais, mas  class0 é diferente de " + " class1")
chamada antiga: assertEquals(XxHash64.hash(1), XxHash64.hash(1F))
nova chamada: assertEquals(XxHash64.hash(1), XxHash64.hash(1F), "Era esperado valores iguais, mas " + result8317 + " <XxHash64.hash(1)> é diferente de " + result8318 + " <XxHash64.hash(1F)>")
chamada antiga: assertEquals(XxHash64.hash(1), XxHash64.hash(1D))
nova chamada: assertEquals(XxHash64.hash(1), XxHash64.hash(1D), "Era esperado valores iguais, mas " + result8319 + " <XxHash64.hash(1)> é diferente de " + result8320 + " <XxHash64.hash(1D)>")
chamada antiga: assertEquals(XxHash64.hash(1), XxHash64.hash(BigInteger.ONE))
nova chamada: assertEquals(XxHash64.hash(1), XxHash64.hash(BigInteger.ONE), "Era esperado valores iguais, mas " + result8321 + " <XxHash64.hash(1)> é diferente de " + result8322 + " <XxHash64.hash(BigInteger.ONE)>")
chamada antiga: assertEquals(XxHash64.hash("92233720368547758079223372036854775807"), XxHash64.hash(new BigInteger("92233720368547758079223372036854775807")))
nova chamada: assertEquals(XxHash64.hash("92233720368547758079223372036854775807"), XxHash64.hash(new BigInteger("92233720368547758079223372036854775807")), "Era esperado valores iguais, mas " + result8323 + " <XxHash64.hash('92233720368547758079223372036854775807')> é diferente de " + result8324 + " <XxHash64.hash(new BigInteger('92233720368547758079223372036854775807'))>")
chamada antiga: assertEquals(XxHash64.hash(1), XxHash64.hash(BigDecimal.ONE))
nova chamada: assertEquals(XxHash64.hash(1), XxHash64.hash(BigDecimal.ONE), "Era esperado valores iguais, mas " + result8325 + " <XxHash64.hash(1)> é diferente de " + result8326 + " <XxHash64.hash(BigDecimal.ONE)>")
chamada antiga: assertEquals(XxHash64.hash("2.1"), XxHash64.hash(new BigDecimal("2.1")))
nova chamada: assertEquals(XxHash64.hash("2.1"), XxHash64.hash(new BigDecimal("2.1")), "Era esperado valores iguais, mas " + result8327 + " <XxHash64.hash('2.1')> é diferente de " + result8328 + " <XxHash64.hash(new BigDecimal('2.1'))>")
chamada antiga: assertEquals(XxHash64.hash(new BigDecimal("2.100")), XxHash64.hash(new BigDecimal("2.1000")))
nova chamada: assertEquals(XxHash64.hash(new BigDecimal("2.100")), XxHash64.hash(new BigDecimal("2.1000")), "Era esperado valores iguais, mas " + result8329 + " <XxHash64.hash(new BigDecimal('2.100'))> é diferente de " + result8330 + " <XxHash64.hash(new BigDecimal('2.1000'))>")
chamada antiga: assertTrue(JdbcSupport.isClob(MyClob.class))
nova chamada: assertTrue(JdbcSupport.isClob(MyClob.class), "Era esperado verdadeiro, mas " + result8331 + " <JdbcSupport.isClob(MyClob.class)> é falso")
chamada antiga: assertTrue(JdbcSupport.isClob(MyClob.class))
nova chamada: assertTrue(JdbcSupport.isClob(MyClob.class), "Era esperado verdadeiro, mas " + result8332 + " <JdbcSupport.isClob(MyClob.class)> é falso")
chamada antiga: assertTrue(JdbcSupport.isClob(java.sql.Clob.class))
nova chamada: assertTrue(JdbcSupport.isClob(java.sql.Clob.class), "Era esperado verdadeiro, mas " + result8333 + " <JdbcSupport.isClob(java.sql.Clob.class)> é falso")
chamada antiga: assertTrue(JdbcSupport.isClob(java.sql.Clob.class))
nova chamada: assertTrue(JdbcSupport.isClob(java.sql.Clob.class), "Era esperado verdadeiro, mas " + result8334 + " <JdbcSupport.isClob(java.sql.Clob.class)> é falso")
chamada antiga: assertEquals("\"abc\"", JSON.toJSONString(clob))
nova chamada: assertEquals("\"abc\"", JSON.toJSONString(clob), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result8335 + " <JSON.toJSONString(clob)>")
chamada antiga: assertEquals("\"abc\"", JSON.toJSONString(clob, JSONWriter.Feature.PrettyFormat))
nova chamada: assertEquals("\"abc\"", JSON.toJSONString(clob, JSONWriter.Feature.PrettyFormat), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result8336 + " <JSON.toJSONString(clob, JSONWriter.Feature.PrettyFormat)>")
chamada antiga: assertSame(Map.class, paramType.getRawType())
nova chamada: assertSame(Map.class, paramType.getRawType(), "Era esperado objetos iguais, mas  Map.class é diferente de " + result8337 + " <paramType.getRawType()>")
chamada antiga: assertEquals("NaN", RyuFloat.toString(Float.NaN))
nova chamada: assertEquals("NaN", RyuFloat.toString(Float.NaN), "Era esperado valores iguais, mas  'NaN' é diferente de " + result8338 + " <RyuFloat.toString(Float.NaN)>")
chamada antiga: assertEquals("Infinity", RyuFloat.toString(Float.POSITIVE_INFINITY))
nova chamada: assertEquals("Infinity", RyuFloat.toString(Float.POSITIVE_INFINITY), "Era esperado valores iguais, mas  'Infinity' é diferente de " + result8339 + " <RyuFloat.toString(Float.POSITIVE_INFINITY)>")
chamada antiga: assertEquals("-Infinity", RyuFloat.toString(Float.NEGATIVE_INFINITY))
nova chamada: assertEquals("-Infinity", RyuFloat.toString(Float.NEGATIVE_INFINITY), "Era esperado valores iguais, mas  '-Infinity' é diferente de " + result8340 + " <RyuFloat.toString(Float.NEGATIVE_INFINITY)>")
chamada antiga: assertEquals("-0.0", RyuFloat.toString(-0.0F))
nova chamada: assertEquals("-0.0", RyuFloat.toString(-0.0F), "Era esperado valores iguais, mas  '-0.0' é diferente de " + result8341 + " <RyuFloat.toString(-0.0F)>")
chamada antiga: assertEquals("NaN", toString(Float.NaN))
nova chamada: assertEquals("NaN", toString(Float.NaN), "Era esperado valores iguais, mas  'NaN' é diferente de " + result8342 + " <toString(Float.NaN)>")
chamada antiga: assertEquals("Infinity", toString(Float.POSITIVE_INFINITY))
nova chamada: assertEquals("Infinity", toString(Float.POSITIVE_INFINITY), "Era esperado valores iguais, mas  'Infinity' é diferente de " + result8343 + " <toString(Float.POSITIVE_INFINITY)>")
chamada antiga: assertEquals("-Infinity", toString(Float.NEGATIVE_INFINITY))
nova chamada: assertEquals("-Infinity", toString(Float.NEGATIVE_INFINITY), "Era esperado valores iguais, mas  '-Infinity' é diferente de " + result8344 + " <toString(Float.NEGATIVE_INFINITY)>")
chamada antiga: assertEquals("-0.0", toString(-0.0F))
nova chamada: assertEquals("-0.0", toString(-0.0F), "Era esperado valores iguais, mas  '-0.0' é diferente de " + result8345 + " <toString(-0.0F)>")
chamada antiga: assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.CamelCase.name()))
nova chamada: assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.CamelCase.name()), "Era esperado valores iguais, mas  'userName' é diferente de " + result8346 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.CamelCase.name())>")
chamada antiga: assertEquals("userName", BeanUtils.fieldName("userName", PropertyNamingStrategy.CamelCase.name()))
nova chamada: assertEquals("userName", BeanUtils.fieldName("userName", PropertyNamingStrategy.CamelCase.name()), "Era esperado valores iguais, mas  'userName' é diferente de " + result8347 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.CamelCase.name())>")
chamada antiga: assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue.name()))
nova chamada: assertEquals("userName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue.name()), "Era esperado valores iguais, mas  'userName' é diferente de " + result8348 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue.name())>")
chamada antiga: assertEquals("UserName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.PascalCase.name()))
nova chamada: assertEquals("UserName", BeanUtils.fieldName("UserName", PropertyNamingStrategy.PascalCase.name()), "Era esperado valores iguais, mas  'UserName' é diferente de " + result8349 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.PascalCase.name())>")
chamada antiga: assertEquals("UserName", BeanUtils.fieldName("userName", PropertyNamingStrategy.PascalCase.name()))
nova chamada: assertEquals("UserName", BeanUtils.fieldName("userName", PropertyNamingStrategy.PascalCase.name()), "Era esperado valores iguais, mas  'UserName' é diferente de " + result8350 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.PascalCase.name())>")
chamada antiga: assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
nova chamada: assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()), "Era esperado valores iguais, mas  'user-name' é diferente de " + result8351 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.LowerCaseWithDashes.name())>")
chamada antiga: assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
nova chamada: assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()), "Era esperado valores iguais, mas  'user-name' é diferente de " + result8352 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.LowerCaseWithDashes.name())>")
chamada antiga: assertEquals("User-Name", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()))
nova chamada: assertEquals("User-Name", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()), "Era esperado valores iguais, mas  'User-Name' é diferente de " + result8353 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.UpperCamelCaseWithDashes.name())>")
chamada antiga: assertEquals("User-Name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()))
nova chamada: assertEquals("User-Name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCamelCaseWithDashes.name()), "Era esperado valores iguais, mas  'User-Name' é diferente de " + result8354 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.UpperCamelCaseWithDashes.name())>")
chamada antiga: assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
nova chamada: assertEquals("user-name", BeanUtils.fieldName("UserName", PropertyNamingStrategy.LowerCaseWithDashes.name()), "Era esperado valores iguais, mas  'user-name' é diferente de " + result8355 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.LowerCaseWithDashes.name())>")
chamada antiga: assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()))
nova chamada: assertEquals("user-name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDashes.name()), "Era esperado valores iguais, mas  'user-name' é diferente de " + result8356 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.LowerCaseWithDashes.name())>")
chamada antiga: assertEquals("USER-NAME", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
nova chamada: assertEquals("USER-NAME", BeanUtils.fieldName("UserName", PropertyNamingStrategy.UpperCaseWithDashes.name()), "Era esperado valores iguais, mas  'USER-NAME' é diferente de " + result8357 + " <BeanUtils.fieldName('UserName', PropertyNamingStrategy.UpperCaseWithDashes.name())>")
chamada antiga: assertEquals("USER-NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
nova chamada: assertEquals("USER-NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDashes.name()), "Era esperado valores iguais, mas  'USER-NAME' é diferente de " + result8358 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.UpperCaseWithDashes.name())>")
chamada antiga: assertEquals("A-U-R-L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDashes.name()))
nova chamada: assertEquals("A-U-R-L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDashes.name()), "Era esperado valores iguais, mas  'A-U-R-L' é diferente de " + result8359 + " <BeanUtils.fieldName('aURL', PropertyNamingStrategy.UpperCaseWithDashes.name())>")
chamada antiga: assertEquals("_SOME-FIELD-NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDashes.name()))
nova chamada: assertEquals("_SOME-FIELD-NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDashes.name()), "Era esperado valores iguais, mas  '_SOME-FIELD-NAME' é diferente de " + result8360 + " <BeanUtils.fieldName('_someFieldName', PropertyNamingStrategy.UpperCaseWithDashes.name())>")
chamada antiga: assertEquals("some.field.name", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()))
nova chamada: assertEquals("some.field.name", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()), "Era esperado valores iguais, mas  'some.field.name' é diferente de " + result8361 + " <BeanUtils.fieldName('someFieldName', PropertyNamingStrategy.LowerCaseWithDots.name())>")
chamada antiga: assertEquals("user.name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDots.name()))
nova chamada: assertEquals("user.name", BeanUtils.fieldName("userName", PropertyNamingStrategy.LowerCaseWithDots.name()), "Era esperado valores iguais, mas  'user.name' é diferente de " + result8362 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.LowerCaseWithDots.name())>")
chamada antiga: assertEquals("a.u.r.l", BeanUtils.fieldName("aURL", PropertyNamingStrategy.LowerCaseWithDots.name()))
nova chamada: assertEquals("a.u.r.l", BeanUtils.fieldName("aURL", PropertyNamingStrategy.LowerCaseWithDots.name()), "Era esperado valores iguais, mas  'a.u.r.l' é diferente de " + result8363 + " <BeanUtils.fieldName('aURL', PropertyNamingStrategy.LowerCaseWithDots.name())>")
chamada antiga: assertEquals("_some.field.name", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()))
nova chamada: assertEquals("_some.field.name", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.LowerCaseWithDots.name()), "Era esperado valores iguais, mas  '_some.field.name' é diferente de " + result8364 + " <BeanUtils.fieldName('_someFieldName', PropertyNamingStrategy.LowerCaseWithDots.name())>")
chamada antiga: assertEquals("SOME.FIELD.NAME", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()))
nova chamada: assertEquals("SOME.FIELD.NAME", BeanUtils.fieldName("someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()), "Era esperado valores iguais, mas  'SOME.FIELD.NAME' é diferente de " + result8365 + " <BeanUtils.fieldName('someFieldName', PropertyNamingStrategy.UpperCaseWithDots.name())>")
chamada antiga: assertEquals("USER.NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDots.name()))
nova chamada: assertEquals("USER.NAME", BeanUtils.fieldName("userName", PropertyNamingStrategy.UpperCaseWithDots.name()), "Era esperado valores iguais, mas  'USER.NAME' é diferente de " + result8366 + " <BeanUtils.fieldName('userName', PropertyNamingStrategy.UpperCaseWithDots.name())>")
chamada antiga: assertEquals("A.U.R.L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDots.name()))
nova chamada: assertEquals("A.U.R.L", BeanUtils.fieldName("aURL", PropertyNamingStrategy.UpperCaseWithDots.name()), "Era esperado valores iguais, mas  'A.U.R.L' é diferente de " + result8367 + " <BeanUtils.fieldName('aURL', PropertyNamingStrategy.UpperCaseWithDots.name())>")
chamada antiga: assertEquals("_SOME.FIELD.NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()))
nova chamada: assertEquals("_SOME.FIELD.NAME", BeanUtils.fieldName("_someFieldName", PropertyNamingStrategy.UpperCaseWithDots.name()), "Era esperado valores iguais, mas  '_SOME.FIELD.NAME' é diferente de " + result8368 + " <BeanUtils.fieldName('_someFieldName', PropertyNamingStrategy.UpperCaseWithDots.name())>")
chamada antiga: assertEquals("id", BeanUtils.setterName("id", "PascalCase"))
nova chamada: assertEquals("id", BeanUtils.setterName("id", "PascalCase"), "Era esperado valores iguais, mas  'id' é diferente de " + result8369 + " <BeanUtils.setterName('id', 'PascalCase')>")
chamada antiga: assertEquals("Id", BeanUtils.setterName("setId", "PascalCase"))
nova chamada: assertEquals("Id", BeanUtils.setterName("setId", "PascalCase"), "Era esperado valores iguais, mas  'Id' é diferente de " + result8370 + " <BeanUtils.setterName('setId', 'PascalCase')>")
chamada antiga: assertEquals("USERID", BeanUtils.setterName("setUserId", "UpperCase"))
nova chamada: assertEquals("USERID", BeanUtils.setterName("setUserId", "UpperCase"), "Era esperado valores iguais, mas  'USERID' é diferente de " + result8371 + " <BeanUtils.setterName('setUserId', 'UpperCase')>")
chamada antiga: assertEquals("USER_ID", BeanUtils.setterName("setUserId", "UpperCaseWithUnderScores"))
nova chamada: assertEquals("USER_ID", BeanUtils.setterName("setUserId", "UpperCaseWithUnderScores"), "Era esperado valores iguais, mas  'USER_ID' é diferente de " + result8372 + " <BeanUtils.setterName('setUserId', 'UpperCaseWithUnderScores')>")
chamada antiga: assertEquals("USER_ID", BeanUtils.getterName("getUserId", "UpperCaseWithUnderScores"))
nova chamada: assertEquals("USER_ID", BeanUtils.getterName("getUserId", "UpperCaseWithUnderScores"), "Era esperado valores iguais, mas  'USER_ID' é diferente de " + result8373 + " <BeanUtils.getterName('getUserId', 'UpperCaseWithUnderScores')>")
chamada antiga: assertEquals("better", BeanUtils.getterName("isBetter", "KebabCase"))
nova chamada: assertEquals("better", BeanUtils.getterName("isBetter", "KebabCase"), "Era esperado valores iguais, mas  'better' é diferente de " + result8374 + " <BeanUtils.getterName('isBetter', 'KebabCase')>")
chamada antiga: assertEquals("user-id", BeanUtils.getterName("getUserId", "KebabCase"))
nova chamada: assertEquals("user-id", BeanUtils.getterName("getUserId", "KebabCase"), "Era esperado valores iguais, mas  'user-id' é diferente de " + result8375 + " <BeanUtils.getterName('getUserId', 'KebabCase')>")
chamada antiga: assertEquals("id", BeanUtils.getterName("id", "KebabCase"))
nova chamada: assertEquals("id", BeanUtils.getterName("id", "KebabCase"), "Era esperado valores iguais, mas  'id' é diferente de " + result8376 + " <BeanUtils.getterName('id', 'KebabCase')>")
chamada antiga: assertEquals("Id", BeanUtils.getterName("id", "PascalCase"))
nova chamada: assertEquals("Id", BeanUtils.getterName("id", "PascalCase"), "Era esperado valores iguais, mas  'Id' é diferente de " + result8377 + " <BeanUtils.getterName('id', 'PascalCase')>")
chamada antiga: assertEquals("user_id", BeanUtils.getterName("getUserId", "SnakeCase"))
nova chamada: assertEquals("user_id", BeanUtils.getterName("getUserId", "SnakeCase"), "Era esperado valores iguais, mas  'user_id' é diferente de " + result8378 + " <BeanUtils.getterName('getUserId', 'SnakeCase')>")
chamada antiga: assertEquals("User Id", BeanUtils.getterName("getUserId", "UpperCamelCaseWithSpaces"))
nova chamada: assertEquals("User Id", BeanUtils.getterName("getUserId", "UpperCamelCaseWithSpaces"), "Era esperado valores iguais, mas  'User Id' é diferente de " + result8379 + " <BeanUtils.getterName('getUserId', 'UpperCamelCaseWithSpaces')>")
chamada antiga: assertEquals("USER-ID", BeanUtils.getterName("getUserId", "UpperCaseWithDashes"))
nova chamada: assertEquals("USER-ID", BeanUtils.getterName("getUserId", "UpperCaseWithDashes"), "Era esperado valores iguais, mas  'USER-ID' é diferente de " + result8380 + " <BeanUtils.getterName('getUserId', 'UpperCaseWithDashes')>")
chamada antiga: assertEquals("USER.ID", BeanUtils.getterName("getUserId", "UpperCaseWithDots"))
nova chamada: assertEquals("USER.ID", BeanUtils.getterName("getUserId", "UpperCaseWithDots"), "Era esperado valores iguais, mas  'USER.ID' é diferente de " + result8381 + " <BeanUtils.getterName('getUserId', 'UpperCaseWithDots')>")
chamada antiga: assertEquals(Number.class, BeanUtils.subtypeOf(Number.class).getUpperBounds()[0])
nova chamada: assertEquals(Number.class, BeanUtils.subtypeOf(Number.class).getUpperBounds()[0], "Era esperado valores iguais, mas  Number.class é diferente de " + " BeanUtils.subtypeOf(Number.class).getUpperBounds()[0]")
chamada antiga: assertEquals(Number.class, BeanUtils.subtypeOf(BeanUtils.subtypeOf(Number.class)).getUpperBounds()[0])
nova chamada: assertEquals(Number.class, BeanUtils.subtypeOf(BeanUtils.subtypeOf(Number.class)).getUpperBounds()[0], "Era esperado valores iguais, mas  Number.class é diferente de " + " BeanUtils.subtypeOf(BeanUtils.subtypeOf(Number.class)).getUpperBounds()[0]")
chamada antiga: assertEquals(Number.class, BeanUtils.supertypeOf(Number.class).getLowerBounds()[0])
nova chamada: assertEquals(Number.class, BeanUtils.supertypeOf(Number.class).getLowerBounds()[0], "Era esperado valores iguais, mas  Number.class é diferente de " + " BeanUtils.supertypeOf(Number.class).getLowerBounds()[0]")
chamada antiga: assertEquals(Number.class, BeanUtils.supertypeOf(BeanUtils.supertypeOf(Number.class)).getLowerBounds()[0])
nova chamada: assertEquals(Number.class, BeanUtils.supertypeOf(BeanUtils.supertypeOf(Number.class)).getLowerBounds()[0], "Era esperado valores iguais, mas  Number.class é diferente de " + " BeanUtils.supertypeOf(BeanUtils.supertypeOf(Number.class)).getLowerBounds()[0]")
chamada antiga: assertTrue(object1O.isEmpty())
nova chamada: assertTrue(object1O.isEmpty(), "Era esperado verdadeiro, mas " + result8382 + " <object1O.isEmpty()> é falso")
chamada antiga: assertTrue(BeanUtils.equals(actualTypeArgument0, actualTypeArgument1))
nova chamada: assertTrue(BeanUtils.equals(actualTypeArgument0, actualTypeArgument1), "Era esperado verdadeiro, mas " + result8383 + " <BeanUtils.equals(actualTypeArgument0, actualTypeArgument1)> é falso")
chamada antiga: assertEquals(wildcardType0, wildcardType1)
nova chamada: assertEquals(wildcardType0, wildcardType1, "Era esperado valores iguais, mas  wildcardType0 é diferente de " + " wildcardType1")
chamada antiga: assertEquals("? super java.lang.Object", wildcardType0.toString())
nova chamada: assertEquals("? super java.lang.Object", wildcardType0.toString(), "Era esperado valores iguais, mas  '? super java.lang.Object' é diferente de " + result8384 + " <wildcardType0.toString()>")
chamada antiga: assertEquals("?", new BeanUtils.WildcardTypeImpl(new Type[] { Object.class }, new Type[] {}).toString())
nova chamada: assertEquals("?", new BeanUtils.WildcardTypeImpl(new Type[] { Object.class }, new Type[] {}).toString(), "Era esperado valores iguais, mas  '?' é diferente de " + result8385 + " <new BeanUtils.WildcardTypeImpl(new Type[] { Object.class }, new Type[] {}).toString()>")
chamada antiga: assertEquals("java.lang.Object", parameterizedType.toString())
nova chamada: assertEquals("java.lang.Object", parameterizedType.toString(), "Era esperado valores iguais, mas  'java.lang.Object' é diferente de " + result8386 + " <parameterizedType.toString()>")
chamada antiga: assertEquals("java.util.List<E>", BeanUtils.getGenericSupertype(ArrayList.class, ArrayList.class, List.class).toString())
nova chamada: assertEquals("java.util.List<E>", BeanUtils.getGenericSupertype(ArrayList.class, ArrayList.class, List.class).toString(), "Era esperado valores iguais, mas  'java.util.ListE' é diferente de " + result8387 + " <BeanUtils.getGenericSupertype(ArrayList.class, ArrayList.class, List.class).toString()>")
chamada antiga: assertEquals(Object.class, BeanUtils.getRawType(wildcardType))
nova chamada: assertEquals(Object.class, BeanUtils.getRawType(wildcardType), "Era esperado valores iguais, mas  Object.class é diferente de " + result8388 + " <BeanUtils.getRawType(wildcardType)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result8389 + " <list.size()>")
chamada antiga: assertEquals(4, list.size())
nova chamada: assertEquals(4, list.size(), "Era esperado valores iguais, mas  4 é diferente de " + result8390 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result8391 + " <list.size()>")
chamada antiga: assertFalse(reader.nextIfMatch(','))
nova chamada: assertFalse(reader.nextIfMatch(','), "Era esperado falso, mas " + result8392 + " <reader.nextIfMatch(',')> é verdadeiro ")
chamada antiga: assertFalse(provider.unregisterObjectReader(Bean.class, reader))
nova chamada: assertFalse(provider.unregisterObjectReader(Bean.class, reader), "Era esperado falso, mas " + result8393 + " <provider.unregisterObjectReader(Bean.class, reader)> é verdadeiro ")
chamada antiga: assertFalse(provider.register(modoule))
nova chamada: assertFalse(provider.register(modoule), "Era esperado falso, mas " + result8394 + " <provider.register(modoule)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule1))
nova chamada: assertFalse(provider.unregister(modoule1), "Era esperado falso, mas " + result8395 + " <provider.unregister(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(provider.register(modoule1))
nova chamada: assertFalse(provider.register(modoule1), "Era esperado falso, mas " + result8396 + " <provider.register(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule))
nova chamada: assertFalse(provider.unregister(modoule), "Era esperado falso, mas " + result8397 + " <provider.unregister(modoule)> é verdadeiro ")
chamada antiga: assertFalse(provider.unregister(modoule1))
nova chamada: assertFalse(provider.unregister(modoule1), "Era esperado falso, mas " + result8398 + " <provider.unregister(modoule1)> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":0}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":0}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":false}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":false}", Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":0}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":0}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":false}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value)
nova chamada: assertFalse(JSON.parseObject("{\"value\":false}").toJavaObject(Bean.class, NonZeroNumberCastToBooleanAsTrue).value, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(JSONFactory.isUseJacksonAnnotation())
nova chamada: assertFalse(JSONFactory.isUseJacksonAnnotation(), "Era esperado falso, mas " + result8399 + " <JSONFactory.isUseJacksonAnnotation()> é verdadeiro ")
chamada antiga: assertFalse((Boolean) JSONB.parseObject(jsonbBytes, Object.class))
nova chamada: assertFalse((Boolean) JSONB.parseObject(jsonbBytes, Object.class), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(o.isEmpty())
nova chamada: assertFalse(o.isEmpty(), "Era esperado falso, mas " + result8400 + " <o.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff("abc", "aac"))
nova chamada: assertFalse(Differ.diff("abc", "aac"), "Era esperado falso, mas " + result8401 + " <Differ.diff('abc', 'aac')> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("b", "101")))
nova chamada: assertFalse(Differ.diff(Collections.singletonMap("a", "101"), Collections.singletonMap("b", "101")), "Era esperado falso, mas " + result8402 + " <Differ.diff(Collections.singletonMap('a', '101'), Collections.singletonMap('b', '101'))> é verdadeiro ")
chamada antiga: assertFalse(differ.diff())
nova chamada: assertFalse(differ.diff(), "Era esperado falso, mas " + result8403 + " <differ.diff()> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(Collections.singletonMap("a", 101), Collections.emptyMap()))
nova chamada: assertFalse(Differ.diff(Collections.singletonMap("a", 101), Collections.emptyMap()), "Era esperado falso, mas " + result8404 + " <Differ.diff(Collections.singletonMap('a', 101), Collections.emptyMap())> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(JSONObject.of("a", 101), JSONObject.of()))
nova chamada: assertFalse(Differ.diff(JSONObject.of("a", 101), JSONObject.of()), "Era esperado falso, mas " + result8405 + " <Differ.diff(JSONObject.of('a', 101), JSONObject.of())> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(JSONObject.of("a", 101).keySet(), JSONObject.of().keySet()))
nova chamada: assertFalse(Differ.diff(JSONObject.of("a", 101).keySet(), JSONObject.of().keySet()), "Era esperado falso, mas " + result8406 + " <Differ.diff(JSONObject.of('a', 101).keySet(), JSONObject.of().keySet())> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean(1), new Bean(2)))
nova chamada: assertFalse(Differ.diff(new Bean(1), new Bean(2)), "Era esperado falso, mas " + result8407 + " <Differ.diff(new Bean(1), new Bean(2))> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean2("a"), new Bean2("b")))
nova chamada: assertFalse(Differ.diff(new Bean2("a"), new Bean2("b")), "Era esperado falso, mas " + result8408 + " <Differ.diff(new Bean2('a'), new Bean2('b'))> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean2("ab"), new Bean2("b")))
nova chamada: assertFalse(Differ.diff(new Bean2("ab"), new Bean2("b")), "Era esperado falso, mas " + result8409 + " <Differ.diff(new Bean2('ab'), new Bean2('b'))> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean2("ab"), new Bean2("ac")))
nova chamada: assertFalse(Differ.diff(new Bean2("ab"), new Bean2("ac")), "Era esperado falso, mas " + result8410 + " <Differ.diff(new Bean2('ab'), new Bean2('ac'))> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean2("abc"), new Bean2(null)))
nova chamada: assertFalse(Differ.diff(new Bean2("abc"), new Bean2(null)), "Era esperado falso, mas " + result8411 + " <Differ.diff(new Bean2('abc'), new Bean2(null))> é verdadeiro ")
chamada antiga: assertFalse(Differ.diff(new Bean2(null), new Bean2("abc")))
nova chamada: assertFalse(Differ.diff(new Bean2(null), new Bean2("abc")), "Era esperado falso, mas " + result8412 + " <Differ.diff(new Bean2(null), new Bean2('abc'))> é verdadeiro ")
chamada antiga: assertFalse(JdbcSupport.isClob(Object.class))
nova chamada: assertFalse(JdbcSupport.isClob(Object.class), "Era esperado falso, mas " + result8413 + " <JdbcSupport.isClob(Object.class)> é verdadeiro ")
chamada antiga: assertFalse(JdbcSupport.isClob(Object.class))
nova chamada: assertFalse(JdbcSupport.isClob(Object.class), "Era esperado falso, mas " + result8414 + " <JdbcSupport.isClob(Object.class)> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(actualTypeArgument0, Object.class))
nova chamada: assertFalse(BeanUtils.equals(actualTypeArgument0, Object.class), "Era esperado falso, mas " + result8415 + " <BeanUtils.equals(actualTypeArgument0, Object.class)> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(f.getGenericReturnType(), Object.class))
nova chamada: assertFalse(BeanUtils.equals(f.getGenericReturnType(), Object.class), "Era esperado falso, mas " + result8416 + " <BeanUtils.equals(f.getGenericReturnType(), Object.class)> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(new BeanUtils.GenericArrayTypeImpl(Object.class), Object.class))
nova chamada: assertFalse(BeanUtils.equals(new BeanUtils.GenericArrayTypeImpl(Object.class), Object.class), "Era esperado falso, mas " + result8417 + " <BeanUtils.equals(new BeanUtils.GenericArrayTypeImpl(Object.class), Object.class)> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f3.getGenericReturnType()))
nova chamada: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f3.getGenericReturnType()), "Era esperado falso, mas " + result8418 + " <BeanUtils.equals(f2.getGenericReturnType(), f3.getGenericReturnType())> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), Object.class))
nova chamada: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), Object.class), "Era esperado falso, mas " + result8419 + " <BeanUtils.equals(f2.getGenericReturnType(), Object.class)> é verdadeiro ")
chamada antiga: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f4.getGenericReturnType()))
nova chamada: assertFalse(BeanUtils.equals(f2.getGenericReturnType(), f4.getGenericReturnType()), "Era esperado falso, mas " + result8420 + " <BeanUtils.equals(f2.getGenericReturnType(), f4.getGenericReturnType())> é verdadeiro ")
chamada antiga: assertEquals(123, JSON.parseObject("123", OptionalInt.class).getAsInt())
nova chamada: assertEquals(123, JSON.parseObject("123", OptionalInt.class).getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result8421 + " <JSON.parseObject('123', OptionalInt.class).getAsInt()>")
chamada antiga: assertEquals(123, JSON.parseObject("123.0", OptionalInt.class).getAsInt())
nova chamada: assertEquals(123, JSON.parseObject("123.0", OptionalInt.class).getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result8422 + " <JSON.parseObject('123.0', OptionalInt.class).getAsInt()>")
chamada antiga: assertEquals(123, JSON.parseObject("'123'", OptionalInt.class).getAsInt())
nova chamada: assertEquals(123, JSON.parseObject("'123'", OptionalInt.class).getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result8423 + " <JSON.parseObject(''123'', OptionalInt.class).getAsInt()>")
chamada antiga: assertEquals(123, JSON.parseObject("\"123\"", OptionalInt.class).getAsInt())
nova chamada: assertEquals(123, JSON.parseObject("\"123\"", OptionalInt.class).getAsInt(), "Era esperado valores iguais, mas  123 é diferente de " + result8424 + " <JSON.parseObject('\'123\'', OptionalInt.class).getAsInt()>")
chamada antiga: assertFalse(JSON.parseObject("\"\"", OptionalInt.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("\"\"", OptionalInt.class).isPresent(), "Era esperado falso, mas " + result8425 + " <JSON.parseObject('\'\'', OptionalInt.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("''", OptionalInt.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("''", OptionalInt.class).isPresent(), "Era esperado falso, mas " + result8426 + " <JSON.parseObject('''', OptionalInt.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("null", OptionalInt.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("null", OptionalInt.class).isPresent(), "Era esperado falso, mas " + result8427 + " <JSON.parseObject('null', OptionalInt.class).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(123, JSON.parseObject("123", OptionalLong.class).getAsLong())
nova chamada: assertEquals(123, JSON.parseObject("123", OptionalLong.class).getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result8428 + " <JSON.parseObject('123', OptionalLong.class).getAsLong()>")
chamada antiga: assertEquals(123, JSON.parseObject("123.0", OptionalLong.class).getAsLong())
nova chamada: assertEquals(123, JSON.parseObject("123.0", OptionalLong.class).getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result8429 + " <JSON.parseObject('123.0', OptionalLong.class).getAsLong()>")
chamada antiga: assertEquals(123, JSON.parseObject("'123'", OptionalLong.class).getAsLong())
nova chamada: assertEquals(123, JSON.parseObject("'123'", OptionalLong.class).getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result8430 + " <JSON.parseObject(''123'', OptionalLong.class).getAsLong()>")
chamada antiga: assertEquals(123, JSON.parseObject("\"123\"", OptionalLong.class).getAsLong())
nova chamada: assertEquals(123, JSON.parseObject("\"123\"", OptionalLong.class).getAsLong(), "Era esperado valores iguais, mas  123 é diferente de " + result8431 + " <JSON.parseObject('\'123\'', OptionalLong.class).getAsLong()>")
chamada antiga: assertFalse(JSON.parseObject("\"\"", OptionalLong.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("\"\"", OptionalLong.class).isPresent(), "Era esperado falso, mas " + result8432 + " <JSON.parseObject('\'\'', OptionalLong.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("''", OptionalLong.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("''", OptionalLong.class).isPresent(), "Era esperado falso, mas " + result8433 + " <JSON.parseObject('''', OptionalLong.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("null", OptionalLong.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("null", OptionalLong.class).isPresent(), "Era esperado falso, mas " + result8434 + " <JSON.parseObject('null', OptionalLong.class).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(123, JSON.parseObject("123", OptionalDouble.class).getAsDouble())
nova chamada: assertEquals(123, JSON.parseObject("123", OptionalDouble.class).getAsDouble(), "Era esperado valores iguais, mas  123 é diferente de " + result8435 + " <JSON.parseObject('123', OptionalDouble.class).getAsDouble()>")
chamada antiga: assertEquals(123, JSON.parseObject("123.0", OptionalDouble.class).getAsDouble())
nova chamada: assertEquals(123, JSON.parseObject("123.0", OptionalDouble.class).getAsDouble(), "Era esperado valores iguais, mas  123 é diferente de " + result8436 + " <JSON.parseObject('123.0', OptionalDouble.class).getAsDouble()>")
chamada antiga: assertEquals(123, JSON.parseObject("'123'", OptionalDouble.class).getAsDouble())
nova chamada: assertEquals(123, JSON.parseObject("'123'", OptionalDouble.class).getAsDouble(), "Era esperado valores iguais, mas  123 é diferente de " + result8437 + " <JSON.parseObject(''123'', OptionalDouble.class).getAsDouble()>")
chamada antiga: assertEquals(123, JSON.parseObject("\"123\"", OptionalDouble.class).getAsDouble())
nova chamada: assertEquals(123, JSON.parseObject("\"123\"", OptionalDouble.class).getAsDouble(), "Era esperado valores iguais, mas  123 é diferente de " + result8438 + " <JSON.parseObject('\'123\'', OptionalDouble.class).getAsDouble()>")
chamada antiga: assertFalse(JSON.parseObject("\"\"", OptionalDouble.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("\"\"", OptionalDouble.class).isPresent(), "Era esperado falso, mas " + result8439 + " <JSON.parseObject('\'\'', OptionalDouble.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("''", OptionalDouble.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("''", OptionalDouble.class).isPresent(), "Era esperado falso, mas " + result8440 + " <JSON.parseObject('''', OptionalDouble.class).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("null", OptionalDouble.class).isPresent())
nova chamada: assertFalse(JSON.parseObject("null", OptionalDouble.class).isPresent(), "Era esperado falso, mas " + result8441 + " <JSON.parseObject('null', OptionalDouble.class).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"").get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"").get(), "Era esperado valores iguais, mas " + result8442 + " <Integer.valueOf(123)> é diferente de " + result8443 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('\'123\'').get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'").get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'").get(), "Era esperado valores iguais, mas " + result8444 + " <Integer.valueOf(123)> é diferente de " + result8445 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject(''123'').get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123").get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123").get(), "Era esperado valores iguais, mas " + result8446 + " <Integer.valueOf(123)> é diferente de " + result8447 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('123').get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0").get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0").get(), "Era esperado valores iguais, mas " + result8448 + " <Integer.valueOf(123)> é diferente de " + result8449 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('123.0').get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null").isPresent(), "Era esperado falso, mas " + result8450 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('null').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"").isPresent(), "Era esperado falso, mas " + result8451 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('\'\'').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''").isPresent(), "Era esperado falso, mas " + result8452 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('''').isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8453 + " <Integer.valueOf(123)> é diferente de " + result8454 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('\'123\''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8455 + " <Integer.valueOf(123)> é diferente de " + result8456 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject(''123''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8457 + " <Integer.valueOf(123)> é diferente de " + result8458 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('123'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Integer.valueOf(123), new TypeReference<Optional<Integer>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8459 + " <Integer.valueOf(123)> é diferente de " + result8460 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('123.0'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8461 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('null'.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8462 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject('\'\''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Integer>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8463 + " <new TypeReference<Optional<Integer>>() {\n}.parseObject(''''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"").get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"").get(), "Era esperado valores iguais, mas " + result8464 + " <Long.valueOf(123)> é diferente de " + result8465 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('\'123\'').get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'").get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'").get(), "Era esperado valores iguais, mas " + result8466 + " <Long.valueOf(123)> é diferente de " + result8467 + " <new TypeReference<Optional<Long>>() {\n}.parseObject(''123'').get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123").get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123").get(), "Era esperado valores iguais, mas " + result8468 + " <Long.valueOf(123)> é diferente de " + result8469 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('123').get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0").get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0").get(), "Era esperado valores iguais, mas " + result8470 + " <Long.valueOf(123)> é diferente de " + result8471 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('123.0').get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null").isPresent(), "Era esperado falso, mas " + result8472 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('null').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"").isPresent(), "Era esperado falso, mas " + result8473 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('\'\'').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''").isPresent(), "Era esperado falso, mas " + result8474 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('''').isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8475 + " <Long.valueOf(123)> é diferente de " + result8476 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('\'123\''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8477 + " <Long.valueOf(123)> é diferente de " + result8478 + " <new TypeReference<Optional<Long>>() {\n}.parseObject(''123''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8479 + " <Long.valueOf(123)> é diferente de " + result8480 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('123'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Long.valueOf(123), new TypeReference<Optional<Long>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8481 + " <Long.valueOf(123)> é diferente de " + result8482 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('123.0'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8483 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('null'.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8484 + " <new TypeReference<Optional<Long>>() {\n}.parseObject('\'\''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Long>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8485 + " <new TypeReference<Optional<Long>>() {\n}.parseObject(''''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"").get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"").get(), "Era esperado valores iguais, mas " + result8486 + " <Float.valueOf(123)> é diferente de " + result8487 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('\'123\'').get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'").get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'").get(), "Era esperado valores iguais, mas " + result8488 + " <Float.valueOf(123)> é diferente de " + result8489 + " <new TypeReference<Optional<Float>>() {\n}.parseObject(''123'').get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123").get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123").get(), "Era esperado valores iguais, mas " + result8490 + " <Float.valueOf(123)> é diferente de " + result8491 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('123').get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0").get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0").get(), "Era esperado valores iguais, mas " + result8492 + " <Float.valueOf(123)> é diferente de " + result8493 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('123.0').get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null").isPresent(), "Era esperado falso, mas " + result8494 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('null').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"").isPresent(), "Era esperado falso, mas " + result8495 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('\'\'').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''").isPresent(), "Era esperado falso, mas " + result8496 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('''').isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8497 + " <Float.valueOf(123)> é diferente de " + result8498 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('\'123\''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8499 + " <Float.valueOf(123)> é diferente de " + result8500 + " <new TypeReference<Optional<Float>>() {\n}.parseObject(''123''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8501 + " <Float.valueOf(123)> é diferente de " + result8502 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('123'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Float.valueOf(123), new TypeReference<Optional<Float>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8503 + " <Float.valueOf(123)> é diferente de " + result8504 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('123.0'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8505 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('null'.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8506 + " <new TypeReference<Optional<Float>>() {\n}.parseObject('\'\''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Float>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8507 + " <new TypeReference<Optional<Float>>() {\n}.parseObject(''''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"").get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"").get(), "Era esperado valores iguais, mas " + result8508 + " <Double.valueOf(123)> é diferente de " + result8509 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('\'123\'').get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'").get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'").get(), "Era esperado valores iguais, mas " + result8510 + " <Double.valueOf(123)> é diferente de " + result8511 + " <new TypeReference<Optional<Double>>() {\n}.parseObject(''123'').get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123").get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123").get(), "Era esperado valores iguais, mas " + result8512 + " <Double.valueOf(123)> é diferente de " + result8513 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('123').get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0").get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0").get(), "Era esperado valores iguais, mas " + result8514 + " <Double.valueOf(123)> é diferente de " + result8515 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('123.0').get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null").isPresent(), "Era esperado falso, mas " + result8516 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('null').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"").isPresent(), "Era esperado falso, mas " + result8517 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('\'\'').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''").isPresent(), "Era esperado falso, mas " + result8518 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('''').isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8519 + " <Double.valueOf(123)> é diferente de " + result8520 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('\'123\''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8521 + " <Double.valueOf(123)> é diferente de " + result8522 + " <new TypeReference<Optional<Double>>() {\n}.parseObject(''123''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8523 + " <Double.valueOf(123)> é diferente de " + result8524 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('123'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(Double.valueOf(123), new TypeReference<Optional<Double>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8525 + " <Double.valueOf(123)> é diferente de " + result8526 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('123.0'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8527 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('null'.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8528 + " <new TypeReference<Optional<Double>>() {\n}.parseObject('\'\''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<Double>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8529 + " <new TypeReference<Optional<Double>>() {\n}.parseObject(''''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"").get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"").get(), "Era esperado valores iguais, mas " + result8530 + " <BigDecimal.valueOf(123)> é diferente de " + result8531 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('\'123\'').get()>")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'").get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'").get(), "Era esperado valores iguais, mas " + result8532 + " <BigDecimal.valueOf(123)> é diferente de " + result8533 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject(''123'').get()>")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123").get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123").get(), "Era esperado valores iguais, mas " + result8534 + " <BigDecimal.valueOf(123)> é diferente de " + result8535 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('123').get()>")
chamada antiga: assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0").get())
nova chamada: assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0").get(), "Era esperado valores iguais, mas  new BigDecimal('123.0') é diferente de " + result8536 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('123.0').get()>")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null").isPresent(), "Era esperado falso, mas " + result8537 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('null').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"").isPresent(), "Era esperado falso, mas " + result8538 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('\'\'').isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''").isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''").isPresent(), "Era esperado falso, mas " + result8539 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('''').isPresent()> é verdadeiro ")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"123\"".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8540 + " <BigDecimal.valueOf(123)> é diferente de " + result8541 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('\'123\''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("'123'".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8542 + " <BigDecimal.valueOf(123)> é diferente de " + result8543 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject(''123''.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(BigDecimal.valueOf(123), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas " + result8544 + " <BigDecimal.valueOf(123)> é diferente de " + result8545 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('123'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get())
nova chamada: assertEquals(new BigDecimal("123.0"), new TypeReference<Optional<BigDecimal>>() {
}.parseObject("123.0".getBytes(StandardCharsets.UTF_8)).get(), "Era esperado valores iguais, mas  new BigDecimal('123.0') é diferente de " + result8546 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('123.0'.getBytes(StandardCharsets.UTF_8)).get()>")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("null".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8547 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('null'.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("\"\"".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8548 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject('\'\''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent())
nova chamada: assertFalse(new TypeReference<Optional<BigDecimal>>() {
}.parseObject("''".getBytes(StandardCharsets.UTF_8)).isPresent(), "Era esperado falso, mas " + result8549 + " <new TypeReference<Optional<BigDecimal>>() {\n}.parseObject(''''.getBytes(StandardCharsets.UTF_8)).isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get(), "Era esperado valores iguais, mas " + result8550 + " <Integer.valueOf(123)> é diferente de " + result8551 + " <JSON.parseObject('{\'value\':\'123\'}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get(), "Era esperado valores iguais, mas " + result8552 + " <Integer.valueOf(123)> é diferente de " + result8553 + " <JSON.parseObject('{\'value\':'123'}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get(), "Era esperado valores iguais, mas " + result8554 + " <Integer.valueOf(123)> é diferente de " + result8555 + " <JSON.parseObject('{\'value\':123}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get(), "Era esperado valores iguais, mas " + result8556 + " <Integer.valueOf(123)> é diferente de " + result8557 + " <JSON.parseObject('{\'value\':123.}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get(), "Era esperado valores iguais, mas " + result8558 + " <Integer.valueOf(123)> é diferente de " + result8559 + " <JSON.parseObject('{\'value\':123.0}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.get()>")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent(), "Era esperado falso, mas " + result8560 + " <JSON.parseObject('{\'value\':\'\'}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":''}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":''}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent(), "Era esperado falso, mas " + result8561 + " <JSON.parseObject('{\'value\':''}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":null}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":null}}".getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent(), "Era esperado falso, mas " + result8562 + " <JSON.parseObject('{\'value\':null}}'.getBytes(StandardCharsets.UTF_8), Bean_Integer.class, JSONReader.Feature.IgnoreCheckClose).value.isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Integer.class).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Integer.class).value.get(), "Era esperado valores iguais, mas " + result8563 + " <Integer.valueOf(123)> é diferente de " + result8564 + " <JSON.parseObject('{\'value\':\'123\'}', Bean_Integer.class).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Integer.class).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Integer.class).value.get(), "Era esperado valores iguais, mas " + result8565 + " <Integer.valueOf(123)> é diferente de " + result8566 + " <JSON.parseObject('{\'value\':'123'}', Bean_Integer.class).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Integer.class).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Integer.class).value.get(), "Era esperado valores iguais, mas " + result8567 + " <Integer.valueOf(123)> é diferente de " + result8568 + " <JSON.parseObject('{\'value\':123}', Bean_Integer.class).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Integer.class).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Integer.class).value.get(), "Era esperado valores iguais, mas " + result8569 + " <Integer.valueOf(123)> é diferente de " + result8570 + " <JSON.parseObject('{\'value\':123.}', Bean_Integer.class).value.get()>")
chamada antiga: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Integer.class).value.get())
nova chamada: assertEquals(Integer.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Integer.class).value.get(), "Era esperado valores iguais, mas " + result8571 + " <Integer.valueOf(123)> é diferente de " + result8572 + " <JSON.parseObject('{\'value\':123.0}', Bean_Integer.class).value.get()>")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Integer.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Integer.class).value.isPresent(), "Era esperado falso, mas " + result8573 + " <JSON.parseObject('{\'value\':\'\'}', Bean_Integer.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":''}", Bean_Integer.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":''}", Bean_Integer.class).value.isPresent(), "Era esperado falso, mas " + result8574 + " <JSON.parseObject('{\'value\':''}', Bean_Integer.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":null}", Bean_Integer.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":null}", Bean_Integer.class).value.isPresent(), "Era esperado falso, mas " + result8575 + " <JSON.parseObject('{\'value\':null}', Bean_Integer.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8576 + " <Long.valueOf(123)> é diferente de " + result8577 + " <JSON.parseObject('{\'value\':\'123\'}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8578 + " <Long.valueOf(123)> é diferente de " + result8579 + " <JSON.parseObject('{\'value\':'123'}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8580 + " <Long.valueOf(123)> é diferente de " + result8581 + " <JSON.parseObject('{\'value\':123}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8582 + " <Long.valueOf(123)> é diferente de " + result8583 + " <JSON.parseObject('{\'value\':123.}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8584 + " <Long.valueOf(123)> é diferente de " + result8585 + " <JSON.parseObject('{\'value\':123.0}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.get()>")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8586 + " <JSON.parseObject('{\'value\':\'\'}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":''}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":''}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8587 + " <JSON.parseObject('{\'value\':''}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":null}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":null}".getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8588 + " <JSON.parseObject('{\'value\':null}'.getBytes(StandardCharsets.UTF_8), Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":\"123\"}", Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8589 + " <Long.valueOf(123)> é diferente de " + result8590 + " <JSON.parseObject('{\'value\':\'123\'}', Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":'123'}", Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8591 + " <Long.valueOf(123)> é diferente de " + result8592 + " <JSON.parseObject('{\'value\':'123'}', Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123}", Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8593 + " <Long.valueOf(123)> é diferente de " + result8594 + " <JSON.parseObject('{\'value\':123}', Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.}", Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8595 + " <Long.valueOf(123)> é diferente de " + result8596 + " <JSON.parseObject('{\'value\':123.}', Bean_Long.class).value.get()>")
chamada antiga: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Long.class).value.get())
nova chamada: assertEquals(Long.valueOf(123), JSON.parseObject("{\"value\":123.0}", Bean_Long.class).value.get(), "Era esperado valores iguais, mas " + result8597 + " <Long.valueOf(123)> é diferente de " + result8598 + " <JSON.parseObject('{\'value\':123.0}', Bean_Long.class).value.get()>")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":\"\"}", Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8599 + " <JSON.parseObject('{\'value\':\'\'}', Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":''}", Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":''}", Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8600 + " <JSON.parseObject('{\'value\':''}', Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertFalse(JSON.parseObject("{\"value\":null}", Bean_Long.class).value.isPresent())
nova chamada: assertFalse(JSON.parseObject("{\"value\":null}", Bean_Long.class).value.isPresent(), "Era esperado falso, mas " + result8601 + " <JSON.parseObject('{\'value\':null}', Bean_Long.class).value.isPresent()> é verdadeiro ")
chamada antiga: assertEquals(Optional.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Optional.class).getObjectClass())
nova chamada: assertEquals(Optional.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Optional.class).getObjectClass(), "Era esperado valores iguais, mas  Optional.class é diferente de " + result8602 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Optional.class).getObjectClass()>")
chamada antiga: assertEquals(2, extract.size())
nova chamada: assertEquals(2, extract.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8603 + " <extract.size()>")
chamada antiga: assertEquals("{\"key\":\"value\"}", JSON.toJSONString(o))
nova chamada: assertEquals("{\"key\":\"value\"}", JSON.toJSONString(o), "Era esperado valores iguais, mas  '{\'key\':\'value\'}' é diferente de " + result8604 + " <JSON.toJSONString(o)>")
chamada antiga: assertEquals("{\"name\":\"hello 世界\",\"properties\":\"{\\\"color\\\":\\\"红色\\\",\\\"size\\\":66}\"}", json)
nova chamada: assertEquals("{\"name\":\"hello 世界\",\"properties\":\"{\\\"color\\\":\\\"红色\\\",\\\"size\\\":66}\"}", json, "Era esperado valores iguais, mas  '{\'name\':\'hello 世界\',\'properties\':\'{\\\'color\\\':\\\'红色\\\',\\\'size\\\':66}\'}' é diferente de " + " json")
chamada antiga: assertNotNull(deserializedModel)
nova chamada: assertNotNull(deserializedModel, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("hello 世界", deserializedModel.getName())
nova chamada: assertEquals("hello 世界", deserializedModel.getName(), "Era esperado valores iguais, mas  'hello 世界' é diferente de " + result8605 + " <deserializedModel.getName()>")
chamada antiga: assertNotNull(deserializedModel.getProperties())
nova chamada: assertNotNull(deserializedModel.getProperties(), "Era esperado não nulo, mas " + result8606 + " <deserializedModel.getProperties()> é nulo")
chamada antiga: assertEquals("红色", deserializedModel.getProperties().getColor())
nova chamada: assertEquals("红色", deserializedModel.getProperties().getColor(), "Era esperado valores iguais, mas  '红色' é diferente de " + result8607 + " <deserializedModel.getProperties().getColor()>")
chamada antiga: assertEquals(66, deserializedModel.getProperties().getSize())
nova chamada: assertEquals(66, deserializedModel.getProperties().getSize(), "Era esperado valores iguais, mas  66 é diferente de " + result8608 + " <deserializedModel.getProperties().getSize()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("parseInt error", error.getMessage())
nova chamada: assertEquals("parseInt error", error.getMessage(), "Era esperado valores iguais, mas  'parseInt error' é diferente de " + result8609 + " <error.getMessage()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("parseInt error, field : value", error.getMessage())
nova chamada: assertEquals("parseInt error, field : value", error.getMessage(), "Era esperado valores iguais, mas  'parseInt error, field : value' é diferente de " + result8610 + " <error.getMessage()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("parseInt error : 9295260120", error.getMessage())
nova chamada: assertEquals("parseInt error : 9295260120", error.getMessage(), "Era esperado valores iguais, mas  'parseInt error : 9295260120' é diferente de " + result8611 + " <error.getMessage()>")
chamada antiga: assertEquals(out, JSON.toJSONString(model))
nova chamada: assertEquals(out, JSON.toJSONString(model), "Era esperado valores iguais, mas  out é diferente de " + result8612 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals(out, JSON.toJSONString(model))
nova chamada: assertEquals(out, JSON.toJSONString(model), "Era esperado valores iguais, mas  out é diferente de " + result8613 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals(out, JSON.toJSONString(model))
nova chamada: assertEquals(out, JSON.toJSONString(model), "Era esperado valores iguais, mas  out é diferente de " + result8614 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals(out, JSON.toJSONString(model))
nova chamada: assertEquals(out, JSON.toJSONString(model), "Era esperado valores iguais, mas  out é diferente de " + result8615 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals(Date.class, jsonObject.get("UpdateTime").getClass())
nova chamada: assertEquals(Date.class, jsonObject.get("UpdateTime").getClass(), "Era esperado valores iguais, mas  Date.class é diferente de " + result8616 + " <jsonObject.get('UpdateTime').getClass()>")
chamada antiga: assertEquals(" 1001 ", v.id)
nova chamada: assertEquals(" 1001 ", v.id, "Era esperado valores iguais, mas  ' 1001 ' é diferente de " + " v.id")
chamada antiga: assertEquals(" 1001 ", v.id)
nova chamada: assertEquals(" 1001 ", v.id, "Era esperado valores iguais, mas  ' 1001 ' é diferente de " + " v.id")
chamada antiga: assertEquals("1001", v.id)
nova chamada: assertEquals("1001", v.id, "Era esperado valores iguais, mas  '1001' é diferente de " + " v.id")
chamada antiga: assertEquals("1001", v.id)
nova chamada: assertEquals("1001", v.id, "Era esperado valores iguais, mas  '1001' é diferente de " + " v.id")
chamada antiga: assertNotNull(personCollection)
nova chamada: assertNotNull(personCollection, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, personCollection.size())
nova chamada: assertEquals(2, personCollection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8617 + " <personCollection.size()>")
chamada antiga: assertEquals("tom", personCollection.get("123456").getName())
nova chamada: assertEquals("tom", personCollection.get("123456").getName(), "Era esperado valores iguais, mas  'tom' é diferente de " + result8618 + " <personCollection.get('123456').getName()>")
chamada antiga: assertEquals("jack", personCollection.get("123457").getName())
nova chamada: assertEquals("jack", personCollection.get("123457").getName(), "Era esperado valores iguais, mas  'jack' é diferente de " + result8619 + " <personCollection.get('123457').getName()>")
chamada antiga: assertNotNull(json2)
nova chamada: assertNotNull(json2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(personCollection)
nova chamada: assertNotNull(personCollection, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, personCollection.size())
nova chamada: assertEquals(2, personCollection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8620 + " <personCollection.size()>")
chamada antiga: assertEquals(2, personCollection.get("张三").size())
nova chamada: assertEquals(2, personCollection.get("张三").size(), "Era esperado valores iguais, mas  2 é diferente de " + result8621 + " <personCollection.get('张三').size()>")
chamada antiga: assertEquals("123", personCollection.get("张三").get(0).getIdNo())
nova chamada: assertEquals("123", personCollection.get("张三").get(0).getIdNo(), "Era esperado valores iguais, mas  '123' é diferente de " + result8622 + " <personCollection.get('张三').get(0).getIdNo()>")
chamada antiga: assertEquals("张三", personCollection.get("张三").get(0).getName())
nova chamada: assertEquals("张三", personCollection.get("张三").get(0).getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result8623 + " <personCollection.get('张三').get(0).getName()>")
chamada antiga: assertEquals("124", personCollection.get("张三").get(1).getIdNo())
nova chamada: assertEquals("124", personCollection.get("张三").get(1).getIdNo(), "Era esperado valores iguais, mas  '124' é diferente de " + result8624 + " <personCollection.get('张三').get(1).getIdNo()>")
chamada antiga: assertEquals("张三", personCollection.get("张三").get(1).getName())
nova chamada: assertEquals("张三", personCollection.get("张三").get(1).getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result8625 + " <personCollection.get('张三').get(1).getName()>")
chamada antiga: assertEquals(2, personCollection.get("李四").size())
nova chamada: assertEquals(2, personCollection.get("李四").size(), "Era esperado valores iguais, mas  2 é diferente de " + result8626 + " <personCollection.get('李四').size()>")
chamada antiga: assertEquals("223", personCollection.get("李四").get(0).getIdNo())
nova chamada: assertEquals("223", personCollection.get("李四").get(0).getIdNo(), "Era esperado valores iguais, mas  '223' é diferente de " + result8627 + " <personCollection.get('李四').get(0).getIdNo()>")
chamada antiga: assertEquals("李四", personCollection.get("李四").get(0).getName())
nova chamada: assertEquals("李四", personCollection.get("李四").get(0).getName(), "Era esperado valores iguais, mas  '李四' é diferente de " + result8628 + " <personCollection.get('李四').get(0).getName()>")
chamada antiga: assertEquals("224", personCollection.get("李四").get(1).getIdNo())
nova chamada: assertEquals("224", personCollection.get("李四").get(1).getIdNo(), "Era esperado valores iguais, mas  '224' é diferente de " + result8629 + " <personCollection.get('李四').get(1).getIdNo()>")
chamada antiga: assertEquals("李四", personCollection.get("李四").get(1).getName())
nova chamada: assertEquals("李四", personCollection.get("李四").get(1).getName(), "Era esperado valores iguais, mas  '李四' é diferente de " + result8630 + " <personCollection.get('李四').get(1).getName()>")
chamada antiga: assertNotNull(json2)
nova chamada: assertNotNull(json2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(personCollection)
nova chamada: assertNotNull(personCollection, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, personCollection.size())
nova chamada: assertEquals(2, personCollection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8631 + " <personCollection.size()>")
chamada antiga: assertEquals(2, personCollection.get("张三").length)
nova chamada: assertEquals(2, personCollection.get("张三").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三').length")
chamada antiga: assertEquals("123", personCollection.get("张三")[0].getIdNo())
nova chamada: assertEquals("123", personCollection.get("张三")[0].getIdNo(), "Era esperado valores iguais, mas  '123' é diferente de " + result8632 + " <personCollection.get('张三')[0].getIdNo()>")
chamada antiga: assertEquals("张三", personCollection.get("张三")[0].getName())
nova chamada: assertEquals("张三", personCollection.get("张三")[0].getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result8633 + " <personCollection.get('张三')[0].getName()>")
chamada antiga: assertEquals("124", personCollection.get("张三")[1].getIdNo())
nova chamada: assertEquals("124", personCollection.get("张三")[1].getIdNo(), "Era esperado valores iguais, mas  '124' é diferente de " + result8634 + " <personCollection.get('张三')[1].getIdNo()>")
chamada antiga: assertEquals("张三", personCollection.get("张三")[1].getName())
nova chamada: assertEquals("张三", personCollection.get("张三")[1].getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result8635 + " <personCollection.get('张三')[1].getName()>")
chamada antiga: assertEquals(2, personCollection.get("李四").length)
nova chamada: assertEquals(2, personCollection.get("李四").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四').length")
chamada antiga: assertEquals("223", personCollection.get("李四")[0].getIdNo())
nova chamada: assertEquals("223", personCollection.get("李四")[0].getIdNo(), "Era esperado valores iguais, mas  '223' é diferente de " + result8636 + " <personCollection.get('李四')[0].getIdNo()>")
chamada antiga: assertEquals("李四", personCollection.get("李四")[0].getName())
nova chamada: assertEquals("李四", personCollection.get("李四")[0].getName(), "Era esperado valores iguais, mas  '李四' é diferente de " + result8637 + " <personCollection.get('李四')[0].getName()>")
chamada antiga: assertEquals("224", personCollection.get("李四")[1].getIdNo())
nova chamada: assertEquals("224", personCollection.get("李四")[1].getIdNo(), "Era esperado valores iguais, mas  '224' é diferente de " + result8638 + " <personCollection.get('李四')[1].getIdNo()>")
chamada antiga: assertEquals("李四", personCollection.get("李四")[1].getName())
nova chamada: assertEquals("李四", personCollection.get("李四")[1].getName(), "Era esperado valores iguais, mas  '李四' é diferente de " + result8639 + " <personCollection.get('李四')[1].getName()>")
chamada antiga: assertNotNull(json2)
nova chamada: assertNotNull(json2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(personCollection)
nova chamada: assertNotNull(personCollection, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, personCollection.size())
nova chamada: assertEquals(2, personCollection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8640 + " <personCollection.size()>")
chamada antiga: assertEquals(2, personCollection.get("张三").length)
nova chamada: assertEquals(2, personCollection.get("张三").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三').length")
chamada antiga: assertEquals("123", personCollection.get("张三")[0].get("idNo"))
nova chamada: assertEquals("123", personCollection.get("张三")[0].get("idNo"), "Era esperado valores iguais, mas  '123' é diferente de " + result8641 + " <personCollection.get('张三')[0].get('idNo')>")
chamada antiga: assertEquals("张三", personCollection.get("张三")[0].get("name"))
nova chamada: assertEquals("张三", personCollection.get("张三")[0].get("name"), "Era esperado valores iguais, mas  '张三' é diferente de " + result8642 + " <personCollection.get('张三')[0].get('name')>")
chamada antiga: assertEquals("124", personCollection.get("张三")[1].get("idNo"))
nova chamada: assertEquals("124", personCollection.get("张三")[1].get("idNo"), "Era esperado valores iguais, mas  '124' é diferente de " + result8643 + " <personCollection.get('张三')[1].get('idNo')>")
chamada antiga: assertEquals("张三", personCollection.get("张三")[1].get("name"))
nova chamada: assertEquals("张三", personCollection.get("张三")[1].get("name"), "Era esperado valores iguais, mas  '张三' é diferente de " + result8644 + " <personCollection.get('张三')[1].get('name')>")
chamada antiga: assertEquals(2, personCollection.get("李四").length)
nova chamada: assertEquals(2, personCollection.get("李四").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四').length")
chamada antiga: assertEquals("223", personCollection.get("李四")[0].get("idNo"))
nova chamada: assertEquals("223", personCollection.get("李四")[0].get("idNo"), "Era esperado valores iguais, mas  '223' é diferente de " + result8645 + " <personCollection.get('李四')[0].get('idNo')>")
chamada antiga: assertEquals("李四", personCollection.get("李四")[0].get("name"))
nova chamada: assertEquals("李四", personCollection.get("李四")[0].get("name"), "Era esperado valores iguais, mas  '李四' é diferente de " + result8646 + " <personCollection.get('李四')[0].get('name')>")
chamada antiga: assertEquals("224", personCollection.get("李四")[1].get("idNo"))
nova chamada: assertEquals("224", personCollection.get("李四")[1].get("idNo"), "Era esperado valores iguais, mas  '224' é diferente de " + result8647 + " <personCollection.get('李四')[1].get('idNo')>")
chamada antiga: assertEquals("李四", personCollection.get("李四")[1].get("name"))
nova chamada: assertEquals("李四", personCollection.get("李四")[1].get("name"), "Era esperado valores iguais, mas  '李四' é diferente de " + result8648 + " <personCollection.get('李四')[1].get('name')>")
chamada antiga: assertNotNull(json2)
nova chamada: assertNotNull(json2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(personCollection)
nova chamada: assertNotNull(personCollection, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, personCollection.size())
nova chamada: assertEquals(2, personCollection.size(), "Era esperado valores iguais, mas  2 é diferente de " + result8649 + " <personCollection.size()>")
chamada antiga: assertEquals(2, personCollection.get("张三").length)
nova chamada: assertEquals(2, personCollection.get("张三").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三').length")
chamada antiga: assertEquals(2, personCollection.get("张三")[0].get("idNo").length)
nova chamada: assertEquals(2, personCollection.get("张三")[0].get("idNo").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三')[0].get('idNo').length")
chamada antiga: assertEquals("123", personCollection.get("张三")[0].get("idNo")[0])
nova chamada: assertEquals("123", personCollection.get("张三")[0].get("idNo")[0], "Era esperado valores iguais, mas  '123' é diferente de " + " personCollection.get('张三')[0].get('idNo')[0]")
chamada antiga: assertEquals("123x", personCollection.get("张三")[0].get("idNo")[1])
nova chamada: assertEquals("123x", personCollection.get("张三")[0].get("idNo")[1], "Era esperado valores iguais, mas  '123x' é diferente de " + " personCollection.get('张三')[0].get('idNo')[1]")
chamada antiga: assertEquals(2, personCollection.get("张三")[0].get("name").length)
nova chamada: assertEquals(2, personCollection.get("张三")[0].get("name").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三')[0].get('name').length")
chamada antiga: assertEquals("张三", personCollection.get("张三")[0].get("name")[0])
nova chamada: assertEquals("张三", personCollection.get("张三")[0].get("name")[0], "Era esperado valores iguais, mas  '张三' é diferente de " + " personCollection.get('张三')[0].get('name')[0]")
chamada antiga: assertEquals("张三一", personCollection.get("张三")[0].get("name")[1])
nova chamada: assertEquals("张三一", personCollection.get("张三")[0].get("name")[1], "Era esperado valores iguais, mas  '张三一' é diferente de " + " personCollection.get('张三')[0].get('name')[1]")
chamada antiga: assertEquals(2, personCollection.get("张三")[1].get("idNo").length)
nova chamada: assertEquals(2, personCollection.get("张三")[1].get("idNo").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三')[1].get('idNo').length")
chamada antiga: assertEquals("124", personCollection.get("张三")[1].get("idNo")[0])
nova chamada: assertEquals("124", personCollection.get("张三")[1].get("idNo")[0], "Era esperado valores iguais, mas  '124' é diferente de " + " personCollection.get('张三')[1].get('idNo')[0]")
chamada antiga: assertEquals("124x", personCollection.get("张三")[1].get("idNo")[1])
nova chamada: assertEquals("124x", personCollection.get("张三")[1].get("idNo")[1], "Era esperado valores iguais, mas  '124x' é diferente de " + " personCollection.get('张三')[1].get('idNo')[1]")
chamada antiga: assertEquals(2, personCollection.get("张三")[1].get("name").length)
nova chamada: assertEquals(2, personCollection.get("张三")[1].get("name").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('张三')[1].get('name').length")
chamada antiga: assertEquals("张三", personCollection.get("张三")[1].get("name")[0])
nova chamada: assertEquals("张三", personCollection.get("张三")[1].get("name")[0], "Era esperado valores iguais, mas  '张三' é diferente de " + " personCollection.get('张三')[1].get('name')[0]")
chamada antiga: assertEquals("张三一", personCollection.get("张三")[1].get("name")[1])
nova chamada: assertEquals("张三一", personCollection.get("张三")[1].get("name")[1], "Era esperado valores iguais, mas  '张三一' é diferente de " + " personCollection.get('张三')[1].get('name')[1]")
chamada antiga: assertEquals(2, personCollection.get("李四").length)
nova chamada: assertEquals(2, personCollection.get("李四").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四').length")
chamada antiga: assertEquals(2, personCollection.get("李四")[0].get("idNo").length)
nova chamada: assertEquals(2, personCollection.get("李四")[0].get("idNo").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四')[0].get('idNo').length")
chamada antiga: assertEquals("223", personCollection.get("李四")[0].get("idNo")[0])
nova chamada: assertEquals("223", personCollection.get("李四")[0].get("idNo")[0], "Era esperado valores iguais, mas  '223' é diferente de " + " personCollection.get('李四')[0].get('idNo')[0]")
chamada antiga: assertEquals("223y", personCollection.get("李四")[0].get("idNo")[1])
nova chamada: assertEquals("223y", personCollection.get("李四")[0].get("idNo")[1], "Era esperado valores iguais, mas  '223y' é diferente de " + " personCollection.get('李四')[0].get('idNo')[1]")
chamada antiga: assertEquals(2, personCollection.get("李四")[0].get("name").length)
nova chamada: assertEquals(2, personCollection.get("李四")[0].get("name").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四')[0].get('name').length")
chamada antiga: assertEquals("李四", personCollection.get("李四")[0].get("name")[0])
nova chamada: assertEquals("李四", personCollection.get("李四")[0].get("name")[0], "Era esperado valores iguais, mas  '李四' é diferente de " + " personCollection.get('李四')[0].get('name')[0]")
chamada antiga: assertEquals("李小四", personCollection.get("李四")[0].get("name")[1])
nova chamada: assertEquals("李小四", personCollection.get("李四")[0].get("name")[1], "Era esperado valores iguais, mas  '李小四' é diferente de " + " personCollection.get('李四')[0].get('name')[1]")
chamada antiga: assertEquals(2, personCollection.get("李四")[1].get("idNo").length)
nova chamada: assertEquals(2, personCollection.get("李四")[1].get("idNo").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四')[1].get('idNo').length")
chamada antiga: assertEquals("224", personCollection.get("李四")[1].get("idNo")[0])
nova chamada: assertEquals("224", personCollection.get("李四")[1].get("idNo")[0], "Era esperado valores iguais, mas  '224' é diferente de " + " personCollection.get('李四')[1].get('idNo')[0]")
chamada antiga: assertEquals("224y", personCollection.get("李四")[1].get("idNo")[1])
nova chamada: assertEquals("224y", personCollection.get("李四")[1].get("idNo")[1], "Era esperado valores iguais, mas  '224y' é diferente de " + " personCollection.get('李四')[1].get('idNo')[1]")
chamada antiga: assertEquals(2, personCollection.get("李四")[1].get("name").length)
nova chamada: assertEquals(2, personCollection.get("李四")[1].get("name").length, "Era esperado valores iguais, mas  2 é diferente de " + " personCollection.get('李四')[1].get('name').length")
chamada antiga: assertEquals("李四", personCollection.get("李四")[1].get("name")[0])
nova chamada: assertEquals("李四", personCollection.get("李四")[1].get("name")[0], "Era esperado valores iguais, mas  '李四' é diferente de " + " personCollection.get('李四')[1].get('name')[0]")
chamada antiga: assertEquals("李小四", personCollection.get("李四")[1].get("name")[1])
nova chamada: assertEquals("李小四", personCollection.get("李四")[1].get("name")[1], "Era esperado valores iguais, mas  '李小四' é diferente de " + " personCollection.get('李四')[1].get('name')[1]")
chamada antiga: assertNotNull(json2)
nova chamada: assertNotNull(json2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, m.id)
nova chamada: assertEquals(3, m.id, "Era esperado valores iguais, mas  3 é diferente de " + " m.id")
chamada antiga: assertEquals(42356, JSONPath.eval(root, jsonpath))
nova chamada: assertEquals(42356, JSONPath.eval(root, jsonpath), "Era esperado valores iguais, mas  42356 é diferente de " + result8650 + " <JSONPath.eval(root, jsonpath)>")
chamada antiga: assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString())
nova chamada: assertEquals("{\"dependencies\":[{\"values\":[]}]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'dependencies\':[{\'values\':[]}]}' é diferente de " + result8651 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\"dependencies\":[]}", jsonObject.toString())
nova chamada: assertEquals("{\"dependencies\":[]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'dependencies\':[]}' é diferente de " + result8652 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\"values\":[]}", jsonObject.toString())
nova chamada: assertEquals("{\"values\":[]}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'values\':[]}' é diferente de " + result8653 + " <jsonObject.toString()>")
chamada antiga: assertTrue(JSONPath.remove(jsonObject, "$.values[?(@.name=='Demo')]"))
nova chamada: assertTrue(JSONPath.remove(jsonObject, "$.values[?(@.name=='Demo')]"), "Era esperado verdadeiro, mas " + result8654 + " <JSONPath.remove(jsonObject, '$.values[?(@.name=='Demo')]')> é falso")
chamada antiga: assertEquals("{}", jsonObject.toString())
nova chamada: assertEquals("{}", jsonObject.toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result8655 + " <jsonObject.toString()>")
chamada antiga: assertEquals("{\"id\":1001,\"name\":\"wenshao\"}", JSON.toJSONString(b))
nova chamada: assertEquals("{\"id\":1001,\"name\":\"wenshao\"}", JSON.toJSONString(b), "Era esperado valores iguais, mas  '{\'id\':1001,\'name\':\'wenshao\'}' é diferente de " + result8656 + " <JSON.toJSONString(b)>")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertEquals("{\"id\":123,\"self\":{\"$ref\":\"@\"}}", text)
nova chamada: assertEquals("{\"id\":123,\"self\":{\"$ref\":\"@\"}}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'self\':{\'$ref\':\'@\'}}' é diferente de " + " text")
chamada antiga: assertEquals(Long.toString(gregorianCalendar.getTimeInMillis()), text)
nova chamada: assertEquals(Long.toString(gregorianCalendar.getTimeInMillis()), text, "Era esperado valores iguais, mas " + result8657 + " <Long.toString(gregorianCalendar.getTimeInMillis())> é diferente de " + " text")
chamada antiga: assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), calendar1.toGregorianCalendar().getTimeInMillis())
nova chamada: assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), calendar1.toGregorianCalendar().getTimeInMillis(), "Era esperado valores iguais, mas " + result8658 + " <calendar.toGregorianCalendar().getTimeInMillis()> é diferente de " + result8659 + " <calendar1.toGregorianCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), model.calendar.toGregorianCalendar().getTimeInMillis())
nova chamada: assertEquals(calendar.toGregorianCalendar().getTimeInMillis(), model.calendar.toGregorianCalendar().getTimeInMillis(), "Era esperado valores iguais, mas " + result8660 + " <calendar.toGregorianCalendar().getTimeInMillis()> é diferente de " + result8661 + " <model.calendar.toGregorianCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(testEntity))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(testEntity), "Era esperado valores iguais, mas  jsonStr é diferente de " + result8662 + " <JSON.toJSONString(testEntity)>")
chamada antiga: assertEquals("{\"array\":\"AAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\"limit\":4,\"position\":0}", result)
nova chamada: assertEquals("{\"array\":\"AAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\"limit\":4,\"position\":0}", result, "Era esperado valores iguais, mas  '{\'array\':\'AAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\',\'limit\':4,\'position\':0}' é diferente de " + " result")
chamada antiga: assertEquals(buff.capacity(), buf1.capacity())
nova chamada: assertEquals(buff.capacity(), buf1.capacity(), "Era esperado valores iguais, mas " + result8663 + " <buff.capacity()> é diferente de " + result8664 + " <buf1.capacity()>")
chamada antiga: assertEquals(buff.limit(), buf1.limit())
nova chamada: assertEquals(buff.limit(), buf1.limit(), "Era esperado valores iguais, mas " + result8665 + " <buff.limit()> é diferente de " + result8666 + " <buf1.limit()>")
chamada antiga: assertEquals(buff.position(), buf1.position())
nova chamada: assertEquals(buff.position(), buf1.position(), "Era esperado valores iguais, mas " + result8667 + " <buff.position()> é diferente de " + result8668 + " <buf1.position()>")
chamada antiga: assertEquals(expected, JSON.toJSONString(new Pojo(), asmConfig, serializerFeatures))
nova chamada: assertEquals(expected, JSON.toJSONString(new Pojo(), asmConfig, serializerFeatures), "Era esperado valores iguais, mas  expected é diferente de " + result8669 + " <JSON.toJSONString(new Pojo(), asmConfig, serializerFeatures)>")
chamada antiga: assertEquals(expected, JSON.toJSONString(new Pojo2(), asmConfig, serializerFeatures))
nova chamada: assertEquals(expected, JSON.toJSONString(new Pojo2(), asmConfig, serializerFeatures), "Era esperado valores iguais, mas  expected é diferente de " + result8670 + " <JSON.toJSONString(new Pojo2(), asmConfig, serializerFeatures)>")
chamada antiga: assertEquals(expected, JSON.toJSONString(new Pojo(), noasmConfig, serializerFeatures))
nova chamada: assertEquals(expected, JSON.toJSONString(new Pojo(), noasmConfig, serializerFeatures), "Era esperado valores iguais, mas  expected é diferente de " + result8671 + " <JSON.toJSONString(new Pojo(), noasmConfig, serializerFeatures)>")
chamada antiga: assertEquals(expected, JSON.toJSONString(new Pojo2(), noasmConfig, serializerFeatures))
nova chamada: assertEquals(expected, JSON.toJSONString(new Pojo2(), noasmConfig, serializerFeatures), "Era esperado valores iguais, mas  expected é diferente de " + result8672 + " <JSON.toJSONString(new Pojo2(), noasmConfig, serializerFeatures)>")
chamada antiga: assertEquals("{\"BarCount\":0,\"Flag\":false,\"List\":[],\"Name\":\"\"}", json)
nova chamada: assertEquals("{\"BarCount\":0,\"Flag\":false,\"List\":[],\"Name\":\"\"}", json, "Era esperado valores iguais, mas  '{\'BarCount\':0,\'Flag\':false,\'List\':[],\'Name\':\'\'}' é diferente de " + " json")
chamada antiga: assertEquals("[0,false,[],\"\"]", json)
nova chamada: assertEquals("[0,false,[],\"\"]", json, "Era esperado valores iguais, mas  '[0,false,[],\'\']' é diferente de " + " json")
chamada antiga: assertEquals(json, JSON.toJSONString(result))
nova chamada: assertEquals(json, JSON.toJSONString(result), "Era esperado valores iguais, mas  json é diferente de " + result8673 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals(json, JSON.toJSONString(result))
nova chamada: assertEquals(json, JSON.toJSONString(result), "Era esperado valores iguais, mas  json é diferente de " + result8674 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals(json, JSON.toJSONString(result))
nova chamada: assertEquals(json, JSON.toJSONString(result), "Era esperado valores iguais, mas  json é diferente de " + result8675 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals(json, JSON.toJSONString(result))
nova chamada: assertEquals(json, JSON.toJSONString(result), "Era esperado valores iguais, mas  json é diferente de " + result8676 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[1,[\"aaa\",\"bbb\",\"ccc\"]]", JSON.toJSONString(result))
nova chamada: assertEquals("[1,[\"aaa\",\"bbb\",\"ccc\"]]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[1,[\'aaa\',\'bbb\',\'ccc\']]' é diferente de " + result8677 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals("[1,\"YWJj\"]", JSON.toJSONString(result))
nova chamada: assertEquals("[1,\"YWJj\"]", JSON.toJSONString(result), "Era esperado valores iguais, mas  '[1,\'YWJj\']' é diferente de " + result8678 + " <JSON.toJSONString(result)>")
chamada antiga: assertEquals(date2.getDate(), date.getDate())
nova chamada: assertEquals(date2.getDate(), date.getDate(), "Era esperado valores iguais, mas " + result8679 + " <date2.getDate()> é diferente de " + result8680 + " <date.getDate()>")
chamada antiga: assertEquals(date2.getDay(), date.getDay())
nova chamada: assertEquals(date2.getDay(), date.getDay(), "Era esperado valores iguais, mas " + result8681 + " <date2.getDay()> é diferente de " + result8682 + " <date.getDay()>")
chamada antiga: assertEquals(date2.getHours(), date.getHours())
nova chamada: assertEquals(date2.getHours(), date.getHours(), "Era esperado valores iguais, mas " + result8683 + " <date2.getHours()> é diferente de " + result8684 + " <date.getHours()>")
chamada antiga: assertEquals(date2.getMinutes(), date.getMinutes())
nova chamada: assertEquals(date2.getMinutes(), date.getMinutes(), "Era esperado valores iguais, mas " + result8685 + " <date2.getMinutes()> é diferente de " + result8686 + " <date.getMinutes()>")
chamada antiga: assertEquals(date2.getMonth(), date.getMonth())
nova chamada: assertEquals(date2.getMonth(), date.getMonth(), "Era esperado valores iguais, mas " + result8687 + " <date2.getMonth()> é diferente de " + result8688 + " <date.getMonth()>")
chamada antiga: assertEquals(date2.getSeconds(), date.getSeconds())
nova chamada: assertEquals(date2.getSeconds(), date.getSeconds(), "Era esperado valores iguais, mas " + result8689 + " <date2.getSeconds()> é diferente de " + result8690 + " <date.getSeconds()>")
chamada antiga: assertEquals(date2.getTime(), date.getTime())
nova chamada: assertEquals(date2.getTime(), date.getTime(), "Era esperado valores iguais, mas " + result8691 + " <date2.getTime()> é diferente de " + result8692 + " <date.getTime()>")
chamada antiga: assertEquals(date2.getTimezoneOffset(), date.getTimezoneOffset())
nova chamada: assertEquals(date2.getTimezoneOffset(), date.getTimezoneOffset(), "Era esperado valores iguais, mas " + result8693 + " <date2.getTimezoneOffset()> é diferente de " + result8694 + " <date.getTimezoneOffset()>")
chamada antiga: assertEquals(date2.getYear(), date.getYear())
nova chamada: assertEquals(date2.getYear(), date.getYear(), "Era esperado valores iguais, mas " + result8695 + " <date2.getYear()> é diferente de " + result8696 + " <date.getYear()>")
chamada antiga: assertEquals(date.getDate(), date.getDate())
nova chamada: assertEquals(date.getDate(), date.getDate(), "Era esperado valores iguais, mas " + result8697 + " <date.getDate()> é diferente de " + result8698 + " <date.getDate()>")
chamada antiga: assertEquals(date.getDay(), date.getDay())
nova chamada: assertEquals(date.getDay(), date.getDay(), "Era esperado valores iguais, mas " + result8699 + " <date.getDay()> é diferente de " + result8700 + " <date.getDay()>")
chamada antiga: assertEquals(date.getHours(), date.getHours())
nova chamada: assertEquals(date.getHours(), date.getHours(), "Era esperado valores iguais, mas " + result8701 + " <date.getHours()> é diferente de " + result8702 + " <date.getHours()>")
chamada antiga: assertEquals(date.getMinutes(), date.getMinutes())
nova chamada: assertEquals(date.getMinutes(), date.getMinutes(), "Era esperado valores iguais, mas " + result8703 + " <date.getMinutes()> é diferente de " + result8704 + " <date.getMinutes()>")
chamada antiga: assertEquals(date.getMonth(), date.getMonth())
nova chamada: assertEquals(date.getMonth(), date.getMonth(), "Era esperado valores iguais, mas " + result8705 + " <date.getMonth()> é diferente de " + result8706 + " <date.getMonth()>")
chamada antiga: assertEquals(date.getSeconds(), date.getSeconds())
nova chamada: assertEquals(date.getSeconds(), date.getSeconds(), "Era esperado valores iguais, mas " + result8707 + " <date.getSeconds()> é diferente de " + result8708 + " <date.getSeconds()>")
chamada antiga: assertEquals(date.getTime(), date.getTime())
nova chamada: assertEquals(date.getTime(), date.getTime(), "Era esperado valores iguais, mas " + result8709 + " <date.getTime()> é diferente de " + result8710 + " <date.getTime()>")
chamada antiga: assertEquals(date.getTimezoneOffset(), date.getTimezoneOffset())
nova chamada: assertEquals(date.getTimezoneOffset(), date.getTimezoneOffset(), "Era esperado valores iguais, mas " + result8711 + " <date.getTimezoneOffset()> é diferente de " + result8712 + " <date.getTimezoneOffset()>")
chamada antiga: assertEquals(date.getYear(), date.getYear())
nova chamada: assertEquals(date.getYear(), date.getYear(), "Era esperado valores iguais, mas " + result8713 + " <date.getYear()> é diferente de " + result8714 + " <date.getYear()>")
chamada antiga: assertEquals("{\"age\":23,'name':'Ariston'}", json)
nova chamada: assertEquals("{\"age\":23,'name':'Ariston'}", json, "Era esperado valores iguais, mas  '{\'age\':23,'name':'Ariston'}' é diferente de " + " json")
chamada antiga: assertEquals("{\"age\":23,'name':'Ariston'}", json)
nova chamada: assertEquals("{\"age\":23,'name':'Ariston'}", json, "Era esperado valores iguais, mas  '{\'age\':23,'name':'Ariston'}' é diferente de " + " json")
chamada antiga: assertTrue(json.indexOf("$ref") >= 0)
nova chamada: assertTrue(json.indexOf("$ref") >= 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.value)
nova chamada: assertNull(model.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.value)
nova chamada: assertNull(model.value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text))
nova chamada: assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text))
nova chamada: assertTrue("{\"id\":1111,\"name\":\"name11\"}".equals(text) || "{\"name\":\"name11\",\"id\":1111}".equals(text), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSONArray.class, obj.getClass())
nova chamada: assertEquals(JSONArray.class, obj.getClass(), "Era esperado valores iguais, mas  JSONArray.class é diferente de " + result8715 + " <obj.getClass()>")
chamada antiga: assertEquals(array, obj)
nova chamada: assertEquals(array, obj, "Era esperado valores iguais, mas  array é diferente de " + " obj")
chamada antiga: assertEquals("[{\"key1\":[\"item\"]}]", text)
nova chamada: assertEquals("[{\"key1\":[\"item\"]}]", text, "Era esperado valores iguais, mas  '[{\'key1\':[\'item\']}]' é diferente de " + " text")
chamada antiga: assertTrue(result.get(0) instanceof Map)
nova chamada: assertTrue(result.get(0) instanceof Map, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(result.get(0).get("key1").get(0) instanceof String)
nova chamada: assertTrue(result.get(0).get("key1").get(0) instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
nova chamada: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString(), "Era esperado valores iguais, mas  '{\'id1\':101,\'id2\':102,\'id3\':103}' é diferente de " + result8716 + " <JSON.toJSON(bean).toString()>")
chamada antiga: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString())
nova chamada: assertEquals("{\"id1\":101,\"id2\":102,\"id3\":103}", JSON.toJSON(bean).toString(), "Era esperado valores iguais, mas  '{\'id1\':101,\'id2\':102,\'id3\':103}' é diferente de " + result8717 + " <JSON.toJSON(bean).toString()>")
chamada antiga: assertEquals("{\"any\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><WeightMajor measurementSystem=\\\"English\\\" unit=\\\"lbs\\\">0</WeightMajor>\"]}", JSON.toJSONString(con))
nova chamada: assertEquals("{\"any\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><WeightMajor measurementSystem=\\\"English\\\" unit=\\\"lbs\\\">0</WeightMajor>\"]}", JSON.toJSONString(con), "Era esperado valores iguais, mas  '{\'any\':[\'?xml version=\\\'1.0\\\' encoding=\\\'UTF-8\\\'?WeightMajor measurementSystem=\\\'English\\\' unit=\\\'lbs\\\'0/WeightMajor\']}' é diferente de " + result8718 + " <JSON.toJSONString(con)>")
chamada antiga: assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m))
nova chamada: assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m), "Era esperado valores iguais, mas  '{\'time\':\'星期四 三月 22 16:58:37 CST 2018\'}' é diferente de " + result8719 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m))
nova chamada: assertEquals("{\"time\":\"星期四 三月 22 16:58:37 CST 2018\"}", JSON.toJSONString(m), "Era esperado valores iguais, mas  '{\'time\':\'星期四 三月 22 16:58:37 CST 2018\'}' é diferente de " + result8720 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals(df.parse(strVal), date)
nova chamada: assertEquals(df.parse(strVal), date, "Era esperado valores iguais, mas " + result8721 + " <df.parse(strVal)> é diferente de " + " date")
chamada antiga: assertEquals(dt.toJSON(), dt1.toJSON())
nova chamada: assertEquals(dt.toJSON(), dt1.toJSON(), "Era esperado valores iguais, mas " + result8722 + " <dt.toJSON()> é diferente de " + result8723 + " <dt1.toJSON()>")
chamada antiga: assertEquals(dt.toJSON(), dt2.toJSON())
nova chamada: assertEquals(dt.toJSON(), dt2.toJSON(), "Era esperado valores iguais, mas " + result8724 + " <dt.toJSON()> é diferente de " + result8725 + " <dt2.toJSON()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8726 + " <user1.getValue()> é diferente de " + result8727 + " <user.getValue()>")
chamada antiga: assertEquals("79104776-6CA7-4E41-948F-4D2ECD06502A", user.getValue().toString().toUpperCase())
nova chamada: assertEquals("79104776-6CA7-4E41-948F-4D2ECD06502A", user.getValue().toString().toUpperCase(), "Era esperado valores iguais, mas  '79104776-6CA7-4E41-948F-4D2ECD06502A' é diferente de " + result8728 + " <user.getValue().toString().toUpperCase()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8729 + " <user1.getValue()> é diferente de " + result8730 + " <user.getValue()>")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result8731 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getDate("value"))
nova chamada: assertNull(obj.getDate("value"), "Era esperado nulo, mas " + result8732 + " <obj.getDate('value')> não é nulo")
chamada antiga: assertEquals(obj1.toString(), obj2.toString())
nova chamada: assertEquals(obj1.toString(), obj2.toString(), "Era esperado valores iguais, mas " + result8733 + " <obj1.toString()> é diferente de " + result8734 + " <obj2.toString()>")
chamada antiga: assertTrue(JSONValidator.from(json).validate())
nova chamada: assertTrue(JSONValidator.from(json).validate(), "Era esperado verdadeiro, mas " + result8735 + " <JSONValidator.from(json).validate()> é falso")
chamada antiga: assertTrue(JSON.isValid(json))
nova chamada: assertTrue(JSON.isValid(json), "Era esperado verdadeiro, mas " + result8736 + " <JSON.isValid(json)> é falso")
chamada antiga: Assertions.assertEquals(jsonStr, result)
nova chamada: assertEquals(jsonStr, result, "Era esperado valores iguais, mas  jsonStr é diferente de " + " result")
chamada antiga: Assertions.assertEquals(jsonStr, result)
nova chamada: assertEquals(jsonStr, result, "Era esperado valores iguais, mas  jsonStr é diferente de " + " result")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8737 + " <v1.getValue()> é diferente de " + result8738 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":\"\"}", text)
nova chamada: assertEquals("{\"value\":\"\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " text")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8739 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("", vo.getValue().toString())
nova chamada: assertEquals("", vo.getValue().toString(), "Era esperado valores iguais, mas  '' é diferente de " + result8740 + " <vo.getValue().toString()>")
chamada antiga: assertNull(vo.getValue())
nova chamada: assertNull(vo.getValue(), "Era esperado nulo, mas " + result8741 + " <vo.getValue()> não é nulo")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8742 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("true", vo.getValue().toString())
nova chamada: assertEquals("true", vo.getValue().toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result8743 + " <vo.getValue().toString()>")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8744 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("123", vo.getValue().toString())
nova chamada: assertEquals("123", vo.getValue().toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result8745 + " <vo.getValue().toString()>")
chamada antiga: assertEquals("{\"name\":\"a\\\\bc\"}", text)
nova chamada: assertEquals("{\"name\":\"a\\\\bc\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'a\\\\bc\'}' é diferente de " + " text")
chamada antiga: assertEquals(model.name, model2.name)
nova chamada: assertEquals(model.name, model2.name, "Era esperado valores iguais, mas  model.name é diferente de " + " model2.name")
chamada antiga: assertEquals("{\"name\":\"a\\\\bc\\\"\"}", text)
nova chamada: assertEquals("{\"name\":\"a\\\\bc\\\"\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'a\\\\bc\\\'\'}' é diferente de " + " text")
chamada antiga: assertEquals(model.name, model2.name)
nova chamada: assertEquals(model.name, model2.name, "Era esperado valores iguais, mas  model.name é diferente de " + " model2.name")
chamada antiga: assertEquals("{\"User.Id\":123}", string)
nova chamada: assertEquals("{\"User.Id\":123}", string, "Era esperado valores iguais, mas  '{\'User.Id\':123}' é diferente de " + " string")
chamada antiga: assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'val\':1.0}' é diferente de " + result8746 + " <JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"val\":1.0}", JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'val\':1.0}' é diferente de " + result8747 + " <JSON.toJSONString(m, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text)
nova chamada: assertEquals("{\"id\":123,\"info\":\"fofo\",\"name\":\"wenshao\"}", text, "Era esperado valores iguais, mas  '{\'id\':123,\'info\':\'fofo\',\'name\':\'wenshao\'}' é diferente de " + " text")
chamada antiga: assertEquals("\"2018-10-10T00:00:00+08:00\"", JSON.toJSONString(LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat))
nova chamada: assertEquals("\"2018-10-10T00:00:00+08:00\"", JSON.toJSONString(LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat), "Era esperado valores iguais, mas  '\'2018-10-10T00:00:00+08:00\'' é diferente de " + result8748 + " <JSON.toJSONString(LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat)>")
chamada antiga: assertEquals("\"2018-10-10T00:00:40.788+08:00\"", json)
nova chamada: assertEquals("\"2018-10-10T00:00:40.788+08:00\"", json, "Era esperado valores iguais, mas  '\'2018-10-10T00:00:40.788+08:00\'' é diferente de " + " json")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result8749 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals(str, JSON.toJSONString(m))
nova chamada: assertEquals(str, JSON.toJSONString(m), "Era esperado valores iguais, mas  str é diferente de " + result8750 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals(expectStr, JSON.toJSONString(m))
nova chamada: assertEquals(expectStr, JSON.toJSONString(m), "Era esperado valores iguais, mas  expectStr é diferente de " + result8751 + " <JSON.toJSONString(m)>")
chamada antiga: assertEquals("com.alibaba.fastjson", new String(m.data))
nova chamada: assertEquals("com.alibaba.fastjson", new String(m.data), "Era esperado valores iguais, mas  'com.alibaba.fastjson' é diferente de " + " new String(m.data)")
chamada antiga: assertEquals(123, vo.getId())
nova chamada: assertEquals(123, vo.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result8752 + " <vo.getId()>")
chamada antiga: assertEquals("int", JSONToken.name(JSONToken.LITERAL_INT))
nova chamada: assertEquals("int", JSONToken.name(JSONToken.LITERAL_INT), "Era esperado valores iguais, mas  'int' é diferente de " + result8753 + " <JSONToken.name(JSONToken.LITERAL_INT)>")
chamada antiga: assertEquals("float", JSONToken.name(JSONToken.LITERAL_FLOAT))
nova chamada: assertEquals("float", JSONToken.name(JSONToken.LITERAL_FLOAT), "Era esperado valores iguais, mas  'float' é diferente de " + result8754 + " <JSONToken.name(JSONToken.LITERAL_FLOAT)>")
chamada antiga: assertEquals("string", JSONToken.name(JSONToken.LITERAL_STRING))
nova chamada: assertEquals("string", JSONToken.name(JSONToken.LITERAL_STRING), "Era esperado valores iguais, mas  'string' é diferente de " + result8755 + " <JSONToken.name(JSONToken.LITERAL_STRING)>")
chamada antiga: assertEquals("iso8601", JSONToken.name(JSONToken.LITERAL_ISO8601_DATE))
nova chamada: assertEquals("iso8601", JSONToken.name(JSONToken.LITERAL_ISO8601_DATE), "Era esperado valores iguais, mas  'iso8601' é diferente de " + result8756 + " <JSONToken.name(JSONToken.LITERAL_ISO8601_DATE)>")
chamada antiga: assertEquals("true", JSONToken.name(JSONToken.TRUE))
nova chamada: assertEquals("true", JSONToken.name(JSONToken.TRUE), "Era esperado valores iguais, mas  'true' é diferente de " + result8757 + " <JSONToken.name(JSONToken.TRUE)>")
chamada antiga: assertEquals("false", JSONToken.name(JSONToken.FALSE))
nova chamada: assertEquals("false", JSONToken.name(JSONToken.FALSE), "Era esperado valores iguais, mas  'false' é diferente de " + result8758 + " <JSONToken.name(JSONToken.FALSE)>")
chamada antiga: assertEquals("null", JSONToken.name(JSONToken.NULL))
nova chamada: assertEquals("null", JSONToken.name(JSONToken.NULL), "Era esperado valores iguais, mas  'null' é diferente de " + result8759 + " <JSONToken.name(JSONToken.NULL)>")
chamada antiga: assertEquals("new", JSONToken.name(JSONToken.NEW))
nova chamada: assertEquals("new", JSONToken.name(JSONToken.NEW), "Era esperado valores iguais, mas  'new' é diferente de " + result8760 + " <JSONToken.name(JSONToken.NEW)>")
chamada antiga: assertEquals("(", JSONToken.name(JSONToken.LPAREN))
nova chamada: assertEquals("(", JSONToken.name(JSONToken.LPAREN), "Era esperado valores iguais, mas  '(' é diferente de " + result8761 + " <JSONToken.name(JSONToken.LPAREN)>")
chamada antiga: assertEquals(")", JSONToken.name(JSONToken.RPAREN))
nova chamada: assertEquals(")", JSONToken.name(JSONToken.RPAREN), "Era esperado valores iguais, mas  ')' é diferente de " + result8762 + " <JSONToken.name(JSONToken.RPAREN)>")
chamada antiga: assertEquals("{", JSONToken.name(JSONToken.LBRACE))
nova chamada: assertEquals("{", JSONToken.name(JSONToken.LBRACE), "Era esperado valores iguais, mas  '{' é diferente de " + result8763 + " <JSONToken.name(JSONToken.LBRACE)>")
chamada antiga: assertEquals("}", JSONToken.name(JSONToken.RBRACE))
nova chamada: assertEquals("}", JSONToken.name(JSONToken.RBRACE), "Era esperado valores iguais, mas  '}' é diferente de " + result8764 + " <JSONToken.name(JSONToken.RBRACE)>")
chamada antiga: assertEquals("[", JSONToken.name(JSONToken.LBRACKET))
nova chamada: assertEquals("[", JSONToken.name(JSONToken.LBRACKET), "Era esperado valores iguais, mas  '[' é diferente de " + result8765 + " <JSONToken.name(JSONToken.LBRACKET)>")
chamada antiga: assertEquals("]", JSONToken.name(JSONToken.RBRACKET))
nova chamada: assertEquals("]", JSONToken.name(JSONToken.RBRACKET), "Era esperado valores iguais, mas  ']' é diferente de " + result8766 + " <JSONToken.name(JSONToken.RBRACKET)>")
chamada antiga: assertEquals(",", JSONToken.name(JSONToken.COMMA))
nova chamada: assertEquals(",", JSONToken.name(JSONToken.COMMA), "Era esperado valores iguais, mas  ',' é diferente de " + result8767 + " <JSONToken.name(JSONToken.COMMA)>")
chamada antiga: assertEquals(":", JSONToken.name(JSONToken.COLON))
nova chamada: assertEquals(":", JSONToken.name(JSONToken.COLON), "Era esperado valores iguais, mas  ':' é diferente de " + result8768 + " <JSONToken.name(JSONToken.COLON)>")
chamada antiga: assertEquals("ident", JSONToken.name(JSONToken.IDENTIFIER))
nova chamada: assertEquals("ident", JSONToken.name(JSONToken.IDENTIFIER), "Era esperado valores iguais, mas  'ident' é diferente de " + result8769 + " <JSONToken.name(JSONToken.IDENTIFIER)>")
chamada antiga: assertEquals("fieldName", JSONToken.name(JSONToken.FIELD_NAME))
nova chamada: assertEquals("fieldName", JSONToken.name(JSONToken.FIELD_NAME), "Era esperado valores iguais, mas  'fieldName' é diferente de " + result8770 + " <JSONToken.name(JSONToken.FIELD_NAME)>")
chamada antiga: assertEquals("EOF", JSONToken.name(JSONToken.EOF))
nova chamada: assertEquals("EOF", JSONToken.name(JSONToken.EOF), "Era esperado valores iguais, mas  'EOF' é diferente de " + result8771 + " <JSONToken.name(JSONToken.EOF)>")
chamada antiga: assertEquals("Unknown", JSONToken.name(Integer.MAX_VALUE))
nova chamada: assertEquals("Unknown", JSONToken.name(Integer.MAX_VALUE), "Era esperado valores iguais, mas  'Unknown' é diferente de " + result8772 + " <JSONToken.name(Integer.MAX_VALUE)>")
chamada antiga: assertEquals("Set", JSONToken.name(JSONToken.SET))
nova chamada: assertEquals("Set", JSONToken.name(JSONToken.SET), "Era esperado valores iguais, mas  'Set' é diferente de " + result8773 + " <JSONToken.name(JSONToken.SET)>")
chamada antiga: assertEquals("TreeSet", JSONToken.name(JSONToken.TREE_SET))
nova chamada: assertEquals("TreeSet", JSONToken.name(JSONToken.TREE_SET), "Era esperado valores iguais, mas  'TreeSet' é diferente de " + result8774 + " <JSONToken.name(JSONToken.TREE_SET)>")
chamada antiga: assertEquals("undefined", JSONToken.name(JSONToken.UNDEFINED))
nova chamada: assertEquals("undefined", JSONToken.name(JSONToken.UNDEFINED), "Era esperado valores iguais, mas  'undefined' é diferente de " + result8775 + " <JSONToken.name(JSONToken.UNDEFINED)>")
chamada antiga: assertEquals("error", JSONToken.name(JSONToken.ERROR))
nova chamada: assertEquals("error", JSONToken.name(JSONToken.ERROR), "Era esperado valores iguais, mas  'error' é diferente de " + result8776 + " <JSONToken.name(JSONToken.ERROR)>")
chamada antiga: assertEquals(";", JSONToken.name(JSONToken.SEMI))
nova chamada: assertEquals(";", JSONToken.name(JSONToken.SEMI), "Era esperado valores iguais, mas  ';' é diferente de " + result8777 + " <JSONToken.name(JSONToken.SEMI)>")
chamada antiga: assertEquals(".", JSONToken.name(JSONToken.DOT))
nova chamada: assertEquals(".", JSONToken.name(JSONToken.DOT), "Era esperado valores iguais, mas  '.' é diferente de " + result8778 + " <JSONToken.name(JSONToken.DOT)>")
chamada antiga: assertEquals("hex", JSONToken.name(JSONToken.HEX))
nova chamada: assertEquals("hex", JSONToken.name(JSONToken.HEX), "Era esperado valores iguais, mas  'hex' é diferente de " + result8779 + " <JSONToken.name(JSONToken.HEX)>")
chamada antiga: assertNotNull(array)
nova chamada: assertNotNull(array, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, CollectionCodec.instance.getFeatures())
nova chamada: assertEquals(0, CollectionCodec.instance.getFeatures(), "Era esperado valores iguais, mas  0 é diferente de " + result8780 + " <CollectionCodec.instance.getFeatures()>")
chamada antiga: assertEquals("[]", serializer.out.toString())
nova chamada: assertEquals("[]", serializer.out.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result8781 + " <serializer.out.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result8782 + " <writer.toString()>")
chamada antiga: assertEquals("\"abc\"", writer.toString())
nova chamada: assertEquals("\"abc\"", writer.toString(), "Era esperado valores iguais, mas  '\'abc\'' é diferente de " + result8783 + " <writer.toString()>")
chamada antiga: assertEquals("abc", writer.toString())
nova chamada: assertEquals("abc", writer.toString(), "Era esperado valores iguais, mas  'abc' é diferente de " + result8784 + " <writer.toString()>")
chamada antiga: assertEquals("a", writer.toString())
nova chamada: assertEquals("a", writer.toString(), "Era esperado valores iguais, mas  'a' é diferente de " + result8785 + " <writer.toString()>")
chamada antiga: assertEquals(",\"id\"", writer.toString())
nova chamada: assertEquals(",\"id\"", writer.toString(), "Era esperado valores iguais, mas  ',\'id\'' é diferente de " + result8786 + " <writer.toString()>")
chamada antiga: assertEquals(",\"id\"", new String(writer.toBytes(StandardCharsets.UTF_8)))
nova chamada: assertEquals(",\"id\"", new String(writer.toBytes(StandardCharsets.UTF_8)), "Era esperado valores iguais, mas  ',\'id\'' é diferente de " + " new String(writer.toBytes(StandardCharsets.UTF_8))")
chamada antiga: assertEquals(",\"id\"", new String(writer.toBytes("UTF8")))
nova chamada: assertEquals(",\"id\"", new String(writer.toBytes("UTF8")), "Era esperado valores iguais, mas  ',\'id\'' é diferente de " + " new String(writer.toBytes('UTF8'))")
chamada antiga: assertEquals(",\"id\"", out.toString())
nova chamada: assertEquals(",\"id\"", out.toString(), "Era esperado valores iguais, mas  ',\'id\'' é diferente de " + result8787 + " <out.toString()>")
chamada antiga: assertTrue(writer.getBeforeFilters().isEmpty())
nova chamada: assertTrue(writer.getBeforeFilters().isEmpty(), "Era esperado verdadeiro, mas " + result8788 + " <writer.getBeforeFilters().isEmpty()> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.BeanToArray))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.BeanToArray), "Era esperado verdadeiro, mas " + result8789 + " <writer.isEnabled(SerializerFeature.BeanToArray)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString), "Era esperado verdadeiro, mas " + result8790 + " <writer.isEnabled(SerializerFeature.WriteEnumUsingToString)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteMapNullValue))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteMapNullValue), "Era esperado verdadeiro, mas " + result8791 + " <writer.isEnabled(SerializerFeature.WriteMapNullValue)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingName))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingName), "Era esperado verdadeiro, mas " + result8792 + " <writer.isEnabled(SerializerFeature.WriteEnumUsingName)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNullListAsEmpty), "Era esperado verdadeiro, mas " + result8793 + " <writer.isEnabled(SerializerFeature.WriteNullListAsEmpty)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNullStringAsEmpty))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNullStringAsEmpty), "Era esperado verdadeiro, mas " + result8794 + " <writer.isEnabled(SerializerFeature.WriteNullStringAsEmpty)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNullNumberAsZero), "Era esperado verdadeiro, mas " + result8795 + " <writer.isEnabled(SerializerFeature.WriteNullNumberAsZero)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNullBooleanAsFalse))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNullBooleanAsFalse), "Era esperado verdadeiro, mas " + result8796 + " <writer.isEnabled(SerializerFeature.WriteNullBooleanAsFalse)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteClassName))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteClassName), "Era esperado verdadeiro, mas " + result8797 + " <writer.isEnabled(SerializerFeature.WriteClassName)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.NotWriteRootClassName))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.NotWriteRootClassName), "Era esperado verdadeiro, mas " + result8798 + " <writer.isEnabled(SerializerFeature.NotWriteRootClassName)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringKeyAsString))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringKeyAsString), "Era esperado verdadeiro, mas " + result8799 + " <writer.isEnabled(SerializerFeature.WriteNonStringKeyAsString)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.NotWriteDefaultValue))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.NotWriteDefaultValue), "Era esperado verdadeiro, mas " + result8800 + " <writer.isEnabled(SerializerFeature.NotWriteDefaultValue)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.BrowserCompatible))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.BrowserCompatible), "Era esperado verdadeiro, mas " + result8801 + " <writer.isEnabled(SerializerFeature.BrowserCompatible)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.IgnoreNonFieldGetter))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.IgnoreNonFieldGetter), "Era esperado verdadeiro, mas " + result8802 + " <writer.isEnabled(SerializerFeature.IgnoreNonFieldGetter)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringValueAsString))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteNonStringValueAsString), "Era esperado verdadeiro, mas " + result8803 + " <writer.isEnabled(SerializerFeature.WriteNonStringValueAsString)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.IgnoreErrorGetter))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.IgnoreErrorGetter), "Era esperado verdadeiro, mas " + result8804 + " <writer.isEnabled(SerializerFeature.IgnoreErrorGetter)> é falso")
chamada antiga: assertTrue(writer.isEnabled(SerializerFeature.WriteBigDecimalAsPlain))
nova chamada: assertTrue(writer.isEnabled(SerializerFeature.WriteBigDecimalAsPlain), "Era esperado verdadeiro, mas " + result8805 + " <writer.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)> é falso")
chamada antiga: Assert.assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{}", JSON.toJSONString(new A(), filter))
nova chamada: assertEquals("{}", JSON.toJSONString(new A(), filter), "Era esperado valores iguais, mas  '{}' é diferente de " + result8806 + " <JSON.toJSONString(new A(), filter)>")
chamada antiga: Assert.assertEquals("{\"id\":0}", text)
nova chamada: assertEquals("{\"id\":0}", text, "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"id\":3}", text)
nova chamada: assertEquals("{\"id\":3}", text, "Era esperado valores iguais, mas  '{\'id\':3}' é diferente de " + " text")
chamada antiga: assertEquals("\"local\"", JSON.toJSONString(address))
nova chamada: assertEquals("\"local\"", JSON.toJSONString(address), "Era esperado valores iguais, mas  '\'local\'' é diferente de " + result8807 + " <JSON.toJSONString(address)>")
chamada antiga: Assert.assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"id\":0.0}", text)
nova chamada: assertEquals("{\"id\":0.0}", text, "Era esperado valores iguais, mas  '{\'id\':0.0}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"id\":3}", text)
nova chamada: assertEquals("{\"id\":3}", text, "Era esperado valores iguais, mas  '{\'id\':3}' é diferente de " + " text")
chamada antiga: assertEquals("{\"id\":\"AAA\"}", text)
nova chamada: assertEquals("{\"id\":\"AAA\"}", text, "Era esperado valores iguais, mas  '{\'id\':\'AAA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"id\":\"AAA\"}", JSON.toJSONString(new A(), filter))
nova chamada: assertEquals("{\"id\":\"AAA\"}", JSON.toJSONString(new A(), filter), "Era esperado valores iguais, mas  '{\'id\':\'AAA\'}' é diferente de " + result8808 + " <JSON.toJSONString(new A(), filter)>")
chamada antiga: assertEquals("{\"id\":0,\"name\":\"AAA\"}", text)
nova chamada: assertEquals("{\"id\":0,\"name\":\"AAA\"}", text, "Era esperado valores iguais, mas  '{\'id\':0,\'name\':\'AAA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"name\":\"AAA\"}", text)
nova chamada: assertEquals("{\"name\":\"AAA\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'AAA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: assertEquals("{\"id\":111}", str)
nova chamada: assertEquals("{\"id\":111}", str, "Era esperado valores iguais, mas  '{\'id\':111}' é diferente de " + " str")
chamada antiga: assertEquals("[]", serializer.out.toString())
nova chamada: assertEquals("[]", serializer.out.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result8809 + " <serializer.out.toString()>")
chamada antiga: assertEquals("[]", serializer.out.toString())
nova chamada: assertEquals("[]", serializer.out.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result8810 + " <serializer.out.toString()>")
chamada antiga: Assert.assertEquals("{1001:0}", text)
nova chamada: assertEquals("{1001:0}", text, "Era esperado valores iguais, mas  '{1001:0}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"ID\":false}", text)
nova chamada: assertEquals("{\"ID\":false}", text, "Era esperado valores iguais, mas  '{\'ID\':false}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"ID\":true}", text)
nova chamada: assertEquals("{\"ID\":true}", text, "Era esperado valores iguais, mas  '{\'ID\':true}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"id\":false}", text)
nova chamada: assertEquals("{\"id\":false}", text, "Era esperado valores iguais, mas  '{\'id\':false}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"name\":\"chennp2008\"}", text)
nova chamada: assertEquals("{\"name\":\"chennp2008\"}", text, "Era esperado valores iguais, mas  '{\'name\':\'chennp2008\'}' é diferente de " + " text")
chamada antiga: Assert.assertEquals("{\"id\":3}", text)
nova chamada: assertEquals("{\"id\":3}", text, "Era esperado valores iguais, mas  '{\'id\':3}' é diferente de " + " text")
chamada antiga: assertEquals(0, SerializerFeature.of(new SerializerFeature[0]))
nova chamada: assertEquals(0, SerializerFeature.of(new SerializerFeature[0]), "Era esperado valores iguais, mas  0 é diferente de " + result8811 + " <SerializerFeature.of(new SerializerFeature[0])>")
chamada antiga: assertEquals(0, SerializerFeature.of(null))
nova chamada: assertEquals(0, SerializerFeature.of(null), "Era esperado valores iguais, mas  0 é diferente de " + result8812 + " <SerializerFeature.of(null)>")
chamada antiga: assertEquals(SerializerFeature.WriteClassName.mask, SerializerFeature.of(new SerializerFeature[] { SerializerFeature.WriteClassName }))
nova chamada: assertEquals(SerializerFeature.WriteClassName.mask, SerializerFeature.of(new SerializerFeature[] { SerializerFeature.WriteClassName }), "Era esperado valores iguais, mas  SerializerFeature.WriteClassName.mask é diferente de " + result8813 + " <SerializerFeature.of(new SerializerFeature[] { SerializerFeature.WriteClassName })>")
chamada antiga: assertTrue(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))
nova chamada: assertTrue(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName), "Era esperado verdadeiro, mas " + result8814 + " <SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)> é falso")
chamada antiga: assertTrue(SerializerFeature.isEnabled(features, 0, SerializerFeature.WriteClassName))
nova chamada: assertTrue(SerializerFeature.isEnabled(features, 0, SerializerFeature.WriteClassName), "Era esperado verdadeiro, mas " + result8815 + " <SerializerFeature.isEnabled(features, 0, SerializerFeature.WriteClassName)> é falso")
chamada antiga: assertEquals(123, serializer.getFieldValue(bean, "id"))
nova chamada: assertEquals(123, serializer.getFieldValue(bean, "id"), "Era esperado valores iguais, mas  123 é diferente de " + result8816 + " <serializer.getFieldValue(bean, 'id')>")
chamada antiga: assertNotNull(serializer.getObjectWriter(Bean.class))
nova chamada: assertNotNull(serializer.getObjectWriter(Bean.class), "Era esperado não nulo, mas " + result8817 + " <serializer.getObjectWriter(Bean.class)> é nulo")
chamada antiga: assertEquals("{\"id\":123}", out.toString())
nova chamada: assertEquals("{\"id\":123}", out.toString(), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result8818 + " <out.toString()>")
chamada antiga: assertEquals("\"101\"", str)
nova chamada: assertEquals("Era esperado valores iguais, mas  '\'101\'' é diferente de " + " str", "\"101\"", str)
chamada antiga: assertEquals(101, bean1.id)
nova chamada: assertEquals("Era esperado valores iguais, mas  101 é diferente de " + " bean1.id", 101, bean1.id)
chamada antiga: assertEquals("{\"v0\":100,\"v1\":101}", string)
nova chamada: assertEquals("{\"v0\":100,\"v1\":101}", string, "Era esperado valores iguais, mas  '{\'v0\':100,\'v1\':101}' é diferente de " + " string")
chamada antiga: assertEquals("{\"v2\":102,\"v3\":103}", string)
nova chamada: assertEquals("{\"v2\":102,\"v3\":103}", string, "Era esperado valores iguais, mas  '{\'v2\':102,\'v3\':103}' é diferente de " + " string")
chamada antiga: assertEquals("iso8601", context.getDateFormat())
nova chamada: assertEquals("iso8601", context.getDateFormat(), "Era esperado valores iguais, mas  'iso8601' é diferente de " + result8819 + " <context.getDateFormat()>")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls), "Era esperado verdadeiro, mas " + result8820 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty), "Era esperado verdadeiro, mas " + result8821 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty), "Era esperado verdadeiro, mas " + result8822 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero), "Era esperado verdadeiro, mas " + result8823 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse), "Era esperado verdadeiro, mas " + result8824 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible), "Era esperado verdadeiro, mas " + result8825 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName), "Era esperado verdadeiro, mas " + result8826 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString), "Era esperado verdadeiro, mas " + result8827 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString), "Era esperado verdadeiro, mas " + result8828 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName), "Era esperado verdadeiro, mas " + result8829 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter), "Era esperado verdadeiro, mas " + result8830 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray), "Era esperado verdadeiro, mas " + result8831 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray)> é falso")
chamada antiga: assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat())
nova chamada: assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat(), "Era esperado valores iguais, mas  JSON.DEFFAULT_DATE_FORMAT é diferente de " + result8832 + " <context.getDateFormat()>")
chamada antiga: assertEquals("true", writer.toString())
nova chamada: assertEquals("true", writer.toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result8833 + " <writer.toString()>")
chamada antiga: assertEquals("1086", writer.toString())
nova chamada: assertEquals("1086", writer.toString(), "Era esperado valores iguais, mas  '1086' é diferente de " + result8834 + " <writer.toString()>")
chamada antiga: assertEquals("2155", writer.toString())
nova chamada: assertEquals("2155", writer.toString(), "Era esperado valores iguais, mas  '2155' é diferente de " + result8835 + " <writer.toString()>")
chamada antiga: assertSame(SerializeConfig.global, writer.getMapping())
nova chamada: assertSame(SerializeConfig.global, writer.getMapping(), "Era esperado objetos iguais, mas  SerializeConfig.global é diferente de " + result8836 + " <writer.getMapping()>")
chamada antiga: assertNotNull(writer.getWriter())
nova chamada: assertNotNull(writer.getWriter(), "Era esperado não nulo, mas " + result8837 + " <writer.getWriter()> é nulo")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result8838 + " <writer.toString()>")
chamada antiga: assertEquals(0, writer.getBeforeFilters().size())
nova chamada: assertEquals(0, writer.getBeforeFilters().size(), "Era esperado valores iguais, mas  0 é diferente de " + result8839 + " <writer.getBeforeFilters().size()>")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8840 + " <v1.getValue()> é diferente de " + result8841 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8842 + " <v1.getValue()> é diferente de " + result8843 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8844 + " <v1.getValue()> é diferente de " + result8845 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals(Byte.valueOf((byte) 0), v1.getValue())
nova chamada: assertEquals(Byte.valueOf((byte) 0), v1.getValue(), "Era esperado valores iguais, mas " + result8846 + " <Byte.valueOf((byte) 0)> é diferente de " + result8847 + " <v1.getValue()>")
chamada antiga: assertEquals("[[{\"name\":\"intell\",\"speed\":3.3},{\"height\":9,\"name\":\"samsung\",\"width\":16},\"2\",\"3\"],{\"cpu\":{\"$ref\":\"$[0][0]\"},\"screen\":{\"$ref\":\"$[0][1]\"}}]", s)
nova chamada: assertEquals("[[{\"name\":\"intell\",\"speed\":3.3},{\"height\":9,\"name\":\"samsung\",\"width\":16},\"2\",\"3\"],{\"cpu\":{\"$ref\":\"$[0][0]\"},\"screen\":{\"$ref\":\"$[0][1]\"}}]", s, "Era esperado valores iguais, mas  '[[{\'name\':\'intell\',\'speed\':3.3},{\'height\':9,\'name\':\'samsung\',\'width\':16},\'2\',\'3\'],{\'cpu\':{\'$ref\':\'$[0][0]\'},\'screen\':{\'$ref\':\'$[0][1]\'}}]' é diferente de " + " s")
chamada antiga: assertEquals("{\"score\":0.000099369485}", object.toJSONString())
nova chamada: assertEquals("{\"score\":0.000099369485}", object.toJSONString(), "Era esperado valores iguais, mas  '{\'score\':0.000099369485}' é diferente de " + result8848 + " <object.toJSONString()>")
chamada antiga: assertNotNull(jsonObj)
nova chamada: assertNotNull(jsonObj, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jsonObj.getJSONArray(0))
nova chamada: assertNotNull(jsonObj.getJSONArray(0), "Era esperado não nulo, mas " + result8849 + " <jsonObj.getJSONArray(0)> é nulo")
chamada antiga: assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json)
nova chamada: assertEquals("{\"a\":[\"1\",\"b\"],\"b\":[\"1\"]}", json, "Era esperado valores iguais, mas  '{\'a\':[\'1\',\'b\'],\'b\':[\'1\']}' é diferente de " + " json")
chamada antiga: assertEquals("\"12:13:14\"", str)
nova chamada: assertEquals("\"12:13:14\"", str, "Era esperado valores iguais, mas  '\'12:13:14\'' é diferente de " + " str")
chamada antiga: assertNull(error)
nova chamada: assertNull(error, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(error)
nova chamada: assertNull(error, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(error)
nova chamada: assertNull(error, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(error)
nova chamada: assertNull(error, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$.*.id").toString())
nova chamada: assertEquals("[\"1\",\"2\"]", JSONPath.extract(str, "$.*.id").toString(), "Era esperado valores iguais, mas  '[\'1\',\'2\']' é diferente de " + result8850 + " <JSONPath.extract(str, '$.*.id').toString()>")
chamada antiga: assertEquals("[\"2\"]", JSONPath.extract(str, "$.*[?(@.name=='b')].id").toString())
nova chamada: assertEquals("[\"2\"]", JSONPath.extract(str, "$.*[?(@.name=='b')].id").toString(), "Era esperado valores iguais, mas  '[\'2\']' é diferente de " + result8851 + " <JSONPath.extract(str, '$.*[?(@.name=='b')].id').toString()>")
chamada antiga: assertEquals("-65001600000", json)
nova chamada: assertEquals("-65001600000", json, "Era esperado valores iguais, mas  '-65001600000' é diferente de " + " json")
chamada antiga: assertEquals(ts.getTime(), ts2.getTime())
nova chamada: assertEquals(ts.getTime(), ts2.getTime(), "Era esperado valores iguais, mas " + result8852 + " <ts.getTime()> é diferente de " + result8853 + " <ts2.getTime()>")
chamada antiga: assertEquals("{\"time\":-65001600000}", json)
nova chamada: assertEquals("{\"time\":-65001600000}", json, "Era esperado valores iguais, mas  '{\'time\':-65001600000}' é diferente de " + " json")
chamada antiga: assertEquals(m.time.getTime(), m2.time.getTime())
nova chamada: assertEquals(m.time.getTime(), m2.time.getTime(), "Era esperado valores iguais, mas " + result8854 + " <m.time.getTime()> é diferente de " + result8855 + " <m2.time.getTime()>")
chamada antiga: assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json)
nova chamada: assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json, "Era esperado valores iguais, mas  '{\'admin\':[\'admin.create\',\'admin.update\',\'admin.delete\'],\'user\':[\'user.create\',\'user.delete\']}' é diferente de " + " json")
chamada antiga: assertEquals(multimap.size(), multimap1.size())
nova chamada: assertEquals(multimap.size(), multimap1.size(), "Era esperado valores iguais, mas " + result8856 + " <multimap.size()> é diferente de " + result8857 + " <multimap1.size()>")
chamada antiga: assertEquals(json, JSON.toJSONString(multimap1))
nova chamada: assertEquals(json, JSON.toJSONString(multimap1), "Era esperado valores iguais, mas  json é diferente de " + result8858 + " <JSON.toJSONString(multimap1)>")
chamada antiga: assertEquals("{\"value\":\"\"}", text)
nova chamada: assertEquals("{\"value\":\"\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " text")
chamada antiga: assertEquals("123", JSON.parseObject("123", String.class))
nova chamada: assertEquals("123", JSON.parseObject("123", String.class), "Era esperado valores iguais, mas  '123' é diferente de " + result8859 + " <JSON.parseObject('123', String.class)>")
chamada antiga: assertEquals("true", JSON.parseObject("true", String.class))
nova chamada: assertEquals("true", JSON.parseObject("true", String.class), "Era esperado valores iguais, mas  'true' é diferente de " + result8860 + " <JSON.parseObject('true', String.class)>")
chamada antiga: assertEquals(null, JSON.parseObject("null", String.class))
nova chamada: assertEquals(null, JSON.parseObject("null", String.class), "Era esperado valores iguais, mas  null é diferente de " + result8861 + " <JSON.parseObject('null', String.class)>")
chamada antiga: assertTrue(equals(new StringBuffer("123"), JSON.parseObject("123", StringBuffer.class)))
nova chamada: assertTrue(equals(new StringBuffer("123"), JSON.parseObject("123", StringBuffer.class)), "Era esperado verdadeiro, mas " + result8862 + " <equals(new StringBuffer('123'), JSON.parseObject('123', StringBuffer.class))> é falso")
chamada antiga: assertTrue(equals(new StringBuffer("true"), JSON.parseObject("true", StringBuffer.class)))
nova chamada: assertTrue(equals(new StringBuffer("true"), JSON.parseObject("true", StringBuffer.class)), "Era esperado verdadeiro, mas " + result8863 + " <equals(new StringBuffer('true'), JSON.parseObject('true', StringBuffer.class))> é falso")
chamada antiga: assertEquals(null, JSON.parseObject("null", StringBuffer.class))
nova chamada: assertEquals(null, JSON.parseObject("null", StringBuffer.class), "Era esperado valores iguais, mas  null é diferente de " + result8864 + " <JSON.parseObject('null', StringBuffer.class)>")
chamada antiga: assertTrue(equals(new StringBuilder("123"), JSON.parseObject("123", StringBuilder.class)))
nova chamada: assertTrue(equals(new StringBuilder("123"), JSON.parseObject("123", StringBuilder.class)), "Era esperado verdadeiro, mas " + result8865 + " <equals(new StringBuilder('123'), JSON.parseObject('123', StringBuilder.class))> é falso")
chamada antiga: assertTrue(equals(new StringBuilder("true"), JSON.parseObject("true", StringBuilder.class)))
nova chamada: assertTrue(equals(new StringBuilder("true"), JSON.parseObject("true", StringBuilder.class)), "Era esperado verdadeiro, mas " + result8866 + " <equals(new StringBuilder('true'), JSON.parseObject('true', StringBuilder.class))> é falso")
chamada antiga: assertEquals(null, JSON.parseObject("null", StringBuilder.class))
nova chamada: assertEquals(null, JSON.parseObject("null", StringBuilder.class), "Era esperado valores iguais, mas  null é diferente de " + result8867 + " <JSON.parseObject('null', StringBuilder.class)>")
chamada antiga: assertEquals(entity.getId(), entity2.getId())
nova chamada: assertEquals(entity.getId(), entity2.getId(), "Era esperado valores iguais, mas " + result8868 + " <entity.getId()> é diferente de " + result8869 + " <entity2.getId()>")
chamada antiga: assertEquals(entity.getName(), entity2.getName())
nova chamada: assertEquals(entity.getName(), entity2.getName(), "Era esperado valores iguais, mas " + result8870 + " <entity.getName()> é diferente de " + result8871 + " <entity2.getName()>")
chamada antiga: assertEquals(123, model.value)
nova chamada: assertEquals(123, model.value, "Era esperado valores iguais, mas  123 é diferente de " + " model.value")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8872 + " <user1.getValue()> é diferente de " + result8873 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8874 + " <user1.getValue()> é diferente de " + result8875 + " <user.getValue()>")
chamada antiga: Assert.assertEquals("{\"apple\":1,\"banana\":2}", JSON.toJSONString(base))
nova chamada: assertEquals("{\"apple\":1,\"banana\":2}", JSON.toJSONString(base), "Era esperado valores iguais, mas  '{\'apple\':1,\'banana\':2}' é diferente de " + result8876 + " <JSON.toJSONString(base)>")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result8877 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result8878 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", getType()))
nova chamada: assertNull(obj.getObject("value", getType()), "Era esperado nulo, mas " + result8879 + " <obj.getObject('value', getType())> não é nulo")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8880 + " <v1.getValue()> é diferente de " + result8881 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
nova chamada: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }), "Era esperado valores iguais, mas  '[true]' é diferente de " + result8882 + " <JSON.toJSONString(new boolean[] { true })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8883 + " <v1.getValue()> é diferente de " + result8884 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("cd", JSONPath.eval(obj, "$.a.b"))
nova chamada: assertEquals("cd", JSONPath.eval(obj, "$.a.b"), "Era esperado valores iguais, mas  'cd' é diferente de " + result8885 + " <JSONPath.eval(obj, '$.a.b')>")
chamada antiga: assertEquals(10, JSONPath.eval(obj, "$.a.length()"))
nova chamada: assertEquals(10, JSONPath.eval(obj, "$.a.length()"), "Era esperado valores iguais, mas  10 é diferente de " + result8886 + " <JSONPath.eval(obj, '$.a.length()')>")
chamada antiga: assertEquals("{\"id\":3,\"name\":\"Jobs\"}", text)
nova chamada: assertEquals("{\"id\":3,\"name\":\"Jobs\"}", text, "Era esperado valores iguais, mas  '{\'id\':3,\'name\':\'Jobs\'}' é diferente de " + " text")
chamada antiga: assertEquals(123, tb.getAb())
nova chamada: assertEquals(123, tb.getAb(), "Era esperado valores iguais, mas  123 é diferente de " + result8887 + " <tb.getAb()>")
chamada antiga: Assert.assertTrue(MixIn1.class == JSON.getMixInAnnotations(BaseClass.class))
nova chamada: assertTrue(MixIn1.class == JSON.getMixInAnnotations(BaseClass.class), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(null == JSON.getMixInAnnotations(BaseClass.class))
nova chamada: assertTrue(null == JSON.getMixInAnnotations(BaseClass.class), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(model.flag)
nova chamada: assertTrue(model.flag, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"userId\":\"456\"}", json)
nova chamada: assertEquals("{\"userId\":\"456\"}", json, "Era esperado valores iguais, mas  '{\'userId\':\'456\'}' é diferente de " + " json")
chamada antiga: assertEquals(123, tb.getAb())
nova chamada: assertEquals(123, tb.getAb(), "Era esperado valores iguais, mas  123 é diferente de " + result8888 + " <tb.getAb()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("\"2017-03-17\"", json)
nova chamada: assertEquals("\"2017-03-17\"", json, "Era esperado valores iguais, mas  '\'2017-03-17\'' é diferente de " + " json")
chamada antiga: assertEquals("\"2017-03-07\"", json)
nova chamada: assertEquals("\"2017-03-07\"", json, "Era esperado valores iguais, mas  '\'2017-03-07\'' é diferente de " + " json")
chamada antiga: assertEquals(123, model.id)
nova chamada: assertEquals(123, model.id, "Era esperado valores iguais, mas  123 é diferente de " + " model.id")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8889 + " <v1.getValue()> é diferente de " + result8890 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":\"QUJDREVH\"}", json)
nova chamada: assertEquals("{\"value\":\"QUJDREVH\"}", json, "Era esperado valores iguais, mas  '{\'value\':\'QUJDREVH\'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertFalse(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))
nova chamada: assertFalse(SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName), "Era esperado falso, mas " + result8891 + " <SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(null))
nova chamada: assertFalse(JSON.isValid(null), "Era esperado falso, mas " + result8892 + " <JSON.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(""))
nova chamada: assertFalse(JSON.isValid(""), "Era esperado falso, mas " + result8893 + " <JSON.isValid('')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("null,null"))
nova chamada: assertFalse(JSON.isValid("null,null"), "Era esperado falso, mas " + result8894 + " <JSON.isValid('null,null')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("123,"))
nova chamada: assertFalse(JSON.isValid("123,"), "Era esperado falso, mas " + result8895 + " <JSON.isValid('123,')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("123,123"))
nova chamada: assertFalse(JSON.isValid("123,123"), "Era esperado falso, mas " + result8896 + " <JSON.isValid('123,123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("12.34,true"))
nova chamada: assertFalse(JSON.isValid("12.34,true"), "Era esperado falso, mas " + result8897 + " <JSON.isValid('12.34,true')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("12.34,123"))
nova chamada: assertFalse(JSON.isValid("12.34,123"), "Era esperado falso, mas " + result8898 + " <JSON.isValid('12.34,123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("true,123"))
nova chamada: assertFalse(JSON.isValid("true,123"), "Era esperado falso, mas " + result8899 + " <JSON.isValid('true,123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("false,123"))
nova chamada: assertFalse(JSON.isValid("false,123"), "Era esperado falso, mas " + result8900 + " <JSON.isValid('false,123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("\"abc\",123"))
nova chamada: assertFalse(JSON.isValid("\"abc\",123"), "Era esperado falso, mas " + result8901 + " <JSON.isValid('\'abc\',123')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{"))
nova chamada: assertFalse(JSON.isValid("{"), "Era esperado falso, mas " + result8902 + " <JSON.isValid('{')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{\"id\":123,}}"))
nova chamada: assertFalse(JSON.isValid("{\"id\":123,}}"), "Era esperado falso, mas " + result8903 + " <JSON.isValid('{\'id\':123,}}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{\"id\":\"123}"))
nova chamada: assertFalse(JSON.isValid("{\"id\":\"123}"), "Era esperado falso, mas " + result8904 + " <JSON.isValid('{\'id\':\'123}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{\"id\":{]}"))
nova chamada: assertFalse(JSON.isValid("{\"id\":{]}"), "Era esperado falso, mas " + result8905 + " <JSON.isValid('{\'id\':{]}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("{\"id\":{"))
nova chamada: assertFalse(JSON.isValid("{\"id\":{"), "Era esperado falso, mas " + result8906 + " <JSON.isValid('{\'id\':{')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{"))
nova chamada: assertFalse(JSON.isValidObject("{"), "Era esperado falso, mas " + result8907 + " <JSON.isValidObject('{')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{\"id\":123,}}"))
nova chamada: assertFalse(JSON.isValidObject("{\"id\":123,}}"), "Era esperado falso, mas " + result8908 + " <JSON.isValidObject('{\'id\':123,}}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{\"id\":\"123}"))
nova chamada: assertFalse(JSON.isValidObject("{\"id\":\"123}"), "Era esperado falso, mas " + result8909 + " <JSON.isValidObject('{\'id\':\'123}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{\"id\":{]}"))
nova chamada: assertFalse(JSON.isValidObject("{\"id\":{]}"), "Era esperado falso, mas " + result8910 + " <JSON.isValidObject('{\'id\':{]}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidObject("{\"id\":{"))
nova chamada: assertFalse(JSON.isValidObject("{\"id\":{"), "Era esperado falso, mas " + result8911 + " <JSON.isValidObject('{\'id\':{')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("["))
nova chamada: assertFalse(JSON.isValid("["), "Era esperado falso, mas " + result8912 + " <JSON.isValid('[')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("[[,[]]"))
nova chamada: assertFalse(JSON.isValid("[[,[]]"), "Era esperado falso, mas " + result8913 + " <JSON.isValid('[[,[]]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("[{\"id\":123]"))
nova chamada: assertFalse(JSON.isValid("[{\"id\":123]"), "Era esperado falso, mas " + result8914 + " <JSON.isValid('[{\'id\':123]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("[{\"id\":\"123\"}"))
nova chamada: assertFalse(JSON.isValid("[{\"id\":\"123\"}"), "Era esperado falso, mas " + result8915 + " <JSON.isValid('[{\'id\':\'123\'}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("[{\"id\":true]"))
nova chamada: assertFalse(JSON.isValid("[{\"id\":true]"), "Era esperado falso, mas " + result8916 + " <JSON.isValid('[{\'id\':true]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid("[{\"id\":{}]"))
nova chamada: assertFalse(JSON.isValid("[{\"id\":{}]"), "Era esperado falso, mas " + result8917 + " <JSON.isValid('[{\'id\':{}]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("["))
nova chamada: assertFalse(JSON.isValidArray("["), "Era esperado falso, mas " + result8918 + " <JSON.isValidArray('[')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[[,[]]"))
nova chamada: assertFalse(JSON.isValidArray("[[,[]]"), "Era esperado falso, mas " + result8919 + " <JSON.isValidArray('[[,[]]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[{\"id\":123]"))
nova chamada: assertFalse(JSON.isValidArray("[{\"id\":123]"), "Era esperado falso, mas " + result8920 + " <JSON.isValidArray('[{\'id\':123]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[{\"id\":\"123\"}"))
nova chamada: assertFalse(JSON.isValidArray("[{\"id\":\"123\"}"), "Era esperado falso, mas " + result8921 + " <JSON.isValidArray('[{\'id\':\'123\'}')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[{\"id\":true]"))
nova chamada: assertFalse(JSON.isValidArray("[{\"id\":true]"), "Era esperado falso, mas " + result8922 + " <JSON.isValidArray('[{\'id\':true]')> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValidArray("[{\"id\":{}]"))
nova chamada: assertFalse(JSON.isValidArray("[{\"id\":{}]"), "Era esperado falso, mas " + result8923 + " <JSON.isValidArray('[{\'id\':{}]')> é verdadeiro ")
chamada antiga: assertEquals(user1.getValue().pattern(), user.getValue().pattern())
nova chamada: assertEquals(user1.getValue().pattern(), user.getValue().pattern(), "Era esperado valores iguais, mas " + result8924 + " <user1.getValue().pattern()> é diferente de " + result8925 + " <user.getValue().pattern()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8926 + " <user1.getValue()> é diferente de " + result8927 + " <user.getValue()>")
chamada antiga: assertEquals(a.getProperty("id"), aa.getProperty("id"))
nova chamada: assertEquals(a.getProperty("id"), aa.getProperty("id"), "Era esperado valores iguais, mas " + result8928 + " <a.getProperty('id')> é diferente de " + result8929 + " <aa.getProperty('id')>")
chamada antiga: assertEquals(b.getProperty("id"), bb.getProperty("id"))
nova chamada: assertEquals(b.getProperty("id"), bb.getProperty("id"), "Era esperado valores iguais, mas " + result8930 + " <b.getProperty('id')> é diferente de " + result8931 + " <bb.getProperty('id')>")
chamada antiga: assertEquals(b.getProperty("name"), bb.getProperty("name"))
nova chamada: assertEquals(b.getProperty("name"), bb.getProperty("name"), "Era esperado valores iguais, mas " + result8932 + " <b.getProperty('name')> é diferente de " + result8933 + " <bb.getProperty('name')>")
chamada antiga: assertEquals("{\n" + "\t\"id\":0,\n" + "\t\"name\":\"jobs\"\n" + "}", JSON.toJSONString(b, true))
nova chamada: assertEquals("{\n" + "\t\"id\":0,\n" + "\t\"name\":\"jobs\"\n" + "}", JSON.toJSONString(b, true), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':0,\n' + '\t\'name\':\'jobs\'\n' + '}' é diferente de " + result8934 + " <JSON.toJSONString(b, true)>")
chamada antiga: assertNotNull(child)
nova chamada: assertNotNull(child, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(string.contains("is_test"))
nova chamada: assertTrue(string.contains("is_test"), "Era esperado verdadeiro, mas " + result8935 + " <string.contains('is_test')> é falso")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result8936 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: assertEquals(Integer.valueOf(4), parseOrder.getAmount())
nova chamada: assertEquals(Integer.valueOf(4), parseOrder.getAmount(), "Era esperado valores iguais, mas " + result8937 + " <Integer.valueOf(4)> é diferente de " + result8938 + " <parseOrder.getAmount()>")
chamada antiga: assertEquals("3", parseOrder.getAddMoney())
nova chamada: assertEquals("3", parseOrder.getAddMoney(), "Era esperado valores iguais, mas  '3' é diferente de " + result8939 + " <parseOrder.getAddMoney()>")
chamada antiga: assertEquals("1003", JSON.toJSONString(vo.type))
nova chamada: assertEquals("1003", JSON.toJSONString(vo.type), "Era esperado valores iguais, mas  '1003' é diferente de " + result8940 + " <JSON.toJSONString(vo.type)>")
chamada antiga: assertEquals("{\"type\":1003}", str)
nova chamada: assertEquals("{\"type\":1003}", str, "Era esperado valores iguais, mas  '{\'type\':1003}' é diferente de " + " str")
chamada antiga: assertEquals(vo.type, vo2.type)
nova chamada: assertEquals(vo.type, vo2.type, "Era esperado valores iguais, mas  vo.type é diferente de " + " vo2.type")
chamada antiga: Assertions.assertNotNull(modelBack.getCounterMap())
nova chamada: assertNotNull(modelBack.getCounterMap(), "Era esperado não nulo, mas " + result8941 + " <modelBack.getCounterMap()> é nulo")
chamada antiga: Assertions.assertNotNull(modelBack.getModelScores())
nova chamada: assertNotNull(modelBack.getModelScores(), "Era esperado não nulo, mas " + result8942 + " <modelBack.getModelScores()> é nulo")
chamada antiga: assertNotNull(demo.date)
nova chamada: assertNotNull(demo.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(v.validate())
nova chamada: assertTrue(v.validate(), "Era esperado verdadeiro, mas " + result8943 + " <v.validate()> é falso")
chamada antiga: assertEquals(JSONValidator.Type.Value, v.getType())
nova chamada: assertEquals(JSONValidator.Type.Value, v.getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result8944 + " <v.getType()>")
chamada antiga: assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str)
nova chamada: assertEquals("{\"v0\":\"1001\",\"v1\":\"101\"}", str, "Era esperado valores iguais, mas  '{\'v0\':\'1001\',\'v1\':\'101\'}' é diferente de " + " str")
chamada antiga: assertEquals("1001", object.get("v0"))
nova chamada: assertEquals("1001", object.get("v0"), "Era esperado valores iguais, mas  '1001' é diferente de " + result8945 + " <object.get('v0')>")
chamada antiga: assertEquals("101", object.get("v1"))
nova chamada: assertEquals("101", object.get("v1"), "Era esperado valores iguais, mas  '101' é diferente de " + result8946 + " <object.get('v1')>")
chamada antiga: assertEquals("{\"v0\":\"19007199254740991\"}", str)
nova chamada: assertEquals("{\"v0\":\"19007199254740991\"}", str, "Era esperado valores iguais, mas  '{\'v0\':\'19007199254740991\'}' é diferente de " + " str")
chamada antiga: assertEquals(JSONValidator.Type.Array, v.getType())
nova chamada: assertEquals(JSONValidator.Type.Array, v.getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Array é diferente de " + result8947 + " <v.getType()>")
chamada antiga: assertEquals(JSONValidator.Type.Array, JSONValidator.from("[]").getType())
nova chamada: assertEquals(JSONValidator.Type.Array, JSONValidator.from("[]").getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Array é diferente de " + result8948 + " <JSONValidator.from('[]').getType()>")
chamada antiga: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}")
nova chamada: assertEquals(JSON.toJSONString(vo), "{\"date\":\"2020-05-30\"}", "Era esperado valores iguais, mas " + result8949 + " <JSON.toJSONString(vo)> é diferente de " + " '{\'date\':\'2020-05-30\'}'")
chamada antiga: assertEquals("{\"date\":\"2020-05-30\"}", str)
nova chamada: assertEquals("{\"date\":\"2020-05-30\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2020-05-30\'}' é diferente de " + " str")
chamada antiga: Assertions.assertEquals(JSONValidator.Type.Value, jv.getType())
nova chamada: assertEquals(JSONValidator.Type.Value, jv.getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result8950 + " <jv.getType()>")
chamada antiga: assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }))
nova chamada: assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }), "Era esperado valores iguais, mas  '\'AQ==\'' é diferente de " + result8951 + " <JSON.toJSONString(new byte[] { 1 })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8952 + " <v1.getValue()> é diferente de " + result8953 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals(user1.getValue()[0], user.getValue()[0])
nova chamada: assertEquals(user1.getValue()[0], user.getValue()[0], "Era esperado valores iguais, mas  user1.getValue()[0] é diferente de " + " user.getValue()[0]")
chamada antiga: assertEquals(user1.getValue()[1], user.getValue()[1])
nova chamada: assertEquals(user1.getValue()[1], user.getValue()[1], "Era esperado valores iguais, mas  user1.getValue()[1] é diferente de " + " user.getValue()[1]")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8954 + " <user1.getValue()> é diferente de " + result8955 + " <user.getValue()>")
chamada antiga: assertEquals(0, user1.getValue().length)
nova chamada: assertEquals(0, user1.getValue().length, "Era esperado valores iguais, mas  0 é diferente de " + " user1.getValue().length")
chamada antiga: Assertions.assertTrue(jv.validate())
nova chamada: assertTrue(jv.validate(), "Era esperado verdadeiro, mas " + result8956 + " <jv.validate()> é falso")
chamada antiga: Assertions.assertTrue(jv.validate())
nova chamada: assertTrue(jv.validate(), "Era esperado verdadeiro, mas " + result8957 + " <jv.validate()> é falso")
chamada antiga: Assertions.assertTrue(jv.validate())
nova chamada: assertTrue(jv.validate(), "Era esperado verdadeiro, mas " + result8958 + " <jv.validate()> é falso")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result8959 + " <v1.getValue()> é diferente de " + result8960 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":\"\"}", text)
nova chamada: assertEquals("{\"value\":\"\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " text")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8961 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("", vo.getValue().toString())
nova chamada: assertEquals("", vo.getValue().toString(), "Era esperado valores iguais, mas  '' é diferente de " + result8962 + " <vo.getValue().toString()>")
chamada antiga: assertNull(vo.getValue())
nova chamada: assertNull(vo.getValue(), "Era esperado nulo, mas " + result8963 + " <vo.getValue()> não é nulo")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8964 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("true", vo.getValue().toString())
nova chamada: assertEquals("true", vo.getValue().toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result8965 + " <vo.getValue().toString()>")
chamada antiga: assertNotNull(vo.getValue())
nova chamada: assertNotNull(vo.getValue(), "Era esperado não nulo, mas " + result8966 + " <vo.getValue()> é nulo")
chamada antiga: assertEquals("123", vo.getValue().toString())
nova chamada: assertEquals("123", vo.getValue().toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result8967 + " <vo.getValue().toString()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result8968 + " <user1.getValue()> é diferente de " + result8969 + " <user.getValue()>")
chamada antiga: assertEquals(0, value.size())
nova chamada: assertEquals(0, value.size(), "Era esperado valores iguais, mas  0 é diferente de " + result8970 + " <value.size()>")
chamada antiga: assertEquals(1001, value.getId())
nova chamada: assertEquals(1001, value.getId(), "Era esperado valores iguais, mas  1001 é diferente de " + result8971 + " <value.getId()>")
chamada antiga: assertEquals("123", bean.getValue())
nova chamada: assertEquals("123", bean.getValue(), "Era esperado valores iguais, mas  '123' é diferente de " + result8972 + " <bean.getValue()>")
chamada antiga: assertEquals(false, bean.isBig())
nova chamada: assertEquals(false, bean.isBig(), "Era esperado valores iguais, mas  false é diferente de " + result8973 + " <bean.isBig()>")
chamada antiga: assertEquals(123, bean.getIntValue())
nova chamada: assertEquals(123, bean.getIntValue(), "Era esperado valores iguais, mas  123 é diferente de " + result8974 + " <bean.getIntValue()>")
chamada antiga: assertEquals(true, bean.isBig())
nova chamada: assertEquals(true, bean.isBig(), "Era esperado valores iguais, mas  true é diferente de " + result8975 + " <bean.isBig()>")
chamada antiga: assertEquals(567, bean.getID())
nova chamada: assertEquals(567, bean.getID(), "Era esperado valores iguais, mas  567 é diferente de " + result8976 + " <bean.getID()>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(Currency.getInstance("CNY"), currency)
nova chamada: assertSame(Currency.getInstance("CNY"), currency, "Era esperado objetos iguais, mas " + result8977 + " <Currency.getInstance('CNY')> é diferente de " + " currency")
chamada antiga: assertSame(Currency.getInstance("CNY"), currency)
nova chamada: assertSame(Currency.getInstance("CNY"), currency, "Era esperado objetos iguais, mas " + result8978 + " <Currency.getInstance('CNY')> é diferente de " + " currency")
chamada antiga: assertEquals("{}", str)
nova chamada: assertEquals("{}", str, "Era esperado valores iguais, mas  '{}' é diferente de " + " str")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.value)
nova chamada: assertNotNull(model.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1546072129000L, model.value.getTime())
nova chamada: assertEquals(1546072129000L, model.value.getTime(), "Era esperado valores iguais, mas  1546072129000L é diferente de " + result8979 + " <model.value.getTime()>")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.value)
nova chamada: assertNotNull(model.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1546072129000L, model.value.getTime())
nova chamada: assertEquals(1546072129000L, model.value.getTime(), "Era esperado valores iguais, mas  1546072129000L é diferente de " + result8980 + " <model.value.getTime()>")
chamada antiga: assertNotNull(m2.queue)
nova chamada: assertNotNull(m2.queue, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"java.version\":\"1.6\"}", json)
nova chamada: assertEquals("{\"java.version\":\"1.6\"}", json, "Era esperado valores iguais, mas  '{\'java.version\':\'1.6\'}' é diferente de " + " json")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(m.javaVersion, m2.javaVersion)
nova chamada: assertEquals(m.javaVersion, m2.javaVersion, "Era esperado valores iguais, mas  m.javaVersion é diferente de " + " m2.javaVersion")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTime())
nova chamada: assertEquals(1548166745000L, o.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result8981 + " <o.createTime.getTime()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTimeInMillis())
nova chamada: assertEquals(1548166745000L, o.createTime.getTimeInMillis(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result8982 + " <o.createTime.getTimeInMillis()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1531579788000L, o.createTime.getTimeInMillis())
nova chamada: assertEquals(1531579788000L, o.createTime.getTimeInMillis(), "Era esperado valores iguais, mas  1531579788000L é diferente de " + result8983 + " <o.createTime.getTimeInMillis()>")
chamada antiga: assertEquals("{\"createTime\":\"20180714224948\"}", json)
nova chamada: assertEquals("{\"createTime\":\"20180714224948\"}", json, "Era esperado valores iguais, mas  '{\'createTime\':\'20180714224948\'}' é diferente de " + " json")
chamada antiga: assertEquals(ZonedDateTime.class, o.createTime.getClass())
nova chamada: assertEquals(ZonedDateTime.class, o.createTime.getClass(), "Era esperado valores iguais, mas  ZonedDateTime.class é diferente de " + result8984 + " <o.createTime.getClass()>")
chamada antiga: assertEquals(1548166745L, seconds)
nova chamada: assertEquals(1548166745L, seconds, "Era esperado valores iguais, mas  1548166745L é diferente de " + " seconds")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"big\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result8985 + " <JSON.parseObject('\'big\'', Type.class)>")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"Big\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result8986 + " <JSON.parseObject('\'Big\'', Type.class)>")
chamada antiga: assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class))
nova chamada: assertSame(Type.Big, JSON.parseObject("\"BIG\"", Type.class), "Era esperado objetos iguais, mas  Type.Big é diferente de " + result8987 + " <JSON.parseObject('\'BIG\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"Small\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result8988 + " <JSON.parseObject('\'Small\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"small\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result8989 + " <JSON.parseObject('\'small\'', Type.class)>")
chamada antiga: assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class))
nova chamada: assertSame(Type.Small, JSON.parseObject("\"SMALL\"", Type.class), "Era esperado objetos iguais, mas  Type.Small é diferente de " + result8990 + " <JSON.parseObject('\'SMALL\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"medium\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result8991 + " <JSON.parseObject('\'medium\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"MEDIUM\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result8992 + " <JSON.parseObject('\'MEDIUM\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"Medium\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result8993 + " <JSON.parseObject('\'Medium\'', Type.class)>")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class))
nova chamada: assertSame(Type.Medium, JSON.parseObject("\"MediuM\"", Type.class), "Era esperado objetos iguais, mas  Type.Medium é diferente de " + result8994 + " <JSON.parseObject('\'MediuM\'', Type.class)>")
chamada antiga: assertNull(JSON.parseObject("\"\"", Type.class))
nova chamada: assertNull(JSON.parseObject("\"\"", Type.class), "Era esperado nulo, mas " + result8995 + " <JSON.parseObject('\'\'', Type.class)> não é nulo")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"bIG\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'bIG\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"big\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'big\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"Big\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'Big\'}', Model.class).type")
chamada antiga: assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type)
nova chamada: assertSame(Type.Big, JSON.parseObject("{\"type\":\"BIG\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Big é diferente de " + " JSON.parseObject('{\'type\':\'BIG\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"Small\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'Small\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SmAll\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'SmAll\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"small\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'small\'}', Model.class).type")
chamada antiga: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type)
nova chamada: assertSame(Type.Small, JSON.parseObject("{\"type\":\"SMALL\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Small é diferente de " + " JSON.parseObject('{\'type\':\'SMALL\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"Medium\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'Medium\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'MediuM\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'medium\'}', Model.class).type")
chamada antiga: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type)
nova chamada: assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type, "Era esperado objetos iguais, mas  Type.Medium é diferente de " + " JSON.parseObject('{\'type\':\'MEDIUM\'}', Model.class).type")
chamada antiga: assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type)
nova chamada: assertNull(JSON.parseObject("{\"type\":\"\"}", Model.class).type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.type)
nova chamada: assertNull(model.type, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"null\":123}", str)
nova chamada: assertEquals("{\"null\":123}", str, "Era esperado valores iguais, mas  '{\'null\':123}' é diferente de " + " str")
chamada antiga: assertEquals(1950, m.date.get(Calendar.YEAR))
nova chamada: assertEquals(1950, m.date.get(Calendar.YEAR), "Era esperado valores iguais, mas  1950 é diferente de " + result8996 + " <m.date.get(Calendar.YEAR)>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result8997 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result8998 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result8999 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result9000 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result9001 + " <m.date.getYear()>")
chamada antiga: assertEquals(1950, m.date.getYear())
nova chamada: assertEquals(1950, m.date.getYear(), "Era esperado valores iguais, mas  1950 é diferente de " + result9002 + " <m.date.getYear()>")
chamada antiga: assertEquals("  asdfsadf  asdf  asdf  ", jon.user.username)
nova chamada: assertEquals("  asdfsadf  asdf  asdf  ", jon.user.username, "Era esperado valores iguais, mas  '  asdfsadf  asdf  asdf  ' é diferente de " + " jon.user.username")
chamada antiga: assertEquals("  asdfsadf  asdf  asdf  ", jon1.user.username)
nova chamada: assertEquals("  asdfsadf  asdf  asdf  ", jon1.user.username, "Era esperado valores iguais, mas  '  asdfsadf  asdf  asdf  ' é diferente de " + " jon1.user.username")
chamada antiga: assertTrue("{\"a\":{},\"b\":{}}".equals(json) || "{\"a\":{},\"b\":{\"$ref\":\"$.a\"}}".equals(json))
nova chamada: assertTrue("{\"a\":{},\"b\":{}}".equals(json) || "{\"a\":{},\"b\":{\"$ref\":\"$.a\"}}".equals(json), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("[\"38ba5660-ef6e-4b66-9673-b0236832f179\"]", device_udid)
nova chamada: assertEquals("[\"38ba5660-ef6e-4b66-9673-b0236832f179\"]", device_udid, "Era esperado valores iguais, mas  '[\'38ba5660-ef6e-4b66-9673-b0236832f179\']' é diferente de " + " device_udid")
chamada antiga: assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue))
nova chamada: assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue), "Era esperado valores iguais, mas  '[{\'3\':3,\'2\':2,\'7\':7}]' é diferente de " + result9003 + " <JSON.toJSONString(result, SerializerFeature.WriteMapNullValue)>")
chamada antiga: assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue))
nova chamada: assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue), "Era esperado valores iguais, mas  '[{\'3\':3,\'2\':2,\'7\':7}]' é diferente de " + result9004 + " <JSON.toJSONString(result, SerializerFeature.WriteMapNullValue)>")
chamada antiga: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
nova chamada: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"), "Era esperado valores iguais, mas " + result9005 + " <TestUtils.encodeToBase64String(entity.getValue(), false)> é diferente de " + result9006 + " <json.getString('value')>")
chamada antiga: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
nova chamada: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"), "Era esperado valores iguais, mas  '中华人民共和国' é diferente de " + " new String(entity2.getValue(), 'UTF-8')")
chamada antiga: assertEquals("{\"v\":\" \"}", json)
nova chamada: assertEquals("{\"v\":\" \"}", json, "Era esperado valores iguais, mas  '{\'v\':\' \'}' é diferente de " + " json")
chamada antiga: assertEquals(map.get("v"), jsonObject.get("v"))
nova chamada: assertEquals(map.get("v"), jsonObject.get("v"), "Era esperado valores iguais, mas " + result9007 + " <map.get('v')> é diferente de " + result9008 + " <jsonObject.get('v')>")
chamada antiga: assertEquals("{\"f1\":1001,\"f3\":1003}", JSON.toJSONString(a))
nova chamada: assertEquals("{\"f1\":1001,\"f3\":1003}", JSON.toJSONString(a), "Era esperado valores iguais, mas  '{\'f1\':1001,\'f3\':1003}' é diferente de " + result9009 + " <JSON.toJSONString(a)>")
chamada antiga: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005}", JSON.toJSONString(b))
nova chamada: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005}", JSON.toJSONString(b), "Era esperado valores iguais, mas  '{\'f1\':1001,\'f3\':1003,\'f5\':1005}' é diferente de " + result9010 + " <JSON.toJSONString(b)>")
chamada antiga: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006}", JSON.toJSONString(c))
nova chamada: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006}", JSON.toJSONString(c), "Era esperado valores iguais, mas  '{\'f1\':1001,\'f3\':1003,\'f5\':1005,\'f6\':1006}' é diferente de " + result9011 + " <JSON.toJSONString(c)>")
chamada antiga: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006,\"f7\":1007}", JSON.toJSONString(d))
nova chamada: assertEquals("{\"f1\":1001,\"f3\":1003,\"f5\":1005,\"f6\":1006,\"f7\":1007}", JSON.toJSONString(d), "Era esperado valores iguais, mas  '{\'f1\':1001,\'f3\':1003,\'f5\':1005,\'f6\':1006,\'f7\':1007}' é diferente de " + result9012 + " <JSON.toJSONString(d)>")
chamada antiga: assertEquals(TimeUnit.DAYS, JSON.parseObject(text, TimeUnit.class))
nova chamada: assertEquals(TimeUnit.DAYS, JSON.parseObject(text, TimeUnit.class), "Era esperado valores iguais, mas  TimeUnit.DAYS é diferente de " + result9013 + " <JSON.parseObject(text, TimeUnit.class)>")
chamada antiga: assertEquals(com.alibaba.fastjson.JSONObject.class, a.getClass())
nova chamada: assertEquals(com.alibaba.fastjson.JSONObject.class, a.getClass(), "Era esperado valores iguais, mas  com.alibaba.fastjson.JSONObject.class é diferente de " + result9014 + " <a.getClass()>")
chamada antiga: assertEquals(java.util.ArrayList.class, a.get("list").getClass())
nova chamada: assertEquals(java.util.ArrayList.class, a.get("list").getClass(), "Era esperado valores iguais, mas  java.util.ArrayList.class é diferente de " + result9015 + " <a.get('list').getClass()>")
chamada antiga: assertEquals(java.util.HashMap.class, a.get("map").getClass())
nova chamada: assertEquals(java.util.HashMap.class, a.get("map").getClass(), "Era esperado valores iguais, mas  java.util.HashMap.class é diferente de " + result9016 + " <a.get('map').getClass()>")
chamada antiga: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
nova chamada: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text, "Era esperado valores iguais, mas  '{\'remark\':\'支付订单\',\'value\':1}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2},\'orderType1\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2},\'orderType1\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertEquals("3.4", parser.getInput())
nova chamada: assertEquals("3.4", parser.getInput(), "Era esperado valores iguais, mas  '3.4' é diferente de " + result9017 + " <parser.getInput()>")
chamada antiga: assertEquals(false, parser.isEnabled(Feature.UseBigDecimal))
nova chamada: assertEquals(false, parser.isEnabled(Feature.UseBigDecimal), "Era esperado valores iguais, mas  false é diferente de " + result9018 + " <parser.isEnabled(Feature.UseBigDecimal)>")
chamada antiga: assertEquals(3.4D, result)
nova chamada: assertEquals(3.4D, result, "Era esperado valores iguais, mas  3.4D é diferente de " + " result")
chamada antiga: assertEquals("{\"double\":3.4}", parser.getInput())
nova chamada: assertEquals("{\"double\":3.4}", parser.getInput(), "Era esperado valores iguais, mas  '{\'double\':3.4}' é diferente de " + result9019 + " <parser.getInput()>")
chamada antiga: assertEquals(3.4D, ((Map) result).get("double"))
nova chamada: assertEquals(3.4D, ((Map) result).get("double"), "Era esperado valores iguais, mas  3.4D é diferente de " + result9020 + " <((Map) result).get('double')>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9021 + " <v1.getValue()> é diferente de " + result9022 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertTrue(JSONPath.remove(object, "$.id"))
nova chamada: assertTrue(JSONPath.remove(object, "$.id"), "Era esperado verdadeiro, mas " + result9023 + " <JSONPath.remove(object, '$.id')> é falso")
chamada antiga: assertTrue(object.isEmpty())
nova chamada: assertTrue(object.isEmpty(), "Era esperado verdadeiro, mas " + result9024 + " <object.isEmpty()> é falso")
chamada antiga: assertTrue(JSONPath.set(object, "$.id", 234))
nova chamada: assertTrue(JSONPath.set(object, "$.id", 234), "Era esperado verdadeiro, mas " + result9025 + " <JSONPath.set(object, '$.id', 234)> é falso")
chamada antiga: assertEquals(234, object.get("id"))
nova chamada: assertEquals(234, object.get("id"), "Era esperado valores iguais, mas  234 é diferente de " + result9026 + " <object.get('id')>")
chamada antiga: assertEquals("$.id", path.getPath())
nova chamada: assertEquals("$.id", path.getPath(), "Era esperado valores iguais, mas  '$.id' é diferente de " + result9027 + " <path.getPath()>")
chamada antiga: assertEquals(123, path.eval(object))
nova chamada: assertEquals(123, path.eval(object), "Era esperado valores iguais, mas  123 é diferente de " + result9028 + " <path.eval(object)>")
chamada antiga: assertEquals(234, object.getIntValue("id"))
nova chamada: assertEquals(234, object.getIntValue("id"), "Era esperado valores iguais, mas  234 é diferente de " + result9029 + " <object.getIntValue('id')>")
chamada antiga: assertEquals("{\"id\":0,\"name\":\"jobs\"}", text)
nova chamada: assertEquals("{\"id\":0,\"name\":\"jobs\"}", text, "Era esperado valores iguais, mas  '{\'id\':0,\'name\':\'jobs\'}' é diferente de " + " text")
chamada antiga: assertEquals(text, JSON.toJSONString(obj1))
nova chamada: assertEquals(text, JSON.toJSONString(obj1), "Era esperado valores iguais, mas  text é diferente de " + result9030 + " <JSON.toJSONString(obj1)>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9031 + " <v1.getValue()> é diferente de " + result9032 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":0}", text)
nova chamada: assertEquals("{\"value\":0}", text, "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + " text")
chamada antiga: assertEquals("{\"ID\":123,\"name\":\"jobs\"}", str)
nova chamada: assertEquals("{\"ID\":123,\"name\":\"jobs\"}", str, "Era esperado valores iguais, mas  '{\'ID\':123,\'name\':\'jobs\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9033 + " <v1.getValue()> é diferente de " + result9034 + " <v.getValue()>")
chamada antiga: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
nova chamada: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text, "Era esperado valores iguais, mas  '{\'remark\':\'支付订单\',\'value\':1}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertEquals(Bean.class, context.getBeanClass())
nova chamada: assertEquals(Bean.class, context.getBeanClass(), "Era esperado valores iguais, mas  Bean.class é diferente de " + result9035 + " <context.getBeanClass()>")
chamada antiga: assertEquals(int.class, context.getFieldClass())
nova chamada: assertEquals(int.class, context.getFieldClass(), "Era esperado valores iguais, mas  int.class é diferente de " + result9036 + " <context.getFieldClass()>")
chamada antiga: assertEquals(int.class, context.getFieldType())
nova chamada: assertEquals(int.class, context.getFieldType(), "Era esperado valores iguais, mas  int.class é diferente de " + result9037 + " <context.getFieldType()>")
chamada antiga: assertEquals(Bean.class.getField("id"), context.getField())
nova chamada: assertEquals(Bean.class.getField("id"), context.getField(), "Era esperado valores iguais, mas " + result9038 + " <Bean.class.getField('id')> é diferente de " + result9039 + " <context.getField()>")
chamada antiga: assertEquals("userId", context.getAnnotation(JSONField.class).name())
nova chamada: assertEquals("userId", context.getAnnotation(JSONField.class).name(), "Era esperado valores iguais, mas  'userId' é diferente de " + result9040 + " <context.getAnnotation(JSONField.class).name()>")
chamada antiga: assertEquals(null, context.getFormat())
nova chamada: assertEquals(null, context.getFormat(), "Era esperado valores iguais, mas  null é diferente de " + result9041 + " <context.getFormat()>")
chamada antiga: assertEquals(null, context.getLabel())
nova chamada: assertEquals(null, context.getLabel(), "Era esperado valores iguais, mas  null é diferente de " + result9042 + " <context.getLabel()>")
chamada antiga: assertEquals(0, context.getFeatures())
nova chamada: assertEquals(0, context.getFeatures(), "Era esperado valores iguais, mas  0 é diferente de " + result9043 + " <context.getFeatures()>")
chamada antiga: assertEquals("1997-03-17 15:53:01.012345678", ts.toString())
nova chamada: assertEquals("1997-03-17 15:53:01.012345678", ts.toString(), "Era esperado valores iguais, mas  '1997-03-17 15:53:01.012345678' é diferente de " + result9044 + " <ts.toString()>")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"')
nova chamada: assertEquals('"' + ts.toString() + '"', '"' + ts2.toString() + '"', "Era esperado valores iguais, mas  ''' + ts.toString() + ''' é diferente de " + " ''' + ts2.toString() + '''")
chamada antiga: assertEquals("[{\"category\":{\"name\":\"category\"},\"name\":\"item1\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}},{\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}}]", str)
nova chamada: assertEquals("[{\"category\":{\"name\":\"category\"},\"name\":\"item1\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}},{\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}}]", str, "Era esperado valores iguais, mas  '[{\'category\':{\'name\':\'category\'},\'name\':\'item1\',\'afterFilterCategory\':{\'name\':\'afterFilterCategory\'}},{\'category\':{\'$ref\':\'$[0].category\'},\'name\':\'item2\',\'afterFilterCategory\':{\'name\':\'afterFilterCategory\'}}]' é diferente de " + " str")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result9045 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result9046 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
nova chamada: assertNull(obj.getObject("value", new TypeReference<Model>() {
}), "Era esperado nulo, mas " + result9047 + " <obj.getObject('value', new TypeReference<Model>() {\n})> não é nulo")
chamada antiga: assertEquals("null", obj.get("value"))
nova chamada: assertEquals("null", obj.get("value"), "Era esperado valores iguais, mas  'null' é diferente de " + result9048 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getObject("value", Model.class))
nova chamada: assertNull(obj.getObject("value", Model.class), "Era esperado nulo, mas " + result9049 + " <obj.getObject('value', Model.class)> não é nulo")
chamada antiga: assertNull(obj.getObject("value", new TypeReference<Model>() {
}))
nova chamada: assertNull(obj.getObject("value", new TypeReference<Model>() {
}), "Era esperado nulo, mas " + result9050 + " <obj.getObject('value', new TypeReference<Model>() {\n})> não é nulo")
chamada antiga: assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class))
nova chamada: assertEquals(new JSONObject(), obj.getObject("value", JSONObject.class), "Era esperado valores iguais, mas  new JSONObject() é diferente de " + result9051 + " <obj.getObject('value', JSONObject.class)>")
chamada antiga: assertEquals("[{\"method\":\"queryPrepayGoodsV2\"}]", obj.toString())
nova chamada: assertEquals("[{\"method\":\"queryPrepayGoodsV2\"}]", obj.toString(), "Era esperado valores iguais, mas  '[{\'method\':\'queryPrepayGoodsV2\'}]' é diferente de " + result9052 + " <obj.toString()>")
chamada antiga: assertEquals("[13,14]", obj.toString())
nova chamada: assertEquals("[13,14]", obj.toString(), "Era esperado valores iguais, mas  '[13,14]' é diferente de " + result9053 + " <obj.toString()>")
chamada antiga: Assertions.assertFalse(jv.validate())
nova chamada: assertFalse(jv.validate(), "Era esperado falso, mas " + result9054 + " <jv.validate()> é verdadeiro ")
chamada antiga: assertFalse(object.isEmpty())
nova chamada: assertFalse(object.isEmpty(), "Era esperado falso, mas " + result9055 + " <object.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString())
nova chamada: assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString(), "Era esperado valores iguais, mas  '[{\'名称\':\'脆皮青豆\',\'配料\':[\'豌豆\',\'棕榈油\',\'白砂糖\',\'食用盐\',\'玉米淀粉\']}]' é diferente de " + result9056 + " <JSONPath.extract(chineseKeyString, '$[?(@.名称 = '脆皮青豆')]').toString()>")
chamada antiga: assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString())
nova chamada: assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]", JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString(), "Era esperado valores iguais, mas  '[{\'name\':\'脆皮青豆\',\'配料\':[\'豌豆\',\'棕榈油\',\'白砂糖\',\'食用盐\',\'玉米淀粉\']}]' é diferente de " + result9057 + " <JSONPath.extract(normalKeyString, '$[?(@.name = '脆皮青豆')]').toString()>")
chamada antiga: assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty())
nova chamada: assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty(), "Era esperado falso, mas " + result9058 + " <((List) JSONPath.extract(chineseKeyString, '$[?(@.名称 = '脆皮青豆')]')).isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty())
nova chamada: assertFalse(((List) JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]")).isEmpty(), "Era esperado falso, mas " + result9059 + " <((List) JSONPath.extract(normalKeyString, '$[?(@.name = '脆皮青豆')]')).isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()))
nova chamada: assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()), "Era esperado valores iguais, mas  '2019-09-18T20:35:00+12:45' é diferente de " + result9060 + " <sdf.format(c.p1.getTime())>")
chamada antiga: assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()))
nova chamada: assertEquals("2019-09-18T20:35:00+12:45", sdf.format(c.p1.getTime()), "Era esperado valores iguais, mas  '2019-09-18T20:35:00+12:45' é diferente de " + result9061 + " <sdf.format(c.p1.getTime())>")
chamada antiga: assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()))
nova chamada: assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()), "Era esperado valores iguais, mas  '2019-09-18T20:35:00+05:45' é diferente de " + result9062 + " <sdf.format(c.p1.getTime())>")
chamada antiga: assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()))
nova chamada: assertEquals("2019-09-18T20:35:00+05:45", sdf.format(c.p1.getTime()), "Era esperado valores iguais, mas  '2019-09-18T20:35:00+05:45' é diferente de " + result9063 + " <sdf.format(c.p1.getTime())>")
chamada antiga: assertEquals("2019-09-18T20:35:00+08:45", sdf.format(c.p1.getTime()))
nova chamada: assertEquals("2019-09-18T20:35:00+08:45", sdf.format(c.p1.getTime()), "Era esperado valores iguais, mas  '2019-09-18T20:35:00+08:45' é diferente de " + result9064 + " <sdf.format(c.p1.getTime())>")
chamada antiga: assertTrue(a instanceof JSONObject)
nova chamada: assertTrue(a instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b instanceof JSONObject)
nova chamada: assertTrue(b instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c instanceof JSONArray)
nova chamada: assertTrue(c instanceof JSONArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"value\":[]}", str)
nova chamada: assertEquals("{\"value\":[]}", str, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " str")
chamada antiga: assertEquals("{\"time\":" + m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"time\":" + m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'time\':' + m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli(), m1.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli())
nova chamada: assertEquals(m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli(), m1.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result9065 + " <m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli()> é diferente de " + result9066 + " <m1.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str)
nova chamada: assertEquals("{\"ztime\":" + m.ztime.toInstant().toEpochMilli() + "}", str, "Era esperado valores iguais, mas  '{\'ztime\':' + m.ztime.toInstant().toEpochMilli() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli())
nova chamada: assertEquals(m.ztime.toInstant().toEpochMilli(), m1.ztime.toInstant().toEpochMilli(), "Era esperado valores iguais, mas " + result9067 + " <m.ztime.toInstant().toEpochMilli()> é diferente de " + result9068 + " <m1.ztime.toInstant().toEpochMilli()>")
chamada antiga: assertEquals("{\"time1\":" + m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"time1\":" + m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'time1\':' + m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond(), m1.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond())
nova chamada: assertEquals(m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond(), m1.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond(), "Era esperado valores iguais, mas " + result9069 + " <m.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond()> é diferente de " + result9070 + " <m1.time1.atZone(JSON.defaultTimeZone.toZoneId()).toEpochSecond()>")
chamada antiga: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str)
nova chamada: assertEquals("{\"ztime1\":" + m.ztime1.toEpochSecond() + "}", str, "Era esperado valores iguais, mas  '{\'ztime1\':' + m.ztime1.toEpochSecond() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond())
nova chamada: assertEquals(m.ztime1.toEpochSecond(), m1.ztime1.toEpochSecond(), "Era esperado valores iguais, mas " + result9071 + " <m.ztime1.toEpochSecond()> é diferente de " + result9072 + " <m1.ztime1.toEpochSecond()>")
chamada antiga: assertEquals("{\"date\":" + m.date.getTime() + "}", str)
nova chamada: assertEquals("{\"date\":" + m.date.getTime() + "}", str, "Era esperado valores iguais, mas  '{\'date\':' + m.date.getTime() + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date.getTime(), m1.date.getTime())
nova chamada: assertEquals(m.date.getTime(), m1.date.getTime(), "Era esperado valores iguais, mas " + result9073 + " <m.date.getTime()> é diferente de " + result9074 + " <m1.date.getTime()>")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str)
nova chamada: assertEquals("{\"date1\":" + (m.date1.getTime() / 1000) + "}", str, "Era esperado valores iguais, mas  '{\'date1\':' + (m.date1.getTime() / 1000) + '}' é diferente de " + " str")
chamada antiga: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000)
nova chamada: assertEquals(m.date1.getTime() / 1000, m1.date1.getTime() / 1000, "Era esperado valores iguais, mas  m.date1.getTime() / 1000 é diferente de " + " m1.date1.getTime() / 1000")
chamada antiga: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2)
nova chamada: assertEquals(LocalDateTime.of(2019, 7, 14, 12, 13, 14), m.time2, "Era esperado valores iguais, mas " + result9075 + " <LocalDateTime.of(2019, 7, 14, 12, 13, 14)> é diferente de " + " m.time2")
chamada antiga: assertEquals(Long.toString(millis), JSON.toJSONStringWithDateFormat(new Date(millis), "millis"))
nova chamada: assertEquals(Long.toString(millis), JSON.toJSONStringWithDateFormat(new Date(millis), "millis"), "Era esperado valores iguais, mas " + result9076 + " <Long.toString(millis)> é diferente de " + result9077 + " <JSON.toJSONStringWithDateFormat(new Date(millis), 'millis')>")
chamada antiga: assertEquals(Long.toString(millis / 1000), JSON.toJSONStringWithDateFormat(new Date(millis), "unixtime"))
nova chamada: assertEquals(Long.toString(millis / 1000), JSON.toJSONStringWithDateFormat(new Date(millis), "unixtime"), "Era esperado valores iguais, mas " + result9078 + " <Long.toString(millis / 1000)> é diferente de " + result9079 + " <JSON.toJSONStringWithDateFormat(new Date(millis), 'unixtime')>")
chamada antiga: assertTrue(123.45F == ((Float) obj.get("value")).floatValue())
nova chamada: assertTrue(123.45F == ((Float) obj.get("value")).floatValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("123"), obj.getBigInteger("value"))
nova chamada: assertEquals(new BigInteger("123"), obj.getBigInteger("value"), "Era esperado valores iguais, mas  new BigInteger('123') é diferente de " + result9080 + " <obj.getBigInteger('value')>")
chamada antiga: assertTrue(123.45D == ((Double) obj.get("value")).doubleValue())
nova chamada: assertTrue(123.45D == ((Double) obj.get("value")).doubleValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("123"), obj.getBigInteger("value"))
nova chamada: assertEquals(new BigInteger("123"), obj.getBigInteger("value"), "Era esperado valores iguais, mas  new BigInteger('123') é diferente de " + result9081 + " <obj.getBigInteger('value')>")
chamada antiga: assertEquals("", obj.get("value"))
nova chamada: assertEquals("", obj.get("value"), "Era esperado valores iguais, mas  '' é diferente de " + result9082 + " <obj.get('value')>")
chamada antiga: assertNull(obj.getBigInteger("value"))
nova chamada: assertNull(obj.getBigInteger("value"), "Era esperado nulo, mas " + result9083 + " <obj.getBigInteger('value')> não é nulo")
chamada antiga: assertEquals(GeometryCollection.class, geometry.getClass())
nova chamada: assertEquals(GeometryCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  GeometryCollection.class é diferente de " + result9084 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'GeometryCollection\',\'geometries\':[{\'type\':\'Point\',\'coordinates\':[100.0,0.0]},{\'type\':\'LineString\',\'coordinates\':[[101.0,0.0],[102.0,1.0]]}]}' é diferente de " + result9085 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9086 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Point.class, geometry.getClass())
nova chamada: assertEquals(Point.class, geometry.getClass(), "Era esperado valores iguais, mas  Point.class é diferente de " + result9087 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Point\',\'coordinates\':[100.0,0.0]}' é diferente de " + result9088 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9089 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Polygon.class, geometry.getClass())
nova chamada: assertEquals(Polygon.class, geometry.getClass(), "Era esperado valores iguais, mas  Polygon.class é diferente de " + result9090 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}' é diferente de " + result9091 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9092 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPolygon.class, geometry.getClass())
nova chamada: assertEquals(MultiPolygon.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPolygon.class é diferente de " + result9093 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPolygon\',\'coordinates\':[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}' é diferente de " + result9094 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9095 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(FeatureCollection.class, geometry.getClass())
nova chamada: assertEquals(FeatureCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  FeatureCollection.class é diferente de " + result9096 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'FeatureCollection\',\'features\':[{\'type\':\'Feature\',\'properties\':{\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Point\',\'coordinates\':[102.0,0.5]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'0.0\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'LineString\',\'coordinates\':[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'{\\\'this\\\':\\\'that\\\'}\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}' é diferente de " + result9097 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9098 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiLineString.class, geometry.getClass())
nova chamada: assertEquals(MultiLineString.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiLineString.class é diferente de " + result9099 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiLineString\',\'coordinates\':[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}' é diferente de " + result9100 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9101 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(LineString.class, geometry.getClass())
nova chamada: assertEquals(LineString.class, geometry.getClass(), "Era esperado valores iguais, mas  LineString.class é diferente de " + result9102 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'LineString\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result9103 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9104 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result9105 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'bbox\':[-10.0,-10.0,10.0,10.0],\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result9106 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9107 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result9108 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'id\':\'f2\',\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result9109 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9110 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPoint.class, geometry.getClass())
nova chamada: assertEquals(MultiPoint.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPoint.class é diferente de " + result9111 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPoint\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result9112 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result9113 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals("{1:10,2:4,3:5,4:5,37306:98,36796:9}", json)
nova chamada: assertEquals("{1:10,2:4,3:5,4:5,37306:98,36796:9}", json, "Era esperado valores iguais, mas  '{1:10,2:4,3:5,4:5,37306:98,36796:9}' é diferente de " + " json")
chamada antiga: assertEquals("{\"1\":10,\"2\":4,\"3\":5,\"4\":5,\"37306\":98,\"36796\":9}", JSON.toJSONString(map, SerializerFeature.WriteNonStringKeyAsString))
nova chamada: assertEquals("{\"1\":10,\"2\":4,\"3\":5,\"4\":5,\"37306\":98,\"36796\":9}", JSON.toJSONString(map, SerializerFeature.WriteNonStringKeyAsString), "Era esperado valores iguais, mas  '{\'1\':10,\'2\':4,\'3\':5,\'4\':5,\'37306\':98,\'36796\':9}' é diferente de " + result9114 + " <JSON.toJSONString(map, SerializerFeature.WriteNonStringKeyAsString)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(1)), Integer.valueOf(10))
nova chamada: assertEquals(map1.get(Integer.valueOf(1)), Integer.valueOf(10), "Era esperado valores iguais, mas " + result9115 + " <map1.get(Integer.valueOf(1))> é diferente de " + result9116 + " <Integer.valueOf(10)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(2)), Integer.valueOf(4))
nova chamada: assertEquals(map1.get(Integer.valueOf(2)), Integer.valueOf(4), "Era esperado valores iguais, mas " + result9117 + " <map1.get(Integer.valueOf(2))> é diferente de " + result9118 + " <Integer.valueOf(4)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(3)), Integer.valueOf(5))
nova chamada: assertEquals(map1.get(Integer.valueOf(3)), Integer.valueOf(5), "Era esperado valores iguais, mas " + result9119 + " <map1.get(Integer.valueOf(3))> é diferente de " + result9120 + " <Integer.valueOf(5)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(4)), Integer.valueOf(5))
nova chamada: assertEquals(map1.get(Integer.valueOf(4)), Integer.valueOf(5), "Era esperado valores iguais, mas " + result9121 + " <map1.get(Integer.valueOf(4))> é diferente de " + result9122 + " <Integer.valueOf(5)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(37306)), Integer.valueOf(98))
nova chamada: assertEquals(map1.get(Integer.valueOf(37306)), Integer.valueOf(98), "Era esperado valores iguais, mas " + result9123 + " <map1.get(Integer.valueOf(37306))> é diferente de " + result9124 + " <Integer.valueOf(98)>")
chamada antiga: assertEquals(map1.get(Integer.valueOf(36796)), Integer.valueOf(9))
nova chamada: assertEquals(map1.get(Integer.valueOf(36796)), Integer.valueOf(9), "Era esperado valores iguais, mas " + result9125 + " <map1.get(Integer.valueOf(36796))> é diferente de " + result9126 + " <Integer.valueOf(9)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(1)), Integer.valueOf(10))
nova chamada: assertEquals(map2.get(Integer.valueOf(1)), Integer.valueOf(10), "Era esperado valores iguais, mas " + result9127 + " <map2.get(Integer.valueOf(1))> é diferente de " + result9128 + " <Integer.valueOf(10)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(2)), Integer.valueOf(4))
nova chamada: assertEquals(map2.get(Integer.valueOf(2)), Integer.valueOf(4), "Era esperado valores iguais, mas " + result9129 + " <map2.get(Integer.valueOf(2))> é diferente de " + result9130 + " <Integer.valueOf(4)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(3)), Integer.valueOf(5))
nova chamada: assertEquals(map2.get(Integer.valueOf(3)), Integer.valueOf(5), "Era esperado valores iguais, mas " + result9131 + " <map2.get(Integer.valueOf(3))> é diferente de " + result9132 + " <Integer.valueOf(5)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(4)), Integer.valueOf(5))
nova chamada: assertEquals(map2.get(Integer.valueOf(4)), Integer.valueOf(5), "Era esperado valores iguais, mas " + result9133 + " <map2.get(Integer.valueOf(4))> é diferente de " + result9134 + " <Integer.valueOf(5)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(37306)), Integer.valueOf(98))
nova chamada: assertEquals(map2.get(Integer.valueOf(37306)), Integer.valueOf(98), "Era esperado valores iguais, mas " + result9135 + " <map2.get(Integer.valueOf(37306))> é diferente de " + result9136 + " <Integer.valueOf(98)>")
chamada antiga: assertEquals(map2.get(Integer.valueOf(36796)), Integer.valueOf(9))
nova chamada: assertEquals(map2.get(Integer.valueOf(36796)), Integer.valueOf(9), "Era esperado valores iguais, mas " + result9137 + " <map2.get(Integer.valueOf(36796))> é diferente de " + result9138 + " <Integer.valueOf(9)>")
chamada antiga: assertEquals(json, json1)
nova chamada: assertEquals(json, json1, "Era esperado valores iguais, mas  json é diferente de " + " json1")
chamada antiga: assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json)
nova chamada: assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json, "Era esperado valores iguais, mas  '{\'canRefuse\':true,\'code\':3,\'first\':false,\'last\':false,\'name\':\'FINAL_TRAIL\',\'nameCn\':\'公益委员会/理事会/理事长审核\'}' é diferente de " + " json")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow)
nova chamada: assertEquals("{\"v\":3.4028234663852886E38}", sFloatOverflow, "Era esperado valores iguais, mas  '{\'v\':3.4028234663852886E38}' é diferente de " + " sFloatOverflow")
chamada antiga: assertEquals(3.4028235E38F, floatVal.v)
nova chamada: assertEquals(3.4028235E38F, floatVal.v, "Era esperado valores iguais, mas  3.4028235E38F é diferente de " + " floatVal.v")
chamada antiga: assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"))
nova chamada: assertEquals(floatVal.v, Float.parseFloat("3.4028234663852886E38"), "Era esperado valores iguais, mas  floatVal.v é diferente de " + result9139 + " <Float.parseFloat('3.4028234663852886E38')>")
chamada antiga: assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow)
nova chamada: assertEquals("{\"v\":6.805646932770577E38}", sFloatOverflow, "Era esperado valores iguais, mas  '{\'v\':6.805646932770577E38}' é diferente de " + " sFloatOverflow")
chamada antiga: assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v)
nova chamada: assertEquals(Float.parseFloat("6.805646932770577E38"), floatVal.v, "Era esperado valores iguais, mas " + result9140 + " <Float.parseFloat('6.805646932770577E38')> é diferente de " + " floatVal.v")
chamada antiga: assertEquals("{\"_id\":1001,\"id\":1002}", json)
nova chamada: assertEquals("{\"_id\":1001,\"id\":1002}", json, "Era esperado valores iguais, mas  '{\'_id\':1001,\'id\':1002}' é diferente de " + " json")
chamada antiga: assertEquals(json, JSON.toJSONString(model1))
nova chamada: assertEquals(json, JSON.toJSONString(model1), "Era esperado valores iguais, mas  json é diferente de " + result9141 + " <JSON.toJSONString(model1)>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
nova chamada: assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json, "Era esperado valores iguais, mas  '{\'time1\':' + t1 + ',\'time2\':\'2017-09-22 15:08:56\'}' é diferente de " + " json")
chamada antiga: Assertions.assertEquals("{\"time1\":" + JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) + ",\"time2\":\"2017-09-22 15:08:56\"}", json)
nova chamada: assertEquals("{\"time1\":" + JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) + ",\"time2\":\"2017-09-22 15:08:56\"}", json, "Era esperado valores iguais, mas  '{\'time1\':' + JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) + ',\'time2\':\'2017-09-22 15:08:56\'}' é diferente de " + " json")
chamada antiga: Assertions.assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json)
nova chamada: assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json, "Era esperado valores iguais, mas  '{\'time1\':\'' + stime1 + '\',\'time2\':\'' + stime2 + '\'}' é diferente de " + " json")
chamada antiga: Assertions.assertEquals(1, resource.ret)
nova chamada: assertEquals(1, resource.ret, "Era esperado valores iguais, mas  1 é diferente de " + " resource.ret")
chamada antiga: Assertions.assertEquals("ok", resource.message)
nova chamada: assertEquals("ok", resource.message, "Era esperado valores iguais, mas  'ok' é diferente de " + " resource.message")
chamada antiga: Assertions.assertEquals(2, data.size())
nova chamada: assertEquals(2, data.size(), "Era esperado valores iguais, mas  2 é diferente de " + result9142 + " <data.size()>")
chamada antiga: Assertions.assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId)
nova chamada: assertEquals("11c53f541dee4f5bbc4f75f99002278c", app1.appId, "Era esperado valores iguais, mas  '11c53f541dee4f5bbc4f75f99002278c' é diferente de " + " app1.appId")
chamada antiga: assertEquals(0, model.hasSth)
nova chamada: assertEquals(0, model.hasSth, "Era esperado valores iguais, mas  0 é diferente de " + " model.hasSth")
chamada antiga: assertEquals(3, model.id)
nova chamada: assertEquals(3, model.id, "Era esperado valores iguais, mas  3 é diferente de " + " model.id")
chamada antiga: assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p))
nova chamada: assertEquals("{\"id\":\"001\",\"name\":\"顾客\"}", JSON.toJSONString(p), "Era esperado valores iguais, mas  '{\'id\':\'001\',\'name\':\'顾客\'}' é diferente de " + result9143 + " <JSON.toJSONString(p)>")
chamada antiga: assertEquals("{\"mD5\":\"xxx\"}", json)
nova chamada: assertEquals("{\"mD5\":\"xxx\"}", json, "Era esperado valores iguais, mas  '{\'mD5\':\'xxx\'}' é diferente de " + " json")
chamada antiga: assertEquals(1, s0.id)
nova chamada: assertEquals(1, s0.id, "Era esperado valores iguais, mas  1 é diferente de " + " s0.id")
chamada antiga: assertEquals(22, s0.age)
nova chamada: assertEquals(22, s0.age, "Era esperado valores iguais, mas  22 é diferente de " + " s0.age")
chamada antiga: assertEquals("hello", s0.name)
nova chamada: assertEquals("hello", s0.name, "Era esperado valores iguais, mas  'hello' é diferente de " + " s0.name")
chamada antiga: assertEquals(1, s1.id)
nova chamada: assertEquals(1, s1.id, "Era esperado valores iguais, mas  1 é diferente de " + " s1.id")
chamada antiga: assertEquals(22, s1.age)
nova chamada: assertEquals(22, s1.age, "Era esperado valores iguais, mas  22 é diferente de " + " s1.age")
chamada antiga: assertEquals("hhh", s1.name)
nova chamada: assertEquals("hhh", s1.name, "Era esperado valores iguais, mas  'hhh' é diferente de " + " s1.name")
chamada antiga: assertNull(model.flag)
nova chamada: assertNull(model.flag, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag)
nova chamada: assertSame(BuFlag.IS_NEED_CHECK_IDENTITY, model.flag, "Era esperado objetos iguais, mas  BuFlag.IS_NEED_CHECK_IDENTITY é diferente de " + " model.flag")
chamada antiga: assertEquals(str, JSON.toJSONString(resp1))
nova chamada: assertEquals(str, JSON.toJSONString(resp1), "Era esperado valores iguais, mas  str é diferente de " + result9144 + " <JSON.toJSONString(resp1)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(resp2))
nova chamada: assertEquals(str2, JSON.toJSONString(resp2), "Era esperado valores iguais, mas  str2 é diferente de " + result9145 + " <JSON.toJSONString(resp2)>")
chamada antiga: assertFalse(ok.v)
nova chamada: assertFalse(ok.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(bad.v)
nova chamada: assertFalse(bad.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(bad.v)
nova chamada: assertFalse(bad.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(bad.v)
nova chamada: assertFalse(bad.v, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("\"2018-08-31 15:26:37\"", json)
nova chamada: assertEquals("\"2018-08-31 15:26:37\"", json, "Era esperado valores iguais, mas  '\'2018-08-31 15:26:37\'' é diferente de " + " json")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9146 + " <v1.getValue()> é diferente de " + result9147 + " <v.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result9148 + " <user1.getValue()> é diferente de " + result9149 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result9150 + " <user1.getValue()> é diferente de " + result9151 + " <user.getValue()>")
chamada antiga: assertEquals(33, user.getValue().getPort())
nova chamada: assertEquals(33, user.getValue().getPort(), "Era esperado valores iguais, mas  33 é diferente de " + result9152 + " <user.getValue().getPort()>")
chamada antiga: assertEquals("{\"oAuth\":\"abc\"}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"oAuth\":\"abc\"}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'oAuth\':\'abc\'}' é diferente de " + result9153 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[{\"id\":0},{\"id\":1},{\"id\":2},{\"$ref\":\"$[0]\"},{\"$ref\":\"$[1]\"},{\"$ref\":\"$[2]\"}]", text)
nova chamada: assertEquals("[{\"id\":0},{\"id\":1},{\"id\":2},{\"$ref\":\"$[0]\"},{\"$ref\":\"$[1]\"},{\"$ref\":\"$[2]\"}]", text, "Era esperado valores iguais, mas  '[{\'id\':0},{\'id\':1},{\'id\':2},{\'$ref\':\'$[0]\'},{\'$ref\':\'$[1]\'},{\'$ref\':\'$[2]\'}]' é diferente de " + " text")
chamada antiga: assertEquals(6, groups.size())
nova chamada: assertEquals(6, groups.size(), "Era esperado valores iguais, mas  6 é diferente de " + result9154 + " <groups.size()>")
chamada antiga: assertSame(groups.get(0), groups.get(3))
nova chamada: assertSame(groups.get(0), groups.get(3), "Era esperado objetos iguais, mas " + result9155 + " <groups.get(0)> é diferente de " + result9156 + " <groups.get(3)>")
chamada antiga: assertSame(groups.get(1), groups.get(4))
nova chamada: assertSame(groups.get(1), groups.get(4), "Era esperado objetos iguais, mas " + result9157 + " <groups.get(1)> é diferente de " + result9158 + " <groups.get(4)>")
chamada antiga: assertSame(groups.get(2), groups.get(5))
nova chamada: assertSame(groups.get(2), groups.get(5), "Era esperado objetos iguais, mas " + result9159 + " <groups.get(2)> é diferente de " + result9160 + " <groups.get(5)>")
chamada antiga: assertEquals(0, groups.get(0).getId())
nova chamada: assertEquals(0, groups.get(0).getId(), "Era esperado valores iguais, mas  0 é diferente de " + result9161 + " <groups.get(0).getId()>")
chamada antiga: assertEquals(1, groups.get(1).getId())
nova chamada: assertEquals(1, groups.get(1).getId(), "Era esperado valores iguais, mas  1 é diferente de " + result9162 + " <groups.get(1).getId()>")
chamada antiga: assertEquals(2, groups.get(2).getId())
nova chamada: assertEquals(2, groups.get(2).getId(), "Era esperado valores iguais, mas  2 é diferente de " + result9163 + " <groups.get(2).getId()>")
chamada antiga: assertEquals(0, groups.get(3).getId())
nova chamada: assertEquals(0, groups.get(3).getId(), "Era esperado valores iguais, mas  0 é diferente de " + result9164 + " <groups.get(3).getId()>")
chamada antiga: assertEquals(1, groups.get(4).getId())
nova chamada: assertEquals(1, groups.get(4).getId(), "Era esperado valores iguais, mas  1 é diferente de " + result9165 + " <groups.get(4).getId()>")
chamada antiga: assertEquals(2, groups.get(5).getId())
nova chamada: assertEquals(2, groups.get(5).getId(), "Era esperado valores iguais, mas  2 é diferente de " + result9166 + " <groups.get(5).getId()>")
chamada antiga: assertEquals("A156", writer.toString())
nova chamada: assertEquals("A156", writer.toString(), "Era esperado valores iguais, mas  'A156' é diferente de " + result9167 + " <writer.toString()>")
chamada antiga: assertEquals("A156345", writer.toString())
nova chamada: assertEquals("A156345", writer.toString(), "Era esperado valores iguais, mas  'A156345' é diferente de " + result9168 + " <writer.toString()>")
chamada antiga: assertEquals("-1", writer.toString())
nova chamada: assertEquals("-1", writer.toString(), "Era esperado valores iguais, mas  '-1' é diferente de " + result9169 + " <writer.toString()>")
chamada antiga: assertEquals("-1,", writer.toString())
nova chamada: assertEquals("-1,", writer.toString(), "Era esperado valores iguais, mas  '-1,' é diferente de " + result9170 + " <writer.toString()>")
chamada antiga: assertEquals("-1", writer.toString())
nova chamada: assertEquals("-1", writer.toString(), "Era esperado valores iguais, mas  '-1' é diferente de " + result9171 + " <writer.toString()>")
chamada antiga: assertEquals("-1,", writer.toString())
nova chamada: assertEquals("-1,", writer.toString(), "Era esperado valores iguais, mas  '-1,' é diferente de " + result9172 + " <writer.toString()>")
chamada antiga: assertEquals("-1,", writer.toString())
nova chamada: assertEquals("-1,", writer.toString(), "Era esperado valores iguais, mas  '-1,' é diferente de " + result9173 + " <writer.toString()>")
chamada antiga: assertEquals("null", writer.toString())
nova chamada: assertEquals("null", writer.toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result9174 + " <writer.toString()>")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertEquals("string", m2.getString())
nova chamada: assertEquals("string", m2.getString(), "Era esperado valores iguais, mas  'string' é diferente de " + result9175 + " <m2.getString()>")
chamada antiga: assertEquals(false, m2.isaBoolean())
nova chamada: assertEquals(false, m2.isaBoolean(), "Era esperado valores iguais, mas  false é diferente de " + result9176 + " <m2.isaBoolean()>")
chamada antiga: assertEquals(true, m2.getaBoolean2().booleanValue())
nova chamada: assertEquals(true, m2.getaBoolean2().booleanValue(), "Era esperado valores iguais, mas  true é diferente de " + result9177 + " <m2.getaBoolean2().booleanValue()>")
chamada antiga: assertEquals(0, m2.getAnInt())
nova chamada: assertEquals(0, m2.getAnInt(), "Era esperado valores iguais, mas  0 é diferente de " + result9178 + " <m2.getAnInt()>")
chamada antiga: assertEquals(888, m2.getInteger().intValue())
nova chamada: assertEquals(888, m2.getInteger().intValue(), "Era esperado valores iguais, mas  888 é diferente de " + result9179 + " <m2.getInteger().intValue()>")
chamada antiga: assertEquals(0, m2.getaShort())
nova chamada: assertEquals(0, m2.getaShort(), "Era esperado valores iguais, mas  0 é diferente de " + result9180 + " <m2.getaShort()>")
chamada antiga: assertEquals(88, m2.getaShort2().shortValue())
nova chamada: assertEquals(88, m2.getaShort2().shortValue(), "Era esperado valores iguais, mas  88 é diferente de " + result9181 + " <m2.getaShort2().shortValue()>")
chamada antiga: assertEquals('\u0000', m2.getaChar())
nova chamada: assertEquals('\u0000', m2.getaChar(), "Era esperado valores iguais, mas  '\u0000' é diferente de " + result9182 + " <m2.getaChar()>")
chamada antiga: assertEquals('J', m2.getCharacter().charValue())
nova chamada: assertEquals('J', m2.getCharacter().charValue(), "Era esperado valores iguais, mas  'J' é diferente de " + result9183 + " <m2.getCharacter().charValue()>")
chamada antiga: assertEquals(0, m2.getaByte())
nova chamada: assertEquals(0, m2.getaByte(), "Era esperado valores iguais, mas  0 é diferente de " + result9184 + " <m2.getaByte()>")
chamada antiga: assertEquals(8, m2.getaByte2().byteValue())
nova chamada: assertEquals(8, m2.getaByte2().byteValue(), "Era esperado valores iguais, mas  8 é diferente de " + result9185 + " <m2.getaByte2().byteValue()>")
chamada antiga: assertEquals(0, m2.getaLong())
nova chamada: assertEquals(0, m2.getaLong(), "Era esperado valores iguais, mas  0 é diferente de " + result9186 + " <m2.getaLong()>")
chamada antiga: assertEquals(8888, m2.getaLong2().longValue())
nova chamada: assertEquals(8888, m2.getaLong2().longValue(), "Era esperado valores iguais, mas  8888 é diferente de " + result9187 + " <m2.getaLong2().longValue()>")
chamada antiga: assertEquals("0.0", "" + m2.getaFloat())
nova chamada: assertEquals("0.0", "" + m2.getaFloat(), "Era esperado valores iguais, mas  '0.0' é diferente de " + " '' + m2.getaFloat()")
chamada antiga: assertEquals("8.8", "" + m2.getaFloat2())
nova chamada: assertEquals("8.8", "" + m2.getaFloat2(), "Era esperado valores iguais, mas  '8.8' é diferente de " + " '' + m2.getaFloat2()")
chamada antiga: assertEquals("0.0", "" + m2.getaDouble())
nova chamada: assertEquals("0.0", "" + m2.getaDouble(), "Era esperado valores iguais, mas  '0.0' é diferente de " + " '' + m2.getaDouble()")
chamada antiga: assertEquals("88.88", "" + m2.getaDouble2())
nova chamada: assertEquals("88.88", "" + m2.getaDouble2(), "Era esperado valores iguais, mas  '88.88' é diferente de " + " '' + m2.getaDouble2()")
chamada antiga: assertEquals("test", m2.getString())
nova chamada: assertEquals("test", m2.getString(), "Era esperado valores iguais, mas  'test' é diferente de " + result9188 + " <m2.getString()>")
chamada antiga: assertEquals(true, m2.isaBoolean())
nova chamada: assertEquals(true, m2.isaBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result9189 + " <m2.isaBoolean()>")
chamada antiga: assertEquals(false, m2.getaBoolean2().booleanValue())
nova chamada: assertEquals(false, m2.getaBoolean2().booleanValue(), "Era esperado valores iguais, mas  false é diferente de " + result9190 + " <m2.getaBoolean2().booleanValue()>")
chamada antiga: assertEquals(888, m2.getAnInt())
nova chamada: assertEquals(888, m2.getAnInt(), "Era esperado valores iguais, mas  888 é diferente de " + result9191 + " <m2.getAnInt()>")
chamada antiga: assertEquals(999, m2.getInteger().intValue())
nova chamada: assertEquals(999, m2.getInteger().intValue(), "Era esperado valores iguais, mas  999 é diferente de " + result9192 + " <m2.getInteger().intValue()>")
chamada antiga: assertEquals(88, m2.getaShort())
nova chamada: assertEquals(88, m2.getaShort(), "Era esperado valores iguais, mas  88 é diferente de " + result9193 + " <m2.getaShort()>")
chamada antiga: assertEquals(99, m2.getaShort2().shortValue())
nova chamada: assertEquals(99, m2.getaShort2().shortValue(), "Era esperado valores iguais, mas  99 é diferente de " + result9194 + " <m2.getaShort2().shortValue()>")
chamada antiga: assertEquals('J', m2.getaChar())
nova chamada: assertEquals('J', m2.getaChar(), "Era esperado valores iguais, mas  'J' é diferente de " + result9195 + " <m2.getaChar()>")
chamada antiga: assertEquals('C', m2.getCharacter().charValue())
nova chamada: assertEquals('C', m2.getCharacter().charValue(), "Era esperado valores iguais, mas  'C' é diferente de " + result9196 + " <m2.getCharacter().charValue()>")
chamada antiga: assertEquals(8, m2.getaByte())
nova chamada: assertEquals(8, m2.getaByte(), "Era esperado valores iguais, mas  8 é diferente de " + result9197 + " <m2.getaByte()>")
chamada antiga: assertEquals(9, m2.getaByte2().byteValue())
nova chamada: assertEquals(9, m2.getaByte2().byteValue(), "Era esperado valores iguais, mas  9 é diferente de " + result9198 + " <m2.getaByte2().byteValue()>")
chamada antiga: assertEquals(8888, m2.getaLong())
nova chamada: assertEquals(8888, m2.getaLong(), "Era esperado valores iguais, mas  8888 é diferente de " + result9199 + " <m2.getaLong()>")
chamada antiga: assertEquals(9999, m2.getaLong2().longValue())
nova chamada: assertEquals(9999, m2.getaLong2().longValue(), "Era esperado valores iguais, mas  9999 é diferente de " + result9200 + " <m2.getaLong2().longValue()>")
chamada antiga: assertEquals("8.8", "" + m2.getaFloat())
nova chamada: assertEquals("8.8", "" + m2.getaFloat(), "Era esperado valores iguais, mas  '8.8' é diferente de " + " '' + m2.getaFloat()")
chamada antiga: assertEquals("9.9", "" + m2.getaFloat2())
nova chamada: assertEquals("9.9", "" + m2.getaFloat2(), "Era esperado valores iguais, mas  '9.9' é diferente de " + " '' + m2.getaFloat2()")
chamada antiga: assertEquals("88.88", "" + m2.getaDouble())
nova chamada: assertEquals("88.88", "" + m2.getaDouble(), "Era esperado valores iguais, mas  '88.88' é diferente de " + " '' + m2.getaDouble()")
chamada antiga: assertEquals("99.99", "" + m2.getaDouble2())
nova chamada: assertEquals("99.99", "" + m2.getaDouble2(), "Era esperado valores iguais, mas  '99.99' é diferente de " + " '' + m2.getaDouble2()")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals(vo.getId(), vo2.getId())
nova chamada: assertEquals(vo.getId(), vo2.getId(), "Era esperado valores iguais, mas " + result9201 + " <vo.getId()> é diferente de " + result9202 + " <vo2.getId()>")
chamada antiga: assertEquals(vo.getName(), vo2.getName())
nova chamada: assertEquals(vo.getName(), vo2.getName(), "Era esperado valores iguais, mas " + result9203 + " <vo.getName()> é diferente de " + result9204 + " <vo2.getName()>")
chamada antiga: assertEquals("[true,\"wenshao\"]", text)
nova chamada: assertEquals("[true,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[true,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[123.0,\"wenshao\"]", text)
nova chamada: assertEquals("[123.0,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123.0,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals(vo.id, vo2.id)
nova chamada: assertEquals(vo.id, vo2.id, "Era esperado valores iguais, mas  vo.id é diferente de " + " vo2.id")
chamada antiga: assertEquals(vo.name, vo2.name)
nova chamada: assertEquals(vo.name, vo2.name, "Era esperado valores iguais, mas  vo.name é diferente de " + " vo2.name")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[\"x\",\"wenshao\"]", text)
nova chamada: assertEquals("[\"x\",\"wenshao\"]", text, "Era esperado valores iguais, mas  '[\'x\',\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals("[123,\"wenshao\"]", text)
nova chamada: assertEquals("[123,\"wenshao\"]", text, "Era esperado valores iguais, mas  '[123,\'wenshao\']' é diferente de " + " text")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9205 + " <obj.getClass()>")
chamada antiga: assertEquals(jsonObject, obj)
nova chamada: assertEquals(jsonObject, obj, "Era esperado valores iguais, mas  jsonObject é diferente de " + " obj")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9206 + " <obj.getClass()>")
chamada antiga: assertEquals(jsonObject, obj)
nova chamada: assertEquals(jsonObject, obj, "Era esperado valores iguais, mas  jsonObject é diferente de " + " obj")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9207 + " <obj.getClass()>")
chamada antiga: assertEquals(jsonObject, obj)
nova chamada: assertEquals(jsonObject, obj, "Era esperado valores iguais, mas  jsonObject é diferente de " + " obj")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9208 + " <obj.getClass()>")
chamada antiga: assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj))
nova chamada: assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj), "Era esperado valores iguais, mas " + result9209 + " <jsonObject.toJSONString()> é diferente de " + result9210 + " <JSON.toJSONString(obj)>")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9211 + " <obj.getClass()>")
chamada antiga: assertEquals(JSONObject.class, obj.getClass())
nova chamada: assertEquals(JSONObject.class, obj.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9212 + " <obj.getClass()>")
chamada antiga: assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj))
nova chamada: assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj), "Era esperado valores iguais, mas " + result9213 + " <jsonObject.toJSONString()> é diferente de " + result9214 + " <JSON.toJSONString(obj)>")
chamada antiga: assertNotNull(exception)
nova chamada: assertNotNull(exception, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(NullPointerException.class, exception.getCause().getClass())
nova chamada: assertEquals(NullPointerException.class, exception.getCause().getClass(), "Era esperado valores iguais, mas  NullPointerException.class é diferente de " + result9215 + " <exception.getCause().getClass()>")
chamada antiga: assertNotNull(exception)
nova chamada: assertNotNull(exception, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(NullPointerException.class, exception.getCause().getClass())
nova chamada: assertEquals(NullPointerException.class, exception.getCause().getClass(), "Era esperado valores iguais, mas  NullPointerException.class é diferente de " + result9216 + " <exception.getCause().getClass()>")
chamada antiga: assertNotNull(exception)
nova chamada: assertNotNull(exception, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(NullPointerException.class, exception.getCause().getClass())
nova chamada: assertEquals(NullPointerException.class, exception.getCause().getClass(), "Era esperado valores iguais, mas  NullPointerException.class é diferente de " + result9217 + " <exception.getCause().getClass()>")
chamada antiga: assertEquals("name", c1.name)
nova chamada: assertEquals("name", c1.name, "Era esperado valores iguais, mas  'name' é diferente de " + " c1.name")
chamada antiga: assertEquals(1, c1.id)
nova chamada: assertEquals(1, c1.id, "Era esperado valores iguais, mas  1 é diferente de " + " c1.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("name", c1.name)
nova chamada: assertEquals("name", c1.name, "Era esperado valores iguais, mas  'name' é diferente de " + " c1.name")
chamada antiga: assertEquals(1, c1.id)
nova chamada: assertEquals(1, c1.id, "Era esperado valores iguais, mas  1 é diferente de " + " c1.id")
chamada antiga: assertEquals("user", c2.name)
nova chamada: assertEquals("user", c2.name, "Era esperado valores iguais, mas  'user' é diferente de " + " c2.name")
chamada antiga: assertEquals(2, c2.id)
nova chamada: assertEquals(2, c2.id, "Era esperado valores iguais, mas  2 é diferente de " + " c2.id")
chamada antiga: assertEquals("2", o.data.get(1))
nova chamada: assertEquals("2", o.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result9218 + " <o.data.get(1)>")
chamada antiga: assertEquals("2", o.data.get(1))
nova chamada: assertEquals("2", o.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result9219 + " <o.data.get(1)>")
chamada antiga: assertEquals("2", object.data.get(1))
nova chamada: assertEquals("2", object.data.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result9220 + " <object.data.get(1)>")
chamada antiga: assertEquals(1, a.a)
nova chamada: assertEquals(1, a.a, "Era esperado valores iguais, mas  1 é diferente de " + " a.a")
chamada antiga: assertEquals(1, count.intValue())
nova chamada: assertEquals(1, count.intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result9221 + " <count.intValue()>")
chamada antiga: assertEquals(1, b.a)
nova chamada: assertEquals(1, b.a, "Era esperado valores iguais, mas  1 é diferente de " + " b.a")
chamada antiga: assertEquals(2, count.intValue())
nova chamada: assertEquals(2, count.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result9222 + " <count.intValue()>")
chamada antiga: assertEquals("{\"type\":\"TypeA\"}", text)
nova chamada: assertEquals("{\"type\":\"TypeA\"}", text, "Era esperado valores iguais, mas  '{\'type\':\'TypeA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{}", text)
nova chamada: assertEquals("{}", text, "Era esperado valores iguais, mas  '{}' é diferente de " + " text")
chamada antiga: assertEquals("0.01", message.get("pay_fee").get(0))
nova chamada: assertEquals("0.01", message.get("pay_fee").get(0), "Era esperado valores iguais, mas  '0.01' é diferente de " + result9223 + " <message.get('pay_fee').get(0)>")
chamada antiga: assertEquals("0.01", pushHttpMessage.getMessage().get("pay_fee").get(0))
nova chamada: assertEquals("0.01", pushHttpMessage.getMessage().get("pay_fee").get(0), "Era esperado valores iguais, mas  '0.01' é diferente de " + result9224 + " <pushHttpMessage.getMessage().get('pay_fee').get(0)>")
chamada antiga: assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat))
nova chamada: assertEquals("\"2017-06-29T10:36:30+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat), "Era esperado valores iguais, mas  '\'2017-06-29T10:36:30+08:00\'' é diferente de " + result9225 + " <JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat)>")
chamada antiga: assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat))
nova chamada: assertEquals("\"2017-08-15T20:00:00+08:00\"", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat), "Era esperado valores iguais, mas  '\'2017-08-15T20:00:00+08:00\'' é diferente de " + result9226 + " <JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat)>")
chamada antiga: assertEquals("{\"_parentId\":\"001\"}", test)
nova chamada: assertEquals("{\"_parentId\":\"001\"}", test, "Era esperado valores iguais, mas  '{\'_parentId\':\'001\'}' é diferente de " + " test")
chamada antiga: assertEquals("{\"_parentId\":\"001\"}", testB)
nova chamada: assertEquals("{\"_parentId\":\"001\"}", testB, "Era esperado valores iguais, mas  '{\'_parentId\':\'001\'}' é diferente de " + " testB")
chamada antiga: assertEquals("{\"type\":\"TypeA\"}", text)
nova chamada: assertEquals("{\"type\":\"TypeA\"}", text, "Era esperado valores iguais, mas  '{\'type\':\'TypeA\'}' é diferente de " + " text")
chamada antiga: assertEquals(123, ((JSONObject) t).getIntValue("id"))
nova chamada: assertEquals(123, ((JSONObject) t).getIntValue("id"), "Era esperado valores iguais, mas  123 é diferente de " + result9227 + " <((JSONObject) t).getIntValue('id')>")
chamada antiga: assertEquals(123, t1.id)
nova chamada: assertEquals(123, t1.id, "Era esperado valores iguais, mas  123 é diferente de " + " t1.id")
chamada antiga: assertEquals(123, t2.id)
nova chamada: assertEquals(123, t2.id, "Era esperado valores iguais, mas  123 é diferente de " + " t2.id")
chamada antiga: assertSame(type1, type2)
nova chamada: assertSame(type1, type2, "Era esperado objetos iguais, mas  type1 é diferente de " + " type2")
chamada antiga: assertEquals("{}", test)
nova chamada: assertEquals("{}", test, "Era esperado valores iguais, mas  '{}' é diferente de " + " test")
chamada antiga: assertEquals("{\"ab\":{}}", testC)
nova chamada: assertEquals("{\"ab\":{}}", testC, "Era esperado valores iguais, mas  '{\'ab\':{}}' é diferente de " + " testC")
chamada antiga: assertEquals("{\"ab\":{}}", testD)
nova chamada: assertEquals("{\"ab\":{}}", testD, "Era esperado valores iguais, mas  '{\'ab\':{}}' é diferente de " + " testD")
chamada antiga: assertTrue(jsonString.contains("Mike"))
nova chamada: assertTrue(jsonString.contains("Mike"), "Era esperado verdadeiro, mas " + result9228 + " <jsonString.contains('Mike')> é falso")
chamada antiga: assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json)
nova chamada: assertEquals("[\"a\",\"b\",\"\",\"d\",\"\"]", json, "Era esperado valores iguais, mas  '[\'a\',\'b\',\'\',\'d\',\'\']' é diferente de " + " json")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(floorV2.templateId)
nova chamada: assertNotNull(floorV2.templateId, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertEquals("floorV2", floorV2.type)
nova chamada: assertEquals("floorV2", floorV2.type, "Era esperado valores iguais, mas  'floorV2' é diferente de " + " floorV2.type")
chamada antiga: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
nova chamada: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2, "Era esperado valores iguais, mas  '{\'type\':\'floorV2\',\'templateId\':\'x123\'}' é diferente de " + " json2")
chamada antiga: assertNotNull(model.date)
nova chamada: assertNotNull(model.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"test\":[\"11111\"]}", str)
nova chamada: assertEquals("{\"test\":[\"11111\"]}", str, "Era esperado valores iguais, mas  '{\'test\':[\'11111\']}' é diferente de " + " str")
chamada antiga: assertNotNull(floorV2)
nova chamada: assertNotNull(floorV2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(floorV2.templateId)
nova chamada: assertNotNull(floorV2.templateId, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("x123", floorV2.templateId)
nova chamada: assertEquals("x123", floorV2.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " floorV2.templateId")
chamada antiga: assertEquals("floorV2", floorV2.type)
nova chamada: assertEquals("floorV2", floorV2.type, "Era esperado valores iguais, mas  'floorV2' é diferente de " + " floorV2.type")
chamada antiga: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2)
nova chamada: assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2, "Era esperado valores iguais, mas  '{\'type\':\'floorV2\',\'templateId\':\'x123\'}' é diferente de " + " json2")
chamada antiga: assertEquals(myException.getCode(), myException1.getCode())
nova chamada: assertEquals(myException.getCode(), myException1.getCode(), "Era esperado valores iguais, mas " + result9229 + " <myException.getCode()> é diferente de " + result9230 + " <myException1.getCode()>")
chamada antiga: assertEquals(myException.getMessage(), myException1.getMessage())
nova chamada: assertEquals(myException.getMessage(), myException1.getMessage(), "Era esperado valores iguais, mas " + result9231 + " <myException.getMessage()> é diferente de " + result9232 + " <myException1.getMessage()>")
chamada antiga: assertEquals('c', tb1.getC())
nova chamada: assertEquals('c', tb1.getC(), "Era esperado valores iguais, mas  'c' é diferente de " + result9233 + " <tb1.getC()>")
chamada antiga: assertEquals('c', tb2.getC().charValue())
nova chamada: assertEquals('c', tb2.getC().charValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result9234 + " <tb2.getC().charValue()>")
chamada antiga: assertEquals('c', tb12.getC())
nova chamada: assertEquals('c', tb12.getC(), "Era esperado valores iguais, mas  'c' é diferente de " + result9235 + " <tb12.getC()>")
chamada antiga: assertEquals('c', tb22.getC().charValue())
nova chamada: assertEquals('c', tb22.getC().charValue(), "Era esperado valores iguais, mas  'c' é diferente de " + result9236 + " <tb22.getC().charValue()>")
chamada antiga: assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString)
nova chamada: assertEquals("{\"id\":1,\"nt\":\"name\"}", jsonString, "Era esperado valores iguais, mas  '{\'id\':1,\'nt\':\'name\'}' é diferente de " + " jsonString")
chamada antiga: assertTrue(parsed instanceof JSONObject)
nova chamada: assertTrue(parsed instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass())
nova chamada: assertEquals(JSONObject.class, ((JSONObject) parsed).get("data").getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9237 + " <((JSONObject) parsed).get('data').getClass()>")
chamada antiga: assertNotNull(result.data)
nova chamada: assertNotNull(result.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(result.data instanceof Data)
nova chamada: assertTrue(result.data instanceof Data, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(result2.data)
nova chamada: assertNotNull(result2.data, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(result2.data instanceof List)
nova chamada: assertTrue(result2.data instanceof List, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, result2.data.size())
nova chamada: assertEquals(0, result2.data.size(), "Era esperado valores iguais, mas  0 é diferente de " + result9238 + " <result2.data.size()>")
chamada antiga: fail("should be failed due to error json")
nova chamada: fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
chamada antiga: assertNull(test.idType)
nova chamada: assertNull(test.idType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(test.userType)
nova chamada: assertNull(test.userType, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("5", JSON.toJSONString(5L))
nova chamada: assertEquals("5", JSON.toJSONString(5L), "Era esperado valores iguais, mas  '5' é diferente de " + result9239 + " <JSON.toJSONString(5L)>")
chamada antiga: assertEquals("5.5", JSON.toJSONString(new BigDecimal("5.5")))
nova chamada: assertEquals("5.5", JSON.toJSONString(new BigDecimal("5.5")), "Era esperado valores iguais, mas  '5.5' é diferente de " + result9240 + " <JSON.toJSONString(new BigDecimal('5.5'))>")
chamada antiga: assertEquals("5", JSON.toJSONString(new BigDecimal("5")))
nova chamada: assertEquals("5", JSON.toJSONString(new BigDecimal("5")), "Era esperado valores iguais, mas  '5' é diferente de " + result9241 + " <JSON.toJSONString(new BigDecimal('5'))>")
chamada antiga: assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")))
nova chamada: assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")), "Era esperado valores iguais, mas  '0.1' é diferente de " + result9242 + " <JSON.toJSONString(new BigDecimal('0.1'))>")
chamada antiga: assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")))
nova chamada: assertEquals("0.1", JSON.toJSONString(new BigDecimal("0.1")), "Era esperado valores iguais, mas  '0.1' é diferente de " + result9243 + " <JSON.toJSONString(new BigDecimal('0.1'))>")
chamada antiga: assertEquals("3.14159265358979323846264338327950288419716939937510", JSON.toJSONString(new BigDecimal("3.14159265358979323846264338327950288419716939937510")))
nova chamada: assertEquals("3.14159265358979323846264338327950288419716939937510", JSON.toJSONString(new BigDecimal("3.14159265358979323846264338327950288419716939937510")), "Era esperado valores iguais, mas  '3.14159265358979323846264338327950288419716939937510' é diferente de " + result9244 + " <JSON.toJSONString(new BigDecimal('3.14159265358979323846264338327950288419716939937510'))>")
chamada antiga: assertEquals(0, JSON.parse("+0"))
nova chamada: assertEquals(0, JSON.parse("+0"), "Era esperado valores iguais, mas  0 é diferente de " + result9245 + " <JSON.parse('+0')>")
chamada antiga: assertEquals("0", JSON.toJSONString(0))
nova chamada: assertEquals("0", JSON.toJSONString(0), "Era esperado valores iguais, mas  '0' é diferente de " + result9246 + " <JSON.toJSONString(0)>")
chamada antiga: assertEquals("1", JSON.toJSONString(1))
nova chamada: assertEquals("1", JSON.toJSONString(1), "Era esperado valores iguais, mas  '1' é diferente de " + result9247 + " <JSON.toJSONString(1)>")
chamada antiga: assertEquals("123456789", JSON.toJSONString(123456789))
nova chamada: assertEquals("123456789", JSON.toJSONString(123456789), "Era esperado valores iguais, mas  '123456789' é diferente de " + result9248 + " <JSON.toJSONString(123456789)>")
chamada antiga: assertEquals("-123456789", JSON.toJSONString(-123456789))
nova chamada: assertEquals("-123456789", JSON.toJSONString(-123456789), "Era esperado valores iguais, mas  '-123456789' é diferente de " + result9249 + " <JSON.toJSONString(-123456789)>")
chamada antiga: assertEquals("2147483647", JSON.toJSONString(Integer.MAX_VALUE))
nova chamada: assertEquals("2147483647", JSON.toJSONString(Integer.MAX_VALUE), "Era esperado valores iguais, mas  '2147483647' é diferente de " + result9250 + " <JSON.toJSONString(Integer.MAX_VALUE)>")
chamada antiga: assertEquals(text, JSON.toJSONString(JSON.parse(text)))
nova chamada: assertEquals(text, JSON.toJSONString(JSON.parse(text)), "Era esperado valores iguais, mas  text é diferente de " + result9251 + " <JSON.toJSONString(JSON.parse(text))>")
chamada antiga: assertEquals("0.0", JSON.toJSONString(0.0))
nova chamada: assertEquals("0.0", JSON.toJSONString(0.0), "Era esperado valores iguais, mas  '0.0' é diferente de " + result9252 + " <JSON.toJSONString(0.0)>")
chamada antiga: assertEquals("-0.0", JSON.toJSONString(-0.0F))
nova chamada: assertEquals("-0.0", JSON.toJSONString(-0.0F), "Era esperado valores iguais, mas  '-0.0' é diferente de " + result9253 + " <JSON.toJSONString(-0.0F)>")
chamada antiga: assertEquals("1.0", JSON.toJSONString(1.0))
nova chamada: assertEquals("1.0", JSON.toJSONString(1.0), "Era esperado valores iguais, mas  '1.0' é diferente de " + result9254 + " <JSON.toJSONString(1.0)>")
chamada antiga: assertEquals("0.1", JSON.toJSONString(0.1))
nova chamada: assertEquals("0.1", JSON.toJSONString(0.1), "Era esperado valores iguais, mas  '0.1' é diferente de " + result9255 + " <JSON.toJSONString(0.1)>")
chamada antiga: assertEquals("3.141592653589793", JSON.toJSONString(Math.PI))
nova chamada: assertEquals("3.141592653589793", JSON.toJSONString(Math.PI), "Era esperado valores iguais, mas  '3.141592653589793' é diferente de " + result9256 + " <JSON.toJSONString(Math.PI)>")
chamada antiga: assertEquals("5.187848314319592E49", JSON.toJSONString(doubeValue))
nova chamada: assertEquals("5.187848314319592E49", JSON.toJSONString(doubeValue), "Era esperado valores iguais, mas  '5.187848314319592E49' é diferente de " + result9257 + " <JSON.toJSONString(doubeValue)>")
chamada antiga: assertTrue(json.equals("1.9275814160560206E-50") || json.equals("1.9275814160560204E-50"))
nova chamada: assertTrue(json.equals("1.9275814160560206E-50") || json.equals("1.9275814160560204E-50"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(entity.getId(), entity2.getId())
nova chamada: assertEquals(entity.getId(), entity2.getId(), "Era esperado valores iguais, mas " + result9258 + " <entity.getId()> é diferente de " + result9259 + " <entity2.getId()>")
chamada antiga: assertEquals(entity.getName(), entity2.getName())
nova chamada: assertEquals(entity.getName(), entity2.getName(), "Era esperado valores iguais, mas " + result9260 + " <entity.getName()> é diferente de " + result9261 + " <entity2.getName()>")
chamada antiga: assertEquals(clazz.getName(), object.getClass().getName())
nova chamada: assertEquals(clazz.getName(), object.getClass().getName(), "Era esperado valores iguais, mas " + result9262 + " <clazz.getName()> é diferente de " + result9263 + " <object.getClass().getName()>")
chamada antiga: assertEquals(JSONObject.class, object2.getClass())
nova chamada: assertEquals(JSONObject.class, object2.getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result9264 + " <object2.getClass()>")
chamada antiga: assertNotNull(parse.get(1))
nova chamada: assertNotNull(parse.get(1), "Era esperado não nulo, mas " + result9265 + " <parse.get(1)> é nulo")
chamada antiga: assertFalse(JSONValidator.from(body).validate())
nova chamada: assertFalse(JSONValidator.from(body).validate(), "Era esperado falso, mas " + result9266 + " <JSONValidator.from(body).validate()> é verdadeiro ")
chamada antiga: Assertions.assertEquals("Array", type.name())
nova chamada: assertEquals("Array", type.name(), "Era esperado valores iguais, mas  'Array' é diferente de " + result9267 + " <type.name()>")
chamada antiga: assertEquals("{\"__password\":\"test\"}", str)
nova chamada: assertEquals("{\"__password\":\"test\"}", str, "Era esperado valores iguais, mas  '{\'__password\':\'test\'}' é diferente de " + " str")
chamada antiga: assertEquals("CMDB_UPDATE_SERVER", step.getComponentKey())
nova chamada: assertEquals("CMDB_UPDATE_SERVER", step.getComponentKey(), "Era esperado valores iguais, mas  'CMDB_UPDATE_SERVER' é diferente de " + result9268 + " <step.getComponentKey()>")
chamada antiga: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json)
nova chamada: assertEquals("{\"path\":\"E:/my-code/test/test-fastjson.txt\"}", json, "Era esperado valores iguais, mas  '{\'path\':\'E:/my-code/test/test-fastjson.txt\'}' é diferente de " + " json")
chamada antiga: assertEquals(fileSystemResource.getPath(), fsr1.getPath())
nova chamada: assertEquals(fileSystemResource.getPath(), fsr1.getPath(), "Era esperado valores iguais, mas " + result9269 + " <fileSystemResource.getPath()> é diferente de " + result9270 + " <fsr1.getPath()>")
chamada antiga: fail("should be failed due to error json", "A execução falhou por uma causa deliberada")
nova chamada: fail("should be failed due to error json", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: Assertions.assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result9271 + " <validator.validate()> é falso")
chamada antiga: assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":null},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s)
nova chamada: assertEquals("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":null},\"owner\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"}}", s, "Era esperado valores iguais, mas  '{\'agent\':null,\'creator\':{\'account\':\'account\',\'name\':\'name\',\'workid\':null},\'owner\':{\'account\':\'account\',\'name\':\'name\',\'workid\':\'\'}}' é diferente de " + " s")
chamada antiga: assertNotNull(config.creator)
nova chamada: assertNotNull(config.creator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(config.agent)
nova chamada: assertNull(config.agent, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(json.getLong("A").longValue(), 55L)
nova chamada: assertEquals(json.getLong("A").longValue(), 55L, "Era esperado valores iguais, mas " + result9272 + " <json.getLong('A').longValue()> é diferente de " + " 55L")
chamada antiga: assertEquals(json.getLong("B").longValue(), 55L)
nova chamada: assertEquals(json.getLong("B").longValue(), 55L, "Era esperado valores iguais, mas " + result9273 + " <json.getLong('B').longValue()> é diferente de " + " 55L")
chamada antiga: assertEquals(json.getLong("C"), null)
nova chamada: assertEquals(json.getLong("C"), null, "Era esperado valores iguais, mas " + result9274 + " <json.getLong('C')> é diferente de " + " null")
chamada antiga: assertEquals(json.getBooleanValue("K"), true)
nova chamada: assertEquals(json.getBooleanValue("K"), true, "Era esperado valores iguais, mas " + result9275 + " <json.getBooleanValue('K')> é diferente de " + " true")
chamada antiga: assertEquals(json.getBoolean("K"), Boolean.TRUE)
nova chamada: assertEquals(json.getBoolean("K"), Boolean.TRUE, "Era esperado valores iguais, mas " + result9276 + " <json.getBoolean('K')> é diferente de " + " Boolean.TRUE")
chamada antiga: assertEquals(json.getLong("A").longValue(), 55L)
nova chamada: assertEquals(json.getLong("A").longValue(), 55L, "Era esperado valores iguais, mas " + result9277 + " <json.getLong('A').longValue()> é diferente de " + " 55L")
chamada antiga: assertEquals(json.getLong("B").longValue(), 55L)
nova chamada: assertEquals(json.getLong("B").longValue(), 55L, "Era esperado valores iguais, mas " + result9278 + " <json.getLong('B').longValue()> é diferente de " + " 55L")
chamada antiga: assertEquals(json.getLong("C"), null)
nova chamada: assertEquals(json.getLong("C"), null, "Era esperado valores iguais, mas " + result9279 + " <json.getLong('C')> é diferente de " + " null")
chamada antiga: assertEquals(json.getDate("A").getTime(), currentTimeMillis)
nova chamada: assertEquals(json.getDate("A").getTime(), currentTimeMillis, "Era esperado valores iguais, mas " + result9280 + " <json.getDate('A').getTime()> é diferente de " + " currentTimeMillis")
chamada antiga: assertEquals(json.getDate("B").getTime(), currentTimeMillis)
nova chamada: assertEquals(json.getDate("B").getTime(), currentTimeMillis, "Era esperado valores iguais, mas " + result9281 + " <json.getDate('B').getTime()> é diferente de " + " currentTimeMillis")
chamada antiga: assertEquals(json.getLong("C"), null)
nova chamada: assertEquals(json.getLong("C"), null, "Era esperado valores iguais, mas " + result9282 + " <json.getLong('C')> é diferente de " + " null")
chamada antiga: assertEquals(json.getBoolean("A").booleanValue(), true)
nova chamada: assertEquals(json.getBoolean("A").booleanValue(), true, "Era esperado valores iguais, mas " + result9283 + " <json.getBoolean('A').booleanValue()> é diferente de " + " true")
chamada antiga: assertEquals(json.getLong("C"), null)
nova chamada: assertEquals(json.getLong("C"), null, "Era esperado valores iguais, mas " + result9284 + " <json.getLong('C')> é diferente de " + " null")
chamada antiga: assertEquals(json.getInteger("A").intValue(), 55)
nova chamada: assertEquals(json.getInteger("A").intValue(), 55, "Era esperado valores iguais, mas " + result9285 + " <json.getInteger('A').intValue()> é diferente de " + " 55")
chamada antiga: assertEquals(json.getInteger("B").intValue(), 55)
nova chamada: assertEquals(json.getInteger("B").intValue(), 55, "Era esperado valores iguais, mas " + result9286 + " <json.getInteger('B').intValue()> é diferente de " + " 55")
chamada antiga: assertEquals(json.getInteger("C"), null)
nova chamada: assertEquals(json.getInteger("C"), null, "Era esperado valores iguais, mas " + result9287 + " <json.getInteger('C')> é diferente de " + " null")
chamada antiga: assertEquals("C", json.keySet().toArray()[0])
nova chamada: assertEquals("C", json.keySet().toArray()[0], "Era esperado valores iguais, mas  'C' é diferente de " + " json.keySet().toArray()[0]")
chamada antiga: assertEquals("B", json.keySet().toArray()[1])
nova chamada: assertEquals("B", json.keySet().toArray()[1], "Era esperado valores iguais, mas  'B' é diferente de " + " json.keySet().toArray()[1]")
chamada antiga: assertEquals("A", json.keySet().toArray()[2])
nova chamada: assertEquals("A", json.keySet().toArray()[2], "Era esperado valores iguais, mas  'A' é diferente de " + " json.keySet().toArray()[2]")
chamada antiga: assertEquals(0, json.getIntValue("D"))
nova chamada: assertEquals(0, json.getIntValue("D"), "Era esperado valores iguais, mas  0 é diferente de " + result9288 + " <json.getIntValue('D')>")
chamada antiga: assertEquals(0L, json.getLongValue("D"))
nova chamada: assertEquals(0L, json.getLongValue("D"), "Era esperado valores iguais, mas  0L é diferente de " + result9289 + " <json.getLongValue('D')>")
chamada antiga: assertEquals(false, json.getBooleanValue("D"))
nova chamada: assertEquals(false, json.getBooleanValue("D"), "Era esperado valores iguais, mas  false é diferente de " + result9290 + " <json.getBooleanValue('D')>")
chamada antiga: assertEquals(true, json.isEmpty())
nova chamada: assertEquals(true, json.isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result9291 + " <json.isEmpty()>")
chamada antiga: assertEquals(false, json.isEmpty())
nova chamada: assertEquals(false, json.isEmpty(), "Era esperado valores iguais, mas  false é diferente de " + result9292 + " <json.isEmpty()>")
chamada antiga: assertEquals(true, json.containsKey("C"))
nova chamada: assertEquals(true, json.containsKey("C"), "Era esperado valores iguais, mas  true é diferente de " + result9293 + " <json.containsKey('C')>")
chamada antiga: assertEquals(false, json.containsKey("D"))
nova chamada: assertEquals(false, json.containsKey("D"), "Era esperado valores iguais, mas  false é diferente de " + result9294 + " <json.containsKey('D')>")
chamada antiga: assertEquals(true, json.containsValue(52))
nova chamada: assertEquals(true, json.containsValue(52), "Era esperado valores iguais, mas  true é diferente de " + result9295 + " <json.containsValue(52)>")
chamada antiga: assertEquals(false, json.containsValue(33))
nova chamada: assertEquals(false, json.containsValue(33), "Era esperado valores iguais, mas  false é diferente de " + result9296 + " <json.containsValue(33)>")
chamada antiga: assertEquals(null, json.remove("D"))
nova chamada: assertEquals(null, json.remove("D"), "Era esperado valores iguais, mas  null é diferente de " + result9297 + " <json.remove('D')>")
chamada antiga: assertEquals(51L, json.remove("C"))
nova chamada: assertEquals(51L, json.remove("C"), "Era esperado valores iguais, mas  51L é diferente de " + result9298 + " <json.remove('C')>")
chamada antiga: assertEquals(2, json.keySet().size())
nova chamada: assertEquals(2, json.keySet().size(), "Era esperado valores iguais, mas  2 é diferente de " + result9299 + " <json.keySet().size()>")
chamada antiga: assertEquals(2, json.values().size())
nova chamada: assertEquals(2, json.values().size(), "Era esperado valores iguais, mas  2 é diferente de " + result9300 + " <json.values().size()>")
chamada antiga: assertEquals(new BigDecimal("53"), json.getBigDecimal("A"))
nova chamada: assertEquals(new BigDecimal("53"), json.getBigDecimal("A"), "Era esperado valores iguais, mas  new BigDecimal('53') é diferente de " + result9301 + " <json.getBigDecimal('A')>")
chamada antiga: assertEquals(3, json.values().size())
nova chamada: assertEquals(3, json.values().size(), "Era esperado valores iguais, mas  3 é diferente de " + result9302 + " <json.values().size()>")
chamada antiga: assertEquals(0, json.values().size())
nova chamada: assertEquals(0, json.values().size(), "Era esperado valores iguais, mas  0 é diferente de " + result9303 + " <json.values().size()>")
chamada antiga: assertEquals(99L, json.getLongValue("E"))
nova chamada: assertEquals(99L, json.getLongValue("E"), "Era esperado valores iguais, mas  99L é diferente de " + result9304 + " <json.getLongValue('E')>")
chamada antiga: assertEquals(99, json.getIntValue("E"))
nova chamada: assertEquals(99, json.getIntValue("E"), "Era esperado valores iguais, mas  99 é diferente de " + result9305 + " <json.getIntValue('E')>")
chamada antiga: assertEquals("99", json.getString("E"))
nova chamada: assertEquals("99", json.getString("E"), "Era esperado valores iguais, mas  '99' é diferente de " + result9306 + " <json.getString('E')>")
chamada antiga: assertEquals(null, json.getString("F"))
nova chamada: assertEquals(null, json.getString("F"), "Era esperado valores iguais, mas  null é diferente de " + result9307 + " <json.getString('F')>")
chamada antiga: assertEquals(null, json.getDate("F"))
nova chamada: assertEquals(null, json.getDate("F"), "Era esperado valores iguais, mas  null é diferente de " + result9308 + " <json.getDate('F')>")
chamada antiga: assertEquals(null, json.getBoolean("F"))
nova chamada: assertEquals(null, json.getBoolean("F"), "Era esperado valores iguais, mas  null é diferente de " + result9309 + " <json.getBoolean('F')>")
chamada antiga: assertEquals(123, array.getIntValue("0"))
nova chamada: assertEquals(123, array.getIntValue("0"), "Era esperado valores iguais, mas  123 é diferente de " + result9310 + " <array.getIntValue('0')>")
chamada antiga: assertEquals(123, array.getLongValue("0"))
nova chamada: assertEquals(123, array.getLongValue("0"), "Era esperado valores iguais, mas  123 é diferente de " + result9311 + " <array.getLongValue('0')>")
chamada antiga: assertEquals(new BigDecimal("123"), array.getBigDecimal("0"))
nova chamada: assertEquals(new BigDecimal("123"), array.getBigDecimal("0"), "Era esperado valores iguais, mas  new BigDecimal('123') é diferente de " + result9312 + " <array.getBigDecimal('0')>")
chamada antiga: assertEquals(222, array.getIntValue("1"))
nova chamada: assertEquals(222, array.getIntValue("1"), "Era esperado valores iguais, mas  222 é diferente de " + result9313 + " <array.getIntValue('1')>")
chamada antiga: assertEquals(3, array.getByte("2").byteValue())
nova chamada: assertEquals(3, array.getByte("2").byteValue(), "Era esperado valores iguais, mas  3 é diferente de " + result9314 + " <array.getByte('2').byteValue()>")
chamada antiga: assertEquals(3, array.getByteValue("2"))
nova chamada: assertEquals(3, array.getByteValue("2"), "Era esperado valores iguais, mas  3 é diferente de " + result9315 + " <array.getByteValue('2')>")
chamada antiga: assertEquals(3, array.getShort("2").shortValue())
nova chamada: assertEquals(3, array.getShort("2").shortValue(), "Era esperado valores iguais, mas  3 é diferente de " + result9316 + " <array.getShort('2').shortValue()>")
chamada antiga: assertEquals(3, array.getShortValue("2"))
nova chamada: assertEquals(3, array.getShortValue("2"), "Era esperado valores iguais, mas  3 é diferente de " + result9317 + " <array.getShortValue('2')>")
chamada antiga: assertEquals(new Integer(222), array.getInteger("1"))
nova chamada: assertEquals(new Integer(222), array.getInteger("1"), "Era esperado valores iguais, mas  new Integer(222) é diferente de " + result9318 + " <array.getInteger('1')>")
chamada antiga: assertEquals(new Long(222), array.getLong("1"))
nova chamada: assertEquals(new Long(222), array.getLong("1"), "Era esperado valores iguais, mas  new Long(222) é diferente de " + result9319 + " <array.getLong('1')>")
chamada antiga: assertEquals(new BigDecimal("222"), array.getBigDecimal("1"))
nova chamada: assertEquals(new BigDecimal("222"), array.getBigDecimal("1"), "Era esperado valores iguais, mas  new BigDecimal('222') é diferente de " + result9320 + " <array.getBigDecimal('1')>")
chamada antiga: assertEquals(true, array.getBooleanValue("4"))
nova chamada: assertEquals(true, array.getBooleanValue("4"), "Era esperado valores iguais, mas  true é diferente de " + result9321 + " <array.getBooleanValue('4')>")
chamada antiga: assertTrue(2.0F == array.getFloat("5").floatValue())
nova chamada: assertTrue(2.0F == array.getFloat("5").floatValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(2.0F == array.getFloatValue("5"))
nova chamada: assertTrue(2.0F == array.getFloatValue("5"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(2.0D == array.getDouble("5").doubleValue())
nova chamada: assertTrue(2.0D == array.getDouble("5").doubleValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(2.0D == array.getDoubleValue("5"))
nova chamada: assertTrue(2.0D == array.getDoubleValue("5"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(json.getJSONObject("obj") == null)
nova chamada: assertTrue(json.getJSONObject("obj") == null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(object.getBytes("bytes"))
nova chamada: assertNull(object.getBytes("bytes"), "Era esperado nulo, mas " + result9322 + " <object.getBytes('bytes')> não é nulo")
chamada antiga: assertEquals(0, json.getJSONObject("obj").size())
nova chamada: assertEquals(0, json.getJSONObject("obj").size(), "Era esperado valores iguais, mas  0 é diferente de " + result9323 + " <json.getJSONObject('obj').size()>")
chamada antiga: assertEquals(0, json.getJSONObject("obj").size())
nova chamada: assertEquals(0, json.getJSONObject("obj").size(), "Era esperado valores iguais, mas  0 é diferente de " + result9324 + " <json.getJSONObject('obj').size()>")
chamada antiga: assertEquals("default", json.getOrDefault("testNonKet", "default"))
nova chamada: assertEquals("default", json.getOrDefault("testNonKet", "default"), "Era esperado valores iguais, mas  'default' é diferente de " + result9325 + " <json.getOrDefault('testNonKet', 'default')>")
chamada antiga: assertEquals("default", json.getOrDefault("testKey2", "default"))
nova chamada: assertEquals("default", json.getOrDefault("testKey2", "default"), "Era esperado valores iguais, mas  'default' é diferente de " + result9326 + " <json.getOrDefault('testKey2', 'default')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result9327 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result9328 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9329 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9330 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getString("val"))
nova chamada: assertEquals(null, object.getString("val"), "Era esperado valores iguais, mas  null é diferente de " + result9331 + " <object.getString('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result9332 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result9333 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9334 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result9335 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result9336 + " <object.getDouble('val')>")
chamada antiga: assertEquals(0D, object.getDoubleValue("val"))
nova chamada: assertEquals(0D, object.getDoubleValue("val"), "Era esperado valores iguais, mas  0D é diferente de " + result9337 + " <object.getDoubleValue('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result9338 + " <object.getFloat('val')>")
chamada antiga: assertEquals(0F, object.getFloatValue("val"))
nova chamada: assertEquals(0F, object.getFloatValue("val"), "Era esperado valores iguais, mas  0F é diferente de " + result9339 + " <object.getFloatValue('val')>")
chamada antiga: assertEquals(false, object.getBooleanValue("val"))
nova chamada: assertEquals(false, object.getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result9340 + " <object.getBooleanValue('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result9341 + " <object.getBoolean('val')>")
chamada antiga: assertEquals((short) 0, object.getShortValue("val"))
nova chamada: assertEquals((short) 0, object.getShortValue("val"), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result9342 + " <object.getShortValue('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result9343 + " <object.getShort('val')>")
chamada antiga: assertEquals((byte) 0, object.getByteValue("val"))
nova chamada: assertEquals((byte) 0, object.getByteValue("val"), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result9344 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result9345 + " <object.getByte('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result9346 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result9347 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9348 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9349 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result9350 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result9351 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9352 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result9353 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result9354 + " <object.getFloat('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result9355 + " <object.getDouble('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result9356 + " <object.getBoolean('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result9357 + " <object.getByte('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result9358 + " <object.getShort('val')>")
chamada antiga: assertEquals(0, object.getByteValue("val"))
nova chamada: assertEquals(0, object.getByteValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9359 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(0, object.getShortValue("val"))
nova chamada: assertEquals(0, object.getShortValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9360 + " <object.getShortValue('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result9361 + " <object.getLongValue('val')>")
chamada antiga: assertEquals(null, object.getLong("val"))
nova chamada: assertEquals(null, object.getLong("val"), "Era esperado valores iguais, mas  null é diferente de " + result9362 + " <object.getLong('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9363 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(null, object.getInteger("val"))
nova chamada: assertEquals(null, object.getInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9364 + " <object.getInteger('val')>")
chamada antiga: assertEquals(null, object.getJSONArray("val"))
nova chamada: assertEquals(null, object.getJSONArray("val"), "Era esperado valores iguais, mas  null é diferente de " + result9365 + " <object.getJSONArray('val')>")
chamada antiga: assertEquals(null, object.getJSONObject("val"))
nova chamada: assertEquals(null, object.getJSONObject("val"), "Era esperado valores iguais, mas  null é diferente de " + result9366 + " <object.getJSONObject('val')>")
chamada antiga: assertEquals(null, object.getBigInteger("val"))
nova chamada: assertEquals(null, object.getBigInteger("val"), "Era esperado valores iguais, mas  null é diferente de " + result9367 + " <object.getBigInteger('val')>")
chamada antiga: assertEquals(null, object.getBigDecimal("val"))
nova chamada: assertEquals(null, object.getBigDecimal("val"), "Era esperado valores iguais, mas  null é diferente de " + result9368 + " <object.getBigDecimal('val')>")
chamada antiga: assertEquals(null, object.getBoolean("val"))
nova chamada: assertEquals(null, object.getBoolean("val"), "Era esperado valores iguais, mas  null é diferente de " + result9369 + " <object.getBoolean('val')>")
chamada antiga: assertEquals(null, object.getFloat("val"))
nova chamada: assertEquals(null, object.getFloat("val"), "Era esperado valores iguais, mas  null é diferente de " + result9370 + " <object.getFloat('val')>")
chamada antiga: assertEquals(null, object.getDouble("val"))
nova chamada: assertEquals(null, object.getDouble("val"), "Era esperado valores iguais, mas  null é diferente de " + result9371 + " <object.getDouble('val')>")
chamada antiga: assertEquals(null, object.getByte("val"))
nova chamada: assertEquals(null, object.getByte("val"), "Era esperado valores iguais, mas  null é diferente de " + result9372 + " <object.getByte('val')>")
chamada antiga: assertEquals(null, object.getShort("val"))
nova chamada: assertEquals(null, object.getShort("val"), "Era esperado valores iguais, mas  null é diferente de " + result9373 + " <object.getShort('val')>")
chamada antiga: assertEquals(0, object.getByteValue("val"))
nova chamada: assertEquals(0, object.getByteValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9374 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(0, object.getShortValue("val"))
nova chamada: assertEquals(0, object.getShortValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result9375 + " <object.getShortValue('val')>")
chamada antiga: assertNotNull(object1)
nova chamada: assertNotNull(object1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(object1)
nova chamada: assertNotNull(object1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.id, object1.get("id"))
nova chamada: assertEquals(bean.id, object1.get("id"), "Era esperado valores iguais, mas  bean.id é diferente de " + result9376 + " <object1.get('id')>")
chamada antiga: assertNotNull(object2)
nova chamada: assertNotNull(object2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(bean.id, object2.get("id"))
nova chamada: assertEquals(bean.id, object2.get("id"), "Era esperado valores iguais, mas  bean.id é diferente de " + result9377 + " <object2.get('id')>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"))
nova chamada: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", 1).getBoolean("val"), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result9378 + " <new JSONObject().fluentPut('val', 1).getBoolean('val')>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"))
nova chamada: assertEquals(Boolean.TRUE, new JSONObject().fluentPut("val", "true").getBoolean("val"), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result9379 + " <new JSONObject().fluentPut('val', 'true').getBoolean('val')>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"))
nova chamada: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", Boolean.FALSE).getBoolean("val"), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result9380 + " <new JSONObject().fluentPut('val', Boolean.FALSE).getBoolean('val')>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"))
nova chamada: assertEquals(Boolean.FALSE, new JSONObject().fluentPut("val", "FALSE").getBoolean("val"), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result9381 + " <new JSONObject().fluentPut('val', 'FALSE').getBoolean('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result9382 + " <BigInteger.valueOf(12)> é diferente de " + result9383 + " <new JSONObject().fluentPut('val', 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (byte) 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result9384 + " <BigInteger.valueOf(12)> é diferente de " + result9385 + " <new JSONObject().fluentPut('val', (byte) 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", (short) 12).getBigInteger("val"), "Era esperado valores iguais, mas " + result9386 + " <BigInteger.valueOf(12)> é diferente de " + result9387 + " <new JSONObject().fluentPut('val', (short) 12).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12L).getBigInteger("val"), "Era esperado valores iguais, mas " + result9388 + " <BigInteger.valueOf(12)> é diferente de " + result9389 + " <new JSONObject().fluentPut('val', 12L).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12F).getBigInteger("val"), "Era esperado valores iguais, mas " + result9390 + " <BigInteger.valueOf(12)> é diferente de " + result9391 + " <new JSONObject().fluentPut('val', 12F).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", 12D).getBigInteger("val"), "Era esperado valores iguais, mas " + result9392 + " <BigInteger.valueOf(12)> é diferente de " + result9393 + " <new JSONObject().fluentPut('val', 12D).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigDecimal("12")).getBigInteger("val"), "Era esperado valores iguais, mas " + result9394 + " <BigInteger.valueOf(12)> é diferente de " + result9395 + " <new JSONObject().fluentPut('val', new BigDecimal('12')).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", new BigInteger("12")).getBigInteger("val"), "Era esperado valores iguais, mas " + result9396 + " <BigInteger.valueOf(12)> é diferente de " + result9397 + " <new JSONObject().fluentPut('val', new BigInteger('12')).getBigInteger('val')>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONObject().fluentPut("val", "12").getBigInteger("val"), "Era esperado valores iguais, mas " + result9398 + " <BigInteger.valueOf(12)> é diferente de " + result9399 + " <new JSONObject().fluentPut('val', '12').getBigInteger('val')>")
chamada antiga: assertEquals(0, object.size())
nova chamada: assertEquals(0, object.size(), "Era esperado valores iguais, mas  0 é diferente de " + result9400 + " <object.size()>")
chamada antiga: assertEquals(Integer.valueOf(123), object.getObject("id", new TypeReference<Integer>() {
}))
nova chamada: assertEquals(Integer.valueOf(123), object.getObject("id", new TypeReference<Integer>() {
}), "Era esperado valores iguais, mas " + result9401 + " <Integer.valueOf(123)> é diferente de " + result9402 + " <object.getObject('id', new TypeReference<Integer>() {\n})>")
chamada antiga: assertEquals(Integer.valueOf(123), object.getObject("id", (TypeReference) null))
nova chamada: assertEquals(Integer.valueOf(123), object.getObject("id", (TypeReference) null), "Era esperado valores iguais, mas " + result9403 + " <Integer.valueOf(123)> é diferente de " + result9404 + " <object.getObject('id', (TypeReference) null)>")
chamada antiga: assertEquals(123, beanInterface.getId())
nova chamada: assertEquals(123, beanInterface.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result9405 + " <beanInterface.getId()>")
chamada antiga: assertEquals(object.hashCode(), beanInterface.hashCode())
nova chamada: assertEquals(object.hashCode(), beanInterface.hashCode(), "Era esperado valores iguais, mas " + result9406 + " <object.hashCode()> é diferente de " + result9407 + " <beanInterface.hashCode()>")
chamada antiga: assertEquals(object.toString(), beanInterface.toString())
nova chamada: assertEquals(object.toString(), beanInterface.toString(), "Era esperado valores iguais, mas " + result9408 + " <object.toString()> é diferente de " + result9409 + " <beanInterface.toString()>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(jsonObject.isEmpty())
nova chamada: assertTrue(jsonObject.isEmpty(), "Era esperado verdadeiro, mas " + result9410 + " <jsonObject.isEmpty()> é falso")
chamada antiga: assertTrue(jsonObject.values().isEmpty())
nova chamada: assertTrue(jsonObject.values().isEmpty(), "Era esperado verdadeiro, mas " + result9411 + " <jsonObject.values().isEmpty()> é falso")
chamada antiga: assertNull(jsonObject.remove("id"))
nova chamada: assertNull(jsonObject.remove("id"), "Era esperado nulo, mas " + result9412 + " <jsonObject.remove('id')> não é nulo")
chamada antiga: assertNull(jsonObject.getBytes("id"))
nova chamada: assertNull(jsonObject.getBytes("id"), "Era esperado nulo, mas " + result9413 + " <jsonObject.getBytes('id')> não é nulo")
chamada antiga: assertEquals(0, jsonObject.getBytes("bytes").length)
nova chamada: assertEquals(0, jsonObject.getBytes("bytes").length, "Era esperado valores iguais, mas  0 é diferente de " + " jsonObject.getBytes('bytes').length")
chamada antiga: assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")))
nova chamada: assertEquals("abc中华人民共和国", new String(jsonObject.getBytes("bytes")), "Era esperado valores iguais, mas  'abc中华人民共和国' é diferente de " + " new String(jsonObject.getBytes('bytes'))")
chamada antiga: Assertions.assertEquals(color, color2)
nova chamada: assertEquals(color, color2, "Era esperado valores iguais, mas  color é diferente de " + " color2")
chamada antiga: Assertions.assertEquals(color, color3)
nova chamada: assertEquals(color, color3, "Era esperado valores iguais, mas  color é diferente de " + " color3")
chamada antiga: Assertions.assertEquals(color, color4)
nova chamada: assertEquals(color, color4, "Era esperado valores iguais, mas  color é diferente de " + " color4")
chamada antiga: Assertions.assertEquals(color, color2)
nova chamada: assertEquals(color, color2, "Era esperado valores iguais, mas  color é diferente de " + " color2")
chamada antiga: Assertions.assertEquals(color, color2)
nova chamada: assertEquals(color, color2, "Era esperado valores iguais, mas  color é diferente de " + " color2")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("123", result.id)
nova chamada: assertEquals("123", result.id, "Era esperado valores iguais, mas  '123' é diferente de " + " result.id")
chamada antiga: assertEquals("你好世界", result.name)
nova chamada: assertEquals("你好世界", result.name, "Era esperado valores iguais, mas  '你好世界' é diferente de " + " result.name")
chamada antiga: assertEquals(60, result.score)
nova chamada: assertEquals(60, result.score, "Era esperado valores iguais, mas  60 é diferente de " + " result.score")
chamada antiga: Assertions.assertEquals(1461081600000L, model.date.getTime())
nova chamada: assertEquals(1461081600000L, model.date.getTime(), "Era esperado valores iguais, mas  1461081600000L é diferente de " + result9414 + " <model.date.getTime()>")
chamada antiga: Assertions.assertEquals(1461081600321L, model.date.getTime())
nova chamada: assertEquals(1461081600321L, model.date.getTime(), "Era esperado valores iguais, mas  1461081600321L é diferente de " + result9415 + " <model.date.getTime()>")
chamada antiga: Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
nova chamada: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'' + format.format(object.getValue()) + '\'}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
nova chamada: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + v.getValue().getTime() + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
nova chamada: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + v.getValue().getTime() + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":" + v.getValue().getTime() + "}", text)
nova chamada: assertEquals("{\"value\":" + v.getValue().getTime() + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + v.getValue().getTime() + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9416 + " <v1.getValue()> é diferente de " + result9417 + " <v.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result9418 + " <v1.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
nova chamada: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'' + format.format(object.getValue()) + '\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"date\":\"2018-07-18T10:44:16.055-05:00\"}", iso)
nova chamada: assertEquals("{\"date\":\"2018-07-18T10:44:16.055-05:00\"}", iso, "Era esperado valores iguais, mas  '{\'date\':\'2018-07-18T10:44:16.055-05:00\'}' é diferente de " + " iso")
chamada antiga: assertEquals("java.util.Date", object.get("@type"))
nova chamada: assertEquals("java.util.Date", object.get("@type"), "Era esperado valores iguais, mas  'java.util.Date' é diferente de " + result9419 + " <object.get('@type')>")
chamada antiga: assertEquals(true, object.get("value"))
nova chamada: assertEquals(true, object.get("value"), "Era esperado valores iguais, mas  true é diferente de " + result9420 + " <object.get('value')>")
chamada antiga: assertEquals("java.util.Date", object.get("@type"))
nova chamada: assertEquals("java.util.Date", object.get("@type"), "Era esperado valores iguais, mas  'java.util.Date' é diferente de " + result9421 + " <object.get('@type')>")
chamada antiga: assertEquals(true, object.get(1))
nova chamada: assertEquals(true, object.get(1), "Era esperado valores iguais, mas  true é diferente de " + result9422 + " <object.get(1)>")
chamada antiga: assertEquals("{\"date\":\"2018-05-21T14:39:44.907+08:00\"}", str)
nova chamada: assertEquals("{\"date\":\"2018-05-21T14:39:44.907+08:00\"}", str, "Era esperado valores iguais, mas  '{\'date\':\'2018-05-21T14:39:44.907+08:00\'}' é diferente de " + " str")
chamada antiga: Assertions.assertEquals("{\"date\":1471939192128}", text)
nova chamada: assertEquals("{\"date\":1471939192128}", text, "Era esperado valores iguais, mas  '{\'date\':1471939192128}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"date\":1471939192128}", text)
nova chamada: assertEquals("{\"date\":1471939192128}", text, "Era esperado valores iguais, mas  '{\'date\':1471939192128}' é diferente de " + " text")
chamada antiga: assertEquals("{\"publishTime\":\"" + t2 + "\",\"serverTime\":\"" + t1 + "\",\"startDate\":\"" + t3 + "\"}", text)
nova chamada: assertEquals("{\"publishTime\":\"" + t2 + "\",\"serverTime\":\"" + t1 + "\",\"startDate\":\"" + t3 + "\"}", text, "Era esperado valores iguais, mas  '{\'publishTime\':\'' + t2 + '\',\'serverTime\':\'' + t1 + '\',\'startDate\':\'' + t3 + '\'}' é diferente de " + " text")
chamada antiga: assertEquals(t2, df4.format(model2.publishTime))
nova chamada: assertEquals(t2, df4.format(model2.publishTime), "Era esperado valores iguais, mas  t2 é diferente de " + result9423 + " <df4.format(model2.publishTime)>")
chamada antiga: assertEquals(t1, df5.format(model2.serverTime))
nova chamada: assertEquals(t1, df5.format(model2.serverTime), "Era esperado valores iguais, mas  t1 é diferente de " + result9424 + " <df5.format(model2.serverTime)>")
chamada antiga: assertEquals(t3, df6.format(model2.getStartDate()))
nova chamada: assertEquals(t3, df6.format(model2.getStartDate()), "Era esperado valores iguais, mas  t3 é diferente de " + result9425 + " <df6.format(model2.getStartDate())>")
chamada antiga: Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime())
nova chamada: assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime(), "Era esperado valores iguais, mas  1461081600321L é diferente de " + result9426 + " <((Date) model.getObject('date', Date.class)).getTime()>")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9427 + " <v1.getValue()> é diferente de " + result9428 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result9429 + " <v1.getValue()>")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9430 + " <v1.getValue()> é diferente de " + result9431 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result9432 + " <v1.getValue()>")
chamada antiga: Assertions.assertEquals(1461081600000L, model.date.getTime())
nova chamada: assertEquals(1461081600000L, model.date.getTime(), "Era esperado valores iguais, mas  1461081600000L é diferente de " + result9433 + " <model.date.getTime()>")
chamada antiga: Assertions.assertEquals(date.getTime(), model.value.getTime())
nova chamada: assertEquals(date.getTime(), model.value.getTime(), "Era esperado valores iguais, mas " + result9434 + " <date.getTime()> é diferente de " + result9435 + " <model.value.getTime()>")
chamada antiga: Assertions.assertEquals(TimeZone.getTimeZone("Asia/Shanghai"), reader.getTimeZone())
nova chamada: assertEquals(TimeZone.getTimeZone("Asia/Shanghai"), reader.getTimeZone(), "Era esperado valores iguais, mas " + result9436 + " <TimeZone.getTimeZone('Asia/Shanghai')> é diferente de " + result9437 + " <reader.getTimeZone()>")
chamada antiga: Assertions.assertEquals(Locale.CHINA, reader.getLocal())
nova chamada: assertEquals(Locale.CHINA, reader.getLocal(), "Era esperado valores iguais, mas  Locale.CHINA é diferente de " + result9438 + " <reader.getLocal()>")
chamada antiga: assertEquals("{\"value\":1654686106601}", text)
nova chamada: assertEquals("{\"value\":1654686106601}", text, "Era esperado valores iguais, mas  '{\'value\':1654686106601}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9439 + " <v1.getValue()> é diferente de " + result9440 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9441 + " <v1.getValue()> é diferente de " + result9442 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9443 + " <v1.getValue()> é diferente de " + result9444 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result9445 + " <v1.getValue()>")
chamada antiga: assertNull(vo.getCalendar())
nova chamada: assertNull(vo.getCalendar(), "Era esperado nulo, mas " + result9446 + " <vo.getCalendar()> não é nulo")
chamada antiga: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
nova chamada: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas " + result9447 + " <vo.getCalendar().getTimeInMillis()> é diferente de " + result9448 + " <vo2.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
nova chamada: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas " + result9449 + " <vo.getCalendar().getTimeInMillis()> é diferente de " + result9450 + " <vo2.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis())
nova chamada: assertEquals(vo.getCalendar().getTimeInMillis(), vo2.getCalendar().getTimeInMillis(), "Era esperado valores iguais, mas " + result9451 + " <vo.getCalendar().getTimeInMillis()> é diferente de " + result9452 + " <vo2.getCalendar().getTimeInMillis()>")
chamada antiga: assertEquals(Calendar.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Calendar.class).getObjectClass())
nova chamada: assertEquals(Calendar.class, JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Calendar.class).getObjectClass(), "Era esperado valores iguais, mas  Calendar.class é diferente de " + result9453 + " <JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Calendar.class).getObjectClass()>")
chamada antiga: assertEquals("1324138987429", JSON.toJSONString(date))
nova chamada: assertEquals("1324138987429", JSON.toJSONString(date), "Era esperado valores iguais, mas  '1324138987429' é diferente de " + result9454 + " <JSON.toJSONString(date)>")
chamada antiga: assertEquals("new Date(1324138987429)", JSON.toJSONString(date, SerializerFeature.WriteClassName))
nova chamada: assertEquals("new Date(1324138987429)", JSON.toJSONString(date, SerializerFeature.WriteClassName), "Era esperado valores iguais, mas  'new Date(1324138987429)' é diferente de " + result9455 + " <JSON.toJSONString(date, SerializerFeature.WriteClassName)>")
chamada antiga: assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat))
nova chamada: assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat), "Era esperado valores iguais, mas  '\'2011-12-18 00:23:07\'' é diferente de " + result9456 + " <JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat)>")
chamada antiga: assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"))
nova chamada: assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"), "Era esperado valores iguais, mas  '\'2011-12-18 00:23:07.429\'' é diferente de " + result9457 + " <JSON.toJSONStringWithDateFormat(date, 'yyyy-MM-dd HH:mm:ss.SSS')>")
chamada antiga: assertEquals(1539308902000L, date.getTime())
nova chamada: assertEquals(1539308902000L, date.getTime(), "Era esperado valores iguais, mas  1539308902000L é diferente de " + result9458 + " <date.getTime()>")
chamada antiga: Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime())
nova chamada: assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime(), "Era esperado valores iguais, mas  1324138987429L é diferente de " + result9459 + " <((Date) JSON.parse('new Date(1324138987429)')).getTime()>")
chamada antiga: Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime())
nova chamada: assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime(), "Era esperado valores iguais, mas  1324138987429L é diferente de " + result9460 + " <((Date) JSON.parse('new \n\t\r\f\bDate(1324138987429)')).getTime()>")
chamada antiga: Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text)
nova chamada: assertEquals("{\"value\":" + JSON.toJSONString(format.format(v.getValue())) + "}", text, "Era esperado valores iguais, mas  '{\'value\':' + JSON.toJSONString(format.format(v.getValue())) + '}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9461 + " <v1.getValue()> é diferente de " + result9462 + " <v.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result9463 + " <v1.getValue()> é diferente de " + result9464 + " <v.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(null, v1.getValue())
nova chamada: assertEquals(null, v1.getValue(), "Era esperado valores iguais, mas  null é diferente de " + result9465 + " <v1.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
nova chamada: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'' + format.format(object.getValue()) + '\'}' é diferente de " + " text")
chamada antiga: assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9466 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9467 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9468 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9469 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9470 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9471 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9472 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: assertEquals(2017, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2017, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result9473 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: assertEquals(2, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(2, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  2 é diferente de " + result9474 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  1 é diferente de " + result9475 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9476 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9477 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9478 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9479 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9480 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9481 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9482 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9483 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9484 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9485 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9486 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: assertEquals(2017, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2017, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2017 é diferente de " + result9487 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: assertEquals(2, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(2, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  2 é diferente de " + result9488 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  1 é diferente de " + result9489 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9490 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9491 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9492 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9493 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime())
nova chamada: assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime(), "Era esperado valores iguais, mas  1461081600321L é diferente de " + result9494 + " <((Date) model.getObject('date', Date.class)).getTime()>")
chamada antiga: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
nova chamada: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'' + format.format(object.getValue()) + '\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text)
nova chamada: assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'' + format.format(object.getValue()) + '\'}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(1461081600000L, model.date.getTime())
nova chamada: assertEquals(1461081600000L, model.date.getTime(), "Era esperado valores iguais, mas  1461081600000L é diferente de " + result9495 + " <model.date.getTime()>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9496 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9497 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9498 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9499 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9500 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9501 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9502 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9503 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9504 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9505 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9506 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9507 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9508 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9509 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9510 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9511 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9512 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9513 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9514 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9515 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9516 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9517 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9518 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9519 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9520 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9521 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9522 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9523 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9524 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9525 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9526 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9527 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9528 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9529 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9530 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9531 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9532 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9533 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9534 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9535 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9536 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9537 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9538 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9539 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9540 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9541 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9542 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9543 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9544 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9545 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9546 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9547 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9548 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9549 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9550 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9551 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9552 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9553 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9554 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9555 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9556 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9557 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9558 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9559 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9560 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9561 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9562 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9563 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9564 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9565 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9566 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9567 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9568 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9569 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9570 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9571 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9572 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: Assertions.assertEquals(2016, calendar.get(Calendar.YEAR))
nova chamada: assertEquals(2016, calendar.get(Calendar.YEAR), "Era esperado valores iguais, mas  2016 é diferente de " + result9573 + " <calendar.get(Calendar.YEAR)>")
chamada antiga: Assertions.assertEquals(4, calendar.get(Calendar.MONTH))
nova chamada: assertEquals(4, calendar.get(Calendar.MONTH), "Era esperado valores iguais, mas  4 é diferente de " + result9574 + " <calendar.get(Calendar.MONTH)>")
chamada antiga: Assertions.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH))
nova chamada: assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH), "Era esperado valores iguais, mas  6 é diferente de " + result9575 + " <calendar.get(Calendar.DAY_OF_MONTH)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  0 é diferente de " + result9576 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MINUTE))
nova chamada: assertEquals(0, calendar.get(Calendar.MINUTE), "Era esperado valores iguais, mas  0 é diferente de " + result9577 + " <calendar.get(Calendar.MINUTE)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.SECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.SECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9578 + " <calendar.get(Calendar.SECOND)>")
chamada antiga: Assertions.assertEquals(0, calendar.get(Calendar.MILLISECOND))
nova chamada: assertEquals(0, calendar.get(Calendar.MILLISECOND), "Era esperado valores iguais, mas  0 é diferente de " + result9579 + " <calendar.get(Calendar.MILLISECOND)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9580 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result9581 + " <JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9582 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result9583 + " <JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9584 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result9585 + " <JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9586 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse))
nova chamada: assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse), "Era esperado valores iguais, mas  '{\'value\':false}' é diferente de " + result9587 + " <JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9588 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result9589 + " <JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: Assertions.assertEquals(expectedStr, actualStr)
nova chamada: assertEquals(expectedStr, actualStr, "Era esperado valores iguais, mas  expectedStr é diferente de " + " actualStr")
chamada antiga: Assertions.assertEquals(expectedBean.getId(), actualBean.getString("id"))
nova chamada: assertEquals(expectedBean.getId(), actualBean.getString("id"), "Era esperado valores iguais, mas " + result9590 + " <expectedBean.getId()> é diferente de " + result9591 + " <actualBean.getString('id')>")
chamada antiga: Assertions.assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"))
nova chamada: assertEquals(expectedBean.getNetValueDate(), actualBean.getInteger("net_value_date"), "Era esperado valores iguais, mas " + result9592 + " <expectedBean.getNetValueDate()> é diferente de " + result9593 + " <actualBean.getInteger('net_value_date')>")
chamada antiga: assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text)
nova chamada: assertEquals("{\"userName\":\"test\",\"user_id\":1001}", text, "Era esperado valores iguais, mas  '{\'userName\':\'test\',\'user_id\':1001}' é diferente de " + " text")
chamada antiga: assertEquals(1001, model2.userId)
nova chamada: assertEquals(1001, model2.userId, "Era esperado valores iguais, mas  1001 é diferente de " + " model2.userId")
chamada antiga: assertEquals("test", model2.userName)
nova chamada: assertEquals("test", model2.userName, "Era esperado valores iguais, mas  'test' é diferente de " + " model2.userName")
chamada antiga: assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text)
nova chamada: assertEquals("{\"userName\":\"test\",\"user_id\":\"1001\"}", text, "Era esperado valores iguais, mas  '{\'userName\':\'test\',\'user_id\':\'1001\'}' é diferente de " + " text")
chamada antiga: assertEquals(1001, model2.userId)
nova chamada: assertEquals(1001, model2.userId, "Era esperado valores iguais, mas  1001 é diferente de " + " model2.userId")
chamada antiga: assertEquals("test", model2.userName)
nova chamada: assertEquals("test", model2.userName, "Era esperado valores iguais, mas  'test' é diferente de " + " model2.userName")
chamada antiga: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text)
nova chamada: assertEquals("{\"endTime\":\"2017-11-14\",\"startTime\":\"2017-11-04\"}", text, "Era esperado valores iguais, mas  '{\'endTime\':\'2017-11-14\',\'startTime\':\'2017-11-04\'}' é diferente de " + " text")
chamada antiga: assertEquals("aa", aa1.getName())
nova chamada: assertEquals("aa", aa1.getName(), "Era esperado valores iguais, mas  'aa' é diferente de " + result9594 + " <aa1.getName()>")
chamada antiga: assertEquals("java.lang.Exception", c2.getE().getClass().getName())
nova chamada: assertEquals("java.lang.Exception", c2.getE().getClass().getName(), "Era esperado valores iguais, mas  'java.lang.Exception' é diferente de " + result9595 + " <c2.getE().getClass().getName()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9596 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result9597 + " <JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9598 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty))
nova chamada: assertEquals("{\"value\":\"\"}", JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty), "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + result9599 + " <JSON.toJSONString(model, SerializerFeature.WriteNullStringAsEmpty)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9600 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result9601 + " <JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9602 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero))
nova chamada: assertEquals("{\"value\":0}", JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero), "Era esperado valores iguais, mas  '{\'value\':0}' é diferente de " + result9603 + " <JSON.toJSONString(model, SerializerFeature.WriteNullNumberAsZero)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9604 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse))
nova chamada: assertEquals("{\"value\":false}", JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse), "Era esperado valores iguais, mas  '{\'value\':false}' é diferente de " + result9605 + " <JSON.toJSONString(model, SerializerFeature.WriteNullBooleanAsFalse)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(model))
nova chamada: assertEquals("{}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{}' é diferente de " + result9606 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result9607 + " <JSON.toJSONString(model, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals(3, paths.size())
nova chamada: assertEquals(3, paths.size(), "Era esperado valores iguais, mas  3 é diferente de " + result9608 + " <paths.size()>")
chamada antiga: assertEquals("1001", pathValues.get("$.id"))
nova chamada: assertEquals("1001", pathValues.get("$.id"), "Era esperado valores iguais, mas  '1001' é diferente de " + result9609 + " <pathValues.get('$.id')>")
chamada antiga: assertEquals("1001", pathValues.get("$.name"))
nova chamada: assertEquals("1001", pathValues.get("$.name"), "Era esperado valores iguais, mas  '1001' é diferente de " + result9610 + " <pathValues.get('$.name')>")
chamada antiga: assertSame(person, pathValues.get("$"))
nova chamada: assertSame(person, pathValues.get("$"), "Era esperado objetos iguais, mas  person é diferente de " + result9611 + " <pathValues.get('$')>")
chamada antiga: Assertions.assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(model.value)
nova chamada: assertNotNull(model.value, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(newsDetail)
nova chamada: assertNotNull(newsDetail, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(138042533, person.Id)
nova chamada: assertEquals(138042533, person.Id, "Era esperado valores iguais, mas  138042533 é diferente de " + " person.Id")
chamada antiga: assertEquals("example", person.name)
nova chamada: assertEquals("example", person.name, "Era esperado valores iguais, mas  'example' é diferente de " + " person.name")
chamada antiga: assertEquals(172.0D, person.height)
nova chamada: assertEquals(172.0D, person.height, "Era esperado valores iguais, mas  172.0D é diferente de " + " person.height")
chamada antiga: assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class))
nova chamada: assertSame(Size.Big, JSON.parseObject("\"Big\"", Size.class), "Era esperado objetos iguais, mas  Size.Big é diferente de " + result9612 + " <JSON.parseObject('\'Big\'', Size.class)>")
chamada antiga: assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class))
nova chamada: assertSame(Size.Big, JSON.parseObject("\"big\"", Size.class), "Era esperado objetos iguais, mas  Size.Big é diferente de " + result9613 + " <JSON.parseObject('\'big\'', Size.class)>")
chamada antiga: assertNull(JSON.parseObject("\"Large\"", Size.class))
nova chamada: assertNull(JSON.parseObject("\"Large\"", Size.class), "Era esperado nulo, mas " + result9614 + " <JSON.parseObject('\'Large\'', Size.class)> não é nulo")
chamada antiga: assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class))
nova chamada: assertSame(Size.LL, JSON.parseObject("\"L3\"", Size.class), "Era esperado objetos iguais, mas  Size.LL é diferente de " + result9615 + " <JSON.parseObject('\'L3\'', Size.class)>")
chamada antiga: assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class))
nova chamada: assertSame(Size.Small, JSON.parseObject("\"Little\"", Size.class), "Era esperado objetos iguais, mas  Size.Small é diferente de " + result9616 + " <JSON.parseObject('\'Little\'', Size.class)>")
chamada antiga: assertSame(Size.Small, model.size)
nova chamada: assertSame(Size.Small, model.size, "Era esperado objetos iguais, mas  Size.Small é diferente de " + " model.size")
chamada antiga: assertEquals("[1001,null]", json)
nova chamada: assertEquals("[1001,null]", json, "Era esperado valores iguais, mas  '[1001,null]' é diferente de " + " json")
chamada antiga: assertEquals("[1001,null]", json)
nova chamada: assertEquals("[1001,null]", json, "Era esperado valores iguais, mas  '[1001,null]' é diferente de " + " json")
chamada antiga: assertEquals("null", JSONArray.toJSONString(null))
nova chamada: assertEquals("null", JSONArray.toJSONString(null), "Era esperado valores iguais, mas  'null' é diferente de " + result9617 + " <JSONArray.toJSONString(null)>")
chamada antiga: assertEquals("[null]", JSONArray.toJSONString(Collections.singletonList(null)))
nova chamada: assertEquals("[null]", JSONArray.toJSONString(Collections.singletonList(null)), "Era esperado valores iguais, mas  '[null]' é diferente de " + result9618 + " <JSONArray.toJSONString(Collections.singletonList(null))>")
chamada antiga: assertEquals(true, array.isEmpty())
nova chamada: assertEquals(true, array.isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result9619 + " <array.isEmpty()>")
chamada antiga: assertEquals(false, array.isEmpty())
nova chamada: assertEquals(false, array.isEmpty(), "Era esperado valores iguais, mas  false é diferente de " + result9620 + " <array.isEmpty()>")
chamada antiga: assertEquals(true, array.contains(1))
nova chamada: assertEquals(true, array.contains(1), "Era esperado valores iguais, mas  true é diferente de " + result9621 + " <array.contains(1)>")
chamada antiga: assertEquals(1, array.toArray()[0])
nova chamada: assertEquals(1, array.toArray()[0], "Era esperado valores iguais, mas  1 é diferente de " + " array.toArray()[0]")
chamada antiga: assertEquals(true, array.containsAll(Collections.singletonList(1)))
nova chamada: assertEquals(true, array.containsAll(Collections.singletonList(1)), "Era esperado valores iguais, mas  true é diferente de " + result9622 + " <array.containsAll(Collections.singletonList(1))>")
chamada antiga: assertEquals(true, array.remove(Integer.valueOf(1)))
nova chamada: assertEquals(true, array.remove(Integer.valueOf(1)), "Era esperado valores iguais, mas  true é diferente de " + result9623 + " <array.remove(Integer.valueOf(1))>")
chamada antiga: assertEquals(true, array.isEmpty())
nova chamada: assertEquals(true, array.isEmpty(), "Era esperado valores iguais, mas  true é diferente de " + result9624 + " <array.isEmpty()>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result9625 + " <array.size()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result9626 + " <array.size()>")
chamada antiga: assertEquals(3, array.size())
nova chamada: assertEquals(3, array.size(), "Era esperado valores iguais, mas  3 é diferente de " + result9627 + " <array.size()>")
chamada antiga: assertEquals(true, array.retainAll(Arrays.asList(1, 2)))
nova chamada: assertEquals(true, array.retainAll(Arrays.asList(1, 2)), "Era esperado valores iguais, mas  true é diferente de " + result9628 + " <array.retainAll(Arrays.asList(1, 2))>")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result9629 + " <array.size()>")
chamada antiga: assertEquals(true, array.retainAll(Arrays.asList(2, 4)))
nova chamada: assertEquals(true, array.retainAll(Arrays.asList(2, 4)), "Era esperado valores iguais, mas  true é diferente de " + result9630 + " <array.retainAll(Arrays.asList(2, 4))>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result9631 + " <array.size()>")
chamada antiga: assertEquals(4, array.toArray()[0])
nova chamada: assertEquals(4, array.toArray()[0], "Era esperado valores iguais, mas  4 é diferente de " + " array.toArray()[0]")
chamada antiga: assertEquals(4, array.toArray()[0])
nova chamada: assertEquals(4, array.toArray()[0], "Era esperado valores iguais, mas  4 é diferente de " + " array.toArray()[0]")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result9632 + " <array.size()>")
chamada antiga: assertEquals(2, array.indexOf(3))
nova chamada: assertEquals(2, array.indexOf(3), "Era esperado valores iguais, mas  2 é diferente de " + result9633 + " <array.indexOf(3)>")
chamada antiga: assertEquals(6, array.lastIndexOf(3))
nova chamada: assertEquals(6, array.lastIndexOf(3), "Era esperado valores iguais, mas  6 é diferente de " + result9634 + " <array.lastIndexOf(3)>")
chamada antiga: assertEquals(123, array.getByte(0).byteValue())
nova chamada: assertEquals(123, array.getByte(0).byteValue(), "Era esperado valores iguais, mas  123 é diferente de " + result9635 + " <array.getByte(0).byteValue()>")
chamada antiga: assertEquals(123, array.getByteValue(0))
nova chamada: assertEquals(123, array.getByteValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result9636 + " <array.getByteValue(0)>")
chamada antiga: assertEquals(123, array.getShort(0).shortValue())
nova chamada: assertEquals(123, array.getShort(0).shortValue(), "Era esperado valores iguais, mas  123 é diferente de " + result9637 + " <array.getShort(0).shortValue()>")
chamada antiga: assertEquals(123, array.getShortValue(0))
nova chamada: assertEquals(123, array.getShortValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result9638 + " <array.getShortValue(0)>")
chamada antiga: assertTrue(123F == array.getFloat(0).floatValue())
nova chamada: assertTrue(123F == array.getFloat(0).floatValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(123F == array.getFloatValue(0))
nova chamada: assertTrue(123F == array.getFloatValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(123D == array.getDouble(0).doubleValue())
nova chamada: assertTrue(123D == array.getDouble(0).doubleValue(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(123D == array.getDoubleValue(0))
nova chamada: assertTrue(123D == array.getDoubleValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(123, array.getIntValue(0))
nova chamada: assertEquals(123, array.getIntValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result9639 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(123, array.getLongValue(0))
nova chamada: assertEquals(123, array.getLongValue(0), "Era esperado valores iguais, mas  123 é diferente de " + result9640 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(new BigDecimal("123"), array.getBigDecimal(0))
nova chamada: assertEquals(new BigDecimal("123"), array.getBigDecimal(0), "Era esperado valores iguais, mas  new BigDecimal('123') é diferente de " + result9641 + " <array.getBigDecimal(0)>")
chamada antiga: assertEquals(222, array.getIntValue(1))
nova chamada: assertEquals(222, array.getIntValue(1), "Era esperado valores iguais, mas  222 é diferente de " + result9642 + " <array.getIntValue(1)>")
chamada antiga: assertEquals(new Integer(222), array.getInteger(1))
nova chamada: assertEquals(new Integer(222), array.getInteger(1), "Era esperado valores iguais, mas  new Integer(222) é diferente de " + result9643 + " <array.getInteger(1)>")
chamada antiga: assertEquals(new Long(222), array.getLong(1))
nova chamada: assertEquals(new Long(222), array.getLong(1), "Era esperado valores iguais, mas  new Long(222) é diferente de " + result9644 + " <array.getLong(1)>")
chamada antiga: assertEquals(new BigDecimal("222"), array.getBigDecimal(1))
nova chamada: assertEquals(new BigDecimal("222"), array.getBigDecimal(1), "Era esperado valores iguais, mas  new BigDecimal('222') é diferente de " + result9645 + " <array.getBigDecimal(1)>")
chamada antiga: assertEquals(true, array.getBooleanValue(4))
nova chamada: assertEquals(true, array.getBooleanValue(4), "Era esperado valores iguais, mas  true é diferente de " + result9646 + " <array.getBooleanValue(4)>")
chamada antiga: assertEquals(Boolean.TRUE, array.getBoolean(4))
nova chamada: assertEquals(Boolean.TRUE, array.getBoolean(4), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result9647 + " <array.getBoolean(4)>")
chamada antiga: assertEquals(0, array.getIntValue(5))
nova chamada: assertEquals(0, array.getIntValue(5), "Era esperado valores iguais, mas  0 é diferente de " + result9648 + " <array.getIntValue(5)>")
chamada antiga: assertEquals(0, array.getLongValue(5))
nova chamada: assertEquals(0, array.getLongValue(5), "Era esperado valores iguais, mas  0 é diferente de " + result9649 + " <array.getLongValue(5)>")
chamada antiga: assertEquals(null, array.getInteger(5))
nova chamada: assertEquals(null, array.getInteger(5), "Era esperado valores iguais, mas  null é diferente de " + result9650 + " <array.getInteger(5)>")
chamada antiga: assertEquals(null, array.getLong(5))
nova chamada: assertEquals(null, array.getLong(5), "Era esperado valores iguais, mas  null é diferente de " + result9651 + " <array.getLong(5)>")
chamada antiga: assertEquals(null, array.getBigDecimal(5))
nova chamada: assertEquals(null, array.getBigDecimal(5), "Era esperado valores iguais, mas  null é diferente de " + result9652 + " <array.getBigDecimal(5)>")
chamada antiga: assertEquals(null, array.getBoolean(5))
nova chamada: assertEquals(null, array.getBoolean(5), "Era esperado valores iguais, mas  null é diferente de " + result9653 + " <array.getBoolean(5)>")
chamada antiga: assertEquals(false, array.getBooleanValue(5))
nova chamada: assertEquals(false, array.getBooleanValue(5), "Era esperado valores iguais, mas  false é diferente de " + result9654 + " <array.getBooleanValue(5)>")
chamada antiga: assertTrue(array.getJSONObject(0) == null)
nova chamada: assertTrue(array.getJSONObject(0) == null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, array.getJSONObject(0).size())
nova chamada: assertEquals(0, array.getJSONObject(0).size(), "Era esperado valores iguais, mas  0 é diferente de " + result9655 + " <array.getJSONObject(0).size()>")
chamada antiga: assertEquals(0, array.getJSONObject(0).size())
nova chamada: assertEquals(0, array.getJSONObject(0).size(), "Era esperado valores iguais, mas  0 é diferente de " + result9656 + " <array.getJSONObject(0).size()>")
chamada antiga: assertEquals(0, array.getJSONArray(0).size())
nova chamada: assertEquals(0, array.getJSONArray(0).size(), "Era esperado valores iguais, mas  0 é diferente de " + result9657 + " <array.getJSONArray(0).size()>")
chamada antiga: assertEquals(0, array.getJSONArray(0).size())
nova chamada: assertEquals(0, array.getJSONArray(0).size(), "Era esperado valores iguais, mas  0 é diferente de " + result9658 + " <array.getJSONArray(0).size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result9659 + " <list.size()>")
chamada antiga: assertEquals(3, list.get(0))
nova chamada: assertEquals(3, list.get(0), "Era esperado valores iguais, mas  3 é diferente de " + result9660 + " <list.get(0)>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result9661 + " <array.size()>")
chamada antiga: assertEquals(123, array.getObject(0, User.class).getId())
nova chamada: assertEquals(123, array.getObject(0, User.class).getId(), "Era esperado valores iguais, mas  123 é diferente de " + result9662 + " <array.getObject(0, User.class).getId()>")
chamada antiga: assertEquals(0L, array.getLongValue(0))
nova chamada: assertEquals(0L, array.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result9663 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(null, array.getLong(0))
nova chamada: assertEquals(null, array.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result9664 + " <array.getLong(0)>")
chamada antiga: assertEquals(0, array.getIntValue(0))
nova chamada: assertEquals(0, array.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9665 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(null, array.getInteger(0))
nova chamada: assertEquals(null, array.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9666 + " <array.getInteger(0)>")
chamada antiga: assertEquals(null, array.getString(0))
nova chamada: assertEquals(null, array.getString(0), "Era esperado valores iguais, mas  null é diferente de " + result9667 + " <array.getString(0)>")
chamada antiga: assertEquals(null, array.getJSONArray(0))
nova chamada: assertEquals(null, array.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result9668 + " <array.getJSONArray(0)>")
chamada antiga: assertEquals(null, array.getJSONObject(0))
nova chamada: assertEquals(null, array.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result9669 + " <array.getJSONObject(0)>")
chamada antiga: assertEquals(0L, array.getLongValue(0))
nova chamada: assertEquals(0L, array.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result9670 + " <array.getLongValue(0)>")
chamada antiga: assertEquals(null, array.getLong(0))
nova chamada: assertEquals(null, array.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result9671 + " <array.getLong(0)>")
chamada antiga: assertEquals(0, array.getIntValue(0))
nova chamada: assertEquals(0, array.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9672 + " <array.getIntValue(0)>")
chamada antiga: assertEquals(null, array.getInteger(0))
nova chamada: assertEquals(null, array.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9673 + " <array.getInteger(0)>")
chamada antiga: assertEquals(null, array.getString(0))
nova chamada: assertEquals(null, array.getString(0), "Era esperado valores iguais, mas  null é diferente de " + result9674 + " <array.getString(0)>")
chamada antiga: assertEquals(null, array.getJSONArray(0))
nova chamada: assertEquals(null, array.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result9675 + " <array.getJSONArray(0)>")
chamada antiga: assertEquals(null, array.getJSONObject(0))
nova chamada: assertEquals(null, array.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result9676 + " <array.getJSONObject(0)>")
chamada antiga: assertEquals(null, array.getBigInteger(0))
nova chamada: assertEquals(null, array.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9677 + " <array.getBigInteger(0)>")
chamada antiga: assertEquals(null, array.getBigDecimal(0))
nova chamada: assertEquals(null, array.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result9678 + " <array.getBigDecimal(0)>")
chamada antiga: assertEquals(null, array.getDouble(0))
nova chamada: assertEquals(null, array.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result9679 + " <array.getDouble(0)>")
chamada antiga: assertEquals(0D, array.getDoubleValue(0))
nova chamada: assertEquals(0D, array.getDoubleValue(0), "Era esperado valores iguais, mas  0D é diferente de " + result9680 + " <array.getDoubleValue(0)>")
chamada antiga: assertEquals(null, array.getFloat(0))
nova chamada: assertEquals(null, array.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result9681 + " <array.getFloat(0)>")
chamada antiga: assertEquals(0F, array.getFloatValue(0))
nova chamada: assertEquals(0F, array.getFloatValue(0), "Era esperado valores iguais, mas  0F é diferente de " + result9682 + " <array.getFloatValue(0)>")
chamada antiga: assertEquals(false, array.getBooleanValue(0))
nova chamada: assertEquals(false, array.getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result9683 + " <array.getBooleanValue(0)>")
chamada antiga: assertEquals(null, array.getBoolean(0))
nova chamada: assertEquals(null, array.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result9684 + " <array.getBoolean(0)>")
chamada antiga: assertEquals((short) 0, array.getShortValue(0))
nova chamada: assertEquals((short) 0, array.getShortValue(0), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result9685 + " <array.getShortValue(0)>")
chamada antiga: assertEquals(null, array.getShort(0))
nova chamada: assertEquals(null, array.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result9686 + " <array.getShort(0)>")
chamada antiga: assertEquals((byte) 0, array.getByteValue(0))
nova chamada: assertEquals((byte) 0, array.getByteValue(0), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result9687 + " <array.getByteValue(0)>")
chamada antiga: assertEquals(null, array.getByte(0))
nova chamada: assertEquals(null, array.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result9688 + " <array.getByte(0)>")
chamada antiga: assertEquals(0L, object.getLongValue(0))
nova chamada: assertEquals(0L, object.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result9689 + " <object.getLongValue(0)>")
chamada antiga: assertEquals(null, object.getLong(0))
nova chamada: assertEquals(null, object.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result9690 + " <object.getLong(0)>")
chamada antiga: assertEquals(0, object.getIntValue(0))
nova chamada: assertEquals(0, object.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9691 + " <object.getIntValue(0)>")
chamada antiga: assertEquals(null, object.getInteger(0))
nova chamada: assertEquals(null, object.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9692 + " <object.getInteger(0)>")
chamada antiga: assertEquals(null, object.getJSONArray(0))
nova chamada: assertEquals(null, object.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result9693 + " <object.getJSONArray(0)>")
chamada antiga: assertEquals(null, object.getJSONObject(0))
nova chamada: assertEquals(null, object.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result9694 + " <object.getJSONObject(0)>")
chamada antiga: assertEquals(null, object.getBigInteger(0))
nova chamada: assertEquals(null, object.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9695 + " <object.getBigInteger(0)>")
chamada antiga: assertEquals(null, object.getBigDecimal(0))
nova chamada: assertEquals(null, object.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result9696 + " <object.getBigDecimal(0)>")
chamada antiga: assertEquals(null, object.getFloat(0))
nova chamada: assertEquals(null, object.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result9697 + " <object.getFloat(0)>")
chamada antiga: assertEquals(null, object.getDouble(0))
nova chamada: assertEquals(null, object.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result9698 + " <object.getDouble(0)>")
chamada antiga: assertEquals(null, object.getBoolean(0))
nova chamada: assertEquals(null, object.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result9699 + " <object.getBoolean(0)>")
chamada antiga: assertEquals(null, object.getByte(0))
nova chamada: assertEquals(null, object.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result9700 + " <object.getByte(0)>")
chamada antiga: assertEquals(null, object.getShort(0))
nova chamada: assertEquals(null, object.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result9701 + " <object.getShort(0)>")
chamada antiga: assertEquals(0, object.getByteValue(0))
nova chamada: assertEquals(0, object.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9702 + " <object.getByteValue(0)>")
chamada antiga: assertEquals(0, object.getShortValue(0))
nova chamada: assertEquals(0, object.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9703 + " <object.getShortValue(0)>")
chamada antiga: assertEquals(0L, object.getLongValue(0))
nova chamada: assertEquals(0L, object.getLongValue(0), "Era esperado valores iguais, mas  0L é diferente de " + result9704 + " <object.getLongValue(0)>")
chamada antiga: assertEquals(null, object.getLong(0))
nova chamada: assertEquals(null, object.getLong(0), "Era esperado valores iguais, mas  null é diferente de " + result9705 + " <object.getLong(0)>")
chamada antiga: assertEquals(0, object.getIntValue(0))
nova chamada: assertEquals(0, object.getIntValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9706 + " <object.getIntValue(0)>")
chamada antiga: assertEquals(null, object.getInteger(0))
nova chamada: assertEquals(null, object.getInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9707 + " <object.getInteger(0)>")
chamada antiga: assertEquals(null, object.getJSONArray(0))
nova chamada: assertEquals(null, object.getJSONArray(0), "Era esperado valores iguais, mas  null é diferente de " + result9708 + " <object.getJSONArray(0)>")
chamada antiga: assertEquals(null, object.getJSONObject(0))
nova chamada: assertEquals(null, object.getJSONObject(0), "Era esperado valores iguais, mas  null é diferente de " + result9709 + " <object.getJSONObject(0)>")
chamada antiga: assertEquals(null, object.getBigInteger(0))
nova chamada: assertEquals(null, object.getBigInteger(0), "Era esperado valores iguais, mas  null é diferente de " + result9710 + " <object.getBigInteger(0)>")
chamada antiga: assertEquals(null, object.getBigDecimal(0))
nova chamada: assertEquals(null, object.getBigDecimal(0), "Era esperado valores iguais, mas  null é diferente de " + result9711 + " <object.getBigDecimal(0)>")
chamada antiga: assertEquals(null, object.getBoolean(0))
nova chamada: assertEquals(null, object.getBoolean(0), "Era esperado valores iguais, mas  null é diferente de " + result9712 + " <object.getBoolean(0)>")
chamada antiga: assertEquals(null, object.getFloat(0))
nova chamada: assertEquals(null, object.getFloat(0), "Era esperado valores iguais, mas  null é diferente de " + result9713 + " <object.getFloat(0)>")
chamada antiga: assertEquals(null, object.getDouble(0))
nova chamada: assertEquals(null, object.getDouble(0), "Era esperado valores iguais, mas  null é diferente de " + result9714 + " <object.getDouble(0)>")
chamada antiga: assertEquals(null, object.getByte(0))
nova chamada: assertEquals(null, object.getByte(0), "Era esperado valores iguais, mas  null é diferente de " + result9715 + " <object.getByte(0)>")
chamada antiga: assertEquals(null, object.getShort(0))
nova chamada: assertEquals(null, object.getShort(0), "Era esperado valores iguais, mas  null é diferente de " + result9716 + " <object.getShort(0)>")
chamada antiga: assertEquals(0, object.getByteValue(0))
nova chamada: assertEquals(0, object.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9717 + " <object.getByteValue(0)>")
chamada antiga: assertEquals(0, object.getShortValue(0))
nova chamada: assertEquals(0, object.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result9718 + " <object.getShortValue(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12).getBigInteger(0), "Era esperado valores iguais, mas " + result9719 + " <BigInteger.valueOf(12)> é diferente de " + result9720 + " <new JSONArray().fluentAdd(12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigInteger(0), "Era esperado valores iguais, mas " + result9721 + " <BigInteger.valueOf(12)> é diferente de " + result9722 + " <new JSONArray().fluentAdd((byte) 12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigInteger(0), "Era esperado valores iguais, mas " + result9723 + " <BigInteger.valueOf(12)> é diferente de " + result9724 + " <new JSONArray().fluentAdd((short) 12).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12L).getBigInteger(0), "Era esperado valores iguais, mas " + result9725 + " <BigInteger.valueOf(12)> é diferente de " + result9726 + " <new JSONArray().fluentAdd(12L).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12F).getBigInteger(0), "Era esperado valores iguais, mas " + result9727 + " <BigInteger.valueOf(12)> é diferente de " + result9728 + " <new JSONArray().fluentAdd(12F).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(12D).getBigInteger(0), "Era esperado valores iguais, mas " + result9729 + " <BigInteger.valueOf(12)> é diferente de " + result9730 + " <new JSONArray().fluentAdd(12D).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigInteger(0), "Era esperado valores iguais, mas " + result9731 + " <BigInteger.valueOf(12)> é diferente de " + result9732 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigInteger(0), "Era esperado valores iguais, mas " + result9733 + " <BigInteger.valueOf(12)> é diferente de " + result9734 + " <new JSONArray().fluentAdd(new BigInteger('12')).getBigInteger(0)>")
chamada antiga: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0))
nova chamada: assertEquals(BigInteger.valueOf(12), new JSONArray().fluentAdd("12").getBigInteger(0), "Era esperado valores iguais, mas " + result9735 + " <BigInteger.valueOf(12)> é diferente de " + result9736 + " <new JSONArray().fluentAdd('12').getBigInteger(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12).getBigDecimal(0), "Era esperado valores iguais, mas " + result9737 + " <BigDecimal.valueOf(12)> é diferente de " + result9738 + " <new JSONArray().fluentAdd(12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((byte) 12).getBigDecimal(0), "Era esperado valores iguais, mas " + result9739 + " <BigDecimal.valueOf(12)> é diferente de " + result9740 + " <new JSONArray().fluentAdd((byte) 12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd((short) 12).getBigDecimal(0), "Era esperado valores iguais, mas " + result9741 + " <BigDecimal.valueOf(12)> é diferente de " + result9742 + " <new JSONArray().fluentAdd((short) 12).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(12L).getBigDecimal(0), "Era esperado valores iguais, mas " + result9743 + " <BigDecimal.valueOf(12)> é diferente de " + result9744 + " <new JSONArray().fluentAdd(12L).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12F), new JSONArray().fluentAdd(12F).getBigDecimal(0), "Era esperado valores iguais, mas " + result9745 + " <BigDecimal.valueOf(12F)> é diferente de " + result9746 + " <new JSONArray().fluentAdd(12F).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12D), new JSONArray().fluentAdd(12D).getBigDecimal(0), "Era esperado valores iguais, mas " + result9747 + " <BigDecimal.valueOf(12D)> é diferente de " + result9748 + " <new JSONArray().fluentAdd(12D).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getBigDecimal(0), "Era esperado valores iguais, mas " + result9749 + " <BigDecimal.valueOf(12)> é diferente de " + result9750 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getBigDecimal(0), "Era esperado valores iguais, mas " + result9751 + " <BigDecimal.valueOf(12)> é diferente de " + result9752 + " <new JSONArray().fluentAdd(new BigInteger('12')).getBigDecimal(0)>")
chamada antiga: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0))
nova chamada: assertEquals(BigDecimal.valueOf(12), new JSONArray().fluentAdd("12").getBigDecimal(0), "Era esperado valores iguais, mas " + result9753 + " <BigDecimal.valueOf(12)> é diferente de " + result9754 + " <new JSONArray().fluentAdd('12').getBigDecimal(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloatValue(0), "Era esperado valores iguais, mas " + result9755 + " <Float.valueOf(12)> é diferente de " + result9756 + " <new JSONArray().fluentAdd(12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloatValue(0), "Era esperado valores iguais, mas " + result9757 + " <Float.valueOf(12)> é diferente de " + result9758 + " <new JSONArray().fluentAdd((byte) 12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloatValue(0), "Era esperado valores iguais, mas " + result9759 + " <Float.valueOf(12)> é diferente de " + result9760 + " <new JSONArray().fluentAdd((short) 12).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloatValue(0), "Era esperado valores iguais, mas " + result9761 + " <Float.valueOf(12)> é diferente de " + result9762 + " <new JSONArray().fluentAdd(12L).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloatValue(0), "Era esperado valores iguais, mas " + result9763 + " <Float.valueOf(12F)> é diferente de " + result9764 + " <new JSONArray().fluentAdd(12F).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloatValue(0), "Era esperado valores iguais, mas " + result9765 + " <Float.valueOf(12)> é diferente de " + result9766 + " <new JSONArray().fluentAdd(12D).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloatValue(0), "Era esperado valores iguais, mas " + result9767 + " <Float.valueOf(12)> é diferente de " + result9768 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloatValue(0), "Era esperado valores iguais, mas " + result9769 + " <Float.valueOf(12)> é diferente de " + result9770 + " <new JSONArray().fluentAdd(new BigInteger('12')).getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloatValue(0), "Era esperado valores iguais, mas " + result9771 + " <Float.valueOf(12)> é diferente de " + result9772 + " <new JSONArray().fluentAdd('12').getFloatValue(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12).getFloat(0), "Era esperado valores iguais, mas " + result9773 + " <Float.valueOf(12)> é diferente de " + result9774 + " <new JSONArray().fluentAdd(12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((byte) 12).getFloat(0), "Era esperado valores iguais, mas " + result9775 + " <Float.valueOf(12)> é diferente de " + result9776 + " <new JSONArray().fluentAdd((byte) 12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd((short) 12).getFloat(0), "Era esperado valores iguais, mas " + result9777 + " <Float.valueOf(12)> é diferente de " + result9778 + " <new JSONArray().fluentAdd((short) 12).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12L).getFloat(0), "Era esperado valores iguais, mas " + result9779 + " <Float.valueOf(12)> é diferente de " + result9780 + " <new JSONArray().fluentAdd(12L).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12F), new JSONArray().fluentAdd(12F).getFloat(0), "Era esperado valores iguais, mas " + result9781 + " <Float.valueOf(12F)> é diferente de " + result9782 + " <new JSONArray().fluentAdd(12F).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(12D).getFloat(0), "Era esperado valores iguais, mas " + result9783 + " <Float.valueOf(12)> é diferente de " + result9784 + " <new JSONArray().fluentAdd(12D).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getFloat(0), "Era esperado valores iguais, mas " + result9785 + " <Float.valueOf(12)> é diferente de " + result9786 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getFloat(0), "Era esperado valores iguais, mas " + result9787 + " <Float.valueOf(12)> é diferente de " + result9788 + " <new JSONArray().fluentAdd(new BigInteger('12')).getFloat(0)>")
chamada antiga: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0))
nova chamada: assertEquals(Float.valueOf(12), new JSONArray().fluentAdd("12").getFloat(0), "Era esperado valores iguais, mas " + result9789 + " <Float.valueOf(12)> é diferente de " + result9790 + " <new JSONArray().fluentAdd('12').getFloat(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDoubleValue(0), "Era esperado valores iguais, mas " + result9791 + " <Double.valueOf(12)> é diferente de " + result9792 + " <new JSONArray().fluentAdd(12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDoubleValue(0), "Era esperado valores iguais, mas " + result9793 + " <Double.valueOf(12)> é diferente de " + result9794 + " <new JSONArray().fluentAdd((byte) 12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDoubleValue(0), "Era esperado valores iguais, mas " + result9795 + " <Double.valueOf(12)> é diferente de " + result9796 + " <new JSONArray().fluentAdd((short) 12).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDoubleValue(0), "Era esperado valores iguais, mas " + result9797 + " <Double.valueOf(12)> é diferente de " + result9798 + " <new JSONArray().fluentAdd(12L).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDoubleValue(0), "Era esperado valores iguais, mas " + result9799 + " <Double.valueOf(12F)> é diferente de " + result9800 + " <new JSONArray().fluentAdd(12F).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDoubleValue(0), "Era esperado valores iguais, mas " + result9801 + " <Double.valueOf(12)> é diferente de " + result9802 + " <new JSONArray().fluentAdd(12D).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDoubleValue(0), "Era esperado valores iguais, mas " + result9803 + " <Double.valueOf(12)> é diferente de " + result9804 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDoubleValue(0), "Era esperado valores iguais, mas " + result9805 + " <Double.valueOf(12)> é diferente de " + result9806 + " <new JSONArray().fluentAdd(new BigInteger('12')).getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDoubleValue(0), "Era esperado valores iguais, mas " + result9807 + " <Double.valueOf(12)> é diferente de " + result9808 + " <new JSONArray().fluentAdd('12').getDoubleValue(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12).getDouble(0), "Era esperado valores iguais, mas " + result9809 + " <Double.valueOf(12)> é diferente de " + result9810 + " <new JSONArray().fluentAdd(12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((byte) 12).getDouble(0), "Era esperado valores iguais, mas " + result9811 + " <Double.valueOf(12)> é diferente de " + result9812 + " <new JSONArray().fluentAdd((byte) 12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd((short) 12).getDouble(0), "Era esperado valores iguais, mas " + result9813 + " <Double.valueOf(12)> é diferente de " + result9814 + " <new JSONArray().fluentAdd((short) 12).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12L).getDouble(0), "Era esperado valores iguais, mas " + result9815 + " <Double.valueOf(12)> é diferente de " + result9816 + " <new JSONArray().fluentAdd(12L).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12F), new JSONArray().fluentAdd(12F).getDouble(0), "Era esperado valores iguais, mas " + result9817 + " <Double.valueOf(12F)> é diferente de " + result9818 + " <new JSONArray().fluentAdd(12F).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(12D).getDouble(0), "Era esperado valores iguais, mas " + result9819 + " <Double.valueOf(12)> é diferente de " + result9820 + " <new JSONArray().fluentAdd(12D).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigDecimal("12")).getDouble(0), "Era esperado valores iguais, mas " + result9821 + " <Double.valueOf(12)> é diferente de " + result9822 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd(new BigInteger("12")).getDouble(0), "Era esperado valores iguais, mas " + result9823 + " <Double.valueOf(12)> é diferente de " + result9824 + " <new JSONArray().fluentAdd(new BigInteger('12')).getDouble(0)>")
chamada antiga: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0))
nova chamada: assertEquals(Double.valueOf(12), new JSONArray().fluentAdd("12").getDouble(0), "Era esperado valores iguais, mas " + result9825 + " <Double.valueOf(12)> é diferente de " + result9826 + " <new JSONArray().fluentAdd('12').getDouble(0)>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0))
nova chamada: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd(1).getBoolean(0), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result9827 + " <new JSONArray().fluentAdd(1).getBoolean(0)>")
chamada antiga: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0))
nova chamada: assertEquals(Boolean.TRUE, new JSONArray().fluentAdd("true").getBoolean(0), "Era esperado valores iguais, mas  Boolean.TRUE é diferente de " + result9828 + " <new JSONArray().fluentAdd('true').getBoolean(0)>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0))
nova chamada: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result9829 + " <new JSONArray().fluentAdd(Boolean.FALSE).getBoolean(0)>")
chamada antiga: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0))
nova chamada: assertEquals(Boolean.FALSE, new JSONArray().fluentAdd("FALSE").getBoolean(0), "Era esperado valores iguais, mas  Boolean.FALSE é diferente de " + result9830 + " <new JSONArray().fluentAdd('FALSE').getBoolean(0)>")
chamada antiga: assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0))
nova chamada: assertEquals(true, new JSONArray().fluentAdd(1).getBooleanValue(0), "Era esperado valores iguais, mas  true é diferente de " + result9831 + " <new JSONArray().fluentAdd(1).getBooleanValue(0)>")
chamada antiga: assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0))
nova chamada: assertEquals(true, new JSONArray().fluentAdd("true").getBooleanValue(0), "Era esperado valores iguais, mas  true é diferente de " + result9832 + " <new JSONArray().fluentAdd('true').getBooleanValue(0)>")
chamada antiga: assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0))
nova chamada: assertEquals(false, new JSONArray().fluentAdd("FALSE").getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result9833 + " <new JSONArray().fluentAdd('FALSE').getBooleanValue(0)>")
chamada antiga: assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0))
nova chamada: assertEquals(false, new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0), "Era esperado valores iguais, mas  false é diferente de " + result9834 + " <new JSONArray().fluentAdd(Boolean.FALSE).getBooleanValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9835 + " <new JSONArray().fluentAdd(12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd((byte) 12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9836 + " <new JSONArray().fluentAdd((byte) 12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd((short) 12).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9837 + " <new JSONArray().fluentAdd((short) 12).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12L).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9838 + " <new JSONArray().fluentAdd(12L).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12F).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9839 + " <new JSONArray().fluentAdd(12F).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(12D).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9840 + " <new JSONArray().fluentAdd(12D).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9841 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd(new BigInteger("12")).getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9842 + " <new JSONArray().fluentAdd(new BigInteger('12')).getShortValue(0)>")
chamada antiga: assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0))
nova chamada: assertEquals((short) 12, new JSONArray().fluentAdd("12").getShortValue(0), "Era esperado valores iguais, mas  (short) 12 é diferente de " + result9843 + " <new JSONArray().fluentAdd('12').getShortValue(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12).getShort(0), "Era esperado valores iguais, mas " + result9844 + " <Short.valueOf((short) 12)> é diferente de " + result9845 + " <new JSONArray().fluentAdd(12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((byte) 12).getShort(0), "Era esperado valores iguais, mas " + result9846 + " <Short.valueOf((short) 12)> é diferente de " + result9847 + " <new JSONArray().fluentAdd((byte) 12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd((short) 12).getShort(0), "Era esperado valores iguais, mas " + result9848 + " <Short.valueOf((short) 12)> é diferente de " + result9849 + " <new JSONArray().fluentAdd((short) 12).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12L).getShort(0), "Era esperado valores iguais, mas " + result9850 + " <Short.valueOf((short) 12)> é diferente de " + result9851 + " <new JSONArray().fluentAdd(12L).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12F).getShort(0), "Era esperado valores iguais, mas " + result9852 + " <Short.valueOf((short) 12)> é diferente de " + result9853 + " <new JSONArray().fluentAdd(12F).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(12D).getShort(0), "Era esperado valores iguais, mas " + result9854 + " <Short.valueOf((short) 12)> é diferente de " + result9855 + " <new JSONArray().fluentAdd(12D).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getShort(0), "Era esperado valores iguais, mas " + result9856 + " <Short.valueOf((short) 12)> é diferente de " + result9857 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(new BigInteger("12")).getShort(0), "Era esperado valores iguais, mas " + result9858 + " <Short.valueOf((short) 12)> é diferente de " + result9859 + " <new JSONArray().fluentAdd(new BigInteger('12')).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0), "Era esperado valores iguais, mas " + result9860 + " <Short.valueOf((short) 12)> é diferente de " + result9861 + " <new JSONArray().fluentAdd(Short.valueOf((short) 12)).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0), "Era esperado valores iguais, mas " + result9862 + " <Short.valueOf((short) 12)> é diferente de " + result9863 + " <new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getShort(0)>")
chamada antiga: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0))
nova chamada: assertEquals(Short.valueOf((short) 12), new JSONArray().fluentAdd("12").getShort(0), "Era esperado valores iguais, mas " + result9864 + " <Short.valueOf((short) 12)> é diferente de " + result9865 + " <new JSONArray().fluentAdd('12').getShort(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9866 + " <new JSONArray().fluentAdd(12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd((byte) 12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9867 + " <new JSONArray().fluentAdd((byte) 12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd((short) 12).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9868 + " <new JSONArray().fluentAdd((short) 12).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12L).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9869 + " <new JSONArray().fluentAdd(12L).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12F).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9870 + " <new JSONArray().fluentAdd(12F).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(12D).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9871 + " <new JSONArray().fluentAdd(12D).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigDecimal("12")).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9872 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd(new BigInteger("12")).getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9873 + " <new JSONArray().fluentAdd(new BigInteger('12')).getByteValue(0)>")
chamada antiga: assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0))
nova chamada: assertEquals((byte) 12, new JSONArray().fluentAdd("12").getByteValue(0), "Era esperado valores iguais, mas  (byte) 12 é diferente de " + result9874 + " <new JSONArray().fluentAdd('12').getByteValue(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12).getByte(0), "Era esperado valores iguais, mas " + result9875 + " <Byte.valueOf((byte) 12)> é diferente de " + result9876 + " <new JSONArray().fluentAdd(12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((byte) 12).getByte(0), "Era esperado valores iguais, mas " + result9877 + " <Byte.valueOf((byte) 12)> é diferente de " + result9878 + " <new JSONArray().fluentAdd((byte) 12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd((short) 12).getByte(0), "Era esperado valores iguais, mas " + result9879 + " <Byte.valueOf((byte) 12)> é diferente de " + result9880 + " <new JSONArray().fluentAdd((short) 12).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12L).getByte(0), "Era esperado valores iguais, mas " + result9881 + " <Byte.valueOf((byte) 12)> é diferente de " + result9882 + " <new JSONArray().fluentAdd(12L).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12F).getByte(0), "Era esperado valores iguais, mas " + result9883 + " <Byte.valueOf((byte) 12)> é diferente de " + result9884 + " <new JSONArray().fluentAdd(12F).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(12D).getByte(0), "Era esperado valores iguais, mas " + result9885 + " <Byte.valueOf((byte) 12)> é diferente de " + result9886 + " <new JSONArray().fluentAdd(12D).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigDecimal("12")).getByte(0), "Era esperado valores iguais, mas " + result9887 + " <Byte.valueOf((byte) 12)> é diferente de " + result9888 + " <new JSONArray().fluentAdd(new BigDecimal('12')).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(new BigInteger("12")).getByte(0), "Era esperado valores iguais, mas " + result9889 + " <Byte.valueOf((byte) 12)> é diferente de " + result9890 + " <new JSONArray().fluentAdd(new BigInteger('12')).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0), "Era esperado valores iguais, mas " + result9891 + " <Byte.valueOf((byte) 12)> é diferente de " + result9892 + " <new JSONArray().fluentAdd(Short.valueOf((short) 12)).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0), "Era esperado valores iguais, mas " + result9893 + " <Byte.valueOf((byte) 12)> é diferente de " + result9894 + " <new JSONArray().fluentAdd(Byte.valueOf((byte) 12)).getByte(0)>")
chamada antiga: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0))
nova chamada: assertEquals(Byte.valueOf((byte) 12), new JSONArray().fluentAdd("12").getByte(0), "Era esperado valores iguais, mas " + result9895 + " <Byte.valueOf((byte) 12)> é diferente de " + result9896 + " <new JSONArray().fluentAdd('12').getByte(0)>")
chamada antiga: assertEquals(array.size(), arrayList.size())
nova chamada: assertEquals(array.size(), arrayList.size(), "Era esperado valores iguais, mas " + result9897 + " <array.size()> é diferente de " + result9898 + " <arrayList.size()>")
chamada antiga: assertNull(array.getComponentType())
nova chamada: assertNull(array.getComponentType(), "Era esperado nulo, mas " + result9899 + " <array.getComponentType()> não é nulo")
chamada antiga: assertEquals(Integer.class, array.getComponentType())
nova chamada: assertEquals(Integer.class, array.getComponentType(), "Era esperado valores iguais, mas  Integer.class é diferente de " + result9900 + " <array.getComponentType()>")
chamada antiga: assertNull(array.getRelatedArray())
nova chamada: assertNull(array.getRelatedArray(), "Era esperado nulo, mas " + result9901 + " <array.getRelatedArray()> não é nulo")
chamada antiga: assertSame(javaArray, array.getRelatedArray())
nova chamada: assertSame(javaArray, array.getRelatedArray(), "Era esperado objetos iguais, mas  javaArray é diferente de " + result9902 + " <array.getRelatedArray()>")
chamada antiga: assertEquals("{\"age\":33,\"id\":1001,\"name\":\"xx\"}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"age\":33,\"id\":1001,\"name\":\"xx\"}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'age\':33,\'id\':1001,\'name\':\'xx\'}' é diferente de " + result9903 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'id\':1001,\'name\':\'xx\',\'age\':33}' é diferente de " + result9904 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo))
nova chamada: assertEquals("{\"id\":1001,\"name\":\"xx\",\"age\":33}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{\'id\':1001,\'name\':\'xx\',\'age\':33}' é diferente de " + result9905 + " <JSON.toJSONString(vo)>")
chamada antiga: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"))
nova chamada: assertEquals(TestUtils.encodeToBase64String(entity.getValue(), false), json.getString("value"), "Era esperado valores iguais, mas " + result9906 + " <TestUtils.encodeToBase64String(entity.getValue(), false)> é diferente de " + result9907 + " <json.getString('value')>")
chamada antiga: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"))
nova chamada: assertEquals("中华人民共和国", new String(entity2.getValue(), "UTF-8"), "Era esperado valores iguais, mas  '中华人民共和国' é diferente de " + " new String(entity2.getValue(), 'UTF-8')")
chamada antiga: assertEquals(user1.getId(), user.getId())
nova chamada: assertEquals(user1.getId(), user.getId(), "Era esperado valores iguais, mas " + result9908 + " <user1.getId()> é diferente de " + result9909 + " <user.getId()>")
chamada antiga: assertEquals(user1.getName(), user.getName())
nova chamada: assertEquals(user1.getName(), user.getName(), "Era esperado valores iguais, mas " + result9910 + " <user1.getName()> é diferente de " + result9911 + " <user.getName()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result9912 + " <user1.getValue()> é diferente de " + result9913 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result9914 + " <user1.getValue()> é diferente de " + result9915 + " <user.getValue()>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible))
nova chamada: assertEquals("{\"id1\":\"-9223370018640066466\",\"id2\":\"9223370018640066466\",\"id3\":100}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'id1\':\'-9223370018640066466\',\'id2\':\'9223370018640066466\',\'id3\':100}' é diferente de " + result9916 + " <JSON.toJSONString(map, SerializerFeature.BrowserCompatible)>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m1.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9917 + " <m1.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m1.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9918 + " <m1.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m1.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m1.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9919 + " <m1.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m1.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m1.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9920 + " <m1.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m1.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9921 + " <m1.v5.longValue()>")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m2.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9922 + " <m2.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m2.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9923 + " <m2.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m2.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m2.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9924 + " <m2.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m2.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m2.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9925 + " <m2.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m2.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9926 + " <m2.v5.longValue()>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m1.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9927 + " <m1.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m1.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9928 + " <m1.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m1.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m1.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9929 + " <m1.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m1.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m1.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9930 + " <m1.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m1.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9931 + " <m1.v5.longValue()>")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m2.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9932 + " <m2.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m2.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9933 + " <m2.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m2.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m2.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9934 + " <m2.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m2.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m2.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9935 + " <m2.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m2.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9936 + " <m2.v5.longValue()>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m1.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9937 + " <m1.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m1.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9938 + " <m1.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m1.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m1.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9939 + " <m1.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m1.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m1.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9940 + " <m1.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m1.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9941 + " <m1.v5.longValue()>")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1.longValue())
nova chamada: assertEquals(-1883391953414482124L, m2.v1.longValue(), "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + result9942 + " <m2.v1.longValue()>")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2.longValue())
nova chamada: assertEquals(-3019416596934963650L, m2.v2.longValue(), "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + result9943 + " <m2.v2.longValue()>")
chamada antiga: assertEquals(6497525620823745793L, m2.v3.longValue())
nova chamada: assertEquals(6497525620823745793L, m2.v3.longValue(), "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + result9944 + " <m2.v3.longValue()>")
chamada antiga: assertEquals(2136224289077142499L, m2.v4.longValue())
nova chamada: assertEquals(2136224289077142499L, m2.v4.longValue(), "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + result9945 + " <m2.v4.longValue()>")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5.longValue())
nova chamada: assertEquals(-2090575024006307745L, m2.v5.longValue(), "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + result9946 + " <m2.v5.longValue()>")
chamada antiga: Assertions.assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1)
nova chamada: assertEquals(-1883391953414482124L, m1.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m1.v1")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2)
nova chamada: assertEquals(-3019416596934963650L, m1.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m1.v2")
chamada antiga: assertEquals(6497525620823745793L, m1.v3)
nova chamada: assertEquals(6497525620823745793L, m1.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m1.v3")
chamada antiga: assertEquals(2136224289077142499L, m1.v4)
nova chamada: assertEquals(2136224289077142499L, m1.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m1.v4")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5)
nova chamada: assertEquals(-2090575024006307745L, m1.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m1.v5")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1)
nova chamada: assertEquals(-1883391953414482124L, m2.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m2.v1")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2)
nova chamada: assertEquals(-3019416596934963650L, m2.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m2.v2")
chamada antiga: assertEquals(6497525620823745793L, m2.v3)
nova chamada: assertEquals(6497525620823745793L, m2.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m2.v3")
chamada antiga: assertEquals(2136224289077142499L, m2.v4)
nova chamada: assertEquals(2136224289077142499L, m2.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m2.v4")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5)
nova chamada: assertEquals(-2090575024006307745L, m2.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1)
nova chamada: assertEquals(-1883391953414482124L, m1.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m1.v1")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2)
nova chamada: assertEquals(-3019416596934963650L, m1.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m1.v2")
chamada antiga: assertEquals(6497525620823745793L, m1.v3)
nova chamada: assertEquals(6497525620823745793L, m1.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m1.v3")
chamada antiga: assertEquals(2136224289077142499L, m1.v4)
nova chamada: assertEquals(2136224289077142499L, m1.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m1.v4")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5)
nova chamada: assertEquals(-2090575024006307745L, m1.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m1.v5")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1)
nova chamada: assertEquals(-1883391953414482124L, m2.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m2.v1")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2)
nova chamada: assertEquals(-3019416596934963650L, m2.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m2.v2")
chamada antiga: assertEquals(6497525620823745793L, m2.v3)
nova chamada: assertEquals(6497525620823745793L, m2.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m2.v3")
chamada antiga: assertEquals(2136224289077142499L, m2.v4)
nova chamada: assertEquals(2136224289077142499L, m2.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m2.v4")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5)
nova chamada: assertEquals(-2090575024006307745L, m2.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-1883391953414482124L, m1.v1)
nova chamada: assertEquals(-1883391953414482124L, m1.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m1.v1")
chamada antiga: assertEquals(-3019416596934963650L, m1.v2)
nova chamada: assertEquals(-3019416596934963650L, m1.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m1.v2")
chamada antiga: assertEquals(6497525620823745793L, m1.v3)
nova chamada: assertEquals(6497525620823745793L, m1.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m1.v3")
chamada antiga: assertEquals(2136224289077142499L, m1.v4)
nova chamada: assertEquals(2136224289077142499L, m1.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m1.v4")
chamada antiga: assertEquals(-2090575024006307745L, m1.v5)
nova chamada: assertEquals(-2090575024006307745L, m1.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m1.v5")
chamada antiga: assertEquals(-1883391953414482124L, m2.v1)
nova chamada: assertEquals(-1883391953414482124L, m2.v1, "Era esperado valores iguais, mas  -1883391953414482124L é diferente de " + " m2.v1")
chamada antiga: assertEquals(-3019416596934963650L, m2.v2)
nova chamada: assertEquals(-3019416596934963650L, m2.v2, "Era esperado valores iguais, mas  -3019416596934963650L é diferente de " + " m2.v2")
chamada antiga: assertEquals(6497525620823745793L, m2.v3)
nova chamada: assertEquals(6497525620823745793L, m2.v3, "Era esperado valores iguais, mas  6497525620823745793L é diferente de " + " m2.v3")
chamada antiga: assertEquals(2136224289077142499L, m2.v4)
nova chamada: assertEquals(2136224289077142499L, m2.v4, "Era esperado valores iguais, mas  2136224289077142499L é diferente de " + " m2.v4")
chamada antiga: assertEquals(-2090575024006307745L, m2.v5)
nova chamada: assertEquals(-2090575024006307745L, m2.v5, "Era esperado valores iguais, mas  -2090575024006307745L é diferente de " + " m2.v5")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result9947 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result9948 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result9949 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result9950 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result9951 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result9952 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709D, m1.v1)
nova chamada: assertEquals(-0.012671709D, m1.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.22676692048907365D, m1.v2)
nova chamada: assertEquals(0.22676692048907365D, m1.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707D, m1.v3)
nova chamada: assertEquals(0.13231707D, m1.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785D, m1.v4)
nova chamada: assertEquals(0.80090785D, m1.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943D, m1.v5)
nova chamada: assertEquals(0.6192943D, m1.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709D, m2.v1)
nova chamada: assertEquals(-0.012671709D, m2.v1, "Era esperado valores iguais, mas  -0.012671709D é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.22676692048907365D, m2.v2)
nova chamada: assertEquals(0.22676692048907365D, m2.v2, "Era esperado valores iguais, mas  0.22676692048907365D é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707D, m2.v3)
nova chamada: assertEquals(0.13231707D, m2.v3, "Era esperado valores iguais, mas  0.13231707D é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785D, m2.v4)
nova chamada: assertEquals(0.80090785D, m2.v4, "Era esperado valores iguais, mas  0.80090785D é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943D, m2.v5)
nova chamada: assertEquals(0.6192943D, m2.v5, "Era esperado valores iguais, mas  0.6192943D é diferente de " + " m2.v5")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result9953 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result9954 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result9955 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result9956 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result9957 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result9958 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible))
nova chamada: assertEquals("{\"id1\":\"9223370018640066466\",\"id2\":\"9223370018640066466\"}", JSON.toJSONString(map, SerializerFeature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'id1\':\'9223370018640066466\',\'id2\':\'9223370018640066466\'}' é diferente de " + result9959 + " <JSON.toJSONString(map, SerializerFeature.BrowserCompatible)>")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertEquals(val, m.value)
nova chamada: assertEquals(val, m.value, "Era esperado valores iguais, mas  val é diferente de " + " m.value")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(model.v1)
nova chamada: assertNull(model.v1, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.v2)
nova chamada: assertNull(model.v2, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(values_2.length, values.length)
nova chamada: assertEquals(values_2.length, values.length, "Era esperado valores iguais, mas  values_2.length é diferente de " + " values.length")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(m1)
nova chamada: assertNotNull(m1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(m2)
nova chamada: assertNotNull(m2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(-0.012671709f, m1.v1)
nova chamada: assertEquals(-0.012671709f, m1.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m1.v1")
chamada antiga: assertEquals(0.6042485f, m1.v2)
nova chamada: assertEquals(0.6042485f, m1.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m1.v2")
chamada antiga: assertEquals(0.13231707f, m1.v3)
nova chamada: assertEquals(0.13231707f, m1.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m1.v3")
chamada antiga: assertEquals(0.80090785f, m1.v4)
nova chamada: assertEquals(0.80090785f, m1.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m1.v4")
chamada antiga: assertEquals(0.6192943f, m1.v5)
nova chamada: assertEquals(0.6192943f, m1.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m1.v5")
chamada antiga: assertEquals(-0.012671709f, m2.v1)
nova chamada: assertEquals(-0.012671709f, m2.v1, "Era esperado valores iguais, mas  -0.012671709f é diferente de " + " m2.v1")
chamada antiga: assertEquals(0.6042485f, m2.v2)
nova chamada: assertEquals(0.6042485f, m2.v2, "Era esperado valores iguais, mas  0.6042485f é diferente de " + " m2.v2")
chamada antiga: assertEquals(0.13231707f, m2.v3)
nova chamada: assertEquals(0.13231707f, m2.v3, "Era esperado valores iguais, mas  0.13231707f é diferente de " + " m2.v3")
chamada antiga: assertEquals(0.80090785f, m2.v4)
nova chamada: assertEquals(0.80090785f, m2.v4, "Era esperado valores iguais, mas  0.80090785f é diferente de " + " m2.v4")
chamada antiga: assertEquals(0.6192943f, m2.v5)
nova chamada: assertEquals(0.6192943f, m2.v5, "Era esperado valores iguais, mas  0.6192943f é diferente de " + " m2.v5")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.v1)
nova chamada: assertEquals(0, model.v1, "Era esperado valores iguais, mas  0 é diferente de " + " model.v1")
chamada antiga: assertEquals(0, model.v2)
nova chamada: assertEquals(0, model.v2, "Era esperado valores iguais, mas  0 é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.v1)
nova chamada: assertEquals(0D, model.v1, "Era esperado valores iguais, mas  0D é diferente de " + " model.v1")
chamada antiga: assertEquals(0D, model.v2)
nova chamada: assertEquals(0D, model.v2, "Era esperado valores iguais, mas  0D é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertNotNull(model)
nova chamada: assertNotNull(model, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.v1)
nova chamada: assertEquals(0F, model.v1, "Era esperado valores iguais, mas  0F é diferente de " + " model.v1")
chamada antiga: assertEquals(0F, model.v2)
nova chamada: assertEquals(0F, model.v2, "Era esperado valores iguais, mas  0F é diferente de " + " model.v2")
chamada antiga: assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult)
nova chamada: assertEquals("a[\"a0\\\"\",\"a1\"]", fastjsonResult, "Era esperado valores iguais, mas  'a[\'a0\\\'\',\'a1\']' é diferente de " + " fastjsonResult")
chamada antiga: assertEquals(jacksonResult, fastjsonResult)
nova chamada: assertEquals(jacksonResult, fastjsonResult, "Era esperado valores iguais, mas  jacksonResult é diferente de " + " fastjsonResult")
chamada antiga: assertEquals(context.getClass(), deserialized.getClass())
nova chamada: assertEquals(context.getClass(), deserialized.getClass(), "Era esperado valores iguais, mas " + result9960 + " <context.getClass()> é diferente de " + result9961 + " <deserialized.getClass()>")
chamada antiga: Assertions.assertNotNull(fastJsonRedisSerializer.getFastJsonConfig())
nova chamada: assertNotNull(fastJsonRedisSerializer.getFastJsonConfig(), "Era esperado não nulo, mas " + result9962 + " <fastJsonRedisSerializer.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(userDes.getName(), "土豆")
nova chamada: assertEquals(userDes.getName(), "土豆", "Era esperado valores iguais, mas " + result9963 + " <userDes.getName()> é diferente de " + " '土豆'")
chamada antiga: Assertions.assertNotNull(converter.getFastJsonConfig())
nova chamada: assertNotNull(converter.getFastJsonConfig(), "Era esperado não nulo, mas " + result9964 + " <converter.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(1, vo.getId())
nova chamada: assertEquals(1, vo.getId(), "Era esperado valores iguais, mas  1 é diferente de " + result9965 + " <vo.getId()>")
chamada antiga: Assertions.assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()))
nova chamada: assertEquals("{\"id\":1}", new String((byte[]) message1.getPayload()), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + " new String((byte[]) message1.getPayload())")
chamada antiga: Assertions.assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()))
nova chamada: assertEquals("{\"id\":1}", new String((byte[]) message2.getPayload()), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + " new String((byte[]) message2.getPayload())")
chamada antiga: Assertions.assertEquals("{\"id\":1}", message3.getPayload())
nova chamada: assertEquals("{\"id\":1}", message3.getPayload(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result9966 + " <message3.getPayload()>")
chamada antiga: Assertions.assertEquals("{\"id\":1}", message4.getPayload())
nova chamada: assertEquals("{\"id\":1}", message4.getPayload(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result9967 + " <message4.getPayload()>")
chamada antiga: Assertions.assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result9968 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
nova chamada: assertEquals(true, view.isExtractValueFromSingleKeyModel(), "Era esperado valores iguais, mas  true é diferente de " + result9969 + " <view.isExtractValueFromSingleKeyModel()>")
chamada antiga: Assertions.assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result9970 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
nova chamada: assertEquals(true, view.isExtractValueFromSingleKeyModel(), "Era esperado valores iguais, mas  true é diferente de " + result9971 + " <view.isExtractValueFromSingleKeyModel()>")
chamada antiga: Assertions.assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length)
nova chamada: assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length, "Era esperado valores iguais, mas  contentLength é diferente de " + " contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length")
chamada antiga: Assertions.assertNotNull(view.getFastJsonConfig())
nova chamada: assertNotNull(view.getFastJsonConfig(), "Era esperado não nulo, mas " + result9972 + " <view.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(true, view.isExtractValueFromSingleKeyModel())
nova chamada: assertEquals(true, view.isExtractValueFromSingleKeyModel(), "Era esperado valores iguais, mas  true é diferente de " + result9973 + " <view.isExtractValueFromSingleKeyModel()>")
chamada antiga: Assertions.assertEquals(baseResult2.getCode(), "1000")
nova chamada: assertEquals(baseResult2.getCode(), "1000", "Era esperado valores iguais, mas " + result9974 + " <baseResult2.getCode()> é diferente de " + " '1000'")
chamada antiga: Assertions.assertEquals(baseResult2.getData().size(), 3)
nova chamada: assertEquals(baseResult2.getData().size(), 3, "Era esperado valores iguais, mas " + result9975 + " <baseResult2.getData().size()> é diferente de " + " 3")
chamada antiga: Assertions.assertEquals(baseResult3.getCode(), "1000")
nova chamada: assertEquals(baseResult3.getCode(), "1000", "Era esperado valores iguais, mas " + result9976 + " <baseResult3.getCode()> é diferente de " + " '1000'")
chamada antiga: Assertions.assertEquals(baseResult3.getData().size(), 6)
nova chamada: assertEquals(baseResult3.getData().size(), 6, "Era esperado valores iguais, mas " + result9977 + " <baseResult3.getData().size()> é diferente de " + " 6")
chamada antiga: Assertions.assertEquals(1, converter.getSupportedMediaTypes().size())
nova chamada: assertEquals(1, converter.getSupportedMediaTypes().size(), "Era esperado valores iguais, mas  1 é diferente de " + result9978 + " <converter.getSupportedMediaTypes().size()>")
chamada antiga: Assertions.assertEquals(123, vo.getId())
nova chamada: assertEquals(123, vo.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result9979 + " <vo.getId()>")
chamada antiga: Assertions.assertEquals("{\"id\":123}", new String(bytes, "UTF-8"))
nova chamada: assertEquals("{\"id\":123}", new String(bytes, "UTF-8"), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + " new String(bytes, 'UTF-8')")
chamada antiga: Assertions.assertNotNull(converter.getFastJsonConfig())
nova chamada: assertNotNull(converter.getFastJsonConfig(), "Era esperado não nulo, mas " + result9980 + " <converter.getFastJsonConfig()> é nulo")
chamada antiga: Assertions.assertEquals(123, vo.getId())
nova chamada: assertEquals(123, vo.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result9981 + " <vo.getId()>")
chamada antiga: Assertions.assertEquals("{\"id\":123}", new String(bytes, "UTF-8"))
nova chamada: assertEquals("{\"id\":123}", new String(bytes, "UTF-8"), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + " new String(bytes, 'UTF-8')")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals("abc", values[0])
nova chamada: assertEquals("abc", values[0], "Era esperado valores iguais, mas  'abc' é diferente de " + " values[0]")
chamada antiga: assertEquals("xxx", ((Model) values[1]).value)
nova chamada: assertEquals("xxx", ((Model) values[1]).value, "Era esperado valores iguais, mas  'xxx' é diferente de " + " ((Model) values[1]).value")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals("abc", values[0])
nova chamada: assertEquals("abc", values[0], "Era esperado valores iguais, mas  'abc' é diferente de " + " values[0]")
chamada antiga: assertEquals("xxx", ((Model) values[1]).value)
nova chamada: assertEquals("xxx", ((Model) values[1]).value, "Era esperado valores iguais, mas  'xxx' é diferente de " + " ((Model) values[1]).value")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals(null, values[0])
nova chamada: assertEquals(null, values[0], "Era esperado valores iguais, mas  null é diferente de " + " values[0]")
chamada antiga: assertEquals(null, values[1])
nova chamada: assertEquals(null, values[1], "Era esperado valores iguais, mas  null é diferente de " + " values[1]")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals("abc", values[0])
nova chamada: assertEquals("abc", values[0], "Era esperado valores iguais, mas  'abc' é diferente de " + " values[0]")
chamada antiga: assertEquals("xxx", ((Model) list.get(0)).value)
nova chamada: assertEquals("xxx", ((Model) list.get(0)).value, "Era esperado valores iguais, mas  'xxx' é diferente de " + " ((Model) list.get(0)).value")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, values.length)
nova chamada: assertEquals(1, values.length, "Era esperado valores iguais, mas  1 é diferente de " + " values.length")
chamada antiga: assertEquals("123", ((User) list.get(0)).name)
nova chamada: assertEquals("123", ((User) list.get(0)).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list.get(0)).name")
chamada antiga: assertEquals("123", ((User) list.get(1)).name)
nova chamada: assertEquals("123", ((User) list.get(1)).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list.get(1)).name")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, values.length)
nova chamada: assertEquals(1, values.length, "Era esperado valores iguais, mas  1 é diferente de " + " values.length")
chamada antiga: assertEquals("123", ((User) list.get(0)).name)
nova chamada: assertEquals("123", ((User) list.get(0)).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list.get(0)).name")
chamada antiga: assertEquals("123", ((User) list.get(1)).name)
nova chamada: assertEquals("123", ((User) list.get(1)).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list.get(1)).name")
chamada antiga: assertNotNull(values)
nova chamada: assertNotNull(values, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, values.length)
nova chamada: assertEquals(1, values.length, "Era esperado valores iguais, mas  1 é diferente de " + " values.length")
chamada antiga: assertEquals("123", ((User) list[0]).name)
nova chamada: assertEquals("123", ((User) list[0]).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list[0]).name")
chamada antiga: assertEquals("123", ((User) list[1]).name)
nova chamada: assertEquals("123", ((User) list[1]).name, "Era esperado valores iguais, mas  '123' é diferente de " + " ((User) list[1]).name")
chamada antiga: assertNotEquals(requestBody.contentLength(), 0)
nova chamada: assertNotEquals(requestBody.contentLength(), 0, "Era esperado valores diferentes, mas " + result9982 + " <requestBody.contentLength()> é igual a " + " 0")
chamada antiga: assertEquals(JSON.toJSONString(mode2), json)
nova chamada: assertEquals(JSON.toJSONString(mode2), json, "Era esperado valores iguais, mas " + result9983 + " <JSON.toJSONString(mode2)> é diferente de " + " json")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getId(), 1))
nova chamada: assertTrue(Objects.equal(user.getId(), 1), "Era esperado verdadeiro, mas " + result9984 + " <Objects.equal(user.getId(), 1)> é falso")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getName(), "土豆"))
nova chamada: assertTrue(Objects.equal(user.getName(), "土豆"), "Era esperado verdadeiro, mas " + result9985 + " <Objects.equal(user.getName(), '土豆')> é falso")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getAge(), 25))
nova chamada: assertTrue(Objects.equal(user.getAge(), 25), "Era esperado verdadeiro, mas " + result9986 + " <Objects.equal(user.getAge(), 25)> é falso")
chamada antiga: Assertions.assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"))
nova chamada: assertTrue(contentAsString.startsWith("{\"abc\":\"cde中文\"}"), "Era esperado verdadeiro, mas " + result9987 + " <contentAsString.startsWith('{\'abc\':\'cde中文\'}')> é falso")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getId(), 1))
nova chamada: assertTrue(Objects.equal(user.getId(), 1), "Era esperado verdadeiro, mas " + result9988 + " <Objects.equal(user.getId(), 1)> é falso")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getName(), "土豆"))
nova chamada: assertTrue(Objects.equal(user.getName(), "土豆"), "Era esperado verdadeiro, mas " + result9989 + " <Objects.equal(user.getName(), '土豆')> é falso")
chamada antiga: Assertions.assertTrue(Objects.equal(user.getAge(), 25))
nova chamada: assertTrue(Objects.equal(user.getAge(), 25), "Era esperado verdadeiro, mas " + result9990 + " <Objects.equal(user.getAge(), 25)> é falso")
chamada antiga: assertNotNull(provider.getFastJsonConfig())
nova chamada: assertNotNull(provider.getFastJsonConfig(), "Era esperado não nulo, mas " + result9991 + " <provider.getFastJsonConfig()> é nulo")
chamada antiga: assertTrue(provider.hasMatchingMediaType(MediaType.APPLICATION_JSON_TYPE))
nova chamada: assertTrue(provider.hasMatchingMediaType(MediaType.APPLICATION_JSON_TYPE), "Era esperado verdadeiro, mas " + result9992 + " <provider.hasMatchingMediaType(MediaType.APPLICATION_JSON_TYPE)> é falso")
chamada antiga: assertTrue(provider.hasMatchingMediaType(null))
nova chamada: assertTrue(provider.hasMatchingMediaType(null), "Era esperado verdadeiro, mas " + result9993 + " <provider.hasMatchingMediaType(null)> é falso")
chamada antiga: assertEquals(-1, provider.getSize(null, null, null, null, null))
nova chamada: assertEquals(-1, provider.getSize(null, null, null, null, null), "Era esperado valores iguais, mas  -1 é diferente de " + result9994 + " <provider.getSize(null, null, null, null, null)>")
chamada antiga: assertNull(provider.readFrom(null, null, null, null, null, null))
nova chamada: assertNull(provider.readFrom(null, null, null, null, null, null), "Era esperado nulo, mas " + result9995 + " <provider.readFrom(null, null, null, null, null, null)> não é nulo")
chamada antiga: assertNotNull(provider.getFeatures())
nova chamada: assertNotNull(provider.getFeatures(), "Era esperado não nulo, mas " + result9996 + " <provider.getFeatures()> é nulo")
chamada antiga: assertNotNull(provider.getFilters())
nova chamada: assertNotNull(provider.getFilters(), "Era esperado não nulo, mas " + result9997 + " <provider.getFilters()> é nulo")
chamada antiga: assertNotNull(provider.getDateFormat())
nova chamada: assertNotNull(provider.getDateFormat(), "Era esperado não nulo, mas " + result9998 + " <provider.getDateFormat()> é nulo")
chamada antiga: assertNotNull(provider.getCharset())
nova chamada: assertNotNull(provider.getCharset(), "Era esperado não nulo, mas " + result9999 + " <provider.getCharset()> é nulo")
chamada antiga: assertFalse(jsonObject.containsKey("id"))
nova chamada: assertFalse(jsonObject.containsKey("id"), "Era esperado falso, mas " + result10000 + " <jsonObject.containsKey('id')> é verdadeiro ")
chamada antiga: assertFalse(jsonObject.containsValue("id"))
nova chamada: assertFalse(jsonObject.containsValue("id"), "Era esperado falso, mas " + result10001 + " <jsonObject.containsValue('id')> é verdadeiro ")
chamada antiga: assertFalse(provider.hasMatchingMediaType(MediaType.MULTIPART_FORM_DATA_TYPE))
nova chamada: assertFalse(provider.hasMatchingMediaType(MediaType.MULTIPART_FORM_DATA_TYPE), "Era esperado falso, mas " + result10002 + " <provider.hasMatchingMediaType(MediaType.MULTIPART_FORM_DATA_TYPE)> é verdadeiro ")
chamada antiga: assertFalse(provider.hasMatchingMediaType(MediaType.APPLICATION_OCTET_STREAM_TYPE))
nova chamada: assertFalse(provider.hasMatchingMediaType(MediaType.APPLICATION_OCTET_STREAM_TYPE), "Era esperado falso, mas " + result10003 + " <provider.hasMatchingMediaType(MediaType.APPLICATION_OCTET_STREAM_TYPE)> é verdadeiro ")
chamada antiga: assertFalse(provider.hasMatchingMediaType(MediaType.TEXT_PLAIN_TYPE))
nova chamada: assertFalse(provider.hasMatchingMediaType(MediaType.TEXT_PLAIN_TYPE), "Era esperado falso, mas " + result10004 + " <provider.hasMatchingMediaType(MediaType.TEXT_PLAIN_TYPE)> é verdadeiro ")
chamada antiga: assertFalse(provider.isReadable(null, null, null, null))
nova chamada: assertFalse(provider.isReadable(null, null, null, null), "Era esperado falso, mas " + result10005 + " <provider.isReadable(null, null, null, null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(null))
nova chamada: assertFalse(JSON.isValid(null), "Era esperado falso, mas " + result10006 + " <JSON.isValid(null)> é verdadeiro ")
chamada antiga: assertFalse(JSON.isValid(""))
nova chamada: assertFalse(JSON.isValid(""), "Era esperado falso, mas " + result10007 + " <JSON.isValid('')> é verdadeiro ")
chamada antiga: assertTrue(JSON.isValid("null"))
nova chamada: assertTrue(JSON.isValid("null"), "Era esperado verdadeiro, mas " + result10008 + " <JSON.isValid('null')> é falso")
chamada antiga: assertTrue(JSON.isValid("123"))
nova chamada: assertTrue(JSON.isValid("123"), "Era esperado verdadeiro, mas " + result10009 + " <JSON.isValid('123')> é falso")
chamada antiga: assertTrue(JSON.isValid("12.34"))
nova chamada: assertTrue(JSON.isValid("12.34"), "Era esperado verdadeiro, mas " + result10010 + " <JSON.isValid('12.34')> é falso")
chamada antiga: assertTrue(JSON.isValid("true"))
nova chamada: assertTrue(JSON.isValid("true"), "Era esperado verdadeiro, mas " + result10011 + " <JSON.isValid('true')> é falso")
chamada antiga: assertTrue(JSON.isValid("false"))
nova chamada: assertTrue(JSON.isValid("false"), "Era esperado verdadeiro, mas " + result10012 + " <JSON.isValid('false')> é falso")
chamada antiga: assertTrue(JSON.isValid("\"abc\""))
nova chamada: assertTrue(JSON.isValid("\"abc\""), "Era esperado verdadeiro, mas " + result10013 + " <JSON.isValid('\'abc\'')> é falso")
chamada antiga: assertTrue(JSON.isValid("{}"))
nova chamada: assertTrue(JSON.isValid("{}"), "Era esperado verdadeiro, mas " + result10014 + " <JSON.isValid('{}')> é falso")
chamada antiga: assertTrue(JSON.isValid("{\"id\":123}"))
nova chamada: assertTrue(JSON.isValid("{\"id\":123}"), "Era esperado verdadeiro, mas " + result10015 + " <JSON.isValid('{\'id\':123}')> é falso")
chamada antiga: assertTrue(JSON.isValid("{\"id\":\"123\"}"))
nova chamada: assertTrue(JSON.isValid("{\"id\":\"123\"}"), "Era esperado verdadeiro, mas " + result10016 + " <JSON.isValid('{\'id\':\'123\'}')> é falso")
chamada antiga: assertTrue(JSON.isValid("{\"id\":true}"))
nova chamada: assertTrue(JSON.isValid("{\"id\":true}"), "Era esperado verdadeiro, mas " + result10017 + " <JSON.isValid('{\'id\':true}')> é falso")
chamada antiga: assertTrue(JSON.isValid("{\"id\":{}}"))
nova chamada: assertTrue(JSON.isValid("{\"id\":{}}"), "Era esperado verdadeiro, mas " + result10018 + " <JSON.isValid('{\'id\':{}}')> é falso")
chamada antiga: assertTrue(JSON.isValidObject("{}"))
nova chamada: assertTrue(JSON.isValidObject("{}"), "Era esperado verdadeiro, mas " + result10019 + " <JSON.isValidObject('{}')> é falso")
chamada antiga: assertTrue(JSON.isValidObject("{\"id\":123}"))
nova chamada: assertTrue(JSON.isValidObject("{\"id\":123}"), "Era esperado verdadeiro, mas " + result10020 + " <JSON.isValidObject('{\'id\':123}')> é falso")
chamada antiga: assertTrue(JSON.isValidObject("{\"id\":\"123\"}"))
nova chamada: assertTrue(JSON.isValidObject("{\"id\":\"123\"}"), "Era esperado verdadeiro, mas " + result10021 + " <JSON.isValidObject('{\'id\':\'123\'}')> é falso")
chamada antiga: assertTrue(JSON.isValidObject("{\"id\":true}"))
nova chamada: assertTrue(JSON.isValidObject("{\"id\":true}"), "Era esperado verdadeiro, mas " + result10022 + " <JSON.isValidObject('{\'id\':true}')> é falso")
chamada antiga: assertTrue(JSON.isValidObject("{\"id\":{}}"))
nova chamada: assertTrue(JSON.isValidObject("{\"id\":{}}"), "Era esperado verdadeiro, mas " + result10023 + " <JSON.isValidObject('{\'id\':{}}')> é falso")
chamada antiga: assertTrue(JSON.isValid("[]"))
nova chamada: assertTrue(JSON.isValid("[]"), "Era esperado verdadeiro, mas " + result10024 + " <JSON.isValid('[]')> é falso")
chamada antiga: assertTrue(JSON.isValid("[[],[]]"))
nova chamada: assertTrue(JSON.isValid("[[],[]]"), "Era esperado verdadeiro, mas " + result10025 + " <JSON.isValid('[[],[]]')> é falso")
chamada antiga: assertTrue(JSON.isValid("[{\"id\":123}]"))
nova chamada: assertTrue(JSON.isValid("[{\"id\":123}]"), "Era esperado verdadeiro, mas " + result10026 + " <JSON.isValid('[{\'id\':123}]')> é falso")
chamada antiga: assertTrue(JSON.isValid("[{\"id\":\"123\"}]"))
nova chamada: assertTrue(JSON.isValid("[{\"id\":\"123\"}]"), "Era esperado verdadeiro, mas " + result10027 + " <JSON.isValid('[{\'id\':\'123\'}]')> é falso")
chamada antiga: assertTrue(JSON.isValid("[{\"id\":true}]"))
nova chamada: assertTrue(JSON.isValid("[{\"id\":true}]"), "Era esperado verdadeiro, mas " + result10028 + " <JSON.isValid('[{\'id\':true}]')> é falso")
chamada antiga: assertTrue(JSON.isValid("[{\"id\":{}}]"))
nova chamada: assertTrue(JSON.isValid("[{\"id\":{}}]"), "Era esperado verdadeiro, mas " + result10029 + " <JSON.isValid('[{\'id\':{}}]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[]"))
nova chamada: assertTrue(JSON.isValidArray("[]"), "Era esperado verdadeiro, mas " + result10030 + " <JSON.isValidArray('[]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[[],[]]"))
nova chamada: assertTrue(JSON.isValidArray("[[],[]]"), "Era esperado verdadeiro, mas " + result10031 + " <JSON.isValidArray('[[],[]]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[{\"id\":123}]"))
nova chamada: assertTrue(JSON.isValidArray("[{\"id\":123}]"), "Era esperado verdadeiro, mas " + result10032 + " <JSON.isValidArray('[{\'id\':123}]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[{\"id\":\"123\"}]"))
nova chamada: assertTrue(JSON.isValidArray("[{\"id\":\"123\"}]"), "Era esperado verdadeiro, mas " + result10033 + " <JSON.isValidArray('[{\'id\':\'123\'}]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[{\"id\":true}]"))
nova chamada: assertTrue(JSON.isValidArray("[{\"id\":true}]"), "Era esperado verdadeiro, mas " + result10034 + " <JSON.isValidArray('[{\'id\':true}]')> é falso")
chamada antiga: assertTrue(JSON.isValidArray("[{\"id\":{}}]"))
nova chamada: assertTrue(JSON.isValidArray("[{\"id\":{}}]"), "Era esperado verdadeiro, mas " + result10035 + " <JSON.isValidArray('[{\'id\':{}}]')> é falso")
chamada antiga: assertEquals(type0, type1)
nova chamada: assertEquals(type0, type1, "Era esperado valores iguais, mas  type0 é diferente de " + " type1")
chamada antiga: assertEquals(type0.hashCode(), type1.hashCode())
nova chamada: assertEquals(type0.hashCode(), type1.hashCode(), "Era esperado valores iguais, mas " + result10036 + " <type0.hashCode()> é diferente de " + result10037 + " <type1.hashCode()>")
chamada antiga: assertEquals(vo.value, vo1.value)
nova chamada: assertEquals(vo.value, vo1.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " vo1.value")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10038 + " <v1.getValue()> é diferente de " + result10039 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":\"\"}", text)
nova chamada: assertEquals("{\"value\":\"\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " text")
chamada antiga: assertEquals("iso8601", context.getDateFormat())
nova chamada: assertEquals("iso8601", context.getDateFormat(), "Era esperado valores iguais, mas  'iso8601' é diferente de " + result10040 + " <context.getDateFormat()>")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls), "Era esperado verdadeiro, mas " + result10041 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty), "Era esperado verdadeiro, mas " + result10042 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty), "Era esperado verdadeiro, mas " + result10043 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero), "Era esperado verdadeiro, mas " + result10044 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse), "Era esperado verdadeiro, mas " + result10045 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible), "Era esperado verdadeiro, mas " + result10046 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName), "Era esperado verdadeiro, mas " + result10047 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString), "Era esperado verdadeiro, mas " + result10048 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString), "Era esperado verdadeiro, mas " + result10049 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName), "Era esperado verdadeiro, mas " + result10050 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter), "Era esperado verdadeiro, mas " + result10051 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter)> é falso")
chamada antiga: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray))
nova chamada: assertTrue(context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray), "Era esperado verdadeiro, mas " + result10052 + " <context.isEnabled(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray)> é falso")
chamada antiga: assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat())
nova chamada: assertEquals(JSON.DEFFAULT_DATE_FORMAT, context.getDateFormat(), "Era esperado valores iguais, mas  JSON.DEFFAULT_DATE_FORMAT é diferente de " + result10053 + " <context.getDateFormat()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10054 + " <array.size()>")
chamada antiga: assertEquals(array, array.clone())
nova chamada: assertEquals(array, array.clone(), "Era esperado valores iguais, mas  array é diferente de " + result10055 + " <array.clone()>")
chamada antiga: assertNotNull(date)
nova chamada: assertNotNull(date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(ts)
nova chamada: assertNotNull(ts, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"num\":0.00000001}", json)
nova chamada: assertEquals("{\"num\":0.00000001}", json, "Era esperado valores iguais, mas  '{\'num\':0.00000001}' é diferente de " + " json")
chamada antiga: assertNotNull(testJsons)
nova chamada: assertNotNull(testJsons, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, testJsons.size())
nova chamada: assertEquals(2, testJsons.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10056 + " <testJsons.size()>")
chamada antiga: assertEquals("1", testJsons.get(0).test1)
nova chamada: assertEquals("1", testJsons.get(0).test1, "Era esperado valores iguais, mas  '1' é diferente de " + " testJsons.get(0).test1")
chamada antiga: assertEquals(testReply.getItems().get(0).getId(), 1)
nova chamada: assertEquals(testReply.getItems().get(0).getId(), 1, "Era esperado valores iguais, mas " + result10057 + " <testReply.getItems().get(0).getId()> é diferente de " + " 1")
chamada antiga: assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"))
nova chamada: assertEquals("aaa", JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"), "Era esperado valores iguais, mas  'aaa' é diferente de " + result10058 + " <JSONPath.eval(object, '$.EXTINFO.bct_loan_account_status\\[15\\]')>")
chamada antiga: assertEquals("aaa", result.toString())
nova chamada: assertEquals("aaa", result.toString(), "Era esperado valores iguais, mas  'aaa' é diferente de " + result10059 + " <result.toString()>")
chamada antiga: assertEquals("[\"\",null]", s)
nova chamada: assertEquals("[\"\",null]", s, "Era esperado valores iguais, mas  '[\'\',null]' é diferente de " + " s")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(vo, SerializerFeature.BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(vo, SerializerFeature.BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result10060 + " <JSON.toJSONString(vo, SerializerFeature.BrowserCompatible)>")
chamada antiga: assertEquals("23", p.getRfid())
nova chamada: assertEquals("23", p.getRfid(), "Era esperado valores iguais, mas  '23' é diferente de " + result10061 + " <p.getRfid()>")
chamada antiga: assertEquals("1", p.getBhlx())
nova chamada: assertEquals("1", p.getBhlx(), "Era esperado valores iguais, mas  '1' é diferente de " + result10062 + " <p.getBhlx()>")
chamada antiga: assertEquals(null, p.getJdxj())
nova chamada: assertEquals(null, p.getJdxj(), "Era esperado valores iguais, mas  null é diferente de " + result10063 + " <p.getJdxj()>")
chamada antiga: assertEquals("23", p1.getRfid())
nova chamada: assertEquals("23", p1.getRfid(), "Era esperado valores iguais, mas  '23' é diferente de " + result10064 + " <p1.getRfid()>")
chamada antiga: assertEquals("1", p1.getBhlx())
nova chamada: assertEquals("1", p1.getBhlx(), "Era esperado valores iguais, mas  '1' é diferente de " + result10065 + " <p1.getBhlx()>")
chamada antiga: assertEquals(null, p1.getJdxj())
nova chamada: assertEquals(null, p1.getJdxj(), "Era esperado valores iguais, mas  null é diferente de " + result10066 + " <p1.getJdxj()>")
chamada antiga: assertEquals("23", p1.getRfid())
nova chamada: assertEquals("23", p1.getRfid(), "Era esperado valores iguais, mas  '23' é diferente de " + result10067 + " <p1.getRfid()>")
chamada antiga: assertEquals("1", p1.getBhlx())
nova chamada: assertEquals("1", p1.getBhlx(), "Era esperado valores iguais, mas  '1' é diferente de " + result10068 + " <p1.getBhlx()>")
chamada antiga: assertEquals(null, p1.getJdxj())
nova chamada: assertEquals(null, p1.getJdxj(), "Era esperado valores iguais, mas  null é diferente de " + result10069 + " <p1.getJdxj()>")
chamada antiga: assertEquals("1234", object.get("@type"))
nova chamada: assertEquals("1234", object.get("@type"), "Era esperado valores iguais, mas  '1234' é diferente de " + result10070 + " <object.get('@type')>")
chamada antiga: assertEquals("{\"f2\":102,\"f1\":101,\"f3\":103}", str)
nova chamada: assertEquals("{\"f2\":102,\"f1\":101,\"f3\":103}", str, "Era esperado valores iguais, mas  '{\'f2\':102,\'f1\':101,\'f3\':103}' é diferente de " + " str")
chamada antiga: assertEquals(a.f1, a1.f1)
nova chamada: assertEquals(a.f1, a1.f1, "Era esperado valores iguais, mas  a.f1 é diferente de " + " a1.f1")
chamada antiga: assertEquals(a.f2, a1.f2)
nova chamada: assertEquals(a.f2, a1.f2, "Era esperado valores iguais, mas  a.f2 é diferente de " + " a1.f2")
chamada antiga: assertEquals(a.f3, a1.f3)
nova chamada: assertEquals(a.f3, a1.f3, "Era esperado valores iguais, mas  a.f3 é diferente de " + " a1.f3")
chamada antiga: assertEquals("23", p.getRfid())
nova chamada: assertEquals("23", p.getRfid(), "Era esperado valores iguais, mas  '23' é diferente de " + result10071 + " <p.getRfid()>")
chamada antiga: assertEquals("1", p.getBhlx())
nova chamada: assertEquals("1", p.getBhlx(), "Era esperado valores iguais, mas  '1' é diferente de " + result10072 + " <p.getBhlx()>")
chamada antiga: assertEquals(null, p.getJdxj())
nova chamada: assertEquals(null, p.getJdxj(), "Era esperado valores iguais, mas  null é diferente de " + result10073 + " <p.getJdxj()>")
chamada antiga: assertEquals(1548166745000L, o.createTime.getTime())
nova chamada: assertEquals(1548166745000L, o.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result10074 + " <o.createTime.getTime()>")
chamada antiga: assertEquals("{\"createTime\":1548166745}", json)
nova chamada: assertEquals("{\"createTime\":1548166745}", json, "Era esperado valores iguais, mas  '{\'createTime\':1548166745}' é diferente de " + " json")
chamada antiga: assertEquals(1548166745000L, order1.createTime.getTime())
nova chamada: assertEquals(1548166745000L, order1.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result10075 + " <order1.createTime.getTime()>")
chamada antiga: assertEquals(1548166745000L, order2.createTime.getTime())
nova chamada: assertEquals(1548166745000L, order2.createTime.getTime(), "Era esperado valores iguais, mas  1548166745000L é diferente de " + result10076 + " <order2.createTime.getTime()>")
chamada antiga: assertEquals(2, resources.data.get(0).resourceId.intValue())
nova chamada: assertEquals(2, resources.data.get(0).resourceId.intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result10077 + " <resources.data.get(0).resourceId.intValue()>")
chamada antiga: assertEquals("own佛恩", resources.data.get(0).resourceName)
nova chamada: assertEquals("own佛恩", resources.data.get(0).resourceName, "Era esperado valores iguais, mas  'own佛恩' é diferente de " + " resources.data.get(0).resourceName")
chamada antiga: assertEquals(123, JSONPath.extract(object.toJSONString(), "['help_score_avg.cbm']"))
nova chamada: assertEquals(123, JSONPath.extract(object.toJSONString(), "['help_score_avg.cbm']"), "Era esperado valores iguais, mas  123 é diferente de " + result10078 + " <JSONPath.extract(object.toJSONString(), '['help_score_avg.cbm']')>")
chamada antiga: assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news))
nova chamada: assertEquals("{\"ddd\":\"sdfsd\",\"id\":\"ss\",\"name\":\"hh\"}", JSON.toJSONString(news), "Era esperado valores iguais, mas  '{\'ddd\':\'sdfsd\',\'id\':\'ss\',\'name\':\'hh\'}' é diferente de " + result10079 + " <JSON.toJSONString(news)>")
chamada antiga: assertEquals(2, object.size())
nova chamada: assertEquals(2, object.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10080 + " <object.size()>")
chamada antiga: assertEquals(4, object.size())
nova chamada: assertEquals(4, object.size(), "Era esperado valores iguais, mas  4 é diferente de " + result10081 + " <object.size()>")
chamada antiga: assertEquals(2, object.size())
nova chamada: assertEquals(2, object.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10082 + " <object.size()>")
chamada antiga: assertEquals(0, object.size())
nova chamada: assertEquals(0, object.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10083 + " <object.size()>")
chamada antiga: assertEquals(1, counter.get())
nova chamada: assertEquals(1, counter.get(), "Era esperado valores iguais, mas  1 é diferente de " + result10084 + " <counter.get()>")
chamada antiga: assertEquals("{\"id\":0}", JSON.toJSONString(object))
nova chamada: assertEquals("{\"id\":0}", JSON.toJSONString(object), "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + result10085 + " <JSON.toJSONString(object)>")
chamada antiga: assertEquals("{\"id\":0}", JSON.toJSONString(mockObj))
nova chamada: assertEquals("{\"id\":0}", JSON.toJSONString(mockObj), "Era esperado valores iguais, mas  '{\'id\':0}' é diferente de " + result10086 + " <JSON.toJSONString(mockObj)>")
chamada antiga: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString())
nova chamada: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(jsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString(), "Era esperado valores iguais, mas  '[{\'id\':\'a\',\'name\':\'an\'},{\'id\':\'b\',\'name\':\'bn\'}]' é diferente de " + result10087 + " <JSONPath.eval(JSON.parseObject(jsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), '$..view').toString()>")
chamada antiga: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString())
nova chamada: assertEquals("[{\"id\":\"a\",\"name\":\"an\"},{\"id\":\"b\",\"name\":\"bn\"}]", JSONPath.eval(JSON.parseObject(errorJsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), "$..view").toString(), "Era esperado valores iguais, mas  '[{\'id\':\'a\',\'name\':\'an\'},{\'id\':\'b\',\'name\':\'bn\'}]' é diferente de " + result10088 + " <JSONPath.eval(JSON.parseObject(errorJsonString, Feature.AllowUnQuotedFieldNames, Feature.OrderedField), '$..view').toString()>")
chamada antiga: assertEquals(1, dto1.someValue)
nova chamada: assertEquals("Era esperado valores iguais, mas  1 é diferente de " + " dto1.someValue", 1, dto1.someValue)
chamada antiga: assertEquals(0, dto1.someValue)
nova chamada: assertEquals("Era esperado valores iguais, mas  0 é diferente de " + " dto1.someValue", 0, dto1.someValue)
chamada antiga: assertEquals("[]", array.toJSONString())
nova chamada: assertEquals("Era esperado valores iguais, mas  '[]' é diferente de " + result10089 + " <array.toJSONString()>", "[]", array.toJSONString())
chamada antiga: assertNotNull(order)
nova chamada: assertNotNull("Era esperado não nulo, mas  o valor obtido foi nulo", order)
chamada antiga: assertTrue(JSONArray.isValidArray(jsonStr))
nova chamada: assertTrue(JSONArray.isValidArray(jsonStr), "Era esperado verdadeiro, mas " + result10090 + " <JSONArray.isValidArray(jsonStr)> é falso")
chamada antiga: assertTrue(JSON.isValidArray(jsonStr))
nova chamada: assertTrue(JSON.isValidArray(jsonStr), "Era esperado verdadeiro, mas " + result10091 + " <JSON.isValidArray(jsonStr)> é falso")
chamada antiga: assertTrue(JSONObject.isValidArray(jsonStr))
nova chamada: assertTrue(JSONObject.isValidArray(jsonStr), "Era esperado verdadeiro, mas " + result10092 + " <JSONObject.isValidArray(jsonStr)> é falso")
chamada antiga: assertFalse(JSONObject.isValidObject(jsonStr))
nova chamada: assertFalse(JSONObject.isValidObject(jsonStr), "Era esperado falso, mas " + result10093 + " <JSONObject.isValidObject(jsonStr)> é verdadeiro ")
chamada antiga: assertEquals("{\"blockQueue\":[1,2,3]}", jsonInt)
nova chamada: assertEquals("{\"blockQueue\":[1,2,3]}", jsonInt, "Era esperado valores iguais, mas  '{\'blockQueue\':[1,2,3]}' é diferente de " + " jsonInt")
chamada antiga: assertEquals(3, complexInt1.getBlockQueue().size())
nova chamada: assertEquals(3, complexInt1.getBlockQueue().size(), "Era esperado valores iguais, mas  3 é diferente de " + result10094 + " <complexInt1.getBlockQueue().size()>")
chamada antiga: assertEquals("{\"blockQueue\":[\"BlockQueue 1\",\"BlockQueue 2\",\"BlockQueue 3\"]}", json)
nova chamada: assertEquals("{\"blockQueue\":[\"BlockQueue 1\",\"BlockQueue 2\",\"BlockQueue 3\"]}", json, "Era esperado valores iguais, mas  '{\'blockQueue\':[\'BlockQueue 1\',\'BlockQueue 2\',\'BlockQueue 3\']}' é diferente de " + " json")
chamada antiga: assertEquals(3, complex1.getBlockQueue().size())
nova chamada: assertEquals(3, complex1.getBlockQueue().size(), "Era esperado valores iguais, mas  3 é diferente de " + result10095 + " <complex1.getBlockQueue().size()>")
chamada antiga: assertEquals("{\"k1\":[\"k11\",\"k12\",\"k13\"],\"k2\":[\"k21\"]}", json)
nova chamada: assertEquals("{\"k1\":[\"k11\",\"k12\",\"k13\"],\"k2\":[\"k21\"]}", json, "Era esperado valores iguais, mas  '{\'k1\':[\'k11\',\'k12\',\'k13\'],\'k2\':[\'k21\']}' é diferente de " + " json")
chamada antiga: assertTrue(obj != null)
nova chamada: assertTrue(obj != null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(3, map.get("k1").size())
nova chamada: assertSame(3, map.get("k1").size(), "Era esperado objetos iguais, mas  3 é diferente de " + result10096 + " <map.get('k1').size()>")
chamada antiga: assertEquals(Bean.class.getName(), o.getClass().getName())
nova chamada: assertEquals(Bean.class.getName(), o.getClass().getName(), "Era esperado valores iguais, mas " + result10097 + " <Bean.class.getName()> é diferente de " + result10098 + " <o.getClass().getName()>")
chamada antiga: assertEquals(TBean.class.getName(), o1.getClass().getName())
nova chamada: assertEquals(TBean.class.getName(), o1.getClass().getName(), "Era esperado valores iguais, mas " + result10099 + " <TBean.class.getName()> é diferente de " + result10100 + " <o1.getClass().getName()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10101 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10102 + " <m.values.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10103 + " <list.size()>")
chamada antiga: assertEquals(1001, item.modelId)
nova chamada: assertEquals(1001, item.modelId, "Era esperado valores iguais, mas  1001 é diferente de " + " item.modelId")
chamada antiga: assertEquals(1001, item.modelId)
nova chamada: assertEquals(1001, item.modelId, "Era esperado valores iguais, mas  1001 é diferente de " + " item.modelId")
chamada antiga: assertEquals("{\"verification_ids\":[\"a\",\"b\"],\"with_fields\":true}", JSON.toJSONString(params))
nova chamada: assertEquals("{\"verification_ids\":[\"a\",\"b\"],\"with_fields\":true}", JSON.toJSONString(params), "Era esperado valores iguais, mas  '{\'verification_ids\':[\'a\',\'b\'],\'with_fields\':true}' é diferente de " + result10104 + " <JSON.toJSONString(params)>")
chamada antiga: assertEquals(2L, book.bookId.longValue())
nova chamada: assertEquals(2L, book.bookId.longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result10105 + " <book.bookId.longValue()>")
chamada antiga: assertEquals("浪漫奇侠", book.bookName)
nova chamada: assertEquals("浪漫奇侠", book.bookName, "Era esperado valores iguais, mas  '浪漫奇侠' é diferente de " + " book.bookName")
chamada antiga: assertEquals("雨天不打伞", book.authorName)
nova chamada: assertEquals("雨天不打伞", book.authorName, "Era esperado valores iguais, mas  '雨天不打伞' é diferente de " + " book.authorName")
chamada antiga: assertEquals(4536, book.wordCount.intValue())
nova chamada: assertEquals(4536, book.wordCount.intValue(), "Era esperado valores iguais, mas  4536 é diferente de " + result10106 + " <book.wordCount.intValue()>")
chamada antiga: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
nova chamada: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json, "Era esperado valores iguais, mas  '{\'color\':\'\',\'productCity\':\'\',\'size\':0}' é diferente de " + " json")
chamada antiga: assertEquals(1, collection.size())
nova chamada: assertEquals(1, collection.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10107 + " <collection.size()>")
chamada antiga: assertEquals(101, model.id)
nova chamada: assertEquals(101, model.id, "Era esperado valores iguais, mas  101 é diferente de " + " model.id")
chamada antiga: assertEquals("{\"values\":[\"2017-12-20\"]}", json)
nova chamada: assertEquals("{\"values\":[\"2017-12-20\"]}", json, "Era esperado valores iguais, mas  '{\'values\':[\'2017-12-20\']}' é diferente de " + " json")
chamada antiga: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json)
nova chamada: assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json, "Era esperado valores iguais, mas  '{\'color\':\'\',\'productCity\':\'\',\'size\':0}' é diferente de " + " json")
chamada antiga: assertEquals(1324138987429L, time.getTime())
nova chamada: assertEquals(1324138987429L, time.getTime(), "Era esperado valores iguais, mas  1324138987429L é diferente de " + result10108 + " <time.getTime()>")
chamada antiga: assertEquals(12300, model.value)
nova chamada: assertEquals(12300, model.value, "Era esperado valores iguais, mas  12300 é diferente de " + " model.value")
chamada antiga: assertEquals("{\"value\":\"12300元\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"12300元\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'12300元\'}' é diferente de " + result10109 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals("{\"a\":1001}", new String(bytes))
nova chamada: assertEquals("{\"a\":1001}", new String(bytes), "Era esperado valores iguais, mas  '{\'a\':1001}' é diferente de " + " new String(bytes)")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10110 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10111 + " <m.values.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10112 + " <map.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10113 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10114 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10115 + " <m.values.size()>")
chamada antiga: assertTrue(JSONPath.contains(o, "$." + escapeString(s)))
nova chamada: assertTrue(JSONPath.contains(o, "$." + escapeString(s)), "Era esperado verdadeiro, mas " + result10116 + " <JSONPath.contains(o, '$.' + escapeString(s))> é falso")
chamada antiga: assertEquals("\"2018-01-10T08:30:00+08:00\"", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat))
nova chamada: assertEquals("\"2018-01-10T08:30:00+08:00\"", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat), "Era esperado valores iguais, mas  '\'2018-01-10T08:30:00+08:00\'' é diferente de " + result10117 + " <JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat)>")
chamada antiga: assertEquals("abc", obj.getString("123"))
nova chamada: assertEquals("abc", obj.getString("123"), "Era esperado valores iguais, mas  'abc' é diferente de " + result10118 + " <obj.getString('123')>")
chamada antiga: assertEquals("abc", obj.getString("false"))
nova chamada: assertEquals("abc", obj.getString("false"), "Era esperado valores iguais, mas  'abc' é diferente de " + result10119 + " <obj.getString('false')>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10120 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10121 + " <m.values.size()>")
chamada antiga: assertEquals(0, m.values.size())
nova chamada: assertEquals(0, m.values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10122 + " <m.values.size()>")
chamada antiga: assertEquals("{\"amount\":10.03,\"currency\":\"CNY\"}", json)
nova chamada: assertEquals("{\"amount\":10.03,\"currency\":\"CNY\"}", json, "Era esperado valores iguais, mas  '{\'amount\':10.03,\'currency\':\'CNY\'}' é diferente de " + " json")
chamada antiga: assertEquals(money.amount, moneyBack.amount)
nova chamada: assertEquals(money.amount, moneyBack.amount, "Era esperado valores iguais, mas  money.amount é diferente de " + " moneyBack.amount")
chamada antiga: assertEquals(money.currency, moneyBack.currency)
nova chamada: assertEquals(money.currency, moneyBack.currency, "Era esperado valores iguais, mas  money.currency é diferente de " + " moneyBack.currency")
chamada antiga: assertEquals(money.amount, moneyCast.amount)
nova chamada: assertEquals(money.amount, moneyCast.amount, "Era esperado valores iguais, mas  money.amount é diferente de " + " moneyCast.amount")
chamada antiga: assertEquals(money.currency, moneyCast.currency)
nova chamada: assertEquals(money.currency, moneyCast.currency, "Era esperado valores iguais, mas  money.currency é diferente de " + " moneyCast.currency")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10123 + " <lexer.getCurrent()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10124 + " <lexer.getCurrent()>")
chamada antiga: assertTrue(lexer.isOrderedField())
nova chamada: assertTrue(lexer.isOrderedField(), "Era esperado verdadeiro, mas " + result10125 + " <lexer.isOrderedField()> é falso")
chamada antiga: assertEquals(JSONToken.LBRACE, lexer.token())
nova chamada: assertEquals(JSONToken.LBRACE, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LBRACE é diferente de " + result10126 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.LITERAL_STRING, lexer.token())
nova chamada: assertEquals(JSONToken.LITERAL_STRING, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LITERAL_STRING é diferente de " + result10127 + " <lexer.token()>")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10128 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10129 + " <lexer.stringVal()>")
chamada antiga: assertEquals(JSONToken.COLON, lexer.token())
nova chamada: assertEquals(JSONToken.COLON, lexer.token(), "Era esperado valores iguais, mas  JSONToken.COLON é diferente de " + result10130 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.LITERAL_INT, lexer.token())
nova chamada: assertEquals(JSONToken.LITERAL_INT, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LITERAL_INT é diferente de " + result10131 + " <lexer.token()>")
chamada antiga: assertEquals(123, lexer.intValue())
nova chamada: assertEquals(123, lexer.intValue(), "Era esperado valores iguais, mas  123 é diferente de " + result10132 + " <lexer.intValue()>")
chamada antiga: assertEquals(123L, lexer.longValue())
nova chamada: assertEquals(123L, lexer.longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result10133 + " <lexer.longValue()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10134 + " <lexer.getCurrent()>")
chamada antiga: assertEquals(JSONToken.RBRACE, lexer.token())
nova chamada: assertEquals(JSONToken.RBRACE, lexer.token(), "Era esperado valores iguais, mas  JSONToken.RBRACE é diferente de " + result10135 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.EOF, lexer.token())
nova chamada: assertEquals(JSONToken.EOF, lexer.token(), "Era esperado valores iguais, mas  JSONToken.EOF é diferente de " + result10136 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.LBRACE, lexer.token())
nova chamada: assertEquals(JSONToken.LBRACE, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LBRACE é diferente de " + result10137 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.LITERAL_STRING, lexer.token())
nova chamada: assertEquals(JSONToken.LITERAL_STRING, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LITERAL_STRING é diferente de " + result10138 + " <lexer.token()>")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10139 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10140 + " <lexer.stringVal()>")
chamada antiga: assertEquals(JSONToken.COLON, lexer.token())
nova chamada: assertEquals(JSONToken.COLON, lexer.token(), "Era esperado valores iguais, mas  JSONToken.COLON é diferente de " + result10141 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.LITERAL_FLOAT, lexer.token())
nova chamada: assertEquals(JSONToken.LITERAL_FLOAT, lexer.token(), "Era esperado valores iguais, mas  JSONToken.LITERAL_FLOAT é diferente de " + result10142 + " <lexer.token()>")
chamada antiga: assertEquals(new BigDecimal("123.34"), lexer.decimalValue())
nova chamada: assertEquals(new BigDecimal("123.34"), lexer.decimalValue(), "Era esperado valores iguais, mas  new BigDecimal('123.34') é diferente de " + result10143 + " <lexer.decimalValue()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10144 + " <lexer.getCurrent()>")
chamada antiga: assertEquals(JSONToken.RBRACE, lexer.token())
nova chamada: assertEquals(JSONToken.RBRACE, lexer.token(), "Era esperado valores iguais, mas  JSONToken.RBRACE é diferente de " + result10145 + " <lexer.token()>")
chamada antiga: assertEquals(JSONToken.EOF, lexer.token())
nova chamada: assertEquals(JSONToken.EOF, lexer.token(), "Era esperado valores iguais, mas  JSONToken.EOF é diferente de " + result10146 + " <lexer.token()>")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10147 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10148 + " <lexer.stringVal()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10149 + " <lexer.getCurrent()>")
chamada antiga: assertTrue(lexer.isEOF())
nova chamada: assertTrue(lexer.isEOF(), "Era esperado verdadeiro, mas " + result10150 + " <lexer.isEOF()> é falso")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10151 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10152 + " <lexer.stringVal()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10153 + " <lexer.getCurrent()>")
chamada antiga: assertTrue(lexer.isEOF())
nova chamada: assertTrue(lexer.isEOF(), "Era esperado verdadeiro, mas " + result10154 + " <lexer.isEOF()> é falso")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10155 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10156 + " <lexer.stringVal()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10157 + " <lexer.getCurrent()>")
chamada antiga: assertTrue(lexer.isEOF())
nova chamada: assertTrue(lexer.isEOF(), "Era esperado verdadeiro, mas " + result10158 + " <lexer.isEOF()> é falso")
chamada antiga: assertEquals(':', lexer.getCurrent())
nova chamada: assertEquals(':', lexer.getCurrent(), "Era esperado valores iguais, mas  ':' é diferente de " + result10159 + " <lexer.getCurrent()>")
chamada antiga: assertEquals("id", lexer.stringVal())
nova chamada: assertEquals("id", lexer.stringVal(), "Era esperado valores iguais, mas  'id' é diferente de " + result10160 + " <lexer.stringVal()>")
chamada antiga: assertEquals("abc", lexer.stringVal())
nova chamada: assertEquals("abc", lexer.stringVal(), "Era esperado valores iguais, mas  'abc' é diferente de " + result10161 + " <lexer.stringVal()>")
chamada antiga: assertEquals('}', lexer.getCurrent())
nova chamada: assertEquals('}', lexer.getCurrent(), "Era esperado valores iguais, mas  '}' é diferente de " + result10162 + " <lexer.getCurrent()>")
chamada antiga: assertTrue(lexer.isEOF())
nova chamada: assertTrue(lexer.isEOF(), "Era esperado verdadeiro, mas " + result10163 + " <lexer.isEOF()> é falso")
chamada antiga: assertEquals(JSONToken.LBRACKET, lexer.token)
nova chamada: assertEquals(JSONToken.LBRACKET, lexer.token, "Era esperado valores iguais, mas  JSONToken.LBRACKET é diferente de " + " lexer.token")
chamada antiga: assertEquals(JSONToken.RBRACKET, lexer.token)
nova chamada: assertEquals(JSONToken.RBRACKET, lexer.token, "Era esperado valores iguais, mas  JSONToken.RBRACKET é diferente de " + " lexer.token")
chamada antiga: assertTrue(lexer.isEOF())
nova chamada: assertTrue(lexer.isEOF(), "Era esperado verdadeiro, mas " + result10164 + " <lexer.isEOF()> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.OrderedField))
nova chamada: assertTrue(lexer.isEnabled(Feature.OrderedField), "Era esperado verdadeiro, mas " + result10165 + " <lexer.isEnabled(Feature.OrderedField)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.AllowUnQuotedFieldNames))
nova chamada: assertTrue(lexer.isEnabled(Feature.AllowUnQuotedFieldNames), "Era esperado verdadeiro, mas " + result10166 + " <lexer.isEnabled(Feature.AllowUnQuotedFieldNames)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.AllowSingleQuotes))
nova chamada: assertTrue(lexer.isEnabled(Feature.AllowSingleQuotes), "Era esperado verdadeiro, mas " + result10167 + " <lexer.isEnabled(Feature.AllowSingleQuotes)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.UseBigDecimal))
nova chamada: assertTrue(lexer.isEnabled(Feature.UseBigDecimal), "Era esperado verdadeiro, mas " + result10168 + " <lexer.isEnabled(Feature.UseBigDecimal)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.SupportArrayToBean))
nova chamada: assertTrue(lexer.isEnabled(Feature.SupportArrayToBean), "Era esperado verdadeiro, mas " + result10169 + " <lexer.isEnabled(Feature.SupportArrayToBean)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.NonStringKeyAsString))
nova chamada: assertTrue(lexer.isEnabled(Feature.NonStringKeyAsString), "Era esperado verdadeiro, mas " + result10170 + " <lexer.isEnabled(Feature.NonStringKeyAsString)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.ErrorOnEnumNotMatch))
nova chamada: assertTrue(lexer.isEnabled(Feature.ErrorOnEnumNotMatch), "Era esperado verdadeiro, mas " + result10171 + " <lexer.isEnabled(Feature.ErrorOnEnumNotMatch)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.SupportClassForName))
nova chamada: assertTrue(lexer.isEnabled(Feature.SupportClassForName), "Era esperado verdadeiro, mas " + result10172 + " <lexer.isEnabled(Feature.SupportClassForName)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.ErrorOnNotSupportAutoType))
nova chamada: assertTrue(lexer.isEnabled(Feature.ErrorOnNotSupportAutoType), "Era esperado verdadeiro, mas " + result10173 + " <lexer.isEnabled(Feature.ErrorOnNotSupportAutoType)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.UseNativeJavaObject))
nova chamada: assertTrue(lexer.isEnabled(Feature.UseNativeJavaObject), "Era esperado verdadeiro, mas " + result10174 + " <lexer.isEnabled(Feature.UseNativeJavaObject)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.DisableFieldSmartMatch))
nova chamada: assertTrue(lexer.isEnabled(Feature.DisableFieldSmartMatch), "Era esperado verdadeiro, mas " + result10175 + " <lexer.isEnabled(Feature.DisableFieldSmartMatch)> é falso")
chamada antiga: assertTrue(lexer.isEnabled(Feature.SupportAutoType))
nova chamada: assertTrue(lexer.isEnabled(Feature.SupportAutoType), "Era esperado verdadeiro, mas " + result10176 + " <lexer.isEnabled(Feature.SupportAutoType)> é falso")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals(Long.valueOf(123), map.get("id"))
nova chamada: assertEquals(Long.valueOf(123), map.get("id"), "Era esperado valores iguais, mas " + result10177 + " <Long.valueOf(123)> é diferente de " + result10178 + " <map.get('id')>")
chamada antiga: assertEquals(Long.valueOf(123), map.get("id"))
nova chamada: assertEquals(Long.valueOf(123), map.get("id"), "Era esperado valores iguais, mas " + result10179 + " <Long.valueOf(123)> é diferente de " + result10180 + " <map.get('id')>")
chamada antiga: assertEquals(123, map.get("id"))
nova chamada: assertEquals(123, map.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result10181 + " <map.get('id')>")
chamada antiga: assertEquals(0, deserializer.getFastMatchToken())
nova chamada: assertEquals(0, deserializer.getFastMatchToken(), "Era esperado valores iguais, mas  0 é diferente de " + result10182 + " <deserializer.getFastMatchToken()>")
chamada antiga: assertNull(deserializer.deserialze(null, null, null))
nova chamada: assertNull(deserializer.deserialze(null, null, null), "Era esperado nulo, mas " + result10183 + " <deserializer.deserialze(null, null, null)> não é nulo")
chamada antiga: assertNotNull(parser.getLexer())
nova chamada: assertNotNull(parser.getLexer(), "Era esperado não nulo, mas " + result10184 + " <parser.getLexer()> é nulo")
chamada antiga: assertNotNull(parser.getConfig())
nova chamada: assertNotNull(parser.getConfig(), "Era esperado não nulo, mas " + result10185 + " <parser.getConfig()> é nulo")
chamada antiga: assertEquals(1L, array.get(0))
nova chamada: assertEquals(1L, array.get(0), "Era esperado valores iguais, mas  1L é diferente de " + result10186 + " <array.get(0)>")
chamada antiga: assertEquals(2L, array.get(1))
nova chamada: assertEquals(2L, array.get(1), "Era esperado valores iguais, mas  2L é diferente de " + result10187 + " <array.get(1)>")
chamada antiga: assertEquals(123, map.get("id"))
nova chamada: assertEquals(123, map.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result10188 + " <map.get('id')>")
chamada antiga: assertEquals(123L, map.get("id"))
nova chamada: assertEquals(123L, map.get("id"), "Era esperado valores iguais, mas  123L é diferente de " + result10189 + " <map.get('id')>")
chamada antiga: assertEquals(123, object.getIntValue("id"))
nova chamada: assertEquals(123, object.getIntValue("id"), "Era esperado valores iguais, mas  123 é diferente de " + result10190 + " <object.getIntValue('id')>")
chamada antiga: assertNull(object)
nova chamada: assertNull(object, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(parser.parse("abc"))
nova chamada: assertNull(parser.parse("abc"), "Era esperado nulo, mas " + result10191 + " <parser.parse('abc')> não é nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10192 + " <list.size()>")
chamada antiga: assertEquals(123L, list.get(0))
nova chamada: assertEquals(123L, list.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result10193 + " <list.get(0)>")
chamada antiga: assertEquals(101L, array[0])
nova chamada: assertEquals(101L, array[0], "Era esperado valores iguais, mas  101L é diferente de " + " array[0]")
chamada antiga: assertEquals(BigInteger.valueOf(102), array[1])
nova chamada: assertEquals(BigInteger.valueOf(102), array[1], "Era esperado valores iguais, mas " + result10194 + " <BigInteger.valueOf(102)> é diferente de " + " array[1]")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10195 + " <list.size()>")
chamada antiga: assertEquals(123, list.get(0))
nova chamada: assertEquals(123, list.get(0), "Era esperado valores iguais, mas  123 é diferente de " + result10196 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10197 + " <list.size()>")
chamada antiga: assertEquals(123L, list.get(0))
nova chamada: assertEquals(123L, list.get(0), "Era esperado valores iguais, mas  123L é diferente de " + result10198 + " <list.get(0)>")
chamada antiga: assertEquals(ObjectReaderProvider.SAFE_MODE, config.isSafeMode())
nova chamada: assertEquals(ObjectReaderProvider.SAFE_MODE, config.isSafeMode(), "Era esperado valores iguais, mas  ObjectReaderProvider.SAFE_MODE é diferente de " + result10199 + " <config.isSafeMode()>")
chamada antiga: assertTrue(config.isAsmEnable())
nova chamada: assertTrue(config.isAsmEnable(), "Era esperado verdadeiro, mas " + result10200 + " <config.isAsmEnable()> é falso")
chamada antiga: assertNotNull(deserializer)
nova chamada: assertNotNull(deserializer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(deserializer)
nova chamada: assertNotNull(deserializer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(deserializer)
nova chamada: assertNotNull(deserializer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertNotSame(config0.provider, config1.provider)
nova chamada: assertNotSame(config0.provider, config1.provider, "Era esperado objetos diferentes, mas  config0.provider é igual a " + " config1.provider")
chamada antiga: assertSame(JSONFactory.getDefaultObjectReaderProvider(), ParserConfig.getGlobalInstance().provider)
nova chamada: assertSame(JSONFactory.getDefaultObjectReaderProvider(), ParserConfig.getGlobalInstance().provider, "Era esperado objetos iguais, mas " + result10201 + " <JSONFactory.getDefaultObjectReaderProvider()> é diferente de " + " ParserConfig.getGlobalInstance().provider")
chamada antiga: assertEquals(123, map.get("id"))
nova chamada: assertEquals(123, map.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result10202 + " <map.get('id')>")
chamada antiga: assertEquals(123, map.get("id"))
nova chamada: assertEquals(123, map.get("id"), "Era esperado valores iguais, mas  123 é diferente de " + result10203 + " <map.get('id')>")
chamada antiga: assertEquals(123, vo.getId())
nova chamada: assertEquals(123, vo.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result10204 + " <vo.getId()>")
chamada antiga: assertEquals(123, vo.getId())
nova chamada: assertEquals(123, vo.getId(), "Era esperado valores iguais, mas  123 é diferente de " + result10205 + " <vo.getId()>")
chamada antiga: assertNotNull(first)
nova chamada: assertNotNull(first, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(second)
nova chamada: assertNotNull(second, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(new Integer(3), reader.readInteger())
nova chamada: assertEquals(new Integer(3), reader.readInteger(), "Era esperado valores iguais, mas  new Integer(3) é diferente de " + result10206 + " <reader.readInteger()>")
chamada antiga: assertNull(reader.readString())
nova chamada: assertNull(reader.readString(), "Era esperado nulo, mas " + result10207 + " <reader.readString()> não é nulo")
chamada antiga: assertEquals("company", reader.readString())
nova chamada: assertEquals("company", reader.readString(), "Era esperado valores iguais, mas  'company' é diferente de " + result10208 + " <reader.readString()>")
chamada antiga: assertTrue(reader.readObject() instanceof JSONObject)
nova chamada: assertTrue(reader.readObject() instanceof JSONObject, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("count", reader.readString())
nova chamada: assertEquals("count", reader.readString(), "Era esperado valores iguais, mas  'count' é diferente de " + result10209 + " <reader.readString()>")
chamada antiga: assertEquals(5, reader.readObject())
nova chamada: assertEquals(5, reader.readObject(), "Era esperado valores iguais, mas  5 é diferente de " + result10210 + " <reader.readObject()>")
chamada antiga: assertEquals("pagecount", reader.readString())
nova chamada: assertEquals("pagecount", reader.readString(), "Era esperado valores iguais, mas  'pagecount' é diferente de " + result10211 + " <reader.readString()>")
chamada antiga: assertEquals(0, reader.readObject())
nova chamada: assertEquals(0, reader.readObject(), "Era esperado valores iguais, mas  0 é diferente de " + result10212 + " <reader.readObject()>")
chamada antiga: assertEquals("pageindex", reader.readString())
nova chamada: assertEquals("pageindex", reader.readString(), "Era esperado valores iguais, mas  'pageindex' é diferente de " + result10213 + " <reader.readString()>")
chamada antiga: assertEquals(0, reader.readObject())
nova chamada: assertEquals(0, reader.readObject(), "Era esperado valores iguais, mas  0 é diferente de " + result10214 + " <reader.readObject()>")
chamada antiga: assertEquals("resultList", reader.readString())
nova chamada: assertEquals("resultList", reader.readString(), "Era esperado valores iguais, mas  'resultList' é diferente de " + result10215 + " <reader.readString()>")
chamada antiga: assertTrue(reader.readObject() instanceof JSONArray)
nova chamada: assertTrue(reader.readObject() instanceof JSONArray, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("totalCount", reader.readString())
nova chamada: assertEquals("totalCount", reader.readString(), "Era esperado valores iguais, mas  'totalCount' é diferente de " + result10216 + " <reader.readString()>")
chamada antiga: assertEquals(0, reader.readObject())
nova chamada: assertEquals(0, reader.readObject(), "Era esperado valores iguais, mas  0 é diferente de " + result10217 + " <reader.readObject()>")
chamada antiga: assertEquals(COUNT, count)
nova chamada: assertEquals(COUNT, count, "Era esperado valores iguais, mas  COUNT é diferente de " + " count")
chamada antiga: assertEquals(Integer.valueOf(1001), reader.readInteger())
nova chamada: assertEquals(Integer.valueOf(1001), reader.readInteger(), "Era esperado valores iguais, mas " + result10218 + " <Integer.valueOf(1001)> é diferente de " + result10219 + " <reader.readInteger()>")
chamada antiga: assertEquals(Long.valueOf(1001), reader.readLong())
nova chamada: assertEquals(Long.valueOf(1001), reader.readLong(), "Era esperado valores iguais, mas " + result10220 + " <Long.valueOf(1001)> é diferente de " + result10221 + " <reader.readLong()>")
chamada antiga: assertNotNull(object)
nova chamada: assertNotNull(object, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(reader.hasNext())
nova chamada: assertTrue(reader.hasNext(), "Era esperado verdadeiro, mas " + result10222 + " <reader.hasNext()> é falso")
chamada antiga: assertEquals(0, Feature.of(new Feature[0]))
nova chamada: assertEquals(0, Feature.of(new Feature[0]), "Era esperado valores iguais, mas  0 é diferente de " + result10223 + " <Feature.of(new Feature[0])>")
chamada antiga: assertEquals(0, Feature.of(null))
nova chamada: assertEquals(0, Feature.of(null), "Era esperado valores iguais, mas  0 é diferente de " + result10224 + " <Feature.of(null)>")
chamada antiga: assertEquals(Feature.SupportAutoType.getMask(), Feature.of(new Feature[] { Feature.SupportAutoType }))
nova chamada: assertEquals(Feature.SupportAutoType.getMask(), Feature.of(new Feature[] { Feature.SupportAutoType }), "Era esperado valores iguais, mas " + result10225 + " <Feature.SupportAutoType.getMask()> é diferente de " + result10226 + " <Feature.of(new Feature[] { Feature.SupportAutoType })>")
chamada antiga: assertTrue(Feature.isEnabled(features, Feature.SupportAutoType))
nova chamada: assertTrue(Feature.isEnabled(features, Feature.SupportAutoType), "Era esperado verdadeiro, mas " + result10227 + " <Feature.isEnabled(features, Feature.SupportAutoType)> é falso")
chamada antiga: assertEquals(model.value.length(), model2.value.length())
nova chamada: assertEquals(model.value.length(), model2.value.length(), "Era esperado valores iguais, mas " + result10228 + " <model.value.length()> é diferente de " + result10229 + " <model2.value.length()>")
chamada antiga: assertEquals(obj.size(), map.size())
nova chamada: assertEquals(obj.size(), map.size(), "Era esperado valores iguais, mas " + result10230 + " <obj.size()> é diferente de " + result10231 + " <map.size()>")
chamada antiga: assertEquals(obj.size(), map.size())
nova chamada: assertEquals(obj.size(), map.size(), "Era esperado valores iguais, mas " + result10232 + " <obj.size()> é diferente de " + result10233 + " <map.size()>")
chamada antiga: assertEquals(obj.get("a"), map.get("a"))
nova chamada: assertEquals(obj.get("a"), map.get("a"), "Era esperado valores iguais, mas " + result10234 + " <obj.get('a')> é diferente de " + result10235 + " <map.get('a')>")
chamada antiga: assertEquals(array.size(), 1)
nova chamada: assertEquals(array.size(), 1, "Era esperado valores iguais, mas " + result10236 + " <array.size()> é diferente de " + " 1")
chamada antiga: assertEquals(array2.size(), 1)
nova chamada: assertEquals(array2.size(), 1, "Era esperado valores iguais, mas " + result10237 + " <array2.size()> é diferente de " + " 1")
chamada antiga: assertEquals(obj.getByteValue("d"), 0)
nova chamada: assertEquals(obj.getByteValue("d"), 0, "Era esperado valores iguais, mas " + result10238 + " <obj.getByteValue('d')> é diferente de " + " 0")
chamada antiga: assertEquals(obj.getShortValue("d"), 0)
nova chamada: assertEquals(obj.getShortValue("d"), 0, "Era esperado valores iguais, mas " + result10239 + " <obj.getShortValue('d')> é diferente de " + " 0")
chamada antiga: assertTrue(obj.getFloatValue("d") == 0F)
nova chamada: assertTrue(obj.getFloatValue("d") == 0F, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(obj.getDoubleValue("d") == 0D)
nova chamada: assertTrue(obj.getDoubleValue("d") == 0D, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(obj.getBigInteger("d"), null)
nova chamada: assertEquals(obj.getBigInteger("d"), null, "Era esperado valores iguais, mas " + result10240 + " <obj.getBigInteger('d')> é diferente de " + " null")
chamada antiga: assertEquals(obj.getSqlDate("d"), null)
nova chamada: assertEquals(obj.getSqlDate("d"), null, "Era esperado valores iguais, mas " + result10241 + " <obj.getSqlDate('d')> é diferente de " + " null")
chamada antiga: assertEquals(obj.getTimestamp("d"), null)
nova chamada: assertEquals(obj.getTimestamp("d"), null, "Era esperado valores iguais, mas " + result10242 + " <obj.getTimestamp('d')> é diferente de " + " null")
chamada antiga: assertEquals(obj.size(), obj2.size())
nova chamada: assertEquals(obj.size(), obj2.size(), "Era esperado valores iguais, mas " + result10243 + " <obj.size()> é diferente de " + result10244 + " <obj2.size()>")
chamada antiga: assertEquals("{\"value\":x'414243444547'}", json)
nova chamada: assertEquals("{\"value\":x'414243444547'}", json, "Era esperado valores iguais, mas  '{\'value\':x'414243444547'}' é diferente de " + " json")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertArrayEquals(model.value, model2.value)
nova chamada: assertArrayEquals(model.value, model2.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model2.value")
chamada antiga: assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", SerializerFeature.UseSingleQuotes))
nova chamada: assertEquals("'a\\'bc'", JSON.toJSONString("a'bc", SerializerFeature.UseSingleQuotes), "Era esperado valores iguais, mas  ''a\\'bc'' é diferente de " + result10245 + " <JSON.toJSONString('a'bc', SerializerFeature.UseSingleQuotes)>")
chamada antiga: assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", SerializerFeature.UseSingleQuotes)))
nova chamada: assertEquals("'a\\'bc'", new String(JSON.toJSONBytes("a'bc", SerializerFeature.UseSingleQuotes)), "Era esperado valores iguais, mas  ''a\\'bc'' é diferente de " + " new String(JSON.toJSONBytes('a'bc', SerializerFeature.UseSingleQuotes))")
chamada antiga: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes))
nova chamada: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + result10246 + " <JSON.toJSONString(new JSONObject().fluentPut('val', 'a'bc'), SerializerFeature.UseSingleQuotes)>")
chamada antiga: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes)))
nova chamada: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(new JSONObject().fluentPut("val", "a'bc"), SerializerFeature.UseSingleQuotes)), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + " new String(JSON.toJSONBytes(new JSONObject().fluentPut('val', 'a'bc'), SerializerFeature.UseSingleQuotes))")
chamada antiga: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, SerializerFeature.UseSingleQuotes))
nova chamada: assertEquals("{'val':'a\\'bc'}", JSON.toJSONString(bean, SerializerFeature.UseSingleQuotes), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + result10247 + " <JSON.toJSONString(bean, SerializerFeature.UseSingleQuotes)>")
chamada antiga: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, SerializerFeature.UseSingleQuotes)))
nova chamada: assertEquals("{'val':'a\\'bc'}", new String(JSON.toJSONBytes(bean, SerializerFeature.UseSingleQuotes)), "Era esperado valores iguais, mas  '{'val':'a\\'bc'}' é diferente de " + " new String(JSON.toJSONBytes(bean, SerializerFeature.UseSingleQuotes))")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().intValue(), v.getValue().intValue())
nova chamada: assertEquals(v1.getValue().intValue(), v.getValue().intValue(), "Era esperado valores iguais, mas " + result10248 + " <v1.getValue().intValue()> é diferente de " + result10249 + " <v.getValue().intValue()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10250 + " <v1.getValue()> é diferente de " + result10251 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":[1,2]}", text)
nova chamada: assertEquals("{\"value\":[1,2]}", text, "Era esperado valores iguais, mas  '{\'value\':[1,2]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":123}", text)
nova chamada: assertEquals("{\"value\":123}", text, "Era esperado valores iguais, mas  '{\'value\':123}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().intValue(), v.getValue().intValue())
nova chamada: assertEquals(v1.getValue().intValue(), v.getValue().intValue(), "Era esperado valores iguais, mas " + result10252 + " <v1.getValue().intValue()> é diferente de " + result10253 + " <v.getValue().intValue()>")
chamada antiga: assertEquals("{\"value\":true}", text)
nova chamada: assertEquals("{\"value\":true}", text, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue().get(), v.getValue().get())
nova chamada: assertEquals(v1.getValue().get(), v.getValue().get(), "Era esperado valores iguais, mas " + result10254 + " <v1.getValue().get()> é diferente de " + result10255 + " <v.getValue().get()>")
chamada antiga: Assertions.assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10256 + " <v1.getValue()> é diferente de " + result10257 + " <v.getValue()>")
chamada antiga: Assertions.assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: Assertions.assertEquals("{\"value\":[1,2]}", text)
nova chamada: assertEquals("{\"value\":[1,2]}", text, "Era esperado valores iguais, mas  '{\'value\':[1,2]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result10258 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter))
nova chamada: assertEquals("{}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter), "Era esperado valores iguais, mas  '{}' é diferente de " + result10259 + " <JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter)>")
chamada antiga: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean))
nova chamada: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '{\'f0\':10,\'f1\':11,\'f2\':12}' é diferente de " + result10260 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter))
nova chamada: assertEquals("{\"f0\":10,\"f1\":11,\"f2\":12}", JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter), "Era esperado valores iguais, mas  '{\'f0\':10,\'f1\':11,\'f2\':12}' é diferente de " + result10261 + " <JSON.toJSONString(bean, SerializerFeature.IgnoreNonFieldGetter)>")
chamada antiga: assertEquals(123, obj.getObject("id", Object.class))
nova chamada: assertEquals(123, obj.getObject("id", Object.class), "Era esperado valores iguais, mas  123 é diferente de " + result10262 + " <obj.getObject('id', Object.class)>")
chamada antiga: assertEquals(0, array.getByteValue(0))
nova chamada: assertEquals(0, array.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result10263 + " <array.getByteValue(0)>")
chamada antiga: assertEquals(0, array.getShortValue(0))
nova chamada: assertEquals(0, array.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result10264 + " <array.getShortValue(0)>")
chamada antiga: assertTrue(0F == array.getFloatValue(0))
nova chamada: assertTrue(0F == array.getFloatValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(0D == array.getDoubleValue(0))
nova chamada: assertTrue(0D == array.getDoubleValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("1"), array.getBigInteger(1))
nova chamada: assertEquals(new BigInteger("1"), array.getBigInteger(1), "Era esperado valores iguais, mas  new BigInteger('1') é diferente de " + result10265 + " <array.getBigInteger(1)>")
chamada antiga: assertEquals("1", array.getString(1))
nova chamada: assertEquals("1", array.getString(1), "Era esperado valores iguais, mas  '1' é diferente de " + result10266 + " <array.getString(1)>")
chamada antiga: assertEquals(new java.util.Date(time), array.getDate(2))
nova chamada: assertEquals(new java.util.Date(time), array.getDate(2), "Era esperado valores iguais, mas  new java.util.Date(time) é diferente de " + result10267 + " <array.getDate(2)>")
chamada antiga: assertEquals(0, array2.getByteValue(0))
nova chamada: assertEquals(0, array2.getByteValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result10268 + " <array2.getByteValue(0)>")
chamada antiga: assertEquals(0, array2.getShortValue(0))
nova chamada: assertEquals(0, array2.getShortValue(0), "Era esperado valores iguais, mas  0 é diferente de " + result10269 + " <array2.getShortValue(0)>")
chamada antiga: assertTrue(0F == array2.getFloatValue(0))
nova chamada: assertTrue(0F == array2.getFloatValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(0D == array2.getDoubleValue(0))
nova chamada: assertTrue(0D == array2.getDoubleValue(0), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(new BigInteger("1"), array2.getBigInteger(1))
nova chamada: assertEquals(new BigInteger("1"), array2.getBigInteger(1), "Era esperado valores iguais, mas  new BigInteger('1') é diferente de " + result10270 + " <array2.getBigInteger(1)>")
chamada antiga: assertEquals("1", array2.getString(1))
nova chamada: assertEquals("1", array2.getString(1), "Era esperado valores iguais, mas  '1' é diferente de " + result10271 + " <array2.getString(1)>")
chamada antiga: assertEquals(new java.util.Date(time), array2.getDate(2))
nova chamada: assertEquals(new java.util.Date(time), array2.getDate(2), "Era esperado valores iguais, mas  new java.util.Date(time) é diferente de " + result10272 + " <array2.getDate(2)>")
chamada antiga: assertEquals(array2.size(), array2.size())
nova chamada: assertEquals(array2.size(), array2.size(), "Era esperado valores iguais, mas " + result10273 + " <array2.size()> é diferente de " + result10274 + " <array2.size()>")
chamada antiga: assertEquals("{\"@type\":\"com.alibaba.fastjson.issue_2000.Issue2012$Model\",\"bytes\":\"\"}", str)
nova chamada: assertEquals("{\"@type\":\"com.alibaba.fastjson.issue_2000.Issue2012$Model\",\"bytes\":\"\"}", str, "Era esperado valores iguais, mas  '{\'@type\':\'com.alibaba.fastjson.issue_2000.Issue2012$Model\',\'bytes\':\'\'}' é diferente de " + " str")
chamada antiga: assertEquals(0, foo.bytes.length)
nova chamada: assertEquals(0, foo.bytes.length, "Era esperado valores iguais, mas  0 é diferente de " + " foo.bytes.length")
chamada antiga: assertSame(AccessLevel.DEVELOPER, model.accessLevel)
nova chamada: assertSame(AccessLevel.DEVELOPER, model.accessLevel, "Era esperado objetos iguais, mas  AccessLevel.DEVELOPER é diferente de " + " model.accessLevel")
chamada antiga: assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", JSON.toJSONString(permissions))
nova chamada: assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", JSON.toJSONString(permissions), "Era esperado valores iguais, mas  '{\'groupAccess\':{\'accessLevel\':50,\'notificationLevel\':3}}' é diferente de " + result10275 + " <JSON.toJSONString(permissions)>")
chamada antiga: assertEquals(date, m.date)
nova chamada: assertEquals(date, m.date, "Era esperado valores iguais, mas  date é diferente de " + " m.date")
chamada antiga: assertEquals(date, m.date)
nova chamada: assertEquals(date, m.date, "Era esperado valores iguais, mas  date é diferente de " + " m.date")
chamada antiga: assertEquals("{\"name\":null}", object.toString(SerializerFeature.WriteMapNullValue))
nova chamada: assertEquals("{\"name\":null}", object.toString(SerializerFeature.WriteMapNullValue), "Era esperado valores iguais, mas  '{\'name\':null}' é diferente de " + result10276 + " <object.toString(SerializerFeature.WriteMapNullValue)>")
chamada antiga: assertNull(JSON.parseObject("{\"code\":0}", Model.class).code)
nova chamada: assertNull(JSON.parseObject("{\"code\":0}", Model.class).code, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(JSON.parseObject("0", EnumClass.class))
nova chamada: assertNull(JSON.parseObject("0", EnumClass.class), "Era esperado nulo, mas " + result10277 + " <JSON.parseObject('0', EnumClass.class)> não é nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class))
nova chamada: assertSame(EnumClass.A, JSON.parseObject("1", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + result10278 + " <JSON.parseObject('1', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class))
nova chamada: assertSame(EnumClass.B, JSON.parseObject("2", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.B é diferente de " + result10279 + " <JSON.parseObject('2', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.C, JSON.parseObject("3", EnumClass.class))
nova chamada: assertSame(EnumClass.C, JSON.parseObject("3", EnumClass.class), "Era esperado objetos iguais, mas  EnumClass.C é diferente de " + result10280 + " <JSON.parseObject('3', EnumClass.class)>")
chamada antiga: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code)
nova chamada: assertSame(EnumClass.A, JSON.parseObject("{\"code\":1}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.A é diferente de " + " JSON.parseObject('{\'code\':1}', Model.class).code")
chamada antiga: assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code)
nova chamada: assertSame(EnumClass.B, JSON.parseObject("{\"code\":2}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.B é diferente de " + " JSON.parseObject('{\'code\':2}', Model.class).code")
chamada antiga: assertSame(EnumClass.C, JSON.parseObject("{\"code\":3}", Model.class).code)
nova chamada: assertSame(EnumClass.C, JSON.parseObject("{\"code\":3}", Model.class).code, "Era esperado objetos iguais, mas  EnumClass.C é diferente de " + " JSON.parseObject('{\'code\':3}', Model.class).code")
chamada antiga: assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text)
nova chamada: assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text, "Era esperado valores iguais, mas  '{\'latitude\':37,\'id\':123,\'longitude\':127}' é diferente de " + " text")
chamada antiga: assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text)
nova chamada: assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text, "Era esperado valores iguais, mas  '{\'latitude\':37,\'id\':123,\'longitude\':127}' é diferente de " + " text")
chamada antiga: assertEquals("TestJsonObj2{$a_b=\"a1_b2\",_c_d=\"c3_d4\",aaaa=\"CC\",__flag=true,$flag=true}", stu.toString())
nova chamada: assertEquals("TestJsonObj2{$a_b=\"a1_b2\",_c_d=\"c3_d4\",aaaa=\"CC\",__flag=true,$flag=true}", stu.toString(), "Era esperado valores iguais, mas  'TestJsonObj2{$a_b=\'a1_b2\',_c_d=\'c3_d4\',aaaa=\'CC\',__flag=true,$flag=true}' é diferente de " + result10281 + " <stu.toString()>")
chamada antiga: assertEquals("TestJsonObj2{$a_b=\"aa3_bb4\",_c_d=\"cc1_dd2\",aaaa=\"BB\",__flag=true,$flag=true}", stu.toString())
nova chamada: assertEquals("TestJsonObj2{$a_b=\"aa3_bb4\",_c_d=\"cc1_dd2\",aaaa=\"BB\",__flag=true,$flag=true}", stu.toString(), "Era esperado valores iguais, mas  'TestJsonObj2{$a_b=\'aa3_bb4\',_c_d=\'cc1_dd2\',aaaa=\'BB\',__flag=true,$flag=true}' é diferente de " + result10282 + " <stu.toString()>")
chamada antiga: assertEquals("{\"$a_b\":\"aa_bb\",\"$flag\":true,\"__flag\":true,\"_c_d\":\"cc_dd\",\"aaaa\":\"AA\"}", text)
nova chamada: assertEquals("{\"$a_b\":\"aa_bb\",\"$flag\":true,\"__flag\":true,\"_c_d\":\"cc_dd\",\"aaaa\":\"AA\"}", text, "Era esperado valores iguais, mas  '{\'$a_b\':\'aa_bb\',\'$flag\':true,\'__flag\':true,\'_c_d\':\'cc_dd\',\'aaaa\':\'AA\'}' é diferente de " + " text")
chamada antiga: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField))
nova chamada: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField), "Era esperado valores iguais, mas  '{\'map\':{\'a\':[\'1\',\'2\',\'3\'],\'b\':[\'1\']},\'name\':\'zhangsan\'}' é diferente de " + result10283 + " <JSON.toJSONString(vo, SerializerFeature.MapSortField)>")
chamada antiga: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField))
nova chamada: assertEquals("{\"map\":{\"a\":[\"1\",\"2\",\"3\"],\"b\":[\"1\"]},\"name\":\"zhangsan\"}", JSON.toJSONString(vo, SerializerFeature.MapSortField), "Era esperado valores iguais, mas  '{\'map\':{\'a\':[\'1\',\'2\',\'3\'],\'b\':[\'1\']},\'name\':\'zhangsan\'}' é diferente de " + result10284 + " <JSON.toJSONString(vo, SerializerFeature.MapSortField)>")
chamada antiga: assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text)
nova chamada: assertEquals("{\"my_name\":\"test name\",\"nested_bean\":{\"my_id\":\"test id\"}}", text, "Era esperado valores iguais, mas  '{\'my_name\':\'test name\',\'nested_bean\':{\'my_id\':\'test id\'}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":\"\"}", text)
nova chamada: assertEquals("{\"value\":\"\"}", text, "Era esperado valores iguais, mas  '{\'value\':\'\'}' é diferente de " + " text")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10285 + " <array.size()>")
chamada antiga: assertNull(array.get(0))
nova chamada: assertNull(array.get(0), "Era esperado nulo, mas " + result10286 + " <array.get(0)> não é nulo")
chamada antiga: assertEquals("1001", array.get(1))
nova chamada: assertEquals("1001", array.get(1), "Era esperado valores iguais, mas  '1001' é diferente de " + result10287 + " <array.get(1)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10288 + " <array.size()>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10289 + " <array.size()>")
chamada antiga: assertEquals("1001", array.get(0))
nova chamada: assertEquals("1001", array.get(0), "Era esperado valores iguais, mas  '1001' é diferente de " + result10290 + " <array.get(0)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10291 + " <array.size()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10292 + " <array.size()>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10293 + " <array.size()>")
chamada antiga: assertEquals(2, array.size())
nova chamada: assertEquals(2, array.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10294 + " <array.size()>")
chamada antiga: assertNull(array.get(0))
nova chamada: assertNull(array.get(0), "Era esperado nulo, mas " + result10295 + " <array.get(0)> não é nulo")
chamada antiga: assertEquals("1001", array.get(1))
nova chamada: assertEquals("1001", array.get(1), "Era esperado valores iguais, mas  '1001' é diferente de " + result10296 + " <array.get(1)>")
chamada antiga: assertEquals(0, array.size())
nova chamada: assertEquals(0, array.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10297 + " <array.size()>")
chamada antiga: assertEquals(3, array.size())
nova chamada: assertEquals(3, array.size(), "Era esperado valores iguais, mas  3 é diferente de " + result10298 + " <array.size()>")
chamada antiga: assertEquals(1, array.size())
nova chamada: assertEquals(1, array.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10299 + " <array.size()>")
chamada antiga: assertEquals("1002", array.get(0))
nova chamada: assertEquals("1002", array.get(0), "Era esperado valores iguais, mas  '1002' é diferente de " + result10300 + " <array.get(0)>")
chamada antiga: assertEquals(str, sdf.format(d))
nova chamada: assertEquals(str, sdf.format(d), "Era esperado valores iguais, mas  str é diferente de " + result10301 + " <sdf.format(d)>")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result10302 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result10303 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result10304 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertTrue(error.getMessage().startsWith("invalid escape character"))
nova chamada: assertTrue(error.getMessage().startsWith("invalid escape character"), "Era esperado verdadeiro, mas " + result10305 + " <error.getMessage().startsWith('invalid escape character')> é falso")
chamada antiga: assertEquals("hello", smgpSubmitMessage2.getMsgContent())
nova chamada: assertEquals("hello", smgpSubmitMessage2.getMsgContent(), "Era esperado valores iguais, mas  'hello' é diferente de " + result10306 + " <smgpSubmitMessage2.getMsgContent()>")
chamada antiga: assertEquals("9423372036854775807", bi1.toString())
nova chamada: assertEquals("9423372036854775807", bi1.toString(), "Era esperado valores iguais, mas  '9423372036854775807' é diferente de " + result10307 + " <bi1.toString()>")
chamada antiga: assertEquals("9423372036854775807", bi2.toString())
nova chamada: assertEquals("9423372036854775807", bi2.toString(), "Era esperado valores iguais, mas  '9423372036854775807' é diferente de " + result10308 + " <bi2.toString()>")
chamada antiga: assertEquals("9423372036854775807", tobj1.getBi().toString())
nova chamada: assertEquals("9423372036854775807", tobj1.getBi().toString(), "Era esperado valores iguais, mas  '9423372036854775807' é diferente de " + result10309 + " <tobj1.getBi().toString()>")
chamada antiga: assertEquals("9423372036854775807", tobj2.getBi().toString())
nova chamada: assertEquals("9423372036854775807", tobj2.getBi().toString(), "Era esperado valores iguais, mas  '9423372036854775807' é diferente de " + result10310 + " <tobj2.getBi().toString()>")
chamada antiga: assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { contextValueFilter }))
nova chamada: assertEquals("[{\"name\":\"mark-ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { contextValueFilter }), "Era esperado valores iguais, mas  '[{\'name\':\'mark-ace\'}]' é diferente de " + result10311 + " <JSON.toJSONString(params, new SerializeFilter[] { contextValueFilter })>")
chamada antiga: assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { valueFilter }))
nova chamada: assertEquals("[{\"name\":\"ace\"}]", JSON.toJSONString(params, new SerializeFilter[] { valueFilter }), "Era esperado valores iguais, mas  '[{\'name\':\'ace\'}]' é diferente de " + result10312 + " <JSON.toJSONString(params, new SerializeFilter[] { valueFilter })>")
chamada antiga: assertEquals(0D, object.getDoubleValue("val"))
nova chamada: assertEquals(0D, object.getDoubleValue("val"), "Era esperado valores iguais, mas  0D é diferente de " + result10313 + " <object.getDoubleValue('val')>")
chamada antiga: assertEquals(0F, object.getFloatValue("val"))
nova chamada: assertEquals(0F, object.getFloatValue("val"), "Era esperado valores iguais, mas  0F é diferente de " + result10314 + " <object.getFloatValue('val')>")
chamada antiga: assertEquals(0, object.getIntValue("val"))
nova chamada: assertEquals(0, object.getIntValue("val"), "Era esperado valores iguais, mas  0 é diferente de " + result10315 + " <object.getIntValue('val')>")
chamada antiga: assertEquals(0L, object.getLongValue("val"))
nova chamada: assertEquals(0L, object.getLongValue("val"), "Era esperado valores iguais, mas  0L é diferente de " + result10316 + " <object.getLongValue('val')>")
chamada antiga: assertEquals((short) 0, object.getShortValue("val"))
nova chamada: assertEquals((short) 0, object.getShortValue("val"), "Era esperado valores iguais, mas  (short) 0 é diferente de " + result10317 + " <object.getShortValue('val')>")
chamada antiga: assertEquals((byte) 0, object.getByteValue("val"))
nova chamada: assertEquals((byte) 0, object.getByteValue("val"), "Era esperado valores iguais, mas  (byte) 0 é diferente de " + result10318 + " <object.getByteValue('val')>")
chamada antiga: assertEquals(false, object.getBooleanValue("val"))
nova chamada: assertEquals(false, object.getBooleanValue("val"), "Era esperado valores iguais, mas  false é diferente de " + result10319 + " <object.getBooleanValue('val')>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0F, model.value)
nova chamada: assertEquals(0F, model.value, "Era esperado valores iguais, mas  0F é diferente de " + " model.value")
chamada antiga: assertEquals(0F, model.value)
nova chamada: assertEquals(0F, model.value, "Era esperado valores iguais, mas  0F é diferente de " + " model.value")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseLong error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseLong error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(MyEnum.Test1, test.getMyEnum())
nova chamada: assertEquals(MyEnum.Test1, test.getMyEnum(), "Era esperado valores iguais, mas  MyEnum.Test1 é diferente de " + result10320 + " <test.getMyEnum()>")
chamada antiga: assertEquals(1, test.value)
nova chamada: assertEquals(1, test.value, "Era esperado valores iguais, mas  1 é diferente de " + " test.value")
chamada antiga: assertEquals("string", object.name)
nova chamada: assertEquals("string", object.name, "Era esperado valores iguais, mas  'string' é diferente de " + " object.name")
chamada antiga: assertEquals(1, object.code)
nova chamada: assertEquals(1, object.code, "Era esperado valores iguais, mas  1 é diferente de " + " object.code")
chamada antiga: assertEquals("pinyin", object.pinyin)
nova chamada: assertEquals("pinyin", object.pinyin, "Era esperado valores iguais, mas  'pinyin' é diferente de " + " object.pinyin")
chamada antiga: assertEquals(null, object.name)
nova chamada: assertEquals(null, object.name, "Era esperado valores iguais, mas  null é diferente de " + " object.name")
chamada antiga: assertEquals(0, object.code)
nova chamada: assertEquals(0, object.code, "Era esperado valores iguais, mas  0 é diferente de " + " object.code")
chamada antiga: assertTrue(reponse.indexOf("Python源码剖析") > 0)
nova chamada: assertTrue(reponse.indexOf("Python源码剖析") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(reponse.indexOf("电子工业出版社") > 0)
nova chamada: assertTrue(reponse.indexOf("电子工业出版社") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(obj))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(obj), "Era esperado valores iguais, mas  jsonStr é diferente de " + result10321 + " <JSON.toJSONString(obj)>")
chamada antiga: assertNotNull(obj.value1)
nova chamada: assertNotNull(obj.value1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(obj))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(obj), "Era esperado valores iguais, mas  jsonStr é diferente de " + result10322 + " <JSON.toJSONString(obj)>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseInt error, ") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseInt error, ") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.value)
nova chamada: assertEquals(0, model.value, "Era esperado valores iguais, mas  0 é diferente de " + " model.value")
chamada antiga: assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json)
nova chamada: assertEquals("{\"goodsList\":[{\"properties\":[{}]}]}", json, "Era esperado valores iguais, mas  '{\'goodsList\':[{\'properties\':[{}]}]}' é diferente de " + " json")
chamada antiga: assertNotNull(n)
nova chamada: assertNotNull(n, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(n.getGoodsList())
nova chamada: assertNotNull(n.getGoodsList(), "Era esperado não nulo, mas " + result10323 + " <n.getGoodsList()> é nulo")
chamada antiga: assertNotNull(n.getGoodsList().get(0))
nova chamada: assertNotNull(n.getGoodsList().get(0), "Era esperado não nulo, mas " + result10324 + " <n.getGoodsList().get(0)> é nulo")
chamada antiga: assertNotNull(n.getGoodsList().get(0).getProperties())
nova chamada: assertNotNull(n.getGoodsList().get(0).getProperties(), "Era esperado não nulo, mas " + result10325 + " <n.getGoodsList().get(0).getProperties()> é nulo")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result10326 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(model.val)
nova chamada: assertNotNull(model.val, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString), "{\"C\":\"D\",\"E\":\"A\"}")
nova chamada: assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString), "{\"C\":\"D\",\"E\":\"A\"}", "Era esperado valores iguais, mas " + result10327 + " <JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString)> é diferente de " + " '{\'C\':\'D\',\'E\':\'A\'}'")
chamada antiga: assertEquals("21496a63f5", image.id)
nova chamada: assertEquals("21496a63f5", image.id, "Era esperado valores iguais, mas  '21496a63f5' é diferente de " + " image.id")
chamada antiga: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url)
nova chamada: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x", image.url, "Era esperado valores iguais, mas  'http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg;,,JPG;3,208x' é diferente de " + " image.url")
chamada antiga: assertEquals("", image.title)
nova chamada: assertEquals("", image.title, "Era esperado valores iguais, mas  '' é diferente de " + " image.title")
chamada antiga: assertEquals("JPG", image.type)
nova chamada: assertEquals("JPG", image.type, "Era esperado valores iguais, mas  'JPG' é diferente de " + " image.type")
chamada antiga: assertEquals(400, image.optimalWidth)
nova chamada: assertEquals(400, image.optimalWidth, "Era esperado valores iguais, mas  400 é diferente de " + " image.optimalWidth")
chamada antiga: assertEquals(267, image.optimalHeight)
nova chamada: assertEquals(267, image.optimalHeight, "Era esperado valores iguais, mas  267 é diferente de " + " image.optimalHeight")
chamada antiga: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url)
nova chamada: assertEquals("http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg", image.original_save_url, "Era esperado valores iguais, mas  'http://hl-img.peco.uodoo.com/hubble-test/app/sm/e9b884c1dcd671f128bac020e070e273.jpg' é diferente de " + " image.original_save_url")
chamada antiga: assertEquals("62717D190987A7AE", image.phash)
nova chamada: assertEquals("62717D190987A7AE", image.phash, "Era esperado valores iguais, mas  '62717D190987A7AE' é diferente de " + " image.phash")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result10328 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'value\':\'a\'}' é diferente de " + result10329 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"id\":1,\"value\":\"a\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'id\':1,\'value\':\'a\'}' é diferente de " + result10330 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("a", model2.value)
nova chamada: assertEquals("a", model2.value, "Era esperado valores iguais, mas  'a' é diferente de " + " model2.value")
chamada antiga: Assertions.assertTrue(json.indexOf("\\") < 0)
nova chamada: assertTrue(json.indexOf("\\") < 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(reponse.indexOf("Python源码剖析") > 0)
nova chamada: assertTrue(reponse.indexOf("Python源码剖析") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(reponse.indexOf("电子工业出版社") > 0)
nova chamada: assertTrue(reponse.indexOf("电子工业出版社") > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1.0d, total)
nova chamada: assertEquals(1.0d, total, "Era esperado valores iguais, mas  1.0d é diferente de " + " total")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0D, model.value)
nova chamada: assertEquals(0D, model.value, "Era esperado valores iguais, mas  0D é diferente de " + " model.value")
chamada antiga: assertEquals(0D, model.value)
nova chamada: assertEquals(0D, model.value, "Era esperado valores iguais, mas  0D é diferente de " + " model.value")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(error.getMessage().indexOf("parseInt error") != -1)
nova chamada: assertTrue(error.getMessage().indexOf("parseInt error") != -1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, model.value)
nova chamada: assertEquals(0, model.value, "Era esperado valores iguais, mas  0 é diferente de " + " model.value")
chamada antiga: assertEquals("1324138987429", JSON.toJSONString(date))
nova chamada: assertEquals("1324138987429", JSON.toJSONString(date), "Era esperado valores iguais, mas  '1324138987429' é diferente de " + result10331 + " <JSON.toJSONString(date)>")
chamada antiga: assertEquals("{\"@type\":\"java.sql.Date\",\"val\":1324138987429}", JSON.toJSONString(date, SerializerFeature.WriteClassName))
nova chamada: assertEquals("{\"@type\":\"java.sql.Date\",\"val\":1324138987429}", JSON.toJSONString(date, SerializerFeature.WriteClassName), "Era esperado valores iguais, mas  '{\'@type\':\'java.sql.Date\',\'val\':1324138987429}' é diferente de " + result10332 + " <JSON.toJSONString(date, SerializerFeature.WriteClassName)>")
chamada antiga: assertEquals(1324138987429L, ((java.util.Date) JSON.parse("{\"@type\":\"java.util.Date\",\"val\":1324138987429}", Feature.SupportAutoType)).getTime())
nova chamada: assertEquals(1324138987429L, ((java.util.Date) JSON.parse("{\"@type\":\"java.util.Date\",\"val\":1324138987429}", Feature.SupportAutoType)).getTime(), "Era esperado valores iguais, mas  1324138987429L é diferente de " + result10333 + " <((java.util.Date) JSON.parse('{\'@type\':\'java.util.Date\',\'val\':1324138987429}', Feature.SupportAutoType)).getTime()>")
chamada antiga: assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat))
nova chamada: assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat), "Era esperado valores iguais, mas  '\'2011-12-18 00:23:07\'' é diferente de " + result10334 + " <JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat)>")
chamada antiga: assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"))
nova chamada: assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"), "Era esperado valores iguais, mas  '\'2011-12-18 00:23:07.429\'' é diferente de " + result10335 + " <JSON.toJSONStringWithDateFormat(date, 'yyyy-MM-dd HH:mm:ss.SSS')>")
chamada antiga: assertEquals("'2011-12-18 00:23:07.429'", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS", SerializerFeature.UseSingleQuotes))
nova chamada: assertEquals("'2011-12-18 00:23:07.429'", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS", SerializerFeature.UseSingleQuotes), "Era esperado valores iguais, mas  ''2011-12-18 00:23:07.429'' é diferente de " + result10336 + " <JSON.toJSONStringWithDateFormat(date, 'yyyy-MM-dd HH:mm:ss.SSS', SerializerFeature.UseSingleQuotes)>")
chamada antiga: assertEquals(file.name, convertFile.name)
nova chamada: assertEquals(file.name, convertFile.name, "Era esperado valores iguais, mas  file.name é diferente de " + " convertFile.name")
chamada antiga: assertArrayEquals(file.data, convertFile.data)
nova chamada: assertArrayEquals(file.data, convertFile.data, "Era esperado arrays iguais, mas  file.data é diferente de " + " convertFile.data")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10337 + " <user1.getValue()> é diferente de " + result10338 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10339 + " <user1.getValue()> é diferente de " + result10340 + " <user.getValue()>")
chamada antiga: assertEquals(new JSONArray().hashCode(), new JSONArray().hashCode())
nova chamada: assertEquals(new JSONArray().hashCode(), new JSONArray().hashCode(), "Era esperado valores iguais, mas " + result10341 + " <new JSONArray().hashCode()> é diferente de " + result10342 + " <new JSONArray().hashCode()>")
chamada antiga: assertEquals(JSON.parseArray("[]"), JSON.parseArray("[]"))
nova chamada: assertEquals(JSON.parseArray("[]"), JSON.parseArray("[]"), "Era esperado valores iguais, mas " + result10343 + " <JSON.parseArray('[]')> é diferente de " + result10344 + " <JSON.parseArray('[]')>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10345 + " <v1.getValue()> é diferente de " + result10346 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result10347 + " <JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{\"value\":[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{\"value\":[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + result10348 + " <JSON.toJSONStringZ(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{'value':[]}' é diferente de " + result10349 + " <JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.QuoteFieldNames, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty))
nova chamada: assertEquals("{'value':[]}", JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.QuoteFieldNames, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty), "Era esperado valores iguais, mas  '{'value':[]}' é diferente de " + result10350 + " <JSON.toJSONStringZ(v, mapping, SerializerFeature.UseSingleQuotes, SerializerFeature.QuoteFieldNames, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullListAsEmpty)>")
chamada antiga: assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.toJSONString(jsonObject, true))
nova chamada: assertEquals("{\n" + "\t\"head\":{\n" + "\t\t\"requestTime\":\"1654070371884\",\n" + "\t\t\"merchantcode\":\"111\",\n" + "\t\t\"ticket\":\"111\",\n" + "\t\t\"version\":\"1.0.0\"\n" + "\t},\n" + "\t\"body\":{\n" + "\t\t\"phone\":\"111\",\n" + "\t\t\"type\":\"1\",\n" + "\t\t\"ticket\":\"\"\n" + "\t},\n" + "\t\"sign\":\"111\"\n" + "}", JSON.toJSONString(jsonObject, true), "Era esperado valores iguais, mas  '{\n' + '\t\'head\':{\n' + '\t\t\'requestTime\':\'1654070371884\',\n' + '\t\t\'merchantcode\':\'111\',\n' + '\t\t\'ticket\':\'111\',\n' + '\t\t\'version\':\'1.0.0\'\n' + '\t},\n' + '\t\'body\':{\n' + '\t\t\'phone\':\'111\',\n' + '\t\t\'type\':\'1\',\n' + '\t\t\'ticket\':\'\'\n' + '\t},\n' + '\t\'sign\':\'111\'\n' + '}' é diferente de " + result10351 + " <JSON.toJSONString(jsonObject, true)>")
chamada antiga: assertEquals(30, model.getAge())
nova chamada: assertEquals(30, model.getAge(), "Era esperado valores iguais, mas  30 é diferente de " + result10352 + " <model.getAge()>")
chamada antiga: assertNotNull(bigClass)
nova chamada: assertNotNull(bigClass, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str)
nova chamada: assertEquals("{\"brokerAddrs\":{0:\"0.0.0.0\"}}", str, "Era esperado valores iguais, mas  '{\'brokerAddrs\':{0:\'0.0.0.0\'}}' é diferente de " + " str")
chamada antiga: assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L))
nova chamada: assertEquals("0.0.0.0", brokerData1.getBrokerAddrs().get(0L), "Era esperado valores iguais, mas  '0.0.0.0' é diferente de " + result10353 + " <brokerData1.getBrokerAddrs().get(0L)>")
chamada antiga: assertEquals(new Timestamp(millis), JSON.parseObject("" + millis, Timestamp.class))
nova chamada: assertEquals(new Timestamp(millis), JSON.parseObject("" + millis, Timestamp.class), "Era esperado valores iguais, mas  new Timestamp(millis) é diferente de " + result10354 + " <JSON.parseObject('' + millis, Timestamp.class)>")
chamada antiga: assertEquals(new Timestamp(millis), JSON.parseObject("\"" + millis + "\"", Timestamp.class))
nova chamada: assertEquals(new Timestamp(millis), JSON.parseObject("\"" + millis + "\"", Timestamp.class), "Era esperado valores iguais, mas  new Timestamp(millis) é diferente de " + result10355 + " <JSON.parseObject('\'' + millis + '\'', Timestamp.class)>")
chamada antiga: assertEquals(new Timestamp(millis), JSON.parseObject(text, Timestamp.class))
nova chamada: assertEquals(new Timestamp(millis), JSON.parseObject(text, Timestamp.class), "Era esperado valores iguais, mas  new Timestamp(millis) é diferente de " + result10356 + " <JSON.parseObject(text, Timestamp.class)>")
chamada antiga: assertEquals("\"2022-11-12 00:00:00\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.sql.Date.class), JSON.DEFFAULT_DATE_FORMAT))
nova chamada: assertEquals("\"2022-11-12 00:00:00\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.sql.Date.class), JSON.DEFFAULT_DATE_FORMAT), "Era esperado valores iguais, mas  '\'2022-11-12 00:00:00\'' é diferente de " + result10357 + " <JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.sql.Date.class), JSON.DEFFAULT_DATE_FORMAT)>")
chamada antiga: assertEquals("\"2022-11-12 09:32:23\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.util.Date.class), JSON.DEFFAULT_DATE_FORMAT))
nova chamada: assertEquals("\"2022-11-12 09:32:23\"", JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.util.Date.class), JSON.DEFFAULT_DATE_FORMAT), "Era esperado valores iguais, mas  '\'2022-11-12 09:32:23\'' é diferente de " + result10358 + " <JSON.toJSONStringWithDateFormat(JSON.parseObject(text, java.util.Date.class), JSON.DEFFAULT_DATE_FORMAT)>")
chamada antiga: assertEquals(new Long(3), json.getLong("id"))
nova chamada: assertEquals(new Long(3), json.getLong("id"), "Era esperado valores iguais, mas  new Long(3) é diferente de " + result10359 + " <json.getLong('id')>")
chamada antiga: assertEquals("周访", json.getString("name"))
nova chamada: assertEquals("周访", json.getString("name"), "Era esperado valores iguais, mas  '周访' é diferente de " + result10360 + " <json.getString('name')>")
chamada antiga: assertEquals(new Long(3), json.getLong("id"))
nova chamada: assertEquals(new Long(3), json.getLong("id"), "Era esperado valores iguais, mas  new Long(3) é diferente de " + result10361 + " <json.getLong('id')>")
chamada antiga: assertEquals("周访", json.getString("name"))
nova chamada: assertEquals("周访", json.getString("name"), "Era esperado valores iguais, mas  '周访' é diferente de " + result10362 + " <json.getString('name')>")
chamada antiga: assertEquals(new Long(3), json.getLong("id"))
nova chamada: assertEquals(new Long(3), json.getLong("id"), "Era esperado valores iguais, mas  new Long(3) é diferente de " + result10363 + " <json.getLong('id')>")
chamada antiga: assertEquals("周访", json.getString("name"))
nova chamada: assertEquals("周访", json.getString("name"), "Era esperado valores iguais, mas  '周访' é diferente de " + result10364 + " <json.getString('name')>")
chamada antiga: assertEquals(new Long(3), json.getLong("id"))
nova chamada: assertEquals(new Long(3), json.getLong("id"), "Era esperado valores iguais, mas  new Long(3) é diferente de " + result10365 + " <json.getLong('id')>")
chamada antiga: assertEquals("周访", json.getString("name"))
nova chamada: assertEquals("周访", json.getString("name"), "Era esperado valores iguais, mas  '周访' é diferente de " + result10366 + " <json.getString('name')>")
chamada antiga: assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(isValidate)
nova chamada: assertTrue(isValidate, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(JSONValidator.fromUtf8("{\"id\":123}".getBytes(StandardCharsets.UTF_8)).validate())
nova chamada: assertTrue(JSONValidator.fromUtf8("{\"id\":123}".getBytes(StandardCharsets.UTF_8)).validate(), "Era esperado verdadeiro, mas " + result10367 + " <JSONValidator.fromUtf8('{\'id\':123}'.getBytes(StandardCharsets.UTF_8)).validate()> é falso")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10368 + " <v1.getValue()> é diferente de " + result10369 + " <v.getValue()>")
chamada antiga: assertSame(1, result.size())
nova chamada: assertSame(1, result.size(), "Era esperado objetos iguais, mas  1 é diferente de " + result10370 + " <result.size()>")
chamada antiga: assertSame(order.books.get(1), result.get(0))
nova chamada: assertSame(order.books.get(1), result.get(0), "Era esperado objetos iguais, mas " + result10371 + " <order.books.get(1)> é diferente de " + result10372 + " <result.get(0)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10373 + " <result.size()>")
chamada antiga: assertSame(order.books.get(1), result.get(0))
nova chamada: assertSame(order.books.get(1), result.get(0), "Era esperado objetos iguais, mas " + result10374 + " <order.books.get(1)> é diferente de " + result10375 + " <result.get(0)>")
chamada antiga: assertSame(order.books.get(2), result.get(1))
nova chamada: assertSame(order.books.get(2), result.get(1), "Era esperado objetos iguais, mas " + result10376 + " <order.books.get(2)> é diferente de " + result10377 + " <result.get(1)>")
chamada antiga: assertEquals(2, result.size())
nova chamada: assertEquals(2, result.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10378 + " <result.size()>")
chamada antiga: assertSame(order.books.get(0), result.get(0))
nova chamada: assertSame(order.books.get(0), result.get(0), "Era esperado objetos iguais, mas " + result10379 + " <order.books.get(0)> é diferente de " + result10380 + " <result.get(0)>")
chamada antiga: assertSame(order.books.get(1), result.get(1))
nova chamada: assertSame(order.books.get(1), result.get(1), "Era esperado objetos iguais, mas " + result10381 + " <order.books.get(1)> é diferente de " + result10382 + " <result.get(1)>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", str)
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", str, "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + " str")
chamada antiga: assertEquals("{\"beginTime\":\"+152841225111920\"}", new String(JSON.toJSONBytes(rsp3)))
nova chamada: assertEquals("{\"beginTime\":\"+152841225111920\"}", new String(JSON.toJSONBytes(rsp3)), "Era esperado valores iguais, mas  '{\'beginTime\':\'+152841225111920\'}' é diferente de " + " new String(JSON.toJSONBytes(rsp3))")
chamada antiga: assertEquals(-14189155200000L, date.getTime())
nova chamada: assertEquals(-14189155200000L, date.getTime(), "Era esperado valores iguais, mas  -14189155200000L é diferente de " + result10383 + " <date.getTime()>")
chamada antiga: assertEquals(-14189155200000L, m.time.getTime())
nova chamada: assertEquals(-14189155200000L, m.time.getTime(), "Era esperado valores iguais, mas  -14189155200000L é diferente de " + result10384 + " <m.time.getTime()>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result10385 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)))
nova chamada: assertEquals("{\"value\":\"9007199254741990\"}", JSON.toJSONString(new Model(9007199254741990L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741990\'}' é diferente de " + result10386 + " <JSON.toJSONString(new Model(9007199254741990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100L)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result10387 + " <JSON.toJSONString(new Model(100L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741990\"}", JSON.toJSONString(new Model(-9007199254741990L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741990\'}' é diferente de " + result10388 + " <JSON.toJSONString(new Model(-9007199254741990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result10389 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result10390 + " <JSON.toJSONString(new Model(9007199254741992L), BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), BrowserCompatible))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result10391 + " <JSON.toJSONString(new Model(-9007199254741992L), BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), BrowserCompatible))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result10392 + " <JSON.toJSONString(new Model(9007199254740990L), BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), BrowserCompatible))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result10393 + " <JSON.toJSONString(new Model(-9007199254740990L), BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), BrowserCompatible))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result10394 + " <JSON.toJSONString(new Model(100), BrowserCompatible)>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), BrowserCompatible))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100), BrowserCompatible), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result10395 + " <JSON.toJSONString(new Model(-100), BrowserCompatible)>")
chamada antiga: assertEquals(FieldEnum.A, bean.enumField)
nova chamada: assertEquals(FieldEnum.A, bean.enumField, "Era esperado valores iguais, mas  FieldEnum.A é diferente de " + " bean.enumField")
chamada antiga: assertEquals(0.9390308260917664F, user.age)
nova chamada: assertEquals(0.9390308260917664F, user.age, "Era esperado valores iguais, mas  0.9390308260917664F é diferente de " + " user.age")
chamada antiga: assertEquals(8.200000000000001F, user.age)
nova chamada: assertEquals(8.200000000000001F, user.age, "Era esperado valores iguais, mas  8.200000000000001F é diferente de " + " user.age")
chamada antiga: assertEquals(8.200000000000001F, user.age)
nova chamada: assertEquals(8.200000000000001F, user.age, "Era esperado valores iguais, mas  8.200000000000001F é diferente de " + " user.age")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result10396 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result10397 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result10398 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result10399 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result10400 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result10401 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertNotNull(timestamp)
nova chamada: assertNotNull(timestamp, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("张三", user.getName())
nova chamada: assertEquals("张三", user.getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result10402 + " <user.getName()>")
chamada antiga: assertNotNull(user.getBirthday())
nova chamada: assertNotNull(user.getBirthday(), "Era esperado não nulo, mas " + result10403 + " <user.getBirthday()> é nulo")
chamada antiga: assertEquals("张三", user.getName())
nova chamada: assertEquals("张三", user.getName(), "Era esperado valores iguais, mas  '张三' é diferente de " + result10404 + " <user.getName()>")
chamada antiga: assertNotNull(user.getBirthday())
nova chamada: assertNotNull(user.getBirthday(), "Era esperado não nulo, mas " + result10405 + " <user.getBirthday()> é nulo")
chamada antiga: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"9007199254741992\"}", JSON.toJSONString(new Model(9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'9007199254741992\'}' é diferente de " + result10406 + " <JSON.toJSONString(new Model(9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)))
nova chamada: assertEquals("{\"value\":\"-9007199254741992\"}", JSON.toJSONString(new Model(-9007199254741992L)), "Era esperado valores iguais, mas  '{\'value\':\'-9007199254741992\'}' é diferente de " + result10407 + " <JSON.toJSONString(new Model(-9007199254741992L))>")
chamada antiga: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)))
nova chamada: assertEquals("{\"value\":9007199254740990}", JSON.toJSONString(new Model(9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':9007199254740990}' é diferente de " + result10408 + " <JSON.toJSONString(new Model(9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)))
nova chamada: assertEquals("{\"value\":-9007199254740990}", JSON.toJSONString(new Model(-9007199254740990L)), "Era esperado valores iguais, mas  '{\'value\':-9007199254740990}' é diferente de " + result10409 + " <JSON.toJSONString(new Model(-9007199254740990L))>")
chamada antiga: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)))
nova chamada: assertEquals("{\"value\":100}", JSON.toJSONString(new Model(100)), "Era esperado valores iguais, mas  '{\'value\':100}' é diferente de " + result10410 + " <JSON.toJSONString(new Model(100))>")
chamada antiga: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)))
nova chamada: assertEquals("{\"value\":-100}", JSON.toJSONString(new Model(-100)), "Era esperado valores iguais, mas  '{\'value\':-100}' é diferente de " + result10411 + " <JSON.toJSONString(new Model(-100))>")
chamada antiga: assertEquals(d, 0.0D)
nova chamada: assertEquals(d, 0.0D, "Era esperado valores iguais, mas  d é diferente de " + " 0.0D")
chamada antiga: assertEquals(7, result.getModelList().size())
nova chamada: assertEquals(7, result.getModelList().size(), "Era esperado valores iguais, mas  7 é diferente de " + result10412 + " <result.getModelList().size()>")
chamada antiga: assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass())
nova chamada: assertEquals(InteractiveOrderMaterielModel.class, result.getModelList().get(0).getClass(), "Era esperado valores iguais, mas  InteractiveOrderMaterielModel.class é diferente de " + result10413 + " <result.getModelList().get(0).getClass()>")
chamada antiga: assertTrue(data.isSuccess())
nova chamada: assertTrue(data.isSuccess(), "Era esperado verdadeiro, mas " + result10414 + " <data.isSuccess()> é falso")
chamada antiga: assertTrue(data.getContent().getList().size() == 2)
nova chamada: assertTrue(data.getContent().getList().size() == 2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(data.getContent().getList().get(0).getId().equals(10000001L))
nova chamada: assertTrue(data.getContent().getList().get(0).getId().equals(10000001L), "Era esperado verdadeiro, mas " + result10415 + " <data.getContent().getList().get(0).getId().equals(10000001L)> é falso")
chamada antiga: assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass())
nova chamada: assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass(), "Era esperado valores iguais, mas  CouponResult.class é diferente de " + result10416 + " <data.getContent().getList().get(0).getClass()>")
chamada antiga: assertTrue(data.isSuccess())
nova chamada: assertTrue(data.isSuccess(), "Era esperado verdadeiro, mas " + result10417 + " <data.isSuccess()> é falso")
chamada antiga: assertTrue(data.getContent().getList().size() == 2)
nova chamada: assertTrue(data.getContent().getList().size() == 2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"data\":{}}", json)
nova chamada: assertEquals("{\"data\":{}}", json, "Era esperado valores iguais, mas  '{\'data\':{}}' é diferente de " + " json")
chamada antiga: assertEquals("{}", json)
nova chamada: assertEquals("{}", json, "Era esperado valores iguais, mas  '{}' é diferente de " + " json")
chamada antiga: assertEquals("{\"value\":1001.0}", text)
nova chamada: assertEquals("{\"value\":1001.0}", text, "Era esperado valores iguais, mas  '{\'value\':1001.0}' é diferente de " + " text")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10418 + " <user1.getValue()> é diferente de " + result10419 + " <user.getValue()>")
chamada antiga: assertEquals("{'id':0,'name':'xx'}", text)
nova chamada: assertEquals("{'id':0,'name':'xx'}", text, "Era esperado valores iguais, mas  '{'id':0,'name':'xx'}' é diferente de " + " text")
chamada antiga: assertEquals("[{},{'items':[{'id':0,'name':'xx'}]}]", text)
nova chamada: assertEquals("[{},{'items':[{'id':0,'name':'xx'}]}]", text, "Era esperado valores iguais, mas  '[{},{'items':[{'id':0,'name':'xx'}]}]' é diferente de " + " text")
chamada antiga: assertEquals(JSON.toJSONString(jsonObject), JSON.toJSONString(cloneObject))
nova chamada: assertEquals(JSON.toJSONString(jsonObject), JSON.toJSONString(cloneObject), "Era esperado valores iguais, mas " + result10420 + " <JSON.toJSONString(jsonObject)> é diferente de " + result10421 + " <JSON.toJSONString(cloneObject)>")
chamada antiga: assertEquals(HashMap.class, JSON.parseObject(bytes).getInnerMap().getClass())
nova chamada: assertEquals(HashMap.class, JSON.parseObject(bytes).getInnerMap().getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result10422 + " <JSON.parseObject(bytes).getInnerMap().getClass()>")
chamada antiga: assertEquals(LinkedHashMap.class, JSON.parseObject(bytes, Feature.OrderedField).getInnerMap().getClass())
nova chamada: assertEquals(LinkedHashMap.class, JSON.parseObject(bytes, Feature.OrderedField).getInnerMap().getClass(), "Era esperado valores iguais, mas  LinkedHashMap.class é diferente de " + result10423 + " <JSON.parseObject(bytes, Feature.OrderedField).getInnerMap().getClass()>")
chamada antiga: assertEquals(HashMap.class, JSON.parseObject(str).getInnerMap().getClass())
nova chamada: assertEquals(HashMap.class, JSON.parseObject(str).getInnerMap().getClass(), "Era esperado valores iguais, mas  HashMap.class é diferente de " + result10424 + " <JSON.parseObject(str).getInnerMap().getClass()>")
chamada antiga: assertEquals(LinkedHashMap.class, JSON.parseObject(str, Feature.OrderedField).getInnerMap().getClass())
nova chamada: assertEquals(LinkedHashMap.class, JSON.parseObject(str, Feature.OrderedField).getInnerMap().getClass(), "Era esperado valores iguais, mas  LinkedHashMap.class é diferente de " + result10425 + " <JSON.parseObject(str, Feature.OrderedField).getInnerMap().getClass()>")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, Object.class))
nova chamada: assertNull(JSON.parseObject((InputStream) null, Object.class), "Era esperado nulo, mas " + result10426 + " <JSON.parseObject((InputStream) null, Object.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, (Type) Object.class))
nova chamada: assertNull(JSON.parseObject((InputStream) null, (Type) Object.class), "Era esperado nulo, mas " + result10427 + " <JSON.parseObject((InputStream) null, (Type) Object.class)> não é nulo")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("wenshao", bean.name)
nova chamada: assertEquals("wenshao", bean.name, "Era esperado valores iguais, mas  'wenshao' é diferente de " + " bean.name")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("wenshao", bean.name)
nova chamada: assertEquals("wenshao", bean.name, "Era esperado valores iguais, mas  'wenshao' é diferente de " + " bean.name")
chamada antiga: assertEquals("{\"id\":123}", JSON.toJSONString(bean, null, null, new SerializeFilter[0]))
nova chamada: assertEquals("{\"id\":123}", JSON.toJSONString(bean, null, null, new SerializeFilter[0]), "Era esperado valores iguais, mas  '{\'id\':123}' é diferente de " + result10428 + " <JSON.toJSONString(bean, null, null, new SerializeFilter[0])>")
chamada antiga: assertEquals("123", JSON.toJSONString(bean))
nova chamada: assertEquals("123", JSON.toJSONString(bean), "Era esperado valores iguais, mas  '123' é diferente de " + result10429 + " <JSON.toJSONString(bean)>")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10430 + " <jsonArray.toJSONString()>")
chamada antiga: assertNotNull(jsonArray)
nova chamada: assertNotNull(jsonArray, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, jsonArray.size())
nova chamada: assertEquals(3, jsonArray.size(), "Era esperado valores iguais, mas  3 é diferente de " + result10431 + " <jsonArray.size()>")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10432 + " <jsonArray.toJSONString()>")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10433 + " <jsonArray.toJSONString()>")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10434 + " <jsonArray.toJSONString()>")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10435 + " <jsonArray.toJSONString()>")
chamada antiga: assertNull(JSON.parse(null, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parse(null, ParserConfig.global, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10436 + " <JSON.parse(null, ParserConfig.global, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parse("", ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parse("", ParserConfig.global, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10437 + " <JSON.parse('', ParserConfig.global, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10438 + " <jsonArray.toJSONString()>")
chamada antiga: assertNull(JSON.parse(null, ParserConfig.global))
nova chamada: assertNull(JSON.parse(null, ParserConfig.global), "Era esperado nulo, mas " + result10439 + " <JSON.parse(null, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(JSON.parse("", ParserConfig.global))
nova chamada: assertNull(JSON.parse("", ParserConfig.global), "Era esperado nulo, mas " + result10440 + " <JSON.parse('', ParserConfig.global)> não é nulo")
chamada antiga: assertEquals("[1,2,3]", jsonArray.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10441 + " <jsonArray.toJSONString()>")
chamada antiga: assertEquals("[1,2,3]", jsonArray2.toJSONString())
nova chamada: assertEquals("[1,2,3]", jsonArray2.toJSONString(), "Era esperado valores iguais, mas  '[1,2,3]' é diferente de " + result10442 + " <jsonArray2.toJSONString()>")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, (SerializeFilter) null, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, SerializeConfig.global, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, SerializeConfig.global, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(Collections.emptyList(), SerializeConfig.global, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("null", new String(JSON.toJSONBytes(null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("null", new String(JSON.toJSONBytes(null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  'null' é diferente de " + " new String(JSON.toJSONBytes(null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(Collections.emptyList(), JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(Collections.emptyList(), JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], (String) null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], (String) null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], (String) null, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], "", JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], "", JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], '', JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFFAULT_DATE_FORMAT, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)))
nova chamada: assertEquals("[]", new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFFAULT_DATE_FORMAT, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure)), "Era esperado valores iguais, mas  '[]' é diferente de " + " new String(JSON.toJSONBytes(StandardCharsets.UTF_8, Collections.emptyList(), SerializeConfig.global, new SerializeFilter[0], JSON.DEFFAULT_DATE_FORMAT, JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.BrowserSecure))")
chamada antiga: assertEquals("[]", os.toString(StandardCharsets.UTF_8))
nova chamada: assertEquals("[]", os.toString(StandardCharsets.UTF_8), "Era esperado valores iguais, mas  '[]' é diferente de " + result10443 + " <os.toString(StandardCharsets.UTF_8)>")
chamada antiga: assertEquals("[]", os.toString())
nova chamada: assertEquals("[]", os.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result10444 + " <os.toString()>")
chamada antiga: assertEquals("[]", os.toString())
nova chamada: assertEquals("[]", os.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result10445 + " <os.toString()>")
chamada antiga: assertEquals("[]", os.toString(StandardCharsets.UTF_8))
nova chamada: assertEquals("[]", os.toString(StandardCharsets.UTF_8), "Era esperado valores iguais, mas  '[]' é diferente de " + result10446 + " <os.toString(StandardCharsets.UTF_8)>")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(bytes, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(bytes, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10447 + " <JSON.parseObject(bytes, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10448 + " <JSON.parseObject(bytes, 0, bytes.length, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10449 + " <JSON.parseObject((byte[]) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject(new byte[0], StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10450 + " <JSON.parseObject(new byte[0], StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10451 + " <JSON.parseObject((byte[]) null, 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10452 + " <JSON.parseObject(new byte[0], 0, 0, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(chars, chars.length, HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(chars, chars.length, HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10453 + " <JSON.parseObject(chars, chars.length, HashMap.class, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertNull(JSON.parseObject((char[]) null, 0, HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((char[]) null, 0, HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10454 + " <JSON.parseObject((char[]) null, 0, HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(new char[0], 0, HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject(new char[0], 0, HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10455 + " <JSON.parseObject(new char[0], 0, HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10456 + " <JSON.parseObject(str, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertNull(JSON.parseObject((String) null, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10457 + " <JSON.parseObject((String) null, HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject("", HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10458 + " <JSON.parseObject('', HashMap.class, ParserConfig.global, null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(str, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10459 + " <JSON.parseObject(str, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertNull(JSON.parseObject((String) null, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10460 + " <JSON.parseObject((String) null, HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject("", HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10461 + " <JSON.parseObject('', HashMap.class, (ParseProcess) null, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject(null, HashMap.class))
nova chamada: assertNull(JSON.parseObject(null, HashMap.class), "Era esperado nulo, mas " + result10462 + " <JSON.parseObject(null, HashMap.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", HashMap.class))
nova chamada: assertNull(JSON.parseObject("", HashMap.class), "Era esperado nulo, mas " + result10463 + " <JSON.parseObject('', HashMap.class)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10464 + " <JSON.parseObject((String) null, HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject("", HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10465 + " <JSON.parseObject('', HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10466 + " <JSON.parseObject((String) null, (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject("", (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10467 + " <JSON.parseObject('', (Type) HashMap.class, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((String) null, (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((String) null, (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10468 + " <JSON.parseObject((String) null, (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject("", (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject("", (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10469 + " <JSON.parseObject('', (Type) HashMap.class, ParserConfig.global, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, (ParserConfig) null, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, (ParserConfig) null, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType), "Era esperado nulo, mas " + result10470 + " <JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, (ParserConfig) null, (ParseProcess) null, JSON.DEFAULT_PARSER_FEATURE, Feature.ErrorOnNotSupportAutoType)> não é nulo")
chamada antiga: assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, Feature.AllowArbitraryCommas))
nova chamada: assertNull(JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, Feature.AllowArbitraryCommas), "Era esperado nulo, mas " + result10471 + " <JSON.parseObject((InputStream) null, StandardCharsets.UTF_8, HashMap.class, ParserConfig.global, Feature.AllowArbitraryCommas)> não é nulo")
chamada antiga: assertEquals(new HashMap<>(), JSON.parseObject(str, new TypeReference<HashMap<String, Integer>>() {
}.getType(), 0, Feature.ErrorOnNotSupportAutoType))
nova chamada: assertEquals(new HashMap<>(), JSON.parseObject(str, new TypeReference<HashMap<String, Integer>>() {
}.getType(), 0, Feature.ErrorOnNotSupportAutoType), "Era esperado valores iguais, mas  new HashMap() é diferente de " + result10472 + " <JSON.parseObject(str, new TypeReference<HashMap<String, Integer>>() {\n}.getType(), 0, Feature.ErrorOnNotSupportAutoType)>")
chamada antiga: assertEquals("123", JSON.toJSON("123", SerializeConfig.global))
nova chamada: assertEquals("123", JSON.toJSON("123", SerializeConfig.global), "Era esperado valores iguais, mas  '123' é diferente de " + result10473 + " <JSON.toJSON('123', SerializeConfig.global)>")
chamada antiga: assertEquals("[]", buf.toString())
nova chamada: assertEquals("[]", buf.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result10474 + " <buf.toString()>")
chamada antiga: assertNotNull(JSON.getMixInAnnotations(Bean4.class))
nova chamada: assertNotNull(JSON.getMixInAnnotations(Bean4.class), "Era esperado não nulo, mas " + result10475 + " <JSON.getMixInAnnotations(Bean4.class)> é nulo")
chamada antiga: assertEquals("\"{\\\"id\\\":101}\"", JSON.toJSONString(bean, config))
nova chamada: assertEquals("\"{\\\"id\\\":101}\"", JSON.toJSONString(bean, config), "Era esperado valores iguais, mas  '\'{\\\'id\\\':101}\'' é diferente de " + result10476 + " <JSON.toJSONString(bean, config)>")
chamada antiga: assertTrue(text.equals(str1) || text.equals(str2) || text.equals(str3) || text.equals(str4))
nova chamada: assertTrue(text.equals(str1) || text.equals(str2) || text.equals(str3) || text.equals(str4), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertSame(Currency.getInstance("CNY"), currency)
nova chamada: assertSame(Currency.getInstance("CNY"), currency, "Era esperado objetos iguais, mas " + result10477 + " <Currency.getInstance('CNY')> é diferente de " + " currency")
chamada antiga: assertEquals(new JSONObject().hashCode(), new JSONObject().hashCode())
nova chamada: assertEquals(new JSONObject().hashCode(), new JSONObject().hashCode(), "Era esperado valores iguais, mas " + result10478 + " <new JSONObject().hashCode()> é diferente de " + result10479 + " <new JSONObject().hashCode()>")
chamada antiga: assertEquals(JSON.parseObject("{a:1}"), JSON.parseObject("{'a':1}"))
nova chamada: assertEquals(JSON.parseObject("{a:1}"), JSON.parseObject("{'a':1}"), "Era esperado valores iguais, mas " + result10480 + " <JSON.parseObject('{a:1}')> é diferente de " + result10481 + " <JSON.parseObject('{'a':1}')>")
chamada antiga: assertEquals(user.getValue().get(0), actual)
nova chamada: assertEquals(user.getValue().get(0), actual, "Era esperado valores iguais, mas " + result10482 + " <user.getValue().get(0)> é diferente de " + " actual")
chamada antiga: assertEquals(user1.getId(), user.getId())
nova chamada: assertEquals(user1.getId(), user.getId(), "Era esperado valores iguais, mas " + result10483 + " <user1.getId()> é diferente de " + result10484 + " <user.getId()>")
chamada antiga: assertEquals(user1.getName(), user.getName())
nova chamada: assertEquals(user1.getName(), user.getName(), "Era esperado valores iguais, mas " + result10485 + " <user1.getName()> é diferente de " + result10486 + " <user.getName()>")
chamada antiga: assertEquals(BigDecimal.valueOf(10.0), map.get("id"))
nova chamada: assertEquals(BigDecimal.valueOf(10.0), map.get("id"), "Era esperado valores iguais, mas " + result10487 + " <BigDecimal.valueOf(10.0)> é diferente de " + result10488 + " <map.get('id')>")
chamada antiga: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime())
nova chamada: assertEquals(validateCode.getExpireTime(), backModel.getExpireTime(), "Era esperado valores iguais, mas " + result10489 + " <validateCode.getExpireTime()> é diferente de " + result10490 + " <backModel.getExpireTime()>")
chamada antiga: assertNull(backModel.getExpireTime())
nova chamada: assertNull(backModel.getExpireTime(), "Era esperado nulo, mas " + result10491 + " <backModel.getExpireTime()> não é nulo")
chamada antiga: assertTrue(mapKey instanceof Integer)
nova chamada: assertTrue(mapKey instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("{\"oldDate\":1667920430928}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"oldDate\":1667920430928}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'oldDate\':1667920430928}' é diferente de " + result10492 + " <JSON.toJSONString(model)>")
chamada antiga: assertEquals("{\"oldDate\":\"2022-11-08T23:13:50.928000000\"}", string)
nova chamada: assertEquals("{\"oldDate\":\"2022-11-08T23:13:50.928000000\"}", string, "Era esperado valores iguais, mas  '{\'oldDate\':\'2022-11-08T23:13:50.928000000\'}' é diferente de " + " string")
chamada antiga: assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model2))
nova chamada: assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model2), "Era esperado valores iguais, mas  '{\'oldDate\':1668848430000}' é diferente de " + result10493 + " <JSON.toJSONString(model2)>")
chamada antiga: assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model3))
nova chamada: assertEquals("{\"oldDate\":1668848430000}", JSON.toJSONString(model3), "Era esperado valores iguais, mas  '{\'oldDate\':1668848430000}' é diferente de " + result10494 + " <JSON.toJSONString(model3)>")
chamada antiga: assertTrue(object.containsKey(1))
nova chamada: assertTrue(object.containsKey(1), "Era esperado verdadeiro, mas " + result10495 + " <object.containsKey(1)> é falso")
chamada antiga: assertTrue(object.containsKey("1"))
nova chamada: assertTrue(object.containsKey("1"), "Era esperado verdadeiro, mas " + result10496 + " <object.containsKey('1')> é falso")
chamada antiga: assertTrue(object.containsKey('A'))
nova chamada: assertTrue(object.containsKey('A'), "Era esperado verdadeiro, mas " + result10497 + " <object.containsKey('A')> é falso")
chamada antiga: assertTrue(object.containsKey("A"))
nova chamada: assertTrue(object.containsKey("A"), "Era esperado verdadeiro, mas " + result10498 + " <object.containsKey('A')> é falso")
chamada antiga: assertTrue(object.containsKey(true))
nova chamada: assertTrue(object.containsKey(true), "Era esperado verdadeiro, mas " + result10499 + " <object.containsKey(true)> é falso")
chamada antiga: assertTrue(object.containsKey("true"))
nova chamada: assertTrue(object.containsKey("true"), "Era esperado verdadeiro, mas " + result10500 + " <object.containsKey('true')> é falso")
chamada antiga: assertTrue(object.containsKey(uuid))
nova chamada: assertTrue(object.containsKey(uuid), "Era esperado verdadeiro, mas " + result10501 + " <object.containsKey(uuid)> é falso")
chamada antiga: assertTrue(object.containsKey(uuid.toString()))
nova chamada: assertTrue(object.containsKey(uuid.toString()), "Era esperado verdadeiro, mas " + result10502 + " <object.containsKey(uuid.toString())> é falso")
chamada antiga: assertEquals("{}", modelString)
nova chamada: assertEquals("{}", modelString, "Era esperado valores iguais, mas  '{}' é diferente de " + " modelString")
chamada antiga: assertEquals("{\"offset\":1,\"timestamp\":1}", model2String)
nova chamada: assertEquals("{\"offset\":1,\"timestamp\":1}", model2String, "Era esperado valores iguais, mas  '{\'offset\':1,\'timestamp\':1}' é diferente de " + " model2String")
chamada antiga: assertEquals("{\"off\":1,\"timeStamp\":true,\"timestamp\":1}", model3String)
nova chamada: assertEquals("{\"off\":1,\"timeStamp\":true,\"timestamp\":1}", model3String, "Era esperado valores iguais, mas  '{\'off\':1,\'timeStamp\':true,\'timestamp\':1}' é diferente de " + " model3String")
chamada antiga: assertTrue(JSONValidator.from("false").validate())
nova chamada: assertTrue(JSONValidator.from("false").validate(), "Era esperado verdadeiro, mas " + result10503 + " <JSONValidator.from('false').validate()> é falso")
chamada antiga: assertEquals(JSONValidator.Type.Value, JSONValidator.from("false").getType())
nova chamada: assertEquals(JSONValidator.Type.Value, JSONValidator.from("false").getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result10504 + " <JSONValidator.from('false').getType()>")
chamada antiga: assertTrue(JSONValidator.from("999").validate())
nova chamada: assertTrue(JSONValidator.from("999").validate(), "Era esperado verdadeiro, mas " + result10505 + " <JSONValidator.from('999').validate()> é falso")
chamada antiga: assertEquals(JSONValidator.Type.Value, JSONValidator.from("999").getType())
nova chamada: assertEquals(JSONValidator.Type.Value, JSONValidator.from("999").getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Value é diferente de " + result10506 + " <JSONValidator.from('999').getType()>")
chamada antiga: assertEquals("1", object.get(1))
nova chamada: assertEquals("1", object.get(1), "Era esperado valores iguais, mas  '1' é diferente de " + result10507 + " <object.get(1)>")
chamada antiga: assertEquals("true", object.get(true))
nova chamada: assertEquals("true", object.get(true), "Era esperado valores iguais, mas  'true' é diferente de " + result10508 + " <object.get(true)>")
chamada antiga: assertEquals("A", object.get('A'))
nova chamada: assertEquals("A", object.get('A'), "Era esperado valores iguais, mas  'A' é diferente de " + result10509 + " <object.get('A')>")
chamada antiga: assertEquals("[1]", JSON.toJSONString(new short[] { 1 }))
nova chamada: assertEquals("[1]", JSON.toJSONString(new short[] { 1 }), "Era esperado valores iguais, mas  '[1]' é diferente de " + result10510 + " <JSON.toJSONString(new short[] { 1 })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10511 + " <v1.getValue()> é diferente de " + result10512 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertNull(info.ids)
nova chamada: assertNull(info.ids, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"zzz\":true}", json)
nova chamada: assertEquals("{\"zzz\":true}", json, "Era esperado valores iguais, mas  '{\'zzz\':true}' é diferente de " + " json")
chamada antiga: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result)
nova chamada: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result, "Era esperado valores iguais, mas  '{\'a\':{\'x\':\'y2\'},\'b\':{\'x\':\'y2\'}}' é diferente de " + " result")
chamada antiga: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1002}]}", json)
nova chamada: assertEquals("{\"list\":[{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1001},{\"@type\":\"com.alibaba.fastjson.issue_1100.Issue1151$C\",\"id\":1002}]}", json, "Era esperado valores iguais, mas  '{\'list\':[{\'@type\':\'com.alibaba.fastjson.issue_1100.Issue1151$C\',\'id\':1001},{\'@type\':\'com.alibaba.fastjson.issue_1100.Issue1151$C\',\'id\':1002}]}' é diferente de " + " json")
chamada antiga: assertSame(a2.list.get(0).getClass(), C.class)
nova chamada: assertSame(a2.list.get(0).getClass(), C.class, "Era esperado objetos iguais, mas " + result10513 + " <a2.list.get(0).getClass()> é diferente de " + " C.class")
chamada antiga: assertEquals(json, json1)
nova chamada: assertEquals(json, json1, "Era esperado valores iguais, mas  json é diferente de " + " json1")
chamada antiga: assertEquals(result.toString(), jsonObject2.toString())
nova chamada: assertEquals(result.toString(), jsonObject2.toString(), "Era esperado valores iguais, mas " + result10514 + " <result.toString()> é diferente de " + result10515 + " <jsonObject2.toString()>")
chamada antiga: assertEquals(result.toJSONString(), jsonObject2.toString())
nova chamada: assertEquals(result.toJSONString(), jsonObject2.toString(), "Era esperado valores iguais, mas " + result10516 + " <result.toJSONString()> é diferente de " + result10517 + " <jsonObject2.toString()>")
chamada antiga: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model))
nova chamada: assertEquals("{\"REQ_NO\":\"123\"}", JSON.toJSONString(model), "Era esperado valores iguais, mas  '{\'REQ_NO\':\'123\'}' é diferente de " + result10518 + " <JSON.toJSONString(model)>")
chamada antiga: assertNotNull(eval)
nova chamada: assertNotNull(eval, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.123"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.123"), "Era esperado valores iguais, mas  'abc' é diferente de " + result10519 + " <JSONPath.eval(object, '$.123')>")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.345_xiu"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.345_xiu"), "Era esperado valores iguais, mas  'abc' é diferente de " + result10520 + " <JSONPath.eval(object, '$.345_xiu')>")
chamada antiga: assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"))
nova chamada: assertEquals("abc", JSONPath.eval(object, "$.345\\.xiu"), "Era esperado valores iguais, mas  'abc' é diferente de " + result10521 + " <JSONPath.eval(object, '$.345\\.xiu')>")
chamada antiga: assertEquals("zhangshan", object.get("name"))
nova chamada: assertEquals("zhangshan", object.get("name"), "Era esperado valores iguais, mas  'zhangshan' é diferente de " + result10522 + " <object.get('name')>")
chamada antiga: assertEquals("//helo", object.get("test"))
nova chamada: assertEquals("//helo", object.get("test"), "Era esperado valores iguais, mas  '//helo' é diferente de " + result10523 + " <object.get('test')>")
chamada antiga: assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text)
nova chamada: assertEquals("{\"Dimension\":0,\"PassCode\":\"010\",\"BlockPos\":{\"x\":526,\"y\":65,\"z\":554}}", text, "Era esperado valores iguais, mas  '{\'Dimension\':0,\'PassCode\':\'010\',\'BlockPos\':{\'x\':526,\'y\':65,\'z\':554}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"key\":\"\\\"the\\\"content\"}", JSON.toJSONString(data))
nova chamada: assertEquals("{\"key\":\"\\\"the\\\"content\"}", JSON.toJSONString(data), "Era esperado valores iguais, mas  '{\'key\':\'\\\'the\\\'content\'}' é diferente de " + result10524 + " <JSON.toJSONString(data)>")
chamada antiga: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject))
nova chamada: assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject), "Era esperado valores iguais, mas  '{\'a\':{\'x\':\'y2\'},\'b\':{\'x\':\'y2\'}}' é diferente de " + result10525 + " <JSON.toJSONString(jsonObject)>")
chamada antiga: assertNotNull(tb.getShijian())
nova chamada: assertNotNull(tb.getShijian(), "Era esperado não nulo, mas " + result10526 + " <tb.getShijian()> é nulo")
chamada antiga: assertNotNull(tb.getShijian())
nova chamada: assertNotNull(tb.getShijian(), "Era esperado não nulo, mas " + result10527 + " <tb.getShijian()> é nulo")
chamada antiga: assertNull(model.values)
nova chamada: assertNull(model.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(model.values)
nova chamada: assertNull(model.values, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root))
nova chamada: assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root), "Era esperado valores iguais, mas  '{\'models\':[{\'x\':\'y2\'},{\'x\':\'y2\'}]}' é diferente de " + result10528 + " <JSON.toJSONString(root)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10529 + " <list.size()>")
chamada antiga: assertEquals(Model.class, list.get(0).getClass())
nova chamada: assertEquals(Model.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Model.class é diferente de " + result10530 + " <list.get(0).getClass()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10531 + " <list.size()>")
chamada antiga: assertEquals(Model.class, list.get(0).getClass())
nova chamada: assertEquals(Model.class, list.get(0).getClass(), "Era esperado valores iguais, mas  Model.class é diferente de " + result10532 + " <list.get(0).getClass()>")
chamada antiga: assertEquals("{\"__v\":3}", json)
nova chamada: assertEquals("{\"__v\":3}", json, "Era esperado valores iguais, mas  '{\'__v\':3}' é diferente de " + " json")
chamada antiga: assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject))
nova chamada: assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject), "Era esperado valores iguais, mas  '[{\'x\':\'y2\'},{\'x\':\'y2\'}]' é diferente de " + result10533 + " <JSON.toJSONString(jsonObject)>")
chamada antiga: assertNotNull(array)
nova chamada: assertNotNull(array, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text)
nova chamada: assertEquals("{\"remark\":\"支付订单\",\"value\":1}", text, "Era esperado valores iguais, mas  '{\'remark\':\'支付订单\',\'value\':1}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text)
nova chamada: assertEquals("{\"orderType\":{\"remark\":\"结算单\",\"value\":2},\"orderType1\":{\"remark\":\"结算单\",\"value\":2}}", text, "Era esperado valores iguais, mas  '{\'orderType\':{\'remark\':\'结算单\',\'value\':2},\'orderType1\':{\'remark\':\'结算单\',\'value\':2}}' é diferente de " + " text")
chamada antiga: assertArrayEquals(model.value, model1.value)
nova chamada: assertArrayEquals(model.value, model1.value, "Era esperado arrays iguais, mas  model.value é diferente de " + " model1.value")
chamada antiga: assertTrue(List.class.isInstance(ret.getA()))
nova chamada: assertTrue(List.class.isInstance(ret.getA()), "Era esperado verdadeiro, mas " + result10534 + " <List.class.isInstance(ret.getA())> é falso")
chamada antiga: assertEquals(TestB.class.getName(), ret.getA().get(0).getClass().getName())
nova chamada: assertEquals(TestB.class.getName(), ret.getA().get(0).getClass().getName(), "Era esperado valores iguais, mas " + result10535 + " <TestB.class.getName()> é diferente de " + result10536 + " <ret.getA().get(0).getClass().getName()>")
chamada antiga: assertEquals("{\"superType\":{\"value\":{\"id\":101}},\"value\":{\"id\":2001,\"name\":\"BBBB\"}}", json)
nova chamada: assertEquals("{\"superType\":{\"value\":{\"id\":101}},\"value\":{\"id\":2001,\"name\":\"BBBB\"}}", json, "Era esperado valores iguais, mas  '{\'superType\':{\'value\':{\'id\':101}},\'value\':{\'id\':2001,\'name\':\'BBBB\'}}' é diferente de " + " json")
chamada antiga: assertEquals(json, json2)
nova chamada: assertEquals(json, json2, "Era esperado valores iguais, mas  json é diferente de " + " json2")
chamada antiga: assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult))
nova chamada: assertEquals("{\"code\":{\"code\":\"00\",\"msgId\":\"SUCCESS\"}}", JSON.toJSONString(genericResult), "Era esperado valores iguais, mas  '{\'code\':{\'code\':\'00\',\'msgId\':\'SUCCESS\'}}' é diferente de " + result10537 + " <JSON.toJSONString(genericResult)>")
chamada antiga: assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements))
nova chamada: assertEquals("[{\"children\":[{\"children\":[]},{\"children\":[]}]}]", JSONArray.toJSONString(elements), "Era esperado valores iguais, mas  '[{\'children\':[{\'children\':[]},{\'children\':[]}]}]' é diferente de " + result10538 + " <JSONArray.toJSONString(elements)>")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals(123, bean.id)
nova chamada: assertEquals(123, bean.id, "Era esperado valores iguais, mas  123 é diferente de " + " bean.id")
chamada antiga: assertEquals("[eeee, ffff, eeee]", Arrays.toString(details))
nova chamada: assertEquals("[eeee, ffff, eeee]", Arrays.toString(details), "Era esperado valores iguais, mas  '[eeee, ffff, eeee]' é diferente de " + result10539 + " <Arrays.toString(details)>")
chamada antiga: assertNotNull(demo)
nova chamada: assertNotNull(demo, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(demo.getMap())
nova chamada: assertNotNull(demo.getMap(), "Era esperado não nulo, mas " + result10540 + " <demo.getMap()> é nulo")
chamada antiga: assertEquals(100L, demo.getMap().get(100L))
nova chamada: assertEquals(100L, demo.getMap().get(100L), "Era esperado valores iguais, mas  100L é diferente de " + result10541 + " <demo.getMap().get(100L)>")
chamada antiga: assertEquals("{\n" + "\t\"id\":123\n" + "}", JSON.toJSONString(JSONObject.parseObject("{\"id\":123}"), true))
nova chamada: assertEquals("{\n" + "\t\"id\":123\n" + "}", JSON.toJSONString(JSONObject.parseObject("{\"id\":123}"), true), "Era esperado valores iguais, mas  '{\n' + '\t\'id\':123\n' + '}' é diferente de " + result10542 + " <JSON.toJSONString(JSONObject.parseObject('{\'id\':123}'), true)>")
chamada antiga: assertEquals("{\"currency\":\"CNY\"}", str)
nova chamada: assertEquals("{\"currency\":\"CNY\"}", str, "Era esperado valores iguais, mas  '{\'currency\':\'CNY\'}' é diferente de " + " str")
chamada antiga: assertEquals(true, obj.getBoolean("IsSuccess"))
nova chamada: assertEquals(true, obj.getBoolean("IsSuccess"), "Era esperado valores iguais, mas  true é diferente de " + result10543 + " <obj.getBoolean('IsSuccess')>")
chamada antiga: assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"))
nova chamada: assertEquals("1fd1717837744bd2ba967167a6f6f417", obj.getString("Data"), "Era esperado valores iguais, mas  '1fd1717837744bd2ba967167a6f6f417' é diferente de " + result10544 + " <obj.getString('Data')>")
chamada antiga: assertEquals("获取身份令牌成功", obj.getString("Message"))
nova chamada: assertEquals("获取身份令牌成功", obj.getString("Message"), "Era esperado valores iguais, mas  '获取身份令牌成功' é diferente de " + result10545 + " <obj.getString('Message')>")
chamada antiga: assertEquals(true, result.isIsSuccess())
nova chamada: assertEquals(true, result.isIsSuccess(), "Era esperado valores iguais, mas  true é diferente de " + result10546 + " <result.isIsSuccess()>")
chamada antiga: assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData())
nova chamada: assertEquals("1fd1717837744bd2ba967167a6f6f417", result.getData(), "Era esperado valores iguais, mas  '1fd1717837744bd2ba967167a6f6f417' é diferente de " + result10547 + " <result.getData()>")
chamada antiga: assertEquals("获取身份令牌成功", result.getMessage())
nova chamada: assertEquals("获取身份令牌成功", result.getMessage(), "Era esperado valores iguais, mas  '获取身份令牌成功' é diferente de " + result10548 + " <result.getMessage()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10549 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result10550 + " <list.get(0)>")
chamada antiga: assertEquals(2, values.length)
nova chamada: assertEquals(2, values.length, "Era esperado valores iguais, mas  2 é diferente de " + " values.length")
chamada antiga: assertEquals("1", values[0])
nova chamada: assertEquals("1", values[0], "Era esperado valores iguais, mas  '1' é diferente de " + " values[0]")
chamada antiga: assertEquals("2", values[1])
nova chamada: assertEquals("2", values[1], "Era esperado valores iguais, mas  '2' é diferente de " + " values[1]")
chamada antiga: assertEquals(2, array.length)
nova chamada: assertEquals(2, array.length, "Era esperado valores iguais, mas  2 é diferente de " + " array.length")
chamada antiga: assertEquals(1, array[0])
nova chamada: assertEquals(1, array[0], "Era esperado valores iguais, mas  1 é diferente de " + " array[0]")
chamada antiga: assertEquals(2, array[1])
nova chamada: assertEquals(2, array[1], "Era esperado valores iguais, mas  2 é diferente de " + " array[1]")
chamada antiga: assertEquals(array.get(0), list.get(0))
nova chamada: assertEquals(array.get(0), list.get(0), "Era esperado valores iguais, mas " + result10551 + " <array.get(0)> é diferente de " + result10552 + " <list.get(0)>")
chamada antiga: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson.JSON.toJSONString(appResp))
nova chamada: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson.JSON.toJSONString(appResp), "Era esperado valores iguais, mas  '{\'message\':\'成功\',\'status\':\'200\',\'timestamp\':\'2017-03-15 12:13:14\'}' é diferente de " + result10553 + " <com.alibaba.fastjson.JSON.toJSONString(appResp)>")
chamada antiga: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson2.JSON.toJSONString(appResp))
nova chamada: assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", com.alibaba.fastjson2.JSON.toJSONString(appResp), "Era esperado valores iguais, mas  '{\'message\':\'成功\',\'status\':\'200\',\'timestamp\':\'2017-03-15 12:13:14\'}' é diferente de " + result10554 + " <com.alibaba.fastjson2.JSON.toJSONString(appResp)>")
chamada antiga: assertEquals("{\"appResp\":{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}}", jsonObject.toJSONString())
nova chamada: assertEquals("{\"appResp\":{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}}", jsonObject.toJSONString(), "Era esperado valores iguais, mas  '{\'appResp\':{\'message\':\'成功\',\'status\':\'200\',\'timestamp\':\'2017-03-15 12:13:14\'}}' é diferente de " + result10555 + " <jsonObject.toJSONString()>")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10556 + " <v1.getValue()> é diferente de " + result10557 + " <v.getValue()>")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10558 + " <v1.getValue()> é diferente de " + result10559 + " <v.getValue()>")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10560 + " <v1.getValue()> é diferente de " + result10561 + " <v.getValue()>")
chamada antiga: assertEquals(v.getValue(), v1.getValue())
nova chamada: assertEquals(v.getValue(), v1.getValue(), "Era esperado valores iguais, mas " + result10562 + " <v.getValue()> é diferente de " + result10563 + " <v1.getValue()>")
chamada antiga: assertEquals(result.getInfoProfile().getPhones().get(0).getArea(), person.getInfoProfile().getPhones().get(0).getArea())
nova chamada: assertEquals(result.getInfoProfile().getPhones().get(0).getArea(), person.getInfoProfile().getPhones().get(0).getArea(), "Era esperado valores iguais, mas " + result10564 + " <result.getInfoProfile().getPhones().get(0).getArea()> é diferente de " + result10565 + " <person.getInfoProfile().getPhones().get(0).getArea()>")
chamada antiga: assertEquals(result.getInfoProfile().getPhones().get(0).getCountry(), person.getInfoProfile().getPhones().get(0).getCountry())
nova chamada: assertEquals(result.getInfoProfile().getPhones().get(0).getCountry(), person.getInfoProfile().getPhones().get(0).getCountry(), "Era esperado valores iguais, mas " + result10566 + " <result.getInfoProfile().getPhones().get(0).getCountry()> é diferente de " + result10567 + " <person.getInfoProfile().getPhones().get(0).getCountry()>")
chamada antiga: assertEquals(result.getInfoProfile().getPhones().get(0).getExtensionNumber(), person.getInfoProfile().getPhones().get(0).getExtensionNumber())
nova chamada: assertEquals(result.getInfoProfile().getPhones().get(0).getExtensionNumber(), person.getInfoProfile().getPhones().get(0).getExtensionNumber(), "Era esperado valores iguais, mas " + result10568 + " <result.getInfoProfile().getPhones().get(0).getExtensionNumber()> é diferente de " + result10569 + " <person.getInfoProfile().getPhones().get(0).getExtensionNumber()>")
chamada antiga: assertEquals(result.getInfoProfile().getPhones().get(0).getNumber(), person.getInfoProfile().getPhones().get(0).getNumber())
nova chamada: assertEquals(result.getInfoProfile().getPhones().get(0).getNumber(), person.getInfoProfile().getPhones().get(0).getNumber(), "Era esperado valores iguais, mas " + result10570 + " <result.getInfoProfile().getPhones().get(0).getNumber()> é diferente de " + result10571 + " <person.getInfoProfile().getPhones().get(0).getNumber()>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10572 + " <v1.getValue()> é diferente de " + result10573 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals(nanos, 350000000)
nova chamada: assertEquals(nanos, 350000000, "Era esperado valores iguais, mas  nanos é diferente de " + " 350000000")
chamada antiga: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo))
nova chamada: assertEquals("{\"timestamp\":\"2019-09-19 08:49:52.350000000\"}", JSON.toJSONString(pojo), "Era esperado valores iguais, mas  '{\'timestamp\':\'2019-09-19 08:49:52.350000000\'}' é diferente de " + result10574 + " <JSON.toJSONString(pojo)>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result10575 + " <jsonObject.getIntValue('qty')>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty1"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result10576 + " <jsonObject.getIntValue('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getIntValue("qty2"))
nova chamada: assertEquals(10, jsonObject.getIntValue("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result10577 + " <jsonObject.getIntValue('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result10578 + " <jsonObject.getInteger('qty')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty1"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result10579 + " <jsonObject.getInteger('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getInteger("qty2"))
nova chamada: assertEquals(10, jsonObject.getInteger("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result10580 + " <jsonObject.getInteger('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result10581 + " <jsonObject.getLongValue('qty')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty1"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result10582 + " <jsonObject.getLongValue('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getLongValue("qty2"))
nova chamada: assertEquals(10, jsonObject.getLongValue("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result10583 + " <jsonObject.getLongValue('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty"))
nova chamada: assertEquals(10, jsonObject.getLong("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result10584 + " <jsonObject.getLong('qty')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty1"))
nova chamada: assertEquals(10, jsonObject.getLong("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result10585 + " <jsonObject.getLong('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getLong("qty2"))
nova chamada: assertEquals(10, jsonObject.getLong("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result10586 + " <jsonObject.getLong('qty2')>")
chamada antiga: assertEquals(10, jsonObject.getFloatValue("qty"))
nova chamada: assertEquals(10, jsonObject.getFloatValue("qty"), "Era esperado valores iguais, mas  10 é diferente de " + result10587 + " <jsonObject.getFloatValue('qty')>")
chamada antiga: assertEquals(10, jsonObject.getFloatValue("qty1"))
nova chamada: assertEquals(10, jsonObject.getFloatValue("qty1"), "Era esperado valores iguais, mas  10 é diferente de " + result10588 + " <jsonObject.getFloatValue('qty1')>")
chamada antiga: assertEquals(10, jsonObject.getFloatValue("qty2"))
nova chamada: assertEquals(10, jsonObject.getFloatValue("qty2"), "Era esperado valores iguais, mas  10 é diferente de " + result10589 + " <jsonObject.getFloatValue('qty2')>")
chamada antiga: assertEquals(1, a.a1)
nova chamada: assertEquals(1, a.a1, "Era esperado valores iguais, mas  1 é diferente de " + " a.a1")
chamada antiga: assertEquals(2, a.A2)
nova chamada: assertEquals(2, a.A2, "Era esperado valores iguais, mas  2 é diferente de " + " a.A2")
chamada antiga: assertEquals(3, a.a3)
nova chamada: assertEquals(3, a.a3, "Era esperado valores iguais, mas  3 é diferente de " + " a.a3")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(dto.createTime, dto2.createTime)
nova chamada: assertEquals(dto.createTime, dto2.createTime, "Era esperado valores iguais, mas  dto.createTime é diferente de " + " dto2.createTime")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id)
nova chamada: assertEquals(0, JSON.parseObject("{\"id\":false}", VO.class).id, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id\':false}', VO.class).id")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id)
nova chamada: assertEquals(1, JSON.parseObject("{\"id\":true}", VO.class).id, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id\':true}', VO.class).id")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64)
nova chamada: assertEquals(0, JSON.parseObject("{\"id64\":false}", VO.class).id64, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id64\':false}', VO.class).id64")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64)
nova chamada: assertEquals(1, JSON.parseObject("{\"id64\":true}", VO.class).id64, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id64\':true}', VO.class).id64")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16)
nova chamada: assertEquals(0, JSON.parseObject("{\"id16\":false}", VO.class).id16, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id16\':false}', VO.class).id16")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16)
nova chamada: assertEquals(1, JSON.parseObject("{\"id16\":true}", VO.class).id16, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id16\':true}', VO.class).id16")
chamada antiga: assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8)
nova chamada: assertEquals(0, JSON.parseObject("{\"id8\":false}", VO.class).id8, "Era esperado valores iguais, mas  0 é diferente de " + " JSON.parseObject('{\'id8\':false}', VO.class).id8")
chamada antiga: assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8)
nova chamada: assertEquals(1, JSON.parseObject("{\"id8\":true}", VO.class).id8, "Era esperado valores iguais, mas  1 é diferente de " + " JSON.parseObject('{\'id8\':true}', VO.class).id8")
chamada antiga: assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue)
nova chamada: assertEquals(0F, JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue, "Era esperado valores iguais, mas  0F é diferente de " + " JSON.parseObject('{\'floatValue\':false}', VO.class).floatValue")
chamada antiga: assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue)
nova chamada: assertEquals(1F, JSON.parseObject("{\"floatValue\":true}", VO.class).floatValue, "Era esperado valores iguais, mas  1F é diferente de " + " JSON.parseObject('{\'floatValue\':true}', VO.class).floatValue")
chamada antiga: assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue)
nova chamada: assertEquals(0D, JSON.parseObject("{\"doubleValue\":false}", VO.class).doubleValue, "Era esperado valores iguais, mas  0D é diferente de " + " JSON.parseObject('{\'doubleValue\':false}', VO.class).doubleValue")
chamada antiga: assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue)
nova chamada: assertEquals(1D, JSON.parseObject("{\"doubleValue\":true}", VO.class).doubleValue, "Era esperado valores iguais, mas  1D é diferente de " + " JSON.parseObject('{\'doubleValue\':true}', VO.class).doubleValue")
chamada antiga: assertEquals(s, JSON.parseObject(s).toJSONString())
nova chamada: assertEquals(s, JSON.parseObject(s).toJSONString(), "Era esperado valores iguais, mas  s é diferente de " + result10590 + " <JSON.parseObject(s).toJSONString()>")
chamada antiga: assertEquals(s1, JSON.parseObject(s1).toJSONString())
nova chamada: assertEquals(s1, JSON.parseObject(s1).toJSONString(), "Era esperado valores iguais, mas  s1 é diferente de " + result10591 + " <JSON.parseObject(s1).toJSONString()>")
chamada antiga: assertEquals(s2, JSON.parseObject(s2).toJSONString())
nova chamada: assertEquals(s2, JSON.parseObject(s2).toJSONString(), "Era esperado valores iguais, mas  s2 é diferente de " + result10592 + " <JSON.parseObject(s2).toJSONString()>")
chamada antiga: assertEquals(0, bean.q.size())
nova chamada: assertEquals(0, bean.q.size(), "Era esperado valores iguais, mas  0 é diferente de " + result10593 + " <bean.q.size()>")
chamada antiga: assertEquals(bean.type, bean1.type)
nova chamada: assertEquals(bean.type, bean1.type, "Era esperado valores iguais, mas  bean.type é diferente de " + " bean1.type")
chamada antiga: assertEquals(40, max)
nova chamada: assertEquals(40, max, "Era esperado valores iguais, mas  40 é diferente de " + " max")
chamada antiga: assertEquals(30, min)
nova chamada: assertEquals(30, min, "Era esperado valores iguais, mas  30 é diferente de " + " min")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("v", entry.getValue().getValue())
nova chamada: assertEquals("v", entry.getValue().getValue(), "Era esperado valores iguais, mas  'v' é diferente de " + result10594 + " <entry.getValue().getValue()>")
chamada antiga: assertEquals(nestedSet, deserializedNestedSet)
nova chamada: assertEquals(nestedSet, deserializedNestedSet, "Era esperado valores iguais, mas  nestedSet é diferente de " + " deserializedNestedSet")
chamada antiga: assertEquals("aa", vo.value.get("@type"))
nova chamada: assertEquals("aa", vo.value.get("@type"), "Era esperado valores iguais, mas  'aa' é diferente de " + result10595 + " <vo.value.get('@type')>")
chamada antiga: assertEquals("aa", object.get("@type"))
nova chamada: assertEquals("aa", object.get("@type"), "Era esperado valores iguais, mas  'aa' é diferente de " + result10596 + " <object.get('@type')>")
chamada antiga: assertEquals("\"中国\"", str)
nova chamada: assertEquals("\"中国\"", str, "Era esperado valores iguais, mas  '\'中国\'' é diferente de " + " str")
chamada antiga: assertEquals("[{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"name\":\"category\"},\"name\":\"item1\"},{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\"}]", JSON.toJSONString(items, refAfterFilterTest))
nova chamada: assertEquals("[{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"name\":\"category\"},\"name\":\"item1\"},{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\"}]", JSON.toJSONString(items, refAfterFilterTest), "Era esperado valores iguais, mas  '[{\'afterFilterCategory\':{\'name\':\'afterFilterCategory\'},\'afterFilterTwo\':\'two\',\'category\':{\'name\':\'category\'},\'name\':\'item1\'},{\'afterFilterCategory\':{\'name\':\'afterFilterCategory\'},\'afterFilterTwo\':\'two\',\'category\':{\'$ref\':\'$[0].category\'},\'name\':\'item2\'}]' é diferente de " + result10597 + " <JSON.toJSONString(items, refAfterFilterTest)>")
chamada antiga: assertEquals(123, JSON.parseObject("{\"user_Id\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"user_Id\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'user_Id\':123}', VO.class).userId")
chamada antiga: assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"userId\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'userId\':123}', VO.class).userId")
chamada antiga: assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId)
nova chamada: assertEquals(123, JSON.parseObject("{\"user-id\":123}", VO.class).userId, "Era esperado valores iguais, mas  123 é diferente de " + " JSON.parseObject('{\'user-id\':123}', VO.class).userId")
chamada antiga: assertEquals("{\"date\":\"2019-11-01 21:45:12\"}", str2)
nova chamada: assertEquals("{\"date\":\"2019-11-01 21:45:12\"}", str2, "Era esperado valores iguais, mas  '{\'date\':\'2019-11-01 21:45:12\'}' é diferente de " + " str2")
chamada antiga: assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString())
nova chamada: assertEquals("Mon Jan 19 12:05:54 GMT+01:00 1970", model.getDate().toString(), "Era esperado valores iguais, mas  'Mon Jan 19 12:05:54 GMT+01:00 1970' é diferente de " + result10598 + " <model.getDate().toString()>")
chamada antiga: assertTrue(jsonString.contains("因为相信，所以看见。"))
nova chamada: assertTrue(jsonString.contains("因为相信，所以看见。"), "Era esperado verdadeiro, mas " + result10599 + " <jsonString.contains('因为相信，所以看见。')> é falso")
chamada antiga: assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"))
nova chamada: assertEquals("因为相信，所以看见。", modelBack.getMap().get("nanqi"), "Era esperado valores iguais, mas  '因为相信，所以看见。' é diferente de " + result10600 + " <modelBack.getMap().get('nanqi')>")
chamada antiga: assertFalse(lexer.isBlankInput())
nova chamada: assertFalse(lexer.isBlankInput(), "Era esperado falso, mas " + result10601 + " <lexer.isBlankInput()> é verdadeiro ")
chamada antiga: assertFalse(config.isAutoTypeSupport())
nova chamada: assertFalse(config.isAutoTypeSupport(), "Era esperado falso, mas " + result10602 + " <config.isAutoTypeSupport()> é verdadeiro ")
chamada antiga: assertFalse(Feature.isEnabled(features, Feature.SupportAutoType))
nova chamada: assertFalse(Feature.isEnabled(features, Feature.SupportAutoType), "Era esperado falso, mas " + result10603 + " <Feature.isEnabled(features, Feature.SupportAutoType)> é verdadeiro ")
chamada antiga: assertFalse(TypeUtils.isProxy(Object.class))
nova chamada: assertFalse(TypeUtils.isProxy(Object.class), "Era esperado falso, mas " + result10604 + " <TypeUtils.isProxy(Object.class)> é verdadeiro ")
chamada antiga: assertFalse(JSONValidator.from("{\"name\":\"999}").validate())
nova chamada: assertFalse(JSONValidator.from("{\"name\":\"999}").validate(), "Era esperado falso, mas " + result10605 + " <JSONValidator.from('{\'name\':\'999}').validate()> é verdadeiro ")
chamada antiga: assertFalse(cValid)
nova chamada: assertFalse(cValid, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(jsonValid)
nova chamada: assertTrue(jsonValid, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10606 + " <user1.getValue()> é diferente de " + result10607 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10608 + " <user1.getValue()> é diferente de " + result10609 + " <user.getValue()>")
chamada antiga: assertTrue(list.get(0) instanceof TreeMap)
nova chamada: assertTrue(list.get(0) instanceof TreeMap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(1) instanceof HashMap)
nova chamada: assertTrue(list.get(1) instanceof HashMap, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(0) instanceof Integer)
nova chamada: assertTrue(list.get(0) instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(1) instanceof Integer)
nova chamada: assertTrue(list.get(1) instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(2) instanceof String)
nova chamada: assertTrue(list.get(2) instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(0) instanceof Integer)
nova chamada: assertTrue(list.get(0) instanceof Integer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(1) == null)
nova chamada: assertTrue(list.get(1) == null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(2) instanceof String)
nova chamada: assertTrue(list.get(2) instanceof String, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result)
nova chamada: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"\"}"), TestVO.class).result, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result)
nova chamada: assertNull(JSON.toJavaObject(JSON.parseObject("{\"result\":\"null\"}"), TestVO.class).result, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: Assertions.assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result10610 + " <vo.getId()>")
chamada antiga: Assertions.assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result10611 + " <vo.getName()>")
chamada antiga: Assertions.assertEquals(12304, vo.getId())
nova chamada: assertEquals(12304, vo.getId(), "Era esperado valores iguais, mas  12304 é diferente de " + result10612 + " <vo.getId()>")
chamada antiga: Assertions.assertEquals("ljw", vo.getName())
nova chamada: assertEquals("ljw", vo.getName(), "Era esperado valores iguais, mas  'ljw' é diferente de " + result10613 + " <vo.getName()>")
chamada antiga: assertEquals("1", JSON.toJSONString(new BigDecimal("1")))
nova chamada: assertEquals("1", JSON.toJSONString(new BigDecimal("1")), "Era esperado valores iguais, mas  '1' é diferente de " + result10614 + " <JSON.toJSONString(new BigDecimal('1'))>")
chamada antiga: assertEquals("1", JSON.toJSONString(new BigDecimal("1"), SerializerFeature.WriteClassName))
nova chamada: assertEquals("1", JSON.toJSONString(new BigDecimal("1"), SerializerFeature.WriteClassName), "Era esperado valores iguais, mas  '1' é diferente de " + result10615 + " <JSON.toJSONString(new BigDecimal('1'), SerializerFeature.WriteClassName)>")
chamada antiga: assertEquals(JSONValidator.Type.Object, validator.getType())
nova chamada: assertEquals(JSONValidator.Type.Object, validator.getType(), "Era esperado valores iguais, mas  JSONValidator.Type.Object é diferente de " + result10616 + " <validator.getType()>")
chamada antiga: assertTrue(validator.validate())
nova chamada: assertTrue(validator.validate(), "Era esperado verdadeiro, mas " + result10617 + " <validator.validate()> é falso")
chamada antiga: Assertions.assertNotNull(error)
nova chamada: assertNotNull(error, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(bean.date)
nova chamada: assertNotNull(bean.date, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(jsv.validate())
nova chamada: assertFalse(jsv.validate(), "Era esperado falso, mas " + result10618 + " <jsv.validate()> é verdadeiro ")
chamada antiga: assertEquals("{\"value\":1001}", text)
nova chamada: assertEquals("{\"value\":1001}", text, "Era esperado valores iguais, mas  '{\'value\':1001}' é diferente de " + " text")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10619 + " <user1.getValue()> é diferente de " + result10620 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10621 + " <user1.getValue()> é diferente de " + result10622 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10623 + " <user1.getValue()> é diferente de " + result10624 + " <user.getValue()>")
chamada antiga: assertEquals(user1.getValue(), user.getValue())
nova chamada: assertEquals(user1.getValue(), user.getValue(), "Era esperado valores iguais, mas " + result10625 + " <user1.getValue()> é diferente de " + result10626 + " <user.getValue()>")
chamada antiga: assertEquals(123, JSONPath.read("{\"id\":123}", "$.id"))
nova chamada: assertEquals(123, JSONPath.read("{\"id\":123}", "$.id"), "Era esperado valores iguais, mas  123 é diferente de " + result10627 + " <JSONPath.read('{\'id\':123}', '$.id')>")
chamada antiga: assertEquals(jsonStr, JSON.toJSONString(json))
nova chamada: assertEquals(jsonStr, JSON.toJSONString(json), "Era esperado valores iguais, mas  jsonStr é diferente de " + result10628 + " <JSON.toJSONString(json)>")
chamada antiga: assertEquals(Issue369.class, clazz)
nova chamada: assertEquals(Issue369.class, clazz, "Era esperado valores iguais, mas  Issue369.class é diferente de " + " clazz")
chamada antiga: Assertions.assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty))
nova chamada: assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty), "Era esperado valores iguais, mas  '{\'msg\':\'\'}' é diferente de " + result10629 + " <JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty)>")
chamada antiga: assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res)
nova chamada: assertEquals("{\"AGE_B1\":12,\"NAME_V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'AGE_B1\':12,\'NAME_V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age_B1\":12,\"Name_V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age_B1\':12,\'Name_V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age-B1\":12,\"Name-V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age-B1\':12,\'Name-V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age.B1\":12,\"Name.V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age.B1\':12,\'Name.V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age B1\":12,\"Name V1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age B1\':12,\'Name V1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res)
nova chamada: assertEquals("{\"Age_b1\":12,\"Name_v1\":\"z\"}", res, "Era esperado valores iguais, mas  '{\'Age_b1\':12,\'Name_v1\':\'z\'}' é diferente de " + " res")
chamada antiga: assertEquals(4, configModels.size())
nova chamada: assertEquals("Era esperado valores iguais, mas  4 é diferente de " + result10630 + " <configModels.size()>", 4, configModels.size())
chamada antiga: assertEquals("\"2022-06-29 13:12:30.452\"", str)
nova chamada: assertEquals("\"2022-06-29 13:12:30.452\"", str, "Era esperado valores iguais, mas  '\'2022-06-29 13:12:30.452\'' é diferente de " + " str")
chamada antiga: assertNull(bean.date)
nova chamada: assertNull(bean.date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(JSON.parseObject("{\"date\":\"\"}").toJavaObject(Bean.class).date)
nova chamada: assertNull(JSON.parseObject("{\"date\":\"\"}").toJavaObject(Bean.class).date, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("{\"resultCode\":\"200013\",\"message\":\"查询成功\",\"data\":{\"clientName\":\"张三\",\"clientId\":\"3002674743\",\"phoneNumber\":\"13412345678\",\"gender\":2,\"age\":59}}", jsonObject.toJSONString())
nova chamada: assertEquals("{\"resultCode\":\"200013\",\"message\":\"查询成功\",\"data\":{\"clientName\":\"张三\",\"clientId\":\"3002674743\",\"phoneNumber\":\"13412345678\",\"gender\":2,\"age\":59}}", jsonObject.toJSONString(), "Era esperado valores iguais, mas  '{\'resultCode\':\'200013\',\'message\':\'查询成功\',\'data\':{\'clientName\':\'张三\',\'clientId\':\'3002674743\',\'phoneNumber\':\'13412345678\',\'gender\':2,\'age\':59}}' é diferente de " + result10631 + " <jsonObject.toJSONString()>")
chamada antiga: assertEquals("{\"date\":1655097829796}", str)
nova chamada: assertEquals("{\"date\":1655097829796}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829796}' é diferente de " + " str")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result10632 + " <bean.date.getTime()> é diferente de " + result10633 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result10634 + " <bean.date.getTime()> é diferente de " + result10635 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"date\":1655097829796}", str)
nova chamada: assertEquals("{\"date\":1655097829796}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829796}' é diferente de " + " str")
chamada antiga: assertEquals(bean.date.getTime(), bean1.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean1.date.getTime(), "Era esperado valores iguais, mas " + result10636 + " <bean.date.getTime()> é diferente de " + result10637 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(bean.date.getTime(), bean2.date.getTime())
nova chamada: assertEquals(bean.date.getTime(), bean2.date.getTime(), "Era esperado valores iguais, mas " + result10638 + " <bean.date.getTime()> é diferente de " + result10639 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"date\":1655097829}", str)
nova chamada: assertEquals("{\"date\":1655097829}", str, "Era esperado valores iguais, mas  '{\'date\':1655097829}' é diferente de " + " str")
chamada antiga: assertEquals(1655097829000L, bean1.date.getTime())
nova chamada: assertEquals(1655097829000L, bean1.date.getTime(), "Era esperado valores iguais, mas  1655097829000L é diferente de " + result10640 + " <bean1.date.getTime()>")
chamada antiga: assertEquals(1655097829000L, bean2.date.getTime())
nova chamada: assertEquals(1655097829000L, bean2.date.getTime(), "Era esperado valores iguais, mas  1655097829000L é diferente de " + result10641 + " <bean2.date.getTime()>")
chamada antiga: assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str)
nova chamada: assertEquals("{\"parems\":{},\"success\":true,\"wxId\":\"abc\"}", str, "Era esperado valores iguais, mas  '{\'parems\':{},\'success\':true,\'wxId\':\'abc\'}' é diferente de " + " str")
chamada antiga: assertEquals(bo.wxId, bo1.wxId)
nova chamada: assertEquals(bo.wxId, bo1.wxId, "Era esperado valores iguais, mas  bo.wxId é diferente de " + " bo1.wxId")
chamada antiga: assertEquals(bo.isSuccess, bo1.isSuccess)
nova chamada: assertEquals(bo.isSuccess, bo1.isSuccess, "Era esperado valores iguais, mas  bo.isSuccess é diferente de " + " bo1.isSuccess")
chamada antiga: assertEquals(bo.parems, bo1.parems)
nova chamada: assertEquals(bo.parems, bo1.parems, "Era esperado valores iguais, mas  bo.parems é diferente de " + " bo1.parems")
chamada antiga: assertEquals(JSONObject.class, JSON.parse(str).getClass())
nova chamada: assertEquals(JSONObject.class, JSON.parse(str).getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result10642 + " <JSON.parse(str).getClass()>")
chamada antiga: assertNotNull(bean)
nova chamada: assertNotNull(bean, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(exception.getMessage())
nova chamada: assertNull(exception.getMessage(), "Era esperado nulo, mas " + result10643 + " <exception.getMessage()> não é nulo")
chamada antiga: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }))
nova chamada: assertEquals("[true]", JSON.toJSONString(new boolean[] { true }), "Era esperado valores iguais, mas  '[true]' é diferente de " + result10644 + " <JSON.toJSONString(new boolean[] { true })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10645 + " <v1.getValue()> é diferente de " + result10646 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10647 + " <v1.getValue()> é diferente de " + result10648 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals(90.82195113f, JSON.parseObject("{\"value\":90.82195113}", Model.class).value)
nova chamada: assertEquals(90.82195113f, JSON.parseObject("{\"value\":90.82195113}", Model.class).value, "Era esperado valores iguais, mas  90.82195113f é diferente de " + " JSON.parseObject('{\'value\':90.82195113}', Model.class).value")
chamada antiga: assertEquals(new String(bytes), new String(bytes2))
nova chamada: assertEquals(new String(bytes), new String(bytes2), "Era esperado valores iguais, mas  new String(bytes) é diferente de " + " new String(bytes2)")
chamada antiga: assertEquals(bytes.length, bytes2.length)
nova chamada: assertEquals(bytes.length, bytes2.length, "Era esperado valores iguais, mas  bytes.length é diferente de " + " bytes2.length")
chamada antiga: assertEquals("test", issues.getName())
nova chamada: assertEquals("test", issues.getName(), "Era esperado valores iguais, mas  'test' é diferente de " + result10649 + " <issues.getName()>")
chamada antiga: assertEquals(20, issues.getAge().intValue())
nova chamada: assertEquals(20, issues.getAge().intValue(), "Era esperado valores iguais, mas  20 é diferente de " + result10650 + " <issues.getAge().intValue()>")
chamada antiga: assertEquals("{\"age\":20}", JSON.toJSONString(issues))
nova chamada: assertEquals("{\"age\":20}", JSON.toJSONString(issues), "Era esperado valores iguais, mas  '{\'age\':20}' é diferente de " + result10651 + " <JSON.toJSONString(issues)>")
chamada antiga: assertEquals("\"2018-08-03T10:58:39.604+08:00\"", json)
nova chamada: assertEquals("\"2018-08-03T10:58:39.604+08:00\"", json, "Era esperado valores iguais, mas  '\'2018-08-03T10:58:39.604+08:00\'' é diferente de " + " json")
chamada antiga: assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString())
nova chamada: assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString(), "Era esperado valores iguais, mas  '{\'a\':{\'b\':{\'c\':\'2018-04\',\'d\':[123]}}}' é diferente de " + result10652 + " <jsonObject.toString()>")
chamada antiga: assertEquals("floorname2", a.name)
nova chamada: assertEquals("floorname2", a.name, "Era esperado valores iguais, mas  'floorname2' é diferente de " + " a.name")
chamada antiga: assertEquals("x123", a.templateId)
nova chamada: assertEquals("x123", a.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " a.templateId")
chamada antiga: assertEquals("floorname2", a.name)
nova chamada: assertEquals("floorname2", a.name, "Era esperado valores iguais, mas  'floorname2' é diferente de " + " a.name")
chamada antiga: assertEquals("x123", a.templateId)
nova chamada: assertEquals("x123", a.templateId, "Era esperado valores iguais, mas  'x123' é diferente de " + " a.templateId")
chamada antiga: assertNotNull(paramRequest)
nova chamada: assertNotNull(paramRequest, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, v0.orderStatus)
nova chamada: assertEquals(1, v0.orderStatus, "Era esperado valores iguais, mas  1 é diferente de " + " v0.orderStatus")
chamada antiga: assertEquals(0, v0.oldStatus)
nova chamada: assertEquals(0, v0.oldStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.oldStatus")
chamada antiga: assertEquals(0, v0.oldOrderStatus)
nova chamada: assertEquals(0, v0.oldOrderStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.oldOrderStatus")
chamada antiga: assertEquals(0, v0.orderStatus)
nova chamada: assertEquals(0, v0.orderStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.orderStatus")
chamada antiga: assertEquals(1, v0.oldStatus)
nova chamada: assertEquals(1, v0.oldStatus, "Era esperado valores iguais, mas  1 é diferente de " + " v0.oldStatus")
chamada antiga: assertEquals(0, v0.oldOrderStatus)
nova chamada: assertEquals(0, v0.oldOrderStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.oldOrderStatus")
chamada antiga: assertEquals(0, v0.orderStatus)
nova chamada: assertEquals(0, v0.orderStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.orderStatus")
chamada antiga: assertEquals(0, v0.oldStatus)
nova chamada: assertEquals(0, v0.oldStatus, "Era esperado valores iguais, mas  0 é diferente de " + " v0.oldStatus")
chamada antiga: assertEquals(1, v0.oldOrderStatus)
nova chamada: assertEquals(1, v0.oldOrderStatus, "Era esperado valores iguais, mas  1 é diferente de " + " v0.oldOrderStatus")
chamada antiga: assertEquals(vo.value, vo1.value)
nova chamada: assertEquals(vo.value, vo1.value, "Era esperado valores iguais, mas  vo.value é diferente de " + " vo1.value")
chamada antiga: assertEquals("{\"userId\":123}", str)
nova chamada: assertEquals("{\"userId\":123}", str, "Era esperado valores iguais, mas  '{\'userId\':123}' é diferente de " + " str")
chamada antiga: assertEquals(4, fieldInfoList.size())
nova chamada: assertEquals(4, fieldInfoList.size(), "Era esperado valores iguais, mas  4 é diferente de " + result10653 + " <fieldInfoList.size()>")
chamada antiga: assertEquals(1, fieldInfoList.size())
nova chamada: assertEquals(1, fieldInfoList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10654 + " <fieldInfoList.size()>")
chamada antiga: assertEquals(JSONObject.class, JSON.parse(text, config).getClass())
nova chamada: assertEquals(JSONObject.class, JSON.parse(text, config).getClass(), "Era esperado valores iguais, mas  JSONObject.class é diferente de " + result10655 + " <JSON.parse(text, config).getClass()>")
chamada antiga: assertNull(TypeUtils.cast("null", HashMap.class, ParserConfig.global))
nova chamada: assertNull(TypeUtils.cast("null", HashMap.class, ParserConfig.global), "Era esperado nulo, mas " + result10656 + " <TypeUtils.cast('null', HashMap.class, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(TypeUtils.cast("null", (Type) HashMap.class, ParserConfig.global))
nova chamada: assertNull(TypeUtils.cast("null", (Type) HashMap.class, ParserConfig.global), "Era esperado nulo, mas " + result10657 + " <TypeUtils.cast('null', (Type) HashMap.class, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(TypeUtils.cast("NULL", (Type) HashMap.class, ParserConfig.global))
nova chamada: assertNull(TypeUtils.cast("NULL", (Type) HashMap.class, ParserConfig.global), "Era esperado nulo, mas " + result10658 + " <TypeUtils.cast('NULL', (Type) HashMap.class, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(TypeUtils.cast("", (Type) HashMap.class, ParserConfig.global))
nova chamada: assertNull(TypeUtils.cast("", (Type) HashMap.class, ParserConfig.global), "Era esperado nulo, mas " + result10659 + " <TypeUtils.cast('', (Type) HashMap.class, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(TypeUtils.cast(null, (Type) HashMap.class, ParserConfig.global))
nova chamada: assertNull(TypeUtils.cast(null, (Type) HashMap.class, ParserConfig.global), "Era esperado nulo, mas " + result10660 + " <TypeUtils.cast(null, (Type) HashMap.class, ParserConfig.global)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToChar(null))
nova chamada: assertNull(TypeUtils.castToChar(null), "Era esperado nulo, mas " + result10661 + " <TypeUtils.castToChar(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToShort(null))
nova chamada: assertNull(TypeUtils.castToShort(null), "Era esperado nulo, mas " + result10662 + " <TypeUtils.castToShort(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToByte(null))
nova chamada: assertNull(TypeUtils.castToByte(null), "Era esperado nulo, mas " + result10663 + " <TypeUtils.castToByte(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToFloat(null))
nova chamada: assertNull(TypeUtils.castToFloat(null), "Era esperado nulo, mas " + result10664 + " <TypeUtils.castToFloat(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToDate(null))
nova chamada: assertNull(TypeUtils.castToDate(null), "Era esperado nulo, mas " + result10665 + " <TypeUtils.castToDate(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.getGenericParamType(null))
nova chamada: assertNull(TypeUtils.getGenericParamType(null), "Era esperado nulo, mas " + result10666 + " <TypeUtils.getGenericParamType(null)> não é nulo")
chamada antiga: assertEquals('A', TypeUtils.castToChar('A'))
nova chamada: assertEquals('A', TypeUtils.castToChar('A'), "Era esperado valores iguais, mas  'A' é diferente de " + result10667 + " <TypeUtils.castToChar('A')>")
chamada antiga: assertEquals('A', TypeUtils.castToChar("A"))
nova chamada: assertEquals('A', TypeUtils.castToChar("A"), "Era esperado valores iguais, mas  'A' é diferente de " + result10668 + " <TypeUtils.castToChar('A')>")
chamada antiga: assertNull(TypeUtils.castToShort(null))
nova chamada: assertNull(TypeUtils.castToShort(null), "Era esperado nulo, mas " + result10669 + " <TypeUtils.castToShort(null)> não é nulo")
chamada antiga: assertEquals((short) 1, TypeUtils.castToShort(1))
nova chamada: assertEquals((short) 1, TypeUtils.castToShort(1), "Era esperado valores iguais, mas  (short) 1 é diferente de " + result10670 + " <TypeUtils.castToShort(1)>")
chamada antiga: assertNull(TypeUtils.castToInt(null))
nova chamada: assertNull(TypeUtils.castToInt(null), "Era esperado nulo, mas " + result10671 + " <TypeUtils.castToInt(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToBoolean(null))
nova chamada: assertNull(TypeUtils.castToBoolean(null), "Era esperado nulo, mas " + result10672 + " <TypeUtils.castToBoolean(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToLong(null))
nova chamada: assertNull(TypeUtils.castToLong(null), "Era esperado nulo, mas " + result10673 + " <TypeUtils.castToLong(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToDouble(null))
nova chamada: assertNull(TypeUtils.castToDouble(null), "Era esperado nulo, mas " + result10674 + " <TypeUtils.castToDouble(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToBigDecimal(null))
nova chamada: assertNull(TypeUtils.castToBigDecimal(null), "Era esperado nulo, mas " + result10675 + " <TypeUtils.castToBigDecimal(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToTimestamp(null))
nova chamada: assertNull(TypeUtils.castToTimestamp(null), "Era esperado nulo, mas " + result10676 + " <TypeUtils.castToTimestamp(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToSqlDate(null))
nova chamada: assertNull(TypeUtils.castToSqlDate(null), "Era esperado nulo, mas " + result10677 + " <TypeUtils.castToSqlDate(null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToJavaBean(null, null))
nova chamada: assertNull(TypeUtils.castToJavaBean(null, null), "Era esperado nulo, mas " + result10678 + " <TypeUtils.castToJavaBean(null, null)> não é nulo")
chamada antiga: assertNull(TypeUtils.castToString(null))
nova chamada: assertNull(TypeUtils.castToString(null), "Era esperado nulo, mas " + result10679 + " <TypeUtils.castToString(null)> não é nulo")
chamada antiga: assertEquals("123", TypeUtils.castToString("123"))
nova chamada: assertEquals("123", TypeUtils.castToString("123"), "Era esperado valores iguais, mas  '123' é diferente de " + result10680 + " <TypeUtils.castToString('123')>")
chamada antiga: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("abc"))
nova chamada: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("abc"), "Era esperado valores iguais, mas  -1792535898324117685L é diferente de " + result10681 + " <TypeUtils.fnv1a_64_lower('abc')>")
chamada antiga: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("ABC"))
nova chamada: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64_lower("ABC"), "Era esperado valores iguais, mas  -1792535898324117685L é diferente de " + result10682 + " <TypeUtils.fnv1a_64_lower('ABC')>")
chamada antiga: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64("abc"))
nova chamada: assertEquals(-1792535898324117685L, TypeUtils.fnv1a_64("abc"), "Era esperado valores iguais, mas  -1792535898324117685L é diferente de " + result10683 + " <TypeUtils.fnv1a_64('abc')>")
chamada antiga: assertEquals(0, TypeUtils.byteValue(null))
nova chamada: assertEquals(0, TypeUtils.byteValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result10684 + " <TypeUtils.byteValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.shortValue(null))
nova chamada: assertEquals(0, TypeUtils.shortValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result10685 + " <TypeUtils.shortValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.intValue(null))
nova chamada: assertEquals(0, TypeUtils.intValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result10686 + " <TypeUtils.intValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.longValue(null))
nova chamada: assertEquals(0, TypeUtils.longValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result10687 + " <TypeUtils.longValue(null)>")
chamada antiga: assertEquals(0, TypeUtils.longExtractValue(null))
nova chamada: assertEquals(0, TypeUtils.longExtractValue(null), "Era esperado valores iguais, mas  0 é diferente de " + result10688 + " <TypeUtils.longExtractValue(null)>")
chamada antiga: assertEquals(decimal.byteValue(), TypeUtils.byteValue(decimal))
nova chamada: assertEquals(decimal.byteValue(), TypeUtils.byteValue(decimal), "Era esperado valores iguais, mas " + result10689 + " <decimal.byteValue()> é diferente de " + result10690 + " <TypeUtils.byteValue(decimal)>")
chamada antiga: assertEquals(decimal.shortValue(), TypeUtils.shortValue(decimal))
nova chamada: assertEquals(decimal.shortValue(), TypeUtils.shortValue(decimal), "Era esperado valores iguais, mas " + result10691 + " <decimal.shortValue()> é diferente de " + result10692 + " <TypeUtils.shortValue(decimal)>")
chamada antiga: assertEquals(decimal.intValue(), TypeUtils.intValue(decimal))
nova chamada: assertEquals(decimal.intValue(), TypeUtils.intValue(decimal), "Era esperado valores iguais, mas " + result10693 + " <decimal.intValue()> é diferente de " + result10694 + " <TypeUtils.intValue(decimal)>")
chamada antiga: assertEquals(decimal.longValue(), TypeUtils.longValue(decimal))
nova chamada: assertEquals(decimal.longValue(), TypeUtils.longValue(decimal), "Era esperado valores iguais, mas " + result10695 + " <decimal.longValue()> é diferente de " + result10696 + " <TypeUtils.longValue(decimal)>")
chamada antiga: assertEquals(decimal.longValue(), TypeUtils.longExtractValue(decimal))
nova chamada: assertEquals(decimal.longValue(), TypeUtils.longExtractValue(decimal), "Era esperado valores iguais, mas " + result10697 + " <decimal.longValue()> é diferente de " + result10698 + " <TypeUtils.longExtractValue(decimal)>")
chamada antiga: assertNull(TypeUtils.getClass(null))
nova chamada: assertNull(TypeUtils.getClass(null), "Era esperado nulo, mas " + result10699 + " <TypeUtils.getClass(null)> não é nulo")
chamada antiga: assertEquals(Bean.class, TypeUtils.getClass(Bean.class))
nova chamada: assertEquals(Bean.class, TypeUtils.getClass(Bean.class), "Era esperado valores iguais, mas  Bean.class é diferente de " + result10700 + " <TypeUtils.getClass(Bean.class)>")
chamada antiga: assertNull(TypeUtils.getAnnotation(Bean.class.getMethod("getId"), JSONField.class))
nova chamada: assertNull(TypeUtils.getAnnotation(Bean.class.getMethod("getId"), JSONField.class), "Era esperado nulo, mas " + result10701 + " <TypeUtils.getAnnotation(Bean.class.getMethod('getId'), JSONField.class)> não é nulo")
chamada antiga: assertNull(TypeUtils.getAnnotation(Bean.class.getField("id"), JSONField.class))
nova chamada: assertNull(TypeUtils.getAnnotation(Bean.class.getField("id"), JSONField.class), "Era esperado nulo, mas " + result10702 + " <TypeUtils.getAnnotation(Bean.class.getField('id'), JSONField.class)> não é nulo")
chamada antiga: assertNull(TypeUtils.getAnnotation(Bean.class, JSONField.class))
nova chamada: assertNull(TypeUtils.getAnnotation(Bean.class, JSONField.class), "Era esperado nulo, mas " + result10703 + " <TypeUtils.getAnnotation(Bean.class, JSONField.class)> não é nulo")
chamada antiga: assertEquals(1, fieldInfoList.size())
nova chamada: assertEquals(1, fieldInfoList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result10704 + " <fieldInfoList.size()>")
chamada antiga: assertEquals("id", fieldInfoList.get(0).name)
nova chamada: assertEquals("id", fieldInfoList.get(0).name, "Era esperado valores iguais, mas  'id' é diferente de " + " fieldInfoList.get(0).name")
chamada antiga: assertEquals(2, fieldInfoList.size())
nova chamada: assertEquals(2, fieldInfoList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result10705 + " <fieldInfoList.size()>")
chamada antiga: assertEquals("ID", fieldInfoList.get(0).name)
nova chamada: assertEquals("ID", fieldInfoList.get(0).name, "Era esperado valores iguais, mas  'ID' é diferente de " + " fieldInfoList.get(0).name")
chamada antiga: assertEquals("values", fieldInfoList.get(1).name)
nova chamada: assertEquals("values", fieldInfoList.get(1).name, "Era esperado valores iguais, mas  'values' é diferente de " + " fieldInfoList.get(1).name")
chamada antiga: assertEquals(0, TypeUtils.getKoltinConstructorParameters(Bean1.class).length)
nova chamada: assertEquals(0, TypeUtils.getKoltinConstructorParameters(Bean1.class).length, "Era esperado valores iguais, mas  0 é diferente de " + " TypeUtils.getKoltinConstructorParameters(Bean1.class).length")
chamada antiga: assertEquals(0, TypeUtils.getParameterAnnotations(Bean1.class.getConstructor()).length)
nova chamada: assertEquals(0, TypeUtils.getParameterAnnotations(Bean1.class.getConstructor()).length, "Era esperado valores iguais, mas  0 é diferente de " + " TypeUtils.getParameterAnnotations(Bean1.class.getConstructor()).length")
chamada antiga: assertNotNull(TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(Integer.class)))
nova chamada: assertNotNull(TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(Integer.class)), "Era esperado não nulo, mas " + result10706 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(Integer.class))> é nulo")
chamada antiga: assertEquals(int[][].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int[].class)))
nova chamada: assertEquals(int[][].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int[].class)), "Era esperado valores iguais, mas  int[][].class é diferente de " + result10707 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int[].class))>")
chamada antiga: assertEquals(byte[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(byte.class)))
nova chamada: assertEquals(byte[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(byte.class)), "Era esperado valores iguais, mas  byte[].class é diferente de " + result10708 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(byte.class))>")
chamada antiga: assertEquals(short[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(short.class)))
nova chamada: assertEquals(short[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(short.class)), "Era esperado valores iguais, mas  short[].class é diferente de " + result10709 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(short.class))>")
chamada antiga: assertEquals(int[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int.class)))
nova chamada: assertEquals(int[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int.class)), "Era esperado valores iguais, mas  int[].class é diferente de " + result10710 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(int.class))>")
chamada antiga: assertEquals(long[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(long.class)))
nova chamada: assertEquals(long[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(long.class)), "Era esperado valores iguais, mas  long[].class é diferente de " + result10711 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(long.class))>")
chamada antiga: assertEquals(float[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(float.class)))
nova chamada: assertEquals(float[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(float.class)), "Era esperado valores iguais, mas  float[].class é diferente de " + result10712 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(float.class))>")
chamada antiga: assertEquals(double[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(double.class)))
nova chamada: assertEquals(double[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(double.class)), "Era esperado valores iguais, mas  double[].class é diferente de " + result10713 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(double.class))>")
chamada antiga: assertEquals(char[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(char.class)))
nova chamada: assertEquals(char[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(char.class)), "Era esperado valores iguais, mas  char[].class é diferente de " + result10714 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(char.class))>")
chamada antiga: assertEquals(boolean[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(boolean.class)))
nova chamada: assertEquals(boolean[].class, TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(boolean.class)), "Era esperado valores iguais, mas  boolean[].class é diferente de " + result10715 + " <TypeUtils.checkPrimitiveArray(new BeanUtils.GenericArrayTypeImpl(boolean.class))>")
chamada antiga: assertNotNull(element)
nova chamada: assertNotNull(element, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(element)
nova chamada: assertNotNull(element, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, IOUtils.stringSize(12))
nova chamada: assertEquals(2, IOUtils.stringSize(12), "Era esperado valores iguais, mas  2 é diferente de " + result10716 + " <IOUtils.stringSize(12)>")
chamada antiga: assertEquals(2, IOUtils.stringSize(12L))
nova chamada: assertEquals(2, IOUtils.stringSize(12L), "Era esperado valores iguais, mas  2 é diferente de " + result10717 + " <IOUtils.stringSize(12L)>")
chamada antiga: assertEquals("12", new String(chars))
nova chamada: assertEquals("12", new String(chars), "Era esperado valores iguais, mas  '12' é diferente de " + " new String(chars)")
chamada antiga: assertEquals("12", new String(chars))
nova chamada: assertEquals("12", new String(chars), "Era esperado valores iguais, mas  '12' é diferente de " + " new String(chars)")
chamada antiga: assertEquals("12", new String(chars))
nova chamada: assertEquals("12", new String(chars), "Era esperado valores iguais, mas  '12' é diferente de " + " new String(chars)")
chamada antiga: assertEquals("[1]", JSON.toJSONString(new int[] { 1 }))
nova chamada: assertEquals("[1]", JSON.toJSONString(new int[] { 1 }), "Era esperado valores iguais, mas  '[1]' é diferente de " + result10718 + " <JSON.toJSONString(new int[] { 1 })>")
chamada antiga: assertEquals("{\"value\":null}", text)
nova chamada: assertEquals("{\"value\":null}", text, "Era esperado valores iguais, mas  '{\'value\':null}' é diferente de " + " text")
chamada antiga: assertEquals(v1.getValue(), v.getValue())
nova chamada: assertEquals(v1.getValue(), v.getValue(), "Era esperado valores iguais, mas " + result10719 + " <v1.getValue()> é diferente de " + result10720 + " <v.getValue()>")
chamada antiga: assertEquals("{\"value\":[]}", text)
nova chamada: assertEquals("{\"value\":[]}", text, "Era esperado valores iguais, mas  '{\'value\':[]}' é diferente de " + " text")
chamada antiga: assertEquals("{\"value\":true}", text)
nova chamada: assertEquals("{\"value\":true}", text, "Era esperado valores iguais, mas  '{\'value\':true}' é diferente de " + " text")
chamada antiga: assertEquals(vo.getValue(), vo1.getValue())
nova chamada: assertEquals(vo.getValue(), vo1.getValue(), "Era esperado valores iguais, mas " + result10721 + " <vo.getValue()> é diferente de " + result10722 + " <vo1.getValue()>")
chamada antiga: assertEquals("{\"id\":1001,\"value\":1002}", text)
nova chamada: assertEquals("{\"id\":1001,\"value\":1002}", text, "Era esperado valores iguais, mas  '{\'id\':1001,\'value\':1002}' é diferente de " + " text")
chamada antiga: assertEquals(b.getId(), b1.getId())
nova chamada: assertEquals(b.getId(), b1.getId(), "Era esperado valores iguais, mas " + result10723 + " <b.getId()> é diferente de " + result10724 + " <b1.getId()>")
chamada antiga: assertEquals(b.getValue(), b1.getValue())
nova chamada: assertEquals(b.getValue(), b1.getValue(), "Era esperado valores iguais, mas " + result10725 + " <b.getValue()> é diferente de " + result10726 + " <b1.getValue()>")
chamada antiga: assertEquals(fastJsonConfig.isJSONB(), true)
nova chamada: assertEquals(fastJsonConfig.isJSONB(), true, "Era esperado valores iguais, mas " + result10727 + " <fastJsonConfig.isJSONB()> é diferente de " + " true")
chamada antiga: assertEquals(fastJsonConfig.isWriteContentLength(), false)
nova chamada: assertEquals(fastJsonConfig.isWriteContentLength(), false, "Era esperado valores iguais, mas " + result10728 + " <fastJsonConfig.isWriteContentLength()> é diferente de " + " false")
chamada antiga: assertEquals(fastJsonConfig.getCharset().name(), "UTF-8")
nova chamada: assertEquals(fastJsonConfig.getCharset().name(), "UTF-8", "Era esperado valores iguais, mas " + result10729 + " <fastJsonConfig.getCharset().name()> é diferente de " + " 'UTF-8'")
chamada antiga: assertEquals(fastJsonConfig.getDateFormat(), "yyyyMMdd")
nova chamada: assertEquals(fastJsonConfig.getDateFormat(), "yyyyMMdd", "Era esperado valores iguais, mas " + result10730 + " <fastJsonConfig.getDateFormat()> é diferente de " + " 'yyyyMMdd'")
chamada antiga: assertEquals(fastJsonConfig.getReaderFeatures()[0], JSONReader.Feature.FieldBased)
nova chamada: assertEquals(fastJsonConfig.getReaderFeatures()[0], JSONReader.Feature.FieldBased, "Era esperado valores iguais, mas  fastJsonConfig.getReaderFeatures()[0] é diferente de " + " JSONReader.Feature.FieldBased")
chamada antiga: assertEquals(fastJsonConfig.getWriterFeatures()[0], JSONWriter.Feature.FieldBased)
nova chamada: assertEquals(fastJsonConfig.getWriterFeatures()[0], JSONWriter.Feature.FieldBased, "Era esperado valores iguais, mas  fastJsonConfig.getWriterFeatures()[0] é diferente de " + " JSONWriter.Feature.FieldBased")
chamada antiga: assertEquals(fastJsonConfig.getReaderFilters().length > 0, true)
nova chamada: assertEquals(fastJsonConfig.getReaderFilters().length > 0, true, "Era esperado valores iguais, mas  fastJsonConfig.getReaderFilters().length  0 é diferente de " + " true")
chamada antiga: assertEquals(fastJsonConfig.getWriterFilters().length > 0, true)
nova chamada: assertEquals(fastJsonConfig.getWriterFilters().length > 0, true, "Era esperado valores iguais, mas  fastJsonConfig.getWriterFilters().length  0 é diferente de " + " true")
chamada antiga: assertEquals(fastJsonConfig.getSymbolTable().size() > 0, true)
nova chamada: assertEquals(fastJsonConfig.getSymbolTable().size() > 0, true, "Era esperado valores iguais, mas  fastJsonConfig.getSymbolTable().size()  0 é diferente de " + " true")
chamada antiga: assertEquals("999", consumer.slice.toStringAscii())
nova chamada: assertEquals("999", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '999' é diferente de " + result10731 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("999\"a", consumer.slice.toStringAscii())
nova chamada: assertEquals("999\"a", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '999\'a' é diferente de " + result10732 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8))
nova chamada: assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8), "Era esperado valores iguais, mas  '阿里巴巴' é diferente de " + result10733 + " <consumer.slice.toString(StandardCharsets.UTF_8)>")
chamada antiga: assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8))
nova chamada: assertEquals("阿里巴巴", consumer.slice.toString(StandardCharsets.UTF_8), "Era esperado valores iguais, mas  '阿里巴巴' é diferente de " + result10734 + " <consumer.slice.toString(StandardCharsets.UTF_8)>")
chamada antiga: assertEquals("999", consumer.slice.toStringAscii())
nova chamada: assertEquals("999", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '999' é diferente de " + result10735 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("999", consumer.slice.toStringAscii())
nova chamada: assertEquals("999", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '999' é diferente de " + result10736 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii())
nova chamada: assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '123456789012345678901234567890' é diferente de " + result10737 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii())
nova chamada: assertEquals("123456789012345678901234567890", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '123456789012345678901234567890' é diferente de " + result10738 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals(null, consumer.slice)
nova chamada: assertEquals(null, consumer.slice, "Era esperado valores iguais, mas  null é diferente de " + " consumer.slice")
chamada antiga: assertEquals("true", consumer.slice.toStringAscii())
nova chamada: assertEquals("true", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  'true' é diferente de " + result10739 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("false", consumer.slice.toStringAscii())
nova chamada: assertEquals("false", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  'false' é diferente de " + result10740 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("{}", consumer.slice.toStringAscii())
nova chamada: assertEquals("{}", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '{}' é diferente de " + result10741 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("{\"id\":1}", consumer.slice.toStringAscii())
nova chamada: assertEquals("{\"id\":1}", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '{\'id\':1}' é diferente de " + result10742 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("[]", consumer.slice.toStringAscii())
nova chamada: assertEquals("[]", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '[]' é diferente de " + result10743 + " <consumer.slice.toStringAscii()>")
chamada antiga: assertEquals("[1]", consumer.slice.toStringAscii())
nova chamada: assertEquals("[1]", consumer.slice.toStringAscii(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result10744 + " <consumer.slice.toStringAscii()>")
chamada antiga: Assert.assertTrue(v1.getValue().get(0) instanceof A)
nova chamada: assertTrue(v1.getValue().get(0) instanceof A, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: Assert.assertTrue(v2.getValue().get(0) instanceof B)
nova chamada: assertTrue(v2.getValue().get(0) instanceof B, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(udf.evaluate(null, "$"))
nova chamada: assertNull(udf.evaluate(null, "$"), "Era esperado nulo, mas " + result10745 + " <udf.evaluate(null, '$')> não é nulo")
chamada antiga: assertNull(udf.evaluate("", "$"))
nova chamada: assertNull(udf.evaluate("", "$"), "Era esperado nulo, mas " + result10746 + " <udf.evaluate('', '$')> não é nulo")
chamada antiga: assertNull(udf.evaluate("null", "$"))
nova chamada: assertNull(udf.evaluate("null", "$"), "Era esperado nulo, mas " + result10747 + " <udf.evaluate('null', '$')> não é nulo")
chamada antiga: assertEquals("123", udf.evaluate("123", "$"))
nova chamada: assertEquals("123", udf.evaluate("123", "$"), "Era esperado valores iguais, mas  '123' é diferente de " + result10748 + " <udf.evaluate('123', '$')>")
chamada antiga: assertNull(udf.eval(new Text("null")))
nova chamada: assertNull(udf.eval(new Text("null")), "Era esperado nulo, mas " + result10749 + " <udf.eval(new Text('null'))> não é nulo")
chamada antiga: assertNotNull(udf.eval(new Text("123")))
nova chamada: assertNotNull(udf.eval(new Text("123")), "Era esperado não nulo, mas " + result10750 + " <udf.eval(new Text('123'))> é nulo")
chamada antiga: assertEquals("123", udf.eval(new Text("123")).toString())
nova chamada: assertEquals("123", udf.eval(new Text("123")).toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10751 + " <udf.eval(new Text('123')).toString()>")
chamada antiga: assertNull(udf.eval(new Text("null")))
nova chamada: assertNull(udf.eval(new Text("null")), "Era esperado nulo, mas " + result10752 + " <udf.eval(new Text('null'))> não é nulo")
chamada antiga: assertNotNull(udf.eval(new Text("123")))
nova chamada: assertNotNull(udf.eval(new Text("123")), "Era esperado não nulo, mas " + result10753 + " <udf.eval(new Text('123'))> é nulo")
chamada antiga: assertEquals("123", udf.eval(new Text("123")).toString())
nova chamada: assertEquals("123", udf.eval(new Text("123")).toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10754 + " <udf.eval(new Text('123')).toString()>")
chamada antiga: assertEquals(GeometryCollection.class, geometry.getClass())
nova chamada: assertEquals(GeometryCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  GeometryCollection.class é diferente de " + result10755 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'GeometryCollection\',\'geometries\':[{\'type\':\'Point\',\'coordinates\':[100.0,0.0]},{\'type\':\'LineString\',\'coordinates\':[[101.0,0.0],[102.0,1.0]]}]}' é diferente de " + result10756 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10757 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Point.class, geometry.getClass())
nova chamada: assertEquals(Point.class, geometry.getClass(), "Era esperado valores iguais, mas  Point.class é diferente de " + result10758 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Point\',\'coordinates\':[100.0,0.0]}' é diferente de " + result10759 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10760 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Polygon.class, geometry.getClass())
nova chamada: assertEquals(Polygon.class, geometry.getClass(), "Era esperado valores iguais, mas  Polygon.class é diferente de " + result10761 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.8,0.8],[100.8,0.2],[100.2,0.2],[100.2,0.8],[100.8,0.8]]]}' é diferente de " + result10762 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10763 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPolygon.class, geometry.getClass())
nova chamada: assertEquals(MultiPolygon.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPolygon.class é diferente de " + result10764 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPolygon\',\'coordinates\':[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}' é diferente de " + result10765 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10766 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(FeatureCollection.class, geometry.getClass())
nova chamada: assertEquals(FeatureCollection.class, geometry.getClass(), "Era esperado valores iguais, mas  FeatureCollection.class é diferente de " + result10767 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'FeatureCollection\',\'features\':[{\'type\':\'Feature\',\'properties\':{\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Point\',\'coordinates\':[102.0,0.5]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'0.0\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'LineString\',\'coordinates\':[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\'type\':\'Feature\',\'properties\':{\'prop1\':\'{\\\'this\\\':\\\'that\\\'}\',\'prop0\':\'value0\'},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}' é diferente de " + result10768 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10769 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiLineString.class, geometry.getClass())
nova chamada: assertEquals(MultiLineString.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiLineString.class é diferente de " + result10770 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiLineString\',\'coordinates\':[[[100.0,0.0],[101.0,1.0]],[[102.0,2.0],[103.0,3.0]]]}' é diferente de " + result10771 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10772 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(LineString.class, geometry.getClass())
nova chamada: assertEquals(LineString.class, geometry.getClass(), "Era esperado valores iguais, mas  LineString.class é diferente de " + result10773 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'LineString\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result10774 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10775 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result10776 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"bbox\":[-10.0,-10.0,10.0,10.0],\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'bbox\':[-10.0,-10.0,10.0,10.0],\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result10777 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10778 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(Feature.class, geometry.getClass())
nova chamada: assertEquals(Feature.class, geometry.getClass(), "Era esperado valores iguais, mas  Feature.class é diferente de " + result10779 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"Feature\",\"id\":\"f2\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'Feature\',\'id\':\'f2\',\'properties\':{},\'geometry\':{\'type\':\'Polygon\',\'coordinates\':[[[-10.0,-10.0],[10.0,-10.0],[10.0,10.0],[-10.0,-10.0]]]}}' é diferente de " + result10780 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10781 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(MultiPoint.class, geometry.getClass())
nova chamada: assertEquals(MultiPoint.class, geometry.getClass(), "Era esperado valores iguais, mas  MultiPoint.class é diferente de " + result10782 + " <geometry.getClass()>")
chamada antiga: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry))
nova chamada: assertEquals("{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", JSON.toJSONString(geometry), "Era esperado valores iguais, mas  '{\'type\':\'MultiPoint\',\'coordinates\':[[100.0,0.0],[101.0,1.0]]}' é diferente de " + result10783 + " <JSON.toJSONString(geometry)>")
chamada antiga: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)))
nova chamada: assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), "Era esperado valores iguais, mas  str2 é diferente de " + result10784 + " <JSON.toJSONString(JSON.parseObject(str2, Geometry.class))>")
chamada antiga: assertEquals(point, point2)
nova chamada: assertEquals(point, point2, "Era esperado valores iguais, mas  point é diferente de " + " point2")
chamada antiga: assertEquals(color, color2)
nova chamada: assertEquals(color, color2, "Era esperado valores iguais, mas  color é diferente de " + " color2")
chamada antiga: assertEquals("1", result.toString())
nova chamada: assertEquals("1", result.toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result10785 + " <result.toString()>")
chamada antiga: assertEquals("\"2020-01-06 17:00:00\"", result.toString())
nova chamada: assertEquals("\"2020-01-06 17:00:00\"", result.toString(), "Era esperado valores iguais, mas  '\'2020-01-06 17:00:00\'' é diferente de " + result10786 + " <result.toString()>")
chamada antiga: assertEquals("\"\\\"\"", result.toString())
nova chamada: assertEquals("\"\\\"\"", result.toString(), "Era esperado valores iguais, mas  '\'\\\'\'' é diferente de " + result10787 + " <result.toString()>")
chamada antiga: assertEquals("1", result.toString())
nova chamada: assertEquals("1", result.toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result10788 + " <result.toString()>")
chamada antiga: assertEquals("null", udf.eval(new Text("{\"id\":null}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("null", udf.eval(new Text("{\"id\":null}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  'null' é diferente de " + result10789 + " <udf.eval(new Text('{\'id\':null}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("true", udf.eval(new Text("{\"id\":true}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("true", udf.eval(new Text("{\"id\":true}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  'true' é diferente de " + result10790 + " <udf.eval(new Text('{\'id\':true}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("false", udf.eval(new Text("{\"id\":false}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("false", udf.eval(new Text("{\"id\":false}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  'false' é diferente de " + result10791 + " <udf.eval(new Text('{\'id\':false}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("123", udf.eval(new Text("{\"id\":123}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("123", udf.eval(new Text("{\"id\":123}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10792 + " <udf.eval(new Text('{\'id\':123}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("1234567890", udf.eval(new Text("{\"id\":1234567890}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("1234567890", udf.eval(new Text("{\"id\":1234567890}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '1234567890' é diferente de " + result10793 + " <udf.eval(new Text('{\'id\':1234567890}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("12.34", udf.eval(new Text("{\"id\":12.34}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("12.34", udf.eval(new Text("{\"id\":12.34}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '12.34' é diferente de " + result10794 + " <udf.eval(new Text('{\'id\':12.34}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("12", udf.eval(new Text("{\"id\": 12D}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("12", udf.eval(new Text("{\"id\": 12D}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '12' é diferente de " + result10795 + " <udf.eval(new Text('{\'id\': 12D}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("abc", udf.eval(new Text("{\"id\":\"abc\"}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("abc", udf.eval(new Text("{\"id\":\"abc\"}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  'abc' é diferente de " + result10796 + " <udf.eval(new Text('{\'id\':\'abc\'}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("ab\\c", udf.eval(new Text("{\"id\":\"ab\\\\c\"}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("ab\\c", udf.eval(new Text("{\"id\":\"ab\\\\c\"}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  'ab\\c' é diferente de " + result10797 + " <udf.eval(new Text('{\'id\':\'ab\\\\c\'}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("{}", udf.eval(new Text("{\"id\":{}}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("{}", udf.eval(new Text("{\"id\":{}}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '{}' é diferente de " + result10798 + " <udf.eval(new Text('{\'id\':{}}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("[]", udf.eval(new Text("{\"id\":[]}".getBytes(StandardCharsets.UTF_8))).toString())
nova chamada: assertEquals("[]", udf.eval(new Text("{\"id\":[]}".getBytes(StandardCharsets.UTF_8))).toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result10799 + " <udf.eval(new Text('{\'id\':[]}'.getBytes(StandardCharsets.UTF_8))).toString()>")
chamada antiga: assertEquals("2020-01-06 17:00:00", result.toString())
nova chamada: assertEquals("2020-01-06 17:00:00", result.toString(), "Era esperado valores iguais, mas  '2020-01-06 17:00:00' é diferente de " + result10800 + " <result.toString()>")
chamada antiga: assertEquals("450", result.toString())
nova chamada: assertEquals("450", result.toString(), "Era esperado valores iguais, mas  '450' é diferente de " + result10801 + " <result.toString()>")
chamada antiga: assertEquals("101", udf.text.toString())
nova chamada: assertEquals("101", udf.text.toString(), "Era esperado valores iguais, mas  '101' é diferente de " + result10802 + " <udf.text.toString()>")
chamada antiga: assertEquals("123", udf.text.toString())
nova chamada: assertEquals("123", udf.text.toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10803 + " <udf.text.toString()>")
chamada antiga: assertEquals(Byte.toString(Byte.MIN_VALUE), udf.text.toString())
nova chamada: assertEquals(Byte.toString(Byte.MIN_VALUE), udf.text.toString(), "Era esperado valores iguais, mas " + result10804 + " <Byte.toString(Byte.MIN_VALUE)> é diferente de " + result10805 + " <udf.text.toString()>")
chamada antiga: assertEquals("123", udf.text.toString())
nova chamada: assertEquals("123", udf.text.toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10806 + " <udf.text.toString()>")
chamada antiga: assertEquals("123", udf.text.toString())
nova chamada: assertEquals("123", udf.text.toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10807 + " <udf.text.toString()>")
chamada antiga: assertEquals("123", udf.text.toString())
nova chamada: assertEquals("123", udf.text.toString(), "Era esperado valores iguais, mas  '123' é diferente de " + result10808 + " <udf.text.toString()>")
chamada antiga: assertEquals("abc", udf.text.toString())
nova chamada: assertEquals("abc", udf.text.toString(), "Era esperado valores iguais, mas  'abc' é diferente de " + result10809 + " <udf.text.toString()>")
chamada antiga: assertEquals("1", result.toStringUtf8())
nova chamada: assertEquals("1", result.toStringUtf8(), "Era esperado valores iguais, mas  '1' é diferente de " + result10810 + " <result.toStringUtf8()>")
chamada antiga: assertArrayEquals(row, row1)
nova chamada: assertArrayEquals(row, row1, "Era esperado arrays iguais, mas  row é diferente de " + " row1")
chamada antiga: assertEquals(53, rowCount)
nova chamada: assertEquals(53, rowCount, "Era esperado valores iguais, mas  53 é diferente de " + " rowCount")
chamada antiga: assertEquals(3, columns.size())
nova chamada: assertEquals(3, columns.size(), "Era esperado valores iguais, mas  3 é diferente de " + result10811 + " <columns.size()>")
chamada antiga: assertEquals(3, line0.length)
nova chamada: assertEquals(3, line0.length, "Era esperado valores iguais, mas  3 é diferente de " + " line0.length")
chamada antiga: assertEquals("Alabama", line0[0])
nova chamada: assertEquals("Alabama", line0[0], "Era esperado valores iguais, mas  'Alabama' é diferente de " + " line0[0]")
chamada antiga: assertEquals("Ala.", line0[1])
nova chamada: assertEquals("Ala.", line0[1], "Era esperado valores iguais, mas  'Ala.' é diferente de " + " line0[1]")
chamada antiga: assertEquals("AL", line0[2])
nova chamada: assertEquals("AL", line0[2], "Era esperado valores iguais, mas  'AL' é diferente de " + " line0[2]")
chamada antiga: assertEquals(3, line1.length)
nova chamada: assertEquals(3, line1.length, "Era esperado valores iguais, mas  3 é diferente de " + " line1.length")
chamada antiga: assertEquals("Alaska", line1[0])
nova chamada: assertEquals("Alaska", line1[0], "Era esperado valores iguais, mas  'Alaska' é diferente de " + " line1[0]")
chamada antiga: assertEquals("Alaska", line1[1])
nova chamada: assertEquals("Alaska", line1[1], "Era esperado valores iguais, mas  'Alaska' é diferente de " + " line1[1]")
chamada antiga: assertEquals("AK", line1[2])
nova chamada: assertEquals("AK", line1[2], "Era esperado valores iguais, mas  'AK' é diferente de " + " line1[2]")
chamada antiga: assertEquals(rowCount, rows)
nova chamada: assertEquals(rowCount, rows, "Era esperado valores iguais, mas  rowCount é diferente de " + " rows")
chamada antiga: assertEquals(2, line.length)
nova chamada: assertEquals(2, line.length, "Era esperado valores iguais, mas  2 é diferente de " + " line.length")
chamada antiga: assertEquals(101, line[0])
nova chamada: assertEquals(101, line[0], "Era esperado valores iguais, mas  101 é diferente de " + " line[0]")
chamada antiga: assertEquals("DataWorks", line[1])
nova chamada: assertEquals("DataWorks", line[1], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " line[1]")
chamada antiga: assertNull(parser.readLineValues())
nova chamada: assertNull(parser.readLineValues(), "Era esperado nulo, mas " + result10812 + " <parser.readLineValues()> não é nulo")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(2, line.length)
nova chamada: assertEquals(2, line.length, "Era esperado valores iguais, mas  2 é diferente de " + " line.length")
chamada antiga: assertEquals("DataWorks", line[0])
nova chamada: assertEquals("DataWorks", line[0], "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " line[0]")
chamada antiga: assertEquals(101, line[1])
nova chamada: assertEquals(101, line[1], "Era esperado valores iguais, mas  101 é diferente de " + " line[1]")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals(101, bean.id)
nova chamada: assertEquals(101, bean.id, "Era esperado valores iguais, mas  101 é diferente de " + " bean.id")
chamada antiga: assertEquals("DataWorks", bean.name)
nova chamada: assertEquals("DataWorks", bean.name, "Era esperado valores iguais, mas  'DataWorks' é diferente de " + " bean.name")
chamada antiga: assertEquals("1001,DataWorks\n", csv)
nova chamada: assertEquals("1001,DataWorks\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' é diferente de " + " csv")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv)
nova chamada: assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' + '1002,MaxCompute\n' é diferente de " + " csv")
chamada antiga: assertEquals(53, CSVParser.rowCount(file))
nova chamada: assertEquals(53, CSVParser.rowCount(file), "Era esperado valores iguais, mas  53 é diferente de " + result10813 + " <CSVParser.rowCount(file)>")
chamada antiga: assertEquals(496774, CSVParser.rowCount(zipIn))
nova chamada: assertEquals(496774, CSVParser.rowCount(zipIn), "Era esperado valores iguais, mas  496774 é diferente de " + result10814 + " <CSVParser.rowCount(zipIn)>")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals(496774, rowCount)
nova chamada: assertEquals(496774, rowCount, "Era esperado valores iguais, mas  496774 é diferente de " + " rowCount")
chamada antiga: assertEquals("1001,DataWorks\n", csv)
nova chamada: assertEquals("1001,DataWorks\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' é diferente de " + " csv")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("1001,DataWorks\n", csv)
nova chamada: assertEquals("1001,DataWorks\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' é diferente de " + " csv")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("1001,DataWorks\n", csv)
nova chamada: assertEquals("1001,DataWorks\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' é diferente de " + " csv")
chamada antiga: assertEquals(bean.id, bean1.id)
nova chamada: assertEquals(bean.id, bean1.id, "Era esperado valores iguais, mas  bean.id é diferente de " + " bean1.id")
chamada antiga: assertEquals(bean.name, bean1.name)
nova chamada: assertEquals(bean.name, bean1.name, "Era esperado valores iguais, mas  bean.name é diferente de " + " bean1.name")
chamada antiga: assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv)
nova chamada: assertEquals("1001,DataWorks\n" + "1002,MaxCompute\n", csv, "Era esperado valores iguais, mas  '1001,DataWorks\n' + '1002,MaxCompute\n' é diferente de " + " csv")
chamada antiga: assertEquals(5, columns.size())
nova chamada: assertEquals(5, columns.size(), "Era esperado valores iguais, mas  5 é diferente de " + result10815 + " <columns.size()>")
chamada antiga: assertEquals(5, columns.size())
nova chamada: assertEquals(5, columns.size(), "Era esperado valores iguais, mas  5 é diferente de " + result10816 + " <columns.size()>")
chamada antiga: assertEquals(5, columns.size())
nova chamada: assertEquals(5, columns.size(), "Era esperado valores iguais, mas  5 é diferente de " + result10817 + " <columns.size()>")
chamada antiga: assertEquals(5, columns.size())
nova chamada: assertEquals(5, columns.size(), "Era esperado valores iguais, mas  5 é diferente de " + result10818 + " <columns.size()>")
chamada antiga: assertEquals("{}", JSON.toJSONString(vo))
nova chamada: assertEquals("{}", JSON.toJSONString(vo), "Era esperado valores iguais, mas  '{}' é diferente de " + result10819 + " <JSON.toJSONString(vo)>")
chamada antiga: assertNotEquals(requestBody.contentLength(), 0)
nova chamada: assertNotEquals(requestBody.contentLength(), 0, "Era esperado valores diferentes, mas " + result10820 + " <requestBody.contentLength()> é igual a " + " 0")
chamada antiga: assertEquals(JSON.toJSONString(mode2), json)
nova chamada: assertEquals(JSON.toJSONString(mode2), json, "Era esperado valores iguais, mas " + result10821 + " <JSON.toJSONString(mode2)> é diferente de " + " json")
Total asserts: 20392
Asserts sem descrição: 18920
Asserts com descrição: 1472
Assertion Roulette: 16241
