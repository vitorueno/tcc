Antes do refactor: 


Projeto: /home/vitor-otto/opensource/spring-batch-5.0.1

Total asserts: 7126
Asserts sem descrição: 5974
Asserts com descrição: 1152
Assertion Roulette: 4934

Após o refactor: 


Projeto: /home/vitor-otto/opensource/spring-batch-5.0.1

chamada antiga: assertEquals(trade.getIsin(), rs.getString(1))
nova chamada: assertEquals(trade.getIsin(), rs.getString(1), "Era esperado valores iguais, mas " + result0 + " <trade.getIsin()> é diferente de " + result1 + " <rs.getString(1)>")
chamada antiga: assertEquals(trade.getQuantity(), rs.getLong(2))
nova chamada: assertEquals(trade.getQuantity(), rs.getLong(2), "Era esperado valores iguais, mas " + result2 + " <trade.getQuantity()> é diferente de " + result3 + " <rs.getLong(2)>")
chamada antiga: assertEquals(trade.getPrice(), rs.getBigDecimal(3))
nova chamada: assertEquals(trade.getPrice(), rs.getBigDecimal(3), "Era esperado valores iguais, mas " + result4 + " <trade.getPrice()> é diferente de " + result5 + " <rs.getBigDecimal(3)>")
chamada antiga: assertEquals(trade.getCustomer(), rs.getString(4))
nova chamada: assertEquals(trade.getCustomer(), rs.getString(4), "Era esperado valores iguais, mas " + result6 + " <trade.getCustomer()> é diferente de " + result7 + " <rs.getString(4)>")
chamada antiga: assertEquals(activeRow, trades.size())
nova chamada: assertEquals(activeRow, trades.size(), "Era esperado valores iguais, mas  activeRow é diferente de " + result8 + " <trades.size()>")
chamada antiga: assertEquals(customers.size(), activeRow)
nova chamada: assertEquals(customers.size(), activeRow, "Era esperado valores iguais, mas " + result9 + " <customers.size()> é diferente de " + " activeRow")
chamada antiga: assertEquals(customer.getName(), rs.getString(1))
nova chamada: assertEquals(customer.getName(), rs.getString(1), "Era esperado valores iguais, mas " + result10 + " <customer.getName()> é diferente de " + result11 + " <rs.getString(1)>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result12 + " <execution.getStatus()>")
chamada antiga: assertEquals(after - before, execution.getStepExecutions().iterator().next().getReadCount())
nova chamada: assertEquals(after - before, execution.getStepExecutions().iterator().next().getReadCount(), "Era esperado valores iguais, mas  after - before é diferente de " + result13 + " <execution.getStepExecutions().iterator().next().getReadCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result14 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("yes", jobExecution.getExecutionContext().getString("done"))
nova chamada: assertEquals("yes", jobExecution.getExecutionContext().getString("done"), "Era esperado valores iguais, mas  'yes' é diferente de " + result15 + " <jobExecution.getExecutionContext().getString('done')>")
chamada antiga: assertEquals("foo", value)
nova chamada: assertEquals("foo", value, "Era esperado valores iguais, mas  'foo' é diferente de " + " value")
chamada antiga: assertEquals("foo2", strValue)
nova chamada: assertEquals("foo2", strValue, "Era esperado valores iguais, mas  'foo2' é diferente de " + " strValue")
chamada antiga: assertEquals(3, integerValue.intValue())
nova chamada: assertEquals(3, integerValue.intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result16 + " <integerValue.intValue()>")
chamada antiga: assertEquals(before + 5, after)
nova chamada: assertEquals(before + 5, after, "Era esperado valores iguais, mas  before + 5 é diferente de " + " after")
chamada antiga: assertEquals(trade.getIsin(), rs.getString(1))
nova chamada: assertEquals(trade.getIsin(), rs.getString(1), "Era esperado valores iguais, mas " + result17 + " <trade.getIsin()> é diferente de " + result18 + " <rs.getString(1)>")
chamada antiga: assertEquals(trade.getQuantity(), rs.getLong(2))
nova chamada: assertEquals(trade.getQuantity(), rs.getLong(2), "Era esperado valores iguais, mas " + result19 + " <trade.getQuantity()> é diferente de " + result20 + " <rs.getLong(2)>")
chamada antiga: assertEquals(trade.getPrice(), rs.getBigDecimal(3))
nova chamada: assertEquals(trade.getPrice(), rs.getBigDecimal(3), "Era esperado valores iguais, mas " + result21 + " <trade.getPrice()> é diferente de " + result22 + " <rs.getBigDecimal(3)>")
chamada antiga: assertEquals(trade.getCustomer(), rs.getString(4))
nova chamada: assertEquals(trade.getCustomer(), rs.getString(4), "Era esperado valores iguais, mas " + result23 + " <trade.getCustomer()> é diferente de " + result24 + " <rs.getString(4)>")
chamada antiga: assertEquals(EXPECTED_OUTPUT_FILE, output)
nova chamada: assertEquals(EXPECTED_OUTPUT_FILE, output, "Era esperado valores iguais, mas  EXPECTED_OUTPUT_FILE é diferente de " + " output")
chamada antiga: assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter())
nova chamada: assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter(), "Era esperado valores iguais, mas  itemGenerator.getLimit() + 2 é diferente de " + result25 + " <itemProcessor.getCounter()>")
chamada antiga: assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter())
nova chamada: assertEquals(itemGenerator.getLimit() + 2, itemProcessor.getCounter(), "Era esperado valores iguais, mas  itemGenerator.getLimit() + 2 é diferente de " + result26 + " <itemProcessor.getCounter()>")
chamada antiga: assertEquals(customer.getName(), rs.getString(1))
nova chamada: assertEquals(customer.getName(), rs.getString(1), "Era esperado valores iguais, mas " + result27 + " <customer.getName()> é diferente de " + result28 + " <rs.getString(1)>")
chamada antiga: assertEquals("4", step1Execution.get("READ_COUNT").toString())
nova chamada: assertEquals("4", step1Execution.get("READ_COUNT").toString(), "Era esperado valores iguais, mas  '4' é diferente de " + result29 + " <step1Execution.get('READ_COUNT').toString()>")
chamada antiga: assertEquals("1", step1Execution.get("FILTER_COUNT").toString())
nova chamada: assertEquals("1", step1Execution.get("FILTER_COUNT").toString(), "Era esperado valores iguais, mas  '1' é diferente de " + result30 + " <step1Execution.get('FILTER_COUNT').toString()>")
chamada antiga: assertEquals("3", step1Execution.get("WRITE_COUNT").toString())
nova chamada: assertEquals("3", step1Execution.get("WRITE_COUNT").toString(), "Era esperado valores iguais, mas  '3' é diferente de " + result31 + " <step1Execution.get('WRITE_COUNT').toString()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result32 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result33 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(4, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(4, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  4 é diferente de " + result34 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result35 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(inputs.size(), outputs.size())
nova chamada: assertEquals(inputs.size(), outputs.size(), "Era esperado valores iguais, mas " + result36 + " <inputs.size()> é diferente de " + result37 + " <outputs.size()>")
chamada antiga: assertTrue(itemCount > 0)
nova chamada: assertTrue(itemCount > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result38 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result39 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(expected, count)
nova chamada: assertEquals(expected, count, "Era esperado valores iguais, mas  expected é diferente de " + " count")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result40 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(first, jobExecution.getStepExecutions().iterator().next().getWriteCount())
nova chamada: assertEquals(first, jobExecution.getStepExecutions().iterator().next().getWriteCount(), "Era esperado valores iguais, mas  first é diferente de " + result41 + " <jobExecution.getStepExecutions().iterator().next().getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result42 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(second, jobExecution.getStepExecutions().iterator().next().getWriteCount())
nova chamada: assertEquals(second, jobExecution.getStepExecutions().iterator().next().getWriteCount(), "Era esperado valores iguais, mas  second é diferente de " + result43 + " <jobExecution.getStepExecutions().iterator().next().getWriteCount()>")
chamada antiga: assertTrue(personService.getReturnedCount() > 0)
nova chamada: assertTrue(personService.getReturnedCount() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(personService.getReturnedCount(), personService.getReceivedCount())
nova chamada: assertEquals(personService.getReturnedCount(), personService.getReceivedCount(), "Era esperado valores iguais, mas " + result44 + " <personService.getReturnedCount()> é diferente de " + result45 + " <personService.getReceivedCount()>")
chamada antiga: assertEquals(rs.getString("PLAYER_ID"), "AKFJDL00")
nova chamada: assertEquals(rs.getString("PLAYER_ID"), "AKFJDL00", "Era esperado valores iguais, mas " + result46 + " <rs.getString('PLAYER_ID')> é diferente de " + " 'AKFJDL00'")
chamada antiga: assertEquals(rs.getString("LAST_NAME"), "Doe")
nova chamada: assertEquals(rs.getString("LAST_NAME"), "Doe", "Era esperado valores iguais, mas " + result47 + " <rs.getString('LAST_NAME')> é diferente de " + " 'Doe'")
chamada antiga: assertEquals(rs.getString("FIRST_NAME"), "John")
nova chamada: assertEquals(rs.getString("FIRST_NAME"), "John", "Era esperado valores iguais, mas " + result48 + " <rs.getString('FIRST_NAME')> é diferente de " + " 'John'")
chamada antiga: assertEquals(rs.getString("POS"), "QB")
nova chamada: assertEquals(rs.getString("POS"), "QB", "Era esperado valores iguais, mas " + result49 + " <rs.getString('POS')> é diferente de " + " 'QB'")
chamada antiga: assertEquals(rs.getInt("YEAR_OF_BIRTH"), 1975)
nova chamada: assertEquals(rs.getInt("YEAR_OF_BIRTH"), 1975, "Era esperado valores iguais, mas " + result50 + " <rs.getInt('YEAR_OF_BIRTH')> é diferente de " + " 1975")
chamada antiga: assertEquals(rs.getInt("YEAR_DRAFTED"), 1998)
nova chamada: assertEquals(rs.getInt("YEAR_DRAFTED"), 1998, "Era esperado valores iguais, mas " + result51 + " <rs.getInt('YEAR_DRAFTED')> é diferente de " + " 1998")
chamada antiga: assertEquals(tempGame, game)
nova chamada: assertEquals(tempGame, game, "Era esperado valores iguais, mas  tempGame é diferente de " + " game")
chamada antiga: assertEquals(summary, testSummary)
nova chamada: assertEquals(summary, testSummary, "Era esperado valores iguais, mas  summary é diferente de " + " testSummary")
chamada antiga: assertEquals(customerFieldSet, fs)
nova chamada: assertEquals(customerFieldSet, fs, "Era esperado valores iguais, mas  customerFieldSet é diferente de " + " fs")
chamada antiga: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
nova chamada: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine(), "Era esperado valores iguais, mas  customerAddLine é diferente de " + result52 + " <customerTokenizer.getTokenizedLine()>")
chamada antiga: assertEquals(customerFieldSet, fs)
nova chamada: assertEquals(customerFieldSet, fs, "Era esperado valores iguais, mas  customerFieldSet é diferente de " + " fs")
chamada antiga: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
nova chamada: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine(), "Era esperado valores iguais, mas  customerAddLine é diferente de " + result53 + " <customerTokenizer.getTokenizedLine()>")
chamada antiga: assertEquals(customerFieldSet, fs)
nova chamada: assertEquals(customerFieldSet, fs, "Era esperado valores iguais, mas  customerFieldSet é diferente de " + " fs")
chamada antiga: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine())
nova chamada: assertEquals(customerAddLine, customerTokenizer.getTokenizedLine(), "Era esperado valores iguais, mas  customerAddLine é diferente de " + result54 + " <customerTokenizer.getTokenizedLine()>")
chamada antiga: assertEquals(customerUpdate, processor.process(customerUpdate))
nova chamada: assertEquals(customerUpdate, processor.process(customerUpdate), "Era esperado valores iguais, mas  customerUpdate é diferente de " + result55 + " <processor.process(customerUpdate)>")
chamada antiga: assertEquals(customerUpdate, processor.process(customerUpdate))
nova chamada: assertEquals(customerUpdate, processor.process(customerUpdate), "Era esperado valores iguais, mas  customerUpdate é diferente de " + result56 + " <processor.process(customerUpdate)>")
chamada antiga: assertEquals(95, rs.getLong("credit"))
nova chamada: assertEquals(95, rs.getLong("credit"), "Era esperado valores iguais, mas  95 é diferente de " + result57 + " <rs.getLong('credit')>")
chamada antiga: assertEquals("testCustomer", rs.getString("CUSTOMER"))
nova chamada: assertEquals("testCustomer", rs.getString("CUSTOMER"), "Era esperado valores iguais, mas  'testCustomer' é diferente de " + result58 + " <rs.getString('CUSTOMER')>")
chamada antiga: assertEquals(new BigDecimal(Double.toString(99.69)), rs.getBigDecimal("PRICE"))
nova chamada: assertEquals(new BigDecimal(Double.toString(99.69)), rs.getBigDecimal("PRICE"), "Era esperado valores iguais, mas  new BigDecimal(Double.toString(99.69)) é diferente de " + result59 + " <rs.getBigDecimal('PRICE')>")
chamada antiga: assertEquals(5, rs.getLong("QUANTITY"))
nova chamada: assertEquals(5, rs.getLong("QUANTITY"), "Era esperado valores iguais, mas  5 é diferente de " + result60 + " <rs.getLong('QUANTITY')>")
chamada antiga: assertEquals(oldCredit.add(CustomerCreditIncreaseProcessor.FIXED_AMOUNT), tested.process(customerCredit).getCredit())
nova chamada: assertEquals(oldCredit.add(CustomerCreditIncreaseProcessor.FIXED_AMOUNT), tested.process(customerCredit).getCredit(), "Era esperado valores iguais, mas " + result61 + " <oldCredit.add(CustomerCreditIncreaseProcessor.FIXED_AMOUNT)> é diferente de " + result62 + " <tested.process(customerCredit).getCredit()>")
chamada antiga: assertEquals("testCustomerName", customerDebit.getName())
nova chamada: assertEquals("testCustomerName", customerDebit.getName(), "Era esperado valores iguais, mas  'testCustomerName' é diferente de " + result63 + " <customerDebit.getName()>")
chamada antiga: assertEquals(new BigDecimal("123.0"), customerDebit.getDebit())
nova chamada: assertEquals(new BigDecimal("123.0"), customerDebit.getDebit(), "Era esperado valores iguais, mas  new BigDecimal('123.0') é diferente de " + result64 + " <customerDebit.getDebit()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result65 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(limit, counter)
nova chamada: assertEquals(limit, counter, "Era esperado valores iguais, mas  limit é diferente de " + " counter")
chamada antiga: assertEquals(counter, reader.getCounter())
nova chamada: assertEquals(counter, reader.getCounter(), "Era esperado valores iguais, mas  counter é diferente de " + result66 + " <reader.getCounter()>")
chamada antiga: assertEquals(trade1, trade1Clone)
nova chamada: assertEquals(trade1, trade1Clone, "Era esperado valores iguais, mas  trade1 é diferente de " + " trade1Clone")
chamada antiga: assertNotEquals(trade1, trade2)
nova chamada: assertNotEquals(trade1, trade2, "Era esperado valores diferentes, mas  trade1 é igual a " + " trade2")
chamada antiga: assertEquals(3, lines.size())
nova chamada: assertEquals(3, lines.size(), "Era esperado valores iguais, mas  3 é diferente de " + result67 + " <lines.size()>")
chamada antiga: assertNull(provider.read())
nova chamada: assertNull(provider.read(), "Era esperado nulo, mas " + result68 + " <provider.read()> não é nulo")
chamada antiga: Assertions.assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile))
nova chamada: assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile), "Era esperado que as linhas combinassem, mas " + result69 + " <Files.lines(inputFile)> não corresponde a " + result70 + " <Files.lines(outputFile)>")
chamada antiga: Assertions.assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile))
nova chamada: assertLinesMatch(Files.lines(inputFile), Files.lines(outputFile), "Era esperado que as linhas combinassem, mas " + result71 + " <Files.lines(inputFile)> não corresponde a " + result72 + " <Files.lines(outputFile)>")
chamada antiga: assertTrue(AggregateItem.getFooter().isFooter())
nova chamada: assertTrue(AggregateItem.getFooter().isFooter(), "Era esperado verdadeiro, mas " + result73 + " <AggregateItem.getFooter().isFooter()> é falso")
chamada antiga: assertTrue(AggregateItem.getHeader().isHeader())
nova chamada: assertTrue(AggregateItem.getHeader().isHeader(), "Era esperado verdadeiro, mas " + result74 + " <AggregateItem.getHeader().isHeader()> é falso")
chamada antiga: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isHeader())
nova chamada: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isHeader(), "Era esperado verdadeiro, mas " + result75 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'BEGIN' })).isHeader()> é falso")
chamada antiga: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isHeader())
nova chamada: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isHeader(), "Era esperado verdadeiro, mas " + result76 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'FOO' })).isHeader()> é falso")
chamada antiga: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isFooter())
nova chamada: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isFooter(), "Era esperado verdadeiro, mas " + result77 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'END' })).isFooter()> é falso")
chamada antiga: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isFooter())
nova chamada: assertTrue(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).isFooter(), "Era esperado verdadeiro, mas " + result78 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'FOO' })).isFooter()> é falso")
chamada antiga: assertEquals("foo", mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).getItem())
nova chamada: assertEquals("foo", mapper.mapFieldSet(new DefaultFieldSet(new String[] { "FOO" })).getItem(), "Era esperado valores iguais, mas  'foo' é diferente de " + result79 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'FOO' })).getItem()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(o, order)
nova chamada: assertEquals(o, order, "Era esperado valores iguais, mas  o é diferente de " + " order")
chamada antiga: assertEquals(o.getCustomer(), customer)
nova chamada: assertEquals(o.getCustomer(), customer, "Era esperado valores iguais, mas " + result80 + " <o.getCustomer()> é diferente de " + " customer")
chamada antiga: assertEquals(o.getBillingAddress(), billing)
nova chamada: assertEquals(o.getBillingAddress(), billing, "Era esperado valores iguais, mas " + result81 + " <o.getBillingAddress()> é diferente de " + " billing")
chamada antiga: assertEquals(o.getShippingAddress(), shipping)
nova chamada: assertEquals(o.getShippingAddress(), shipping, "Era esperado valores iguais, mas " + result82 + " <o.getShippingAddress()> é diferente de " + " shipping")
chamada antiga: assertEquals(o.getBilling(), billingInfo)
nova chamada: assertEquals(o.getBilling(), billingInfo, "Era esperado valores iguais, mas " + result83 + " <o.getBilling()> é diferente de " + " billingInfo")
chamada antiga: assertEquals(o.getShipping(), shippingInfo)
nova chamada: assertEquals(o.getShipping(), shippingInfo, "Era esperado valores iguais, mas " + result84 + " <o.getShipping()> é diferente de " + " shippingInfo")
chamada antiga: assertEquals(3, o.getLineItems().size())
nova chamada: assertEquals(3, o.getLineItems().size(), "Era esperado valores iguais, mas  3 é diferente de " + result85 + " <o.getLineItems().size()>")
chamada antiga: assertNull(provider.read())
nova chamada: assertNull(provider.read(), "Era esperado nulo, mas " + result86 + " <provider.read()> não é nulo")
chamada antiga: assertTrue(orderValidator.supports(Order.class))
nova chamada: assertTrue(orderValidator.supports(Order.class), "Era esperado verdadeiro, mas " + result87 + " <orderValidator.supports(Order.class)> é falso")
chamada antiga: assertEquals(1, errors.getAllErrors().size())
nova chamada: assertEquals(1, errors.getAllErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result88 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("Incorrect type", errors.getAllErrors().get(0).getCode())
nova chamada: assertEquals("Incorrect type", errors.getAllErrors().get(0).getCode(), "Era esperado valores iguais, mas  'Incorrect type' é diferente de " + result89 + " <errors.getAllErrors().get(0).getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result90 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(3, errors.getAllErrors().size())
nova chamada: assertEquals(3, errors.getAllErrors().size(), "Era esperado valores iguais, mas  3 é diferente de " + result91 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.order.id", errors.getFieldError("orderId").getCode())
nova chamada: assertEquals("error.order.id", errors.getFieldError("orderId").getCode(), "Era esperado valores iguais, mas  'error.order.id' é diferente de " + result92 + " <errors.getFieldError('orderId').getCode()>")
chamada antiga: assertEquals("error.order.date.future", errors.getFieldError("orderDate").getCode())
nova chamada: assertEquals("error.order.date.future", errors.getFieldError("orderDate").getCode(), "Era esperado valores iguais, mas  'error.order.date.future' é diferente de " + result93 + " <errors.getFieldError('orderDate').getCode()>")
chamada antiga: assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode())
nova chamada: assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode(), "Era esperado valores iguais, mas  'error.order.lines.badcount' é diferente de " + result94 + " <errors.getFieldError('totalLines').getCode()>")
chamada antiga: assertEquals(2, errors.getAllErrors().size())
nova chamada: assertEquals(2, errors.getAllErrors().size(), "Era esperado valores iguais, mas  2 é diferente de " + result95 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.order.id", errors.getFieldError("orderId").getCode())
nova chamada: assertEquals("error.order.id", errors.getFieldError("orderId").getCode(), "Era esperado valores iguais, mas  'error.order.id' é diferente de " + result96 + " <errors.getFieldError('orderId').getCode()>")
chamada antiga: assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode())
nova chamada: assertEquals("error.order.lines.badcount", errors.getFieldError("totalLines").getCode(), "Era esperado valores iguais, mas  'error.order.lines.badcount' é diferente de " + result97 + " <errors.getFieldError('totalLines').getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result98 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(2, errors.getAllErrors().size())
nova chamada: assertEquals(2, errors.getAllErrors().size(), "Era esperado valores iguais, mas  2 é diferente de " + result99 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.customer.registration", errors.getFieldError("customer.registered").getCode())
nova chamada: assertEquals("error.customer.registration", errors.getFieldError("customer.registered").getCode(), "Era esperado valores iguais, mas  'error.customer.registration' é diferente de " + result100 + " <errors.getFieldError('customer.registered').getCode()>")
chamada antiga: assertEquals("error.customer.companyname", errors.getFieldError("customer.companyName").getCode())
nova chamada: assertEquals("error.customer.companyname", errors.getFieldError("customer.companyName").getCode(), "Era esperado valores iguais, mas  'error.customer.companyname' é diferente de " + result101 + " <errors.getFieldError('customer.companyName').getCode()>")
chamada antiga: assertEquals(3, errors.getAllErrors().size())
nova chamada: assertEquals(3, errors.getAllErrors().size(), "Era esperado valores iguais, mas  3 é diferente de " + result102 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode())
nova chamada: assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode(), "Era esperado valores iguais, mas  'error.customer.firstname' é diferente de " + result103 + " <errors.getFieldError('customer.firstName').getCode()>")
chamada antiga: assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode())
nova chamada: assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode(), "Era esperado valores iguais, mas  'error.customer.lastname' é diferente de " + result104 + " <errors.getFieldError('customer.lastName').getCode()>")
chamada antiga: assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode())
nova chamada: assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode(), "Era esperado valores iguais, mas  'error.customer.registrationid' é diferente de " + result105 + " <errors.getFieldError('customer.registrationId').getCode()>")
chamada antiga: assertEquals(3, errors.getAllErrors().size())
nova chamada: assertEquals(3, errors.getAllErrors().size(), "Era esperado valores iguais, mas  3 é diferente de " + result106 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode())
nova chamada: assertEquals("error.customer.firstname", errors.getFieldError("customer.firstName").getCode(), "Era esperado valores iguais, mas  'error.customer.firstname' é diferente de " + result107 + " <errors.getFieldError('customer.firstName').getCode()>")
chamada antiga: assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode())
nova chamada: assertEquals("error.customer.lastname", errors.getFieldError("customer.lastName").getCode(), "Era esperado valores iguais, mas  'error.customer.lastname' é diferente de " + result108 + " <errors.getFieldError('customer.lastName').getCode()>")
chamada antiga: assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode())
nova chamada: assertEquals("error.customer.registrationid", errors.getFieldError("customer.registrationId").getCode(), "Era esperado valores iguais, mas  'error.customer.registrationid' é diferente de " + result109 + " <errors.getFieldError('customer.registrationId').getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result110 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result111 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result112 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(4, errors.getAllErrors().size())
nova chamada: assertEquals(4, errors.getAllErrors().size(), "Era esperado valores iguais, mas  4 é diferente de " + result113 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode())
nova chamada: assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode(), "Era esperado valores iguais, mas  'error.baddress.addrline1.length' é diferente de " + result114 + " <errors.getFieldError('billingAddress.addrLine1').getCode()>")
chamada antiga: assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode())
nova chamada: assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode(), "Era esperado valores iguais, mas  'error.baddress.city.length' é diferente de " + result115 + " <errors.getFieldError('billingAddress.city').getCode()>")
chamada antiga: assertEquals("error.baddress.zipcode.length", errors.getFieldError("billingAddress.zipCode").getCode())
nova chamada: assertEquals("error.baddress.zipcode.length", errors.getFieldError("billingAddress.zipCode").getCode(), "Era esperado valores iguais, mas  'error.baddress.zipcode.length' é diferente de " + result116 + " <errors.getFieldError('billingAddress.zipCode').getCode()>")
chamada antiga: assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode())
nova chamada: assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode(), "Era esperado valores iguais, mas  'error.baddress.country.length' é diferente de " + result117 + " <errors.getFieldError('billingAddress.country').getCode()>")
chamada antiga: assertEquals(8, errors.getAllErrors().size())
nova chamada: assertEquals(8, errors.getAllErrors().size(), "Era esperado valores iguais, mas  8 é diferente de " + result118 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.baddress.addresse.length", errors.getFieldError("billingAddress.addressee").getCode())
nova chamada: assertEquals("error.baddress.addresse.length", errors.getFieldError("billingAddress.addressee").getCode(), "Era esperado valores iguais, mas  'error.baddress.addresse.length' é diferente de " + result119 + " <errors.getFieldError('billingAddress.addressee').getCode()>")
chamada antiga: assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode())
nova chamada: assertEquals("error.baddress.addrline1.length", errors.getFieldError("billingAddress.addrLine1").getCode(), "Era esperado valores iguais, mas  'error.baddress.addrline1.length' é diferente de " + result120 + " <errors.getFieldError('billingAddress.addrLine1').getCode()>")
chamada antiga: assertEquals("error.baddress.addrline2.length", errors.getFieldError("billingAddress.addrLine2").getCode())
nova chamada: assertEquals("error.baddress.addrline2.length", errors.getFieldError("billingAddress.addrLine2").getCode(), "Era esperado valores iguais, mas  'error.baddress.addrline2.length' é diferente de " + result121 + " <errors.getFieldError('billingAddress.addrLine2').getCode()>")
chamada antiga: assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode())
nova chamada: assertEquals("error.baddress.city.length", errors.getFieldError("billingAddress.city").getCode(), "Era esperado valores iguais, mas  'error.baddress.city.length' é diferente de " + result122 + " <errors.getFieldError('billingAddress.city').getCode()>")
chamada antiga: assertEquals("error.baddress.state.length", errors.getFieldError("billingAddress.state").getCode())
nova chamada: assertEquals("error.baddress.state.length", errors.getFieldError("billingAddress.state").getCode(), "Era esperado valores iguais, mas  'error.baddress.state.length' é diferente de " + result123 + " <errors.getFieldError('billingAddress.state').getCode()>")
chamada antiga: assertEquals("error.baddress.zipcode.length", errors.getFieldErrors("billingAddress.zipCode").get(0).getCode())
nova chamada: assertEquals("error.baddress.zipcode.length", errors.getFieldErrors("billingAddress.zipCode").get(0).getCode(), "Era esperado valores iguais, mas  'error.baddress.zipcode.length' é diferente de " + result124 + " <errors.getFieldErrors('billingAddress.zipCode').get(0).getCode()>")
chamada antiga: assertEquals("error.baddress.zipcode.format", errors.getFieldErrors("billingAddress.zipCode").get(1).getCode())
nova chamada: assertEquals("error.baddress.zipcode.format", errors.getFieldErrors("billingAddress.zipCode").get(1).getCode(), "Era esperado valores iguais, mas  'error.baddress.zipcode.format' é diferente de " + result125 + " <errors.getFieldErrors('billingAddress.zipCode').get(1).getCode()>")
chamada antiga: assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode())
nova chamada: assertEquals("error.baddress.country.length", errors.getFieldError("billingAddress.country").getCode(), "Era esperado valores iguais, mas  'error.baddress.country.length' é diferente de " + result126 + " <errors.getFieldError('billingAddress.country').getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result127 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(2, errors.getAllErrors().size())
nova chamada: assertEquals(2, errors.getAllErrors().size(), "Era esperado valores iguais, mas  2 é diferente de " + result128 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.billing.type", errors.getFieldError("billing.paymentId").getCode())
nova chamada: assertEquals("error.billing.type", errors.getFieldError("billing.paymentId").getCode(), "Era esperado valores iguais, mas  'error.billing.type' é diferente de " + result129 + " <errors.getFieldError('billing.paymentId').getCode()>")
chamada antiga: assertEquals("error.billing.desc", errors.getFieldError("billing.paymentDesc").getCode())
nova chamada: assertEquals("error.billing.desc", errors.getFieldError("billing.paymentDesc").getCode(), "Era esperado valores iguais, mas  'error.billing.desc' é diferente de " + result130 + " <errors.getFieldError('billing.paymentDesc').getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result131 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(2, errors.getAllErrors().size())
nova chamada: assertEquals(2, errors.getAllErrors().size(), "Era esperado valores iguais, mas  2 é diferente de " + result132 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.shipping.shipper", errors.getFieldError("shipping.shipperId").getCode())
nova chamada: assertEquals("error.shipping.shipper", errors.getFieldError("shipping.shipperId").getCode(), "Era esperado valores iguais, mas  'error.shipping.shipper' é diferente de " + result133 + " <errors.getFieldError('shipping.shipperId').getCode()>")
chamada antiga: assertEquals("error.shipping.type", errors.getFieldError("shipping.shippingTypeId").getCode())
nova chamada: assertEquals("error.shipping.type", errors.getFieldError("shipping.shippingTypeId").getCode(), "Era esperado valores iguais, mas  'error.shipping.type' é diferente de " + result134 + " <errors.getFieldError('shipping.shippingTypeId').getCode()>")
chamada antiga: assertEquals(1, errors.getAllErrors().size())
nova chamada: assertEquals(1, errors.getAllErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result135 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.shipping.shippinginfo.length", errors.getFieldError("shipping.shippingInfo").getCode())
nova chamada: assertEquals("error.shipping.shippinginfo.length", errors.getFieldError("shipping.shippingInfo").getCode(), "Era esperado valores iguais, mas  'error.shipping.shippinginfo.length' é diferente de " + result136 + " <errors.getFieldError('shipping.shippingInfo').getCode()>")
chamada antiga: assertEquals(0, errors.getAllErrors().size())
nova chamada: assertEquals(0, errors.getAllErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result137 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals(7, errors.getAllErrors().size())
nova chamada: assertEquals(7, errors.getAllErrors().size(), "Era esperado valores iguais, mas  7 é diferente de " + result138 + " <errors.getAllErrors().size()>")
chamada antiga: assertEquals("error.lineitems.id", errors.getFieldErrors("lineItems").get(0).getCode())
nova chamada: assertEquals("error.lineitems.id", errors.getFieldErrors("lineItems").get(0).getCode(), "Era esperado valores iguais, mas  'error.lineitems.id' é diferente de " + result139 + " <errors.getFieldErrors('lineItems').get(0).getCode()>")
chamada antiga: assertEquals("error.lineitems.price", errors.getFieldErrors("lineItems").get(1).getCode())
nova chamada: assertEquals("error.lineitems.price", errors.getFieldErrors("lineItems").get(1).getCode(), "Era esperado valores iguais, mas  'error.lineitems.price' é diferente de " + result140 + " <errors.getFieldErrors('lineItems').get(1).getCode()>")
chamada antiga: assertEquals("error.lineitems.discount", errors.getFieldErrors("lineItems").get(2).getCode())
nova chamada: assertEquals("error.lineitems.discount", errors.getFieldErrors("lineItems").get(2).getCode(), "Era esperado valores iguais, mas  'error.lineitems.discount' é diferente de " + result141 + " <errors.getFieldErrors('lineItems').get(2).getCode()>")
chamada antiga: assertEquals("error.lineitems.shipping", errors.getFieldErrors("lineItems").get(3).getCode())
nova chamada: assertEquals("error.lineitems.shipping", errors.getFieldErrors("lineItems").get(3).getCode(), "Era esperado valores iguais, mas  'error.lineitems.shipping' é diferente de " + result142 + " <errors.getFieldErrors('lineItems').get(3).getCode()>")
chamada antiga: assertEquals("error.lineitems.handling", errors.getFieldErrors("lineItems").get(4).getCode())
nova chamada: assertEquals("error.lineitems.handling", errors.getFieldErrors("lineItems").get(4).getCode(), "Era esperado valores iguais, mas  'error.lineitems.handling' é diferente de " + result143 + " <errors.getFieldErrors('lineItems').get(4).getCode()>")
chamada antiga: assertEquals("error.lineitems.quantity", errors.getFieldErrors("lineItems").get(5).getCode())
nova chamada: assertEquals("error.lineitems.quantity", errors.getFieldErrors("lineItems").get(5).getCode(), "Era esperado valores iguais, mas  'error.lineitems.quantity' é diferente de " + result144 + " <errors.getFieldErrors('lineItems').get(5).getCode()>")
chamada antiga: assertEquals("error.lineitems.totalprice", errors.getFieldErrors("lineItems").get(6).getCode())
nova chamada: assertEquals("error.lineitems.totalprice", errors.getFieldErrors("lineItems").get(6).getCode(), "Era esperado valores iguais, mas  'error.lineitems.totalprice' é diferente de " + result145 + " <errors.getFieldErrors('lineItems').get(6).getCode()>")
chamada antiga: assertEquals(10, itemWriter.getItems().size())
nova chamada: assertEquals(10, itemWriter.getItems().size(), "Era esperado valores iguais, mas  10 é diferente de " + result146 + " <itemWriter.getItems().size()>")
chamada antiga: assertEquals(5, after)
nova chamada: assertEquals(5, after, "Era esperado valores iguais, mas  5 é diferente de " + " after")
chamada antiga: assertFalse(AggregateItem.getFooter().isHeader())
nova chamada: assertFalse(AggregateItem.getFooter().isHeader(), "Era esperado falso, mas " + result147 + " <AggregateItem.getFooter().isHeader()> é verdadeiro ")
chamada antiga: assertFalse(AggregateItem.getHeader().isFooter())
nova chamada: assertFalse(AggregateItem.getHeader().isFooter(), "Era esperado falso, mas " + result148 + " <AggregateItem.getHeader().isFooter()> é verdadeiro ")
chamada antiga: assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isFooter())
nova chamada: assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "BEGIN" })).isFooter(), "Era esperado falso, mas " + result149 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'BEGIN' })).isFooter()> é verdadeiro ")
chamada antiga: assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isHeader())
nova chamada: assertFalse(mapper.mapFieldSet(new DefaultFieldSet(new String[] { "END" })).isHeader(), "Era esperado falso, mas " + result150 + " <mapper.mapFieldSet(new DefaultFieldSet(new String[] { 'END' })).isHeader()> é verdadeiro ")
chamada antiga: assertFalse(o.getCustomer().isBusinessCustomer())
nova chamada: assertFalse(o.getCustomer().isBusinessCustomer(), "Era esperado falso, mas " + result151 + " <o.getCustomer().isBusinessCustomer()> é verdadeiro ")
chamada antiga: assertEquals(params, operator.getParameters(executionId))
nova chamada: assertEquals(params, operator.getParameters(executionId), "Era esperado valores iguais, mas  params é diferente de " + result152 + " <operator.getParameters(executionId)>")
chamada antiga: assertEquals(params, operator.getParameters(resumedExecutionId))
nova chamada: assertEquals(params, operator.getParameters(resumedExecutionId), "Era esperado valores iguais, mas  params é diferente de " + result153 + " <operator.getParameters(resumedExecutionId)>")
chamada antiga: assertEquals(1, instances.size())
nova chamada: assertEquals(1, instances.size(), "Era esperado valores iguais, mas  1 é diferente de " + result154 + " <instances.size()>")
chamada antiga: assertEquals(2, executions.size())
nova chamada: assertEquals(2, executions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result155 + " <executions.size()>")
chamada antiga: assertEquals(resumedExecutionId, executions.get(0).longValue())
nova chamada: assertEquals(resumedExecutionId, executions.get(0).longValue(), "Era esperado valores iguais, mas  resumedExecutionId é diferente de " + result156 + " <executions.get(0).longValue()>")
chamada antiga: assertEquals(executionId, executions.get(1).longValue())
nova chamada: assertEquals(executionId, executions.get(1).longValue(), "Era esperado valores iguais, mas  executionId é diferente de " + result157 + " <executions.get(1).longValue()>")
chamada antiga: assertTrue(summaries.values().toString().contains(BatchStatus.STOPPED.toString()))
nova chamada: assertTrue(summaries.values().toString().contains(BatchStatus.STOPPED.toString()), "Era esperado verdadeiro, mas " + result158 + " <summaries.values().toString().contains(BatchStatus.STOPPED.toString())> é falso")
chamada antiga: assertEquals(1, names.size())
nova chamada: assertEquals(1, names.size(), "Era esperado valores iguais, mas  1 é diferente de " + result159 + " <names.size()>")
chamada antiga: assertTrue(names.contains(jobName))
nova chamada: assertTrue(names.contains(jobName), "Era esperado verdadeiro, mas " + result160 + " <names.contains(jobName)> é falso")
chamada antiga: assertTrue(exec1 != exec2)
nova chamada: assertTrue(exec1 != exec2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(operator.getParameters(exec1), operator.getParameters(exec2))
nova chamada: assertNotEquals(operator.getParameters(exec1), operator.getParameters(exec2), "Era esperado valores diferentes, mas " + result161 + " <operator.getParameters(exec1)> é igual a " + result162 + " <operator.getParameters(exec2)>")
chamada antiga: assertTrue(executions.contains(exec1))
nova chamada: assertTrue(executions.contains(exec1), "Era esperado verdadeiro, mas " + result163 + " <executions.contains(exec1)> é falso")
chamada antiga: assertTrue(executions.contains(exec2))
nova chamada: assertTrue(executions.contains(exec2), "Era esperado verdadeiro, mas " + result164 + " <executions.contains(exec2)> é falso")
chamada antiga: assertTrue(count > 0)
nova chamada: assertTrue(count > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result165 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result166 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(expectedHash, actualHash)
nova chamada: assertEquals(expectedHash, actualHash, "Era esperado valores iguais, mas  expectedHash é diferente de " + " actualHash")
chamada antiga: assertTrue(count > 0)
nova chamada: assertTrue(count > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result167 + " <execution1.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result168 + " <execution2.getStatus()>")
chamada antiga: assertTrue(id1 != id2)
nova chamada: assertTrue(id1 != id2, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotEquals(execution1.getJobId(), execution2.getJobId())
nova chamada: assertNotEquals(execution1.getJobId(), execution2.getJobId(), "Era esperado valores diferentes, mas " + result169 + " <execution1.getJobId()> é igual a " + result170 + " <execution2.getJobId()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result171 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result172 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepExecution.getReadSkipCount())
nova chamada: assertEquals(1, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result173 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(0, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result174 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result175 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result176 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result177 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result178 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(1, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result179 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result180 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result181 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result182 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result183 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(0, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result184 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result185 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(7, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"))
nova chamada: assertEquals(7, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"), "Era esperado valores iguais, mas  7 é diferente de " + result186 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'TRADE')>")
chamada antiga: assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"))
nova chamada: assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"), "Era esperado valores iguais, mas  5 é diferente de " + result187 + " <JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, 'TRADE', 'VERSION=1')>")
chamada antiga: assertEquals(1, SkipCheckingListener.getProcessSkips())
nova chamada: assertEquals(1, SkipCheckingListener.getProcessSkips(), "Era esperado valores iguais, mas  1 é diferente de " + result188 + " <SkipCheckingListener.getProcessSkips()>")
chamada antiga: assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  2 é diferente de " + result189 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step1"))
nova chamada: assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step1"), "Era esperado valores iguais, mas  '2 records were skipped!' é diferente de " + result190 + " <jdbcTemplate.queryForObject('SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?', String.class, 'skipJob', 'step1')>")
chamada antiga: assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step2"))
nova chamada: assertEquals("2 records were skipped!", jdbcTemplate.queryForObject("SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?", String.class, "skipJob", "step2"), "Era esperado valores iguais, mas  '2 records were skipped!' é diferente de " + result191 + " <jdbcTemplate.queryForObject('SELECT MESSAGE from ERROR_LOG where JOB_NAME = ? and STEP_NAME = ?', String.class, 'skipJob', 'step2')>")
chamada antiga: assertEquals(new BigDecimal("340.45"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY))
nova chamada: assertEquals(new BigDecimal("340.45"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY), "Era esperado valores iguais, mas  new BigDecimal('340.45') é diferente de " + result192 + " <jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY)>")
chamada antiga: assertEquals(Long.valueOf(4L), step1Execution.get("COMMIT_COUNT"))
nova chamada: assertEquals(Long.valueOf(4L), step1Execution.get("COMMIT_COUNT"), "Era esperado valores iguais, mas " + result193 + " <Long.valueOf(4L)> é diferente de " + result194 + " <step1Execution.get('COMMIT_COUNT')>")
chamada antiga: assertEquals(Long.valueOf(8L), step1Execution.get("READ_COUNT"))
nova chamada: assertEquals(Long.valueOf(8L), step1Execution.get("READ_COUNT"), "Era esperado valores iguais, mas " + result195 + " <Long.valueOf(8L)> é diferente de " + result196 + " <step1Execution.get('READ_COUNT')>")
chamada antiga: assertEquals(Long.valueOf(7L), step1Execution.get("WRITE_COUNT"))
nova chamada: assertEquals(Long.valueOf(7L), step1Execution.get("WRITE_COUNT"), "Era esperado valores iguais, mas " + result197 + " <Long.valueOf(7L)> é diferente de " + result198 + " <step1Execution.get('WRITE_COUNT')>")
chamada antiga: assertEquals(5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"))
nova chamada: assertEquals(5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "TRADE"), "Era esperado valores iguais, mas  5 é diferente de " + result199 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'TRADE')>")
chamada antiga: assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"))
nova chamada: assertEquals(5, JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "TRADE", "VERSION=1"), "Era esperado valores iguais, mas  5 é diferente de " + result200 + " <JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, 'TRADE', 'VERSION=1')>")
chamada antiga: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  0 é diferente de " + result201 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertEquals(new BigDecimal("270.75"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY))
nova chamada: assertEquals(new BigDecimal("270.75"), jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY), "Era esperado valores iguais, mas  new BigDecimal('270.75') é diferente de " + result202 + " <jobExecution.getExecutionContext().get(TradeWriter.TOTAL_AMOUNT_KEY)>")
chamada antiga: assertTrue(isConnected())
nova chamada: assertTrue(isConnected(), "Era esperado verdadeiro, mas " + result203 + " <isConnected()> é falso")
chamada antiga: assertEquals(0, errors.size())
nova chamada: assertEquals(0, errors.size(), "Era esperado valores iguais, mas  0 é diferente de " + result204 + " <errors.size()>")
chamada antiga: assertTrue(isConnected())
nova chamada: assertTrue(isConnected(), "Era esperado verdadeiro, mas " + result205 + " <isConnected()> é falso")
chamada antiga: assertEquals(0, errors.size())
nova chamada: assertEquals(0, errors.size(), "Era esperado valores iguais, mas  0 é diferente de " + result206 + " <errors.size()>")
chamada antiga: assertTrue(isConnected())
nova chamada: assertTrue(isConnected(), "Era esperado verdadeiro, mas " + result207 + " <isConnected()> é falso")
chamada antiga: assertTrue(launcher.getJobNames().contains("loopJob"))
nova chamada: assertTrue(launcher.getJobNames().contains("loopJob"), "Era esperado verdadeiro, mas " + result208 + " <launcher.getJobNames().contains('loopJob')> é falso")
chamada antiga: assertTrue(isConnected())
nova chamada: assertTrue(isConnected(), "Era esperado verdadeiro, mas " + result209 + " <isConnected()> é falso")
chamada antiga: assertTrue(launcher.getJobNames().contains("loopJob"))
nova chamada: assertTrue(launcher.getJobNames().contains("loopJob"), "Era esperado verdadeiro, mas " + result210 + " <launcher.getJobNames().contains('loopJob')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result211 + " <jobExecution.getStatus()>")
chamada antiga: assertTrue(ex.getMessage().toLowerCase().contains("planned"))
nova chamada: assertTrue(ex.getMessage().toLowerCase().contains("planned"), "Era esperado verdadeiro, mas " + result212 + " <ex.getMessage().toLowerCase().contains('planned')> é falso")
chamada antiga: assertEquals(before + 2, medium)
nova chamada: assertEquals(before + 2, medium, "Era esperado valores iguais, mas  before + 2 é diferente de " + " medium")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result213 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(before + 5, after)
nova chamada: assertEquals(before + 5, after, "Era esperado valores iguais, mas  before + 5 é diferente de " + " after")
chamada antiga: assertEquals(5, processor.getCounter())
nova chamada: assertEquals(5, processor.getCounter(), "Era esperado valores iguais, mas  5 é diferente de " + result214 + " <processor.getCounter()>")
chamada antiga: assertEquals(0, writer.getItems().size())
nova chamada: assertEquals(0, writer.getItems().size(), "Era esperado valores iguais, mas  0 é diferente de " + result215 + " <writer.getItems().size()>")
chamada antiga: assertEquals(3, writer.getItems().size())
nova chamada: assertEquals(3, writer.getItems().size(), "Era esperado valores iguais, mas  3 é diferente de " + result216 + " <writer.getItems().size()>")
chamada antiga: assertEquals(0, writer.getItems().size())
nova chamada: assertEquals(0, writer.getItems().size(), "Era esperado valores iguais, mas  0 é diferente de " + result217 + " <writer.getItems().size()>")
chamada antiga: assertEquals(3, writer.getItems().size())
nova chamada: assertEquals(3, writer.getItems().size(), "Era esperado valores iguais, mas  3 é diferente de " + result218 + " <writer.getItems().size()>")
chamada antiga: assertEquals(expectedDomainObject(), rowMapper().mapRow(rs, IGNORED_ROW_NUMBER))
nova chamada: assertEquals(expectedDomainObject(), rowMapper().mapRow(rs, IGNORED_ROW_NUMBER), "Era esperado valores iguais, mas " + result219 + " <expectedDomainObject()> é diferente de " + result220 + " <rowMapper().mapRow(rs, IGNORED_ROW_NUMBER)>")
chamada antiga: assertEquals(expectedDomainObject(), fieldSetMapper().mapFieldSet(fieldSet()))
nova chamada: assertEquals(expectedDomainObject(), fieldSetMapper().mapFieldSet(fieldSet()), "Era esperado valores iguais, mas " + result221 + " <expectedDomainObject()> é diferente de " + result222 + " <fieldSetMapper().mapFieldSet(fieldSet())>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result223 + " <list.size()>")
chamada antiga: assertEquals(1, itemWriter.getOutput().size())
nova chamada: assertEquals(1, itemWriter.getOutput().size(), "Era esperado valores iguais, mas  1 é diferente de " + result224 + " <itemWriter.getOutput().size()>")
chamada antiga: assertEquals(3, itemWriter.getOutput().size())
nova chamada: assertEquals(3, itemWriter.getOutput().size(), "Era esperado valores iguais, mas  3 é diferente de " + result225 + " <itemWriter.getOutput().size()>")
chamada antiga: assertEquals("1", itemReader.read())
nova chamada: assertEquals("1", itemReader.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result226 + " <itemReader.read()>")
chamada antiga: assertEquals("2", itemReader.read())
nova chamada: assertEquals("2", itemReader.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result227 + " <itemReader.read()>")
chamada antiga: assertEquals("3", itemReader.read())
nova chamada: assertEquals("3", itemReader.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result228 + " <itemReader.read()>")
chamada antiga: assertNull(itemReader.read())
nova chamada: assertNull(itemReader.read(), "Era esperado nulo, mas " + result229 + " <itemReader.read()> não é nulo")
chamada antiga: assertEquals("1", itemReader.read())
nova chamada: assertEquals("1", itemReader.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result230 + " <itemReader.read()>")
chamada antiga: assertEquals("2", itemReader.read())
nova chamada: assertEquals("2", itemReader.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result231 + " <itemReader.read()>")
chamada antiga: assertEquals("{outputFile=file:./target/output/foo.csv}", stepExecution.getExecutionContext().toString())
nova chamada: assertEquals("{outputFile=file:./target/output/foo.csv}", stepExecution.getExecutionContext().toString(), "Era esperado valores iguais, mas  '{outputFile=file:./target/output/foo.csv}' é diferente de " + result232 + " <stepExecution.getExecutionContext().toString()>")
chamada antiga: assertEquals("{outputFile=spam/foo.csv}", stepExecution.getExecutionContext().toString())
nova chamada: assertEquals("{outputFile=spam/foo.csv}", stepExecution.getExecutionContext().toString(), "Era esperado valores iguais, mas  '{outputFile=spam/foo.csv}' é diferente de " + result233 + " <stepExecution.getExecutionContext().toString()>")
chamada antiga: assertEquals("{spam=foo.csv}", stepExecution.getExecutionContext().toString())
nova chamada: assertEquals("{spam=foo.csv}", stepExecution.getExecutionContext().toString(), "Era esperado valores iguais, mas  '{spam=foo.csv}' é diferente de " + result234 + " <stepExecution.getExecutionContext().toString()>")
chamada antiga: assertEquals("bar.csv", stepExecution.getExecutionContext().getString("outputFile"))
nova chamada: assertEquals("bar.csv", stepExecution.getExecutionContext().getString("outputFile"), "Era esperado valores iguais, mas  'bar.csv' é diferente de " + result235 + " <stepExecution.getExecutionContext().getString('outputFile')>")
chamada antiga: assertEquals(before + 1, after)
nova chamada: assertEquals(before + 1, after, "Era esperado valores iguais, mas  before + 1 é diferente de " + " after")
chamada antiga: assertEquals(2, partition.size())
nova chamada: assertEquals(2, partition.size(), "Era esperado valores iguais, mas  2 é diferente de " + result236 + " <partition.size()>")
chamada antiga: assertEquals(StagingItemWriter.NEW, before)
nova chamada: assertEquals(StagingItemWriter.NEW, before, "Era esperado valores iguais, mas  StagingItemWriter.NEW é diferente de " + " before")
chamada antiga: assertEquals("FOO", item)
nova chamada: assertEquals("FOO", item, "Era esperado valores iguais, mas  'FOO' é diferente de " + " item")
chamada antiga: assertEquals(StagingItemWriter.DONE, after)
nova chamada: assertEquals(StagingItemWriter.DONE, after, "Era esperado valores iguais, mas  StagingItemWriter.DONE é diferente de " + " after")
chamada antiga: assertEquals(StagingItemWriter.DONE, before)
nova chamada: assertEquals(StagingItemWriter.DONE, before, "Era esperado valores iguais, mas  StagingItemWriter.DONE é diferente de " + " before")
chamada antiga: assertEquals(StagingItemWriter.NEW, before)
nova chamada: assertEquals(StagingItemWriter.NEW, before, "Era esperado valores iguais, mas  StagingItemWriter.NEW é diferente de " + " before")
chamada antiga: assertEquals("FOO", wrapper.getItem())
nova chamada: assertEquals("FOO", wrapper.getItem(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result237 + " <wrapper.getItem()>")
chamada antiga: assertEquals(StagingItemWriter.NEW, after)
nova chamada: assertEquals(StagingItemWriter.NEW, after, "Era esperado valores iguais, mas  StagingItemWriter.NEW é diferente de " + " after")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result238 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result239 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, writtenItems.size())
nova chamada: assertEquals(1, writtenItems.size(), "Era esperado valores iguais, mas  1 é diferente de " + result240 + " <writtenItems.size()>")
chamada antiga: assertEquals("foo", writtenItems.get(0).getName())
nova chamada: assertEquals("foo", writtenItems.get(0).getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result241 + " <writtenItems.get(0).getName()>")
chamada antiga: assertEquals(EXPECTED_RESULT, StringUtils.replace(IOUtils.toString(output.getInputStream(), "UTF-8"), System.getProperty("line.separator"), ""))
nova chamada: assertEquals(EXPECTED_RESULT, StringUtils.replace(IOUtils.toString(output.getInputStream(), "UTF-8"), System.getProperty("line.separator"), ""), "Era esperado valores iguais, mas  EXPECTED_RESULT é diferente de " + result242 + " <StringUtils.replace(IOUtils.toString(output.getInputStream(), 'UTF-8'), System.getProperty('line.separator'), '')>")
chamada antiga: assertEquals(4, after)
nova chamada: assertEquals(4, after, "Era esperado valores iguais, mas  4 é diferente de " + " after")
chamada antiga: assertEquals((creditsBeforeUpdate.size() - 1), matches.size())
nova chamada: assertEquals((creditsBeforeUpdate.size() - 1), matches.size(), "Era esperado valores iguais, mas  (creditsBeforeUpdate.size() - 1) é diferente de " + result243 + " <matches.size()>")
chamada antiga: assertFalse(matches.contains(new BigDecimal(2)))
nova chamada: assertFalse(matches.contains(new BigDecimal(2)), "Era esperado falso, mas " + result244 + " <matches.contains(new BigDecimal(2))> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result245 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(inputs.size(), outputs.size())
nova chamada: assertEquals(inputs.size(), outputs.size(), "Era esperado valores iguais, mas " + result246 + " <inputs.size()> é diferente de " + result247 + " <outputs.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, je1.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, je1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result248 + " <je1.getStatus()>")
chamada antiga: Assertions.assertEquals(10, Files.lines(outputResourceFile).count())
nova chamada: assertEquals(10, Files.lines(outputResourceFile).count(), "Era esperado valores iguais, mas  10 é diferente de " + result249 + " <Files.lines(outputResourceFile).count()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, je2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, je2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result250 + " <je2.getStatus()>")
chamada antiga: Assertions.assertEquals(20, Files.lines(outputResourceFile).count())
nova chamada: assertEquals(20, Files.lines(outputResourceFile).count(), "Era esperado valores iguais, mas  20 é diferente de " + result251 + " <Files.lines(outputResourceFile).count()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result252 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result253 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals("Waited for 2 results.", jobExecution.getExitStatus().getExitDescription())
nova chamada: assertEquals("Waited for 2 results.", jobExecution.getExitStatus().getExitDescription(), "Era esperado valores iguais, mas  'Waited for 2 results.' é diferente de " + result254 + " <jobExecution.getExitStatus().getExitDescription()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result255 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(6, receivedMessages.size())
nova chamada: assertEquals(6, receivedMessages.size(), "Era esperado valores iguais, mas  6 é diferente de " + result256 + " <receivedMessages.size()>")
chamada antiga: assertEquals(2, this.errorHandler.getFailedMessages().size())
nova chamada: assertEquals(2, this.errorHandler.getFailedMessages().size(), "Era esperado valores iguais, mas  2 é diferente de " + result257 + " <this.errorHandler.getFailedMessages().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result258 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(inputs.size(), outputs.size())
nova chamada: assertEquals(inputs.size(), outputs.size(), "Era esperado valores iguais, mas " + result259 + " <inputs.size()> é diferente de " + result260 + " <outputs.size()>")
chamada antiga: assertEquals(BatchStatus.STARTED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STARTED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result261 + " <jobExecution.getStatus()>")
chamada antiga: assertTrue(jobExecution.isRunning())
nova chamada: assertTrue(jobExecution.isRunning(), "Era esperado verdadeiro, mas " + result262 + " <jobExecution.isRunning()> é falso")
chamada antiga: assertNotNull(jobExecution.getVersion())
nova chamada: assertNotNull(jobExecution.getVersion(), "Era esperado não nulo, mas " + result263 + " <jobExecution.getVersion()> é nulo")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result264 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STARTED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STARTED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result265 + " <jobExecution.getStatus()>")
chamada antiga: assertTrue(jobExecution.isRunning())
nova chamada: assertTrue(jobExecution.isRunning(), "Era esperado verdadeiro, mas " + result266 + " <jobExecution.isRunning()> é falso")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result267 + " <jobExecution.getStatus()>")
chamada antiga: assertFalse(new File("target/groovyJob/output/files.zip").exists())
nova chamada: assertFalse(new File("target/groovyJob/output/files.zip").exists(), "Era esperado falso, mas " + result268 + " <new File('target/groovyJob/output/files.zip').exists()> é verdadeiro ")
chamada antiga: assertTrue(new File("target/groovyJob/output/files.zip").exists())
nova chamada: assertTrue(new File("target/groovyJob/output/files.zip").exists(), "Era esperado verdadeiro, mas " + result269 + " <new File('target/groovyJob/output/files.zip').exists()> é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result270 + " <list.size()>")
chamada antiga: assertEquals(0, parameters.getParameters().size())
nova chamada: assertEquals(0, parameters.getParameters().size(), "Era esperado valores iguais, mas  0 é diferente de " + result271 + " <parameters.getParameters().size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result272 + " <list.size()>")
chamada antiga: assertEquals("FOO", list.get(0))
nova chamada: assertEquals("FOO", list.get(0), "Era esperado valores iguais, mas  'FOO' é diferente de " + result273 + " <list.get(0)>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result274 + " <list.size()>")
chamada antiga: assertEquals(1, parameters.getParameters().size())
nova chamada: assertEquals(1, parameters.getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result275 + " <parameters.getParameters().size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result276 + " <list.size()>")
chamada antiga: assertEquals("FOO", list.get(0))
nova chamada: assertEquals("FOO", list.get(0), "Era esperado valores iguais, mas  'FOO' é diferente de " + result277 + " <list.get(0)>")
chamada antiga: assertEquals(1, parameters.getParameters().size())
nova chamada: assertEquals(1, parameters.getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result278 + " <parameters.getParameters().size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result279 + " <list.size()>")
chamada antiga: assertEquals("FOO", list.get(0))
nova chamada: assertEquals("FOO", list.get(0), "Era esperado valores iguais, mas  'FOO' é diferente de " + result280 + " <list.get(0)>")
chamada antiga: assertEquals(0, parameters.getParameters().size())
nova chamada: assertEquals(0, parameters.getParameters().size(), "Era esperado valores iguais, mas  0 é diferente de " + result281 + " <parameters.getParameters().size()>")
chamada antiga: assertTrue(true)
nova chamada: assertTrue(true, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("foo: 1", result)
nova chamada: assertEquals("foo: 1", result, "Era esperado valores iguais, mas  'foo: 1' é diferente de " + " result")
chamada antiga: assertEquals(1, AnnotatedEndpoint.count)
nova chamada: assertEquals(1, AnnotatedEndpoint.count, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotatedEndpoint.count")
chamada antiga: assertEquals(2, writtenItems.size())
nova chamada: assertEquals(2, writtenItems.size(), "Era esperado valores iguais, mas  2 é diferente de " + result282 + " <writtenItems.size()>")
chamada antiga: assertTrue(writtenItems.contains("foo"))
nova chamada: assertTrue(writtenItems.contains("foo"), "Era esperado verdadeiro, mas " + result283 + " <writtenItems.contains('foo')> é falso")
chamada antiga: assertTrue(writtenItems.contains("bar"))
nova chamada: assertTrue(writtenItems.contains("bar"), "Era esperado verdadeiro, mas " + result284 + " <writtenItems.contains('bar')> é falso")
chamada antiga: assertEquals(1, writtenItems.size())
nova chamada: assertEquals(1, writtenItems.size(), "Era esperado valores iguais, mas  1 é diferente de " + result285 + " <writtenItems.size()>")
chamada antiga: assertTrue(writtenItems.contains("foo"))
nova chamada: assertTrue(writtenItems.contains("foo"), "Era esperado verdadeiro, mas " + result286 + " <writtenItems.contains('foo')> é falso")
chamada antiga: assertEquals("This was expected", exception.getMessage())
nova chamada: assertEquals("This was expected", exception.getMessage(), "Era esperado valores iguais, mas  'This was expected' é diferente de " + result287 + " <exception.getMessage()>")
chamada antiga: assertFalse(exception instanceof ExecutionException)
nova chamada: assertFalse(exception instanceof ExecutionException, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(0, writtenItems.size())
nova chamada: assertEquals(0, writtenItems.size(), "Era esperado valores iguais, mas  0 é diferente de " + result288 + " <writtenItems.size()>")
chamada antiga: assertTrue(itemWriter.isOpened)
nova chamada: assertTrue(itemWriter.isOpened, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(itemWriter.isUpdated)
nova chamada: assertTrue(itemWriter.isUpdated, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(itemWriter.isClosed)
nova chamada: assertTrue(itemWriter.isClosed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(itemWriter.isOpened)
nova chamada: assertFalse(itemWriter.isOpened, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(itemWriter.isUpdated)
nova chamada: assertFalse(itemWriter.isUpdated, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(itemWriter.isClosed)
nova chamada: assertFalse(itemWriter.isClosed, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("foofoo", result.get())
nova chamada: assertEquals("foofoo", result.get(), "Era esperado valores iguais, mas  'foofoo' é diferente de " + result289 + " <result.get()>")
chamada antiga: assertTrue(context != null && context.getStepExecution() != null)
nova chamada: assertTrue(context != null && context.getStepExecution() != null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("foofoo", result.get())
nova chamada: assertEquals("foofoo", result.get(), "Era esperado valores iguais, mas  'foofoo' é diferente de " + result290 + " <result.get()>")
chamada antiga: assertEquals("The id attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The id attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The id attribute must be specified' é diferente de " + result291 + " <iae.getMessage()>")
chamada antiga: assertEquals("The message-template attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The message-template attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The message-template attribute must be specified' é diferente de " + result292 + " <iae.getMessage()>")
chamada antiga: assertEquals("The step attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The step attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The step attribute must be specified' é diferente de " + result293 + " <iae.getMessage()>")
chamada antiga: assertEquals("The reply-channel attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The reply-channel attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The reply-channel attribute must be specified' é diferente de " + result294 + " <iae.getMessage()>")
chamada antiga: assertEquals("The id attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The id attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The id attribute must be specified' é diferente de " + result295 + " <iae.getMessage()>")
chamada antiga: assertEquals("The input-channel attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The input-channel attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The input-channel attribute must be specified' é diferente de " + result296 + " <iae.getMessage()>")
chamada antiga: assertEquals("The item-writer attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The item-writer attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The item-writer attribute must be specified' é diferente de " + result297 + " <iae.getMessage()>")
chamada antiga: assertEquals("The output-channel attribute must be specified", iae.getMessage())
nova chamada: assertEquals("The output-channel attribute must be specified", iae.getMessage(), "Era esperado valores iguais, mas  'The output-channel attribute must be specified' é diferente de " + result298 + " <iae.getMessage()>")
chamada antiga: assertEquals("requestChannel", inputChannel.getComponentName())
nova chamada: assertEquals("requestChannel", inputChannel.getComponentName(), "Era esperado valores iguais, mas  'requestChannel' é diferente de " + result299 + " <inputChannel.getComponentName()>")
chamada antiga: assertNotNull(jobLaunchingMessageHandler)
nova chamada: assertNotNull(jobLaunchingMessageHandler, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(this.consumer.isRunning())
nova chamada: assertFalse(this.consumer.isRunning(), "Era esperado falso, mas " + result300 + " <this.consumer.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(this.consumer.isRunning())
nova chamada: assertTrue(this.consumer.isRunning(), "Era esperado verdadeiro, mas " + result301 + " <this.consumer.isRunning()> é falso")
chamada antiga: assertEquals("No bean named 'jobLauncher' available", exception.getCause().getMessage())
nova chamada: assertEquals("No bean named 'jobLauncher' available", exception.getCause().getMessage(), "Era esperado valores iguais, mas  'No bean named 'jobLauncher' available' é diferente de " + result302 + " <exception.getCause().getMessage()>")
chamada antiga: assertNotNull(jobLaunchingMessageHandler)
nova chamada: assertNotNull(jobLaunchingMessageHandler, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo: 0: 1", result)
nova chamada: assertEquals("foo: 0: 1", result, "Era esperado valores iguais, mas  'foo: 0: 1' é diferente de " + " result")
chamada antiga: assertNull(processor.process("filter"))
nova chamada: assertNull(processor.process("filter"), "Era esperado nulo, mas " + result303 + " <processor.process('filter')> não é nulo")
chamada antiga: assertEquals(3, splitter.count)
nova chamada: assertEquals(3, splitter.count, "Era esperado valores iguais, mas  3 é diferente de " + " splitter.count")
chamada antiga: assertEquals(3, service.count)
nova chamada: assertEquals(3, service.count, "Era esperado valores iguais, mas  3 é diferente de " + " service.count")
chamada antiga: assertNotNull(taskletStep)
nova chamada: assertNotNull(taskletStep, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(taskletStep)
nova chamada: assertNotNull(taskletStep, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ReflectionTestUtils.getField(provider, "itemReader"), itemReader)
nova chamada: assertEquals(ReflectionTestUtils.getField(provider, "itemReader"), itemReader, "Era esperado valores iguais, mas " + result304 + " <ReflectionTestUtils.getField(provider, 'itemReader')> é diferente de " + " itemReader")
chamada antiga: assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"))
nova chamada: assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(ReflectionTestUtils.getField(taskletStep, "jobRepository"), this.jobRepository)
nova chamada: assertEquals(ReflectionTestUtils.getField(taskletStep, "jobRepository"), this.jobRepository, "Era esperado valores iguais, mas " + result305 + " <ReflectionTestUtils.getField(taskletStep, 'jobRepository')> é diferente de " + " this.jobRepository")
chamada antiga: assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionManager"), this.transactionManager)
nova chamada: assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionManager"), this.transactionManager, "Era esperado valores iguais, mas " + result306 + " <ReflectionTestUtils.getField(taskletStep, 'transactionManager')> é diferente de " + " this.transactionManager")
chamada antiga: assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionAttribute"), transactionAttribute)
nova chamada: assertEquals(ReflectionTestUtils.getField(taskletStep, "transactionAttribute"), transactionAttribute, "Era esperado valores iguais, mas " + result307 + " <ReflectionTestUtils.getField(taskletStep, 'transactionAttribute')> é diferente de " + " transactionAttribute")
chamada antiga: assertEquals(ReflectionTestUtils.getField(itemWriter, "replyChannel"), this.inputChannel)
nova chamada: assertEquals(ReflectionTestUtils.getField(itemWriter, "replyChannel"), this.inputChannel, "Era esperado valores iguais, mas " + result308 + " <ReflectionTestUtils.getField(itemWriter, 'replyChannel')> é diferente de " + " this.inputChannel")
chamada antiga: assertEquals(ReflectionTestUtils.getField(messagingTemplate, "defaultDestination"), this.outputChannel)
nova chamada: assertEquals(ReflectionTestUtils.getField(messagingTemplate, "defaultDestination"), this.outputChannel, "Era esperado valores iguais, mas " + result309 + " <ReflectionTestUtils.getField(messagingTemplate, 'defaultDestination')> é diferente de " + " this.outputChannel")
chamada antiga: assertEquals(ReflectionTestUtils.getField(processor, "itemProcessor"), itemProcessor)
nova chamada: assertEquals(ReflectionTestUtils.getField(processor, "itemProcessor"), itemProcessor, "Era esperado valores iguais, mas " + result310 + " <ReflectionTestUtils.getField(processor, 'itemProcessor')> é diferente de " + " itemProcessor")
chamada antiga: assertEquals((int) ReflectionTestUtils.getField(taskletStep, "startLimit"), 3)
nova chamada: assertEquals((int) ReflectionTestUtils.getField(taskletStep, "startLimit"), 3, "Era esperado valores iguais, mas  (int) ReflectionTestUtils.getField(taskletStep, 'startLimit') é diferente de " + " 3")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(taskletStep, "allowStartIfComplete"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(taskletStep, "allowStartIfComplete"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(stepOperationsUsed, stepOperations)
nova chamada: assertEquals(stepOperationsUsed, stepOperations, "Era esperado valores iguais, mas  stepOperationsUsed é diferente de " + " stepOperations")
chamada antiga: assertEquals(((List) ReflectionTestUtils.getField(compositeItemStream, "streams")).size(), 2)
nova chamada: assertEquals(((List) ReflectionTestUtils.getField(compositeItemStream, "streams")).size(), 2, "Era esperado valores iguais, mas " + result311 + " <((List) ReflectionTestUtils.getField(compositeItemStream, 'streams')).size()> é diferente de " + " 2")
chamada antiga: assertNotNull(ReflectionTestUtils.getField(processor, "keyGenerator"))
nova chamada: assertNotNull(ReflectionTestUtils.getField(processor, "keyGenerator"), "Era esperado não nulo, mas " + result312 + " <ReflectionTestUtils.getField(processor, 'keyGenerator')> é nulo")
chamada antiga: assertEquals(stepExecution.getSkipCount(), 2)
nova chamada: assertEquals(stepExecution.getSkipCount(), 2, "Era esperado valores iguais, mas " + result313 + " <stepExecution.getSkipCount()> é diferente de " + " 2")
chamada antiga: assertEquals(stepExecution.getRollbackCount(), 3)
nova chamada: assertEquals(stepExecution.getRollbackCount(), 3, "Era esperado valores iguais, mas " + result314 + " <stepExecution.getRollbackCount()> é diferente de " + " 3")
chamada antiga: assertEquals(111L, request.getJobId())
nova chamada: assertEquals(111L, request.getJobId(), "Era esperado valores iguais, mas  111L é diferente de " + result315 + " <request.getJobId()>")
chamada antiga: assertEquals(2, request.getItems().size())
nova chamada: assertEquals(2, request.getItems().size(), "Era esperado valores iguais, mas  2 é diferente de " + result316 + " <request.getItems().size()>")
chamada antiga: assertNotNull(request.getStepContribution())
nova chamada: assertNotNull(request.getStepContribution(), "Era esperado não nulo, mas " + result317 + " <request.getStepContribution()> é nulo")
chamada antiga: assertNotNull(result.getStepContribution())
nova chamada: assertNotNull(result.getStepContribution(), "Era esperado não nulo, mas " + result318 + " <result.getStepContribution()> é nulo")
chamada antiga: assertEquals(111L, result.getJobId())
nova chamada: assertEquals(111L, result.getJobId(), "Era esperado valores iguais, mas  111L é diferente de " + result319 + " <result.getJobId()>")
chamada antiga: assertEquals(2, result.getItems().size())
nova chamada: assertEquals(2, result.getItems().size(), "Era esperado valores iguais, mas  2 é diferente de " + result320 + " <result.getItems().size()>")
chamada antiga: assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.EXPECTED))
nova chamada: assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.EXPECTED), "Era esperado valores iguais, mas  0 é diferente de " + result321 + " <executionContext.getInt(ChunkMessageChannelItemWriter.EXPECTED)>")
chamada antiga: assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.ACTUAL))
nova chamada: assertEquals(0, executionContext.getInt(ChunkMessageChannelItemWriter.ACTUAL), "Era esperado valores iguais, mas  0 é diferente de " + result322 + " <executionContext.getInt(ChunkMessageChannelItemWriter.ACTUAL)>")
chamada antiga: assertEquals(6, TestItemWriter.count)
nova chamada: assertEquals(6, TestItemWriter.count, "Era esperado valores iguais, mas  6 é diferente de " + " TestItemWriter.count")
chamada antiga: assertEquals(6, stepExecution.getReadCount())
nova chamada: assertEquals(6, stepExecution.getReadCount(), "Era esperado valores iguais, mas  6 é diferente de " + result323 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(8, TestItemWriter.count)
nova chamada: assertEquals(8, TestItemWriter.count, "Era esperado valores iguais, mas  8 é diferente de " + " TestItemWriter.count")
chamada antiga: assertEquals(6, stepExecution.getReadCount())
nova chamada: assertEquals(6, stepExecution.getReadCount(), "Era esperado valores iguais, mas  6 é diferente de " + result324 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result325 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result326 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result327 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, TestItemWriter.count)
nova chamada: assertEquals(1, TestItemWriter.count, "Era esperado valores iguais, mas  1 é diferente de " + " TestItemWriter.count")
chamada antiga: assertEquals(0, stepExecution.getReadCount())
nova chamada: assertEquals(0, stepExecution.getReadCount(), "Era esperado valores iguais, mas  0 é diferente de " + result328 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result329 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result330 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result331 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(1 <= TestItemWriter.count)
nova chamada: assertTrue(1 <= TestItemWriter.count, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(6 >= TestItemWriter.count)
nova chamada: assertTrue(6 >= TestItemWriter.count, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result332 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result333 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result334 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result335 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(0, TestItemWriter.count)
nova chamada: assertEquals(0, TestItemWriter.count, "Era esperado valores iguais, mas  0 é diferente de " + " TestItemWriter.count")
chamada antiga: assertEquals(0, stepExecution.getReadCount())
nova chamada: assertEquals(0, stepExecution.getReadCount(), "Era esperado valores iguais, mas  0 é diferente de " + result336 + " <stepExecution.getReadCount()>")
chamada antiga: assertTrue(1 <= TestItemWriter.count)
nova chamada: assertTrue(1 <= TestItemWriter.count, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(6 >= TestItemWriter.count)
nova chamada: assertTrue(6 >= TestItemWriter.count, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result337 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result338 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result339 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(integrationFlow)
nova chamada: assertNotNull(integrationFlow, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result340 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result341 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result342 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result343 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result344 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result345 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result346 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result347 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(9, stepExecution.getWriteCount())
nova chamada: assertEquals(9, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  9 é diferente de " + result348 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result349 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result350 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result351 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result352 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result353 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result354 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result355 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result356 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result357 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result358 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result359 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result360 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(9, stepExecution.getWriteCount())
nova chamada: assertEquals(9, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  9 é diferente de " + result361 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result362 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result363 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result364 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result365 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(Long.valueOf(111L), response.getJobId())
nova chamada: assertEquals(Long.valueOf(111L), response.getJobId(), "Era esperado valores iguais, mas " + result366 + " <Long.valueOf(111L)> é diferente de " + result367 + " <response.getJobId()>")
chamada antiga: assertNotNull(response.getStepContribution())
nova chamada: assertNotNull(response.getStepContribution(), "Era esperado não nulo, mas " + result368 + " <response.getStepContribution()> é nulo")
chamada antiga: assertNotNull(result.getStepContribution())
nova chamada: assertNotNull(result.getStepContribution(), "Era esperado não nulo, mas " + result369 + " <result.getStepContribution()> é nulo")
chamada antiga: assertEquals(Long.valueOf(111L), result.getJobId())
nova chamada: assertEquals(Long.valueOf(111L), result.getJobId(), "Era esperado valores iguais, mas " + result370 + " <Long.valueOf(111L)> é diferente de " + result371 + " <result.getJobId()>")
chamada antiga: assertTrue(interceptor.preReceive(channel))
nova chamada: assertTrue(interceptor.preReceive(channel), "Era esperado verdadeiro, mas " + result372 + " <interceptor.preReceive(channel)> é falso")
chamada antiga: assertEquals("foo", channel.receive(10L).getPayload())
nova chamada: assertEquals("foo", channel.receive(10L).getPayload(), "Era esperado valores iguais, mas  'foo' é diferente de " + result373 + " <channel.receive(10L).getPayload()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result374 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result375 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result376 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result377 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result378 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result379 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result380 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result381 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(9, stepExecution.getWriteCount())
nova chamada: assertEquals(9, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  9 é diferente de " + result382 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result383 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result384 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result385 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result386 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result387 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result388 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(9, stepExecution.getWriteCount())
nova chamada: assertEquals(9, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  9 é diferente de " + result389 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result390 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(9, stepExecution.getReadCount())
nova chamada: assertEquals(9, stepExecution.getReadCount(), "Era esperado valores iguais, mas  9 é diferente de " + result391 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(7, stepExecution.getWriteCount())
nova chamada: assertEquals(7, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result392 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(stepContribution, response.getStepContribution())
nova chamada: assertEquals(stepContribution, response.getStepContribution(), "Era esperado valores iguais, mas  stepContribution é diferente de " + result393 + " <response.getStepContribution()>")
chamada antiga: assertEquals(12, response.getJobId().longValue())
nova chamada: assertEquals(12, response.getJobId().longValue(), "Era esperado valores iguais, mas  12 é diferente de " + result394 + " <response.getJobId().longValue()>")
chamada antiga: assertTrue(response.isSuccessful())
nova chamada: assertTrue(response.isSuccessful(), "Era esperado verdadeiro, mas " + result395 + " <response.isSuccessful()> é falso")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobLauncher.run(job, new JobParameters()))
nova chamada: assertNotNull(jobLauncher.run(job, new JobParameters()), "Era esperado não nulo, mas " + result396 + " <jobLauncher.run(job, new JobParameters())> é nulo")
chamada antiga: assertEquals(1, after - before)
nova chamada: assertEquals(1, after - before, "Era esperado valores iguais, mas  1 é diferente de " + " after - before")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result397 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(getField(step, "startLimit"), startLimit)
nova chamada: assertEquals(getField(step, "startLimit"), startLimit, "Era esperado valores iguais, mas " + result398 + " <getField(step, 'startLimit')> é diferente de " + " startLimit")
chamada antiga: assertEquals(getField(step, "jobRepository"), this.jobRepository)
nova chamada: assertEquals(getField(step, "jobRepository"), this.jobRepository, "Era esperado valores iguais, mas " + result399 + " <getField(step, 'jobRepository')> é diferente de " + " this.jobRepository")
chamada antiga: assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator)
nova chamada: assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator, "Era esperado valores iguais, mas " + result400 + " <getField(step, 'stepExecutionAggregator')> é diferente de " + " stepExecutionAggregator")
chamada antiga: assertTrue((Boolean) getField(step, "allowStartIfComplete"))
nova chamada: assertTrue((Boolean) getField(step, "allowStartIfComplete"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(partitionHandler)
nova chamada: assertNotNull(partitionHandler, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(partitionHandler instanceof MessageChannelPartitionHandler)
nova chamada: assertTrue(partitionHandler instanceof MessageChannelPartitionHandler, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize)
nova chamada: assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize, "Era esperado valores iguais, mas " + result401 + " <getField(messageChannelPartitionHandler, 'gridSize')> é diferente de " + " gridSize")
chamada antiga: assertEquals(getField(messageChannelPartitionHandler, "pollInterval"), pollInterval)
nova chamada: assertEquals(getField(messageChannelPartitionHandler, "pollInterval"), pollInterval, "Era esperado valores iguais, mas " + result402 + " <getField(messageChannelPartitionHandler, 'pollInterval')> é diferente de " + " pollInterval")
chamada antiga: assertEquals(getField(messageChannelPartitionHandler, "timeout"), timeout)
nova chamada: assertEquals(getField(messageChannelPartitionHandler, "timeout"), timeout, "Era esperado valores iguais, mas " + result403 + " <getField(messageChannelPartitionHandler, 'timeout')> é diferente de " + " timeout")
chamada antiga: assertNotNull(messagingGateway)
nova chamada: assertNotNull(messagingGateway, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel)
nova chamada: assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel, "Era esperado valores iguais, mas " + result404 + " <getField(messagingTemplate, 'defaultDestination')> é diferente de " + " outputChannel")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(getField(step, "startLimit"), startLimit)
nova chamada: assertEquals(getField(step, "startLimit"), startLimit, "Era esperado valores iguais, mas " + result405 + " <getField(step, 'startLimit')> é diferente de " + " startLimit")
chamada antiga: assertEquals(getField(step, "jobRepository"), this.jobRepository)
nova chamada: assertEquals(getField(step, "jobRepository"), this.jobRepository, "Era esperado valores iguais, mas " + result406 + " <getField(step, 'jobRepository')> é diferente de " + " this.jobRepository")
chamada antiga: assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator)
nova chamada: assertEquals(getField(step, "stepExecutionAggregator"), stepExecutionAggregator, "Era esperado valores iguais, mas " + result407 + " <getField(step, 'stepExecutionAggregator')> é diferente de " + " stepExecutionAggregator")
chamada antiga: assertTrue((Boolean) getField(step, "allowStartIfComplete"))
nova chamada: assertTrue((Boolean) getField(step, "allowStartIfComplete"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(partitionHandler)
nova chamada: assertNotNull(partitionHandler, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(partitionHandler instanceof MessageChannelPartitionHandler)
nova chamada: assertTrue(partitionHandler instanceof MessageChannelPartitionHandler, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize)
nova chamada: assertEquals(getField(messageChannelPartitionHandler, "gridSize"), gridSize, "Era esperado valores iguais, mas " + result408 + " <getField(messageChannelPartitionHandler, 'gridSize')> é diferente de " + " gridSize")
chamada antiga: assertNotNull(replyChannel)
nova chamada: assertNotNull(replyChannel, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(replyChannel instanceof QueueChannel)
nova chamada: assertTrue(replyChannel instanceof QueueChannel, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(messagingGateway)
nova chamada: assertNotNull(messagingGateway, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel)
nova chamada: assertEquals(getField(messagingTemplate, "defaultDestination"), outputChannel, "Era esperado valores iguais, mas " + result409 + " <getField(messagingTemplate, 'defaultDestination')> é diferente de " + " outputChannel")
chamada antiga: Assertions.assertLinesMatch(Files.lines(expectedFile), Files.lines(actualFile))
nova chamada: assertLinesMatch(Files.lines(expectedFile), Files.lines(actualFile), "Era esperado que as linhas combinassem, mas " + result410 + " <Files.lines(expectedFile)> não corresponde a " + result411 + " <Files.lines(actualFile)>")
chamada antiga: assertEquals(8, count)
nova chamada: assertEquals(8, count, "Era esperado valores iguais, mas  8 é diferente de " + " count")
chamada antiga: assertEquals(4, count)
nova chamada: assertEquals(4, count, "Era esperado valores iguais, mas  4 é diferente de " + " count")
chamada antiga: assertEquals("Planned failure", exception.getMessage())
nova chamada: assertEquals("Planned failure", exception.getMessage(), "Era esperado valores iguais, mas  'Planned failure' é diferente de " + result412 + " <exception.getMessage()>")
chamada antiga: assertEquals(4, count)
nova chamada: assertEquals(4, count, "Era esperado valores iguais, mas  4 é diferente de " + " count")
chamada antiga: assertEquals(SERIALIZED_REQUEST, serializedRequest)
nova chamada: assertEquals(SERIALIZED_REQUEST, serializedRequest, "Era esperado valores iguais, mas  SERIALIZED_REQUEST é diferente de " + " serializedRequest")
chamada antiga: assertNotNull(deserializedRequest)
nova chamada: assertNotNull(deserializedRequest, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("step", deserializedRequest.getStepName())
nova chamada: assertEquals("step", deserializedRequest.getStepName(), "Era esperado valores iguais, mas  'step' é diferente de " + result413 + " <deserializedRequest.getStepName()>")
chamada antiga: assertEquals(1L, deserializedRequest.getJobExecutionId().longValue())
nova chamada: assertEquals(1L, deserializedRequest.getJobExecutionId().longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result414 + " <deserializedRequest.getJobExecutionId().longValue()>")
chamada antiga: assertEquals(1L, deserializedRequest.getStepExecutionId().longValue())
nova chamada: assertEquals(1L, deserializedRequest.getStepExecutionId().longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result415 + " <deserializedRequest.getStepExecutionId().longValue()>")
chamada antiga: assertNotNull(stepLocator.getStep("foo"))
nova chamada: assertNotNull(stepLocator.getStep("foo"), "Era esperado não nulo, mas " + result416 + " <stepLocator.getStep('foo')> é nulo")
chamada antiga: assertEquals(2, stepLocator.getStepNames().size())
nova chamada: assertEquals(2, stepLocator.getStepNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result417 + " <stepLocator.getStepNames().size()>")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobLauncher.run(job, new JobParameters()))
nova chamada: assertNotNull(jobLauncher.run(job, new JobParameters()), "Era esperado não nulo, mas " + result418 + " <jobLauncher.run(job, new JobParameters())> é nulo")
chamada antiga: assertEquals(1, after - before)
nova chamada: assertEquals(1, after - before, "Era esperado valores iguais, mas  1 é diferente de " + " after - before")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result419 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result420 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(executions.isEmpty())
nova chamada: assertTrue(executions.isEmpty(), "Era esperado verdadeiro, mas " + result421 + " <executions.isEmpty()> é falso")
chamada antiga: assertNotNull(executions)
nova chamada: assertNotNull(executions, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(executions.isEmpty())
nova chamada: assertTrue(executions.isEmpty(), "Era esperado verdadeiro, mas " + result422 + " <executions.isEmpty()> é falso")
chamada antiga: assertNotNull(executions)
nova chamada: assertNotNull(executions, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(executions.isEmpty())
nova chamada: assertTrue(executions.isEmpty(), "Era esperado verdadeiro, mas " + result423 + " <executions.isEmpty()> é falso")
chamada antiga: assertNotNull(executions)
nova chamada: assertNotNull(executions, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, executions.size())
nova chamada: assertEquals(3, executions.size(), "Era esperado valores iguais, mas  3 é diferente de " + result424 + " <executions.size()>")
chamada antiga: assertTrue(executions.contains(partition1))
nova chamada: assertTrue(executions.contains(partition1), "Era esperado verdadeiro, mas " + result425 + " <executions.contains(partition1)> é falso")
chamada antiga: assertTrue(executions.contains(partition2))
nova chamada: assertTrue(executions.contains(partition2), "Era esperado verdadeiro, mas " + result426 + " <executions.contains(partition2)> é falso")
chamada antiga: assertTrue(executions.contains(partition4))
nova chamada: assertTrue(executions.contains(partition4), "Era esperado verdadeiro, mas " + result427 + " <executions.contains(partition4)> é falso")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobLauncher.run(job, new JobParameters()))
nova chamada: assertNotNull(jobLauncher.run(job, new JobParameters()), "Era esperado não nulo, mas " + result428 + " <jobLauncher.run(job, new JobParameters())> é nulo")
chamada antiga: assertEquals(1, after - before)
nova chamada: assertEquals(1, after - before, "Era esperado valores iguais, mas  1 é diferente de " + " after - before")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result429 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result430 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(expected, processed)
nova chamada: assertEquals(expected, processed, "Era esperado valores iguais, mas  expected é diferente de " + " processed")
chamada antiga: assertEquals(expected, processed)
nova chamada: assertEquals(expected, processed, "Era esperado valores iguais, mas  expected é diferente de " + " processed")
chamada antiga: assertEquals(2, handled.size())
nova chamada: assertEquals(2, handled.size(), "Era esperado valores iguais, mas  2 é diferente de " + result431 + " <handled.size()>")
chamada antiga: assertEquals(4, service.getProcessed().size())
nova chamada: assertEquals(4, service.getProcessed().size(), "Era esperado valores iguais, mas  4 é diferente de " + result432 + " <service.getProcessed().size()>")
chamada antiga: assertEquals(expected, service.getProcessed())
nova chamada: assertEquals(expected, service.getProcessed(), "Era esperado valores iguais, mas  expected é diferente de " + result433 + " <service.getProcessed()>")
chamada antiga: assertEquals(6, service.getProcessed().size())
nova chamada: assertEquals(6, service.getProcessed().size(), "Era esperado valores iguais, mas  6 é diferente de " + result434 + " <service.getProcessed().size()>")
chamada antiga: assertEquals(1, recoverer.getRecovered().size())
nova chamada: assertEquals(1, recoverer.getRecovered().size(), "Era esperado valores iguais, mas  1 é diferente de " + result435 + " <recoverer.getRecovered().size()>")
chamada antiga: assertEquals(expected, service.getProcessed())
nova chamada: assertEquals(expected, service.getProcessed(), "Era esperado valores iguais, mas  expected é diferente de " + result436 + " <service.getProcessed()>")
chamada antiga: assertEquals(expected, processed)
nova chamada: assertEquals(expected, processed, "Era esperado valores iguais, mas  expected é diferente de " + " processed")
chamada antiga: assertEquals(2, handled.size())
nova chamada: assertEquals(2, handled.size(), "Era esperado valores iguais, mas  2 é diferente de " + result437 + " <handled.size()>")
chamada antiga: assertEquals(4, service.getProcessed().size())
nova chamada: assertEquals(4, service.getProcessed().size(), "Era esperado valores iguais, mas  4 é diferente de " + result438 + " <service.getProcessed().size()>")
chamada antiga: assertEquals(expected, service.getProcessed())
nova chamada: assertEquals(expected, service.getProcessed(), "Era esperado valores iguais, mas  expected é diferente de " + result439 + " <service.getProcessed()>")
chamada antiga: assertEquals(7, service.getProcessed().size())
nova chamada: assertEquals(7, service.getProcessed().size(), "Era esperado valores iguais, mas  7 é diferente de " + result440 + " <service.getProcessed().size()>")
chamada antiga: assertEquals(1, recoverer.getRecovered().size())
nova chamada: assertEquals(1, recoverer.getRecovered().size(), "Era esperado valores iguais, mas  1 é diferente de " + result441 + " <recoverer.getRecovered().size()>")
chamada antiga: assertEquals(expected, service.getProcessed())
nova chamada: assertEquals(expected, service.getProcessed(), "Era esperado valores iguais, mas  expected é diferente de " + result442 + " <service.getProcessed()>")
chamada antiga: assertEquals("This is a JobExecutionException.", exception.getCause().getMessage())
nova chamada: assertEquals("This is a JobExecutionException.", exception.getCause().getMessage(), "Era esperado valores iguais, mas  'This is a JobExecutionException.' é diferente de " + result443 + " <exception.getCause().getMessage()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result444 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result445 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result446 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result447 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result448 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result449 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(message)
nova chamada: assertNotNull(message, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(message)
nova chamada: assertNotNull(message, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result450 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result451 + " <list.size()>")
chamada antiga: assertTrue(list.contains("foo"))
nova chamada: assertTrue(list.contains("foo"), "Era esperado verdadeiro, mas " + result452 + " <list.contains('foo')> é falso")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertFalse(ExampleItemReader.fail)
nova chamada: assertFalse(ExampleItemReader.fail, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("testString1", context.getString("1"))
nova chamada: assertEquals("testString1", context.getString("1"), "Era esperado valores iguais, mas  'testString1' é diferente de " + result453 + " <context.getString('1')>")
chamada antiga: assertEquals("testString2", context.getString("2"))
nova chamada: assertEquals("testString2", context.getString("2"), "Era esperado valores iguais, mas  'testString2' é diferente de " + result454 + " <context.getString('2')>")
chamada antiga: assertEquals("defaultString", context.getString("55", "defaultString"))
nova chamada: assertEquals("defaultString", context.getString("55", "defaultString"), "Era esperado valores iguais, mas  'defaultString' é diferente de " + result455 + " <context.getString('55', 'defaultString')>")
chamada antiga: assertEquals(3, context.getLong("3"))
nova chamada: assertEquals(3, context.getLong("3"), "Era esperado valores iguais, mas  3 é diferente de " + result456 + " <context.getLong('3')>")
chamada antiga: assertEquals(5, context.getLong("55", 5))
nova chamada: assertEquals(5, context.getLong("55", 5), "Era esperado valores iguais, mas  5 é diferente de " + result457 + " <context.getLong('55', 5)>")
chamada antiga: assertEquals(5, context.getInt("5"))
nova chamada: assertEquals(5, context.getInt("5"), "Era esperado valores iguais, mas  5 é diferente de " + result458 + " <context.getInt('5')>")
chamada antiga: assertEquals(6, context.getInt("55", 6))
nova chamada: assertEquals(6, context.getInt("55", 6), "Era esperado valores iguais, mas  6 é diferente de " + result459 + " <context.getInt('55', 6)>")
chamada antiga: assertTrue(context.isEmpty())
nova chamada: assertTrue(context.isEmpty(), "Era esperado verdadeiro, mas " + result460 + " <context.isEmpty()> é falso")
chamada antiga: assertFalse(context.isEmpty())
nova chamada: assertFalse(context.isEmpty(), "Era esperado falso, mas " + result461 + " <context.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(context.isDirty())
nova chamada: assertFalse(context.isDirty(), "Era esperado falso, mas " + result462 + " <context.isDirty()> é verdadeiro ")
chamada antiga: assertTrue(context.isDirty())
nova chamada: assertTrue(context.isDirty(), "Era esperado verdadeiro, mas " + result463 + " <context.isDirty()> é falso")
chamada antiga: assertFalse(context.isDirty())
nova chamada: assertFalse(context.isDirty(), "Era esperado falso, mas " + result464 + " <context.isDirty()> é verdadeiro ")
chamada antiga: assertTrue(context.isDirty())
nova chamada: assertTrue(context.isDirty(), "Era esperado verdadeiro, mas " + result465 + " <context.isDirty()> é falso")
chamada antiga: assertFalse(context.isDirty())
nova chamada: assertFalse(context.isDirty(), "Era esperado falso, mas " + result466 + " <context.isDirty()> é verdadeiro ")
chamada antiga: assertTrue(context.isDirty())
nova chamada: assertTrue(context.isDirty(), "Era esperado verdadeiro, mas " + result467 + " <context.isDirty()> é falso")
chamada antiga: assertTrue(context.isDirty())
nova chamada: assertTrue(context.isDirty(), "Era esperado verdadeiro, mas " + result468 + " <context.isDirty()> é falso")
chamada antiga: assertFalse(context.isDirty())
nova chamada: assertFalse(context.isDirty(), "Era esperado falso, mas " + result469 + " <context.isDirty()> é verdadeiro ")
chamada antiga: assertTrue(context.containsKey("1"))
nova chamada: assertTrue(context.containsKey("1"), "Era esperado verdadeiro, mas " + result470 + " <context.containsKey('1')> é falso")
chamada antiga: assertTrue(context.containsValue("testString"))
nova chamada: assertTrue(context.containsValue("testString"), "Era esperado verdadeiro, mas " + result471 + " <context.containsValue('testString')> é falso")
chamada antiga: assertFalse(tempContext.equals(context))
nova chamada: assertFalse(tempContext.equals(context), "Era esperado falso, mas " + result472 + " <tempContext.equals(context)> é verdadeiro ")
chamada antiga: assertTrue(tempContext.equals(context))
nova chamada: assertTrue(tempContext.equals(context), "Era esperado verdadeiro, mas " + result473 + " <tempContext.equals(context)> é falso")
chamada antiga: assertNull(context.get("1"))
nova chamada: assertNull(context.get("1"), "Era esperado nulo, mas " + result474 + " <context.get('1')> não é nulo")
chamada antiga: assertFalse(context.containsKey("1"))
nova chamada: assertFalse(context.containsKey("1"), "Era esperado falso, mas " + result475 + " <context.containsKey('1')> é verdadeiro ")
chamada antiga: assertNull(context.get("does not exist"))
nova chamada: assertNull(context.get("does not exist"), "Era esperado nulo, mas " + result476 + " <context.get('does not exist')> não é nulo")
chamada antiga: assertEquals(context, clone)
nova chamada: assertEquals(context, clone, "Era esperado valores iguais, mas  context é diferente de " + " clone")
chamada antiga: assertEquals(7, ((TestSerializable) clone.get("5")).value)
nova chamada: assertEquals(7, ((TestSerializable) clone.get("5")).value, "Era esperado valores iguais, mas  7 é diferente de " + " ((TestSerializable) clone.get('5')).value")
chamada antiga: assertEquals(copy, context)
nova chamada: assertEquals(copy, context, "Era esperado valores iguais, mas  copy é diferente de " + " context")
chamada antiga: assertTrue(context.isEmpty())
nova chamada: assertTrue(context.isEmpty(), "Era esperado verdadeiro, mas " + result477 + " <context.isEmpty()> é falso")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result478 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result479 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result480 + " <foo3.getValue()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result481 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result482 + " <foo5.getValue()>")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result483 + " <tested.read()> não é nulo")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result484 + " <tested.read()> não é nulo")
chamada antiga: assertSame(ITEM, tested.process(ITEM))
nova chamada: assertSame(ITEM, tested.process(ITEM), "Era esperado objetos iguais, mas  ITEM é diferente de " + result485 + " <tested.process(ITEM)>")
chamada antiga: assertNull(processFailedValidation(tested))
nova chamada: assertNull(processFailedValidation(tested), "Era esperado nulo, mas " + result486 + " <processFailedValidation(tested)> não é nulo")
chamada antiga: assertTrue(e.getCause() instanceof BindException)
nova chamada: assertTrue(e.getCause() instanceof BindException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(processed)
nova chamada: assertNotNull(processed, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("itemKeyMapper requires a Converter type.", exception.getMessage())
nova chamada: assertEquals("itemKeyMapper requires a Converter type.", exception.getMessage(), "Era esperado valores iguais, mas  'itemKeyMapper requires a Converter type.' é diferente de " + result487 + " <exception.getMessage()>")
chamada antiga: assertEquals("KafkaTemplate must not be null.", exception.getMessage())
nova chamada: assertEquals("KafkaTemplate must not be null.", exception.getMessage(), "Era esperado valores iguais, mas  'KafkaTemplate must not be null.' é diferente de " + result488 + " <exception.getMessage()>")
chamada antiga: assertDoesNotThrow(() -> this.writer.afterPropertiesSet())
nova chamada: assertDoesNotThrow(() -> this.writer.afterPropertiesSet(), "Era esperado que nenhuma exceção fosse lançada, mas  () - this.writer.afterPropertiesSet() foi lançada")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "delete"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "delete"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(timeout, ReflectionTestUtils.getField(writer, "timeout"))
nova chamada: assertEquals(timeout, ReflectionTestUtils.getField(writer, "timeout"), "Era esperado valores iguais, mas  timeout é diferente de " + result489 + " <ReflectionTestUtils.getField(writer, 'timeout')>")
chamada antiga: assertEquals(this.itemKeyMapper, ReflectionTestUtils.getField(writer, "itemKeyMapper"))
nova chamada: assertEquals(this.itemKeyMapper, ReflectionTestUtils.getField(writer, "itemKeyMapper"), "Era esperado valores iguais, mas  this.itemKeyMapper é diferente de " + result490 + " <ReflectionTestUtils.getField(writer, 'itemKeyMapper')>")
chamada antiga: assertEquals(this.kafkaTemplate, ReflectionTestUtils.getField(writer, "kafkaTemplate"))
nova chamada: assertEquals(this.kafkaTemplate, ReflectionTestUtils.getField(writer, "kafkaTemplate"), "Era esperado valores iguais, mas  this.kafkaTemplate é diferente de " + result491 + " <ReflectionTestUtils.getField(writer, 'kafkaTemplate')>")
chamada antiga: assertEquals("bootstrap.servers property must be provided", exception.getMessage())
nova chamada: assertEquals("bootstrap.servers property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'bootstrap.servers property must be provided' é diferente de " + result492 + " <exception.getMessage()>")
chamada antiga: assertEquals("group.id property must be provided", exception.getMessage())
nova chamada: assertEquals("group.id property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'group.id property must be provided' é diferente de " + result493 + " <exception.getMessage()>")
chamada antiga: assertEquals("key.deserializer property must be provided", exception.getMessage())
nova chamada: assertEquals("key.deserializer property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'key.deserializer property must be provided' é diferente de " + result494 + " <exception.getMessage()>")
chamada antiga: assertEquals("value.deserializer property must be provided", exception.getMessage())
nova chamada: assertEquals("value.deserializer property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'value.deserializer property must be provided' é diferente de " + result495 + " <exception.getMessage()>")
chamada antiga: assertNotNull(reader)
nova chamada: assertNotNull(reader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "saveState"))
nova chamada: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "saveState"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(pollTimeout, ReflectionTestUtils.getField(reader, "pollTimeout"))
nova chamada: assertEquals(pollTimeout, ReflectionTestUtils.getField(reader, "pollTimeout"), "Era esperado valores iguais, mas  pollTimeout é diferente de " + result496 + " <ReflectionTestUtils.getField(reader, 'pollTimeout')>")
chamada antiga: assertEquals(2, topicPartitions.size())
nova chamada: assertEquals(2, topicPartitions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result497 + " <topicPartitions.size()>")
chamada antiga: assertEquals(topic, topicPartitions.get(0).topic())
nova chamada: assertEquals(topic, topicPartitions.get(0).topic(), "Era esperado valores iguais, mas  topic é diferente de " + result498 + " <topicPartitions.get(0).topic()>")
chamada antiga: assertEquals(partitions.get(0).intValue(), topicPartitions.get(0).partition())
nova chamada: assertEquals(partitions.get(0).intValue(), topicPartitions.get(0).partition(), "Era esperado valores iguais, mas " + result499 + " <partitions.get(0).intValue()> é diferente de " + result500 + " <topicPartitions.get(0).partition()>")
chamada antiga: assertEquals(topic, topicPartitions.get(1).topic())
nova chamada: assertEquals(topic, topicPartitions.get(1).topic(), "Era esperado valores iguais, mas  topic é diferente de " + result501 + " <topicPartitions.get(1).topic()>")
chamada antiga: assertEquals(partitions.get(1).intValue(), topicPartitions.get(1).partition())
nova chamada: assertEquals(partitions.get(1).intValue(), topicPartitions.get(1).partition(), "Era esperado valores iguais, mas " + result502 + " <partitions.get(1).intValue()> é diferente de " + result503 + " <topicPartitions.get(1).partition()>")
chamada antiga: assertEquals(2, partitionOffsetsMap.size())
nova chamada: assertEquals(2, partitionOffsetsMap.size(), "Era esperado valores iguais, mas  2 é diferente de " + result504 + " <partitionOffsetsMap.size()>")
chamada antiga: assertEquals(Long.valueOf(10L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(0))))
nova chamada: assertEquals(Long.valueOf(10L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(0))), "Era esperado valores iguais, mas " + result505 + " <Long.valueOf(10L)> é diferente de " + result506 + " <partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(0)))>")
chamada antiga: assertEquals(Long.valueOf(15L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(1))))
nova chamada: assertEquals(Long.valueOf(15L), partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(1))), "Era esperado valores iguais, mas " + result507 + " <Long.valueOf(15L)> é diferente de " + result508 + " <partitionOffsetsMap.get(new TopicPartition(topic, partitions.get(1)))>")
chamada antiga: assertEquals("Consumer properties must not be null", exception.getMessage())
nova chamada: assertEquals("Consumer properties must not be null", exception.getMessage(), "Era esperado valores iguais, mas  'Consumer properties must not be null' é diferente de " + result509 + " <exception.getMessage()>")
chamada antiga: assertEquals("bootstrap.servers property must be provided", exception.getMessage())
nova chamada: assertEquals("bootstrap.servers property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'bootstrap.servers property must be provided' é diferente de " + result510 + " <exception.getMessage()>")
chamada antiga: assertEquals("group.id property must be provided", exception.getMessage())
nova chamada: assertEquals("group.id property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'group.id property must be provided' é diferente de " + result511 + " <exception.getMessage()>")
chamada antiga: assertEquals("key.deserializer property must be provided", exception.getMessage())
nova chamada: assertEquals("key.deserializer property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'key.deserializer property must be provided' é diferente de " + result512 + " <exception.getMessage()>")
chamada antiga: assertEquals("value.deserializer property must be provided", exception.getMessage())
nova chamada: assertEquals("value.deserializer property must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'value.deserializer property must be provided' é diferente de " + result513 + " <exception.getMessage()>")
chamada antiga: assertEquals("Topic name must not be null or empty", exception.getMessage())
nova chamada: assertEquals("Topic name must not be null or empty", exception.getMessage(), "Era esperado valores iguais, mas  'Topic name must not be null or empty' é diferente de " + result514 + " <exception.getMessage()>")
chamada antiga: assertEquals("At least one partition must be provided", exception.getMessage())
nova chamada: assertEquals("At least one partition must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'At least one partition must be provided' é diferente de " + result515 + " <exception.getMessage()>")
chamada antiga: assertEquals("pollTimeout must not be null", exception.getMessage())
nova chamada: assertEquals("pollTimeout must not be null", exception.getMessage(), "Era esperado valores iguais, mas  'pollTimeout must not be null' é diferente de " + result516 + " <exception.getMessage()>")
chamada antiga: assertEquals("pollTimeout must not be zero", exception.getMessage())
nova chamada: assertEquals("pollTimeout must not be zero", exception.getMessage(), "Era esperado valores iguais, mas  'pollTimeout must not be zero' é diferente de " + result517 + " <exception.getMessage()>")
chamada antiga: assertEquals("pollTimeout must not be negative", exception.getMessage())
nova chamada: assertEquals("pollTimeout must not be negative", exception.getMessage(), "Era esperado valores iguais, mas  'pollTimeout must not be negative' é diferente de " + result518 + " <exception.getMessage()>")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, currentOffset.offset())
nova chamada: assertEquals(2, currentOffset.offset(), "Era esperado valores iguais, mas  2 é diferente de " + result519 + " <currentOffset.offset()>")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("An implementation of MongoOperations is required.", exception.getMessage())
nova chamada: assertEquals("An implementation of MongoOperations is required.", exception.getMessage(), "Era esperado valores iguais, mas  'An implementation of MongoOperations is required.' é diferente de " + result520 + " <exception.getMessage()>")
chamada antiga: assertEquals("A type to convert the input into is required.", exception.getMessage())
nova chamada: assertEquals("A type to convert the input into is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A type to convert the input into is required.' é diferente de " + result521 + " <exception.getMessage()>")
chamada antiga: assertEquals("A query is required.", exception.getMessage())
nova chamada: assertEquals("A query is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A query is required.' é diferente de " + result522 + " <exception.getMessage()>")
chamada antiga: assertEquals("A sort is required.", exception.getMessage())
nova chamada: assertEquals("A sort is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A sort is required.' é diferente de " + result523 + " <exception.getMessage()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result524 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result525 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result526 + " <query.getSkip()>")
chamada antiga: assertEquals("{}", query.getQueryObject().toJson())
nova chamada: assertEquals("{}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{}' é diferente de " + result527 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result528 + " <query.getSortObject().toJson()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result529 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result530 + " <query.getLimit()>")
chamada antiga: assertEquals(100, query.getSkip())
nova chamada: assertEquals(100, query.getSkip(), "Era esperado valores iguais, mas  100 é diferente de " + result531 + " <query.getSkip()>")
chamada antiga: assertEquals("{}", query.getQueryObject().toJson())
nova chamada: assertEquals("{}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{}' é diferente de " + result532 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result533 + " <query.getSortObject().toJson()>")
chamada antiga: assertTrue(query.getFieldsObject().isEmpty())
nova chamada: assertTrue(query.getFieldsObject().isEmpty(), "Era esperado verdadeiro, mas " + result534 + " <query.getFieldsObject().isEmpty()> é falso")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result535 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result536 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result537 + " <query.getSkip()>")
chamada antiga: assertEquals("{}", query.getQueryObject().toJson())
nova chamada: assertEquals("{}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{}' é diferente de " + result538 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result539 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals(1, query.getFieldsObject().get("name"))
nova chamada: assertEquals(1, query.getFieldsObject().get("name"), "Era esperado valores iguais, mas  1 é diferente de " + result540 + " <query.getFieldsObject().get('name')>")
chamada antiga: assertEquals(1, query.getFieldsObject().get("age"))
nova chamada: assertEquals(1, query.getFieldsObject().get("age"), "Era esperado valores iguais, mas  1 é diferente de " + result541 + " <query.getFieldsObject().get('age')>")
chamada antiga: assertEquals(0, query.getFieldsObject().get("_id"))
nova chamada: assertEquals(0, query.getFieldsObject().get("_id"), "Era esperado valores iguais, mas  0 é diferente de " + result542 + " <query.getFieldsObject().get('_id')>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result543 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result544 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result545 + " <query.getSkip()>")
chamada antiga: assertEquals("{}", query.getQueryObject().toJson())
nova chamada: assertEquals("{}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{}' é diferente de " + result546 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result547 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals("{ $natural : 1}", query.getHint())
nova chamada: assertEquals("{ $natural : 1}", query.getHint(), "Era esperado valores iguais, mas  '{ $natural : 1}' é diferente de " + result548 + " <query.getHint()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result549 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result550 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result551 + " <query.getSkip()>")
chamada antiga: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
nova chamada: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': \'foo\'}' é diferente de " + result552 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result553 + " <query.getSortObject().toJson()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result554 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result555 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result556 + " <query.getSkip()>")
chamada antiga: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
nova chamada: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': \'foo\'}' é diferente de " + result557 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result558 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals("collection", collectionContainer.getValue())
nova chamada: assertEquals("collection", collectionContainer.getValue(), "Era esperado valores iguais, mas  'collection' é diferente de " + result559 + " <collectionContainer.getValue()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result560 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result561 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(10, actualQuery.getLimit())
nova chamada: assertEquals(10, actualQuery.getLimit(), "Era esperado valores iguais, mas  10 é diferente de " + result562 + " <actualQuery.getLimit()>")
chamada antiga: assertEquals(0, actualQuery.getSkip())
nova chamada: assertEquals(0, actualQuery.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result563 + " <actualQuery.getSkip()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result564 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result565 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(10, actualQuery.getLimit())
nova chamada: assertEquals(10, actualQuery.getLimit(), "Era esperado valores iguais, mas  10 é diferente de " + result566 + " <actualQuery.getLimit()>")
chamada antiga: assertEquals(0, actualQuery.getSkip())
nova chamada: assertEquals(0, actualQuery.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result567 + " <actualQuery.getSkip()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result568 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result569 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(100, actualQuery.getLimit())
nova chamada: assertEquals(100, actualQuery.getLimit(), "Era esperado valores iguais, mas  100 é diferente de " + result570 + " <actualQuery.getLimit()>")
chamada antiga: assertEquals(0, actualQuery.getSkip())
nova chamada: assertEquals(0, actualQuery.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result571 + " <actualQuery.getSkip()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result572 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(100, actualQuery.getLimit())
nova chamada: assertEquals(100, actualQuery.getLimit(), "Era esperado valores iguais, mas  100 é diferente de " + result573 + " <actualQuery.getLimit()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result574 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(10, actualQuery.getLimit())
nova chamada: assertEquals(10, actualQuery.getLimit(), "Era esperado valores iguais, mas  10 é diferente de " + result575 + " <actualQuery.getLimit()>")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result576 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertFalse(reader.doPageRead().hasNext())
nova chamada: assertFalse(reader.doPageRead().hasNext(), "Era esperado falso, mas " + result577 + " <reader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals(10, actualQuery.getLimit())
nova chamada: assertEquals(10, actualQuery.getLimit(), "Era esperado valores iguais, mas  10 é diferente de " + result578 + " <actualQuery.getLimit()>")
chamada antiga: assertEquals(0, actualQuery.getSkip())
nova chamada: assertEquals(0, actualQuery.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result579 + " <actualQuery.getSkip()>")
chamada antiga: assertEquals("collection", stringContainer.getValue())
nova chamada: assertEquals("collection", stringContainer.getValue(), "Era esperado valores iguais, mas  'collection' é diferente de " + result580 + " <stringContainer.getValue()>")
chamada antiga: assertEquals("A SessionFactory is required", exception.getMessage())
nova chamada: assertEquals("A SessionFactory is required", exception.getMessage(), "Era esperado valores iguais, mas  'A SessionFactory is required' é diferente de " + result581 + " <exception.getMessage()>")
chamada antiga: assertEquals(exception.getMessage(), "force rollback")
nova chamada: assertEquals(exception.getMessage(), "force rollback", "Era esperado valores iguais, mas " + result582 + " <exception.getMessage()> é diferente de " + " 'force rollback'")
chamada antiga: assertEquals("A SessionFactory is required", exception.getMessage())
nova chamada: assertEquals("A SessionFactory is required", exception.getMessage(), "Era esperado valores iguais, mas  'A SessionFactory is required' é diferente de " + result583 + " <exception.getMessage()>")
chamada antiga: assertEquals("The type to be returned is required", exception.getMessage())
nova chamada: assertEquals("The type to be returned is required", exception.getMessage(), "Era esperado valores iguais, mas  'The type to be returned is required' é diferente de " + result584 + " <exception.getMessage()>")
chamada antiga: assertEquals("A START statement is required", exception.getMessage())
nova chamada: assertEquals("A START statement is required", exception.getMessage(), "Era esperado valores iguais, mas  'A START statement is required' é diferente de " + result585 + " <exception.getMessage()>")
chamada antiga: assertEquals("A RETURN statement is required", exception.getMessage())
nova chamada: assertEquals("A RETURN statement is required", exception.getMessage(), "Era esperado valores iguais, mas  'A RETURN statement is required' é diferente de " + result586 + " <exception.getMessage()>")
chamada antiga: assertEquals("A ORDER BY statement is required", exception.getMessage())
nova chamada: assertEquals("A ORDER BY statement is required", exception.getMessage(), "Era esperado valores iguais, mas  'A ORDER BY statement is required' é diferente de " + result587 + " <exception.getMessage()>")
chamada antiga: assertFalse(itemReader.doPageRead().hasNext())
nova chamada: assertFalse(itemReader.doPageRead().hasNext(), "Era esperado falso, mas " + result588 + " <itemReader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue())
nova chamada: assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue(), "Era esperado valores iguais, mas  'START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50' é diferente de " + result589 + " <query.getValue()>")
chamada antiga: assertFalse(itemReader.doPageRead().hasNext())
nova chamada: assertFalse(itemReader.doPageRead().hasNext(), "Era esperado falso, mas " + result590 + " <itemReader.doPageRead().hasNext()> é verdadeiro ")
chamada antiga: assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue())
nova chamada: assertEquals("START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50", query.getValue(), "Era esperado valores iguais, mas  'START n=node(*) RETURN * ORDER BY n.age SKIP 0 LIMIT 50' é diferente de " + result591 + " <query.getValue()>")
chamada antiga: assertTrue(itemReader.doPageRead().hasNext())
nova chamada: assertTrue(itemReader.doPageRead().hasNext(), "Era esperado verdadeiro, mas " + result592 + " <itemReader.doPageRead().hasNext()> é falso")
chamada antiga: assertTrue(itemReader.doPageRead().hasNext())
nova chamada: assertTrue(itemReader.doPageRead().hasNext(), "Era esperado verdadeiro, mas " + result593 + " <itemReader.doPageRead().hasNext()> é falso")
chamada antiga: assertNull(reader.doRead())
nova chamada: assertNull(reader.doRead(), "Era esperado nulo, mas " + result594 + " <reader.doRead()> não é nulo")
chamada antiga: assertEquals(0, pageRequest.getOffset())
nova chamada: assertEquals(0, pageRequest.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result595 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(0, pageRequest.getPageNumber())
nova chamada: assertEquals(0, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  0 é diferente de " + result596 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(1, pageRequest.getPageSize())
nova chamada: assertEquals(1, pageRequest.getPageSize(), "Era esperado valores iguais, mas  1 é diferente de " + result597 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result598 + " <pageRequest.getSort().toString()>")
chamada antiga: assertEquals(result, reader.doRead())
nova chamada: assertEquals(result, reader.doRead(), "Era esperado valores iguais, mas  result é diferente de " + result599 + " <reader.doRead()>")
chamada antiga: assertEquals(0, pageRequest.getOffset())
nova chamada: assertEquals(0, pageRequest.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result600 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(0, pageRequest.getPageNumber())
nova chamada: assertEquals(0, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  0 é diferente de " + result601 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(1, pageRequest.getPageSize())
nova chamada: assertEquals(1, pageRequest.getPageSize(), "Era esperado valores iguais, mas  1 é diferente de " + result602 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result603 + " <pageRequest.getSort().toString()>")
chamada antiga: assertNotSame(result, reader.doRead())
nova chamada: assertNotSame(result, reader.doRead(), "Era esperado objetos diferentes, mas  result é igual a " + result604 + " <reader.doRead()>")
chamada antiga: assertEquals(result, reader.doRead())
nova chamada: assertEquals(result, reader.doRead(), "Era esperado valores iguais, mas  result é diferente de " + result605 + " <reader.doRead()>")
chamada antiga: assertEquals(1, pageRequest.getOffset())
nova chamada: assertEquals(1, pageRequest.getOffset(), "Era esperado valores iguais, mas  1 é diferente de " + result606 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(1, pageRequest.getPageNumber())
nova chamada: assertEquals(1, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  1 é diferente de " + result607 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(1, pageRequest.getPageSize())
nova chamada: assertEquals(1, pageRequest.getPageSize(), "Era esperado valores iguais, mas  1 é diferente de " + result608 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result609 + " <pageRequest.getSort().toString()>")
chamada antiga: assertNotSame(result, reader.doRead())
nova chamada: assertNotSame(result, reader.doRead(), "Era esperado objetos diferentes, mas  result é igual a " + result610 + " <reader.doRead()>")
chamada antiga: assertEquals(result, reader.doRead())
nova chamada: assertEquals(result, reader.doRead(), "Era esperado valores iguais, mas  result é diferente de " + result611 + " <reader.doRead()>")
chamada antiga: assertNull(reader.doRead())
nova chamada: assertNull(reader.doRead(), "Era esperado nulo, mas " + result612 + " <reader.doRead()> não é nulo")
chamada antiga: assertEquals(2, pageRequest.getOffset())
nova chamada: assertEquals(2, pageRequest.getOffset(), "Era esperado valores iguais, mas  2 é diferente de " + result613 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(2, pageRequest.getPageNumber())
nova chamada: assertEquals(2, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result614 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(1, pageRequest.getPageSize())
nova chamada: assertEquals(1, pageRequest.getPageSize(), "Era esperado valores iguais, mas  1 é diferente de " + result615 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result616 + " <pageRequest.getSort().toString()>")
chamada antiga: assertEquals(400, pageRequest.getOffset())
nova chamada: assertEquals(400, pageRequest.getOffset(), "Era esperado valores iguais, mas  400 é diferente de " + result617 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(4, pageRequest.getPageNumber())
nova chamada: assertEquals(4, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  4 é diferente de " + result618 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(100, pageRequest.getPageSize())
nova chamada: assertEquals(100, pageRequest.getPageSize(), "Era esperado valores iguais, mas  100 é diferente de " + result619 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result620 + " <pageRequest.getSort().toString()>")
chamada antiga: assertEquals(150, pageRequest.getOffset())
nova chamada: assertEquals(150, pageRequest.getOffset(), "Era esperado valores iguais, mas  150 é diferente de " + result621 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(3, pageRequest.getPageNumber())
nova chamada: assertEquals(3, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  3 é diferente de " + result622 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(50, pageRequest.getPageSize())
nova chamada: assertEquals(50, pageRequest.getPageSize(), "Era esperado valores iguais, mas  50 é diferente de " + result623 + " <pageRequest.getPageSize()>")
chamada antiga: assertTrue(exception.getCause() instanceof NoSuchMethodException)
nova chamada: assertTrue(exception.getCause() instanceof NoSuchMethodException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("result", reader.doRead())
nova chamada: assertEquals("result", reader.doRead(), "Era esperado valores iguais, mas  'result' é diferente de " + result624 + " <reader.doRead()>")
chamada antiga: assertEquals(0, pageRequest.getOffset())
nova chamada: assertEquals(0, pageRequest.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result625 + " <pageRequest.getOffset()>")
chamada antiga: assertEquals(0, pageRequest.getPageNumber())
nova chamada: assertEquals(0, pageRequest.getPageNumber(), "Era esperado valores iguais, mas  0 é diferente de " + result626 + " <pageRequest.getPageNumber()>")
chamada antiga: assertEquals(1, pageRequest.getPageSize())
nova chamada: assertEquals(1, pageRequest.getPageSize(), "Era esperado valores iguais, mas  1 é diferente de " + result627 + " <pageRequest.getPageSize()>")
chamada antiga: assertEquals("id: ASC", pageRequest.getSort().toString())
nova chamada: assertEquals("id: ASC", pageRequest.getSort().toString(), "Era esperado valores iguais, mas  'id: ASC' é diferente de " + result628 + " <pageRequest.getSort().toString()>")
chamada antiga: assertEquals("4", result)
nova chamada: assertEquals("4", result, "Era esperado valores iguais, mas  '4' é diferente de " + " result")
chamada antiga: assertEquals("5", reader.read())
nova chamada: assertEquals("5", reader.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result629 + " <reader.read()>")
chamada antiga: assertEquals("6", reader.read())
nova chamada: assertEquals("6", reader.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result630 + " <reader.read()>")
chamada antiga: assertEquals("4", result)
nova chamada: assertEquals("4", result, "Era esperado valores iguais, mas  '4' é diferente de " + " result")
chamada antiga: assertEquals("5", reader.read())
nova chamada: assertEquals("5", reader.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result631 + " <reader.read()>")
chamada antiga: assertEquals("6", reader.read())
nova chamada: assertEquals("6", reader.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result632 + " <reader.read()>")
chamada antiga: assertEquals("1", result)
nova chamada: assertEquals("1", result, "Era esperado valores iguais, mas  '1' é diferente de " + " result")
chamada antiga: assertEquals("1", reader.read())
nova chamada: assertEquals("1", reader.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result633 + " <reader.read()>")
chamada antiga: assertEquals("2", reader.read())
nova chamada: assertEquals("2", reader.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result634 + " <reader.read()>")
chamada antiga: assertEquals("3", reader.read())
nova chamada: assertEquals("3", reader.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result635 + " <reader.read()>")
chamada antiga: assertEquals("methodName must not be empty.", exception.getMessage())
nova chamada: assertEquals("methodName must not be empty.", exception.getMessage(), "Era esperado valores iguais, mas  'methodName must not be empty.' é diferente de " + result636 + " <exception.getMessage()>")
chamada antiga: assertEquals("methodName is required.", exception.getMessage())
nova chamada: assertEquals("methodName is required.", exception.getMessage(), "Era esperado valores iguais, mas  'methodName is required.' é diferente de " + result637 + " <exception.getMessage()>")
chamada antiga: assertEquals("methodName is required.", exception.getMessage())
nova chamada: assertEquals("methodName is required.", exception.getMessage(), "Era esperado valores iguais, mas  'methodName is required.' é diferente de " + result638 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true.", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true.", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true.' é diferente de " + result639 + " <exception.getMessage()>")
chamada antiga: assertEquals("sorts map is required.", exception.getMessage())
nova chamada: assertEquals("sorts map is required.", exception.getMessage(), "Era esperado valores iguais, mas  'sorts map is required.' é diferente de " + result640 + " <exception.getMessage()>")
chamada antiga: assertEquals("repository is required.", exception.getMessage())
nova chamada: assertEquals("repository is required.", exception.getMessage(), "Era esperado valores iguais, mas  'repository is required.' é diferente de " + result641 + " <exception.getMessage()>")
chamada antiga: assertEquals("Page size must be greater than 0", exception.getMessage())
nova chamada: assertEquals("Page size must be greater than 0", exception.getMessage(), "Era esperado valores iguais, mas  'Page size must be greater than 0' é diferente de " + result642 + " <exception.getMessage()>")
chamada antiga: assertEquals("repository is required.", exception.getMessage())
nova chamada: assertEquals("repository is required.", exception.getMessage(), "Era esperado valores iguais, mas  'repository is required.' é diferente de " + result643 + " <exception.getMessage()>")
chamada antiga: assertEquals("methodName must not be empty.", exception.getMessage())
nova chamada: assertEquals("methodName must not be empty.", exception.getMessage(), "Era esperado valores iguais, mas  'methodName must not be empty.' é diferente de " + result644 + " <exception.getMessage()>")
chamada antiga: assertEquals("template is required.", exception.getMessage())
nova chamada: assertEquals("template is required.", exception.getMessage(), "Era esperado valores iguais, mas  'template is required.' é diferente de " + result645 + " <exception.getMessage()>")
chamada antiga: assertEquals("sessionFactory is required.", exception.getMessage())
nova chamada: assertEquals("sessionFactory is required.", exception.getMessage(), "Era esperado valores iguais, mas  'sessionFactory is required.' é diferente de " + result646 + " <exception.getMessage()>")
chamada antiga: assertEquals("sessionFactory is required.", exception.getMessage())
nova chamada: assertEquals("sessionFactory is required.", exception.getMessage(), "Era esperado valores iguais, mas  'sessionFactory is required.' é diferente de " + result647 + " <exception.getMessage()>")
chamada antiga: assertEquals(message, exception.getMessage())
nova chamada: assertEquals(message, exception.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result648 + " <exception.getMessage()>")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result649 + " <query.getLimit()>")
chamada antiga: assertEquals(0, query.getSkip())
nova chamada: assertEquals(0, query.getSkip(), "Era esperado valores iguais, mas  0 é diferente de " + result650 + " <query.getSkip()>")
chamada antiga: assertEquals("{}", query.getQueryObject().toJson())
nova chamada: assertEquals("{}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{}' é diferente de " + result651 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result652 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals(1, query.getFieldsObject().get("name"))
nova chamada: assertEquals(1, query.getFieldsObject().get("name"), "Era esperado valores iguais, mas  1 é diferente de " + result653 + " <query.getFieldsObject().get('name')>")
chamada antiga: assertEquals(1, query.getFieldsObject().get("age"))
nova chamada: assertEquals(1, query.getFieldsObject().get("age"), "Era esperado valores iguais, mas  1 é diferente de " + result654 + " <query.getFieldsObject().get('age')>")
chamada antiga: assertEquals(0, query.getFieldsObject().get("_id"))
nova chamada: assertEquals(0, query.getFieldsObject().get("_id"), "Era esperado valores iguais, mas  0 é diferente de " + result655 + " <query.getFieldsObject().get('_id')>")
chamada antiga: assertEquals("{ $natural : 1}", query.getHint())
nova chamada: assertEquals("{ $natural : 1}", query.getHint(), "Era esperado valores iguais, mas  '{ $natural : 1}' é diferente de " + result656 + " <query.getHint()>")
chamada antiga: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
nova chamada: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': \'foo\'}' é diferente de " + result657 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result658 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals("collection", collectionContainer.getValue())
nova chamada: assertEquals("collection", collectionContainer.getValue(), "Era esperado valores iguais, mas  'collection' é diferente de " + result659 + " <collectionContainer.getValue()>")
chamada antiga: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson())
nova chamada: assertEquals("{\"name\": \"foo\"}", query.getQueryObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': \'foo\'}' é diferente de " + result660 + " <query.getQueryObject().toJson()>")
chamada antiga: assertEquals("{\"name\": -1}", query.getSortObject().toJson())
nova chamada: assertEquals("{\"name\": -1}", query.getSortObject().toJson(), "Era esperado valores iguais, mas  '{\'name\': -1}' é diferente de " + result661 + " <query.getSortObject().toJson()>")
chamada antiga: assertEquals("collection", collectionContainer.getValue())
nova chamada: assertEquals("collection", collectionContainer.getValue(), "Era esperado valores iguais, mas  'collection' é diferente de " + result662 + " <collectionContainer.getValue()>")
chamada antiga: assertEquals(50, query.getLimit())
nova chamada: assertEquals(50, query.getLimit(), "Era esperado valores iguais, mas  50 é diferente de " + result663 + " <query.getLimit()>")
chamada antiga: assertEquals(10, query.getLimit())
nova chamada: assertEquals(10, query.getLimit(), "Era esperado valores iguais, mas  10 é diferente de " + result664 + " <query.getLimit()>")
chamada antiga: assertTrue(exception instanceof IllegalArgumentException || exception instanceof IllegalStateException)
nova chamada: assertTrue(exception instanceof IllegalArgumentException || exception instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(message, exception.getMessage())
nova chamada: assertEquals(message, exception.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result665 + " <exception.getMessage()>")
chamada antiga: assertEquals(foo.getName(), delegator.invokeDelegateMethod())
nova chamada: assertEquals(foo.getName(), delegator.invokeDelegateMethod(), "Era esperado valores iguais, mas " + result666 + " <foo.getName()> é diferente de " + result667 + " <delegator.invokeDelegateMethod()>")
chamada antiga: assertEquals(NEW_FOO_NAME, foo.getName())
nova chamada: assertEquals(NEW_FOO_NAME, foo.getName(), "Era esperado valores iguais, mas  NEW_FOO_NAME é diferente de " + result668 + " <foo.getName()>")
chamada antiga: assertNotEquals(NEW_FOO_NAME, foo.getName())
nova chamada: assertNotEquals(NEW_FOO_NAME, foo.getName(), "Era esperado valores diferentes, mas  NEW_FOO_NAME é igual a " + result669 + " <foo.getName()>")
chamada antiga: assertEquals(NEW_FOO_NAME, foo.getName())
nova chamada: assertEquals(NEW_FOO_NAME, foo.getName(), "Era esperado valores iguais, mas  NEW_FOO_NAME é diferente de " + result670 + " <foo.getName()>")
chamada antiga: assertNull(foo.getName())
nova chamada: assertNull(foo.getName(), "Era esperado nulo, mas " + result671 + " <foo.getName()> não é nulo")
chamada antiga: assertEquals(FOO_NAME, foo.getName())
nova chamada: assertEquals(FOO_NAME, foo.getName(), "Era esperado valores iguais, mas  FOO_NAME é diferente de " + result672 + " <foo.getName()>")
chamada antiga: assertEquals(FOO_VALUE, foo.getValue())
nova chamada: assertEquals(FOO_VALUE, foo.getValue(), "Era esperado valores iguais, mas  FOO_VALUE é diferente de " + result673 + " <foo.getValue()>")
chamada antiga: assertEquals("name", foo.getName())
nova chamada: assertEquals("name", foo.getName(), "Era esperado valores iguais, mas  'name' é diferente de " + result674 + " <foo.getName()>")
chamada antiga: assertEquals(Foo.FAILURE_MESSAGE, expected.getMessage())
nova chamada: assertEquals(Foo.FAILURE_MESSAGE, expected.getMessage(), "Era esperado valores iguais, mas  Foo.FAILURE_MESSAGE é diferente de " + result675 + " <expected.getMessage()>")
chamada antiga: assertEquals(Foo.UGLY_FAILURE_MESSAGE, expected.getCause().getMessage())
nova chamada: assertEquals(Foo.UGLY_FAILURE_MESSAGE, expected.getCause().getMessage(), "Era esperado valores iguais, mas  Foo.UGLY_FAILURE_MESSAGE é diferente de " + result676 + " <expected.getCause().getMessage()>")
chamada antiga: assertEquals(input.size(), processed.size())
nova chamada: assertEquals(input.size(), processed.size(), "Era esperado valores iguais, mas " + result677 + " <input.size()> é diferente de " + result678 + " <processed.size()>")
chamada antiga: assertFalse(fooService.getProcessedFoos().isEmpty())
nova chamada: assertFalse(fooService.getProcessedFoos().isEmpty(), "Era esperado falso, mas " + result679 + " <fooService.getProcessedFoos().isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("foo", processor.process(item))
nova chamada: assertEquals("foo", processor.process(item), "Era esperado valores iguais, mas  'foo' é diferente de " + result680 + " <processor.process(item)>")
chamada antiga: assertEquals(input.size(), returnedItems.size())
nova chamada: assertEquals(input.size(), returnedItems.size(), "Era esperado valores iguais, mas " + result681 + " <input.size()> é diferente de " + result682 + " <returnedItems.size()>")
chamada antiga: assertEquals("2.0.foo", adapter.getMessage(2, "foo"))
nova chamada: assertEquals("2.0.foo", adapter.getMessage(2, "foo"), "Era esperado valores iguais, mas  '2.0.foo' é diferente de " + result683 + " <adapter.getMessage(2, 'foo')>")
chamada antiga: assertEquals(".", adapter.getMessage(2, "foo"))
nova chamada: assertEquals(".", adapter.getMessage(2, "foo"), "Era esperado valores iguais, mas  '.' é diferente de " + result684 + " <adapter.getMessage(2, 'foo')>")
chamada antiga: assertEquals(".", adapter.getMessage())
nova chamada: assertEquals(".", adapter.getMessage(), "Era esperado valores iguais, mas  '.' é diferente de " + result685 + " <adapter.getMessage()>")
chamada antiga: assertEquals("foo.foo", adapter.getMessage(2, "foo"))
nova chamada: assertEquals("foo.foo", adapter.getMessage(2, "foo"), "Era esperado valores iguais, mas  'foo.foo' é diferente de " + result686 + " <adapter.getMessage(2, 'foo')>")
chamada antiga: assertEquals("2.0.foo", adapter.getMessage(2, "foo"))
nova chamada: assertEquals("2.0.foo", adapter.getMessage(2, "foo"), "Era esperado valores iguais, mas  '2.0.foo' é diferente de " + result687 + " <adapter.getMessage(2, 'foo')>")
chamada antiga: assertEquals("foo.2", invoker.invoke())
nova chamada: assertEquals("foo.2", invoker.invoke(), "Era esperado valores iguais, mas  'foo.2' é diferente de " + result688 + " <invoker.invoke()>")
chamada antiga: assertEquals(target.foo(arg), Set.class)
nova chamada: assertEquals(target.foo(arg), Set.class, "Era esperado valores iguais, mas " + result689 + " <target.foo(arg)> é diferente de " + " Set.class")
chamada antiga: assertEquals(invoker.invoke(), Set.class)
nova chamada: assertEquals(invoker.invoke(), Set.class, "Era esperado valores iguais, mas " + result690 + " <invoker.invoke()> é diferente de " + " Set.class")
chamada antiga: assertEquals(target.foo(exactArg, inexactArg), Number.class)
nova chamada: assertEquals(target.foo(exactArg, inexactArg), Number.class, "Era esperado valores iguais, mas " + result691 + " <target.foo(exactArg, inexactArg)> é diferente de " + " Number.class")
chamada antiga: assertEquals(invoker.invoke(), Number.class)
nova chamada: assertEquals(invoker.invoke(), Number.class, "Era esperado valores iguais, mas " + result692 + " <invoker.invoke()> é diferente de " + " Number.class")
chamada antiga: assertEquals(input.size(), processed.size())
nova chamada: assertEquals(input.size(), processed.size(), "Era esperado valores iguais, mas " + result693 + " <input.size()> é diferente de " + result694 + " <processed.size()>")
chamada antiga: assertEquals("1", itemProcessor.process(1L))
nova chamada: assertEquals("1", itemProcessor.process(1L), "Era esperado valores iguais, mas  '1' é diferente de " + result695 + " <itemProcessor.process(1L)>")
chamada antiga: assertEquals("foo", itemProcessor.process("foo"))
nova chamada: assertEquals("foo", itemProcessor.process("foo"), "Era esperado valores iguais, mas  'foo' é diferente de " + result696 + " <itemProcessor.process('foo')>")
chamada antiga: assertEquals("{\"id\":1,\"name\":\"foo\"}", foo)
nova chamada: assertEquals("{\"id\":1,\"name\":\"foo\"}", foo, "Era esperado valores iguais, mas  '{\'id\':1,\'name\':\'foo\'}' é diferente de " + " foo")
chamada antiga: assertEquals(2, executionContext.getLong("tradesItemWriter.written"))
nova chamada: assertEquals(2, executionContext.getLong("tradesItemWriter.written"), "Era esperado valores iguais, mas  2 é diferente de " + result697 + " <executionContext.getLong('tradesItemWriter.written')>")
chamada antiga: assertEquals(2, executionContext.getLong("tradesItemWriter.written"))
nova chamada: assertEquals(2, executionContext.getLong("tradesItemWriter.written"), "Era esperado valores iguais, mas  2 é diferente de " + result698 + " <executionContext.getLong('tradesItemWriter.written')>")
chamada antiga: assertEquals("Bad item", exception.getMessage())
nova chamada: assertEquals("Bad item", exception.getMessage(), "Era esperado valores iguais, mas  'Bad item' é diferente de " + result699 + " <exception.getMessage()>")
chamada antiga: assertEquals("The resource must not be null.", exception.getMessage())
nova chamada: assertEquals("The resource must not be null.", exception.getMessage(), "Era esperado valores iguais, mas  'The resource must not be null.' é diferente de " + result700 + " <exception.getMessage()>")
chamada antiga: assertEquals("The json object reader must not be null.", exception.getMessage())
nova chamada: assertEquals("The json object reader must not be null.", exception.getMessage(), "Era esperado valores iguais, mas  'The json object reader must not be null.' é diferente de " + result701 + " <exception.getMessage()>")
chamada antiga: assertEquals("Failed to initialize the reader", expectedException.getMessage())
nova chamada: assertEquals("Failed to initialize the reader", expectedException.getMessage(), "Era esperado valores iguais, mas  'Failed to initialize the reader' é diferente de " + result702 + " <expectedException.getMessage()>")
chamada antiga: assertTrue(expectedException.getCause() instanceof IllegalStateException)
nova chamada: assertTrue(expectedException.getCause() instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Failed to initialize the reader", expectedException.getMessage())
nova chamada: assertEquals("Failed to initialize the reader", expectedException.getMessage(), "Era esperado valores iguais, mas  'Failed to initialize the reader' é diferente de " + result703 + " <expectedException.getMessage()>")
chamada antiga: assertTrue(expectedException.getCause() instanceof IllegalStateException)
nova chamada: assertTrue(expectedException.getCause() instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(trade)
nova chamada: assertNotNull(trade, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("123", trade.getIsin())
nova chamada: assertEquals("123", trade.getIsin(), "Era esperado valores iguais, mas  '123' é diferente de " + result704 + " <trade.getIsin()>")
chamada antiga: assertEquals("foo", trade.getCustomer())
nova chamada: assertEquals("foo", trade.getCustomer(), "Era esperado valores iguais, mas  'foo' é diferente de " + result705 + " <trade.getCustomer()>")
chamada antiga: assertEquals(new BigDecimal("1.2"), trade.getPrice())
nova chamada: assertEquals(new BigDecimal("1.2"), trade.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('1.2') é diferente de " + result706 + " <trade.getPrice()>")
chamada antiga: assertEquals(1, trade.getQuantity())
nova chamada: assertEquals(1, trade.getQuantity(), "Era esperado valores iguais, mas  1 é diferente de " + result707 + " <trade.getQuantity()>")
chamada antiga: assertNotNull(trade)
nova chamada: assertNotNull(trade, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("456", trade.getIsin())
nova chamada: assertEquals("456", trade.getIsin(), "Era esperado valores iguais, mas  '456' é diferente de " + result708 + " <trade.getIsin()>")
chamada antiga: assertEquals("bar", trade.getCustomer())
nova chamada: assertEquals("bar", trade.getCustomer(), "Era esperado valores iguais, mas  'bar' é diferente de " + result709 + " <trade.getCustomer()>")
chamada antiga: assertEquals(new BigDecimal("1.4"), trade.getPrice())
nova chamada: assertEquals(new BigDecimal("1.4"), trade.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('1.4') é diferente de " + result710 + " <trade.getPrice()>")
chamada antiga: assertEquals(2, trade.getQuantity())
nova chamada: assertEquals(2, trade.getQuantity(), "Era esperado valores iguais, mas  2 é diferente de " + result711 + " <trade.getQuantity()>")
chamada antiga: assertNotNull(trade)
nova chamada: assertNotNull(trade, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("789", trade.getIsin())
nova chamada: assertEquals("789", trade.getIsin(), "Era esperado valores iguais, mas  '789' é diferente de " + result712 + " <trade.getIsin()>")
chamada antiga: assertEquals("foobar", trade.getCustomer())
nova chamada: assertEquals("foobar", trade.getCustomer(), "Era esperado valores iguais, mas  'foobar' é diferente de " + result713 + " <trade.getCustomer()>")
chamada antiga: assertEquals(new BigDecimal("1.6"), trade.getPrice())
nova chamada: assertEquals(new BigDecimal("1.6"), trade.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('1.6') é diferente de " + result714 + " <trade.getPrice()>")
chamada antiga: assertEquals(3, trade.getQuantity())
nova chamada: assertEquals(3, trade.getQuantity(), "Era esperado valores iguais, mas  3 é diferente de " + result715 + " <trade.getQuantity()>")
chamada antiga: assertNotNull(trade)
nova chamada: assertNotNull(trade, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("100", trade.getIsin())
nova chamada: assertEquals("100", trade.getIsin(), "Era esperado valores iguais, mas  '100' é diferente de " + result716 + " <trade.getIsin()>")
chamada antiga: assertEquals("barfoo", trade.getCustomer())
nova chamada: assertEquals("barfoo", trade.getCustomer(), "Era esperado valores iguais, mas  'barfoo' é diferente de " + result717 + " <trade.getCustomer()>")
chamada antiga: assertEquals(new BigDecimal("1.8"), trade.getPrice())
nova chamada: assertEquals(new BigDecimal("1.8"), trade.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('1.8') é diferente de " + result718 + " <trade.getPrice()>")
chamada antiga: assertEquals(4, trade.getQuantity())
nova chamada: assertEquals(4, trade.getQuantity(), "Era esperado valores iguais, mas  4 é diferente de " + result719 + " <trade.getQuantity()>")
chamada antiga: assertNull(trade)
nova chamada: assertNull(trade, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(trade)
nova chamada: assertNull(trade, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("Failed to initialize the reader", expectedException.getMessage())
nova chamada: assertEquals("Failed to initialize the reader", expectedException.getMessage(), "Era esperado valores iguais, mas  'Failed to initialize the reader' é diferente de " + result720 + " <expectedException.getMessage()>")
chamada antiga: assertTrue(expectedException.getCause() instanceof IllegalStateException)
nova chamada: assertTrue(expectedException.getCause() instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJsonParsingException().isInstance(expectedException.getCause()))
nova chamada: assertTrue(getJsonParsingException().isInstance(expectedException.getCause()), "Era esperado verdadeiro, mas " + result721 + " <getJsonParsingException().isInstance(expectedException.getCause())> é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "saveState"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "saveState"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "append"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "append"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "transactional"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "transactional"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfEmpty"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfEmpty"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfExists"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "shouldDeleteIfExists"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(encoding, ReflectionTestUtils.getField(writer, "encoding"))
nova chamada: assertEquals(encoding, ReflectionTestUtils.getField(writer, "encoding"), "Era esperado valores iguais, mas  encoding é diferente de " + result722 + " <ReflectionTestUtils.getField(writer, 'encoding')>")
chamada antiga: assertEquals(lineSeparator, ReflectionTestUtils.getField(writer, "lineSeparator"))
nova chamada: assertEquals(lineSeparator, ReflectionTestUtils.getField(writer, "lineSeparator"), "Era esperado valores iguais, mas  lineSeparator é diferente de " + result723 + " <ReflectionTestUtils.getField(writer, 'lineSeparator')>")
chamada antiga: assertEquals(headerCallback, ReflectionTestUtils.getField(writer, "headerCallback"))
nova chamada: assertEquals(headerCallback, ReflectionTestUtils.getField(writer, "headerCallback"), "Era esperado valores iguais, mas  headerCallback é diferente de " + result724 + " <ReflectionTestUtils.getField(writer, 'headerCallback')>")
chamada antiga: assertEquals(footerCallback, ReflectionTestUtils.getField(writer, "footerCallback"))
nova chamada: assertEquals(footerCallback, ReflectionTestUtils.getField(writer, "footerCallback"), "Era esperado valores iguais, mas  footerCallback é diferente de " + result725 + " <ReflectionTestUtils.getField(writer, 'footerCallback')>")
chamada antiga: assertEquals("A json object reader is required.", exception.getMessage())
nova chamada: assertEquals("A json object reader is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A json object reader is required.' é diferente de " + result726 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true.", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true.", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true.' é diferente de " + result727 + " <exception.getMessage()>")
chamada antiga: assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"))
nova chamada: assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"), "Era esperado valores iguais, mas  this.jsonObjectReader é diferente de " + result728 + " <getField(itemReader, 'jsonObjectReader')>")
chamada antiga: assertEquals(this.resource, getField(itemReader, "resource"))
nova chamada: assertEquals(this.resource, getField(itemReader, "resource"), "Era esperado valores iguais, mas  this.resource é diferente de " + result729 + " <getField(itemReader, 'resource')>")
chamada antiga: assertEquals(100, getField(itemReader, "maxItemCount"))
nova chamada: assertEquals(100, getField(itemReader, "maxItemCount"), "Era esperado valores iguais, mas  100 é diferente de " + result730 + " <getField(itemReader, 'maxItemCount')>")
chamada antiga: assertEquals(50, getField(itemReader, "currentItemCount"))
nova chamada: assertEquals(50, getField(itemReader, "currentItemCount"), "Era esperado valores iguais, mas  50 é diferente de " + result731 + " <getField(itemReader, 'currentItemCount')>")
chamada antiga: assertTrue((Boolean) getField(itemReader, "saveState"))
nova chamada: assertTrue((Boolean) getField(itemReader, "saveState"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) getField(itemReader, "strict"))
nova chamada: assertTrue((Boolean) getField(itemReader, "strict"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("jsonItemReader", getField(executionContext, "name"))
nova chamada: assertEquals("jsonItemReader", getField(executionContext, "name"), "Era esperado valores iguais, mas  'jsonItemReader' é diferente de " + result732 + " <getField(executionContext, 'name')>")
chamada antiga: assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"))
nova chamada: assertEquals(this.jsonObjectReader, getField(itemReader, "jsonObjectReader"), "Era esperado valores iguais, mas  this.jsonObjectReader é diferente de " + result733 + " <getField(itemReader, 'jsonObjectReader')>")
chamada antiga: assertEquals(100, getField(itemReader, "maxItemCount"))
nova chamada: assertEquals(100, getField(itemReader, "maxItemCount"), "Era esperado valores iguais, mas  100 é diferente de " + result734 + " <getField(itemReader, 'maxItemCount')>")
chamada antiga: assertEquals(50, getField(itemReader, "currentItemCount"))
nova chamada: assertEquals(50, getField(itemReader, "currentItemCount"), "Era esperado valores iguais, mas  50 é diferente de " + result735 + " <getField(itemReader, 'currentItemCount')>")
chamada antiga: assertTrue((Boolean) getField(itemReader, "saveState"))
nova chamada: assertTrue((Boolean) getField(itemReader, "saveState"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) getField(itemReader, "strict"))
nova chamada: assertTrue((Boolean) getField(itemReader, "strict"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("jsonItemReader", getField(executionContext, "name"))
nova chamada: assertEquals("jsonItemReader", getField(executionContext, "name"), "Era esperado valores iguais, mas  'jsonItemReader' é diferente de " + result736 + " <getField(executionContext, 'name')>")
chamada antiga: assertEquals("{\"id\":1,\"name\":\"foo\"}", foo)
nova chamada: assertEquals("{\"id\":1,\"name\":\"foo\"}", foo, "Era esperado valores iguais, mas  '{\'id\':1,\'name\':\'foo\'}' é diferente de " + " foo")
chamada antiga: assertEquals(eventWriterWrapper.getNamespaceContext(), context)
nova chamada: assertEquals(eventWriterWrapper.getNamespaceContext(), context, "Era esperado valores iguais, mas " + result737 + " <eventWriterWrapper.getNamespaceContext()> é diferente de " + " context")
chamada antiga: assertEquals(eventWriterWrapper.getPrefix(uri), uri)
nova chamada: assertEquals(eventWriterWrapper.getPrefix(uri), uri, "Era esperado valores iguais, mas " + result738 + " <eventWriterWrapper.getPrefix(uri)> é diferente de " + " uri")
chamada antiga: assertEquals(2, unopenedElements.size())
nova chamada: assertEquals(2, unopenedElements.size(), "Era esperado valores iguais, mas  2 é diferente de " + result739 + " <unopenedElements.size()>")
chamada antiga: assertEquals(0, writer.getUnclosedElements().size())
nova chamada: assertEquals(0, writer.getUnclosedElements().size(), "Era esperado valores iguais, mas  0 é diferente de " + result740 + " <writer.getUnclosedElements().size()>")
chamada antiga: assertEquals(1, writer.getUnclosedElements().size())
nova chamada: assertEquals(1, writer.getUnclosedElements().size(), "Era esperado valores iguais, mas  1 é diferente de " + result741 + " <writer.getUnclosedElements().size()>")
chamada antiga: assertEquals(elementB, writer.getUnclosedElements().get(0))
nova chamada: assertEquals(elementB, writer.getUnclosedElements().get(0), "Era esperado valores iguais, mas  elementB é diferente de " + result742 + " <writer.getUnclosedElements().get(0)>")
chamada antiga: assertEquals(2, writer.getUnclosedElements().size())
nova chamada: assertEquals(2, writer.getUnclosedElements().size(), "Era esperado valores iguais, mas  2 é diferente de " + result743 + " <writer.getUnclosedElements().size()>")
chamada antiga: assertEquals(elementA, writer.getUnclosedElements().get(0))
nova chamada: assertEquals(elementA, writer.getUnclosedElements().get(0), "Era esperado valores iguais, mas  elementA é diferente de " + result744 + " <writer.getUnclosedElements().get(0)>")
chamada antiga: assertEquals(elementB, writer.getUnclosedElements().get(1))
nova chamada: assertEquals(elementB, writer.getUnclosedElements().get(1), "Era esperado valores iguais, mas  elementB é diferente de " + result745 + " <writer.getUnclosedElements().get(1)>")
chamada antiga: assertEquals(2, writer.getUnclosedElements().size())
nova chamada: assertEquals(2, writer.getUnclosedElements().size(), "Era esperado valores iguais, mas  2 é diferente de " + result746 + " <writer.getUnclosedElements().size()>")
chamada antiga: assertEquals(elementA, writer.getUnclosedElements().get(0))
nova chamada: assertEquals(elementA, writer.getUnclosedElements().get(0), "Era esperado valores iguais, mas  elementA é diferente de " + result747 + " <writer.getUnclosedElements().get(0)>")
chamada antiga: assertEquals(elementA, writer.getUnclosedElements().get(1))
nova chamada: assertEquals(elementA, writer.getUnclosedElements().get(1), "Era esperado valores iguais, mas  elementA é diferente de " + result748 + " <writer.getUnclosedElements().get(1)>")
chamada antiga: assertEquals(eventReaderWrapper.getElementText(), text)
nova chamada: assertEquals(eventReaderWrapper.getElementText(), text, "Era esperado valores iguais, mas " + result749 + " <eventReaderWrapper.getElementText()> é diferente de " + " text")
chamada antiga: assertEquals(eventReaderWrapper.getProperty("name"), text)
nova chamada: assertEquals(eventReaderWrapper.getProperty("name"), text, "Era esperado valores iguais, mas " + result750 + " <eventReaderWrapper.getProperty('name')> é diferente de " + " text")
chamada antiga: assertTrue(eventReaderWrapper.hasNext())
nova chamada: assertTrue(eventReaderWrapper.hasNext(), "Era esperado verdadeiro, mas " + result751 + " <eventReaderWrapper.hasNext()> é falso")
chamada antiga: assertEquals(eventReaderWrapper.next(), text)
nova chamada: assertEquals(eventReaderWrapper.next(), text, "Era esperado valores iguais, mas " + result752 + " <eventReaderWrapper.next()> é diferente de " + " text")
chamada antiga: assertEquals(eventReaderWrapper.nextEvent(), event)
nova chamada: assertEquals(eventReaderWrapper.nextEvent(), event, "Era esperado valores iguais, mas " + result753 + " <eventReaderWrapper.nextEvent()> é diferente de " + " event")
chamada antiga: assertEquals(eventReaderWrapper.nextTag(), event)
nova chamada: assertEquals(eventReaderWrapper.nextTag(), event, "Era esperado valores iguais, mas " + result754 + " <eventReaderWrapper.nextTag()> é diferente de " + " event")
chamada antiga: assertEquals(eventReaderWrapper.peek(), event)
nova chamada: assertEquals(eventReaderWrapper.peek(), event, "Era esperado valores iguais, mas " + result755 + " <eventReaderWrapper.peek()> é diferente de " + " event")
chamada antiga: assertFalse(returnedItems.isEmpty())
nova chamada: assertFalse(returnedItems.isEmpty(), "Era esperado falso, mas " + result756 + " <returnedItems.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(fooService.getProcessedFooNameValuePairs().isEmpty())
nova chamada: assertFalse(fooService.getProcessedFooNameValuePairs().isEmpty(), "Era esperado falso, mas " + result757 + " <fooService.getProcessedFooNameValuePairs().isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(fragmentReader.hasNext())
nova chamada: assertTrue(fragmentReader.hasNext(), "Era esperado verdadeiro, mas " + result758 + " <fragmentReader.hasNext()> é falso")
chamada antiga: assertEquals("fragment", EventHelper.startElementName(eventReader.peek()))
nova chamada: assertEquals("fragment", EventHelper.startElementName(eventReader.peek()), "Era esperado valores iguais, mas  'fragment' é diferente de " + result759 + " <EventHelper.startElementName(eventReader.peek())>")
chamada antiga: assertTrue(fragmentReader.peek().isStartDocument())
nova chamada: assertTrue(fragmentReader.peek().isStartDocument(), "Era esperado verdadeiro, mas " + result760 + " <fragmentReader.peek().isStartDocument()> é falso")
chamada antiga: assertTrue(fragmentReader.nextEvent().isStartDocument())
nova chamada: assertTrue(fragmentReader.nextEvent().isStartDocument(), "Era esperado verdadeiro, mas " + result761 + " <fragmentReader.nextEvent().isStartDocument()> é falso")
chamada antiga: assertEquals("fragment", EventHelper.startElementName(fragmentReader.nextEvent()))
nova chamada: assertEquals("fragment", EventHelper.startElementName(fragmentReader.nextEvent()), "Era esperado valores iguais, mas  'fragment' é diferente de " + result762 + " <EventHelper.startElementName(fragmentReader.nextEvent())>")
chamada antiga: assertEquals("fragment", EventHelper.endElementName(fragmentReader.nextEvent()))
nova chamada: assertEquals("fragment", EventHelper.endElementName(fragmentReader.nextEvent()), "Era esperado valores iguais, mas  'fragment' é diferente de " + result763 + " <EventHelper.endElementName(fragmentReader.nextEvent())>")
chamada antiga: assertTrue(fragmentReader.peek().isEndDocument())
nova chamada: assertTrue(fragmentReader.peek().isEndDocument(), "Era esperado verdadeiro, mas " + result764 + " <fragmentReader.peek().isEndDocument()> é falso")
chamada antiga: assertTrue(fragmentReader.nextEvent().isEndDocument())
nova chamada: assertTrue(fragmentReader.nextEvent().isEndDocument(), "Era esperado verdadeiro, mas " + result765 + " <fragmentReader.nextEvent().isEndDocument()> é falso")
chamada antiga: assertNull(fragmentReader.peek())
nova chamada: assertNull(fragmentReader.peek(), "Era esperado nulo, mas " + result766 + " <fragmentReader.peek()> não é nulo")
chamada antiga: assertFalse(fragmentReader.hasNext())
nova chamada: assertFalse(fragmentReader.hasNext(), "Era esperado falso, mas " + result767 + " <fragmentReader.hasNext()> é verdadeiro ")
chamada antiga: assertTrue(startFragment.isStartDocument())
nova chamada: assertTrue(startFragment.isStartDocument(), "Era esperado verdadeiro, mas " + result768 + " <startFragment.isStartDocument()> é falso")
chamada antiga: assertEquals("misc2", EventHelper.startElementName(misc2))
nova chamada: assertEquals("misc2", EventHelper.startElementName(misc2), "Era esperado valores iguais, mas  'misc2' é diferente de " + result769 + " <EventHelper.startElementName(misc2)>")
chamada antiga: assertEquals("misc2", EventHelper.startElementName(misc2))
nova chamada: assertEquals("misc2", EventHelper.startElementName(misc2), "Era esperado valores iguais, mas  'misc2' é diferente de " + result770 + " <EventHelper.startElementName(misc2)>")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result771 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result772 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result773 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result774 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result775 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result776 + " <source.read()> não é nulo")
chamada antiga: assertEquals(1, source.read().getItemCount())
nova chamada: assertEquals(1, source.read().getItemCount(), "Era esperado valores iguais, mas  1 é diferente de " + result777 + " <source.read().getItemCount()>")
chamada antiga: assertEquals(2, source.read().getItemCount())
nova chamada: assertEquals(2, source.read().getItemCount(), "Era esperado valores iguais, mas  2 é diferente de " + result778 + " <source.read().getItemCount()>")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result779 + " <source.read()> não é nulo")
chamada antiga: assertEquals(1, source.read().getItemCount())
nova chamada: assertEquals(1, source.read().getItemCount(), "Era esperado valores iguais, mas  1 é diferente de " + result780 + " <source.read().getItemCount()>")
chamada antiga: assertEquals(2, source.read().getItemCount())
nova chamada: assertEquals(2, source.read().getItemCount(), "Era esperado valores iguais, mas  2 é diferente de " + result781 + " <source.read().getItemCount()>")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result782 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result783 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result784 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result785 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result786 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result787 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result788 + " <source.read()> não é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result789 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result790 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result791 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result792 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result793 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result794 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result795 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result796 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result797 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result798 + " <source.read()> é nulo")
chamada antiga: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
nova chamada: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  2 é diferente de " + result799 + " <executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + '.read.count')>")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result800 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result801 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result802 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result803 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result804 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result805 + " <source.read()> não é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result806 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result807 + " <source.read()> é nulo")
chamada antiga: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
nova chamada: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  2 é diferente de " + result808 + " <executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + '.read.count')>")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result809 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result810 + " <source.read()> não é nulo")
chamada antiga: assertFalse(source.moveCursorToNextFragment(reader))
nova chamada: assertFalse(source.moveCursorToNextFragment(reader), "Era esperado falso, mas " + result811 + " <source.moveCursorToNextFragment(reader)> é verdadeiro ")
chamada antiga: assertFalse(source.moveCursorToNextFragment(reader))
nova chamada: assertFalse(source.moveCursorToNextFragment(reader), "Era esperado falso, mas " + result812 + " <source.moveCursorToNextFragment(reader)> é verdadeiro ")
chamada antiga: assertFalse(source.moveCursorToNextFragment(reader))
nova chamada: assertFalse(source.moveCursorToNextFragment(reader), "Era esperado falso, mas " + result813 + " <source.moveCursorToNextFragment(reader)> é verdadeiro ")
chamada antiga: assertEquals(1, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
nova chamada: assertEquals(1, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  1 é diferente de " + result814 + " <executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + '.read.count')>")
chamada antiga: assertEquals(expectedAfterRestart.size(), afterRestart.size())
nova chamada: assertEquals(expectedAfterRestart.size(), afterRestart.size(), "Era esperado valores iguais, mas " + result815 + " <expectedAfterRestart.size()> é diferente de " + result816 + " <afterRestart.size()>")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result817 + " <source.read()> é nulo")
chamada antiga: assertNotNull(source.read())
nova chamada: assertNotNull(source.read(), "Era esperado não nulo, mas " + result818 + " <source.read()> é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result819 + " <source.read()> não é nulo")
chamada antiga: assertEquals(3, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"))
nova chamada: assertEquals(3, executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  3 é diferente de " + result820 + " <executionContext.getInt(ClassUtils.getShortName(StaxEventItemReader.class) + '.read.count')>")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result821 + " <source.read()> não é nulo")
chamada antiga: assertEquals(NUMBER_OF_RECORDS, extractRecordCount())
nova chamada: assertEquals(NUMBER_OF_RECORDS, extractRecordCount(), "Era esperado valores iguais, mas  NUMBER_OF_RECORDS é diferente de " + result822 + " <extractRecordCount()>")
chamada antiga: assertEquals(NUMBER_OF_RECORDS, extractRecordCount())
nova chamada: assertEquals(NUMBER_OF_RECORDS, extractRecordCount(), "Era esperado valores iguais, mas  NUMBER_OF_RECORDS é diferente de " + result823 + " <extractRecordCount()>")
chamada antiga: assertNotNull(item)
nova chamada: assertNotNull(item, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(newSource.isOpenCalled())
nova chamada: assertTrue(newSource.isOpenCalled(), "Era esperado verdadeiro, mas " + result824 + " <newSource.isOpenCalled()> é falso")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result825 + " <source.read()> não é nulo")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result826 + " <source.read()> não é nulo")
chamada antiga: assertTrue(resource.getFile().isDirectory())
nova chamada: assertTrue(resource.getFile().isDirectory(), "Era esperado verdadeiro, mas " + result827 + " <resource.getFile().isDirectory()> é falso")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result828 + " <source.read()> não é nulo")
chamada antiga: assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage())
nova chamada: assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage(), "Era esperado objetos iguais, mas  TroublemakerUnmarshaller.MESSAGE é diferente de " + result829 + " <expected.getMessage()>")
chamada antiga: assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage())
nova chamada: assertSame(TroublemakerUnmarshaller.MESSAGE, expected.getMessage(), "Era esperado objetos iguais, mas  TroublemakerUnmarshaller.MESSAGE é diferente de " + result830 + " <expected.getMessage()>")
chamada antiga: assertNull(source.read())
nova chamada: assertNull(source.read(), "Era esperado nulo, mas " + result831 + " <source.read()> não é nulo")
chamada antiga: assertEquals(3, results.size())
nova chamada: assertEquals(3, results.size(), "Era esperado valores iguais, mas  3 é diferente de " + result832 + " <results.size()>")
chamada antiga: assertEquals("XYZ0001", trade1.getIsin())
nova chamada: assertEquals("XYZ0001", trade1.getIsin(), "Era esperado valores iguais, mas  'XYZ0001' é diferente de " + result833 + " <trade1.getIsin()>")
chamada antiga: assertEquals(5, trade1.getQuantity())
nova chamada: assertEquals(5, trade1.getQuantity(), "Era esperado valores iguais, mas  5 é diferente de " + result834 + " <trade1.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("11.39"), trade1.getPrice())
nova chamada: assertEquals(new BigDecimal("11.39"), trade1.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('11.39') é diferente de " + result835 + " <trade1.getPrice()>")
chamada antiga: assertEquals("Customer1", trade1.getCustomer())
nova chamada: assertEquals("Customer1", trade1.getCustomer(), "Era esperado valores iguais, mas  'Customer1' é diferente de " + result836 + " <trade1.getCustomer()>")
chamada antiga: assertEquals("XYZ0002", trade2.getIsin())
nova chamada: assertEquals("XYZ0002", trade2.getIsin(), "Era esperado valores iguais, mas  'XYZ0002' é diferente de " + result837 + " <trade2.getIsin()>")
chamada antiga: assertEquals(2, trade2.getQuantity())
nova chamada: assertEquals(2, trade2.getQuantity(), "Era esperado valores iguais, mas  2 é diferente de " + result838 + " <trade2.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("72.99"), trade2.getPrice())
nova chamada: assertEquals(new BigDecimal("72.99"), trade2.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('72.99') é diferente de " + result839 + " <trade2.getPrice()>")
chamada antiga: assertEquals("Customer2", trade2.getCustomer())
nova chamada: assertEquals("Customer2", trade2.getCustomer(), "Era esperado valores iguais, mas  'Customer2' é diferente de " + result840 + " <trade2.getCustomer()>")
chamada antiga: assertEquals("XYZ0003", trade3.getIsin())
nova chamada: assertEquals("XYZ0003", trade3.getIsin(), "Era esperado valores iguais, mas  'XYZ0003' é diferente de " + result841 + " <trade3.getIsin()>")
chamada antiga: assertEquals(9, trade3.getQuantity())
nova chamada: assertEquals(9, trade3.getQuantity(), "Era esperado valores iguais, mas  9 é diferente de " + result842 + " <trade3.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("99.99"), trade3.getPrice())
nova chamada: assertEquals(new BigDecimal("99.99"), trade3.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('99.99') é diferente de " + result843 + " <trade3.getPrice()>")
chamada antiga: assertEquals("Customer3", trade3.getCustomer())
nova chamada: assertEquals("Customer3", trade3.getCustomer(), "Era esperado valores iguais, mas  'Customer3' é diferente de " + result844 + " <trade3.getCustomer()>")
chamada antiga: assertEquals("XYZ0001", trade.getIsin())
nova chamada: assertEquals("XYZ0001", trade.getIsin(), "Era esperado valores iguais, mas  'XYZ0001' é diferente de " + result845 + " <trade.getIsin()>")
chamada antiga: assertEquals(5, trade.getQuantity())
nova chamada: assertEquals(5, trade.getQuantity(), "Era esperado valores iguais, mas  5 é diferente de " + result846 + " <trade.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("11.39"), trade.getPrice())
nova chamada: assertEquals(new BigDecimal("11.39"), trade.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('11.39') é diferente de " + result847 + " <trade.getPrice()>")
chamada antiga: assertEquals("Customer1", trade.getCustomer())
nova chamada: assertEquals("Customer1", trade.getCustomer(), "Era esperado valores iguais, mas  'Customer1' é diferente de " + result848 + " <trade.getCustomer()>")
chamada antiga: assertEquals(3, results.size())
nova chamada: assertEquals(3, results.size(), "Era esperado valores iguais, mas  3 é diferente de " + result849 + " <results.size()>")
chamada antiga: assertEquals("XYZ0001", trade1.getIsin())
nova chamada: assertEquals("XYZ0001", trade1.getIsin(), "Era esperado valores iguais, mas  'XYZ0001' é diferente de " + result850 + " <trade1.getIsin()>")
chamada antiga: assertEquals(5, trade1.getQuantity())
nova chamada: assertEquals(5, trade1.getQuantity(), "Era esperado valores iguais, mas  5 é diferente de " + result851 + " <trade1.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("11.39"), trade1.getPrice())
nova chamada: assertEquals(new BigDecimal("11.39"), trade1.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('11.39') é diferente de " + result852 + " <trade1.getPrice()>")
chamada antiga: assertEquals("Customer1", trade1.getCustomer())
nova chamada: assertEquals("Customer1", trade1.getCustomer(), "Era esperado valores iguais, mas  'Customer1' é diferente de " + result853 + " <trade1.getCustomer()>")
chamada antiga: assertEquals("XYZ0002", trade2.getIsin())
nova chamada: assertEquals("XYZ0002", trade2.getIsin(), "Era esperado valores iguais, mas  'XYZ0002' é diferente de " + result854 + " <trade2.getIsin()>")
chamada antiga: assertEquals(2, trade2.getQuantity())
nova chamada: assertEquals(2, trade2.getQuantity(), "Era esperado valores iguais, mas  2 é diferente de " + result855 + " <trade2.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("72.99"), trade2.getPrice())
nova chamada: assertEquals(new BigDecimal("72.99"), trade2.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('72.99') é diferente de " + result856 + " <trade2.getPrice()>")
chamada antiga: assertEquals("Customer2", trade2.getCustomer())
nova chamada: assertEquals("Customer2", trade2.getCustomer(), "Era esperado valores iguais, mas  'Customer2' é diferente de " + result857 + " <trade2.getCustomer()>")
chamada antiga: assertEquals("XYZ0003", trade3.getIsin())
nova chamada: assertEquals("XYZ0003", trade3.getIsin(), "Era esperado valores iguais, mas  'XYZ0003' é diferente de " + result858 + " <trade3.getIsin()>")
chamada antiga: assertEquals(9, trade3.getQuantity())
nova chamada: assertEquals(9, trade3.getQuantity(), "Era esperado valores iguais, mas  9 é diferente de " + result859 + " <trade3.getQuantity()>")
chamada antiga: assertEquals(new BigDecimal("99.99"), trade3.getPrice())
nova chamada: assertEquals(new BigDecimal("99.99"), trade3.getPrice(), "Era esperado valores iguais, mas  new BigDecimal('99.99') é diferente de " + result860 + " <trade3.getPrice()>")
chamada antiga: assertEquals("Customer3", trade3.getCustomer())
nova chamada: assertEquals("Customer3", trade3.getCustomer(), "Era esperado valores iguais, mas  'Customer3' é diferente de " + result861 + " <trade3.getCustomer()>")
chamada antiga: assertEquals("A name is required when saveState is set to true.", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true.", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true.' é diferente de " + result862 + " <exception.getMessage()>")
chamada antiga: assertEquals("At least one fragment root element is required", exception.getMessage())
nova chamada: assertEquals("At least one fragment root element is required", exception.getMessage(), "Era esperado valores iguais, mas  'At least one fragment root element is required' é diferente de " + result863 + " <exception.getMessage()>")
chamada antiga: assertNotNull(reader)
nova chamada: assertNotNull(reader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result864 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(4, item.getFirst())
nova chamada: assertEquals(4, item.getFirst(), "Era esperado valores iguais, mas  4 é diferente de " + result865 + " <item.getFirst()>")
chamada antiga: assertEquals("five", item.getSecond())
nova chamada: assertEquals("five", item.getSecond(), "Era esperado valores iguais, mas  'five' é diferente de " + result866 + " <item.getSecond()>")
chamada antiga: assertEquals("six", item.getThird())
nova chamada: assertEquals("six", item.getThird(), "Era esperado valores iguais, mas  'six' é diferente de " + result867 + " <item.getThird()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result868 + " <executionContext.size()>")
chamada antiga: assertEquals("fooReader", getField(executionContextUserSupport, "name"))
nova chamada: assertEquals("fooReader", getField(executionContextUserSupport, "name"), "Era esperado valores iguais, mas  'fooReader' é diferente de " + result869 + " <getField(executionContextUserSupport, 'name')>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result870 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(4, item.getFirst())
nova chamada: assertEquals(4, item.getFirst(), "Era esperado valores iguais, mas  4 é diferente de " + result871 + " <item.getFirst()>")
chamada antiga: assertEquals("five", item.getSecond())
nova chamada: assertEquals("five", item.getSecond(), "Era esperado valores iguais, mas  'five' é diferente de " + result872 + " <item.getSecond()>")
chamada antiga: assertEquals("six", item.getThird())
nova chamada: assertEquals("six", item.getThird(), "Era esperado valores iguais, mas  'six' é diferente de " + result873 + " <item.getThird()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result874 + " <executionContext.size()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result875 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(7, item.getFirst())
nova chamada: assertEquals(7, item.getFirst(), "Era esperado valores iguais, mas  7 é diferente de " + result876 + " <item.getFirst()>")
chamada antiga: assertEquals("eight", item.getSecond())
nova chamada: assertEquals("eight", item.getSecond(), "Era esperado valores iguais, mas  'eight' é diferente de " + result877 + " <item.getSecond()>")
chamada antiga: assertEquals("nine", item.getThird())
nova chamada: assertEquals("nine", item.getThird(), "Era esperado valores iguais, mas  'nine' é diferente de " + result878 + " <item.getThird()>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result879 + " <executionContext.size()>")
chamada antiga: assertFalse(file.exists())
nova chamada: assertFalse(file.exists(), "Era esperado falso, mas " + result880 + " <file.exists()> é verdadeiro ")
chamada antiga: assertTrue(writer instanceof TransactionAwareBufferedWriter)
nova chamada: assertTrue(writer instanceof TransactionAwareBufferedWriter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(writer, "forceSync"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(FULL_OUTPUT, getOutputFileContent("UTF-16"))
nova chamada: assertEquals(FULL_OUTPUT, getOutputFileContent("UTF-16"), "Era esperado valores iguais, mas  FULL_OUTPUT é diferente de " + result881 + " <getOutputFileContent('UTF-16')>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result882 + " <executionContext.size()>")
chamada antiga: assertFalse(output.contains("standalone="))
nova chamada: assertFalse(output.contains("standalone="), "Era esperado falso, mas " + result883 + " <output.contains('standalone=')> é verdadeiro ")
chamada antiga: assertTrue(output.contains("standalone='yes'"))
nova chamada: assertTrue(output.contains("standalone='yes'"), "Era esperado verdadeiro, mas " + result884 + " <output.contains('standalone='yes'')> é falso")
chamada antiga: assertTrue(output.contains("standalone='no'"))
nova chamada: assertTrue(output.contains("standalone='no'"), "Era esperado verdadeiro, mas " + result885 + " <output.contains('standalone='no'')> é falso")
chamada antiga: assertFalse(content.contains("standalone="))
nova chamada: assertFalse(content.contains("standalone="), "Era esperado falso, mas " + result886 + " <content.contains('standalone=')> é verdadeiro ")
chamada antiga: assertTrue(content.contains("standalone='yes'"))
nova chamada: assertTrue(content.contains("standalone='yes'"), "Era esperado verdadeiro, mas " + result887 + " <content.contains('standalone='yes'')> é falso")
chamada antiga: assertTrue(content.contains("standalone='no'"))
nova chamada: assertTrue(content.contains("standalone='no'"), "Era esperado verdadeiro, mas " + result888 + " <content.contains('standalone='no'')> é falso")
chamada antiga: assertEquals(3, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
nova chamada: assertEquals(3, StringUtils.countOccurrencesOf(outputFile, TEST_STRING), "Era esperado valores iguais, mas  3 é diferente de " + result889 + " <StringUtils.countOccurrencesOf(outputFile, TEST_STRING)>")
chamada antiga: assertEquals("<root>" + TEST_STRING + TEST_STRING + TEST_STRING + "</root>", outputFile.replace(" ", ""))
nova chamada: assertEquals("<root>" + TEST_STRING + TEST_STRING + TEST_STRING + "</root>", outputFile.replace(" ", ""), "Era esperado valores iguais, mas  'root' + TEST_STRING + TEST_STRING + TEST_STRING + '/root' é diferente de " + result890 + " <outputFile.replace(' ', '')>")
chamada antiga: assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
nova chamada: assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING), "Era esperado valores iguais, mas  2 é diferente de " + result891 + " <StringUtils.countOccurrencesOf(outputFile, TEST_STRING)>")
chamada antiga: assertTrue(outputFile.contains("<root>" + TEST_STRING + TEST_STRING + "</root>"))
nova chamada: assertTrue(outputFile.contains("<root>" + TEST_STRING + TEST_STRING + "</root>"), "Era esperado verdadeiro, mas " + result892 + " <outputFile.contains('<root>' + TEST_STRING + TEST_STRING + '</root>')> é falso")
chamada antiga: assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING_MULTI_BYTE))
nova chamada: assertEquals(2, StringUtils.countOccurrencesOf(outputFile, TEST_STRING_MULTI_BYTE), "Era esperado valores iguais, mas  2 é diferente de " + result893 + " <StringUtils.countOccurrencesOf(outputFile, TEST_STRING_MULTI_BYTE)>")
chamada antiga: assertTrue(outputFile.contains("<root>" + TEST_STRING_MULTI_BYTE + TEST_STRING_MULTI_BYTE + "</root>"))
nova chamada: assertTrue(outputFile.contains("<root>" + TEST_STRING_MULTI_BYTE + TEST_STRING_MULTI_BYTE + "</root>"), "Era esperado verdadeiro, mas " + result894 + " <outputFile.contains('<root>' + TEST_STRING_MULTI_BYTE + TEST_STRING_MULTI_BYTE + '</root>')> é falso")
chamada antiga: assertEquals("<root></root>", outputFile)
nova chamada: assertEquals("<root></root>", outputFile, "Era esperado valores iguais, mas  'root/root' é diferente de " + " outputFile")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(outputFile, TEST_STRING))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(outputFile, TEST_STRING), "Era esperado valores iguais, mas  1 é diferente de " + result895 + " <StringUtils.countOccurrencesOf(outputFile, TEST_STRING)>")
chamada antiga: assertTrue(outputFile.contains("<root>" + TEST_STRING + "</root>"))
nova chamada: assertTrue(outputFile.contains("<root>" + TEST_STRING + "</root>"), "Era esperado verdadeiro, mas " + result896 + " <outputFile.contains('<root>' + TEST_STRING + '</root>')> é falso")
chamada antiga: assertEquals("<root><StaxEventItemWriter-testString/></root>", outputFile)
nova chamada: assertEquals("<root><StaxEventItemWriter-testString/></root>", outputFile, "Era esperado valores iguais, mas  'rootStaxEventItemWriter-testString//root' é diferente de " + " outputFile")
chamada antiga: assertFalse(executionContext.containsKey(ClassUtils.getShortName(StaxEventItemWriter.class) + ".record.count"))
nova chamada: assertFalse(executionContext.containsKey(ClassUtils.getShortName(StaxEventItemWriter.class) + ".record.count"), "Era esperado falso, mas " + result897 + " <executionContext.containsKey(ClassUtils.getShortName(StaxEventItemWriter.class) + '.record.count')> é verdadeiro ")
chamada antiga: assertTrue(content.contains("<testroot attribute=\"value\">"))
nova chamada: assertTrue(content.contains("<testroot attribute=\"value\">"), "Era esperado verdadeiro, mas " + result898 + " <content.contains('<testroot attribute=\'value\'>')> é falso")
chamada antiga: assertTrue(content.contains("<header/>"))
nova chamada: assertTrue(content.contains("<header/>"), "Era esperado verdadeiro, mas " + result899 + " <content.contains('<header/>')> é falso")
chamada antiga: assertTrue(content.contains("<footer/>"))
nova chamada: assertTrue(content.contains("<footer/>"), "Era esperado verdadeiro, mas " + result900 + " <content.contains('<footer/>')> é falso")
chamada antiga: assertTrue(content.endsWith("</testroot>"))
nova chamada: assertTrue(content.endsWith("</testroot>"), "Era esperado verdadeiro, mas " + result901 + " <content.endsWith('</testroot>')> é falso")
chamada antiga: assertEquals("Output resource must exist", exception.getMessage())
nova chamada: assertEquals("Output resource must exist", exception.getMessage(), "Era esperado valores iguais, mas  'Output resource must exist' é diferente de " + result902 + " <exception.getMessage()>")
chamada antiga: assertFalse(resource.getFile().exists())
nova chamada: assertFalse(resource.getFile().exists(), "Era esperado falso, mas " + result903 + " <resource.getFile().exists()> é verdadeiro ")
chamada antiga: assertDoesNotThrow(() -> recoverer.recover(new Object[] { "foo" }, null))
nova chamada: assertDoesNotThrow(() -> recoverer.recover(new Object[] { "foo" }, null), "Era esperado que nenhuma exceção fosse lançada, mas  () - recoverer.recover(new Object[] { 'foo' }, null) foi lançada")
chamada antiga: assertEquals("FOO", content.get())
nova chamada: assertEquals("FOO", content.get(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result904 + " <content.get()>")
chamada antiga: assertEquals("FOO", content.get())
nova chamada: assertEquals("FOO", content.get(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result905 + " <content.get()>")
chamada antiga: assertEquals("A mailSender is required", exception.getMessage())
nova chamada: assertEquals("A mailSender is required", exception.getMessage(), "Era esperado valores iguais, mas  'A mailSender is required' é diferente de " + result906 + " <exception.getMessage()>")
chamada antiga: assertEquals("FOO", content.get())
nova chamada: assertEquals("FOO", content.get(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result907 + " <content.get()>")
chamada antiga: assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { message }))
nova chamada: assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { message }), "Era esperado falso, mas " + result908 + " <newMethodArgumentsIdentifier.isNew(new Object[] { message })> é verdadeiro ")
chamada antiga: assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { "foo" }))
nova chamada: assertFalse(newMethodArgumentsIdentifier.isNew(new Object[] { "foo" }), "Era esperado falso, mas " + result909 + " <newMethodArgumentsIdentifier.isNew(new Object[] { 'foo' })> é verdadeiro ")
chamada antiga: assertEquals("foo", itemReader.read())
nova chamada: assertEquals("foo", itemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result910 + " <itemReader.read()>")
chamada antiga: assertEquals("foo", itemReader.read())
nova chamada: assertEquals("foo", itemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result911 + " <itemReader.read()>")
chamada antiga: assertEquals(date, itemReader.read())
nova chamada: assertEquals(date, itemReader.read(), "Era esperado valores iguais, mas  date é diferente de " + result912 + " <itemReader.read()>")
chamada antiga: assertTrue(exception.getMessage().contains("wrong type"))
nova chamada: assertTrue(exception.getMessage().contains("wrong type"), "Era esperado verdadeiro, mas " + result913 + " <exception.getMessage().contains('wrong type')> é falso")
chamada antiga: assertEquals(message, itemReader.read())
nova chamada: assertEquals(message, itemReader.read(), "Era esperado valores iguais, mas  message é diferente de " + result914 + " <itemReader.read()>")
chamada antiga: assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { message }))
nova chamada: assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { message }), "Era esperado valores iguais, mas  'foo' é diferente de " + result915 + " <methodArgumentsKeyGenerator.getKey(new Object[] { message })>")
chamada antiga: assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { "foo" }))
nova chamada: assertEquals("foo", methodArgumentsKeyGenerator.getKey(new Object[] { "foo" }), "Era esperado valores iguais, mas  'foo' é diferente de " + result916 + " <methodArgumentsKeyGenerator.getKey(new Object[] { 'foo' })>")
chamada antiga: assertEquals("foo", itemReader.read())
nova chamada: assertEquals("foo", itemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result917 + " <itemReader.read()>")
chamada antiga: assertEquals(date, itemReader.read())
nova chamada: assertEquals(date, itemReader.read(), "Era esperado valores iguais, mas  date é diferente de " + result918 + " <itemReader.read()>")
chamada antiga: assertTrue(exception.getMessage().contains("wrong type"))
nova chamada: assertTrue(exception.getMessage().contains("wrong type"), "Era esperado verdadeiro, mas " + result919 + " <exception.getMessage().contains('wrong type')> é falso")
chamada antiga: assertEquals(message, itemReader.read())
nova chamada: assertEquals(message, itemReader.read(), "Era esperado valores iguais, mas  message é diferente de " + result920 + " <itemReader.read()>")
chamada antiga: assertEquals("jmsTemplate is required.", exception.getMessage())
nova chamada: assertEquals("jmsTemplate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'jmsTemplate is required.' é diferente de " + result921 + " <exception.getMessage()>")
chamada antiga: assertEquals("jmsTemplate is required.", exception.getMessage())
nova chamada: assertEquals("jmsTemplate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'jmsTemplate is required.' é diferente de " + result922 + " <exception.getMessage()>")
chamada antiga: assertEquals("A delegate item writer is required", expectedException.getMessage())
nova chamada: assertEquals("A delegate item writer is required", expectedException.getMessage(), "Era esperado valores iguais, mas  'A delegate item writer is required' é diferente de " + result923 + " <expectedException.getMessage()>")
chamada antiga: assertEquals("bar", processor.process("bar"))
nova chamada: assertEquals("bar", processor.process("bar"), "Era esperado valores iguais, mas  'bar' é diferente de " + result924 + " <processor.process('bar')>")
chamada antiga: assertEquals("foo: foo", processor.process("foo"))
nova chamada: assertEquals("foo: foo", processor.process("foo"), "Era esperado valores iguais, mas  'foo: foo' é diferente de " + result925 + " <processor.process('foo')>")
chamada antiga: assertEquals("baz", processor.process("baz"))
nova chamada: assertEquals("baz", processor.process("baz"), "Era esperado valores iguais, mas  'baz' é diferente de " + result926 + " <processor.process('baz')>")
chamada antiga: assertEquals("int: 1", processor.process(Integer.valueOf(1)).toString())
nova chamada: assertEquals("int: 1", processor.process(Integer.valueOf(1)).toString(), "Era esperado valores iguais, mas  'int: 1' é diferente de " + result927 + " <processor.process(Integer.valueOf(1)).toString()>")
chamada antiga: assertEquals("long: 2", processor.process(Long.valueOf(2)).toString())
nova chamada: assertEquals("long: 2", processor.process(Long.valueOf(2)).toString(), "Era esperado valores iguais, mas  'long: 2' é diferente de " + result928 + " <processor.process(Long.valueOf(2)).toString()>")
chamada antiga: assertEquals("number: 3", processor.process(Byte.valueOf((byte) 3)).toString())
nova chamada: assertEquals("number: 3", processor.process(Byte.valueOf((byte) 3)).toString(), "Era esperado valores iguais, mas  'number: 3' é diferente de " + result929 + " <processor.process(Byte.valueOf((byte) 3)).toString()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result930 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result931 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result932 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("a", reader.peek())
nova chamada: assertEquals("a", reader.peek(), "Era esperado valores iguais, mas  'a' é diferente de " + result933 + " <reader.peek()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result934 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result935 + " <reader.read()>")
chamada antiga: assertNull(reader.peek())
nova chamada: assertNull(reader.peek(), "Era esperado nulo, mas " + result936 + " <reader.peek()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result937 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result938 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result939 + " <reader.read()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result940 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.peek())
nova chamada: assertEquals("b", reader.peek(), "Era esperado valores iguais, mas  'b' é diferente de " + result941 + " <reader.peek()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result942 + " <reader.read()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result943 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.peek())
nova chamada: assertEquals("b", reader.peek(), "Era esperado valores iguais, mas  'b' é diferente de " + result944 + " <reader.peek()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result945 + " <reader.read()>")
chamada antiga: assertEquals("c", reader.peek())
nova chamada: assertEquals("c", reader.peek(), "Era esperado valores iguais, mas  'c' é diferente de " + result946 + " <reader.peek()>")
chamada antiga: assertEquals("c", reader.read())
nova chamada: assertEquals("c", reader.read(), "Era esperado valores iguais, mas  'c' é diferente de " + result947 + " <reader.read()>")
chamada antiga: assertEquals(2, reader.getCurrentItemCount())
nova chamada: assertEquals(2, reader.getCurrentItemCount(), "Era esperado valores iguais, mas  2 é diferente de " + result948 + " <reader.getCurrentItemCount()>")
chamada antiga: assertEquals(3, reader.getCurrentItemCount())
nova chamada: assertEquals(3, reader.getCurrentItemCount(), "Era esperado valores iguais, mas  3 é diferente de " + result949 + " <reader.getCurrentItemCount()>")
chamada antiga: assertEquals(0, reader.getCurrentItemCount())
nova chamada: assertEquals(0, reader.getCurrentItemCount(), "Era esperado valores iguais, mas  0 é diferente de " + result950 + " <reader.getCurrentItemCount()>")
chamada antiga: assertEquals(1, reader.getCurrentItemCount())
nova chamada: assertEquals(1, reader.getCurrentItemCount(), "Era esperado valores iguais, mas  1 é diferente de " + result951 + " <reader.getCurrentItemCount()>")
chamada antiga: assertTrue(reader.closeCalled)
nova chamada: assertTrue(reader.closeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(reader.openCalled)
nova chamada: assertTrue(reader.openCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result952 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(1, context.size())
nova chamada: assertEquals(1, context.size(), "Era esperado valores iguais, mas  1 é diferente de " + result953 + " <context.size()>")
chamada antiga: assertEquals(1, context.getInt("foo.read.count"))
nova chamada: assertEquals(1, context.getInt("foo.read.count"), "Era esperado valores iguais, mas  1 é diferente de " + result954 + " <context.getInt('foo.read.count')>")
chamada antiga: assertEquals(1, context.getInt("bar.read.count"))
nova chamada: assertEquals(1, context.getInt("bar.read.count"), "Era esperado valores iguais, mas  1 é diferente de " + result955 + " <context.getInt('bar.read.count')>")
chamada antiga: assertEquals(1, context.size())
nova chamada: assertEquals(1, context.size(), "Era esperado valores iguais, mas  1 é diferente de " + result956 + " <context.size()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result957 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(2, context.size())
nova chamada: assertEquals(2, context.size(), "Era esperado valores iguais, mas  2 é diferente de " + result958 + " <context.size()>")
chamada antiga: assertSame(itemAfterSecondTransformation, composite.process(item))
nova chamada: assertSame(itemAfterSecondTransformation, composite.process(item), "Era esperado objetos iguais, mas  itemAfterSecondTransformation é diferente de " + result959 + " <composite.process(item)>")
chamada antiga: assertEquals("output", composite.process("input"))
nova chamada: assertEquals("output", composite.process("input"), "Era esperado valores iguais, mas  'output' é diferente de " + result960 + " <composite.process('input')>")
chamada antiga: assertNull(composite.process(item))
nova chamada: assertNull(composite.process(item), "Era esperado nulo, mas " + result961 + " <composite.process(item)> não é nulo")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result962 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result963 + " <reader.read()>")
chamada antiga: assertEquals("c", reader.read())
nova chamada: assertEquals("c", reader.read(), "Era esperado valores iguais, mas  'c' é diferente de " + result964 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result965 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result966 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result967 + " <reader.read()>")
chamada antiga: assertEquals("c", reader.read())
nova chamada: assertEquals("c", reader.read(), "Era esperado valores iguais, mas  'c' é diferente de " + result968 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result969 + " <reader.read()> não é nulo")
chamada antiga: assertIterableEquals(Chunk.of("foo", "foo"), foos)
nova chamada: assertIterableEquals(Chunk.of("foo", "foo"), foos, "Era esperado que as listas fossem iguais, mas " + result970 + " <Chunk.of('foo', 'foo')> não é igual a " + " foos")
chamada antiga: assertIterableEquals(Chunk.of("one", "two", "three"), defaults)
nova chamada: assertIterableEquals(Chunk.of("one", "two", "three"), defaults, "Era esperado que as listas fossem iguais, mas " + result971 + " <Chunk.of('one', 'two', 'three')> não é igual a " + " defaults")
chamada antiga: assertEquals("A classifier is required.", exception.getMessage())
nova chamada: assertEquals("A classifier is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A classifier is required.' é diferente de " + result972 + " <exception.getMessage()>")
chamada antiga: assertEquals(true, executionContext.get(TestItemReader.HAS_BEEN_OPENED))
nova chamada: assertEquals(true, executionContext.get(TestItemReader.HAS_BEEN_OPENED), "Era esperado valores iguais, mas  true é diferente de " + result973 + " <executionContext.get(TestItemReader.HAS_BEEN_OPENED)>")
chamada antiga: assertFalse(testItemReader.isClosed())
nova chamada: assertFalse(testItemReader.isClosed(), "Era esperado falso, mas " + result974 + " <testItemReader.isClosed()> é verdadeiro ")
chamada antiga: assertTrue(testItemReader.isClosed())
nova chamada: assertTrue(testItemReader.isClosed(), "Era esperado verdadeiro, mas " + result975 + " <testItemReader.isClosed()> é falso")
chamada antiga: assertEquals(SIZE, executionContext.getInt(TestItemReader.UPDATE_COUNT_KEY))
nova chamada: assertEquals(SIZE, executionContext.getInt(TestItemReader.UPDATE_COUNT_KEY), "Era esperado valores iguais, mas  SIZE é diferente de " + result976 + " <executionContext.getInt(TestItemReader.UPDATE_COUNT_KEY)>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result977 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result978 + " <reader.read()>")
chamada antiga: assertEquals("c", reader.read())
nova chamada: assertEquals("c", reader.read(), "Era esperado valores iguais, mas  'c' é diferente de " + result979 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result980 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(1, taken.size())
nova chamada: assertEquals(1, taken.size(), "Era esperado valores iguais, mas  1 é diferente de " + result981 + " <taken.size()>")
chamada antiga: assertEquals("a", taken.get(0))
nova chamada: assertEquals("a", taken.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result982 + " <taken.get(0)>")
chamada antiga: assertFalse(taken.contains("a"))
nova chamada: assertFalse(taken.contains("a"), "Era esperado falso, mas " + result983 + " <taken.contains('a')> é verdadeiro ")
chamada antiga: assertEquals(3, taken.size())
nova chamada: assertEquals(3, taken.size(), "Era esperado valores iguais, mas  3 é diferente de " + result984 + " <taken.size()>")
chamada antiga: assertEquals("a", taken.get(0))
nova chamada: assertEquals("a", taken.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result985 + " <taken.get(0)>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result986 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, taken.size())
nova chamada: assertEquals(1, taken.size(), "Era esperado valores iguais, mas  1 é diferente de " + result987 + " <taken.size()>")
chamada antiga: assertEquals("a", taken.get(0))
nova chamada: assertEquals("a", taken.get(0), "Era esperado valores iguais, mas  'a' é diferente de " + result988 + " <taken.get(0)>")
chamada antiga: assertTrue(taken.contains("a"))
nova chamada: assertTrue(taken.contains("a"), "Era esperado verdadeiro, mas " + result989 + " <taken.contains('a')> é falso")
chamada antiga: assertIterableEquals(Chunk.of("foo", "foo"), foos)
nova chamada: assertIterableEquals(Chunk.of("foo", "foo"), foos, "Era esperado que as listas fossem iguais, mas " + result990 + " <Chunk.of('foo', 'foo')> não é igual a " + " foos")
chamada antiga: assertIterableEquals(Chunk.of("one", "two", "three"), defaults)
nova chamada: assertIterableEquals(Chunk.of("one", "two", "three"), defaults, "Era esperado que as listas fossem iguais, mas " + result991 + " <Chunk.of('one', 'two', 'three')> não é igual a " + " defaults")
chamada antiga: assertEquals("A classifier is required.", exception.getMessage())
nova chamada: assertEquals("A classifier is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A classifier is required.' é diferente de " + result992 + " <exception.getMessage()>")
chamada antiga: assertEquals("A delegate item writer is required", expectedException.getMessage())
nova chamada: assertEquals("A delegate item writer is required", expectedException.getMessage(), "Era esperado valores iguais, mas  'A delegate item writer is required' é diferente de " + result993 + " <expectedException.getMessage()>")
chamada antiga: assertEquals("a", reader.peek())
nova chamada: assertEquals("a", reader.peek(), "Era esperado valores iguais, mas  'a' é diferente de " + result994 + " <reader.peek()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result995 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result996 + " <reader.read()>")
chamada antiga: assertNull(reader.peek())
nova chamada: assertNull(reader.peek(), "Era esperado nulo, mas " + result997 + " <reader.peek()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result998 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("A delegate is required", exception.getMessage())
nova chamada: assertEquals("A delegate is required", exception.getMessage(), "Era esperado valores iguais, mas  'A delegate is required' é diferente de " + result999 + " <exception.getMessage()>")
chamada antiga: assertEquals(true, executionContext.get(SynchronizedItemStreamReaderBuilderTests.TestItemReader.HAS_BEEN_OPENED))
nova chamada: assertEquals(true, executionContext.get(SynchronizedItemStreamReaderBuilderTests.TestItemReader.HAS_BEEN_OPENED), "Era esperado valores iguais, mas  true é diferente de " + result1000 + " <executionContext.get(SynchronizedItemStreamReaderBuilderTests.TestItemReader.HAS_BEEN_OPENED)>")
chamada antiga: assertFalse(testItemReader.isClosed())
nova chamada: assertFalse(testItemReader.isClosed(), "Era esperado falso, mas " + result1001 + " <testItemReader.isClosed()> é verdadeiro ")
chamada antiga: assertTrue(testItemReader.isClosed())
nova chamada: assertTrue(testItemReader.isClosed(), "Era esperado verdadeiro, mas " + result1002 + " <testItemReader.isClosed()> é falso")
chamada antiga: assertEquals(SIZE, executionContext.getInt(SynchronizedItemStreamReaderBuilderTests.TestItemReader.UPDATE_COUNT_KEY))
nova chamada: assertEquals(SIZE, executionContext.getInt(SynchronizedItemStreamReaderBuilderTests.TestItemReader.UPDATE_COUNT_KEY), "Era esperado valores iguais, mas  SIZE é diferente de " + result1003 + " <executionContext.getInt(SynchronizedItemStreamReaderBuilderTests.TestItemReader.UPDATE_COUNT_KEY)>")
chamada antiga: assertEquals(message, exception.getMessage())
nova chamada: assertEquals(message, exception.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result1004 + " <exception.getMessage()>")
chamada antiga: assertEquals("bar", processor.process("bar"))
nova chamada: assertEquals("bar", processor.process("bar"), "Era esperado valores iguais, mas  'bar' é diferente de " + result1005 + " <processor.process('bar')>")
chamada antiga: assertEquals("foo: foo", processor.process("foo"))
nova chamada: assertEquals("foo: foo", processor.process("foo"), "Era esperado valores iguais, mas  'foo: foo' é diferente de " + result1006 + " <processor.process('foo')>")
chamada antiga: assertEquals("baz", processor.process("baz"))
nova chamada: assertEquals("baz", processor.process("baz"), "Era esperado valores iguais, mas  'baz' é diferente de " + result1007 + " <processor.process('baz')>")
chamada antiga: assertEquals("A classifier is required.", exception.getMessage())
nova chamada: assertEquals("A classifier is required.", exception.getMessage(), "Era esperado valores iguais, mas  'A classifier is required.' é diferente de " + result1008 + " <exception.getMessage()>")
chamada antiga: assertSame(itemAfterSecondTransformation, composite.process(item))
nova chamada: assertSame(itemAfterSecondTransformation, composite.process(item), "Era esperado objetos iguais, mas  itemAfterSecondTransformation é diferente de " + result1009 + " <composite.process(item)>")
chamada antiga: assertSame(itemAfterSecondTransformation, composite.process(item))
nova chamada: assertSame(itemAfterSecondTransformation, composite.process(item), "Era esperado objetos iguais, mas  itemAfterSecondTransformation é diferente de " + result1010 + " <composite.process(item)>")
chamada antiga: assertEquals(message, exception.getMessage())
nova chamada: assertEquals(message, exception.getMessage(), "Era esperado valores iguais, mas  message é diferente de " + result1011 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1012 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1013 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1014 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result1015 + " <list.size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1016 + " <list.size()>")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result1017 + " <reader.read()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result1018 + " <reader.read()>")
chamada antiga: assertEquals("c", reader.read())
nova chamada: assertEquals("c", reader.read(), "Era esperado valores iguais, mas  'c' é diferente de " + result1019 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1020 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("a", reader.read())
nova chamada: assertEquals("a", reader.read(), "Era esperado valores iguais, mas  'a' é diferente de " + result1021 + " <reader.read()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1022 + " <list.size()>")
chamada antiga: assertEquals("b", reader.read())
nova chamada: assertEquals("b", reader.read(), "Era esperado valores iguais, mas  'b' é diferente de " + result1023 + " <reader.read()>")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1024 + " <tested.read()> não é nulo")
chamada antiga: assertEquals(expectedValue, foo.value)
nova chamada: assertEquals(expectedValue, foo.value, "Era esperado valores iguais, mas  expectedValue é diferente de " + " foo.value")
chamada antiga: assertEquals(expectedResource, foo.resource)
nova chamada: assertEquals(expectedResource, foo.resource, "Era esperado valores iguais, mas  expectedResource é diferente de " + " foo.resource")
chamada antiga: assertFalse(policy.isEndOfRecord(LINE))
nova chamada: assertFalse(policy.isEndOfRecord(LINE), "Era esperado falso, mas " + result1025 + " <policy.isEndOfRecord(LINE)> é verdadeiro ")
chamada antiga: assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX))
nova chamada: assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX), "Era esperado verdadeiro, mas " + result1026 + " <policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX)> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord(LINE + ":foo"))
nova chamada: assertTrue(policy.isEndOfRecord(LINE + ":foo"), "Era esperado verdadeiro, mas " + result1027 + " <policy.isEndOfRecord(LINE + ':foo')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "))
nova chamada: assertTrue(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "), "Era esperado verdadeiro, mas " + result1028 + " <policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + '  ')> é falso")
chamada antiga: assertFalse(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "))
nova chamada: assertFalse(policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + "  "), "Era esperado falso, mas " + result1029 + " <policy.isEndOfRecord(LINE + SuffixRecordSeparatorPolicy.DEFAULT_SUFFIX + '  ')> é verdadeiro ")
chamada antiga: assertFalse(policy.isEndOfRecord(""))
nova chamada: assertFalse(policy.isEndOfRecord(""), "Era esperado falso, mas " + result1030 + " <policy.isEndOfRecord('')> é verdadeiro ")
chamada antiga: assertTrue(policy.isEndOfRecord(null))
nova chamada: assertTrue(policy.isEndOfRecord(null), "Era esperado verdadeiro, mas " + result1031 + " <policy.isEndOfRecord(null)> é falso")
chamada antiga: assertEquals(line, policy.postProcess(record))
nova chamada: assertEquals(line, policy.postProcess(record), "Era esperado valores iguais, mas  line é diferente de " + result1032 + " <policy.postProcess(record)>")
chamada antiga: assertNull(policy.postProcess(line))
nova chamada: assertNull(policy.postProcess(line), "Era esperado nulo, mas " + result1033 + " <policy.postProcess(line)> não é nulo")
chamada antiga: assertTrue(policy.isEndOfRecord("a string"))
nova chamada: assertTrue(policy.isEndOfRecord("a string"), "Era esperado verdadeiro, mas " + result1034 + " <policy.isEndOfRecord('a string')> é falso")
chamada antiga: assertFalse(policy.isEndOfRecord("a string\"one"))
nova chamada: assertFalse(policy.isEndOfRecord("a string\"one"), "Era esperado falso, mas " + result1035 + " <policy.isEndOfRecord('a string\'one')> é verdadeiro ")
chamada antiga: assertTrue(policy.isEndOfRecord(""))
nova chamada: assertTrue(policy.isEndOfRecord(""), "Era esperado verdadeiro, mas " + result1036 + " <policy.isEndOfRecord('')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord(null))
nova chamada: assertTrue(policy.isEndOfRecord(null), "Era esperado verdadeiro, mas " + result1037 + " <policy.isEndOfRecord(null)> é falso")
chamada antiga: assertEquals(line, policy.postProcess(line))
nova chamada: assertEquals(line, policy.postProcess(line), "Era esperado valores iguais, mas  line é diferente de " + result1038 + " <policy.postProcess(line)>")
chamada antiga: assertEquals(line + "\n", policy.preProcess(line))
nova chamada: assertEquals(line + "\n", policy.preProcess(line), "Era esperado valores iguais, mas  line + '\n' é diferente de " + result1039 + " <policy.preProcess(line)>")
chamada antiga: assertEquals(line + "\n", policy.preProcess(line))
nova chamada: assertEquals(line + "\n", policy.preProcess(line), "Era esperado valores iguais, mas  line + '\n' é diferente de " + result1040 + " <policy.preProcess(line)>")
chamada antiga: assertEquals(line, policy.preProcess(line))
nova chamada: assertEquals(line, policy.preProcess(line), "Era esperado valores iguais, mas  line é diferente de " + result1041 + " <policy.preProcess(line)>")
chamada antiga: assertFalse(policy.isEndOfRecord(line))
nova chamada: assertFalse(policy.isEndOfRecord(line), "Era esperado falso, mas " + result1042 + " <policy.isEndOfRecord(line)> é verdadeiro ")
chamada antiga: assertFalse(policy.isEndOfRecord(line))
nova chamada: assertFalse(policy.isEndOfRecord(line), "Era esperado falso, mas " + result1043 + " <policy.isEndOfRecord(line)> é verdadeiro ")
chamada antiga: assertEquals("foo", policy.preProcess(line))
nova chamada: assertEquals("foo", policy.preProcess(line), "Era esperado valores iguais, mas  'foo' é diferente de " + result1044 + " <policy.preProcess(line)>")
chamada antiga: assertTrue(policy.isEndOfRecord("{\"a\":\"b\"} "))
nova chamada: assertTrue(policy.isEndOfRecord("{\"a\":\"b\"} "), "Era esperado verdadeiro, mas " + result1045 + " <policy.isEndOfRecord('{\'a\':\'b\'} ')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord("{\"a\": {\"b\": 2}} "))
nova chamada: assertTrue(policy.isEndOfRecord("{\"a\": {\"b\": 2}} "), "Era esperado verdadeiro, mas " + result1046 + " <policy.isEndOfRecord('{\'a\': {\'b\': 2}} ')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord("a string"))
nova chamada: assertTrue(policy.isEndOfRecord("a string"), "Era esperado verdadeiro, mas " + result1047 + " <policy.isEndOfRecord('a string')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord(""))
nova chamada: assertTrue(policy.isEndOfRecord(""), "Era esperado verdadeiro, mas " + result1048 + " <policy.isEndOfRecord('')> é falso")
chamada antiga: assertTrue(policy.isEndOfRecord(null))
nova chamada: assertTrue(policy.isEndOfRecord(null), "Era esperado verdadeiro, mas " + result1049 + " <policy.isEndOfRecord(null)> é falso")
chamada antiga: assertEquals(line, policy.postProcess(line))
nova chamada: assertEquals(line, policy.postProcess(line), "Era esperado valores iguais, mas  line é diferente de " + result1050 + " <policy.postProcess(line)>")
chamada antiga: assertEquals(line, policy.preProcess(line))
nova chamada: assertEquals(line, policy.preProcess(line), "Era esperado valores iguais, mas  line é diferente de " + result1051 + " <policy.preProcess(line)>")
chamada antiga: assertEquals(new Name("d", "c", 0), name)
nova chamada: assertEquals(new Name("d", "c", 0), name, "Era esperado valores iguais, mas  new Name('d', 'c', 0) é diferente de " + " name")
chamada antiga: assertEquals(1, matches.length)
nova chamada: assertEquals(1, matches.length, "Era esperado valores iguais, mas  1 é diferente de " + " matches.length")
chamada antiga: assertEquals(1, matches.length)
nova chamada: assertEquals(1, matches.length, "Era esperado valores iguais, mas  1 é diferente de " + " matches.length")
chamada antiga: assertTrue(msg.contains("foo"))
nova chamada: assertTrue(msg.contains("foo"), "Era esperado verdadeiro, mas " + result1052 + " <msg.contains('foo')> é falso")
chamada antiga: assertTrue(msg.contains("duckSoup"))
nova chamada: assertTrue(msg.contains("duckSoup"), "Era esperado verdadeiro, mas " + result1053 + " <msg.contains('duckSoup')> é falso")
chamada antiga: assertTrue(msg.contains("duckSoup"))
nova chamada: assertTrue(msg.contains("duckSoup"), "Era esperado verdadeiro, mas " + result1054 + " <msg.contains('duckSoup')> é falso")
chamada antiga: assertTrue(msg.contains("duckPate"))
nova chamada: assertTrue(msg.contains("duckPate"), "Era esperado verdadeiro, mas " + result1055 + " <msg.contains('duckPate')> é falso")
chamada antiga: assertEquals("name", matches[0])
nova chamada: assertEquals("name", matches[0], "Era esperado valores iguais, mas  'name' é diferente de " + " matches[0]")
chamada antiga: assertSame(item, tested.mapLine(line, 1))
nova chamada: assertSame(item, tested.mapLine(line, 1), "Era esperado objetos iguais, mas  item é diferente de " + result1056 + " <tested.mapLine(line, 1)>")
chamada antiga: assertEquals("green", bean.getGreen())
nova chamada: assertEquals("green", bean.getGreen(), "Era esperado valores iguais, mas  'green' é diferente de " + result1057 + " <bean.getGreen()>")
chamada antiga: assertEquals("blue", bean.getBlue())
nova chamada: assertEquals("blue", bean.getBlue(), "Era esperado valores iguais, mas  'blue' é diferente de " + result1058 + " <bean.getBlue()>")
chamada antiga: assertNull(bean.getBleu())
nova chamada: assertNull(bean.getBleu(), "Era esperado nulo, mas " + result1059 + " <bean.getBleu()> não é nulo")
chamada antiga: assertEquals(fieldSet, mapper.mapFieldSet(fieldSet))
nova chamada: assertEquals(fieldSet, mapper.mapFieldSet(fieldSet), "Era esperado valores iguais, mas  fieldSet é diferente de " + result1060 + " <mapper.mapFieldSet(fieldSet)>")
chamada antiga: assertEquals("Both name and type cannot be specified together.", exception.getMessage())
nova chamada: assertEquals("Both name and type cannot be specified together.", exception.getMessage(), "Era esperado valores iguais, mas  'Both name and type cannot be specified together.' é diferente de " + result1061 + " <exception.getMessage()>")
chamada antiga: assertEquals("Either name or type must be provided.", exception.getMessage())
nova chamada: assertEquals("Either name or type must be provided.", exception.getMessage(), "Era esperado valores iguais, mas  'Either name or type must be provided.' é diferente de " + result1062 + " <exception.getMessage()>")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1063 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1064 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1065 + " <result.getVarChar()>")
chamada antiga: assertEquals("Bar", result.getTestObjectB().getValueA())
nova chamada: assertEquals("Bar", result.getTestObjectB().getValueA(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result1066 + " <result.getTestObjectB().getValueA()>")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1067 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1068 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1069 + " <result.getVarChar()>")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1070 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1071 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1072 + " <result.getVarChar()>")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1073 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1074 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1075 + " <result.getVarChar()>")
chamada antiga: assertEquals("This is some dummy string", result.getValueA())
nova chamada: assertEquals("This is some dummy string", result.getValueA(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1076 + " <result.getValueA()>")
chamada antiga: assertEquals(1, result.getValueB())
nova chamada: assertEquals(1, result.getValueB(), "Era esperado valores iguais, mas  1 é diferente de " + result1077 + " <result.getValueB()>")
chamada antiga: assertEquals("Another dummy", result.getTestObjectB().getValueA())
nova chamada: assertEquals("Another dummy", result.getTestObjectB().getValueA(), "Era esperado valores iguais, mas  'Another dummy' é diferente de " + result1078 + " <result.getTestObjectB().getValueA()>")
chamada antiga: assertEquals(2, result.getTestObjectB().getTestObjectC().getValue())
nova chamada: assertEquals(2, result.getTestObjectB().getTestObjectC().getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1079 + " <result.getTestObjectB().getTestObjectC().getValue()>")
chamada antiga: assertEquals("This is some dummy string", result.getValueA())
nova chamada: assertEquals("This is some dummy string", result.getValueA(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1080 + " <result.getValueA()>")
chamada antiga: assertEquals(1, result.getValueB())
nova chamada: assertEquals(1, result.getValueB(), "Era esperado valores iguais, mas  1 é diferente de " + result1081 + " <result.getValueB()>")
chamada antiga: assertEquals(1, result.getValue())
nova chamada: assertEquals(1, result.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1082 + " <result.getValue()>")
chamada antiga: assertEquals("Another dummy", result.getTestObjectB().getValueA())
nova chamada: assertEquals("Another dummy", result.getTestObjectB().getValueA(), "Era esperado valores iguais, mas  'Another dummy' é diferente de " + result1083 + " <result.getTestObjectB().getValueA()>")
chamada antiga: assertEquals(2, result.getTestObjectB().getTestObjectC().getValue())
nova chamada: assertEquals(2, result.getTestObjectB().getTestObjectC().getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1084 + " <result.getTestObjectB().getTestObjectC().getValue()>")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1085 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1086 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1087 + " <result.getVarChar()>")
chamada antiga: assertEquals(1, nestedList.getNestedC().get(0).getValue())
nova chamada: assertEquals(1, nestedList.getNestedC().get(0).getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1088 + " <nestedList.getNestedC().get(0).getValue()>")
chamada antiga: assertEquals(2, nestedList.getNestedC().get(1).getValue())
nova chamada: assertEquals(2, nestedList.getNestedC().get(1).getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1089 + " <nestedList.getNestedC().get(1).getValue()>")
chamada antiga: assertEquals(3, nestedList.getNestedC().get(2).getValue())
nova chamada: assertEquals(3, nestedList.getNestedC().get(2).getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1090 + " <nestedList.getNestedC().get(2).getValue()>")
chamada antiga: assertEquals(1, nestedList.getNestedC().get(0).getValue())
nova chamada: assertEquals(1, nestedList.getNestedC().get(0).getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1091 + " <nestedList.getNestedC().get(0).getValue()>")
chamada antiga: assertEquals(2, nestedList.getNestedC().get(1).getValue())
nova chamada: assertEquals(2, nestedList.getNestedC().get(1).getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1092 + " <nestedList.getNestedC().get(1).getValue()>")
chamada antiga: assertEquals(3, nestedList.getNestedC().get(2).getValue())
nova chamada: assertEquals(3, nestedList.getNestedC().get(2).getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1093 + " <nestedList.getNestedC().get(2).getValue()>")
chamada antiga: assertEquals(9, bean.getVarLong())
nova chamada: assertEquals(9, bean.getVarLong(), "Era esperado valores iguais, mas  9 é diferente de " + result1094 + " <bean.getVarLong()>")
chamada antiga: assertEquals(9, bean.getVarLong())
nova chamada: assertEquals(9, bean.getVarLong(), "Era esperado valores iguais, mas  9 é diferente de " + result1095 + " <bean.getVarLong()>")
chamada antiga: assertEquals(9, bean.getVarLong())
nova chamada: assertEquals(9, bean.getVarLong(), "Era esperado valores iguais, mas  9 é diferente de " + result1096 + " <bean.getVarLong()>")
chamada antiga: assertEquals(78, bean.getVarInt())
nova chamada: assertEquals(78, bean.getVarInt(), "Era esperado valores iguais, mas  78 é diferente de " + result1097 + " <bean.getVarInt()>")
chamada antiga: assertEquals("Both customEditor and conversionService cannot be specified together.", exception.getMessage())
nova chamada: assertEquals("Both customEditor and conversionService cannot be specified together.", exception.getMessage(), "Era esperado valores iguais, mas  'Both customEditor and conversionService cannot be specified together.' é diferente de " + result1098 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, exception.getErrorCount())
nova chamada: assertEquals(1, exception.getErrorCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1099 + " <exception.getErrorCount()>")
chamada antiga: assertEquals("typeMismatch", exception.getFieldError("varDouble").getCode())
nova chamada: assertEquals("typeMismatch", exception.getFieldError("varDouble").getCode(), "Era esperado valores iguais, mas  'typeMismatch' é diferente de " + result1100 + " <exception.getFieldError('varDouble').getCode()>")
chamada antiga: assertTrue(exception.getMessage().contains("'illegalPropertyName'"))
nova chamada: assertTrue(exception.getMessage().contains("'illegalPropertyName'"), "Era esperado verdadeiro, mas " + result1101 + " <exception.getMessage().contains(''illegalPropertyName'')> é falso")
chamada antiga: assertEquals("This is some dummy string", result.getVarString())
nova chamada: assertEquals("This is some dummy string", result.getVarString(), "Era esperado valores iguais, mas  'This is some dummy string' é diferente de " + result1102 + " <result.getVarString()>")
chamada antiga: assertEquals(true, result.isVarBoolean())
nova chamada: assertEquals(true, result.isVarBoolean(), "Era esperado valores iguais, mas  true é diferente de " + result1103 + " <result.isVarBoolean()>")
chamada antiga: assertEquals('C', result.getVarChar())
nova chamada: assertEquals('C', result.getVarChar(), "Era esperado valores iguais, mas  'C' é diferente de " + result1104 + " <result.getVarChar()>")
chamada antiga: assertEquals(1, map.get("foo"))
nova chamada: assertEquals(1, map.get("foo"), "Era esperado valores iguais, mas  1 é diferente de " + result1105 + " <map.get('foo')>")
chamada antiga: assertEquals(1, map.get("foo"))
nova chamada: assertEquals(1, map.get("foo"), "Era esperado valores iguais, mas  1 é diferente de " + result1106 + " <map.get('foo')>")
chamada antiga: assertEquals(2, ((Map<String, Object>) map.get("bar")).get("foo"))
nova chamada: assertEquals(2, ((Map<String, Object>) map.get("bar")).get("foo"), "Era esperado valores iguais, mas  2 é diferente de " + result1107 + " <((Map<String, Object>) map.get('bar')).get('foo')>")
chamada antiga: assertSame("line", tested.mapLine("line", 1))
nova chamada: assertSame("line", tested.mapLine("line", 1), "Era esperado objetos iguais, mas  'line' é diferente de " + result1108 + " <tested.mapLine('line', 1)>")
chamada antiga: assertNotNull(person)
nova chamada: assertNotNull(person, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, person.id())
nova chamada: assertEquals(1, person.id(), "Era esperado valores iguais, mas  1 é diferente de " + result1109 + " <person.id()>")
chamada antiga: assertEquals("foo", person.name())
nova chamada: assertEquals("foo", person.name(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1110 + " <person.name()>")
chamada antiga: assertEquals("Fields count must be equal to record components count", exception.getMessage())
nova chamada: assertEquals("Fields count must be equal to record components count", exception.getMessage(), "Era esperado valores iguais, mas  'Fields count must be equal to record components count' é diferente de " + result1111 + " <exception.getMessage()>")
chamada antiga: assertEquals("Field names must specified", exception.getMessage())
nova chamada: assertEquals("Field names must specified", exception.getMessage(), "Era esperado valores iguais, mas  'Field names must specified' é diferente de " + result1112 + " <exception.getMessage()>")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1113 + " <reader.readLine()>")
chamada antiga: assertEquals("b", reader.readLine())
nova chamada: assertEquals("b", reader.readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1114 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1115 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1116 + " <reader.readLine()>")
chamada antiga: assertEquals("b", reader.readLine())
nova chamada: assertEquals("b", reader.readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1117 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1118 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1119 + " <reader.readLine()>")
chamada antiga: assertEquals("b", reader.readLine())
nova chamada: assertEquals("b", reader.readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1120 + " <reader.readLine()>")
chamada antiga: assertEquals("b", reader.readLine())
nova chamada: assertEquals("b", reader.readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1121 + " <reader.readLine()>")
chamada antiga: assertEquals("c", reader.readLine())
nova chamada: assertEquals("c", reader.readLine(), "Era esperado valores iguais, mas  'c' é diferente de " + result1122 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1123 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1124 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1125 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("a|b", reader.readLine())
nova chamada: assertEquals("a|b", reader.readLine(), "Era esperado valores iguais, mas  'a|b' é diferente de " + result1126 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1127 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1128 + " <reader.readLine()>")
chamada antiga: assertEquals("b|", reader.readLine())
nova chamada: assertEquals("b|", reader.readLine(), "Era esperado valores iguais, mas  'b|' é diferente de " + result1129 + " <reader.readLine()>")
chamada antiga: assertNull(reader.readLine())
nova chamada: assertNull(reader.readLine(), "Era esperado nulo, mas " + result1130 + " <reader.readLine()> não é nulo")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1131 + " <exception.getMessage()>")
chamada antiga: assertEquals("bar", exception.getInput())
nova chamada: assertEquals("bar", exception.getInput(), "Era esperado valores iguais, mas  'bar' é diferente de " + result1132 + " <exception.getInput()>")
chamada antiga: assertEquals(100, exception.getLineNumber())
nova chamada: assertEquals(100, exception.getLineNumber(), "Era esperado valores iguais, mas  100 é diferente de " + result1133 + " <exception.getLineNumber()>")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1134 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1135 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1136 + " <tested.read()>")
chamada antiga: assertEquals("4", tested.read())
nova chamada: assertEquals("4", tested.read(), "Era esperado valores iguais, mas  '4' é diferente de " + result1137 + " <tested.read()>")
chamada antiga: assertEquals("5", tested.read())
nova chamada: assertEquals("5", tested.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result1138 + " <tested.read()>")
chamada antiga: assertEquals("6", tested.read())
nova chamada: assertEquals("6", tested.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result1139 + " <tested.read()>")
chamada antiga: assertEquals("7", tested.read())
nova chamada: assertEquals("7", tested.read(), "Era esperado valores iguais, mas  '7' é diferente de " + result1140 + " <tested.read()>")
chamada antiga: assertEquals("8", tested.read())
nova chamada: assertEquals("8", tested.read(), "Era esperado valores iguais, mas  '8' é diferente de " + result1141 + " <tested.read()>")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1142 + " <tested.read()> não é nulo")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1143 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1144 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1145 + " <tested.read()>")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1146 + " <tested.read()>")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1147 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1148 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1149 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1150 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1151 + " <tested.read()>")
chamada antiga: assertEquals("4", tested.read())
nova chamada: assertEquals("4", tested.read(), "Era esperado valores iguais, mas  '4' é diferente de " + result1152 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1153 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1154 + " <tested.read()>")
chamada antiga: assertEquals("4", tested.read())
nova chamada: assertEquals("4", tested.read(), "Era esperado valores iguais, mas  '4' é diferente de " + result1155 + " <tested.read()>")
chamada antiga: assertEquals("5", tested.read())
nova chamada: assertEquals("5", tested.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result1156 + " <tested.read()>")
chamada antiga: assertEquals("6", tested.read())
nova chamada: assertEquals("6", tested.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result1157 + " <tested.read()>")
chamada antiga: assertEquals("7", tested.read())
nova chamada: assertEquals("7", tested.read(), "Era esperado valores iguais, mas  '7' é diferente de " + result1158 + " <tested.read()>")
chamada antiga: assertEquals("6", tested.read())
nova chamada: assertEquals("6", tested.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result1159 + " <tested.read()>")
chamada antiga: assertEquals("7", tested.read())
nova chamada: assertEquals("7", tested.read(), "Era esperado valores iguais, mas  '7' é diferente de " + result1160 + " <tested.read()>")
chamada antiga: assertEquals("8", tested.read())
nova chamada: assertEquals("8", tested.read(), "Era esperado valores iguais, mas  '8' é diferente de " + result1161 + " <tested.read()>")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1162 + " <tested.read()> não é nulo")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1163 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1164 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1165 + " <tested.read()>")
chamada antiga: assertEquals("4", tested.read())
nova chamada: assertEquals("4", tested.read(), "Era esperado valores iguais, mas  '4' é diferente de " + result1166 + " <tested.read()>")
chamada antiga: assertEquals("5", tested.read())
nova chamada: assertEquals("5", tested.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result1167 + " <tested.read()>")
chamada antiga: assertEquals("6", tested.read())
nova chamada: assertEquals("6", tested.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result1168 + " <tested.read()>")
chamada antiga: assertEquals("5", tested.read())
nova chamada: assertEquals("5", tested.read(), "Era esperado valores iguais, mas  '5' é diferente de " + result1169 + " <tested.read()>")
chamada antiga: assertEquals("6", tested.read())
nova chamada: assertEquals("6", tested.read(), "Era esperado valores iguais, mas  '6' é diferente de " + result1170 + " <tested.read()>")
chamada antiga: assertEquals("7", tested.read())
nova chamada: assertEquals("7", tested.read(), "Era esperado valores iguais, mas  '7' é diferente de " + result1171 + " <tested.read()>")
chamada antiga: assertEquals("8", tested.read())
nova chamada: assertEquals("8", tested.read(), "Era esperado valores iguais, mas  '8' é diferente de " + result1172 + " <tested.read()>")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1173 + " <tested.read()> não é nulo")
chamada antiga: assertSame(r3, resources[0])
nova chamada: assertSame(r3, resources[0], "Era esperado objetos iguais, mas  r3 é diferente de " + " resources[0]")
chamada antiga: assertSame(r1, resources[1])
nova chamada: assertSame(r1, resources[1], "Era esperado objetos iguais, mas  r1 é diferente de " + " resources[1]")
chamada antiga: assertSame(r2, resources[2])
nova chamada: assertSame(r2, resources[2], "Era esperado objetos iguais, mas  r2 é diferente de " + " resources[2]")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1174 + " <tested.read()> não é nulo")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1175 + " <tested.read()> não é nulo")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1176 + " <tested.read()> não é nulo")
chamada antiga: assertTrue(resource.getFile().isDirectory())
nova chamada: assertTrue(resource.getFile().isDirectory(), "Era esperado verdadeiro, mas " + result1177 + " <resource.getFile().isDirectory()> é falso")
chamada antiga: assertNull(tested.read())
nova chamada: assertNull(tested.read(), "Era esperado nulo, mas " + result1178 + " <tested.read()> não é nulo")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1179 + " <tested.read()>")
chamada antiga: assertEquals("2", tested.read())
nova chamada: assertEquals("2", tested.read(), "Era esperado valores iguais, mas  '2' é diferente de " + result1180 + " <tested.read()>")
chamada antiga: assertEquals("3", tested.read())
nova chamada: assertEquals("3", tested.read(), "Era esperado valores iguais, mas  '3' é diferente de " + result1181 + " <tested.read()>")
chamada antiga: assertEquals("4", tested.read())
nova chamada: assertEquals("4", tested.read(), "Era esperado valores iguais, mas  '4' é diferente de " + result1182 + " <tested.read()>")
chamada antiga: assertEquals("1", tested.read())
nova chamada: assertEquals("1", tested.read(), "Era esperado valores iguais, mas  '1' é diferente de " + result1183 + " <tested.read()>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1184 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1185 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1186 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1187 + " <readFile(part2)>")
chamada antiga: assertEquals("45", readFile(part2))
nova chamada: assertEquals("45", readFile(part2), "Era esperado valores iguais, mas  '45' é diferente de " + result1188 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1189 + " <part3.exists()> é falso")
chamada antiga: assertEquals("6789", readFile(part3))
nova chamada: assertEquals("6789", readFile(part3), "Era esperado valores iguais, mas  '6789' é diferente de " + result1190 + " <readFile(part3)>")
chamada antiga: assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")))
nova chamada: assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")), "Era esperado valores iguais, mas  0 é diferente de " + result1191 + " <executionContext.getInt(tested.getExecutionContextKey('resource.item.count'))>")
chamada antiga: assertEquals(1, executionContext.getInt(tested.getExecutionContextKey("resource.index")))
nova chamada: assertEquals(1, executionContext.getInt(tested.getExecutionContextKey("resource.index")), "Era esperado valores iguais, mas  1 é diferente de " + result1192 + " <executionContext.getInt(tested.getExecutionContextKey('resource.index'))>")
chamada antiga: assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")))
nova chamada: assertEquals(0, executionContext.getInt(tested.getExecutionContextKey("resource.item.count")), "Era esperado valores iguais, mas  0 é diferente de " + result1193 + " <executionContext.getInt(tested.getExecutionContextKey('resource.item.count'))>")
chamada antiga: assertEquals(2, executionContext.getInt(tested.getExecutionContextKey("resource.index")))
nova chamada: assertEquals(2, executionContext.getInt(tested.getExecutionContextKey("resource.index")), "Era esperado valores iguais, mas  2 é diferente de " + result1194 + " <executionContext.getInt(tested.getExecutionContextKey('resource.index'))>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1195 + " <part1.exists()> é falso")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1196 + " <part2.exists()> é falso")
chamada antiga: assertEquals("123f", readFile(part1))
nova chamada: assertEquals("123f", readFile(part1), "Era esperado valores iguais, mas  '123f' é diferente de " + result1197 + " <readFile(part1)>")
chamada antiga: assertEquals("4f", readFile(part2))
nova chamada: assertEquals("4f", readFile(part2), "Era esperado valores iguais, mas  '4f' é diferente de " + result1198 + " <readFile(part2)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1199 + " <part1.exists()> é falso")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1200 + " <part2.exists()> é falso")
chamada antiga: assertEquals("123f", readFile(part1))
nova chamada: assertEquals("123f", readFile(part1), "Era esperado valores iguais, mas  '123f' é diferente de " + result1201 + " <readFile(part1)>")
chamada antiga: assertEquals("4f", readFile(part2))
nova chamada: assertEquals("4f", readFile(part2), "Era esperado valores iguais, mas  '4f' é diferente de " + result1202 + " <readFile(part2)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1203 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1204 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1205 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1206 + " <readFile(part2)>")
chamada antiga: assertEquals("45", readFile(part2))
nova chamada: assertEquals("45", readFile(part2), "Era esperado valores iguais, mas  '45' é diferente de " + result1207 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1208 + " <part3.exists()> é falso")
chamada antiga: assertEquals("6789", readFile(part3))
nova chamada: assertEquals("6789", readFile(part3), "Era esperado valores iguais, mas  '6789' é diferente de " + result1209 + " <readFile(part3)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1210 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123f", readFile(part1))
nova chamada: assertEquals("123f", readFile(part1), "Era esperado valores iguais, mas  '123f' é diferente de " + result1211 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1212 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1213 + " <readFile(part2)>")
chamada antiga: assertEquals("45f", readFile(part2))
nova chamada: assertEquals("45f", readFile(part2), "Era esperado valores iguais, mas  '45f' é diferente de " + result1214 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1215 + " <part3.exists()> é falso")
chamada antiga: assertEquals("6789f", readFile(part3))
nova chamada: assertEquals("6789f", readFile(part3), "Era esperado valores iguais, mas  '6789f' é diferente de " + result1216 + " <readFile(part3)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1217 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123f", readFile(part1))
nova chamada: assertEquals("123f", readFile(part1), "Era esperado valores iguais, mas  '123f' é diferente de " + result1218 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1219 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1220 + " <readFile(part2)>")
chamada antiga: assertEquals("45f", readFile(part2))
nova chamada: assertEquals("45f", readFile(part2), "Era esperado valores iguais, mas  '45f' é diferente de " + result1221 + " <readFile(part2)>")
chamada antiga: assertNotNull(reader.read())
nova chamada: assertNotNull(reader.read(), "Era esperado não nulo, mas " + result1222 + " <reader.read()> é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1223 + " <reader.read()> não é nulo")
chamada antiga: assertNotNull(reader.read())
nova chamada: assertNotNull(reader.read(), "Era esperado não nulo, mas " + result1224 + " <reader.read()> é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1225 + " <reader.read()> não é nulo")
chamada antiga: assertNotNull(reader.read())
nova chamada: assertNotNull(reader.read(), "Era esperado não nulo, mas " + result1226 + " <reader.read()> é nulo")
chamada antiga: assertEquals(1, executionContext.getInt(reader.getExecutionContextKey("COUNT")))
nova chamada: assertEquals(1, executionContext.getInt(reader.getExecutionContextKey("COUNT")), "Era esperado valores iguais, mas  1 é diferente de " + result1227 + " <executionContext.getInt(reader.getExecutionContextKey('COUNT'))>")
chamada antiga: assertEquals("testLine1testLine2", reader.read())
nova chamada: assertEquals("testLine1testLine2", reader.read(), "Era esperado valores iguais, mas  'testLine1testLine2' é diferente de " + result1228 + " <reader.read()>")
chamada antiga: assertEquals("testLine3testLine4", reader.read())
nova chamada: assertEquals("testLine3testLine4", reader.read(), "Era esperado valores iguais, mas  'testLine3testLine4' é diferente de " + result1229 + " <reader.read()>")
chamada antiga: assertEquals("testLine5testLine6", reader.read())
nova chamada: assertEquals("testLine5testLine6", reader.read(), "Era esperado valores iguais, mas  'testLine5testLine6' é diferente de " + result1230 + " <reader.read()>")
chamada antiga: assertEquals("testLine1testLine2", reader.read())
nova chamada: assertEquals("testLine1testLine2", reader.read(), "Era esperado valores iguais, mas  'testLine1testLine2' é diferente de " + result1231 + " <reader.read()>")
chamada antiga: assertEquals(3, exception.getLineNumber())
nova chamada: assertEquals(3, exception.getLineNumber(), "Era esperado valores iguais, mas  3 é diferente de " + result1232 + " <exception.getLineNumber()>")
chamada antiga: assertEquals("testLine3", exception.getInput())
nova chamada: assertEquals("testLine3", exception.getInput(), "Era esperado valores iguais, mas  'testLine3' é diferente de " + result1233 + " <exception.getInput()>")
chamada antiga: assertEquals("testLine1", reader.read())
nova chamada: assertEquals("testLine1", reader.read(), "Era esperado valores iguais, mas  'testLine1' é diferente de " + result1234 + " <reader.read()>")
chamada antiga: assertEquals("testLine2", reader.read())
nova chamada: assertEquals("testLine2", reader.read(), "Era esperado valores iguais, mas  'testLine2' é diferente de " + result1235 + " <reader.read()>")
chamada antiga: assertEquals("testLine3", reader.read())
nova chamada: assertEquals("testLine3", reader.read(), "Era esperado valores iguais, mas  'testLine3' é diferente de " + result1236 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1237 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("testLine1testLine2", reader.read())
nova chamada: assertEquals("testLine1testLine2", reader.read(), "Era esperado valores iguais, mas  'testLine1testLine2' é diferente de " + result1238 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1239 + " <reader.read()> não é nulo")
chamada antiga: assertEquals("testLine4", reader.read())
nova chamada: assertEquals("testLine4", reader.read(), "Era esperado valores iguais, mas  'testLine4' é diferente de " + result1240 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1241 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
nova chamada: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  2 é diferente de " + result1242 + " <executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + '.read.count')>")
chamada antiga: assertEquals("testLine3", reader.read())
nova chamada: assertEquals("testLine3", reader.read(), "Era esperado valores iguais, mas  'testLine3' é diferente de " + result1243 + " <reader.read()>")
chamada antiga: assertEquals("testLine4", reader.read())
nova chamada: assertEquals("testLine4", reader.read(), "Era esperado valores iguais, mas  'testLine4' é diferente de " + result1244 + " <reader.read()>")
chamada antiga: assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
nova chamada: assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  4 é diferente de " + result1245 + " <executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + '.read.count')>")
chamada antiga: assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
nova chamada: assertEquals(4, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  4 é diferente de " + result1246 + " <executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + '.read.count')>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1247 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"))
nova chamada: assertEquals(2, executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + ".read.count"), "Era esperado valores iguais, mas  2 é diferente de " + result1248 + " <executionContext.getInt(ClassUtils.getShortName(FlatFileItemReader.class) + '.read.count')>")
chamada antiga: assertNotNull(reader.read())
nova chamada: assertNotNull(reader.read(), "Era esperado não nulo, mas " + result1249 + " <reader.read()> é nulo")
chamada antiga: assertEquals("testLine4", reader.read())
nova chamada: assertEquals("testLine4", reader.read(), "Era esperado valores iguais, mas  'testLine4' é diferente de " + result1250 + " <reader.read()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1251 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1252 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1253 + " <reader.read()> não é nulo")
chamada antiga: assertTrue(resource.getFile().isDirectory())
nova chamada: assertTrue(resource.getFile().isDirectory(), "Era esperado verdadeiro, mas " + result1254 + " <resource.getFile().isDirectory()> é falso")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1255 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(TEST_STRING, reader.read())
nova chamada: assertEquals(TEST_STRING, reader.read(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1256 + " <reader.read()>")
chamada antiga: assertNotNull(reader.read())
nova chamada: assertNotNull(reader.read(), "Era esperado não nulo, mas " + result1257 + " <reader.read()> é nulo")
chamada antiga: assertEquals(2, expected.getLineNumber())
nova chamada: assertEquals(2, expected.getLineNumber(), "Era esperado valores iguais, mas  2 é diferente de " + result1258 + " <expected.getLineNumber()>")
chamada antiga: assertEquals("testLine2", expected.getInput())
nova chamada: assertEquals("testLine2", expected.getInput(), "Era esperado valores iguais, mas  'testLine2' é diferente de " + result1259 + " <expected.getInput()>")
chamada antiga: assertEquals("Couldn't map line 2", expected.getCause().getMessage())
nova chamada: assertEquals("Couldn't map line 2", expected.getCause().getMessage(), "Era esperado valores iguais, mas  'Couldn't map line 2' é diferente de " + result1260 + " <expected.getCause().getMessage()>")
chamada antiga: assertEquals("testLine1", item1.getValue())
nova chamada: assertEquals("testLine1", item1.getValue(), "Era esperado valores iguais, mas  'testLine1' é diferente de " + result1261 + " <item1.getValue()>")
chamada antiga: assertEquals(1, item1.getItemCount())
nova chamada: assertEquals(1, item1.getItemCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1262 + " <item1.getItemCount()>")
chamada antiga: assertEquals("testLine2", item2.getValue())
nova chamada: assertEquals("testLine2", item2.getValue(), "Era esperado valores iguais, mas  'testLine2' é diferente de " + result1263 + " <item2.getValue()>")
chamada antiga: assertEquals(2, item2.getItemCount())
nova chamada: assertEquals(2, item2.getItemCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1264 + " <item2.getItemCount()>")
chamada antiga: assertEquals("testLine3", item3.getValue())
nova chamada: assertEquals("testLine3", item3.getValue(), "Era esperado valores iguais, mas  'testLine3' é diferente de " + result1265 + " <item3.getValue()>")
chamada antiga: assertEquals(3, item3.getItemCount())
nova chamada: assertEquals(3, item3.getItemCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1266 + " <item3.getItemCount()>")
chamada antiga: assertEquals("testLine1testLine2", item1.getValue())
nova chamada: assertEquals("testLine1testLine2", item1.getValue(), "Era esperado valores iguais, mas  'testLine1testLine2' é diferente de " + result1267 + " <item1.getValue()>")
chamada antiga: assertEquals(1, item1.getItemCount())
nova chamada: assertEquals(1, item1.getItemCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1268 + " <item1.getItemCount()>")
chamada antiga: assertEquals("testLine3testLine4", item2.getValue())
nova chamada: assertEquals("testLine3testLine4", item2.getValue(), "Era esperado valores iguais, mas  'testLine3testLine4' é diferente de " + result1269 + " <item2.getValue()>")
chamada antiga: assertEquals(2, item2.getItemCount())
nova chamada: assertEquals(2, item2.getItemCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1270 + " <item2.getItemCount()>")
chamada antiga: assertEquals("testLine5testLine6", item3.getValue())
nova chamada: assertEquals("testLine5testLine6", item3.getValue(), "Era esperado valores iguais, mas  'testLine5testLine6' é diferente de " + result1271 + " <item3.getValue()>")
chamada antiga: assertEquals(3, item3.getItemCount())
nova chamada: assertEquals(3, item3.getItemCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1272 + " <item3.getItemCount()>")
chamada antiga: assertFalse(policy.isEndOfRecord("{\"a\":\"b\""))
nova chamada: assertFalse(policy.isEndOfRecord("{\"a\":\"b\""), "Era esperado falso, mas " + result1273 + " <policy.isEndOfRecord('{\'a\':\'b\'')> é verdadeiro ")
chamada antiga: assertFalse(policy.isEndOfRecord("{\"a\": {\"b\": 2}"))
nova chamada: assertFalse(policy.isEndOfRecord("{\"a\": {\"b\": 2}"), "Era esperado falso, mas " + result1274 + " <policy.isEndOfRecord('{\'a\': {\'b\': 2}')> é verdadeiro ")
chamada antiga: assertFalse(delegate.openCalled)
nova chamada: assertFalse(delegate.openCalled, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(delegate.closeCalled)
nova chamada: assertFalse(delegate.closeCalled, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(delegate.updateCalled)
nova chamada: assertFalse(delegate.updateCalled, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1275 + " <readLine()>")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1276 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1277 + " <readLine()>")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1278 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1279 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1280 + " <readLine()>")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1281 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1282 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1283 + " <readLine()>")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1284 + " <readLine()>")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1285 + " <readLine()>")
chamada antiga: assertNull(readLine())
nova chamada: assertNull(readLine(), "Era esperado nulo, mas " + result1286 + " <readLine()> não é nulo")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1287 + " <readLine()>")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1288 + " <readLine()>")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1289 + " <readLine()>")
chamada antiga: assertNull(readLine())
nova chamada: assertNull(readLine(), "Era esperado nulo, mas " + result1290 + " <readLine()> não é nulo")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals("FOO:" + data, lineFromFile)
nova chamada: assertEquals("FOO:" + data, lineFromFile, "Era esperado valores iguais, mas  'FOO:' + data é diferente de " + " lineFromFile")
chamada antiga: assertEquals("FOO:" + TEST_STRING, lineFromFile)
nova chamada: assertEquals("FOO:" + TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  'FOO:' + TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals("1", lineFromFile)
nova chamada: assertEquals("1", lineFromFile, "Era esperado valores iguais, mas  '1' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("1|2|", lineFromFile)
nova chamada: assertEquals("1|2|", lineFromFile, "Era esperado valores iguais, mas  '1|2|' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("footer", readLine())
nova chamada: assertEquals("footer", readLine(), "Era esperado valores iguais, mas  'footer' é diferente de " + result1291 + " <readLine()>")
chamada antiga: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
nova chamada: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"), "Era esperado valores iguais, mas  8 é diferente de " + result1292 + " <executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + '.written')>")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1293 + " <readLine()>")
chamada antiga: assertEquals("footer", readLine())
nova chamada: assertEquals("footer", readLine(), "Era esperado valores iguais, mas  'footer' é diferente de " + result1294 + " <readLine()>")
chamada antiga: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
nova chamada: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"), "Era esperado valores iguais, mas  8 é diferente de " + result1295 + " <executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + '.written')>")
chamada antiga: assertEquals("footer", readLine(encoding))
nova chamada: assertEquals("footer", readLine(encoding), "Era esperado valores iguais, mas  'footer' é diferente de " + result1296 + " <readLine(encoding)>")
chamada antiga: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
nova chamada: assertEquals(8, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"), "Era esperado valores iguais, mas  8 é diferente de " + result1297 + " <executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + '.written')>")
chamada antiga: assertNotNull(executionContext)
nova chamada: assertNotNull(executionContext, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, executionContext.entrySet().size())
nova chamada: assertEquals(2, executionContext.entrySet().size(), "Era esperado valores iguais, mas  2 é diferente de " + result1298 + " <executionContext.entrySet().size()>")
chamada antiga: assertEquals(0, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".current.count"))
nova chamada: assertEquals(0, executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".current.count"), "Era esperado valores iguais, mas  0 é diferente de " + result1299 + " <executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + '.current.count')>")
chamada antiga: assertTrue(exception.getCause() instanceof UnsupportedCharsetException)
nova chamada: assertTrue(exception.getCause() instanceof UnsupportedCharsetException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, readLine())
nova chamada: assertEquals(TEST_STRING, readLine(), "Era esperado valores iguais, mas  TEST_STRING é diferente de " + result1300 + " <readLine()>")
chamada antiga: assertEquals("a", readLine())
nova chamada: assertEquals("a", readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1301 + " <readLine()>")
chamada antiga: assertEquals("b", readLine())
nova chamada: assertEquals("b", readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1302 + " <readLine()>")
chamada antiga: assertEquals("a", lineFromFile)
nova chamada: assertEquals("a", lineFromFile, "Era esperado valores iguais, mas  'a' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("b", lineFromFile)
nova chamada: assertEquals("b", lineFromFile, "Era esperado valores iguais, mas  'b' é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals("a", readLine())
nova chamada: assertEquals("a", readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1303 + " <readLine()>")
chamada antiga: assertEquals("b", readLine())
nova chamada: assertEquals("b", readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1304 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1305 + " <readLine()>")
chamada antiga: assertEquals("a", readLine())
nova chamada: assertEquals("a", readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1306 + " <readLine()>")
chamada antiga: assertEquals("b", readLine())
nova chamada: assertEquals("b", readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1307 + " <readLine()>")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1308 + " <readLine()>")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1309 + " <readLine()>")
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue(outputFile.exists(), "Era esperado verdadeiro, mas " + result1310 + " <outputFile.exists()> é falso")
chamada antiga: assertFalse(outputFile.exists())
nova chamada: assertFalse(outputFile.exists(), "Era esperado falso, mas " + result1311 + " <outputFile.exists()> é verdadeiro ")
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue(outputFile.exists(), "Era esperado verdadeiro, mas " + result1312 + " <outputFile.exists()> é falso")
chamada antiga: assertFalse(outputFile.exists())
nova chamada: assertFalse(outputFile.exists(), "Era esperado falso, mas " + result1313 + " <outputFile.exists()> é verdadeiro ")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1314 + " <readLine()>")
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue(outputFile.exists(), "Era esperado verdadeiro, mas " + result1315 + " <outputFile.exists()> é falso")
chamada antiga: assertFalse(outputFile.exists())
nova chamada: assertFalse(outputFile.exists(), "Era esperado falso, mas " + result1316 + " <outputFile.exists()> é verdadeiro ")
chamada antiga: assertEquals("a", readLine())
nova chamada: assertEquals("a", readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1317 + " <readLine()>")
chamada antiga: assertEquals("b", readLine())
nova chamada: assertEquals("b", readLine(), "Era esperado valores iguais, mas  'b' é diferente de " + result1318 + " <readLine()>")
chamada antiga: assertEquals("test2", readLine())
nova chamada: assertEquals("test2", readLine(), "Era esperado valores iguais, mas  'test2' é diferente de " + result1319 + " <readLine()>")
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue(outputFile.exists(), "Era esperado verdadeiro, mas " + result1320 + " <outputFile.exists()> é falso")
chamada antiga: assertTrue(outputFile.exists())
nova chamada: assertTrue(outputFile.exists(), "Era esperado verdadeiro, mas " + result1321 + " <outputFile.exists()> é falso")
chamada antiga: assertEquals("a", lineFromFile)
nova chamada: assertEquals("a", lineFromFile, "Era esperado valores iguais, mas  'a' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("b", lineFromFile)
nova chamada: assertEquals("b", lineFromFile, "Era esperado valores iguais, mas  'b' é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertNull(lineFromFile)
nova chamada: assertNull(lineFromFile, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("a", lineFromFile)
nova chamada: assertEquals("a", lineFromFile, "Era esperado valores iguais, mas  'a' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("b", lineFromFile)
nova chamada: assertEquals("b", lineFromFile, "Era esperado valores iguais, mas  'b' é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals("a", lineFromFile)
nova chamada: assertEquals("a", lineFromFile, "Era esperado valores iguais, mas  'a' é diferente de " + " lineFromFile")
chamada antiga: assertEquals("b", lineFromFile)
nova chamada: assertEquals("b", lineFromFile, "Era esperado valores iguais, mas  'b' é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals(TEST_STRING, lineFromFile)
nova chamada: assertEquals(TEST_STRING, lineFromFile, "Era esperado valores iguais, mas  TEST_STRING é diferente de " + " lineFromFile")
chamada antiga: assertEquals("aggregation failed on 2", expected.getMessage())
nova chamada: assertEquals("aggregation failed on 2", expected.getMessage(), "Era esperado valores iguais, mas  'aggregation failed on 2' é diferente de " + result1322 + " <expected.getMessage()>")
chamada antiga: assertNull(readLine())
nova chamada: assertNull(readLine(), "Era esperado nulo, mas " + result1323 + " <readLine()> não é nulo")
chamada antiga: assertEquals("test1", readLine())
nova chamada: assertEquals("test1", readLine(), "Era esperado valores iguais, mas  'test1' é diferente de " + result1324 + " <readLine()>")
chamada antiga: assertEquals(".0", tested.getSuffix(0))
nova chamada: assertEquals(".0", tested.getSuffix(0), "Era esperado valores iguais, mas  '.0' é diferente de " + result1325 + " <tested.getSuffix(0)>")
chamada antiga: assertEquals(".1", tested.getSuffix(1))
nova chamada: assertEquals(".1", tested.getSuffix(1), "Era esperado valores iguais, mas  '.1' é diferente de " + result1326 + " <tested.getSuffix(1)>")
chamada antiga: assertEquals(".3463457", tested.getSuffix(3463457))
nova chamada: assertEquals(".3463457", tested.getSuffix(3463457), "Era esperado valores iguais, mas  '.3463457' é diferente de " + result1327 + " <tested.getSuffix(3463457)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1328 + " <part1.exists()> é falso")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1329 + " <part2.exists()> é falso")
chamada antiga: assertEquals(xmlDocStart + "<prefix:4/>" + xmlDocEnd, readFile(part2))
nova chamada: assertEquals(xmlDocStart + "<prefix:4/>" + xmlDocEnd, readFile(part2), "Era esperado valores iguais, mas  xmlDocStart + 'prefix:4/' + xmlDocEnd é diferente de " + result1330 + " <readFile(part2)>")
chamada antiga: assertEquals(xmlDocStart + "<prefix:1/><prefix:2/><prefix:3/>" + xmlDocEnd, readFile(part1))
nova chamada: assertEquals(xmlDocStart + "<prefix:1/><prefix:2/><prefix:3/>" + xmlDocEnd, readFile(part1), "Era esperado valores iguais, mas  xmlDocStart + 'prefix:1/prefix:2/prefix:3/' + xmlDocEnd é diferente de " + result1331 + " <readFile(part1)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1332 + " <part3.exists()> é falso")
chamada antiga: assertEquals(xmlDocStart + "<prefix:4/><prefix:5/>" + xmlDocEnd, readFile(part2))
nova chamada: assertEquals(xmlDocStart + "<prefix:4/><prefix:5/>" + xmlDocEnd, readFile(part2), "Era esperado valores iguais, mas  xmlDocStart + 'prefix:4/prefix:5/' + xmlDocEnd é diferente de " + result1333 + " <readFile(part2)>")
chamada antiga: assertEquals(xmlDocStart + "<prefix:6/><prefix:7/><prefix:8/><prefix:9/>" + xmlDocEnd, readFile(part3))
nova chamada: assertEquals(xmlDocStart + "<prefix:6/><prefix:7/><prefix:8/><prefix:9/>" + xmlDocEnd, readFile(part3), "Era esperado valores iguais, mas  xmlDocStart + 'prefix:6/prefix:7/prefix:8/prefix:9/' + xmlDocEnd é diferente de " + result1334 + " <readFile(part3)>")
chamada antiga: assertEquals("delegate is required.", exception.getMessage())
nova chamada: assertEquals("delegate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'delegate is required.' é diferente de " + result1335 + " <exception.getMessage()>")
chamada antiga: assertEquals("resources array is required.", exception.getMessage())
nova chamada: assertEquals("resources array is required.", exception.getMessage(), "Era esperado valores iguais, mas  'resources array is required.' é diferente de " + result1336 + " <exception.getMessage()>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1337 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1338 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1339 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1340 + " <readFile(part2)>")
chamada antiga: assertEquals("45", readFile(part2))
nova chamada: assertEquals("45", readFile(part2), "Era esperado valores iguais, mas  '45' é diferente de " + result1341 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1342 + " <part3.exists()> é falso")
chamada antiga: assertEquals("6789", readFile(part3))
nova chamada: assertEquals("6789", readFile(part3), "Era esperado valores iguais, mas  '6789' é diferente de " + result1343 + " <readFile(part3)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1344 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1345 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1346 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1347 + " <readFile(part2)>")
chamada antiga: assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")))
nova chamada: assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")), "Era esperado valores iguais, mas  0 é diferente de " + result1348 + " <this.executionContext.getInt(this.writer.getExecutionContextKey('resource.item.count'))>")
chamada antiga: assertEquals(1, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")))
nova chamada: assertEquals(1, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")), "Era esperado valores iguais, mas  1 é diferente de " + result1349 + " <this.executionContext.getInt(this.writer.getExecutionContextKey('resource.index'))>")
chamada antiga: assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")))
nova chamada: assertEquals(0, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.item.count")), "Era esperado valores iguais, mas  0 é diferente de " + result1350 + " <this.executionContext.getInt(this.writer.getExecutionContextKey('resource.item.count'))>")
chamada antiga: assertEquals(2, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")))
nova chamada: assertEquals(2, this.executionContext.getInt(this.writer.getExecutionContextKey("resource.index")), "Era esperado valores iguais, mas  2 é diferente de " + result1351 + " <this.executionContext.getInt(this.writer.getExecutionContextKey('resource.index'))>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1352 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1353 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1354 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1355 + " <readFile(part2)>")
chamada antiga: assertEquals("45", readFile(part2))
nova chamada: assertEquals("45", readFile(part2), "Era esperado valores iguais, mas  '45' é diferente de " + result1356 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1357 + " <part3.exists()> é falso")
chamada antiga: assertEquals("6789", readFile(part3))
nova chamada: assertEquals("6789", readFile(part3), "Era esperado valores iguais, mas  '6789' é diferente de " + result1358 + " <readFile(part3)>")
chamada antiga: assertTrue(part1.exists())
nova chamada: assertTrue(part1.exists(), "Era esperado verdadeiro, mas " + result1359 + " <part1.exists()> é falso")
chamada antiga: assertEquals("123", readFile(part1))
nova chamada: assertEquals("123", readFile(part1), "Era esperado valores iguais, mas  '123' é diferente de " + result1360 + " <readFile(part1)>")
chamada antiga: assertTrue(part2.exists())
nova chamada: assertTrue(part2.exists(), "Era esperado verdadeiro, mas " + result1361 + " <part2.exists()> é falso")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1362 + " <readFile(part2)>")
chamada antiga: assertEquals("4", readFile(part2))
nova chamada: assertEquals("4", readFile(part2), "Era esperado valores iguais, mas  '4' é diferente de " + result1363 + " <readFile(part2)>")
chamada antiga: assertTrue(part3.exists())
nova chamada: assertTrue(part3.exists(), "Era esperado verdadeiro, mas " + result1364 + " <part3.exists()> é falso")
chamada antiga: assertEquals("56789", readFile(part3))
nova chamada: assertEquals("56789", readFile(part3), "Era esperado valores iguais, mas  '56789' é diferente de " + result1365 + " <readFile(part3)>")
chamada antiga: assertEquals("A name is required when saveState is true.", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is true.", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is true.' é diferente de " + result1366 + " <exception.getMessage()>")
chamada antiga: assertEquals("resource is required.", exception.getMessage())
nova chamada: assertEquals("resource is required.", exception.getMessage(), "Era esperado valores iguais, mas  'resource is required.' é diferente de " + result1367 + " <exception.getMessage()>")
chamada antiga: assertEquals("delegate is required.", exception.getMessage())
nova chamada: assertEquals("delegate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'delegate is required.' é diferente de " + result1368 + " <exception.getMessage()>")
chamada antiga: assertEquals("a", reader.readLine())
nova chamada: assertEquals("a", reader.readLine(), "Era esperado valores iguais, mas  'a' é diferente de " + result1369 + " <reader.readLine()>")
chamada antiga: assertEquals(item.toString(), mapper.aggregate(item))
nova chamada: assertEquals(item.toString(), mapper.aggregate(item), "Era esperado valores iguais, mas " + result1370 + " <item.toString()> é diferente de " + result1371 + " <mapper.aggregate(item)>")
chamada antiga: assertEquals("foo", mapper.aggregate("foo"))
nova chamada: assertEquals("foo", mapper.aggregate("foo"), "Era esperado valores iguais, mas  'foo' é diferente de " + result1372 + " <mapper.aggregate('foo')>")
chamada antiga: assertEquals("bar", aggregator.aggregate(Collections.singleton("foo")))
nova chamada: assertEquals("bar", aggregator.aggregate(Collections.singleton("foo")), "Era esperado valores iguais, mas  'bar' é diferente de " + result1373 + " <aggregator.aggregate(Collections.singleton('foo'))>")
chamada antiga: assertEquals("foo", array[0])
nova chamada: assertEquals("foo", array[0], "Era esperado valores iguais, mas  'foo' é diferente de " + " array[0]")
chamada antiga: assertEquals("bar", array[1])
nova chamada: assertEquals("bar", array[1], "Era esperado valores iguais, mas  'bar' é diferente de " + " array[1]")
chamada antiga: assertEquals(3, values.length)
nova chamada: assertEquals(3, values.length, "Era esperado valores iguais, mas  3 é diferente de " + " values.length")
chamada antiga: assertEquals(first, values[0])
nova chamada: assertEquals(first, values[0], "Era esperado valores iguais, mas  first é diferente de " + " values[0]")
chamada antiga: assertEquals(last, values[1])
nova chamada: assertEquals(last, values[1], "Era esperado valores iguais, mas  last é diferente de " + " values[1]")
chamada antiga: assertEquals(born, values[2])
nova chamada: assertEquals(born, values[2], "Era esperado valores iguais, mas  born é diferente de " + " values[2]")
chamada antiga: assertTrue(exception.getMessage().startsWith("Invalid property 'birthday'"))
nova chamada: assertTrue(exception.getMessage().startsWith("Invalid property 'birthday'"), "Era esperado verdadeiro, mas " + result1374 + " <exception.getMessage().startsWith('Invalid property 'birthday'')> é falso")
chamada antiga: assertArrayEquals(new Object[] { "abc" }, result)
nova chamada: assertArrayEquals(new Object[] { "abc" }, result, "Era esperado arrays iguais, mas  new Object[] { 'abc' } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
nova chamada: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result, "Era esperado arrays iguais, mas  new Object[] { 'a', 'b', null, 'd' } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Object[] { "a", "b", "", "d" }, result)
nova chamada: assertArrayEquals(new Object[] { "a", "b", "", "d" }, result, "Era esperado arrays iguais, mas  new Object[] { 'a', 'b', '', 'd' } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
nova chamada: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result, "Era esperado arrays iguais, mas  new Object[] { 'a', 'b', null, 'd' } é diferente de " + " result")
chamada antiga: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result)
nova chamada: assertArrayEquals(new Object[] { "a", "b", null, "d" }, result, "Era esperado arrays iguais, mas  new Object[] { 'a', 'b', null, 'd' } é diferente de " + " result")
chamada antiga: assertEquals(4, ranges.length)
nova chamada: assertEquals(4, ranges.length, "Era esperado valores iguais, mas  4 é diferente de " + " ranges.length")
chamada antiga: assertEquals(15, ranges[0].getMin())
nova chamada: assertEquals(15, ranges[0].getMin(), "Era esperado valores iguais, mas  15 é diferente de " + result1375 + " <ranges[0].getMin()>")
chamada antiga: assertEquals(31, ranges[0].getMax())
nova chamada: assertEquals(31, ranges[0].getMax(), "Era esperado valores iguais, mas  31 é diferente de " + result1376 + " <ranges[0].getMax()>")
chamada antiga: assertEquals(32, ranges[1].getMin())
nova chamada: assertEquals(32, ranges[1].getMin(), "Era esperado valores iguais, mas  32 é diferente de " + result1377 + " <ranges[1].getMin()>")
chamada antiga: assertEquals(32, ranges[1].getMax())
nova chamada: assertEquals(32, ranges[1].getMax(), "Era esperado valores iguais, mas  32 é diferente de " + result1378 + " <ranges[1].getMax()>")
chamada antiga: assertEquals(1, ranges[2].getMin())
nova chamada: assertEquals(1, ranges[2].getMin(), "Era esperado valores iguais, mas  1 é diferente de " + result1379 + " <ranges[2].getMin()>")
chamada antiga: assertEquals(10, ranges[2].getMax())
nova chamada: assertEquals(10, ranges[2].getMax(), "Era esperado valores iguais, mas  10 é diferente de " + result1380 + " <ranges[2].getMax()>")
chamada antiga: assertEquals(33, ranges[3].getMin())
nova chamada: assertEquals(33, ranges[3].getMin(), "Era esperado valores iguais, mas  33 é diferente de " + result1381 + " <ranges[3].getMin()>")
chamada antiga: assertFalse(ranges[3].hasMaxValue())
nova chamada: assertFalse(ranges[3].hasMaxValue(), "Era esperado falso, mas " + result1382 + " <ranges[3].hasMaxValue()> é verdadeiro ")
chamada antiga: assertEquals(2, ranges.length)
nova chamada: assertEquals(2, ranges.length, "Era esperado valores iguais, mas  2 é diferente de " + " ranges.length")
chamada antiga: assertEquals(15, ranges[0].getMin())
nova chamada: assertEquals(15, ranges[0].getMin(), "Era esperado valores iguais, mas  15 é diferente de " + result1383 + " <ranges[0].getMin()>")
chamada antiga: assertEquals(31, ranges[0].getMax())
nova chamada: assertEquals(31, ranges[0].getMax(), "Era esperado valores iguais, mas  31 é diferente de " + result1384 + " <ranges[0].getMax()>")
chamada antiga: assertEquals(32, ranges[1].getMin())
nova chamada: assertEquals(32, ranges[1].getMin(), "Era esperado valores iguais, mas  32 é diferente de " + result1385 + " <ranges[1].getMin()>")
chamada antiga: assertFalse(ranges[1].hasMaxValue())
nova chamada: assertFalse(ranges[1].hasMaxValue(), "Era esperado falso, mas " + result1386 + " <ranges[1].hasMaxValue()> é verdadeiro ")
chamada antiga: assertEquals("20, 6-15, 2, 26-95", pe.getAsText())
nova chamada: assertEquals("20, 6-15, 2, 26-95", pe.getAsText(), "Era esperado valores iguais, mas  '20, 6-15, 2, 26-95' é diferente de " + result1387 + " <pe.getAsText()>")
chamada antiga: assertEquals(2, ranges.length)
nova chamada: assertEquals(2, ranges.length, "Era esperado valores iguais, mas  2 é diferente de " + " ranges.length")
chamada antiga: assertEquals(1, ranges[0].getMin())
nova chamada: assertEquals(1, ranges[0].getMin(), "Era esperado valores iguais, mas  1 é diferente de " + result1388 + " <ranges[0].getMin()>")
chamada antiga: assertEquals(5, ranges[0].getMax())
nova chamada: assertEquals(5, ranges[0].getMax(), "Era esperado valores iguais, mas  5 é diferente de " + result1389 + " <ranges[0].getMax()>")
chamada antiga: assertEquals(11, ranges[1].getMin())
nova chamada: assertEquals(11, ranges[1].getMin(), "Era esperado valores iguais, mas  11 é diferente de " + result1390 + " <ranges[1].getMin()>")
chamada antiga: assertEquals(15, ranges[1].getMax())
nova chamada: assertEquals(15, ranges[1].getMax(), "Era esperado valores iguais, mas  15 é diferente de " + result1391 + " <ranges[1].getMax()>")
chamada antiga: assertEquals(2, ranges.length)
nova chamada: assertEquals(2, ranges.length, "Era esperado valores iguais, mas  2 é diferente de " + " ranges.length")
chamada antiga: assertEquals(1, ranges[0].getMin())
nova chamada: assertEquals(1, ranges[0].getMin(), "Era esperado valores iguais, mas  1 é diferente de " + result1392 + " <ranges[0].getMin()>")
chamada antiga: assertEquals(10, ranges[0].getMax())
nova chamada: assertEquals(10, ranges[0].getMax(), "Era esperado valores iguais, mas  10 é diferente de " + result1393 + " <ranges[0].getMax()>")
chamada antiga: assertEquals(5, ranges[1].getMin())
nova chamada: assertEquals(5, ranges[1].getMin(), "Era esperado valores iguais, mas  5 é diferente de " + result1394 + " <ranges[1].getMin()>")
chamada antiga: assertEquals(15, ranges[1].getMax())
nova chamada: assertEquals(15, ranges[1].getMax(), "Era esperado valores iguais, mas  15 é diferente de " + result1395 + " <ranges[1].getMax()>")
chamada antiga: assertEquals(6, tokens.getFieldCount())
nova chamada: assertEquals(6, tokens.getFieldCount(), "Era esperado valores iguais, mas  6 é diferente de " + result1396 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(2, tokens.getFieldCount())
nova chamada: assertEquals(2, tokens.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1397 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1398 + " <line.getFieldCount()>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1399 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a", line.readString("A"))
nova chamada: assertEquals("a", line.readString("A"), "Era esperado valores iguais, mas  'a' é diferente de " + result1400 + " <line.readString('A')>")
chamada antiga: assertEquals(2, exception.getExpectedCount())
nova chamada: assertEquals(2, exception.getExpectedCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1401 + " <exception.getExpectedCount()>")
chamada antiga: assertEquals(3, exception.getActualCount())
nova chamada: assertEquals(3, exception.getActualCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1402 + " <exception.getActualCount()>")
chamada antiga: assertEquals("a,b,c", exception.getInput())
nova chamada: assertEquals("a,b,c", exception.getInput(), "Era esperado valores iguais, mas  'a,b,c' é diferente de " + result1403 + " <exception.getInput()>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1404 + " <line.getFieldCount()>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1405 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a", line.readString(0))
nova chamada: assertEquals("a", line.readString(0), "Era esperado valores iguais, mas  'a' é diferente de " + result1406 + " <line.readString(0)>")
chamada antiga: assertEquals("c", line.readString(1))
nova chamada: assertEquals("c", line.readString(1), "Era esperado valores iguais, mas  'c' é diferente de " + result1407 + " <line.readString(1)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1408 + " <line.getFieldCount()>")
chamada antiga: assertEquals("", line.readString(0))
nova chamada: assertEquals("", line.readString(0), "Era esperado valores iguais, mas  '' é diferente de " + result1409 + " <line.readString(0)>")
chamada antiga: assertEquals("a", line.readString(1))
nova chamada: assertEquals("a", line.readString(1), "Era esperado valores iguais, mas  'a' é diferente de " + result1410 + " <line.readString(1)>")
chamada antiga: assertEquals("b", line.readString(2))
nova chamada: assertEquals("b", line.readString(2), "Era esperado valores iguais, mas  'b' é diferente de " + result1411 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1412 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a", line.readString(0))
nova chamada: assertEquals("a", line.readString(0), "Era esperado valores iguais, mas  'a' é diferente de " + result1413 + " <line.readString(0)>")
chamada antiga: assertEquals("b", line.readString(1))
nova chamada: assertEquals("b", line.readString(1), "Era esperado valores iguais, mas  'b' é diferente de " + result1414 + " <line.readString(1)>")
chamada antiga: assertEquals("", line.readString(2))
nova chamada: assertEquals("", line.readString(2), "Era esperado valores iguais, mas  '' é diferente de " + result1415 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1416 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a", line.readString(0))
nova chamada: assertEquals("a", line.readString(0), "Era esperado valores iguais, mas  'a' é diferente de " + result1417 + " <line.readString(0)>")
chamada antiga: assertEquals("|", line.readString(1))
nova chamada: assertEquals("|", line.readString(1), "Era esperado valores iguais, mas  '|' é diferente de " + result1418 + " <line.readString(1)>")
chamada antiga: assertEquals("b", line.readString(2))
nova chamada: assertEquals("b", line.readString(2), "Era esperado valores iguais, mas  'b' é diferente de " + result1419 + " <line.readString(2)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1420 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a", line.readString(0))
nova chamada: assertEquals("a", line.readString(0), "Era esperado valores iguais, mas  'a' é diferente de " + result1421 + " <line.readString(0)>")
chamada antiga: assertEquals("| b", line.readString(1))
nova chamada: assertEquals("| b", line.readString(1), "Era esperado valores iguais, mas  '| b' é diferente de " + result1422 + " <line.readString(1)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1423 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a b", line.readString(0))
nova chamada: assertEquals("a b", line.readString(0), "Era esperado valores iguais, mas  'a b' é diferente de " + result1424 + " <line.readString(0)>")
chamada antiga: assertEquals("c", line.readString(1))
nova chamada: assertEquals("c", line.readString(1), "Era esperado valores iguais, mas  'c' é diferente de " + result1425 + " <line.readString(1)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1426 + " <line.getFieldCount()>")
chamada antiga: assertEquals("a b", line.readString(0))
nova chamada: assertEquals("a b", line.readString(0), "Era esperado valores iguais, mas  'a b' é diferente de " + result1427 + " <line.readString(0)>")
chamada antiga: assertEquals("c", line.readString(1))
nova chamada: assertEquals("c", line.readString(1), "Era esperado valores iguais, mas  'c' é diferente de " + result1428 + " <line.readString(1)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1429 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString(2))
nova chamada: assertEquals("c", line.readString(2), "Era esperado valores iguais, mas  'c' é diferente de " + result1430 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1431 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString(2))
nova chamada: assertEquals("c", line.readString(2), "Era esperado valores iguais, mas  'c' é diferente de " + result1432 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1433 + " <line.getFieldCount()>")
chamada antiga: assertEquals("\"\"b", line.readString(1))
nova chamada: assertEquals("\"\"b", line.readString(1), "Era esperado valores iguais, mas  '\'\'b' é diferente de " + result1434 + " <line.readString(1)>")
chamada antiga: assertEquals("\"c", line.readString(2))
nova chamada: assertEquals("\"c", line.readString(2), "Era esperado valores iguais, mas  '\'c' é diferente de " + result1435 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1436 + " <line.getFieldCount()>")
chamada antiga: assertEquals("\"b", line.readString(1))
nova chamada: assertEquals("\"b", line.readString(1), "Era esperado valores iguais, mas  '\'b' é diferente de " + result1437 + " <line.readString(1)>")
chamada antiga: assertEquals("c", line.readString(2))
nova chamada: assertEquals("c", line.readString(2), "Era esperado valores iguais, mas  'c' é diferente de " + result1438 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1439 + " <line.getFieldCount()>")
chamada antiga: assertEquals("b ", line.readRawString(1))
nova chamada: assertEquals("b ", line.readRawString(1), "Era esperado valores iguais, mas  'b ' é diferente de " + result1440 + " <line.readRawString(1)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1441 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c ", line.readRawString(2))
nova chamada: assertEquals("c ", line.readRawString(2), "Era esperado valores iguais, mas  'c ' é diferente de " + result1442 + " <line.readRawString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1443 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString(2))
nova chamada: assertEquals("c", line.readString(2), "Era esperado valores iguais, mas  'c' é diferente de " + result1444 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1445 + " <line.getFieldCount()>")
chamada antiga: assertEquals("b", line.readString(1))
nova chamada: assertEquals("b", line.readString(1), "Era esperado valores iguais, mas  'b' é diferente de " + result1446 + " <line.readString(1)>")
chamada antiga: assertEquals(4, line.getFieldCount())
nova chamada: assertEquals(4, line.getFieldCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1447 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString(2))
nova chamada: assertEquals("c", line.readString(2), "Era esperado valores iguais, mas  'c' é diferente de " + result1448 + " <line.readString(2)>")
chamada antiga: assertEquals("", line.readString(3))
nova chamada: assertEquals("", line.readString(3), "Era esperado valores iguais, mas  '' é diferente de " + result1449 + " <line.readString(3)>")
chamada antiga: assertEquals(0, line.getFieldCount())
nova chamada: assertEquals(0, line.getFieldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1450 + " <line.getFieldCount()>")
chamada antiga: assertEquals(1, line.getFieldCount())
nova chamada: assertEquals(1, line.getFieldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1451 + " <line.getFieldCount()>")
chamada antiga: assertEquals(0, line.getFieldCount())
nova chamada: assertEquals(0, line.getFieldCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1452 + " <line.getFieldCount()>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1453 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c\nrap", line.readString(2))
nova chamada: assertEquals("c\nrap", line.readString(2), "Era esperado valores iguais, mas  'c\nrap' é diferente de " + result1454 + " <line.readString(2)>")
chamada antiga: assertEquals(3, line.getFieldCount())
nova chamada: assertEquals(3, line.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1455 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c\nrap", line.readString(2))
nova chamada: assertEquals("c\nrap", line.readString(2), "Era esperado valores iguais, mas  'c\nrap' é diferente de " + result1456 + " <line.readString(2)>")
chamada antiga: assertEquals(4, line.getFieldCount())
nova chamada: assertEquals(4, line.getFieldCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1457 + " <line.getFieldCount()>")
chamada antiga: assertEquals("", line.readString(2))
nova chamada: assertEquals("", line.readString(2), "Era esperado valores iguais, mas  '' é diferente de " + result1458 + " <line.readString(2)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1459 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString(1))
nova chamada: assertEquals("c", line.readString(1), "Era esperado valores iguais, mas  'c' é diferente de " + result1460 + " <line.readString(1)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1461 + " <line.getFieldCount()>")
chamada antiga: assertEquals("", line.readString(1))
nova chamada: assertEquals("", line.readString(1), "Era esperado valores iguais, mas  '' é diferente de " + result1462 + " <line.readString(1)>")
chamada antiga: assertEquals(2, line.getFieldCount())
nova chamada: assertEquals(2, line.getFieldCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1463 + " <line.getFieldCount()>")
chamada antiga: assertEquals("c", line.readString("bar"))
nova chamada: assertEquals("c", line.readString("bar"), "Era esperado valores iguais, mas  'c' é diferente de " + result1464 + " <line.readString('bar')>")
chamada antiga: assertEquals(4, line.getFieldCount())
nova chamada: assertEquals(4, line.getFieldCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1465 + " <line.getFieldCount()>")
chamada antiga: assertEquals("value2\nvalue2cont", line.readString(1))
nova chamada: assertEquals("value2\nvalue2cont", line.readString(1), "Era esperado valores iguais, mas  'value2\nvalue2cont' é diferente de " + result1466 + " <line.readString(1)>")
chamada antiga: assertEquals(14, fieldSet.getFieldCount())
nova chamada: assertEquals(14, fieldSet.getFieldCount(), "Era esperado valores iguais, mas  14 é diferente de " + result1467 + " <fieldSet.getFieldCount()>")
chamada antiga: assertTrue(fieldSet.hasNames())
nova chamada: assertTrue(fieldSet.hasNames(), "Era esperado verdadeiro, mas " + result1468 + " <fieldSet.hasNames()> é falso")
chamada antiga: assertEquals(fieldSet.getFieldCount(), fieldSet.getNames().length)
nova chamada: assertEquals(fieldSet.getFieldCount(), fieldSet.getNames().length, "Era esperado valores iguais, mas " + result1469 + " <fieldSet.getFieldCount()> é diferente de " + " fieldSet.getNames().length")
chamada antiga: assertFalse(fieldSet.hasNames())
nova chamada: assertFalse(fieldSet.hasNames(), "Era esperado falso, mas " + result1470 + " <fieldSet.hasNames()> é verdadeiro ")
chamada antiga: assertEquals(fieldSet.readString(0), "TestString")
nova chamada: assertEquals(fieldSet.readString(0), "TestString", "Era esperado valores iguais, mas " + result1471 + " <fieldSet.readString(0)> é diferente de " + " 'TestString'")
chamada antiga: assertEquals(fieldSet.readString("String"), "TestString")
nova chamada: assertEquals(fieldSet.readString("String"), "TestString", "Era esperado valores iguais, mas " + result1472 + " <fieldSet.readString('String')> é diferente de " + " 'TestString'")
chamada antiga: assertEquals('C', fieldSet.readChar(2))
nova chamada: assertEquals('C', fieldSet.readChar(2), "Era esperado valores iguais, mas  'C' é diferente de " + result1473 + " <fieldSet.readChar(2)>")
chamada antiga: assertEquals('C', fieldSet.readChar("Char"))
nova chamada: assertEquals('C', fieldSet.readChar("Char"), "Era esperado valores iguais, mas  'C' é diferente de " + result1474 + " <fieldSet.readChar('Char')>")
chamada antiga: assertTrue(fieldSet.readBoolean(1))
nova chamada: assertTrue(fieldSet.readBoolean(1), "Era esperado verdadeiro, mas " + result1475 + " <fieldSet.readBoolean(1)> é falso")
chamada antiga: assertTrue(fieldSet.readBoolean("Boolean"))
nova chamada: assertTrue(fieldSet.readBoolean("Boolean"), "Era esperado verdadeiro, mas " + result1476 + " <fieldSet.readBoolean('Boolean')> é falso")
chamada antiga: assertEquals(10, fieldSet.readByte(3))
nova chamada: assertEquals(10, fieldSet.readByte(3), "Era esperado valores iguais, mas  10 é diferente de " + result1477 + " <fieldSet.readByte(3)>")
chamada antiga: assertEquals(10, fieldSet.readByte("Byte"))
nova chamada: assertEquals(10, fieldSet.readByte("Byte"), "Era esperado valores iguais, mas  10 é diferente de " + result1478 + " <fieldSet.readByte('Byte')>")
chamada antiga: assertEquals(-472, fieldSet.readShort(4))
nova chamada: assertEquals(-472, fieldSet.readShort(4), "Era esperado valores iguais, mas  -472 é diferente de " + result1479 + " <fieldSet.readShort(4)>")
chamada antiga: assertEquals(-472, fieldSet.readShort("Short"))
nova chamada: assertEquals(-472, fieldSet.readShort("Short"), "Era esperado valores iguais, mas  -472 é diferente de " + result1480 + " <fieldSet.readShort('Short')>")
chamada antiga: assertEquals(124.3F, fieldSet.readFloat(7))
nova chamada: assertEquals(124.3F, fieldSet.readFloat(7), "Era esperado valores iguais, mas  124.3F é diferente de " + result1481 + " <fieldSet.readFloat(7)>")
chamada antiga: assertEquals(124.3F, fieldSet.readFloat("Float"))
nova chamada: assertEquals(124.3F, fieldSet.readFloat("Float"), "Era esperado valores iguais, mas  124.3F é diferente de " + result1482 + " <fieldSet.readFloat('Float')>")
chamada antiga: assertEquals(424.3, fieldSet.readDouble(8))
nova chamada: assertEquals(424.3, fieldSet.readDouble(8), "Era esperado valores iguais, mas  424.3 é diferente de " + result1483 + " <fieldSet.readDouble(8)>")
chamada antiga: assertEquals(424.3, fieldSet.readDouble("Double"))
nova chamada: assertEquals(424.3, fieldSet.readDouble("Double"), "Era esperado valores iguais, mas  424.3 é diferente de " + result1484 + " <fieldSet.readDouble('Double')>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal(8))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal(8), "Era esperado valores iguais, mas  bd é diferente de " + result1485 + " <fieldSet.readBigDecimal(8)>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal("Double"))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal("Double"), "Era esperado valores iguais, mas  bd é diferente de " + result1486 + " <fieldSet.readBigDecimal('Double')>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal(0))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal(0), "Era esperado valores iguais, mas  bd é diferente de " + result1487 + " <fieldSet.readBigDecimal(0)>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal(8))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal(8), "Era esperado valores iguais, mas  bd é diferente de " + result1488 + " <fieldSet.readBigDecimal(8)>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal(9))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal(9), "Era esperado valores iguais, mas  bd é diferente de " + result1489 + " <fieldSet.readBigDecimal(9)>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal(10, bd))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal(10, bd), "Era esperado valores iguais, mas  bd é diferente de " + result1490 + " <fieldSet.readBigDecimal(10, bd)>")
chamada antiga: assertEquals(bd, fieldSet.readBigDecimal("Null", bd))
nova chamada: assertEquals(bd, fieldSet.readBigDecimal("Null", bd), "Era esperado valores iguais, mas  bd é diferente de " + result1491 + " <fieldSet.readBigDecimal('Null', bd)>")
chamada antiga: assertTrue(exception.getMessage().contains("something"))
nova chamada: assertTrue(exception.getMessage().contains("something"), "Era esperado verdadeiro, mas " + result1492 + " <exception.getMessage().contains('something')> é falso")
chamada antiga: assertTrue(fieldSet.readBoolean(1, "true"))
nova chamada: assertTrue(fieldSet.readBoolean(1, "true"), "Era esperado verdadeiro, mas " + result1493 + " <fieldSet.readBoolean(1, 'true')> é falso")
chamada antiga: assertFalse(fieldSet.readBoolean(1, "incorrect trueValue"))
nova chamada: assertFalse(fieldSet.readBoolean(1, "incorrect trueValue"), "Era esperado falso, mas " + result1494 + " <fieldSet.readBoolean(1, 'incorrect trueValue')> é verdadeiro ")
chamada antiga: assertTrue(fieldSet.readBoolean("Boolean", "true"))
nova chamada: assertTrue(fieldSet.readBoolean("Boolean", "true"), "Era esperado verdadeiro, mas " + result1495 + " <fieldSet.readBoolean('Boolean', 'true')> é falso")
chamada antiga: assertFalse(fieldSet.readBoolean("Boolean", "incorrect trueValue"))
nova chamada: assertFalse(fieldSet.readBoolean("Boolean", "incorrect trueValue"), "Era esperado falso, mas " + result1496 + " <fieldSet.readBoolean('Boolean', 'incorrect trueValue')> é verdadeiro ")
chamada antiga: assertFalse(fieldSet.readBoolean(0))
nova chamada: assertFalse(fieldSet.readBoolean(0), "Era esperado falso, mas " + result1497 + " <fieldSet.readBoolean(0)> é verdadeiro ")
chamada antiga: assertEquals(354224, fieldSet.readInt(5))
nova chamada: assertEquals(354224, fieldSet.readInt(5), "Era esperado valores iguais, mas  354224 é diferente de " + result1498 + " <fieldSet.readInt(5)>")
chamada antiga: assertEquals(354224, fieldSet.readInt("Integer"))
nova chamada: assertEquals(354224, fieldSet.readInt("Integer"), "Era esperado valores iguais, mas  354224 é diferente de " + result1499 + " <fieldSet.readInt('Integer')>")
chamada antiga: assertEquals(354224, fieldSet.readInt(0))
nova chamada: assertEquals(354224, fieldSet.readInt(0), "Era esperado valores iguais, mas  354224 é diferente de " + result1500 + " <fieldSet.readInt(0)>")
chamada antiga: assertEquals(354224, fieldSet.readInt(0))
nova chamada: assertEquals(354224, fieldSet.readInt(0), "Era esperado valores iguais, mas  354224 é diferente de " + result1501 + " <fieldSet.readInt(0)>")
chamada antiga: assertEquals(543, fieldSet.readLong(6))
nova chamada: assertEquals(543, fieldSet.readLong(6), "Era esperado valores iguais, mas  543 é diferente de " + result1502 + " <fieldSet.readLong(6)>")
chamada antiga: assertEquals(543, fieldSet.readLong("Long"))
nova chamada: assertEquals(543, fieldSet.readLong("Long"), "Era esperado valores iguais, mas  543 é diferente de " + result1503 + " <fieldSet.readLong('Long')>")
chamada antiga: assertEquals(9, fieldSet.readLong(0))
nova chamada: assertEquals(9, fieldSet.readLong(0), "Era esperado valores iguais, mas  9 é diferente de " + result1504 + " <fieldSet.readLong(0)>")
chamada antiga: assertEquals(5, fieldSet.readInt(10, 5))
nova chamada: assertEquals(5, fieldSet.readInt(10, 5), "Era esperado valores iguais, mas  5 é diferente de " + result1505 + " <fieldSet.readInt(10, 5)>")
chamada antiga: assertEquals(5, fieldSet.readInt("Null", 5))
nova chamada: assertEquals(5, fieldSet.readInt("Null", 5), "Era esperado valores iguais, mas  5 é diferente de " + result1506 + " <fieldSet.readInt('Null', 5)>")
chamada antiga: assertEquals(354224, fieldSet.readInt(5, 5))
nova chamada: assertEquals(354224, fieldSet.readInt(5, 5), "Era esperado valores iguais, mas  354224 é diferente de " + result1507 + " <fieldSet.readInt(5, 5)>")
chamada antiga: assertEquals(354224, fieldSet.readInt("Integer", 5))
nova chamada: assertEquals(354224, fieldSet.readInt("Integer", 5), "Era esperado valores iguais, mas  354224 é diferente de " + result1508 + " <fieldSet.readInt('Integer', 5)>")
chamada antiga: assertEquals(fieldSet.readLong(indexOfNull, defaultValue), defaultValue)
nova chamada: assertEquals(fieldSet.readLong(indexOfNull, defaultValue), defaultValue, "Era esperado valores iguais, mas " + result1509 + " <fieldSet.readLong(indexOfNull, defaultValue)> é diferente de " + " defaultValue")
chamada antiga: assertEquals(fieldSet.readLong(indexNotNull, defaultValue), longValueAtIndex)
nova chamada: assertEquals(fieldSet.readLong(indexNotNull, defaultValue), longValueAtIndex, "Era esperado valores iguais, mas " + result1510 + " <fieldSet.readLong(indexNotNull, defaultValue)> é diferente de " + " longValueAtIndex")
chamada antiga: assertEquals(fieldSet.readLong(nameNull, defaultValue), defaultValue)
nova chamada: assertEquals(fieldSet.readLong(nameNull, defaultValue), defaultValue, "Era esperado valores iguais, mas " + result1511 + " <fieldSet.readLong(nameNull, defaultValue)> é diferente de " + " defaultValue")
chamada antiga: assertEquals(fieldSet.readLong(nameNotNull, defaultValue), longValueAtIndex)
nova chamada: assertEquals(fieldSet.readLong(nameNotNull, defaultValue), longValueAtIndex, "Era esperado valores iguais, mas " + result1512 + " <fieldSet.readLong(nameNotNull, defaultValue)> é diferente de " + " longValueAtIndex")
chamada antiga: assertTrue(exception.getMessage().contains("TestString"))
nova chamada: assertTrue(exception.getMessage().contains("TestString"), "Era esperado verdadeiro, mas " + result1513 + " <exception.getMessage().contains('TestString')> é falso")
chamada antiga: assertTrue(message.contains("TestString"))
nova chamada: assertTrue(message.contains("TestString"), "Era esperado verdadeiro, mas " + result1514 + " <message.contains('TestString')> é falso")
chamada antiga: assertTrue(message.contains("name: [String]"))
nova chamada: assertTrue(message.contains("name: [String]"), "Era esperado verdadeiro, mas " + result1515 + " <message.contains('name: [String]')> é falso")
chamada antiga: assertNotNull(fieldSet.readDate(11))
nova chamada: assertNotNull(fieldSet.readDate(11), "Era esperado não nulo, mas " + result1516 + " <fieldSet.readDate(11)> é nulo")
chamada antiga: assertNotNull(fieldSet.readDate("Date"))
nova chamada: assertNotNull(fieldSet.readDate("Date"), "Era esperado não nulo, mas " + result1517 + " <fieldSet.readDate('Date')> é nulo")
chamada antiga: assertEquals(date, fieldSet.readDate(13, date))
nova chamada: assertEquals(date, fieldSet.readDate(13, date), "Era esperado valores iguais, mas  date é diferente de " + result1518 + " <fieldSet.readDate(13, date)>")
chamada antiga: assertEquals(date, fieldSet.readDate("BlankInput", date))
nova chamada: assertEquals(date, fieldSet.readDate("BlankInput", date), "Era esperado valores iguais, mas  date é diferente de " + result1519 + " <fieldSet.readDate('BlankInput', date)>")
chamada antiga: assertEquals(dateFormat.parse("13/01/1999"), fieldSet.readDate(0))
nova chamada: assertEquals(dateFormat.parse("13/01/1999"), fieldSet.readDate(0), "Era esperado valores iguais, mas " + result1520 + " <dateFormat.parse('13/01/1999')> é diferente de " + result1521 + " <fieldSet.readDate(0)>")
chamada antiga: assertTrue(exception.getMessage().contains("TestString"))
nova chamada: assertTrue(exception.getMessage().contains("TestString"), "Era esperado verdadeiro, mas " + result1522 + " <exception.getMessage().contains('TestString')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("name: [String]"))
nova chamada: assertTrue(exception.getMessage().contains("name: [String]"), "Era esperado verdadeiro, mas " + result1523 + " <exception.getMessage().contains('name: [String]')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
nova chamada: assertTrue(exception.getMessage().contains("dd-MM-yyyy"), "Era esperado verdadeiro, mas " + result1524 + " <exception.getMessage().contains('dd-MM-yyyy')> é falso")
chamada antiga: assertEquals(date, fieldSet.readDate(13, "dd-MM-yyyy", date))
nova chamada: assertEquals(date, fieldSet.readDate(13, "dd-MM-yyyy", date), "Era esperado valores iguais, mas  date é diferente de " + result1525 + " <fieldSet.readDate(13, 'dd-MM-yyyy', date)>")
chamada antiga: assertEquals(date, fieldSet.readDate("BlankInput", "dd-MM-yyyy", date))
nova chamada: assertEquals(date, fieldSet.readDate("BlankInput", "dd-MM-yyyy", date), "Era esperado valores iguais, mas  date é diferente de " + result1526 + " <fieldSet.readDate('BlankInput', 'dd-MM-yyyy', date)>")
chamada antiga: assertTrue(exception.getMessage().contains("yyyy-MM-dd"))
nova chamada: assertTrue(exception.getMessage().contains("yyyy-MM-dd"), "Era esperado verdadeiro, mas " + result1527 + " <exception.getMessage().contains('yyyy-MM-dd')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("yyyy-MM-dd"))
nova chamada: assertTrue(exception.getMessage().contains("yyyy-MM-dd"), "Era esperado verdadeiro, mas " + result1528 + " <exception.getMessage().contains('yyyy-MM-dd')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("name: [String]"))
nova chamada: assertTrue(exception.getMessage().contains("name: [String]"), "Era esperado verdadeiro, mas " + result1529 + " <exception.getMessage().contains('name: [String]')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
nova chamada: assertTrue(exception.getMessage().contains("dd-MM-yyyy"), "Era esperado verdadeiro, mas " + result1530 + " <exception.getMessage().contains('dd-MM-yyyy')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
nova chamada: assertTrue(exception.getMessage().contains("dd-MM-yyyy"), "Era esperado verdadeiro, mas " + result1531 + " <exception.getMessage().contains('dd-MM-yyyy')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("name: [String]"))
nova chamada: assertTrue(exception.getMessage().contains("name: [String]"), "Era esperado verdadeiro, mas " + result1532 + " <exception.getMessage().contains('name: [String]')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("dd-MM-yyyy"))
nova chamada: assertTrue(exception.getMessage().contains("dd-MM-yyyy"), "Era esperado verdadeiro, mas " + result1533 + " <exception.getMessage().contains('dd-MM-yyyy')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("String"))
nova chamada: assertTrue(exception.getMessage().contains("String"), "Era esperado verdadeiro, mas " + result1534 + " <exception.getMessage().contains('String')> é falso")
chamada antiga: assertEquals(fieldSet, fieldSet)
nova chamada: assertEquals(fieldSet, fieldSet, "Era esperado valores iguais, mas  fieldSet é diferente de " + " fieldSet")
chamada antiga: assertEquals(fieldSet, new DefaultFieldSet(tokens))
nova chamada: assertEquals(fieldSet, new DefaultFieldSet(tokens), "Era esperado valores iguais, mas  fieldSet é diferente de " + " new DefaultFieldSet(tokens)")
chamada antiga: assertEquals(fs1, fs2)
nova chamada: assertEquals(fs1, fs2, "Era esperado valores iguais, mas  fs1 é diferente de " + " fs2")
chamada antiga: assertNull(fieldSet.readString(10))
nova chamada: assertNull(fieldSet.readString(10), "Era esperado nulo, mas " + result1535 + " <fieldSet.readString(10)> não é nulo")
chamada antiga: assertFalse(fieldSet.equals(null))
nova chamada: assertFalse(fieldSet.equals(null), "Era esperado falso, mas " + result1536 + " <fieldSet.equals(null)> é verdadeiro ")
chamada antiga: assertFalse(new DefaultFieldSet(null).equals(fieldSet))
nova chamada: assertFalse(new DefaultFieldSet(null).equals(fieldSet), "Era esperado falso, mas " + result1537 + " <new DefaultFieldSet(null).equals(fieldSet)> é verdadeiro ")
chamada antiga: assertFalse(fs1.equals(fs2))
nova chamada: assertFalse(fs1.equals(fs2), "Era esperado falso, mas " + result1538 + " <fs1.equals(fs2)> é verdadeiro ")
chamada antiga: assertEquals(fieldSet.hashCode(), new DefaultFieldSet(tokens).hashCode())
nova chamada: assertEquals(fieldSet.hashCode(), new DefaultFieldSet(tokens).hashCode(), "Era esperado valores iguais, mas " + result1539 + " <fieldSet.hashCode()> é diferente de " + result1540 + " <new DefaultFieldSet(tokens).hashCode()>")
chamada antiga: assertEquals(0, new DefaultFieldSet(null).hashCode())
nova chamada: assertEquals(0, new DefaultFieldSet(null).hashCode(), "Era esperado valores iguais, mas  0 é diferente de " + result1541 + " <new DefaultFieldSet(null).hashCode()>")
chamada antiga: assertTrue(fieldSet.toString().contains("Foo=foo"))
nova chamada: assertTrue(fieldSet.toString().contains("Foo=foo"), "Era esperado verdadeiro, mas " + result1542 + " <fieldSet.toString().contains('Foo=foo')> é falso")
chamada antiga: assertTrue(fieldSet.toString().contains("foo"))
nova chamada: assertTrue(fieldSet.toString().contains("foo"), "Era esperado verdadeiro, mas " + result1543 + " <fieldSet.toString().contains('foo')> é falso")
chamada antiga: assertEquals("", fieldSet.toString())
nova chamada: assertEquals("", fieldSet.toString(), "Era esperado valores iguais, mas  '' é diferente de " + result1544 + " <fieldSet.toString()>")
chamada antiga: assertEquals("foo", new DefaultFieldSet(new String[] { "foo", "bar" }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Foo"))
nova chamada: assertEquals("foo", new DefaultFieldSet(new String[] { "foo", "bar" }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Foo"), "Era esperado valores iguais, mas  'foo' é diferente de " + result1545 + " <new DefaultFieldSet(new String[] { 'foo', 'bar' }, new String[] { 'Foo', 'Bar' }).getProperties().getProperty('Foo')>")
chamada antiga: assertEquals("bar", new DefaultFieldSet(new String[] { "foo", "bar   " }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Bar"))
nova chamada: assertEquals("bar", new DefaultFieldSet(new String[] { "foo", "bar   " }, new String[] { "Foo", "Bar" }).getProperties().getProperty("Bar"), "Era esperado valores iguais, mas  'bar' é diferente de " + result1546 + " <new DefaultFieldSet(new String[] { 'foo', 'bar   ' }, new String[] { 'Foo', 'Bar' }).getProperties().getProperty('Bar')>")
chamada antiga: assertEquals("bar", fieldSet.getProperties().getProperty("Bar"))
nova chamada: assertEquals("bar", fieldSet.getProperties().getProperty("Bar"), "Era esperado valores iguais, mas  'bar' é diferente de " + result1547 + " <fieldSet.getProperties().getProperty('Bar')>")
chamada antiga: assertNull(fieldSet.getProperties().getProperty("Foo"))
nova chamada: assertNull(fieldSet.getProperties().getProperty("Foo"), "Era esperado nulo, mas " + result1548 + " <fieldSet.getProperties().getProperty('Foo')> não é nulo")
chamada antiga: assertEquals(tokens.length, values.length)
nova chamada: assertEquals(tokens.length, values.length, "Era esperado valores iguais, mas  tokens.length é diferente de " + " values.length")
chamada antiga: assertEquals(value, 9)
nova chamada: assertEquals(value, 9, "Era esperado valores iguais, mas  value é diferente de " + " 9")
chamada antiga: assertEquals(value, fs.readRawString(0))
nova chamada: assertEquals(value, fs.readRawString(0), "Era esperado valores iguais, mas  value é diferente de " + result1549 + " <fs.readRawString(0)>")
chamada antiga: assertEquals(value, fs.readRawString(name))
nova chamada: assertEquals(value, fs.readRawString(name), "Era esperado valores iguais, mas  value é diferente de " + result1550 + " <fs.readRawString(name)>")
chamada antiga: assertEquals(1, fields.getFieldCount())
nova chamada: assertEquals(1, fields.getFieldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1551 + " <fields.getFieldCount()>")
chamada antiga: assertEquals("bar", fields.readString(1))
nova chamada: assertEquals("bar", fields.readString(1), "Era esperado valores iguais, mas  'bar' é diferente de " + result1552 + " <fields.readString(1)>")
chamada antiga: assertEquals(1, fields.getFieldCount())
nova chamada: assertEquals(1, fields.getFieldCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1553 + " <fields.getFieldCount()>")
chamada antiga: assertEquals("foo bar", fields.readString(0))
nova chamada: assertEquals("foo bar", fields.readString(0), "Era esperado valores iguais, mas  'foo bar' é diferente de " + result1554 + " <fields.readString(0)>")
chamada antiga: assertEquals("MatchsizeSmallsize", result)
nova chamada: assertEquals("MatchsizeSmallsize", result, "Era esperado valores iguais, mas  'MatchsizeSmallsize' é diferente de " + " result")
chamada antiga: assertEquals("Matchsize   Smallsize", result)
nova chamada: assertEquals("Matchsize   Smallsize", result, "Era esperado valores iguais, mas  'Matchsize   Smallsize' é diferente de " + " result")
chamada antiga: assertEquals(23, result.length())
nova chamada: assertEquals(23, result.length(), "Era esperado valores iguais, mas  23 é diferente de " + result1555 + " <result.length()>")
chamada antiga: assertEquals("    Matchsize Smallsize", result)
nova chamada: assertEquals("    Matchsize Smallsize", result, "Era esperado valores iguais, mas  '    Matchsize Smallsize' é diferente de " + " result")
chamada antiga: assertEquals("  Matchsize   Smallsize  ", result)
nova chamada: assertEquals("  Matchsize   Smallsize  ", result, "Era esperado valores iguais, mas  '  Matchsize   Smallsize  ' é diferente de " + " result")
chamada antiga: assertEquals("Matchsize....Smallsize..", result)
nova chamada: assertEquals("Matchsize....Smallsize..", result, "Era esperado valores iguais, mas  'Matchsize....Smallsize..' é diferente de " + " result")
chamada antiga: assertEquals("Matchsize    Smallsize  ", result)
nova chamada: assertEquals("Matchsize    Smallsize  ", result, "Era esperado valores iguais, mas  'Matchsize    Smallsize  ' é diferente de " + " result")
chamada antiga: assertEquals("foo   bar", aggregator.aggregate(args))
nova chamada: assertEquals("foo   bar", aggregator.aggregate(args), "Era esperado valores iguais, mas  'foo   bar' é diferente de " + result1556 + " <aggregator.aggregate(args)>")
chamada antiga: assertFalse(tokenizer.hasNames())
nova chamada: assertFalse(tokenizer.hasNames(), "Era esperado falso, mas " + result1557 + " <tokenizer.hasNames()> é verdadeiro ")
chamada antiga: assertFalse(tokenizer.hasNames())
nova chamada: assertFalse(tokenizer.hasNames(), "Era esperado falso, mas " + result1558 + " <tokenizer.hasNames()> é verdadeiro ")
chamada antiga: assertFalse(tokenizer.hasNames())
nova chamada: assertFalse(tokenizer.hasNames(), "Era esperado falso, mas " + result1559 + " <tokenizer.hasNames()> é verdadeiro ")
chamada antiga: assertTrue(tokenizer.hasNames())
nova chamada: assertTrue(tokenizer.hasNames(), "Era esperado verdadeiro, mas " + result1560 + " <tokenizer.hasNames()> é falso")
chamada antiga: assertEquals(9, tokens.size())
nova chamada: assertEquals(9, tokens.size(), "Era esperado valores iguais, mas  9 é diferente de " + result1561 + " <tokens.size()>")
chamada antiga: assertEquals("England", tokens.get(1))
nova chamada: assertEquals("England", tokens.get(1), "Era esperado valores iguais, mas  'England' é diferente de " + result1562 + " <tokens.get(1)>")
chamada antiga: assertEquals("3", tokens.get(6))
nova chamada: assertEquals("3", tokens.get(6), "Era esperado valores iguais, mas  '3' é diferente de " + result1563 + " <tokens.get(6)>")
chamada antiga: assertEquals(2, tokens.size())
nova chamada: assertEquals(2, tokens.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1564 + " <tokens.size()>")
chamada antiga: assertEquals("Graham", tokens.get(0))
nova chamada: assertEquals("Graham", tokens.get(0), "Era esperado valores iguais, mas  'Graham' é diferente de " + result1565 + " <tokens.get(0)>")
chamada antiga: assertEquals("Miller", tokens.get(1))
nova chamada: assertEquals("Miller", tokens.get(1), "Era esperado valores iguais, mas  'Miller' é diferente de " + result1566 + " <tokens.get(1)>")
chamada antiga: assertEquals(0, tokens.size())
nova chamada: assertEquals(0, tokens.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1567 + " <tokens.size()>")
chamada antiga: assertEquals("foo", fieldSet.readString(0))
nova chamada: assertEquals("foo", fieldSet.readString(0), "Era esperado valores iguais, mas  'foo' é diferente de " + result1568 + " <fieldSet.readString(0)>")
chamada antiga: assertEquals(1, fieldSet.readInt("foo"))
nova chamada: assertEquals(1, fieldSet.readInt("foo"), "Era esperado valores iguais, mas  1 é diferente de " + result1569 + " <fieldSet.readInt('foo')>")
chamada antiga: assertEquals(format.parse("1999/12/18"), fieldSet.readDate(0))
nova chamada: assertEquals(format.parse("1999/12/18"), fieldSet.readDate(0), "Era esperado valores iguais, mas " + result1570 + " <format.parse('1999/12/18')> é diferente de " + result1571 + " <fieldSet.readDate(0)>")
chamada antiga: assertEquals(19991218, fieldSet.readInt(0))
nova chamada: assertEquals(19991218, fieldSet.readInt(0), "Era esperado valores iguais, mas  19991218 é diferente de " + result1572 + " <fieldSet.readInt(0)>")
chamada antiga: assertEquals(15, exception.getExpectedLength())
nova chamada: assertEquals(15, exception.getExpectedLength(), "Era esperado valores iguais, mas  15 é diferente de " + result1573 + " <exception.getExpectedLength()>")
chamada antiga: assertEquals(0, exception.getActualLength())
nova chamada: assertEquals(0, exception.getActualLength(), "Era esperado valores iguais, mas  0 é diferente de " + result1574 + " <exception.getActualLength()>")
chamada antiga: assertEquals("", exception.getInput())
nova chamada: assertEquals("", exception.getInput(), "Era esperado valores iguais, mas  '' é diferente de " + result1575 + " <exception.getInput()>")
chamada antiga: assertEquals(15, exception.getExpectedLength())
nova chamada: assertEquals(15, exception.getExpectedLength(), "Era esperado valores iguais, mas  15 é diferente de " + result1576 + " <exception.getExpectedLength()>")
chamada antiga: assertEquals(5, exception.getActualLength())
nova chamada: assertEquals(5, exception.getActualLength(), "Era esperado valores iguais, mas  5 é diferente de " + result1577 + " <exception.getActualLength()>")
chamada antiga: assertEquals("12345", exception.getInput())
nova chamada: assertEquals("12345", exception.getInput(), "Era esperado valores iguais, mas  '12345' é diferente de " + result1578 + " <exception.getInput()>")
chamada antiga: assertEquals("12345", tokens.readString(0))
nova chamada: assertEquals("12345", tokens.readString(0), "Era esperado valores iguais, mas  '12345' é diferente de " + result1579 + " <tokens.readString(0)>")
chamada antiga: assertEquals("", tokens.readString(1))
nova chamada: assertEquals("", tokens.readString(1), "Era esperado valores iguais, mas  '' é diferente de " + result1580 + " <tokens.readString(1)>")
chamada antiga: assertEquals("12345", tokens.readString(0))
nova chamada: assertEquals("12345", tokens.readString(0), "Era esperado valores iguais, mas  '12345' é diferente de " + result1581 + " <tokens.readString(0)>")
chamada antiga: assertEquals("", tokens.readString(1))
nova chamada: assertEquals("", tokens.readString(1), "Era esperado valores iguais, mas  '' é diferente de " + result1582 + " <tokens.readString(1)>")
chamada antiga: assertEquals("12345", tokens.readString(0))
nova chamada: assertEquals("12345", tokens.readString(0), "Era esperado valores iguais, mas  '12345' é diferente de " + result1583 + " <tokens.readString(0)>")
chamada antiga: assertEquals("", tokens.readString(1))
nova chamada: assertEquals("", tokens.readString(1), "Era esperado valores iguais, mas  '' é diferente de " + result1584 + " <tokens.readString(1)>")
chamada antiga: assertEquals("", exception.getInput())
nova chamada: assertEquals("", exception.getInput(), "Era esperado valores iguais, mas  '' é diferente de " + result1585 + " <exception.getInput()>")
chamada antiga: assertEquals(3, tokens.getFieldCount())
nova chamada: assertEquals(3, tokens.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1586 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals("H1", tokens.readString(0))
nova chamada: assertEquals("H1", tokens.readString(0), "Era esperado valores iguais, mas  'H1' é diferente de " + result1587 + " <tokens.readString(0)>")
chamada antiga: assertEquals("12345", tokens.readString(1))
nova chamada: assertEquals("12345", tokens.readString(1), "Era esperado valores iguais, mas  '12345' é diferente de " + result1588 + " <tokens.readString(1)>")
chamada antiga: assertEquals("12345", tokens.readString(2))
nova chamada: assertEquals("12345", tokens.readString(2), "Era esperado valores iguais, mas  '12345' é diferente de " + result1589 + " <tokens.readString(2)>")
chamada antiga: assertEquals(3, tokens.getFieldCount())
nova chamada: assertEquals(3, tokens.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1590 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(0, 10).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1591 + " <line.substring(0, 10).trim()> é diferente de " + result1592 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(10, 25).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1593 + " <line.substring(10, 25).trim()> é diferente de " + result1594 + " <tokens.readString(1)>")
chamada antiga: assertEquals(line.substring(25).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(25).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1595 + " <line.substring(25).trim()> é diferente de " + result1596 + " <tokens.readString(2)>")
chamada antiga: assertEquals(30, exception.getExpectedLength())
nova chamada: assertEquals(30, exception.getExpectedLength(), "Era esperado valores iguais, mas  30 é diferente de " + result1597 + " <exception.getExpectedLength()>")
chamada antiga: assertEquals(35, exception.getActualLength())
nova chamada: assertEquals(35, exception.getActualLength(), "Era esperado valores iguais, mas  35 é diferente de " + result1598 + " <exception.getActualLength()>")
chamada antiga: assertEquals(line, exception.getInput())
nova chamada: assertEquals(line, exception.getInput(), "Era esperado valores iguais, mas  line é diferente de " + result1599 + " <exception.getInput()>")
chamada antiga: assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(0, 10).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1600 + " <line.substring(0, 10).trim()> é diferente de " + result1601 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(10, 25).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1602 + " <line.substring(10, 25).trim()> é diferente de " + result1603 + " <tokens.readString(1)>")
chamada antiga: assertEquals(line.substring(25).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(25).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1604 + " <line.substring(25).trim()> é diferente de " + result1605 + " <tokens.readString(2)>")
chamada antiga: assertEquals(line.substring(0, 10).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(0, 10).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1606 + " <line.substring(0, 10).trim()> é diferente de " + result1607 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(10, 25).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(10, 25).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1608 + " <line.substring(10, 25).trim()> é diferente de " + result1609 + " <tokens.readString(1)>")
chamada antiga: assertEquals(line.substring(25, 30).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(25, 30).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1610 + " <line.substring(25, 30).trim()> é diferente de " + result1611 + " <tokens.readString(2)>")
chamada antiga: assertEquals(3, tokens.getFieldCount())
nova chamada: assertEquals(3, tokens.getFieldCount(), "Era esperado valores iguais, mas  3 é diferente de " + result1612 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(line.substring(0, 10).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(0, 10).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1613 + " <line.substring(0, 10).trim()> é diferente de " + result1614 + " <tokens.readString(2)>")
chamada antiga: assertEquals(line.substring(13, 28).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(13, 28).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1615 + " <line.substring(13, 28).trim()> é diferente de " + result1616 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(33, 38).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(33, 38).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1617 + " <line.substring(33, 38).trim()> é diferente de " + result1618 + " <tokens.readString(1)>")
chamada antiga: assertEquals(4, tokens.getFieldCount())
nova chamada: assertEquals(4, tokens.getFieldCount(), "Era esperado valores iguais, mas  4 é diferente de " + result1619 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(line.substring(0, 5).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(0, 5).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1620 + " <line.substring(0, 5).trim()> é diferente de " + result1621 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(5, 15).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(5, 15).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1622 + " <line.substring(5, 15).trim()> é diferente de " + result1623 + " <tokens.readString(1)>")
chamada antiga: assertEquals(line.substring(15, 25).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(15, 25).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1624 + " <line.substring(15, 25).trim()> é diferente de " + result1625 + " <tokens.readString(2)>")
chamada antiga: assertEquals(line.substring(25).trim(), tokens.readString(3))
nova chamada: assertEquals(line.substring(25).trim(), tokens.readString(3), "Era esperado valores iguais, mas " + result1626 + " <line.substring(25).trim()> é diferente de " + result1627 + " <tokens.readString(3)>")
chamada antiga: assertEquals(5, tokens.getFieldCount())
nova chamada: assertEquals(5, tokens.getFieldCount(), "Era esperado valores iguais, mas  5 é diferente de " + result1628 + " <tokens.getFieldCount()>")
chamada antiga: assertEquals(line.substring(0, 5).trim(), tokens.readString(0))
nova chamada: assertEquals(line.substring(0, 5).trim(), tokens.readString(0), "Era esperado valores iguais, mas " + result1629 + " <line.substring(0, 5).trim()> é diferente de " + result1630 + " <tokens.readString(0)>")
chamada antiga: assertEquals(line.substring(5, 15).trim(), tokens.readString(1))
nova chamada: assertEquals(line.substring(5, 15).trim(), tokens.readString(1), "Era esperado valores iguais, mas " + result1631 + " <line.substring(5, 15).trim()> é diferente de " + result1632 + " <tokens.readString(1)>")
chamada antiga: assertEquals(line.substring(15, 25).trim(), tokens.readString(2))
nova chamada: assertEquals(line.substring(15, 25).trim(), tokens.readString(2), "Era esperado valores iguais, mas " + result1633 + " <line.substring(15, 25).trim()> é diferente de " + result1634 + " <tokens.readString(2)>")
chamada antiga: assertEquals(line.substring(25, 27).trim(), tokens.readString(3))
nova chamada: assertEquals(line.substring(25, 27).trim(), tokens.readString(3), "Era esperado valores iguais, mas " + result1635 + " <line.substring(25, 27).trim()> é diferente de " + result1636 + " <tokens.readString(3)>")
chamada antiga: assertEquals(2, exception.getExpectedCount())
nova chamada: assertEquals(2, exception.getExpectedCount(), "Era esperado valores iguais, mas  2 é diferente de " + result1637 + " <exception.getExpectedCount()>")
chamada antiga: assertEquals(1, exception.getActualCount())
nova chamada: assertEquals(1, exception.getActualCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1638 + " <exception.getActualCount()>")
chamada antiga: assertEquals("foo;bar", aggregator.aggregate(new String[] { "foo", "bar" }))
nova chamada: assertEquals("foo;bar", aggregator.aggregate(new String[] { "foo", "bar" }), "Era esperado valores iguais, mas  'foo;bar' é diferente de " + result1639 + " <aggregator.aggregate(new String[] { 'foo', 'bar' })>")
chamada antiga: assertEquals("foo,bar", aggregator.aggregate(new String[] { "foo", "bar" }))
nova chamada: assertEquals("foo,bar", aggregator.aggregate(new String[] { "foo", "bar" }), "Era esperado valores iguais, mas  'foo,bar' é diferente de " + result1640 + " <aggregator.aggregate(new String[] { 'foo', 'bar' })>")
chamada antiga: assertEquals("foo,,bar", aggregator.aggregate(new String[] { "foo", null, "bar" }))
nova chamada: assertEquals("foo,,bar", aggregator.aggregate(new String[] { "foo", null, "bar" }), "Era esperado valores iguais, mas  'foo,,bar' é diferente de " + result1641 + " <aggregator.aggregate(new String[] { 'foo', null, 'bar' })>")
chamada antiga: assertEquals("foo", amqpItemReader.read())
nova chamada: assertEquals("foo", amqpItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1642 + " <amqpItemReader.read()>")
chamada antiga: assertEquals("foo", amqpItemReader.read())
nova chamada: assertEquals("foo", amqpItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1643 + " <amqpItemReader.read()>")
chamada antiga: assertEquals(message, amqpItemReader.read())
nova chamada: assertEquals(message, amqpItemReader.read(), "Era esperado valores iguais, mas  message é diferente de " + result1644 + " <amqpItemReader.read()>")
chamada antiga: assertTrue(exception.getMessage().contains("wrong type"))
nova chamada: assertTrue(exception.getMessage().contains("wrong type"), "Era esperado verdadeiro, mas " + result1645 + " <exception.getMessage().contains('wrong type')> é falso")
chamada antiga: assertEquals("foo", amqpItemReader.read())
nova chamada: assertEquals("foo", amqpItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1646 + " <amqpItemReader.read()>")
chamada antiga: assertEquals("foo", amqpItemReader.read())
nova chamada: assertEquals("foo", amqpItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result1647 + " <amqpItemReader.read()>")
chamada antiga: assertEquals(message, amqpItemReader.read())
nova chamada: assertEquals(message, amqpItemReader.read(), "Era esperado valores iguais, mas  message é diferente de " + result1648 + " <amqpItemReader.read()>")
chamada antiga: assertEquals("amqpTemplate is required.", exception.getMessage())
nova chamada: assertEquals("amqpTemplate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'amqpTemplate is required.' é diferente de " + result1649 + " <exception.getMessage()>")
chamada antiga: assertEquals("amqpTemplate is required.", exception.getMessage())
nova chamada: assertEquals("amqpTemplate is required.", exception.getMessage(), "Era esperado valores iguais, mas  'amqpTemplate is required.' é diferente de " + result1650 + " <exception.getMessage()>")
chamada antiga: assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
nova chamada: assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"), "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + result1651 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'T_FOOS')>")
chamada antiga: assertEquals(ITEM_COUNT, count)
nova chamada: assertEquals(ITEM_COUNT, count, "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + " count")
chamada antiga: assertEquals(ITEM_COUNT, results.size())
nova chamada: assertEquals(ITEM_COUNT, results.size(), "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + result1652 + " <results.size()>")
chamada antiga: assertEquals(neededAutoCommit, autoCommitCaptor.getValue())
nova chamada: assertEquals(neededAutoCommit, autoCommitCaptor.getValue(), "Era esperado valores iguais, mas  neededAutoCommit é diferente de " + result1653 + " <autoCommitCaptor.getValue()>")
chamada antiga: assertEquals(initialAutoCommit, autoCommitCaptor.getValue())
nova chamada: assertEquals(initialAutoCommit, autoCommitCaptor.getValue(), "Era esperado valores iguais, mas  initialAutoCommit é diferente de " + result1654 + " <autoCommitCaptor.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1655 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1656 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1657 + " <foo3.getValue()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1658 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1659 + " <foo5.getValue()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1660 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1661 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1662 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, fooAfterRestart.getValue())
nova chamada: assertEquals(3, fooAfterRestart.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1663 + " <fooAfterRestart.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1664 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1665 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1666 + " <foo3.getValue()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1667 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1668 + " <foo5.getValue()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1669 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1670 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1671 + " <foo2.getValue()>")
chamada antiga: assertEquals(1, foo.getValue())
nova chamada: assertEquals(1, foo.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1672 + " <foo.getValue()>")
chamada antiga: assertEquals(1, foo.getValue())
nova chamada: assertEquals(1, foo.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1673 + " <foo.getValue()>")
chamada antiga: assertNotEquals(foo2, foo1)
nova chamada: assertNotEquals(foo2, foo1, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo1")
chamada antiga: assertNotEquals(foo2, foo3)
nova chamada: assertNotEquals(foo2, foo3, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo3")
chamada antiga: assertEquals(foo2, reader.read())
nova chamada: assertEquals(foo2, reader.read(), "Era esperado valores iguais, mas  foo2 é diferente de " + result1674 + " <reader.read()>")
chamada antiga: assertEquals(foo3, reader.read())
nova chamada: assertEquals(foo3, reader.read(), "Era esperado valores iguais, mas  foo3 é diferente de " + result1675 + " <reader.read()>")
chamada antiga: assertNotEquals(foo2, foo1)
nova chamada: assertNotEquals(foo2, foo1, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo1")
chamada antiga: assertNotEquals(foo2, foo3)
nova chamada: assertNotEquals(foo2, foo3, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo3")
chamada antiga: assertEquals(foo1, reader.read())
nova chamada: assertEquals(foo1, reader.read(), "Era esperado valores iguais, mas  foo1 é diferente de " + result1676 + " <reader.read()>")
chamada antiga: assertEquals(foo2, reader.read())
nova chamada: assertEquals(foo2, reader.read(), "Era esperado valores iguais, mas  foo2 é diferente de " + result1677 + " <reader.read()>")
chamada antiga: assertNotEquals(foo2, foo1)
nova chamada: assertNotEquals(foo2, foo1, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo1")
chamada antiga: assertNotEquals(foo2, foo3)
nova chamada: assertNotEquals(foo2, foo3, "Era esperado valores diferentes, mas  foo2 é igual a " + " foo3")
chamada antiga: assertEquals(foo2, reader.read())
nova chamada: assertEquals(foo2, reader.read(), "Era esperado valores iguais, mas  foo2 é diferente de " + result1678 + " <reader.read()>")
chamada antiga: assertEquals(foo3, reader.read())
nova chamada: assertEquals(foo3, reader.read(), "Era esperado valores iguais, mas  foo3 é diferente de " + result1679 + " <reader.read()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1680 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1681 + " <foo5.getValue()>")
chamada antiga: assertEquals(actualFoos, expectedFoos)
nova chamada: assertEquals(actualFoos, expectedFoos, "Era esperado valores iguais, mas  actualFoos é diferente de " + " expectedFoos")
chamada antiga: assertEquals(actualFoos, expectedFoos)
nova chamada: assertEquals(actualFoos, expectedFoos, "Era esperado valores iguais, mas  actualFoos é diferente de " + " expectedFoos")
chamada antiga: assertEquals(7, count)
nova chamada: assertEquals(7, count, "Era esperado valores iguais, mas  7 é diferente de " + " count")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1682 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1683 + " <foo3.getValue()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1684 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1685 + " <foo5.getValue()>")
chamada antiga: assertNull(o)
nova chamada: assertNull(o, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1686 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1687 + " <foo5.getValue()>")
chamada antiga: assertNull(o)
nova chamada: assertNull(o, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1688 + " <foo5.getValue()>")
chamada antiga: assertNull(o)
nova chamada: assertNull(o, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"))
nova chamada: assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"), "Era esperado valores iguais, mas  2 é diferente de " + result1689 + " <JdbcTestUtils.countRowsInTable(this.jdbcTemplate, 'person')>")
chamada antiga: assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"))
nova chamada: assertEquals(2, JdbcTestUtils.countRowsInTable(this.jdbcTemplate, "person"), "Era esperado valores iguais, mas  2 é diferente de " + result1690 + " <JdbcTestUtils.countRowsInTable(this.jdbcTemplate, 'person')>")
chamada antiga: assertEquals("ERROR", exception.getMessage())
nova chamada: assertEquals("ERROR", exception.getMessage(), "Era esperado valores iguais, mas  'ERROR' é diferente de " + result1691 + " <exception.getMessage()>")
chamada antiga: assertEquals("ERROR", exception.getMessage())
nova chamada: assertEquals("ERROR", exception.getMessage(), "Era esperado valores iguais, mas  'ERROR' é diferente de " + result1692 + " <exception.getMessage()>")
chamada antiga: assertFalse(tested.isWrapperFor(Unsupported.class))
nova chamada: assertFalse(tested.isWrapperFor(Unsupported.class), "Era esperado falso, mas " + result1693 + " <tested.isWrapperFor(Unsupported.class)> é verdadeiro ")
chamada antiga: assertEquals("Unsupported class " + Unsupported.class.getSimpleName(), expected.getMessage())
nova chamada: assertEquals("Unsupported class " + Unsupported.class.getSimpleName(), expected.getMessage(), "Era esperado valores iguais, mas  'Unsupported class ' + Unsupported.class.getSimpleName() é diferente de " + result1694 + " <expected.getMessage()>")
chamada antiga: assertTrue(tested.isWrapperFor(Supported.class))
nova chamada: assertTrue(tested.isWrapperFor(Supported.class), "Era esperado verdadeiro, mas " + result1695 + " <tested.isWrapperFor(Supported.class)> é falso")
chamada antiga: assertEquals(ds, tested.unwrap(Supported.class))
nova chamada: assertEquals(ds, tested.unwrap(Supported.class), "Era esperado valores iguais, mas  ds é diferente de " + result1696 + " <tested.unwrap(Supported.class)>")
chamada antiga: assertTrue(tested.isWrapperFor(DataSource.class))
nova chamada: assertTrue(tested.isWrapperFor(DataSource.class), "Era esperado verdadeiro, mas " + result1697 + " <tested.isWrapperFor(DataSource.class)> é falso")
chamada antiga: assertEquals(tested, tested.unwrap(DataSource.class))
nova chamada: assertEquals(tested, tested.unwrap(DataSource.class), "Era esperado valores iguais, mas  tested é diferente de " + result1698 + " <tested.unwrap(DataSource.class)>")
chamada antiga: assertTrue(tested.isWrapperFor(SmartDataSource.class))
nova chamada: assertTrue(tested.isWrapperFor(SmartDataSource.class), "Era esperado verdadeiro, mas " + result1699 + " <tested.isWrapperFor(SmartDataSource.class)> é falso")
chamada antiga: assertEquals(tested, tested.unwrap(SmartDataSource.class))
nova chamada: assertEquals(tested, tested.unwrap(SmartDataSource.class), "Era esperado valores iguais, mas  tested é diferente de " + result1700 + " <tested.unwrap(SmartDataSource.class)>")
chamada antiga: assertEquals("ERROR", exception.getMessage())
nova chamada: assertEquals("ERROR", exception.getMessage(), "Era esperado valores iguais, mas  'ERROR' é diferente de " + result1701 + " <exception.getMessage()>")
chamada antiga: assertNotNull(jdbcPagingItemReader)
nova chamada: assertNotNull(jdbcPagingItemReader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1000, jdbcTemplate.getMaxRows())
nova chamada: assertEquals(1000, jdbcTemplate.getMaxRows(), "Era esperado valores iguais, mas  1000 é diferente de " + result1702 + " <jdbcTemplate.getMaxRows()>")
chamada antiga: assertEquals(100, jdbcTemplate.getFetchSize())
nova chamada: assertEquals(100, jdbcTemplate.getFetchSize(), "Era esperado valores iguais, mas  100 é diferente de " + result1703 + " <jdbcTemplate.getFetchSize()>")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("db2"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("db2"), "Era esperado verdadeiro, mas " + result1704 + " <factory.isSupportedIncrementerType('db2')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("db2zos"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("db2zos"), "Era esperado verdadeiro, mas " + result1705 + " <factory.isSupportedIncrementerType('db2zos')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("mysql"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("mysql"), "Era esperado verdadeiro, mas " + result1706 + " <factory.isSupportedIncrementerType('mysql')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("derby"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("derby"), "Era esperado verdadeiro, mas " + result1707 + " <factory.isSupportedIncrementerType('derby')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("oracle"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("oracle"), "Era esperado verdadeiro, mas " + result1708 + " <factory.isSupportedIncrementerType('oracle')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("postgres"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("postgres"), "Era esperado verdadeiro, mas " + result1709 + " <factory.isSupportedIncrementerType('postgres')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("hsql"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("hsql"), "Era esperado verdadeiro, mas " + result1710 + " <factory.isSupportedIncrementerType('hsql')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("sqlserver"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("sqlserver"), "Era esperado verdadeiro, mas " + result1711 + " <factory.isSupportedIncrementerType('sqlserver')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("sybase"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("sybase"), "Era esperado verdadeiro, mas " + result1712 + " <factory.isSupportedIncrementerType('sybase')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("sqlite"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("sqlite"), "Era esperado verdadeiro, mas " + result1713 + " <factory.isSupportedIncrementerType('sqlite')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("hana"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("hana"), "Era esperado verdadeiro, mas " + result1714 + " <factory.isSupportedIncrementerType('hana')> é falso")
chamada antiga: assertTrue(factory.isSupportedIncrementerType("mariadb"))
nova chamada: assertTrue(factory.isSupportedIncrementerType("mariadb"), "Era esperado verdadeiro, mas " + result1715 + " <factory.isSupportedIncrementerType('mariadb')> é falso")
chamada antiga: assertFalse(factory.isSupportedIncrementerType("invalidtype"))
nova chamada: assertFalse(factory.isSupportedIncrementerType("invalidtype"), "Era esperado falso, mas " + result1716 + " <factory.isSupportedIncrementerType('invalidtype')> é verdadeiro ")
chamada antiga: assertTrue(factory.getIncrementer("db2", "NAME") instanceof Db2LuwMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("db2", "NAME") instanceof Db2LuwMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("db2zos", "NAME") instanceof Db2MainframeMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("db2zos", "NAME") instanceof Db2MainframeMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("mysql", "NAME") instanceof MySQLMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("mysql", "NAME") instanceof MySQLMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("mariadb", "NAME") instanceof MariaDBSequenceMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("mariadb", "NAME") instanceof MariaDBSequenceMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("oracle", "NAME") instanceof OracleSequenceMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("oracle", "NAME") instanceof OracleSequenceMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("derby", "NAME") instanceof DerbyMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("derby", "NAME") instanceof DerbyMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("hsql", "NAME") instanceof HsqlMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("hsql", "NAME") instanceof HsqlMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("postgres", "NAME") instanceof PostgresSequenceMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("postgres", "NAME") instanceof PostgresSequenceMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("sqlserver", "NAME") instanceof SqlServerSequenceMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("sqlserver", "NAME") instanceof SqlServerSequenceMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("sybase", "NAME") instanceof SybaseMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("sybase", "NAME") instanceof SybaseMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("sqlite", "NAME") instanceof SqliteMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("sqlite", "NAME") instanceof SqliteMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(factory.getIncrementer("hana", "NAME") instanceof HanaSequenceMaxValueIncrementer)
nova chamada: assertTrue(factory.getIncrementer("hana", "NAME") instanceof HanaSequenceMaxValueIncrementer, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5' é diferente de " + " firstPage")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id  ?)) ORDER BY owner.id ASC LIMIT 5' é diferente de " + " remainingPagesQuery")
chamada antiga: assertEquals("SELECT FOO FROM BAR ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"))
nova chamada: assertEquals("SELECT FOO FROM BAR ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"), "Era esperado valores iguais, mas  'SELECT FOO FROM BAR ORDER BY ID ASC LIMIT 100' é diferente de " + result1717 + " <SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, 'LIMIT 100')>")
chamada antiga: assertEquals("SELECT FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"))
nova chamada: assertEquals("SELECT FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"), "Era esperado valores iguais, mas  'SELECT FOO FROM BAR WHERE ((ID  ?)) ORDER BY ID ASC LIMIT 100' é diferente de " + result1718 + " <SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, 'LIMIT 100')>")
chamada antiga: assertEquals("SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"))
nova chamada: assertEquals("SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, "LIMIT 100"), "Era esperado valores iguais, mas  'SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC LIMIT 100' é diferente de " + result1719 + " <SqlPagingQueryUtils.generateLimitSqlQuery(qp, false, 'LIMIT 100')>")
chamada antiga: assertEquals("SELECT FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"))
nova chamada: assertEquals("SELECT FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC LIMIT 100", SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, "LIMIT 100"), "Era esperado valores iguais, mas  'SELECT FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID  ?)) ORDER BY ID ASC LIMIT 100' é diferente de " + result1720 + " <SqlPagingQueryUtils.generateLimitSqlQuery(qp, true, 'LIMIT 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR ORDER BY ID ASC' é diferente de " + result1721 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, false, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE ((ID  ?)) ORDER BY ID ASC' é diferente de " + result1722 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, true, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC' é diferente de " + result1723 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, false, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID > ?)) ORDER BY ID ASC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID  ?)) ORDER BY ID ASC' é diferente de " + result1724 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, true, 'TOP 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER = 100' é diferente de " + result1725 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID ASC) WHERE ROWNUMBER = 100 AND ((ID  ?))' é diferente de " + result1726 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER = 100' é diferente de " + result1727 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER <= 100 AND ((ID > ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID ASC) WHERE ROWNUMBER = 100 AND ((ID  ?))' é diferente de " + result1728 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR ORDER BY ID DESC' é diferente de " + result1729 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, false, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE ((ID  ?)) ORDER BY ID DESC' é diferente de " + result1730 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, true, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, false, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC' é diferente de " + result1731 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, false, 'TOP 100')>")
chamada antiga: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"))
nova chamada: assertEquals("SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID < ?)) ORDER BY ID DESC", SqlPagingQueryUtils.generateTopSqlQuery(qp, true, "TOP 100"), "Era esperado valores iguais, mas  'SELECT TOP 100 FOO FROM BAR WHERE (BAZ IS NOT NULL) AND ((ID  ?)) ORDER BY ID DESC' é diferente de " + result1732 + " <SqlPagingQueryUtils.generateTopSqlQuery(qp, true, 'TOP 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER = 100' é diferente de " + result1733 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR ORDER BY ID DESC) WHERE ROWNUMBER = 100 AND ((ID  ?))' é diferente de " + result1734 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER = 100' é diferente de " + result1735 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, false, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"))
nova chamada: assertEquals("SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER <= 100 AND ((ID < ?))", SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, "ROWNUMBER <= 100"), "Era esperado valores iguais, mas  'SELECT * FROM (SELECT FOO FROM BAR WHERE BAZ IS NOT NULL ORDER BY ID DESC) WHERE ROWNUMBER = 100 AND ((ID  ?))' é diferente de " + result1736 + " <SqlPagingQueryUtils.generateRowNumSqlQuery(qp, true, 'ROWNUMBER <= 100')>")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5' é diferente de " + " firstPage")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id  ?)) ORDER BY owner.id ASC LIMIT 5' é diferente de " + " remainingPagesQuery")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql2, s2)
nova chamada: assertEquals(sql2, s2, "Era esperado valores iguais, mas  sql2 é diferente de " + " s2")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(actualFoos, expectedFoos)
nova chamada: assertEquals(actualFoos, expectedFoos, "Era esperado valores iguais, mas  actualFoos é diferente de " + " expectedFoos")
chamada antiga: assertNotNull(provider)
nova chamada: assertNotNull(provider, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(PagingQueryProvider.class, factory.getObjectType())
nova chamada: assertEquals(PagingQueryProvider.class, factory.getObjectType(), "Era esperado valores iguais, mas  PagingQueryProvider.class é diferente de " + result1737 + " <factory.getObjectType()>")
chamada antiga: assertTrue(factory.isSingleton())
nova chamada: assertTrue(factory.isSingleton(), "Era esperado verdadeiro, mas " + result1738 + " <factory.isSingleton()> é falso")
chamada antiga: assertNotNull(hibernateQueryProvider.createQuery())
nova chamada: assertNotNull(hibernateQueryProvider.createQuery(), "Era esperado não nulo, mas " + result1739 + " <hibernateQueryProvider.createQuery()> é nulo")
chamada antiga: assertNotNull(hibernateQueryProvider.createQuery())
nova chamada: assertNotNull(hibernateQueryProvider.createQuery(), "Era esperado não nulo, mas " + result1740 + " <hibernateQueryProvider.createQuery()> é nulo")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(getFirstPageSqlWithMultipleSortKeys(), s)
nova chamada: assertEquals(getFirstPageSqlWithMultipleSortKeys(), s, "Era esperado valores iguais, mas " + result1741 + " <getFirstPageSqlWithMultipleSortKeys()> é diferente de " + " s")
chamada antiga: assertEquals(getRemainingSqlWithMultipleSortKeys(), s)
nova chamada: assertEquals(getRemainingSqlWithMultipleSortKeys(), s, "Era esperado valores iguais, mas " + result1742 + " <getRemainingSqlWithMultipleSortKeys()> é diferente de " + " s")
chamada antiga: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
nova chamada: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause(), "Era esperado valores iguais, mas  'id, 'yes', false' é diferente de " + result1743 + " <pagingQueryProvider.getSelectClause()>")
chamada antiga: assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
nova chamada: assertEquals("test.verification_table", pagingQueryProvider.getFromClause(), "Era esperado valores iguais, mas  'test.verification_table' é diferente de " + result1744 + " <pagingQueryProvider.getFromClause()>")
chamada antiga: assertEquals("TRUE", pagingQueryProvider.getWhereClause())
nova chamada: assertEquals("TRUE", pagingQueryProvider.getWhereClause(), "Era esperado valores iguais, mas  'TRUE' é diferente de " + result1745 + " <pagingQueryProvider.getWhereClause()>")
chamada antiga: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
nova chamada: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause(), "Era esperado valores iguais, mas  'id, 'yes', false' é diferente de " + result1746 + " <pagingQueryProvider.getSelectClause()>")
chamada antiga: assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
nova chamada: assertEquals("test.verification_table", pagingQueryProvider.getFromClause(), "Era esperado valores iguais, mas  'test.verification_table' é diferente de " + result1747 + " <pagingQueryProvider.getFromClause()>")
chamada antiga: assertEquals("TRUE", pagingQueryProvider.getWhereClause())
nova chamada: assertEquals("TRUE", pagingQueryProvider.getWhereClause(), "Era esperado valores iguais, mas  'TRUE' é diferente de " + result1748 + " <pagingQueryProvider.getWhereClause()>")
chamada antiga: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause())
nova chamada: assertEquals("id, 'yes', false", pagingQueryProvider.getSelectClause(), "Era esperado valores iguais, mas  'id, 'yes', false' é diferente de " + result1749 + " <pagingQueryProvider.getSelectClause()>")
chamada antiga: assertEquals("test.verification_table", pagingQueryProvider.getFromClause())
nova chamada: assertEquals("test.verification_table", pagingQueryProvider.getFromClause(), "Era esperado valores iguais, mas  'test.verification_table' é diferente de " + result1750 + " <pagingQueryProvider.getFromClause()>")
chamada antiga: assertEquals("TRUE", pagingQueryProvider.getWhereClause())
nova chamada: assertEquals("TRUE", pagingQueryProvider.getWhereClause(), "Era esperado valores iguais, mas  'TRUE' é diferente de " + result1751 + " <pagingQueryProvider.getWhereClause()>")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5", firstPage, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id ORDER BY owner.id ASC LIMIT 5' é diferente de " + " firstPage")
chamada antiga: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery)
nova chamada: assertEquals("SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id > ?)) ORDER BY owner.id ASC LIMIT 5", remainingPagesQuery, "Era esperado valores iguais, mas  'SELECT owner.id as ownerid, first_name, last_name, dog_name FROM dog_owner owner INNER JOIN dog ON owner.id = dog.id WHERE ((owner.id  ?)) ORDER BY owner.id ASC LIMIT 5' é diferente de " + " remainingPagesQuery")
chamada antiga: assertEquals(1, mvi.getNextKey())
nova chamada: assertEquals(1, mvi.getNextKey(), "Era esperado valores iguais, mas  1 é diferente de " + result1752 + " <mvi.getNextKey()>")
chamada antiga: assertEquals(2, mvi.getNextKey())
nova chamada: assertEquals(2, mvi.getNextKey(), "Era esperado valores iguais, mas  2 é diferente de " + result1753 + " <mvi.getNextKey()>")
chamada antiga: assertEquals(3, mvi.getNextKey())
nova chamada: assertEquals(3, mvi.getNextKey(), "Era esperado valores iguais, mas  3 é diferente de " + result1754 + " <mvi.getNextKey()>")
chamada antiga: assertEquals(1, JdbcTestUtils.countRowsInTable(template, "max_value"))
nova chamada: assertEquals(1, JdbcTestUtils.countRowsInTable(template, "max_value"), "Era esperado valores iguais, mas  1 é diferente de " + result1755 + " <JdbcTestUtils.countRowsInTable(template, 'max_value')>")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(sql, s)
nova chamada: assertEquals(sql, s, "Era esperado valores iguais, mas  sql é diferente de " + " s")
chamada antiga: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders(null, null))
nova chamada: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders(null, null), "Era esperado valores iguais, mas  0 é diferente de " + result1756 + " <JdbcParameterUtils.countParameterPlaceholders(null, null)>")
chamada antiga: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("", null))
nova chamada: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("", null), "Era esperado valores iguais, mas  0 é diferente de " + result1757 + " <JdbcParameterUtils.countParameterPlaceholders('', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("?", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("?", null), "Era esperado valores iguais, mas  1 é diferente de " + result1758 + " <JdbcParameterUtils.countParameterPlaceholders('?', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" ? 'bad wolf'", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" ? 'bad wolf'", null), "Era esperado valores iguais, mas  1 é diferente de " + result1759 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big\' ? 'bad wolf'', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big ?? bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big ?? bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1760 + " <JdbcParameterUtils.countParameterPlaceholders('The big ?? bad wolf', null)>")
chamada antiga: assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("The big ? ? bad ? wolf", null))
nova chamada: assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("The big ? ? bad ? wolf", null), "Era esperado valores iguais, mas  3 é diferente de " + result1761 + " <JdbcParameterUtils.countParameterPlaceholders('The big ? ? bad ? wolf', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big?\" 'ba''ad?' ? wolf", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big?\" 'ba''ad?' ? wolf", null), "Era esperado valores iguais, mas  1 é diferente de " + result1762 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big?\' 'ba''ad?' ? wolf', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders(":parameter", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders(":parameter", null), "Era esperado valores iguais, mas  1 é diferente de " + result1763 + " <JdbcParameterUtils.countParameterPlaceholders(':parameter', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" :parameter 'bad wolf'", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" :parameter 'bad wolf'", null), "Era esperado valores iguais, mas  1 é diferente de " + result1764 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big\' :parameter 'bad wolf'', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :parameter bad wolf", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :parameter bad wolf", null), "Era esperado valores iguais, mas  1 é diferente de " + result1765 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter :parameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :newpar :parameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter :newpar :parameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1766 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter :newpar :parameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :newpar, :parameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :newpar, :parameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1767 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter, :newpar, :parameter bad wolf', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big:\" 'ba''ad:p' :parameter wolf", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big:\" 'ba''ad:p' :parameter wolf", null), "Era esperado valores iguais, mas  1 é diferente de " + result1768 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big:\' 'ba''ad:p' :parameter wolf', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("&parameter", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("&parameter", null), "Era esperado valores iguais, mas  1 é diferente de " + result1769 + " <JdbcParameterUtils.countParameterPlaceholders('&parameter', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" &parameter 'bad wolf'", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big\" &parameter 'bad wolf'", null), "Era esperado valores iguais, mas  1 é diferente de " + result1770 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big\' &parameter 'bad wolf'', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &parameter bad wolf", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &parameter bad wolf", null), "Era esperado valores iguais, mas  1 é diferente de " + result1771 + " <JdbcParameterUtils.countParameterPlaceholders('The big &parameter &parameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &newparameter &parameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter &newparameter &parameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1772 + " <JdbcParameterUtils.countParameterPlaceholders('The big &parameter &newparameter &parameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter, &newparameter, &parameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big &parameter, &newparameter, &parameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1773 + " <JdbcParameterUtils.countParameterPlaceholders('The big &parameter, &newparameter, &parameter bad wolf', null)>")
chamada antiga: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big &x  \" 'ba''ad&p' &parameter wolf", null))
nova chamada: assertEquals(1, JdbcParameterUtils.countParameterPlaceholders("The \"big &x  \" 'ba''ad&p' &parameter wolf", null), "Era esperado valores iguais, mas  1 é diferente de " + result1774 + " <JdbcParameterUtils.countParameterPlaceholders('The \'big &x  \' 'ba''ad&p' &parameter wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &newparameter, &parameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &newparameter, &parameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1775 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter, &newparameter, &parameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &sameparameter, &sameparameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, &sameparameter, &sameparameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1776 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter, &sameparameter, &sameparameter bad wolf', null)>")
chamada antiga: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :sameparameter, :sameparameter bad wolf", null))
nova chamada: assertEquals(2, JdbcParameterUtils.countParameterPlaceholders("The big :parameter, :sameparameter, :sameparameter bad wolf", null), "Era esperado valores iguais, mas  2 é diferente de " + result1777 + " <JdbcParameterUtils.countParameterPlaceholders('The big :parameter, :sameparameter, :sameparameter bad wolf', null)>")
chamada antiga: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("xxx & yyy", null))
nova chamada: assertEquals(0, JdbcParameterUtils.countParameterPlaceholders("xxx & yyy", null), "Era esperado valores iguais, mas  0 é diferente de " + result1778 + " <JdbcParameterUtils.countParameterPlaceholders('xxx & yyy', null)>")
chamada antiga: assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("select :par1, :par2 :par3", l))
nova chamada: assertEquals(3, JdbcParameterUtils.countParameterPlaceholders("select :par1, :par2 :par3", l), "Era esperado valores iguais, mas  3 é diferente de " + result1779 + " <JdbcParameterUtils.countParameterPlaceholders('select :par1, :par2 :par3', l)>")
chamada antiga: assertEquals(3, l.size())
nova chamada: assertEquals(3, l.size(), "Era esperado valores iguais, mas  3 é diferente de " + result1780 + " <l.size()>")
chamada antiga: assertEquals(1, foo1[0])
nova chamada: assertEquals(1, foo1[0], "Era esperado valores iguais, mas  1 é diferente de " + " foo1[0]")
chamada antiga: assertEquals(1, foo1)
nova chamada: assertEquals(1, foo1, "Era esperado valores iguais, mas  1 é diferente de " + " foo1")
chamada antiga: assertEquals(itemCount, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
nova chamada: assertEquals(itemCount, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"), "Era esperado valores iguais, mas  itemCount é diferente de " + result1781 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'T_FOOS')>")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(item)
nova chamada: assertNull(item, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1782 + " <list.size()>")
chamada antiga: assertTrue(list.contains("SQL"))
nova chamada: assertTrue(list.contains("SQL"), "Era esperado verdadeiro, mas " + result1783 + " <list.contains('SQL')> é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1784 + " <list.size()>")
chamada antiga: assertTrue(list.contains("SQL"))
nova chamada: assertTrue(list.contains("SQL"), "Era esperado verdadeiro, mas " + result1785 + " <list.contains('SQL')> é falso")
chamada antiga: assertEquals("bar", exception.getMessage())
nova chamada: assertEquals("bar", exception.getMessage(), "Era esperado valores iguais, mas  'bar' é diferente de " + result1786 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1787 + " <list.size()>")
chamada antiga: assertEquals(4, list.size())
nova chamada: assertEquals(4, list.size(), "Era esperado valores iguais, mas  4 é diferente de " + result1788 + " <list.size()>")
chamada antiga: assertTrue(list.contains("SQL"))
nova chamada: assertTrue(list.contains("SQL"), "Era esperado verdadeiro, mas " + result1789 + " <list.contains('SQL')> é falso")
chamada antiga: assertTrue(list.contains("foo"))
nova chamada: assertTrue(list.contains("foo"), "Era esperado verdadeiro, mas " + result1790 + " <list.contains('foo')> é falso")
chamada antiga: assertNotNull(ReflectionTestUtils.getField(helper, "statelessSession"))
nova chamada: assertNotNull(ReflectionTestUtils.getField(helper, "statelessSession"), "Era esperado não nulo, mas " + result1791 + " <ReflectionTestUtils.getField(helper, 'statelessSession')> é nulo")
chamada antiga: assertNull(ReflectionTestUtils.getField(helper, "statelessSession"))
nova chamada: assertNull(ReflectionTestUtils.getField(helper, "statelessSession"), "Era esperado nulo, mas " + result1792 + " <ReflectionTestUtils.getField(helper, 'statelessSession')> não é nulo")
chamada antiga: assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
nova chamada: assertEquals(ITEM_COUNT, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"), "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + result1793 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'T_FOOS')>")
chamada antiga: assertEquals(ITEM_COUNT, count)
nova chamada: assertEquals(ITEM_COUNT, count, "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + " count")
chamada antiga: assertEquals(ITEM_COUNT, results.size())
nova chamada: assertEquals(ITEM_COUNT, results.size(), "Era esperado valores iguais, mas  ITEM_COUNT é diferente de " + result1794 + " <results.size()>")
chamada antiga: assertNotNull(author)
nova chamada: assertNotNull(author, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(author)
nova chamada: assertNotNull(author, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(author)
nova chamada: assertNotNull(author, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(author)
nova chamada: assertNotNull(author, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(author)
nova chamada: assertNotNull(author, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, captor.getValue().length)
nova chamada: assertEquals(1, captor.getValue().length, "Era esperado valores iguais, mas  1 é diferente de " + " captor.getValue().length")
chamada antiga: assertEquals("bar", results.get("foo"))
nova chamada: assertEquals("bar", results.get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result1795 + " <results.get('foo')>")
chamada antiga: assertEquals(1, captor.getValue().length)
nova chamada: assertEquals(1, captor.getValue().length, "Era esperado valores iguais, mas  1 é diferente de " + " captor.getValue().length")
chamada antiga: assertEquals("bar", results.getValue("foo"))
nova chamada: assertEquals("bar", results.getValue("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result1796 + " <results.getValue('foo')>")
chamada antiga: assertEquals("ERROR", exception.getMessage())
nova chamada: assertEquals("ERROR", exception.getMessage(), "Era esperado valores iguais, mas  'ERROR' é diferente de " + result1797 + " <exception.getMessage()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1798 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1799 + " <item1.getId()>")
chamada antiga: assertEquals("bar3", item1.getName())
nova chamada: assertEquals("bar3", item1.getName(), "Era esperado valores iguais, mas  'bar3' é diferente de " + result1800 + " <item1.getName()>")
chamada antiga: assertEquals(3, item1.getValue())
nova chamada: assertEquals(3, item1.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1801 + " <item1.getValue()>")
chamada antiga: assertEquals(4, item2.getId())
nova chamada: assertEquals(4, item2.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1802 + " <item2.getId()>")
chamada antiga: assertEquals("bar4", item2.getName())
nova chamada: assertEquals("bar4", item2.getName(), "Era esperado valores iguais, mas  'bar4' é diferente de " + result1803 + " <item2.getName()>")
chamada antiga: assertEquals(4, item2.getValue())
nova chamada: assertEquals(4, item2.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1804 + " <item2.getValue()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1805 + " <executionContext.size()>")
chamada antiga: assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"))
nova chamada: assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"), "Era esperado valores iguais, mas  5 é diferente de " + result1806 + " <ReflectionTestUtils.getField(reader, 'pageSize')>")
chamada antiga: assertEquals(false, ReflectionTestUtils.getField(helper, "useStatelessSession"))
nova chamada: assertEquals(false, ReflectionTestUtils.getField(helper, "useStatelessSession"), "Era esperado valores iguais, mas  false é diferente de " + result1807 + " <ReflectionTestUtils.getField(helper, 'useStatelessSession')>")
chamada antiga: assertEquals(3, i)
nova chamada: assertEquals(3, i, "Era esperado valores iguais, mas  3 é diferente de " + " i")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1808 + " <executionContext.size()>")
chamada antiga: assertEquals(5, i)
nova chamada: assertEquals(5, i, "Era esperado valores iguais, mas  5 é diferente de " + " i")
chamada antiga: assertEquals("fetchSize must not be negative", exception.getMessage())
nova chamada: assertEquals("fetchSize must not be negative", exception.getMessage(), "Era esperado valores iguais, mas  'fetchSize must not be negative' é diferente de " + result1809 + " <exception.getMessage()>")
chamada antiga: assertEquals("A SessionFactory must be provided", exception.getMessage())
nova chamada: assertEquals("A SessionFactory must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'A SessionFactory must be provided' é diferente de " + result1810 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true' é diferente de " + result1811 + " <exception.getMessage()>")
chamada antiga: assertEquals("queryString or queryName must be set", exception.getMessage())
nova chamada: assertEquals("queryString or queryName must be set", exception.getMessage(), "Era esperado valores iguais, mas  'queryString or queryName must be set' é diferente de " + result1812 + " <exception.getMessage()>")
chamada antiga: assertEquals("SessionFactory must be provided", exception.getMessage())
nova chamada: assertEquals("SessionFactory must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'SessionFactory must be provided' é diferente de " + result1813 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, item1.getId())
nova chamada: assertEquals(1, item1.getId(), "Era esperado valores iguais, mas  1 é diferente de " + result1814 + " <item1.getId()>")
chamada antiga: assertEquals("bar1", item1.getName())
nova chamada: assertEquals("bar1", item1.getName(), "Era esperado valores iguais, mas  'bar1' é diferente de " + result1815 + " <item1.getName()>")
chamada antiga: assertEquals(1, item1.getValue())
nova chamada: assertEquals(1, item1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1816 + " <item1.getValue()>")
chamada antiga: assertEquals(3, ReflectionTestUtils.getField(reader, "refCursorPosition"))
nova chamada: assertEquals(3, ReflectionTestUtils.getField(reader, "refCursorPosition"), "Era esperado valores iguais, mas  3 é diferente de " + result1817 + " <ReflectionTestUtils.getField(reader, 'refCursorPosition')>")
chamada antiga: assertEquals(preparedStatementSetter, ReflectionTestUtils.getField(reader, "preparedStatementSetter"))
nova chamada: assertEquals(preparedStatementSetter, ReflectionTestUtils.getField(reader, "preparedStatementSetter"), "Era esperado valores iguais, mas  preparedStatementSetter é diferente de " + result1818 + " <ReflectionTestUtils.getField(reader, 'preparedStatementSetter')>")
chamada antiga: assertEquals(parameters, ReflectionTestUtils.getField(reader, "parameters"))
nova chamada: assertEquals(parameters, ReflectionTestUtils.getField(reader, "parameters"), "Era esperado valores iguais, mas  parameters é diferente de " + result1819 + " <ReflectionTestUtils.getField(reader, 'parameters')>")
chamada antiga: assertEquals(5, ReflectionTestUtils.getField(reader, "fetchSize"))
nova chamada: assertEquals(5, ReflectionTestUtils.getField(reader, "fetchSize"), "Era esperado valores iguais, mas  5 é diferente de " + result1820 + " <ReflectionTestUtils.getField(reader, 'fetchSize')>")
chamada antiga: assertEquals(6, ReflectionTestUtils.getField(reader, "currentItemCount"))
nova chamada: assertEquals(6, ReflectionTestUtils.getField(reader, "currentItemCount"), "Era esperado valores iguais, mas  6 é diferente de " + result1821 + " <ReflectionTestUtils.getField(reader, 'currentItemCount')>")
chamada antiga: assertEquals(7, ReflectionTestUtils.getField(reader, "maxItemCount"))
nova chamada: assertEquals(7, ReflectionTestUtils.getField(reader, "maxItemCount"), "Era esperado valores iguais, mas  7 é diferente de " + result1822 + " <ReflectionTestUtils.getField(reader, 'maxItemCount')>")
chamada antiga: assertEquals(8, ReflectionTestUtils.getField(reader, "queryTimeout"))
nova chamada: assertEquals(8, ReflectionTestUtils.getField(reader, "queryTimeout"), "Era esperado valores iguais, mas  8 é diferente de " + result1823 + " <ReflectionTestUtils.getField(reader, 'queryTimeout')>")
chamada antiga: assertEquals(9, ReflectionTestUtils.getField(reader, "maxRows"))
nova chamada: assertEquals(9, ReflectionTestUtils.getField(reader, "maxRows"), "Era esperado valores iguais, mas  9 é diferente de " + result1824 + " <ReflectionTestUtils.getField(reader, 'maxRows')>")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "useSharedExtendedConnection"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "useSharedExtendedConnection"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "function"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "function"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"))
nova chamada: assertTrue((Boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"))
nova chamada: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1825 + " <executionContext.size()>")
chamada antiga: assertEquals("A name is required when saveSate is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveSate is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveSate is set to true' é diferente de " + result1826 + " <exception.getMessage()>")
chamada antiga: assertEquals("The name of the stored procedure must be provided", exception.getMessage())
nova chamada: assertEquals("The name of the stored procedure must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'The name of the stored procedure must be provided' é diferente de " + result1827 + " <exception.getMessage()>")
chamada antiga: assertEquals("A datasource is required", exception.getMessage())
nova chamada: assertEquals("A datasource is required", exception.getMessage(), "Era esperado valores iguais, mas  'A datasource is required' é diferente de " + result1828 + " <exception.getMessage()>")
chamada antiga: assertEquals("A rowmapper is required", exception.getMessage())
nova chamada: assertEquals("A rowmapper is required", exception.getMessage(), "Era esperado valores iguais, mas  'A rowmapper is required' é diferente de " + result1829 + " <exception.getMessage()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1830 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1831 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1832 + " <executionContext.size()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1833 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1834 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1835 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1836 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1837 + " <reader.read()> não é nulo")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1838 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(1, ReflectionTestUtils.getField(reader, "fetchSize"))
nova chamada: assertEquals(1, ReflectionTestUtils.getField(reader, "fetchSize"), "Era esperado valores iguais, mas  1 é diferente de " + result1839 + " <ReflectionTestUtils.getField(reader, 'fetchSize')>")
chamada antiga: assertEquals(2, ReflectionTestUtils.getField(reader, "queryTimeout"))
nova chamada: assertEquals(2, ReflectionTestUtils.getField(reader, "queryTimeout"), "Era esperado valores iguais, mas  2 é diferente de " + result1840 + " <ReflectionTestUtils.getField(reader, 'queryTimeout')>")
chamada antiga: assertTrue((boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"))
nova chamada: assertTrue((boolean) ReflectionTestUtils.getField(reader, "ignoreWarnings"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"))
nova chamada: assertTrue((boolean) ReflectionTestUtils.getField(reader, "driverSupportsAbsolute"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((boolean) ReflectionTestUtils.getField(reader, "connectionAutoCommit"))
nova chamada: assertTrue((boolean) ReflectionTestUtils.getField(reader, "connectionAutoCommit"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue((boolean) ReflectionTestUtils.getField(reader, "verifyCursorPosition"))
nova chamada: assertTrue((boolean) ReflectionTestUtils.getField(reader, "verifyCursorPosition"), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("A name is required when saveState is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true' é diferente de " + result1841 + " <exception.getMessage()>")
chamada antiga: assertEquals("A query is required", exception.getMessage())
nova chamada: assertEquals("A query is required", exception.getMessage(), "Era esperado valores iguais, mas  'A query is required' é diferente de " + result1842 + " <exception.getMessage()>")
chamada antiga: assertEquals("A datasource is required", exception.getMessage())
nova chamada: assertEquals("A datasource is required", exception.getMessage(), "Era esperado valores iguais, mas  'A datasource is required' é diferente de " + result1843 + " <exception.getMessage()>")
chamada antiga: assertEquals("A rowmapper is required", exception.getMessage())
nova chamada: assertEquals("A rowmapper is required", exception.getMessage(), "Era esperado valores iguais, mas  'A rowmapper is required' é diferente de " + result1844 + " <exception.getMessage()>")
chamada antiga: assertEquals(first, item.getFirst())
nova chamada: assertEquals(first, item.getFirst(), "Era esperado valores iguais, mas  first é diferente de " + result1845 + " <item.getFirst()>")
chamada antiga: assertEquals(second, item.getSecond())
nova chamada: assertEquals(second, item.getSecond(), "Era esperado valores iguais, mas  second é diferente de " + result1846 + " <item.getSecond()>")
chamada antiga: assertEquals(third, item.getThird())
nova chamada: assertEquals(third, item.getThird(), "Era esperado valores iguais, mas  third é diferente de " + result1847 + " <item.getThird()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1848 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1849 + " <item1.getId()>")
chamada antiga: assertEquals("bar3", item1.getName())
nova chamada: assertEquals("bar3", item1.getName(), "Era esperado valores iguais, mas  'bar3' é diferente de " + result1850 + " <item1.getName()>")
chamada antiga: assertEquals(3, item1.getValue())
nova chamada: assertEquals(3, item1.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1851 + " <item1.getValue()>")
chamada antiga: assertEquals(4, item2.getId())
nova chamada: assertEquals(4, item2.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1852 + " <item2.getId()>")
chamada antiga: assertEquals("bar4", item2.getName())
nova chamada: assertEquals("bar4", item2.getName(), "Era esperado valores iguais, mas  'bar4' é diferente de " + result1853 + " <item2.getName()>")
chamada antiga: assertEquals(4, item2.getValue())
nova chamada: assertEquals(4, item2.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1854 + " <item2.getValue()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1855 + " <executionContext.size()>")
chamada antiga: assertEquals(3, i)
nova chamada: assertEquals(3, i, "Era esperado valores iguais, mas  3 é diferente de " + " i")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1856 + " <executionContext.size()>")
chamada antiga: assertEquals(5, i)
nova chamada: assertEquals(5, i, "Era esperado valores iguais, mas  5 é diferente de " + " i")
chamada antiga: assertEquals("An EntityManagerFactory is required", exception.getMessage())
nova chamada: assertEquals("An EntityManagerFactory is required", exception.getMessage(), "Era esperado valores iguais, mas  'An EntityManagerFactory is required' é diferente de " + result1857 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true' é diferente de " + result1858 + " <exception.getMessage()>")
chamada antiga: assertEquals("Query string is required when queryProvider is null", exception.getMessage())
nova chamada: assertEquals("Query string is required when queryProvider is null", exception.getMessage(), "Era esperado valores iguais, mas  'Query string is required when queryProvider is null' é diferente de " + result1859 + " <exception.getMessage()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1860 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1861 + " <item1.getId()>")
chamada antiga: assertEquals(10, item1.getFirst())
nova chamada: assertEquals(10, item1.getFirst(), "Era esperado valores iguais, mas  10 é diferente de " + result1862 + " <item1.getFirst()>")
chamada antiga: assertEquals("11", item1.getSecond())
nova chamada: assertEquals("11", item1.getSecond(), "Era esperado valores iguais, mas  '11' é diferente de " + result1863 + " <item1.getSecond()>")
chamada antiga: assertEquals("12", item1.getThird())
nova chamada: assertEquals("12", item1.getThird(), "Era esperado valores iguais, mas  '12' é diferente de " + result1864 + " <item1.getThird()>")
chamada antiga: assertEquals(2, (int) ReflectionTestUtils.getField(reader, "fetchSize"))
nova chamada: assertEquals(2, (int) ReflectionTestUtils.getField(reader, "fetchSize"), "Era esperado valores iguais, mas  2 é diferente de " + " (int) ReflectionTestUtils.getField(reader, 'fetchSize')")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1865 + " <executionContext.size()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1866 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1867 + " <item1.getId()>")
chamada antiga: assertEquals(10, item1.getFirst())
nova chamada: assertEquals(10, item1.getFirst(), "Era esperado valores iguais, mas  10 é diferente de " + result1868 + " <item1.getFirst()>")
chamada antiga: assertEquals("11", item1.getSecond())
nova chamada: assertEquals("11", item1.getSecond(), "Era esperado valores iguais, mas  '11' é diferente de " + result1869 + " <item1.getSecond()>")
chamada antiga: assertEquals("12", item1.getThird())
nova chamada: assertEquals("12", item1.getThird(), "Era esperado valores iguais, mas  '12' é diferente de " + result1870 + " <item1.getThird()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1871 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(4, item1.getId())
nova chamada: assertEquals(4, item1.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1872 + " <item1.getId()>")
chamada antiga: assertEquals(13, item1.getFirst())
nova chamada: assertEquals(13, item1.getFirst(), "Era esperado valores iguais, mas  13 é diferente de " + result1873 + " <item1.getFirst()>")
chamada antiga: assertEquals("14", item1.getSecond())
nova chamada: assertEquals("14", item1.getSecond(), "Era esperado valores iguais, mas  '14' é diferente de " + result1874 + " <item1.getSecond()>")
chamada antiga: assertEquals("15", item1.getThird())
nova chamada: assertEquals("15", item1.getThird(), "Era esperado valores iguais, mas  '15' é diferente de " + result1875 + " <item1.getThird()>")
chamada antiga: assertEquals(3, item2.getId())
nova chamada: assertEquals(3, item2.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1876 + " <item2.getId()>")
chamada antiga: assertEquals(10, item2.getFirst())
nova chamada: assertEquals(10, item2.getFirst(), "Era esperado valores iguais, mas  10 é diferente de " + result1877 + " <item2.getFirst()>")
chamada antiga: assertEquals("11", item2.getSecond())
nova chamada: assertEquals("11", item2.getSecond(), "Era esperado valores iguais, mas  '11' é diferente de " + result1878 + " <item2.getSecond()>")
chamada antiga: assertEquals("12", item2.getThird())
nova chamada: assertEquals("12", item2.getThird(), "Era esperado valores iguais, mas  '12' é diferente de " + result1879 + " <item2.getThird()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1880 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(4, item1.getId())
nova chamada: assertEquals(4, item1.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1881 + " <item1.getId()>")
chamada antiga: assertEquals(13, item1.getFirst())
nova chamada: assertEquals(13, item1.getFirst(), "Era esperado valores iguais, mas  13 é diferente de " + result1882 + " <item1.getFirst()>")
chamada antiga: assertEquals("14", item1.getSecond())
nova chamada: assertEquals("14", item1.getSecond(), "Era esperado valores iguais, mas  '14' é diferente de " + result1883 + " <item1.getSecond()>")
chamada antiga: assertEquals("15", item1.getThird())
nova chamada: assertEquals("15", item1.getThird(), "Era esperado valores iguais, mas  '15' é diferente de " + result1884 + " <item1.getThird()>")
chamada antiga: assertEquals(3, item2.getId())
nova chamada: assertEquals(3, item2.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1885 + " <item2.getId()>")
chamada antiga: assertEquals(10, item2.getFirst())
nova chamada: assertEquals(10, item2.getFirst(), "Era esperado valores iguais, mas  10 é diferente de " + result1886 + " <item2.getFirst()>")
chamada antiga: assertEquals("11", item2.getSecond())
nova chamada: assertEquals("11", item2.getSecond(), "Era esperado valores iguais, mas  '11' é diferente de " + result1887 + " <item2.getSecond()>")
chamada antiga: assertEquals("12", item2.getThird())
nova chamada: assertEquals("12", item2.getThird(), "Era esperado valores iguais, mas  '12' é diferente de " + result1888 + " <item2.getThird()>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1889 + " <executionContext.size()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1890 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(2, item1.getId())
nova chamada: assertEquals(2, item1.getId(), "Era esperado valores iguais, mas  2 é diferente de " + result1891 + " <item1.getId()>")
chamada antiga: assertEquals(7, item1.getFirst())
nova chamada: assertEquals(7, item1.getFirst(), "Era esperado valores iguais, mas  7 é diferente de " + result1892 + " <item1.getFirst()>")
chamada antiga: assertEquals("8", item1.getSecond())
nova chamada: assertEquals("8", item1.getSecond(), "Era esperado valores iguais, mas  '8' é diferente de " + result1893 + " <item1.getSecond()>")
chamada antiga: assertEquals("9", item1.getThird())
nova chamada: assertEquals("9", item1.getThird(), "Era esperado valores iguais, mas  '9' é diferente de " + result1894 + " <item1.getThird()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1895 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1896 + " <item1.getId()>")
chamada antiga: assertEquals(10, item1.getFirst())
nova chamada: assertEquals(10, item1.getFirst(), "Era esperado valores iguais, mas  10 é diferente de " + result1897 + " <item1.getFirst()>")
chamada antiga: assertEquals("11", item1.getSecond())
nova chamada: assertEquals("11", item1.getSecond(), "Era esperado valores iguais, mas  '11' é diferente de " + result1898 + " <item1.getSecond()>")
chamada antiga: assertEquals("12", item1.getThird())
nova chamada: assertEquals("12", item1.getThird(), "Era esperado valores iguais, mas  '12' é diferente de " + result1899 + " <item1.getThird()>")
chamada antiga: assertEquals("dataSource is required", exception.getMessage())
nova chamada: assertEquals("dataSource is required", exception.getMessage(), "Era esperado valores iguais, mas  'dataSource is required' é diferente de " + result1900 + " <exception.getMessage()>")
chamada antiga: assertEquals("pageSize must be greater than zero", exception.getMessage())
nova chamada: assertEquals("pageSize must be greater than zero", exception.getMessage(), "Era esperado valores iguais, mas  'pageSize must be greater than zero' é diferente de " + result1901 + " <exception.getMessage()>")
chamada antiga: assertEquals("dataSource is required", exception.getMessage())
nova chamada: assertEquals("dataSource is required", exception.getMessage(), "Era esperado valores iguais, mas  'dataSource is required' é diferente de " + result1902 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true' é diferente de " + result1903 + " <exception.getMessage()>")
chamada antiga: assertEquals("selectClause is required when not providing a PagingQueryProvider", exception.getMessage())
nova chamada: assertEquals("selectClause is required when not providing a PagingQueryProvider", exception.getMessage(), "Era esperado valores iguais, mas  'selectClause is required when not providing a PagingQueryProvider' é diferente de " + result1904 + " <exception.getMessage()>")
chamada antiga: assertEquals("fromClause is required when not providing a PagingQueryProvider", exception.getMessage())
nova chamada: assertEquals("fromClause is required when not providing a PagingQueryProvider", exception.getMessage(), "Era esperado valores iguais, mas  'fromClause is required when not providing a PagingQueryProvider' é diferente de " + result1905 + " <exception.getMessage()>")
chamada antiga: assertEquals("sortKeys are required when not providing a PagingQueryProvider", exception.getMessage())
nova chamada: assertEquals("sortKeys are required when not providing a PagingQueryProvider", exception.getMessage(), "Era esperado valores iguais, mas  'sortKeys are required when not providing a PagingQueryProvider' é diferente de " + result1906 + " <exception.getMessage()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1907 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1908 + " <item1.getId()>")
chamada antiga: assertEquals("bar3", item1.getName())
nova chamada: assertEquals("bar3", item1.getName(), "Era esperado valores iguais, mas  'bar3' é diferente de " + result1909 + " <item1.getName()>")
chamada antiga: assertEquals(3, item1.getValue())
nova chamada: assertEquals(3, item1.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1910 + " <item1.getValue()>")
chamada antiga: assertEquals(4, item2.getId())
nova chamada: assertEquals(4, item2.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1911 + " <item2.getId()>")
chamada antiga: assertEquals("bar4", item2.getName())
nova chamada: assertEquals("bar4", item2.getName(), "Era esperado valores iguais, mas  'bar4' é diferente de " + result1912 + " <item2.getName()>")
chamada antiga: assertEquals(4, item2.getValue())
nova chamada: assertEquals(4, item2.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1913 + " <item2.getValue()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1914 + " <executionContext.size()>")
chamada antiga: assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"))
nova chamada: assertEquals(5, ReflectionTestUtils.getField(reader, "pageSize"), "Era esperado valores iguais, mas  5 é diferente de " + result1915 + " <ReflectionTestUtils.getField(reader, 'pageSize')>")
chamada antiga: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "transacted"))
nova chamada: assertFalse((Boolean) ReflectionTestUtils.getField(reader, "transacted"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(3, i)
nova chamada: assertEquals(3, i, "Era esperado valores iguais, mas  3 é diferente de " + " i")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1916 + " <executionContext.size()>")
chamada antiga: assertEquals(5, i)
nova chamada: assertEquals(5, i, "Era esperado valores iguais, mas  5 é diferente de " + " i")
chamada antiga: assertEquals("pageSize must be greater than zero", exception.getMessage())
nova chamada: assertEquals("pageSize must be greater than zero", exception.getMessage(), "Era esperado valores iguais, mas  'pageSize must be greater than zero' é diferente de " + result1917 + " <exception.getMessage()>")
chamada antiga: assertEquals("An EntityManagerFactory is required", exception.getMessage())
nova chamada: assertEquals("An EntityManagerFactory is required", exception.getMessage(), "Era esperado valores iguais, mas  'An EntityManagerFactory is required' é diferente de " + result1918 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true' é diferente de " + result1919 + " <exception.getMessage()>")
chamada antiga: assertEquals("Query string is required when queryProvider is null", exception.getMessage())
nova chamada: assertEquals("Query string is required when queryProvider is null", exception.getMessage(), "Era esperado valores iguais, mas  'Query string is required when queryProvider is null' é diferente de " + result1920 + " <exception.getMessage()>")
chamada antiga: assertSame(template, usedTemplate)
nova chamada: assertSame(template, usedTemplate, "Era esperado objetos iguais, mas  template é diferente de " + " usedTemplate")
chamada antiga: assertEquals("Either a DataSource or a NamedParameterJdbcTemplate is required", exception.getMessage())
nova chamada: assertEquals("Either a DataSource or a NamedParameterJdbcTemplate is required", exception.getMessage(), "Era esperado valores iguais, mas  'Either a DataSource or a NamedParameterJdbcTemplate is required' é diferente de " + result1921 + " <exception.getMessage()>")
chamada antiga: assertEquals("A SQL statement is required", exception.getMessage())
nova chamada: assertEquals("A SQL statement is required", exception.getMessage(), "Era esperado valores iguais, mas  'A SQL statement is required' é diferente de " + result1922 + " <exception.getMessage()>")
chamada antiga: assertEquals("Either an item can be mapped via db column or via bean spec, can't be both", exception.getMessage())
nova chamada: assertEquals("Either an item can be mapped via db column or via bean spec, can't be both", exception.getMessage(), "Era esperado valores iguais, mas  'Either an item can be mapped via db column or via bean spec, can't be both' é diferente de " + result1923 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, (int) template.queryForObject("select count(*) from foo where first = ? and second = ? and third = ?", Integer.class, i, i1, nine))
nova chamada: assertEquals(1, (int) template.queryForObject("select count(*) from foo where first = ? and second = ? and third = ?", Integer.class, i, i1, nine), "Era esperado valores iguais, mas  1 é diferente de " + " (int) template.queryForObject('select count(*) from foo where first = ? and second = ? and third = ?', Integer.class, i, i1, nine)")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result1924 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(3, item1.getId())
nova chamada: assertEquals(3, item1.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result1925 + " <item1.getId()>")
chamada antiga: assertEquals("bar3", item1.getName())
nova chamada: assertEquals("bar3", item1.getName(), "Era esperado valores iguais, mas  'bar3' é diferente de " + result1926 + " <item1.getName()>")
chamada antiga: assertEquals(3, item1.getValue())
nova chamada: assertEquals(3, item1.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1927 + " <item1.getValue()>")
chamada antiga: assertEquals(4, item2.getId())
nova chamada: assertEquals(4, item2.getId(), "Era esperado valores iguais, mas  4 é diferente de " + result1928 + " <item2.getId()>")
chamada antiga: assertEquals("bar4", item2.getName())
nova chamada: assertEquals("bar4", item2.getName(), "Era esperado valores iguais, mas  'bar4' é diferente de " + result1929 + " <item2.getName()>")
chamada antiga: assertEquals(4, item2.getValue())
nova chamada: assertEquals(4, item2.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1930 + " <item2.getValue()>")
chamada antiga: assertEquals(2, executionContext.size())
nova chamada: assertEquals(2, executionContext.size(), "Era esperado valores iguais, mas  2 é diferente de " + result1931 + " <executionContext.size()>")
chamada antiga: assertEquals(3, i)
nova chamada: assertEquals(3, i, "Era esperado valores iguais, mas  3 é diferente de " + " i")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result1932 + " <executionContext.size()>")
chamada antiga: assertEquals(5, i)
nova chamada: assertEquals(5, i, "Era esperado valores iguais, mas  5 é diferente de " + " i")
chamada antiga: assertEquals(5, i)
nova chamada: assertEquals(5, i, "Era esperado valores iguais, mas  5 é diferente de " + " i")
chamada antiga: assertEquals("fetchSize must not be negative", exception.getMessage())
nova chamada: assertEquals("fetchSize must not be negative", exception.getMessage(), "Era esperado valores iguais, mas  'fetchSize must not be negative' é diferente de " + result1933 + " <exception.getMessage()>")
chamada antiga: assertEquals("A SessionFactory must be provided", exception.getMessage())
nova chamada: assertEquals("A SessionFactory must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'A SessionFactory must be provided' é diferente de " + result1934 + " <exception.getMessage()>")
chamada antiga: assertEquals("A name is required when saveState is set to true.", exception.getMessage())
nova chamada: assertEquals("A name is required when saveState is set to true.", exception.getMessage(), "Era esperado valores iguais, mas  'A name is required when saveState is set to true.' é diferente de " + result1935 + " <exception.getMessage()>")
chamada antiga: assertEquals("A HibernateQueryProvider, queryName, queryString, " + "or both the nativeQuery and entityClass must be configured", exception.getMessage())
nova chamada: assertEquals("A HibernateQueryProvider, queryName, queryString, " + "or both the nativeQuery and entityClass must be configured", exception.getMessage(), "Era esperado valores iguais, mas  'A HibernateQueryProvider, queryName, queryString, ' + 'or both the nativeQuery and entityClass must be configured' é diferente de " + result1936 + " <exception.getMessage()>")
chamada antiga: assertEquals("EntityManagerFactory must be provided", exception.getMessage())
nova chamada: assertEquals("EntityManagerFactory must be provided", exception.getMessage(), "Era esperado valores iguais, mas  'EntityManagerFactory must be provided' é diferente de " + result1937 + " <exception.getMessage()>")
chamada antiga: assertEquals(9, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"))
nova chamada: assertEquals(9, JdbcTestUtils.countRowsInTable(jdbcTemplate, "T_FOOS"), "Era esperado valores iguais, mas  9 é diferente de " + result1938 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'T_FOOS')>")
chamada antiga: assertTrue(total > pageSize)
nova chamada: assertTrue(total > pageSize, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(pageSize, list.size())
nova chamada: assertEquals(pageSize, list.size(), "Era esperado valores iguais, mas  pageSize é diferente de " + result1939 + " <list.size()>")
chamada antiga: assertEquals(total, count)
nova chamada: assertEquals(total, count, "Era esperado valores iguais, mas  total é diferente de " + " count")
chamada antiga: assertEquals(pageSize, list.size())
nova chamada: assertEquals(pageSize, list.size(), "Era esperado valores iguais, mas  pageSize é diferente de " + result1940 + " <list.size()>")
chamada antiga: assertEquals(total, count)
nova chamada: assertEquals(total, count, "Era esperado valores iguais, mas  total é diferente de " + " count")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1941 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1942 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1943 + " <foo3.getValue()>")
chamada antiga: assertEquals(4, foo4.getValue())
nova chamada: assertEquals(4, foo4.getValue(), "Era esperado valores iguais, mas  4 é diferente de " + result1944 + " <foo4.getValue()>")
chamada antiga: assertEquals(5, foo5.getValue())
nova chamada: assertEquals(5, foo5.getValue(), "Era esperado valores iguais, mas  5 é diferente de " + result1945 + " <foo5.getValue()>")
chamada antiga: assertNull(itemReader.read())
nova chamada: assertNull(itemReader.read(), "Era esperado nulo, mas " + result1946 + " <itemReader.read()> não é nulo")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1947 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1948 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, fooAfterRestart.getValue())
nova chamada: assertEquals(3, fooAfterRestart.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1949 + " <fooAfterRestart.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1950 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1951 + " <foo2.getValue()>")
chamada antiga: assertEquals(1, foo.getValue())
nova chamada: assertEquals(1, foo.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1952 + " <foo.getValue()>")
chamada antiga: assertEquals(1, foo.getValue())
nova chamada: assertEquals(1, foo.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1953 + " <foo.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1954 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1955 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, fooAfterRestart.getValue())
nova chamada: assertEquals(3, fooAfterRestart.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1956 + " <fooAfterRestart.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1957 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1958 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, foo3.getValue())
nova chamada: assertEquals(3, foo3.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1959 + " <foo3.getValue()>")
chamada antiga: assertEquals(3, fooAfterRestart.getValue())
nova chamada: assertEquals(3, fooAfterRestart.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1960 + " <fooAfterRestart.getValue()>")
chamada antiga: assertEquals(1, foo1.getValue())
nova chamada: assertEquals(1, foo1.getValue(), "Era esperado valores iguais, mas  1 é diferente de " + result1961 + " <foo1.getValue()>")
chamada antiga: assertEquals(2, foo2.getValue())
nova chamada: assertEquals(2, foo2.getValue(), "Era esperado valores iguais, mas  2 é diferente de " + result1962 + " <foo2.getValue()>")
chamada antiga: assertEquals(3, fooAfterRestart.getValue())
nova chamada: assertEquals(3, fooAfterRestart.getValue(), "Era esperado valores iguais, mas  3 é diferente de " + result1963 + " <fooAfterRestart.getValue()>")
chamada antiga: assertEquals("uniqueName.key", tested.getKey("key"))
nova chamada: assertEquals("uniqueName.key", tested.getKey("key"), "Era esperado valores iguais, mas  'uniqueName.key' é diferente de " + result1964 + " <tested.getKey('key')>")
chamada antiga: assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result1965 + " <file.exists()> é falso")
chamada antiga: assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result1966 + " <file.exists()> é falso")
chamada antiga: assertTrue(size != newSize)
nova chamada: assertTrue(size != newSize, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, newSize)
nova chamada: assertEquals(0, newSize, "Era esperado valores iguais, mas  0 é diferente de " + " newSize")
chamada antiga: assertTrue(file.exists())
nova chamada: assertTrue(file.exists(), "Era esperado verdadeiro, mas " + result1967 + " <file.exists()> é falso")
chamada antiga: assertTrue(policy.isComplete(context, dummy))
nova chamada: assertTrue(policy.isComplete(context, dummy), "Era esperado verdadeiro, mas " + result1968 + " <policy.isComplete(context, dummy)> é falso")
chamada antiga: assertTrue(policy.isComplete(context, dummy))
nova chamada: assertTrue(policy.isComplete(context, dummy), "Era esperado verdadeiro, mas " + result1969 + " <policy.isComplete(context, dummy)> é falso")
chamada antiga: assertFalse(policy.isComplete(context, dummy))
nova chamada: assertFalse(policy.isComplete(context, dummy), "Era esperado falso, mas " + result1970 + " <policy.isComplete(context, dummy)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context, null))
nova chamada: assertTrue(policy.isComplete(context, null), "Era esperado verdadeiro, mas " + result1971 + " <policy.isComplete(context, null)> é falso")
chamada antiga: assertFalse(policy.isComplete(context, dummy))
nova chamada: assertFalse(policy.isComplete(context, dummy), "Era esperado falso, mas " + result1972 + " <policy.isComplete(context, dummy)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context, dummy))
nova chamada: assertTrue(policy.isComplete(context, dummy), "Era esperado verdadeiro, mas " + result1973 + " <policy.isComplete(context, dummy)> é falso")
chamada antiga: assertFalse(policy.isComplete(context, dummy))
nova chamada: assertFalse(policy.isComplete(context, dummy), "Era esperado falso, mas " + result1974 + " <policy.isComplete(context, dummy)> é verdadeiro ")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1975 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertEquals(0, context.getStartedCount())
nova chamada: assertEquals(0, context.getStartedCount(), "Era esperado valores iguais, mas  0 é diferente de " + result1976 + " <context.getStartedCount()>")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1977 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertFalse(policy.isComplete(context, null))
nova chamada: assertFalse(policy.isComplete(context, null), "Era esperado falso, mas " + result1978 + " <policy.isComplete(context, null)> é verdadeiro ")
chamada antiga: assertEquals(1, context.getStartedCount())
nova chamada: assertEquals(1, context.getStartedCount(), "Era esperado valores iguais, mas  1 é diferente de " + result1979 + " <context.getStartedCount()>")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1980 + " <policy.isComplete(context)> é falso")
chamada antiga: assertTrue(policy.isComplete(context, null))
nova chamada: assertTrue(policy.isComplete(context, null), "Era esperado verdadeiro, mas " + result1981 + " <policy.isComplete(context, null)> é falso")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1982 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1983 + " <policy.isComplete(context)> é falso")
chamada antiga: assertFalse(policy.isComplete(context, null))
nova chamada: assertFalse(policy.isComplete(context, null), "Era esperado falso, mas " + result1984 + " <policy.isComplete(context, null)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(policy.start(null), result))
nova chamada: assertTrue(policy.isComplete(policy.start(null), result), "Era esperado verdadeiro, mas " + result1985 + " <policy.isComplete(policy.start(null), result)> é falso")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1986 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1987 + " <policy.isComplete(context)> é falso")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1988 + " <policy.isComplete(context)> é falso")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1989 + " <policy.isComplete(context)> é falso")
chamada antiga: assertTrue(policy.isComplete(context, null))
nova chamada: assertTrue(policy.isComplete(context, null), "Era esperado verdadeiro, mas " + result1990 + " <policy.isComplete(context, null)> é falso")
chamada antiga: assertTrue(policy.isComplete(context, RepeatStatus.FINISHED))
nova chamada: assertTrue(policy.isComplete(context, RepeatStatus.FINISHED), "Era esperado verdadeiro, mas " + result1991 + " <policy.isComplete(context, RepeatStatus.FINISHED)> é falso")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1992 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1993 + " <policy.isComplete(context)> é falso")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1994 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1995 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result1996 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertTrue(policy.isComplete(context))
nova chamada: assertTrue(policy.isComplete(context), "Era esperado verdadeiro, mas " + result1997 + " <policy.isComplete(context)> é falso")
chamada antiga: assertTrue(context.hasAttribute("FOO"))
nova chamada: assertTrue(context.hasAttribute("FOO"), "Era esperado verdadeiro, mas " + result1998 + " <context.hasAttribute('FOO')> é falso")
chamada antiga: assertTrue(parent.hasAttribute("FOO"))
nova chamada: assertTrue(parent.hasAttribute("FOO"), "Era esperado verdadeiro, mas " + result1999 + " <parent.hasAttribute('FOO')> é falso")
chamada antiga: assertEquals(0, counter.getCount())
nova chamada: assertEquals(0, counter.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result2000 + " <counter.getCount()>")
chamada antiga: assertEquals(1, counter.getCount())
nova chamada: assertEquals(1, counter.getCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2001 + " <counter.getCount()>")
chamada antiga: assertEquals(3, counter.getCount())
nova chamada: assertEquals(3, counter.getCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2002 + " <counter.getCount()>")
chamada antiga: assertFalse(context.hasAttribute("FOO"))
nova chamada: assertFalse(context.hasAttribute("FOO"), "Era esperado falso, mas " + result2003 + " <context.hasAttribute('FOO')> é verdadeiro ")
chamada antiga: assertTrue(parent.hasAttribute("FOO"))
nova chamada: assertTrue(parent.hasAttribute("FOO"), "Era esperado verdadeiro, mas " + result2004 + " <parent.hasAttribute('FOO')> é falso")
chamada antiga: assertEquals(0, counter.getCount())
nova chamada: assertEquals(0, counter.getCount(), "Era esperado valores iguais, mas  0 é diferente de " + result2005 + " <counter.getCount()>")
chamada antiga: assertEquals(1, counter.getCount())
nova chamada: assertEquals(1, counter.getCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2006 + " <counter.getCount()>")
chamada antiga: assertEquals(3, counter.getCount())
nova chamada: assertEquals(3, counter.getCount(), "Era esperado valores iguais, mas  3 é diferente de " + result2007 + " <counter.getCount()>")
chamada antiga: assertEquals(accessor, another)
nova chamada: assertEquals(accessor, another, "Era esperado valores iguais, mas  accessor é diferente de " + " another")
chamada antiga: assertNotNull(accessor.toString())
nova chamada: assertNotNull(accessor.toString(), "Era esperado não nulo, mas " + result2008 + " <accessor.toString()> é nulo")
chamada antiga: assertNotNull(accessor.toString())
nova chamada: assertNotNull(accessor.toString(), "Era esperado não nulo, mas " + result2009 + " <accessor.toString()> é nulo")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2010 + " <list.size()>")
chamada antiga: assertTrue(list.contains("foo"))
nova chamada: assertTrue(list.contains("foo"), "Era esperado verdadeiro, mas " + result2011 + " <list.contains('foo')> é falso")
chamada antiga: assertEquals(accessor, another)
nova chamada: assertEquals(accessor, another, "Era esperado valores iguais, mas  accessor é diferente de " + " another")
chamada antiga: assertEquals(accessor, accessor)
nova chamada: assertEquals(accessor, accessor, "Era esperado valores iguais, mas  accessor é diferente de " + " accessor")
chamada antiga: assertFalse(accessor.equals(another))
nova chamada: assertFalse(accessor.equals(another), "Era esperado falso, mas " + result2012 + " <accessor.equals(another)> é verdadeiro ")
chamada antiga: assertEquals(accessor, another)
nova chamada: assertEquals(accessor, another, "Era esperado valores iguais, mas  accessor é diferente de " + " another")
chamada antiga: assertEquals("bar", accessor.getAttribute("foo"))
nova chamada: assertEquals("bar", accessor.getAttribute("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2013 + " <accessor.getAttribute('foo')>")
chamada antiga: assertEquals("bar", accessor.setAttributeIfAbsent("foo", "spam"))
nova chamada: assertEquals("bar", accessor.setAttributeIfAbsent("foo", "spam"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2014 + " <accessor.setAttributeIfAbsent('foo', 'spam')>")
chamada antiga: assertNull(accessor.setAttributeIfAbsent("foo", "bar"))
nova chamada: assertNull(accessor.setAttributeIfAbsent("foo", "bar"), "Era esperado nulo, mas " + result2015 + " <accessor.setAttributeIfAbsent('foo', 'bar')> não é nulo")
chamada antiga: assertEquals("bar", accessor.getAttribute("foo"))
nova chamada: assertEquals("bar", accessor.getAttribute("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2016 + " <accessor.getAttribute('foo')>")
chamada antiga: assertTrue(accessor.hasAttribute("foo"))
nova chamada: assertTrue(accessor.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result2017 + " <accessor.hasAttribute('foo')> é falso")
chamada antiga: assertEquals("bar", accessor.getAttribute("foo"))
nova chamada: assertEquals("bar", accessor.getAttribute("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2018 + " <accessor.getAttribute('foo')>")
chamada antiga: assertNull(accessor.getAttribute("foo"))
nova chamada: assertNull(accessor.getAttribute("foo"), "Era esperado nulo, mas " + result2019 + " <accessor.getAttribute('foo')> não é nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2020 + " <list.size()>")
chamada antiga: assertEquals("bar", list.get(0))
nova chamada: assertEquals("bar", list.get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result2021 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2022 + " <list.size()>")
chamada antiga: assertEquals("fail!", exception.getMessage())
nova chamada: assertEquals("fail!", exception.getMessage(), "Era esperado valores iguais, mas  'fail!' é diferente de " + result2023 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2024 + " <list.size()>")
chamada antiga: assertTrue(list.contains("bar"))
nova chamada: assertTrue(list.contains("bar"), "Era esperado verdadeiro, mas " + result2025 + " <list.contains('bar')> é falso")
chamada antiga: assertTrue(list.contains("spam"))
nova chamada: assertTrue(list.contains("spam"), "Era esperado verdadeiro, mas " + result2026 + " <list.contains('spam')> é falso")
chamada antiga: assertEquals(3, target.count)
nova chamada: assertEquals(3, target.count, "Era esperado valores iguais, mas  3 é diferente de " + " target.count")
chamada antiga: assertEquals(1, target.count)
nova chamada: assertEquals(1, target.count, "Era esperado valores iguais, mas  1 é diferente de " + " target.count")
chamada antiga: assertEquals(1, calls.size())
nova chamada: assertEquals(1, calls.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2027 + " <calls.size()>")
chamada antiga: assertEquals(1, calls.size())
nova chamada: assertEquals(1, calls.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2028 + " <calls.size()>")
chamada antiga: assertEquals(2, target.count)
nova chamada: assertEquals(2, target.count, "Era esperado valores iguais, mas  2 é diferente de " + " target.count")
chamada antiga: assertEquals("Duh", exception.getMessage().substring(0, 3))
nova chamada: assertEquals("Duh", exception.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'Duh' é diferente de " + result2029 + " <exception.getMessage().substring(0, 3)>")
chamada antiga: assertEquals("Duh", error.getMessage().substring(0, 3))
nova chamada: assertEquals("Duh", error.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'Duh' é diferente de " + result2030 + " <error.getMessage().substring(0, 3)>")
chamada antiga: assertTrue(service.isContinuable())
nova chamada: assertTrue(service.isContinuable(), "Era esperado verdadeiro, mas " + result2031 + " <service.isContinuable()> é falso")
chamada antiga: assertEquals(2, target.count)
nova chamada: assertEquals(2, target.count, "Era esperado valores iguais, mas  2 é diferente de " + " target.count")
chamada antiga: assertFalse(service.isContinuable())
nova chamada: assertFalse(service.isContinuable(), "Era esperado falso, mas " + result2032 + " <service.isContinuable()> é verdadeiro ")
chamada antiga: assertEquals(1, target.count)
nova chamada: assertEquals(1, target.count, "Era esperado valores iguais, mas  1 é diferente de " + " target.count")
chamada antiga: assertEquals(2, target.count)
nova chamada: assertEquals(2, target.count, "Era esperado valores iguais, mas  2 é diferente de " + " target.count")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2033 + " <list.size()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertTrue(list.contains("foo"))
nova chamada: assertTrue(list.contains("foo"), "Era esperado verdadeiro, mas " + result2034 + " <list.contains('foo')> é falso")
chamada antiga: assertTrue(list.contains("bar"))
nova chamada: assertTrue(list.contains("bar"), "Era esperado verdadeiro, mas " + result2035 + " <list.contains('bar')> é falso")
chamada antiga: assertNull(text)
nova chamada: assertNull(text, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertNull(foo)
nova chamada: assertNull(foo, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2036 + " <list.size()>")
chamada antiga: assertNull(foo)
nova chamada: assertNull(foo, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertTrue(list.size() >= 1)
nova chamada: assertTrue(list.size() >= 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertTrue(queue.isExpecting())
nova chamada: assertTrue(queue.isExpecting(), "Era esperado verdadeiro, mas " + result2037 + " <queue.isExpecting()> é falso")
chamada antiga: assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result2038 + " <queue.isEmpty()> é falso")
chamada antiga: assertFalse(queue.isEmpty())
nova chamada: assertFalse(queue.isEmpty(), "Era esperado falso, mas " + result2039 + " <queue.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(queue.take().getResult().isContinuable())
nova chamada: assertTrue(queue.take().getResult().isContinuable(), "Era esperado verdadeiro, mas " + result2040 + " <queue.take().getResult().isContinuable()> é falso")
chamada antiga: assertFalse(queue.isExpecting())
nova chamada: assertFalse(queue.isExpecting(), "Era esperado falso, mas " + result2041 + " <queue.isExpecting()> é verdadeiro ")
chamada antiga: assertFalse(queue.isEmpty())
nova chamada: assertFalse(queue.isEmpty(), "Era esperado falso, mas " + result2042 + " <queue.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(queue.take().getResult().isContinuable())
nova chamada: assertTrue(queue.take().getResult().isContinuable(), "Era esperado verdadeiro, mas " + result2043 + " <queue.take().getResult().isContinuable()> é falso")
chamada antiga: assertFalse(queue.take().getResult().isContinuable())
nova chamada: assertFalse(queue.take().getResult().isContinuable(), "Era esperado falso, mas " + result2044 + " <queue.take().getResult().isContinuable()> é verdadeiro ")
chamada antiga: assertEquals(context, RepeatSynchronizationManager.getContext())
nova chamada: assertEquals(context, RepeatSynchronizationManager.getContext(), "Era esperado valores iguais, mas  context é diferente de " + result2045 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertNull(RepeatSynchronizationManager.getContext())
nova chamada: assertNull(RepeatSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2046 + " <RepeatSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertFalse(RepeatSynchronizationManager.getContext().isCompleteOnly())
nova chamada: assertFalse(RepeatSynchronizationManager.getContext().isCompleteOnly(), "Era esperado falso, mas " + result2047 + " <RepeatSynchronizationManager.getContext().isCompleteOnly()> é verdadeiro ")
chamada antiga: assertTrue(RepeatSynchronizationManager.getContext().isCompleteOnly())
nova chamada: assertTrue(RepeatSynchronizationManager.getContext().isCompleteOnly(), "Era esperado verdadeiro, mas " + result2048 + " <RepeatSynchronizationManager.getContext().isCompleteOnly()> é falso")
chamada antiga: assertNull(RepeatSynchronizationManager.getContext())
nova chamada: assertNull(RepeatSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2049 + " <RepeatSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertFalse(child.isCompleteOnly())
nova chamada: assertFalse(child.isCompleteOnly(), "Era esperado falso, mas " + result2050 + " <child.isCompleteOnly()> é verdadeiro ")
chamada antiga: assertTrue(child.isCompleteOnly())
nova chamada: assertTrue(child.isCompleteOnly(), "Era esperado verdadeiro, mas " + result2051 + " <child.isCompleteOnly()> é falso")
chamada antiga: assertTrue(context.isCompleteOnly())
nova chamada: assertTrue(context.isCompleteOnly(), "Era esperado verdadeiro, mas " + result2052 + " <context.isCompleteOnly()> é falso")
chamada antiga: assertEquals(context, RepeatSynchronizationManager.getContext())
nova chamada: assertEquals(context, RepeatSynchronizationManager.getContext(), "Era esperado valores iguais, mas  context é diferente de " + result2053 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertNull(RepeatSynchronizationManager.getContext())
nova chamada: assertNull(RepeatSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2054 + " <RepeatSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals("foo!", exception.getMessage())
nova chamada: assertEquals("foo!", exception.getMessage(), "Era esperado valores iguais, mas  'foo!' é diferente de " + result2055 + " <exception.getMessage()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(context, RepeatSynchronizationManager.getContext())
nova chamada: assertSame(context, RepeatSynchronizationManager.getContext(), "Era esperado objetos iguais, mas  context é diferente de " + result2056 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(context, RepeatSynchronizationManager.getContext())
nova chamada: assertSame(context, RepeatSynchronizationManager.getContext(), "Era esperado objetos iguais, mas  context é diferente de " + result2057 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertNotSame(threadName, Thread.currentThread().getName())
nova chamada: assertNotSame(threadName, Thread.currentThread().getName(), "Era esperado objetos diferentes, mas  threadName é igual a " + result2058 + " <Thread.currentThread().getName()>")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertTrue(threadNames.size() > 1)
nova chamada: assertTrue(threadNames.size() > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertTrue(threadNames.size() > 1)
nova chamada: assertTrue(threadNames.size() > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(frequency <= throttleLimit)
nova chamada: assertTrue(frequency <= throttleLimit, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotSame(threadName, Thread.currentThread().getName())
nova chamada: assertNotSame(threadName, Thread.currentThread().getName(), "Era esperado objetos diferentes, mas  threadName é igual a " + result2059 + " <Thread.currentThread().getName()>")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertTrue(threadNames.size() >= 1)
nova chamada: assertTrue(threadNames.size() >= 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(total, items.size() - frequency)
nova chamada: assertEquals(total, items.size() - frequency, "Era esperado valores iguais, mas  total é diferente de " + " items.size() - frequency")
chamada antiga: assertTrue(frequency > 1)
nova chamada: assertTrue(frequency > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(frequency <= throttleLimit + 1)
nova chamada: assertTrue(frequency <= throttleLimit + 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(total, items.size() - frequency)
nova chamada: assertEquals(total, items.size() - frequency, "Era esperado valores iguais, mas  total é diferente de " + " items.size() - frequency")
chamada antiga: assertTrue(frequency > 1)
nova chamada: assertTrue(frequency > 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(frequency <= throttleLimit + 1)
nova chamada: assertTrue(frequency <= throttleLimit + 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(total, items.size() - frequency)
nova chamada: assertEquals(total, items.size() - frequency, "Era esperado valores iguais, mas  total é diferente de " + " items.size() - frequency")
chamada antiga: assertTrue(frequency <= throttleLimit + 1)
nova chamada: assertTrue(frequency <= throttleLimit + 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(total, items.size() - frequency)
nova chamada: assertEquals(total, items.size() - frequency, "Era esperado valores iguais, mas  total é diferente de " + " items.size() - frequency")
chamada antiga: assertTrue(frequency <= throttleLimit + 1)
nova chamada: assertTrue(frequency <= throttleLimit + 1, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(10, items.size() - frequency)
nova chamada: assertEquals(10, items.size() - frequency, "Era esperado valores iguais, mas  10 é diferente de " + " items.size() - frequency")
chamada antiga: assertEquals(0, frequency)
nova chamada: assertEquals(0, frequency, "Era esperado valores iguais, mas  0 é diferente de " + " frequency")
chamada antiga: assertEquals("Planned", exception.getMessage())
nova chamada: assertEquals("Planned", exception.getMessage(), "Era esperado valores iguais, mas  'Planned' é diferente de " + result2060 + " <exception.getMessage()>")
chamada antiga: assertEquals(0, frequency)
nova chamada: assertEquals(0, frequency, "Era esperado valores iguais, mas  0 é diferente de " + " frequency")
chamada antiga: assertEquals("Planned", error.getMessage())
nova chamada: assertEquals("Planned", error.getMessage(), "Era esperado valores iguais, mas  'Planned' é diferente de " + result2061 + " <error.getMessage()>")
chamada antiga: assertTrue(queue.isExpecting())
nova chamada: assertTrue(queue.isExpecting(), "Era esperado verdadeiro, mas " + result2062 + " <queue.isExpecting()> é falso")
chamada antiga: assertTrue(queue.isEmpty())
nova chamada: assertTrue(queue.isEmpty(), "Era esperado verdadeiro, mas " + result2063 + " <queue.isEmpty()> é falso")
chamada antiga: assertFalse(queue.isEmpty())
nova chamada: assertFalse(queue.isEmpty(), "Era esperado falso, mas " + result2064 + " <queue.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("foo", queue.take())
nova chamada: assertEquals("foo", queue.take(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2065 + " <queue.take()>")
chamada antiga: assertFalse(queue.isExpecting())
nova chamada: assertFalse(queue.isExpecting(), "Era esperado falso, mas " + result2066 + " <queue.isExpecting()> é verdadeiro ")
chamada antiga: assertFalse(queue.isExpecting())
nova chamada: assertFalse(queue.isExpecting(), "Era esperado falso, mas " + result2067 + " <queue.isExpecting()> é verdadeiro ")
chamada antiga: assertFalse(queue.isExpecting())
nova chamada: assertFalse(queue.isExpecting(), "Era esperado falso, mas " + result2068 + " <queue.isExpecting()> é verdadeiro ")
chamada antiga: assertEquals("foo", queue.take())
nova chamada: assertEquals("foo", queue.take(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2069 + " <queue.take()>")
chamada antiga: assertTrue(queue.isExpecting())
nova chamada: assertTrue(queue.isExpecting(), "Era esperado verdadeiro, mas " + result2070 + " <queue.isExpecting()> é falso")
chamada antiga: assertDoesNotThrow(() -> new TaskExecutorRepeatTemplate().setThrottleLimit(-1))
nova chamada: assertDoesNotThrow(() -> new TaskExecutorRepeatTemplate().setThrottleLimit(-1), "Era esperado que nenhuma exceção fosse lançada, mas  () - new TaskExecutorRepeatTemplate().setThrottleLimit(-1) foi lançada")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertEquals(3, count)
nova chamada: assertEquals(3, count, "Era esperado valores iguais, mas  3 é diferente de " + " count")
chamada antiga: assertFalse(result.isContinuable())
nova chamada: assertFalse(result.isContinuable(), "Era esperado falso, mas " + result2071 + " <result.isContinuable()> é verdadeiro ")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertFalse(result.isContinuable())
nova chamada: assertFalse(result.isContinuable(), "Era esperado falso, mas " + result2072 + " <result.isContinuable()> é verdadeiro ")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertEquals(2, processor.count)
nova chamada: assertEquals(2, processor.count, "Era esperado valores iguais, mas  2 é diferente de " + " processor.count")
chamada antiga: assertEquals("foo!", exception.getMessage())
nova chamada: assertEquals("foo!", exception.getMessage(), "Era esperado valores iguais, mas  'foo!' é diferente de " + result2073 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2074 + " <list.size()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2075 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2076 + " <list.size()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2077 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2078 + " <list.size()>")
chamada antiga: assertEquals(2, processor.count)
nova chamada: assertEquals(2, processor.count, "Era esperado valores iguais, mas  2 é diferente de " + " processor.count")
chamada antiga: assertTrue(result.isContinuable())
nova chamada: assertTrue(result.isContinuable(), "Era esperado verdadeiro, mas " + result2079 + " <result.isContinuable()> é falso")
chamada antiga: assertEquals(2, processor.count)
nova chamada: assertEquals(2, processor.count, "Era esperado valores iguais, mas  2 é diferente de " + " processor.count")
chamada antiga: assertTrue(result.isContinuable())
nova chamada: assertTrue(result.isContinuable(), "Era esperado verdadeiro, mas " + result2080 + " <result.isContinuable()> é falso")
chamada antiga: assertSame(context, RepeatSynchronizationManager.getContext())
nova chamada: assertSame(context, RepeatSynchronizationManager.getContext(), "Era esperado objetos iguais, mas  context é diferente de " + result2081 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertSame(context, RepeatSynchronizationManager.getContext())
nova chamada: assertSame(context, RepeatSynchronizationManager.getContext(), "Era esperado objetos iguais, mas  context é diferente de " + result2082 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: fail("Nested batch should not have been executed")
nova chamada: fail("Nested batch should not have been executed", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertSame(context, RepeatSynchronizationManager.getContext())
nova chamada: assertSame(context, RepeatSynchronizationManager.getContext(), "Era esperado objetos iguais, mas  context é diferente de " + result2083 + " <RepeatSynchronizationManager.getContext()>")
chamada antiga: assertEquals(4, count)
nova chamada: assertEquals(4, count, "Era esperado valores iguais, mas  4 é diferente de " + " count")
chamada antiga: assertEquals(NUMBER_OF_ITEMS, processor.count)
nova chamada: assertEquals(NUMBER_OF_ITEMS, processor.count, "Era esperado valores iguais, mas  NUMBER_OF_ITEMS é diferente de " + " processor.count")
chamada antiga: assertFalse(result.isContinuable())
nova chamada: assertFalse(result.isContinuable(), "Era esperado falso, mas " + result2084 + " <result.isContinuable()> é verdadeiro ")
chamada antiga: assertEquals("Barf second try count=2", exception.getMessage())
nova chamada: assertEquals("Barf second try count=2", exception.getMessage(), "Era esperado valores iguais, mas  'Barf second try count=2' é diferente de " + result2085 + " <exception.getMessage()>")
chamada antiga: assertEquals("Barf second try count=2", exception.getMessage())
nova chamada: assertEquals("Barf second try count=2", exception.getMessage(), "Era esperado valores iguais, mas  'Barf second try count=2' é diferente de " + result2086 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, processor.count)
nova chamada: assertEquals(2, processor.count, "Era esperado valores iguais, mas  2 é diferente de " + " processor.count")
chamada antiga: assertFalse(result.isContinuable())
nova chamada: assertFalse(result.isContinuable(), "Era esperado falso, mas " + result2087 + " <result.isContinuable()> é verdadeiro ")
chamada antiga: assertSame(exception, throwable)
nova chamada: assertSame(exception, throwable, "Era esperado objetos iguais, mas  exception é diferente de " + " throwable")
chamada antiga: assertSame(exception, throwable)
nova chamada: assertSame(exception, throwable, "Era esperado objetos iguais, mas  exception é diferente de " + " throwable")
chamada antiga: assertSame(exception, expected.getCause())
nova chamada: assertSame(exception, expected.getCause(), "Era esperado objetos iguais, mas  exception é diferente de " + result2088 + " <expected.getCause()>")
chamada antiga: assertTrue(listener.called)
nova chamada: assertTrue(listener.called, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exHandler.called)
nova chamada: assertTrue(exHandler.called, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertFalse(result.isContinuable())
nova chamada: assertFalse(result.isContinuable(), "Era esperado falso, mas " + result2089 + " <result.isContinuable()> é verdadeiro ")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2090 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2091 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2092 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2093 + " <list.size()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("[1, 2, 1, 2]", calls.toString())
nova chamada: assertEquals("[1, 2, 1, 2]", calls.toString(), "Era esperado valores iguais, mas  '[1, 2, 1, 2]' é diferente de " + result2094 + " <calls.toString()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[1]", calls.toString())
nova chamada: assertEquals("[1]", calls.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result2095 + " <calls.toString()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("[2, 1]", calls.toString())
nova chamada: assertEquals("[2, 1]", calls.toString(), "Era esperado valores iguais, mas  '[2, 1]' é diferente de " + result2096 + " <calls.toString()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[1, 2]", calls.toString())
nova chamada: assertEquals("[1, 2]", calls.toString(), "Era esperado valores iguais, mas  '[1, 2]' é diferente de " + result2097 + " <calls.toString()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals("[1]", calls.toString())
nova chamada: assertEquals("[1]", calls.toString(), "Era esperado valores iguais, mas  '[1]' é diferente de " + result2098 + " <calls.toString()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("[2, 1]", calls.toString())
nova chamada: assertEquals("[2, 1]", calls.toString(), "Era esperado valores iguais, mas  '[2, 1]' é diferente de " + result2099 + " <calls.toString()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[2, 1]", calls.toString())
nova chamada: assertEquals("[2, 1]", calls.toString(), "Era esperado valores iguais, mas  '[2, 1]' é diferente de " + result2100 + " <calls.toString()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[2]", calls.toString())
nova chamada: assertEquals("[2]", calls.toString(), "Era esperado valores iguais, mas  '[2]' é diferente de " + result2101 + " <calls.toString()>")
chamada antiga: assertEquals("Bogus", exception.getMessage())
nova chamada: assertEquals("Bogus", exception.getMessage(), "Era esperado valores iguais, mas  'Bogus' é diferente de " + result2102 + " <exception.getMessage()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("2", calls.get(0))
nova chamada: assertEquals("2", calls.get(0), "Era esperado valores iguais, mas  '2' é diferente de " + result2103 + " <calls.get(0)>")
chamada antiga: assertEquals("2", calls.get(calls.size() - 1))
nova chamada: assertEquals("2", calls.get(calls.size() - 1), "Era esperado valores iguais, mas  '2' é diferente de " + result2104 + " <calls.get(calls.size() - 1)>")
chamada antiga: assertFalse(calls.contains("1"))
nova chamada: assertFalse(calls.contains("1"), "Era esperado falso, mas " + result2105 + " <calls.contains('1')> é verdadeiro ")
chamada antiga: assertEquals(fails.size(), calls.size())
nova chamada: assertEquals(fails.size(), calls.size(), "Era esperado valores iguais, mas " + result2106 + " <fails.size()> é diferente de " + result2107 + " <calls.size()>")
chamada antiga: assertEquals("Foo", exception.getMessage())
nova chamada: assertEquals("Foo", exception.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2108 + " <exception.getMessage()>")
chamada antiga: assertEquals("Foo", error.getMessage())
nova chamada: assertEquals("Foo", error.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2109 + " <error.getMessage()>")
chamada antiga: assertEquals("Foo", exception.getMessage())
nova chamada: assertEquals("Foo", exception.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2110 + " <exception.getMessage()>")
chamada antiga: assertEquals("Foo", error.getMessage())
nova chamada: assertEquals("Foo", error.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2111 + " <error.getMessage()>")
chamada antiga: assertNotNull(counter)
nova chamada: assertNotNull(counter, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, counter.get())
nova chamada: assertEquals(1, counter.get(), "Era esperado valores iguais, mas  1 é diferente de " + result2112 + " <counter.get()>")
chamada antiga: assertEquals("Foo", exception.getMessage())
nova chamada: assertEquals("Foo", exception.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2113 + " <exception.getMessage()>")
chamada antiga: assertDoesNotThrow(() -> handler.handleException(context, new RuntimeException("Foo")))
nova chamada: assertDoesNotThrow(() -> handler.handleException(context, new RuntimeException("Foo")), "Era esperado que nenhuma exceção fosse lançada, mas  () - handler.handleException(context, new RuntimeException('Foo')) foi lançada")
chamada antiga: assertEquals("Foo", exception.getMessage())
nova chamada: assertEquals("Foo", exception.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2114 + " <exception.getMessage()>")
chamada antiga: assertEquals("Foo", exception.getMessage())
nova chamada: assertEquals("Foo", exception.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2115 + " <exception.getMessage()>")
chamada antiga: assertEquals("Foo", error.getMessage())
nova chamada: assertEquals("Foo", error.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result2116 + " <error.getMessage()>")
chamada antiga: assertNotNull(writer.toString())
nova chamada: assertNotNull(writer.toString(), "Era esperado não nulo, mas " + result2117 + " <writer.toString()> é nulo")
chamada antiga: assertNotNull(writer.toString())
nova chamada: assertNotNull(writer.toString(), "Era esperado não nulo, mas " + result2118 + " <writer.toString()> é nulo")
chamada antiga: assertNotNull(writer.toString())
nova chamada: assertNotNull(writer.toString(), "Era esperado não nulo, mas " + result2119 + " <writer.toString()> é nulo")
chamada antiga: assertSame(expected, throwable)
nova chamada: assertSame(expected, throwable, "Era esperado objetos iguais, mas  expected é diferente de " + " throwable")
chamada antiga: assertSame(expected, throwable)
nova chamada: assertSame(expected, throwable, "Era esperado objetos iguais, mas  expected é diferente de " + " throwable")
chamada antiga: assertDoesNotThrow(() -> handler.handleException(new RepeatContextSupport(null), new RuntimeException("foo")))
nova chamada: assertDoesNotThrow(() -> handler.handleException(new RepeatContextSupport(null), new RuntimeException("foo")), "Era esperado que nenhuma exceção fosse lançada, mas  () - handler.handleException(new RepeatContextSupport(null), new RuntimeException('foo')) foi lançada")
chamada antiga: assertDoesNotThrow(() -> {
    RepeatContextSupport context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
    context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
})
nova chamada: assertDoesNotThrow(() -> {
    RepeatContextSupport context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
    context = new RepeatContextSupport(parent);
    handler.handleException(context, throwable);
}, "Era esperado que nenhuma exceção fosse lançada, mas  () - {\n    RepeatContextSupport context = new RepeatContextSupport(parent);\n    handler.handleException(context, throwable);\n    context = new RepeatContextSupport(parent);\n    handler.handleException(context, throwable);\n} foi lançada")
chamada antiga: assertSame(throwable, expected)
nova chamada: assertSame(throwable, expected, "Era esperado objetos iguais, mas  throwable é diferente de " + " expected")
chamada antiga: assertEquals("above exception limit", expected.getMessage())
nova chamada: assertEquals("above exception limit", expected.getMessage(), "Era esperado valores iguais, mas  'above exception limit' é diferente de " + result2120 + " <expected.getMessage()>")
chamada antiga: assertEquals("foo", expected.getMessage())
nova chamada: assertEquals("foo", expected.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2121 + " <expected.getMessage()>")
chamada antiga: assertDoesNotThrow(() -> handler.handleException(null, new RuntimeException()))
nova chamada: assertDoesNotThrow(() -> handler.handleException(null, new RuntimeException()), "Era esperado que nenhuma exceção fosse lançada, mas  () - handler.handleException(null, new RuntimeException()) foi lançada")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2122 + " <list.size()>")
chamada antiga: assertEquals("1", list.get(0))
nova chamada: assertEquals("1", list.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result2123 + " <list.get(0)>")
chamada antiga: assertEquals("2", list.get(1))
nova chamada: assertEquals("2", list.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result2124 + " <list.get(1)>")
chamada antiga: assertEquals("foo", value)
nova chamada: assertEquals("foo", value, "Era esperado valores iguais, mas  'foo' é diferente de " + " value")
chamada antiga: assertEquals("foo", value)
nova chamada: assertEquals("foo", value, "Era esperado valores iguais, mas  'foo' é diferente de " + " value")
chamada antiga: assertEquals("Expected", exception.getCause().getMessage())
nova chamada: assertEquals("Expected", exception.getCause().getMessage(), "Era esperado valores iguais, mas  'Expected' é diferente de " + result2125 + " <exception.getCause().getMessage()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2126 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2127 + " <msgs.toString()>")
chamada antiga: assertEquals("foo", result)
nova chamada: assertEquals("foo", result, "Era esperado valores iguais, mas  'foo' é diferente de " + " result")
chamada antiga: assertEquals(1, recovered.size())
nova chamada: assertEquals(1, recovered.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2128 + " <recovered.size()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2129 + " <msgs.toString()>")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertNotNull(text)
nova chamada: assertNotNull(text, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2130 + " <msgs.toString()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2131 + " <msgs.toString()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[foo]", msgs.toString())
nova chamada: assertEquals("[foo]", msgs.toString(), "Era esperado valores iguais, mas  '[foo]' é diferente de " + result2132 + " <msgs.toString()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2133 + " <msgs.toString()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2134 + " <exception.getMessage()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertTrue(msgs.contains("foo"))
nova chamada: assertTrue(msgs.contains("foo"), "Era esperado verdadeiro, mas " + result2135 + " <msgs.contains('foo')> é falso")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals(2, recovered.size())
nova chamada: assertEquals(2, recovered.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2136 + " <recovered.size()>")
chamada antiga: assertEquals(0, count)
nova chamada: assertEquals(0, count, "Era esperado valores iguais, mas  0 é diferente de " + " count")
chamada antiga: assertEquals("[]", msgs.toString())
nova chamada: assertEquals("[]", msgs.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2137 + " <msgs.toString()>")
chamada antiga: assertEquals("[foo, bar]", recovered.toString())
nova chamada: assertEquals("[foo, bar]", recovered.toString(), "Era esperado valores iguais, mas  '[foo, bar]' é diferente de " + result2138 + " <recovered.toString()>")
chamada antiga: assertEquals(DatabaseType.H2, DatabaseType.fromMetaData(dataSource))
nova chamada: assertEquals(DatabaseType.H2, DatabaseType.fromMetaData(dataSource), "Era esperado valores iguais, mas  DatabaseType.H2 é diferente de " + result2139 + " <DatabaseType.fromMetaData(dataSource)>")
chamada antiga: assertEquals(DatabaseType.DERBY, DatabaseType.fromMetaData(dataSource))
nova chamada: assertEquals(DatabaseType.DERBY, DatabaseType.fromMetaData(dataSource), "Era esperado valores iguais, mas  DatabaseType.DERBY é diferente de " + result2140 + " <DatabaseType.fromMetaData(dataSource)>")
chamada antiga: assertEquals(0, comparator.compare(new FileSystemResource(FILE_PATH), new FileSystemResource(FILE_PATH)))
nova chamada: assertEquals(0, comparator.compare(new FileSystemResource(FILE_PATH), new FileSystemResource(FILE_PATH)), "Era esperado valores iguais, mas  0 é diferente de " + result2141 + " <comparator.compare(new FileSystemResource(FILE_PATH), new FileSystemResource(FILE_PATH))>")
chamada antiga: assertTrue(temp.exists())
nova chamada: assertTrue(temp.exists(), "Era esperado verdadeiro, mas " + result2142 + " <temp.exists()> é falso")
chamada antiga: assertEquals(1, comparator.compare(new FileSystemResource(temp), new FileSystemResource(FILE_PATH)))
nova chamada: assertEquals(1, comparator.compare(new FileSystemResource(temp), new FileSystemResource(FILE_PATH)), "Era esperado valores iguais, mas  1 é diferente de " + result2143 + " <comparator.compare(new FileSystemResource(temp), new FileSystemResource(FILE_PATH))>")
chamada antiga: assertEquals("foo", System.getProperty(SIMPLE_NAME))
nova chamada: assertEquals("foo", System.getProperty(SIMPLE_NAME), "Era esperado valores iguais, mas  'foo' é diferente de " + result2144 + " <System.getProperty(SIMPLE_NAME)>")
chamada antiga: assertEquals("foo", System.getProperty(SystemPropertyInitializer.ENVIRONMENT))
nova chamada: assertEquals("foo", System.getProperty(SystemPropertyInitializer.ENVIRONMENT), "Era esperado valores iguais, mas  'foo' é diferente de " + result2145 + " <System.getProperty(SystemPropertyInitializer.ENVIRONMENT)>")
chamada antiga: assertEquals(expectedProperties, props)
nova chamada: assertEquals(expectedProperties, props, "Era esperado valores iguais, mas  expectedProperties é diferente de " + " props")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(value, "\n"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(value, "\n"), "Era esperado valores iguais, mas  1 é diferente de " + result2146 + " <StringUtils.countOccurrencesOf(value, '\n')>")
chamada antiga: assertEquals(storedProps, props)
nova chamada: assertEquals(storedProps, props, "Era esperado valores iguais, mas  storedProps é diferente de " + " props")
chamada antiga: Assertions.assertTrue(properties.isEmpty())
nova chamada: assertTrue(properties.isEmpty(), "Era esperado verdadeiro, mas " + result2147 + " <properties.isEmpty()> é falso")
chamada antiga: assertEquals("", string)
nova chamada: assertEquals("", string, "Era esperado valores iguais, mas  '' é diferente de " + " string")
chamada antiga: assertEquals("C:/test", props.getProperty("test"))
nova chamada: assertEquals("C:/test", props.getProperty("test"), "Era esperado valores iguais, mas  'C:/test' é diferente de " + result2148 + " <props.getProperty('test')>")
chamada antiga: assertEquals(DERBY, fromProductName("Apache Derby"))
nova chamada: assertEquals(DERBY, fromProductName("Apache Derby"), "Era esperado valores iguais, mas  DERBY é diferente de " + result2149 + " <fromProductName('Apache Derby')>")
chamada antiga: assertEquals(DB2, fromProductName("DB2"))
nova chamada: assertEquals(DB2, fromProductName("DB2"), "Era esperado valores iguais, mas  DB2 é diferente de " + result2150 + " <fromProductName('DB2')>")
chamada antiga: assertEquals(DB2VSE, fromProductName("DB2VSE"))
nova chamada: assertEquals(DB2VSE, fromProductName("DB2VSE"), "Era esperado valores iguais, mas  DB2VSE é diferente de " + result2151 + " <fromProductName('DB2VSE')>")
chamada antiga: assertEquals(DB2ZOS, fromProductName("DB2ZOS"))
nova chamada: assertEquals(DB2ZOS, fromProductName("DB2ZOS"), "Era esperado valores iguais, mas  DB2ZOS é diferente de " + result2152 + " <fromProductName('DB2ZOS')>")
chamada antiga: assertEquals(DB2AS400, fromProductName("DB2AS400"))
nova chamada: assertEquals(DB2AS400, fromProductName("DB2AS400"), "Era esperado valores iguais, mas  DB2AS400 é diferente de " + result2153 + " <fromProductName('DB2AS400')>")
chamada antiga: assertEquals(HSQL, fromProductName("HSQL Database Engine"))
nova chamada: assertEquals(HSQL, fromProductName("HSQL Database Engine"), "Era esperado valores iguais, mas  HSQL é diferente de " + result2154 + " <fromProductName('HSQL Database Engine')>")
chamada antiga: assertEquals(SQLSERVER, fromProductName("Microsoft SQL Server"))
nova chamada: assertEquals(SQLSERVER, fromProductName("Microsoft SQL Server"), "Era esperado valores iguais, mas  SQLSERVER é diferente de " + result2155 + " <fromProductName('Microsoft SQL Server')>")
chamada antiga: assertEquals(MYSQL, fromProductName("MySQL"))
nova chamada: assertEquals(MYSQL, fromProductName("MySQL"), "Era esperado valores iguais, mas  MYSQL é diferente de " + result2156 + " <fromProductName('MySQL')>")
chamada antiga: assertEquals(ORACLE, fromProductName("Oracle"))
nova chamada: assertEquals(ORACLE, fromProductName("Oracle"), "Era esperado valores iguais, mas  ORACLE é diferente de " + result2157 + " <fromProductName('Oracle')>")
chamada antiga: assertEquals(POSTGRES, fromProductName("PostgreSQL"))
nova chamada: assertEquals(POSTGRES, fromProductName("PostgreSQL"), "Era esperado valores iguais, mas  POSTGRES é diferente de " + result2158 + " <fromProductName('PostgreSQL')>")
chamada antiga: assertEquals(SYBASE, fromProductName("Sybase"))
nova chamada: assertEquals(SYBASE, fromProductName("Sybase"), "Era esperado valores iguais, mas  SYBASE é diferente de " + result2159 + " <fromProductName('Sybase')>")
chamada antiga: assertEquals(SQLITE, fromProductName("SQLite"))
nova chamada: assertEquals(SQLITE, fromProductName("SQLite"), "Era esperado valores iguais, mas  SQLITE é diferente de " + result2160 + " <fromProductName('SQLite')>")
chamada antiga: assertEquals(HANA, fromProductName("HDB"))
nova chamada: assertEquals(HANA, fromProductName("HDB"), "Era esperado valores iguais, mas  HANA é diferente de " + result2161 + " <fromProductName('HDB')>")
chamada antiga: assertEquals(DERBY, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(DERBY, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  DERBY é diferente de " + result2162 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(DB2, DatabaseType.fromMetaData(oldDs))
nova chamada: assertEquals(DB2, DatabaseType.fromMetaData(oldDs), "Era esperado valores iguais, mas  DB2 é diferente de " + result2163 + " <DatabaseType.fromMetaData(oldDs)>")
chamada antiga: assertEquals(DB2, DatabaseType.fromMetaData(newDs))
nova chamada: assertEquals(DB2, DatabaseType.fromMetaData(newDs), "Era esperado valores iguais, mas  DB2 é diferente de " + result2164 + " <DatabaseType.fromMetaData(newDs)>")
chamada antiga: assertEquals(DB2VSE, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(DB2VSE, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  DB2VSE é diferente de " + result2165 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(DB2ZOS, DatabaseType.fromMetaData(oldDs))
nova chamada: assertEquals(DB2ZOS, DatabaseType.fromMetaData(oldDs), "Era esperado valores iguais, mas  DB2ZOS é diferente de " + result2166 + " <DatabaseType.fromMetaData(oldDs)>")
chamada antiga: assertEquals(DB2ZOS, DatabaseType.fromMetaData(newDs))
nova chamada: assertEquals(DB2ZOS, DatabaseType.fromMetaData(newDs), "Era esperado valores iguais, mas  DB2ZOS é diferente de " + result2167 + " <DatabaseType.fromMetaData(newDs)>")
chamada antiga: assertEquals(DB2AS400, DatabaseType.fromMetaData(toolboxDs))
nova chamada: assertEquals(DB2AS400, DatabaseType.fromMetaData(toolboxDs), "Era esperado valores iguais, mas  DB2AS400 é diferente de " + result2168 + " <DatabaseType.fromMetaData(toolboxDs)>")
chamada antiga: assertEquals(DB2AS400, DatabaseType.fromMetaData(nativeDs))
nova chamada: assertEquals(DB2AS400, DatabaseType.fromMetaData(nativeDs), "Era esperado valores iguais, mas  DB2AS400 é diferente de " + result2169 + " <DatabaseType.fromMetaData(nativeDs)>")
chamada antiga: assertEquals(DB2AS400, DatabaseType.fromMetaData(prdidDs))
nova chamada: assertEquals(DB2AS400, DatabaseType.fromMetaData(prdidDs), "Era esperado valores iguais, mas  DB2AS400 é diferente de " + result2170 + " <DatabaseType.fromMetaData(prdidDs)>")
chamada antiga: assertEquals(HSQL, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(HSQL, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  HSQL é diferente de " + result2171 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(SQLSERVER, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(SQLSERVER, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  SQLSERVER é diferente de " + result2172 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(MYSQL, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(MYSQL, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  MYSQL é diferente de " + result2173 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(ORACLE, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(ORACLE, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  ORACLE é diferente de " + result2174 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(POSTGRES, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(POSTGRES, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  POSTGRES é diferente de " + result2175 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(SYBASE, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(SYBASE, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  SYBASE é diferente de " + result2176 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(HANA, DatabaseType.fromMetaData(ds))
nova chamada: assertEquals(HANA, DatabaseType.fromMetaData(ds), "Era esperado valores iguais, mas  HANA é diferente de " + result2177 + " <DatabaseType.fromMetaData(ds)>")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_COMMITTED é diferente de " + " txStatus")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_COMMITTED é diferente de " + " txStatus")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_COMMITTED é diferente de " + " txStatus")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_COMMITTED, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_COMMITTED é diferente de " + " txStatus")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2178 + " <exception.getMessage()>")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_ROLLED_BACK é diferente de " + " txStatus")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2179 + " <exception.getMessage()>")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_ROLLED_BACK é diferente de " + " txStatus")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2180 + " <exception.getMessage()>")
chamada antiga: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus)
nova chamada: assertEquals(TransactionSynchronization.STATUS_ROLLED_BACK, txStatus, "Era esperado valores iguais, mas  TransactionSynchronization.STATUS_ROLLED_BACK é diferente de " + " txStatus")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2181 + " <map.size()>")
chamada antiga: assertTrue(map.containsKey("bucket"))
nova chamada: assertTrue(map.containsKey("bucket"), "Era esperado verdadeiro, mas " + result2182 + " <map.containsKey('bucket')> é falso")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2183 + " <map.size()>")
chamada antiga: assertFalse(map.isEmpty())
nova chamada: assertFalse(map.isEmpty(), "Era esperado falso, mas " + result2184 + " <map.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2185 + " <map.size()>")
chamada antiga: assertEquals(4, map.keySet().size())
nova chamada: assertEquals(4, map.keySet().size(), "Era esperado valores iguais, mas  4 é diferente de " + result2186 + " <map.keySet().size()>")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2187 + " <map.size()>")
chamada antiga: assertTrue(map.containsKey("spam"))
nova chamada: assertTrue(map.containsKey("spam"), "Era esperado verdadeiro, mas " + result2188 + " <map.containsKey('spam')> é falso")
chamada antiga: assertFalse(map.containsKey("spam"))
nova chamada: assertFalse(map.containsKey("spam"), "Era esperado falso, mas " + result2189 + " <map.containsKey('spam')> é verdadeiro ")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2190 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2191 + " <map.size()>")
chamada antiga: assertEquals(4, map.size())
nova chamada: assertEquals(4, map.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2192 + " <map.size()>")
chamada antiga: assertEquals(4, map.size())
nova chamada: assertEquals(4, map.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2193 + " <map.size()>")
chamada antiga: assertEquals(4, map.size())
nova chamada: assertEquals(4, map.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2194 + " <map.size()>")
chamada antiga: assertEquals(2, map.size())
nova chamada: assertEquals(2, map.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2195 + " <map.size()>")
chamada antiga: assertEquals(0, map.size())
nova chamada: assertEquals(0, map.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2196 + " <map.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2197 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2198 + " <map.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2199 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2200 + " <map.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2201 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, map.size())
nova chamada: assertEquals(3, map.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2202 + " <map.size()>")
chamada antiga: assertEquals("foo", s)
nova chamada: assertEquals("foo", s, "Era esperado valores iguais, mas  'foo' é diferente de " + " s")
chamada antiga: assertEquals("foo", s)
nova chamada: assertEquals("foo", s, "Era esperado valores iguais, mas  'foo' é diferente de " + " s")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2203 + " <writer.getBufferSize()>")
chamada antiga: assertEquals("foo", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(0)))
nova chamada: assertEquals("foo", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(0)), "Era esperado valores iguais, mas  'foo' é diferente de " + result2204 + " <getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(0))>")
chamada antiga: assertEquals("c", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(1)))
nova chamada: assertEquals("c", getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(1)), "Era esperado valores iguais, mas  'c' é diferente de " + result2205 + " <getStringFromByteBuffer(byteBufferCaptor.getAllValues().get(1))>")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2206 + " <writer.getBufferSize()>")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2207 + " <writer.getBufferSize()>")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2208 + " <writer.getBufferSize()>")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2209 + " <writer.getBufferSize()>")
chamada antiga: assertEquals(0, writer.getBufferSize())
nova chamada: assertEquals(0, writer.getBufferSize(), "Era esperado valores iguais, mas  0 é diferente de " + result2210 + " <writer.getBufferSize()>")
chamada antiga: assertEquals("Could not write to output buffer", exception.getMessage())
nova chamada: assertEquals("Could not write to output buffer", exception.getMessage(), "Era esperado valores iguais, mas  'Could not write to output buffer' é diferente de " + result2211 + " <exception.getMessage()>")
chamada antiga: assertEquals("urg", s)
nova chamada: assertEquals("urg", s, "Era esperado valores iguais, mas  'urg' é diferente de " + " s")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2212 + " <set.size()>")
chamada antiga: assertTrue(set.contains("bucket"))
nova chamada: assertTrue(set.contains("bucket"), "Era esperado verdadeiro, mas " + result2213 + " <set.contains('bucket')> é falso")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2214 + " <set.size()>")
chamada antiga: assertTrue(set.contains("spam"))
nova chamada: assertTrue(set.contains("spam"), "Era esperado verdadeiro, mas " + result2215 + " <set.contains('spam')> é falso")
chamada antiga: assertFalse(set.contains("spam"))
nova chamada: assertFalse(set.contains("spam"), "Era esperado falso, mas " + result2216 + " <set.contains('spam')> é verdadeiro ")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2217 + " <set.size()>")
chamada antiga: assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2218 + " <set.size()>")
chamada antiga: assertEquals(4, set.size())
nova chamada: assertEquals(4, set.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2219 + " <set.size()>")
chamada antiga: assertEquals(2, set.size())
nova chamada: assertEquals(2, set.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2220 + " <set.size()>")
chamada antiga: assertEquals(0, set.size())
nova chamada: assertEquals(0, set.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2221 + " <set.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2222 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2223 + " <set.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2224 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2225 + " <set.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2226 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, set.size())
nova chamada: assertEquals(3, set.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2227 + " <set.size()>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2228 + " <list.size()>")
chamada antiga: assertTrue(list.contains("bucket"))
nova chamada: assertTrue(list.contains("bucket"), "Era esperado verdadeiro, mas " + result2229 + " <list.contains('bucket')> é falso")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2230 + " <list.size()>")
chamada antiga: assertTrue(list.contains("spam"))
nova chamada: assertTrue(list.contains("spam"), "Era esperado verdadeiro, mas " + result2231 + " <list.contains('spam')> é falso")
chamada antiga: assertFalse(list.contains("spam"))
nova chamada: assertFalse(list.contains("spam"), "Era esperado falso, mas " + result2232 + " <list.contains('spam')> é verdadeiro ")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2233 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2234 + " <list.size()>")
chamada antiga: assertEquals(4, list.size())
nova chamada: assertEquals(4, list.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2235 + " <list.size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2236 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2237 + " <list.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2238 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2239 + " <list.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2240 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2241 + " <list.size()>")
chamada antiga: assertEquals("Rollback!", exception.getMessage())
nova chamada: assertEquals("Rollback!", exception.getMessage(), "Era esperado valores iguais, mas  'Rollback!' é diferente de " + result2242 + " <exception.getMessage()>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2243 + " <list.size()>")
chamada antiga: assertFalse(result)
nova chamada: assertFalse(result, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(innerMax * outerMax, set.size())
nova chamada: assertEquals(innerMax * outerMax, set.size(), "Era esperado valores iguais, mas  innerMax * outerMax é diferente de " + result2244 + " <set.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2245 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2246 + " <list.size()>")
chamada antiga: assertEquals(1, set.size())
nova chamada: assertEquals(1, set.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2247 + " <set.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2248 + " <list.size()>")
chamada antiga: assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2249 + " <map.size()>")
chamada antiga: assertEquals(1, map.size())
nova chamada: assertEquals(1, map.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2250 + " <map.size()>")
chamada antiga: assertEquals(1, methods.size())
nova chamada: assertEquals(1, methods.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2251 + " <methods.size()>")
chamada antiga: assertEquals("toString", methods.iterator().next().getName())
nova chamada: assertEquals("toString", methods.iterator().next().getName(), "Era esperado valores iguais, mas  'toString' é diferente de " + result2252 + " <methods.iterator().next().getName()>")
chamada antiga: assertEquals(0, methods.size())
nova chamada: assertEquals(0, methods.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2253 + " <methods.size()>")
chamada antiga: assertEquals(2, methods.size())
nova chamada: assertEquals(2, methods.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2254 + " <methods.size()>")
chamada antiga: assertTrue(toStringFound && methodOneFound)
nova chamada: assertTrue(toStringFound && methodOneFound, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(method)
nova chamada: assertNotNull(method, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(method)
nova chamada: assertNull(method, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(testClass.beforeCalled)
nova chamada: assertTrue(testClass.beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testClass.beforeCalled)
nova chamada: assertTrue(testClass.beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testClass.beforeCalled)
nova chamada: assertTrue(testClass.beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testClass.beforeCalled)
nova chamada: assertTrue(testClass.beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(testClass.beforeCalled)
nova chamada: assertFalse(testClass.beforeCalled, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(testClass.argumentTestCalled)
nova chamada: assertTrue(testClass.argumentTestCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(methodInvoker, methodInvoker2)
nova chamada: assertEquals(methodInvoker, methodInvoker2, "Era esperado valores iguais, mas  methodInvoker é diferente de " + " methodInvoker2")
chamada antiga: assertTrue(PatternMatcher.match("abc", "abc"))
nova chamada: assertTrue(PatternMatcher.match("abc", "abc"), "Era esperado verdadeiro, mas " + result2255 + " <PatternMatcher.match('abc', 'abc')> é falso")
chamada antiga: assertFalse(PatternMatcher.match("abc", "ab"))
nova chamada: assertFalse(PatternMatcher.match("abc", "ab"), "Era esperado falso, mas " + result2256 + " <PatternMatcher.match('abc', 'ab')> é verdadeiro ")
chamada antiga: assertTrue(PatternMatcher.match("a?c", "abc"))
nova chamada: assertTrue(PatternMatcher.match("a?c", "abc"), "Era esperado verdadeiro, mas " + result2257 + " <PatternMatcher.match('a?c', 'abc')> é falso")
chamada antiga: assertFalse(PatternMatcher.match("a?c", "ab"))
nova chamada: assertFalse(PatternMatcher.match("a?c", "ab"), "Era esperado falso, mas " + result2258 + " <PatternMatcher.match('a?c', 'ab')> é verdadeiro ")
chamada antiga: assertTrue(PatternMatcher.match("a?*", "abc"))
nova chamada: assertTrue(PatternMatcher.match("a?*", "abc"), "Era esperado verdadeiro, mas " + result2259 + " <PatternMatcher.match('a?*', 'abc')> é falso")
chamada antiga: assertTrue(PatternMatcher.match("a*c", "abdegc"))
nova chamada: assertTrue(PatternMatcher.match("a*c", "abdegc"), "Era esperado verdadeiro, mas " + result2260 + " <PatternMatcher.match('a*c', 'abdegc')> é falso")
chamada antiga: assertTrue(PatternMatcher.match("a*d*", "abcdeg"))
nova chamada: assertTrue(PatternMatcher.match("a*d*", "abcdeg"), "Era esperado verdadeiro, mas " + result2261 + " <PatternMatcher.match('a*d*', 'abcdeg')> é falso")
chamada antiga: assertFalse(PatternMatcher.match("a*de", "abcdeg"))
nova chamada: assertFalse(PatternMatcher.match("a*de", "abcdeg"), "Era esperado falso, mas " + result2262 + " <PatternMatcher.match('a*de', 'abcdeg')> é verdadeiro ")
chamada antiga: assertTrue(PatternMatcher.match("a*d*g*", "abcdeg"))
nova chamada: assertTrue(PatternMatcher.match("a*d*g*", "abcdeg"), "Era esperado verdadeiro, mas " + result2263 + " <PatternMatcher.match('a*d*g*', 'abcdeg')> é falso")
chamada antiga: assertTrue(PatternMatcher.match("ab*", "ab"))
nova chamada: assertTrue(PatternMatcher.match("ab*", "ab"), "Era esperado verdadeiro, mas " + result2264 + " <PatternMatcher.match('ab*', 'ab')> é falso")
chamada antiga: assertFalse(PatternMatcher.match("a*c", "abdeg"))
nova chamada: assertFalse(PatternMatcher.match("a*c", "abdeg"), "Era esperado falso, mas " + result2265 + " <PatternMatcher.match('a*c', 'abdeg')> é verdadeiro ")
chamada antiga: assertEquals(2, new PatternMatcher<>(map).match("apple").intValue())
nova chamada: assertEquals(2, new PatternMatcher<>(map).match("apple").intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2266 + " <new PatternMatcher<>(map).match('apple').intValue()>")
chamada antiga: assertEquals(3, new PatternMatcher<>(map).match("animal").intValue())
nova chamada: assertEquals(3, new PatternMatcher<>(map).match("animal").intValue(), "Era esperado valores iguais, mas  3 é diferente de " + result2267 + " <new PatternMatcher<>(map).match('animal').intValue()>")
chamada antiga: assertEquals(4, new PatternMatcher<>(map).match("biggest").intValue())
nova chamada: assertEquals(4, new PatternMatcher<>(map).match("biggest").intValue(), "Era esperado valores iguais, mas  4 é diferente de " + result2268 + " <new PatternMatcher<>(map).match('biggest').intValue()>")
chamada antiga: assertEquals(5, new PatternMatcher<>(defaultMap).match("biggest").intValue())
nova chamada: assertEquals(5, new PatternMatcher<>(defaultMap).match("biggest").intValue(), "Era esperado valores iguais, mas  5 é diferente de " + result2269 + " <new PatternMatcher<>(defaultMap).match('biggest').intValue()>")
chamada antiga: assertEquals(1, new PatternMatcher<>(defaultMap).match("").intValue())
nova chamada: assertEquals(1, new PatternMatcher<>(defaultMap).match("").intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result2270 + " <new PatternMatcher<>(defaultMap).match('').intValue()>")
chamada antiga: assertEquals(1, new PatternMatcher<>(defaultMap).match("bat").intValue())
nova chamada: assertEquals(1, new PatternMatcher<>(defaultMap).match("bat").intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result2271 + " <new PatternMatcher<>(defaultMap).match('bat').intValue()>")
chamada antiga: assertEquals(4, result.numbers[3])
nova chamada: assertEquals(4, result.numbers[3], "Era esperado valores iguais, mas  4 é diferente de " + " result.numbers[3]")
chamada antiga: assertEquals(123L, result.number)
nova chamada: assertEquals(123L, result.number, "Era esperado valores iguais, mas  123L é diferente de " + " result.number")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2272 + " <exception.getMessage()>")
chamada antiga: assertEquals("foo", exception.getMessage().substring(0, 3))
nova chamada: assertEquals("foo", exception.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'foo' é diferente de " + result2273 + " <exception.getMessage().substring(0, 3)>")
chamada antiga: assertEquals("No way!", exception.getMessage())
nova chamada: assertEquals("No way!", exception.getMessage(), "Era esperado valores iguais, mas  'No way!' é diferente de " + result2274 + " <exception.getMessage()>")
chamada antiga: assertNotNull(container)
nova chamada: assertNotNull(container, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("[bar, foo]", result.toString())
nova chamada: assertEquals("[bar, foo]", result.toString(), "Era esperado valores iguais, mas  '[bar, foo]' é diferente de " + result2275 + " <result.toString()>")
chamada antiga: assertEquals("foo", processed.poll(5, TimeUnit.SECONDS))
nova chamada: assertEquals("foo", processed.poll(5, TimeUnit.SECONDS), "Era esperado valores iguais, mas  'foo' é diferente de " + result2276 + " <processed.poll(5, TimeUnit.SECONDS)>")
chamada antiga: assertEquals("foo", recovered.poll(5, TimeUnit.SECONDS))
nova chamada: assertEquals("foo", recovered.poll(5, TimeUnit.SECONDS), "Era esperado valores iguais, mas  'foo' é diferente de " + result2277 + " <recovered.poll(5, TimeUnit.SECONDS)>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2278 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2279 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2280 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(jobLauncherTestUtils)
nova chamada: assertNotNull(jobLauncherTestUtils, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(jobLauncherTestUtils.getJob())
nova chamada: assertNull(jobLauncherTestUtils.getJob(), "Era esperado nulo, mas " + result2281 + " <jobLauncherTestUtils.getJob()> não é nulo")
chamada antiga: assertNotNull(jobLauncherTestUtils.getJob())
nova chamada: assertNotNull(jobLauncherTestUtils.getJob(), "Era esperado não nulo, mas " + result2282 + " <jobLauncherTestUtils.getJob()> é nulo")
chamada antiga: assertNotNull(jobLauncherTestUtils)
nova chamada: assertNotNull(jobLauncherTestUtils, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(jobLauncherTestUtils.getJob())
nova chamada: assertNull(jobLauncherTestUtils.getJob(), "Era esperado nulo, mas " + result2283 + " <jobLauncherTestUtils.getJob()> não é nulo")
chamada antiga: assertNotNull(contextCustomizer)
nova chamada: assertNotNull(contextCustomizer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(contextCustomizer)
nova chamada: assertNull(contextCustomizer, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertTrue(context.containsBean("jobLauncherTestUtils"))
nova chamada: assertTrue(context.containsBean("jobLauncherTestUtils"), "Era esperado verdadeiro, mas " + result2284 + " <context.containsBean('jobLauncherTestUtils')> é falso")
chamada antiga: assertTrue(context.containsBean("jobRepositoryTestUtils"))
nova chamada: assertTrue(context.containsBean("jobRepositoryTestUtils"), "Era esperado verdadeiro, mas " + result2285 + " <context.containsBean('jobRepositoryTestUtils')> é falso")
chamada antiga: assertTrue(context.containsBean("batchTestContextBeanPostProcessor"))
nova chamada: assertTrue(context.containsBean("batchTestContextBeanPostProcessor"), "Era esperado verdadeiro, mas " + result2286 + " <context.containsBean('batchTestContextBeanPostProcessor')> é falso")
chamada antiga: assertFalse(context.containsBean("jobLauncherTestUtils"))
nova chamada: assertFalse(context.containsBean("jobLauncherTestUtils"), "Era esperado falso, mas " + result2287 + " <context.containsBean('jobLauncherTestUtils')> é verdadeiro ")
chamada antiga: assertFalse(context.containsBean("jobRepositoryTestUtils"))
nova chamada: assertFalse(context.containsBean("jobRepositoryTestUtils"), "Era esperado falso, mas " + result2288 + " <context.containsBean('jobRepositoryTestUtils')> é verdadeiro ")
chamada antiga: assertFalse(context.containsBean("batchTestContextBeanPostProcessor"))
nova chamada: assertFalse(context.containsBean("batchTestContextBeanPostProcessor"), "Era esperado falso, mas " + result2289 + " <context.containsBean('batchTestContextBeanPostProcessor')> é verdadeiro ")
chamada antiga: assertEquals(date, result)
nova chamada: assertEquals(date, result, "Era esperado valores iguais, mas  date é diferente de " + " result")
chamada antiga: assertEquals(date, result)
nova chamada: assertEquals(date, result, "Era esperado valores iguais, mas  date é diferente de " + " result")
chamada antiga: assertEquals(date, result)
nova chamada: assertEquals(date, result, "Era esperado valores iguais, mas  date é diferente de " + " result")
chamada antiga: fail("Nested batch should not have been executed", "A execução falhou por uma causa deliberada")
nova chamada: fail("Nested batch should not have been executed", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepRunner.launchStep(step).getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepRunner.launchStep(step).getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2290 + " <stepRunner.launchStep(step).getStatus()>")
chamada antiga: assertEquals(2, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet2'", Integer.class).intValue())
nova chamada: assertEquals(2, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet2'", Integer.class).intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result2291 + " <jdbcTemplate.queryForObject('SELECT ID from TESTS where NAME = 'SampleTasklet2'', Integer.class).intValue()>")
chamada antiga: assertEquals("foo", this.stepScopedItemReader.read())
nova chamada: assertEquals("foo", this.stepScopedItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2292 + " <this.stepScopedItemReader.read()>")
chamada antiga: assertEquals("bar", this.stepScopedItemReader.read())
nova chamada: assertEquals("bar", this.stepScopedItemReader.read(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2293 + " <this.stepScopedItemReader.read()>")
chamada antiga: assertNull(this.stepScopedItemReader.read())
nova chamada: assertNull(this.stepScopedItemReader.read(), "Era esperado nulo, mas " + result2294 + " <this.stepScopedItemReader.read()> não é nulo")
chamada antiga: assertEquals("foo", this.jobScopedItemReader.read())
nova chamada: assertEquals("foo", this.jobScopedItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2295 + " <this.jobScopedItemReader.read()>")
chamada antiga: assertEquals("bar", this.jobScopedItemReader.read())
nova chamada: assertEquals("bar", this.jobScopedItemReader.read(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2296 + " <this.jobScopedItemReader.read()>")
chamada antiga: assertNull(this.jobScopedItemReader.read())
nova chamada: assertNull(this.jobScopedItemReader.read(), "Era esperado nulo, mas " + result2297 + " <this.jobScopedItemReader.read()> não é nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2298 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2299 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2300 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2301 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchJob().getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchJob().getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2302 + " <jobLauncherTestUtils.launchJob().getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step1").getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step1").getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2303 + " <jobLauncherTestUtils.launchStep('step1').getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2").getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2").getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2304 + " <jobLauncherTestUtils.launchStep('step2').getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step3").getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step3").getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2305 + " <jobLauncherTestUtils.launchStep('step3').getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2", jobContext).getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobLauncherTestUtils.launchStep("step2", jobContext).getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2306 + " <jobLauncherTestUtils.launchStep('step2', jobContext).getStatus()>")
chamada antiga: assertTrue(tasklet2.jobContextEntryFound)
nova chamada: assertTrue(tasklet2.jobContextEntryFound, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(id, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet" + id + "'", Integer.class).intValue())
nova chamada: assertEquals(id, jdbcTemplate.queryForObject("SELECT ID from TESTS where NAME = 'SampleTasklet" + id + "'", Integer.class).intValue(), "Era esperado valores iguais, mas  id é diferente de " + result2307 + " <jdbcTemplate.queryForObject('SELECT ID from TESTS where NAME = 'SampleTasklet' + id + ''', Integer.class).intValue()>")
chamada antiga: assertDoesNotThrow(() -> executeAssertEquals("input1.txt", "input1.txt"))
nova chamada: assertDoesNotThrow(() -> executeAssertEquals("input1.txt", "input1.txt"), "Era esperado que nenhuma exceção fosse lançada, mas  () - executeAssertEquals('input1.txt', 'input1.txt') foi lançada")
chamada antiga: assertDoesNotThrow(() -> executeAssertEquals("blank.txt", "blank.txt"))
nova chamada: assertDoesNotThrow(() -> executeAssertEquals("blank.txt", "blank.txt"), "Era esperado que nenhuma exceção fosse lançada, mas  () - executeAssertEquals('blank.txt', 'blank.txt') foi lançada")
chamada antiga: assertDoesNotThrow(() -> AssertFile.assertLineCount(5, new FileSystemResource(DIRECTORY + "input1.txt")))
nova chamada: assertDoesNotThrow(() -> AssertFile.assertLineCount(5, new FileSystemResource(DIRECTORY + "input1.txt")), "Era esperado que nenhuma exceção fosse lançada, mas  () - AssertFile.assertLineCount(5, new FileSystemResource(DIRECTORY + 'input1.txt')) foi lançada")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobInstance(jobName, instanceId))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobInstance(jobName, instanceId), "Era esperado não nulo, mas " + result2308 + " <MetaDataInstanceFactory.createJobInstance(jobName, instanceId)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobInstance())
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobInstance(), "Era esperado não nulo, mas " + result2309 + " <MetaDataInstanceFactory.createJobInstance()> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecution())
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecution(), "Era esperado não nulo, mas " + result2310 + " <MetaDataInstanceFactory.createJobExecution()> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecution(instanceId))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecution(instanceId), "Era esperado não nulo, mas " + result2311 + " <MetaDataInstanceFactory.createJobExecution(instanceId)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId), "Era esperado não nulo, mas " + result2312 + " <MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParametersString))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParametersString), "Era esperado não nulo, mas " + result2313 + " <MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParametersString)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParameters))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParameters), "Era esperado não nulo, mas " + result2314 + " <MetaDataInstanceFactory.createJobExecution(jobName, instanceId, executionId, jobParameters)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createStepExecution())
nova chamada: assertNotNull(MetaDataInstanceFactory.createStepExecution(), "Era esperado não nulo, mas " + result2315 + " <MetaDataInstanceFactory.createStepExecution()> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId))
nova chamada: assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId), "Era esperado não nulo, mas " + result2316 + " <MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId))
nova chamada: assertNotNull(MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId), "Era esperado não nulo, mas " + result2317 + " <MetaDataInstanceFactory.createStepExecution(stepName, stepExecutionId)> é nulo")
chamada antiga: assertNotNull(MetaDataInstanceFactory.createJobExecutionWithStepExecutions(executionId, List.of(stepName)))
nova chamada: assertNotNull(MetaDataInstanceFactory.createJobExecutionWithStepExecutions(executionId, List.of(stepName)), "Era esperado não nulo, mas " + result2318 + " <MetaDataInstanceFactory.createJobExecutionWithStepExecutions(executionId, List.of(stepName))> é nulo")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2319 + " <list.size()>")
chamada antiga: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs + 3 é diferente de " + result2320 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeSteps + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(beforeSteps + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  beforeSteps + 3 é diferente de " + result2321 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs é diferente de " + result2322 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  beforeSteps é diferente de " + result2323 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs + 2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs + 2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs + 2 é diferente de " + result2324 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs é diferente de " + result2325 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2326 + " <list.size()>")
chamada antiga: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs + 3 é diferente de " + result2327 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeSteps + 6, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(beforeSteps + 6, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  beforeSteps + 6 é diferente de " + result2328 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs é diferente de " + result2329 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(beforeSteps, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  beforeSteps é diferente de " + result2330 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs + 5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs + 5, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs + 5 é diferente de " + result2331 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs + 3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs + 3 é diferente de " + result2332 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs é diferente de " + result2333 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2334 + " <list.size()>")
chamada antiga: assertEquals("bar", list.get(0).getJobParameters().getString("foo"))
nova chamada: assertEquals("bar", list.get(0).getJobParameters().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2335 + " <list.get(0).getJobParameters().getString('foo')>")
chamada antiga: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(beforeJobs, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  beforeJobs é diferente de " + result2336 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  1 é diferente de " + result2337 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(2, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  2 é diferente de " + result2338 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_STEP_EXECUTION"), "Era esperado valores iguais, mas  0 é diferente de " + result2339 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_STEP_EXECUTION')>")
chamada antiga: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION"), "Era esperado valores iguais, mas  0 é diferente de " + result2340 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION')>")
chamada antiga: Assert.assertEquals("foo", this.stepScopedItemReader.read())
nova chamada: assertEquals("foo", this.stepScopedItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2341 + " <this.stepScopedItemReader.read()>")
chamada antiga: Assert.assertEquals("bar", this.stepScopedItemReader.read())
nova chamada: assertEquals("bar", this.stepScopedItemReader.read(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2342 + " <this.stepScopedItemReader.read()>")
chamada antiga: Assert.assertEquals("foo", this.jobScopedItemReader.read())
nova chamada: assertEquals("foo", this.jobScopedItemReader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2343 + " <this.jobScopedItemReader.read()>")
chamada antiga: Assert.assertEquals("bar", this.jobScopedItemReader.read())
nova chamada: assertEquals("bar", this.jobScopedItemReader.read(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2344 + " <this.jobScopedItemReader.read()>")
chamada antiga: Assert.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2345 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2346 + " <execution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2347 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(reader)
nova chamada: assertNotNull(reader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", reader.read())
nova chamada: assertEquals("foo", reader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2348 + " <reader.read()>")
chamada antiga: assertNotNull(reader)
nova chamada: assertNotNull(reader, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", reader.read())
nova chamada: assertEquals("foo", reader.read(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2349 + " <reader.read()>")
chamada antiga: assertEquals(status, execution.getStatus())
nova chamada: assertEquals(status, execution.getStatus(), "Era esperado valores iguais, mas  status é diferente de " + result2350 + " <execution.getStatus()>")
chamada antiga: assertEquals(stepExecutionCount, execution.getStepExecutions().size())
nova chamada: assertEquals(stepExecutionCount, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  stepExecutionCount é diferente de " + result2351 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, jobExplorer.getJobInstanceCount(jobName))
nova chamada: assertEquals(1, jobExplorer.getJobInstanceCount(jobName), "Era esperado valores iguais, mas  1 é diferente de " + result2352 + " <jobExplorer.getJobInstanceCount(jobName)>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2353 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2354 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2355 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2356 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2357 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2358 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2359 + " <value.call()>")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2360 + " <value.call()>")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("job scope"))
nova chamada: assertTrue(message.contains("job scope"), "Era esperado verdadeiro, mas " + result2361 + " <message.contains('job scope')> é falso")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("job scope"))
nova chamada: assertTrue(message.contains("job scope"), "Era esperado verdadeiro, mas " + result2362 + " <message.contains('job scope')> é falso")
chamada antiga: assertEquals("JOB", value.call())
nova chamada: assertEquals("JOB", value.call(), "Era esperado valores iguais, mas  'JOB' é diferente de " + result2363 + " <value.call()>")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("job scope"))
nova chamada: assertTrue(message.contains("job scope"), "Era esperado verdadeiro, mas " + result2364 + " <message.contains('job scope')> é falso")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2365 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2366 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2367 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2368 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2369 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2370 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2371 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2372 + " <value.call()>")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2373 + " <value.call()>")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("step scope"))
nova chamada: assertTrue(message.contains("step scope"), "Era esperado verdadeiro, mas " + result2374 + " <message.contains('step scope')> é falso")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("step scope"))
nova chamada: assertTrue(message.contains("step scope"), "Era esperado verdadeiro, mas " + result2375 + " <message.contains('step scope')> é falso")
chamada antiga: assertEquals("STEP", value.call())
nova chamada: assertEquals("STEP", value.call(), "Era esperado valores iguais, mas  'STEP' é diferente de " + result2376 + " <value.call()>")
chamada antiga: assertTrue(expectedException instanceof ScopeNotActiveException)
nova chamada: assertTrue(expectedException instanceof ScopeNotActiveException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(message.contains("step scope"))
nova chamada: assertTrue(message.contains("step scope"), "Era esperado verdadeiro, mas " + result2377 + " <message.contains('step scope')> é falso")
chamada antiga: assertEquals(status, execution.getStatus())
nova chamada: assertEquals(status, execution.getStatus(), "Era esperado valores iguais, mas  status é diferente de " + result2378 + " <execution.getStatus()>")
chamada antiga: assertEquals(stepExecutionCount, execution.getStepExecutions().size())
nova chamada: assertEquals(stepExecutionCount, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  stepExecutionCount é diferente de " + result2379 + " <execution.getStepExecutions().size()>")
chamada antiga: assertTrue(beforeCalled)
nova chamada: assertTrue(beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(afterCalled)
nova chamada: assertTrue(afterCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2380 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[step1:partition0, step1:partition1]", savedStepNames.toString())
nova chamada: assertEquals("[step1:partition0, step1:partition1]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[step1:partition0, step1:partition1]' é diferente de " + result2381 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(3, stepNames.size())
nova chamada: assertEquals(3, stepNames.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2382 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, step1:partition0, step1:partition1]", stepNames.toString())
nova chamada: assertEquals("[s1, step1:partition0, step1:partition1]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, step1:partition0, step1:partition1]' é diferente de " + result2383 + " <stepNames.toString()>")
chamada antiga: assertEquals("bar", jobExecution.getExecutionContext().get("foo"))
nova chamada: assertEquals("bar", jobExecution.getExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2384 + " <jobExecution.getExecutionContext().get('foo')>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2385 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[s2:partition0, s2:partition1, s2:partition2, s3]", savedStepNames.toString())
nova chamada: assertEquals("[s2:partition0, s2:partition1, s2:partition2, s3]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[s2:partition0, s2:partition1, s2:partition2, s3]' é diferente de " + result2386 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(5, stepNames.size())
nova chamada: assertEquals(5, stepNames.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2387 + " <stepNames.size()>")
chamada antiga: assertEquals("[s2, s2:partition0, s2:partition1, s2:partition2, s3]", stepNames.toString())
nova chamada: assertEquals("[s2, s2:partition0, s2:partition1, s2:partition2, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[s2, s2:partition0, s2:partition1, s2:partition2, s3]' é diferente de " + result2388 + " <stepNames.toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2389 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", savedStepNames.toString())
nova chamada: assertEquals("[j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]' é diferente de " + result2390 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(7, stepNames.size())
nova chamada: assertEquals(7, stepNames.size(), "Era esperado valores iguais, mas  7 é diferente de " + result2391 + " <stepNames.size()>")
chamada antiga: assertEquals("[j3s1, j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", stepNames.toString())
nova chamada: assertEquals("[j3s1, j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]", stepNames.toString(), "Era esperado valores iguais, mas  '[j3s1, j3s1:partition0, j3s1:partition1, j3s1:partition2, j3s1:partition3, j3s1:partition4, j3s1:partition5]' é diferente de " + result2392 + " <stepNames.toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2393 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[]", savedStepNames.toString())
nova chamada: assertEquals("[]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2394 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(7, stepNames.size())
nova chamada: assertEquals(7, stepNames.size(), "Era esperado valores iguais, mas  7 é diferente de " + result2395 + " <stepNames.size()>")
chamada antiga: assertEquals("[j4s1, j4s1:partition0, j4s1:partition1, j4s1:partition2, j4s1:partition3, j4s1:partition4, j4s1:partition5]", stepNames.toString())
nova chamada: assertEquals("[j4s1, j4s1:partition0, j4s1:partition1, j4s1:partition2, j4s1:partition3, j4s1:partition4, j4s1:partition5]", stepNames.toString(), "Era esperado valores iguais, mas  '[j4s1, j4s1:partition0, j4s1:partition1, j4s1:partition2, j4s1:partition3, j4s1:partition4, j4s1:partition5]' é diferente de " + result2396 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job5)
nova chamada: assertNotNull(job5, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2397 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, stepNames.size())
nova chamada: assertEquals(1, stepNames.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2398 + " <stepNames.size()>")
chamada antiga: assertEquals("[j5s1]", stepNames.toString())
nova chamada: assertEquals("[j5s1]", stepNames.toString(), "Era esperado valores iguais, mas  '[j5s1]' é diferente de " + result2399 + " <stepNames.toString()>")
chamada antiga: assertEquals(3, stepNamesList.size())
nova chamada: assertEquals(3, stepNamesList.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2400 + " <stepNamesList.size()>")
chamada antiga: assertEquals("[s1, unknown, s2]", stepNamesList.toString())
nova chamada: assertEquals("[s1, unknown, s2]", stepNamesList.toString(), "Era esperado valores iguais, mas  '[s1, unknown, s2]' é diferente de " + result2401 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2402 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2403 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2404 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2405 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result2406 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.UNKNOWN é diferente de " + result2407 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2408 + " <stepNamesList.size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2409 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2410 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2411 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2412 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals("FOO", stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals("FOO", stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result2413 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2414 + " <stepNamesList.size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2415 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2416 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2417 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2418 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2419 + " <list.size()>")
chamada antiga: assertTrue(list.get(0) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(list.get(0) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2420 + " <list.size()>")
chamada antiga: assertTrue(list.get(0) instanceof DummyChunkListener)
nova chamada: assertTrue(list.get(0) instanceof DummyChunkListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2421 + " <list.size()>")
chamada antiga: assertTrue(list.get(0) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(list.get(0) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(1) instanceof DummyChunkListener)
nova chamada: assertTrue(list.get(1) instanceof DummyChunkListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2422 + " <list.size()>")
chamada antiga: assertTrue(list.get(0) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(list.get(0) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(list.get(1) instanceof ItemListenerSupport)
nova chamada: assertTrue(list.get(1) instanceof ItemListenerSupport, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2423 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2424 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2425 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2426 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'EARLY TERMINATION' é diferente de " + result2427 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2428 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2429 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2430 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2431 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2432 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2433 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2434 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2435 + " <jobExecution.getStatus()>")
chamada antiga: Assert.assertNull(this.stepScopedItemReader.read())
nova chamada: assertNull(this.stepScopedItemReader.read(), "Era esperado nulo, mas " + result2436 + " <this.stepScopedItemReader.read()> não é nulo")
chamada antiga: Assert.assertNull(this.jobScopedItemReader.read())
nova chamada: assertNull(this.jobScopedItemReader.read(), "Era esperado nulo, mas " + result2437 + " <this.jobScopedItemReader.read()> não é nulo")
chamada antiga: parent.fail(pattern)
nova chamada: fail(pattern, "A execução falhou por uma causa deliberada")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", tasklet.getName())
nova chamada: assertEquals("bar", tasklet.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2438 + " <tasklet.getName()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2439 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", tasklet.getName())
nova chamada: assertEquals("foo", tasklet.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2440 + " <tasklet.getName()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2441 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(job3)
nova chamada: assertNotNull(job3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(FlowJob.class, job3.getClass())
nova chamada: assertEquals(FlowJob.class, job3.getClass(), "Era esperado valores iguais, mas  FlowJob.class é diferente de " + result2442 + " <job3.getClass()>")
chamada antiga: assertEquals("foobar", tasklet.getName())
nova chamada: assertEquals("foobar", tasklet.getName(), "Era esperado valores iguais, mas  'foobar' é diferente de " + result2443 + " <tasklet.getName()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2444 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(job4)
nova chamada: assertNotNull(job4, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(FlowJob.class, job4.getClass())
nova chamada: assertEquals(FlowJob.class, job4.getClass(), "Era esperado valores iguais, mas  FlowJob.class é diferente de " + result2445 + " <job4.getClass()>")
chamada antiga: assertEquals(DummyNamespaceHandler.LABEL, tasklet.getName())
nova chamada: assertEquals(DummyNamespaceHandler.LABEL, tasklet.getName(), "Era esperado valores iguais, mas  DummyNamespaceHandler.LABEL é diferente de " + result2446 + " <tasklet.getName()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2447 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(stepNames, stepNamesList.toString())
nova chamada: assertEquals(stepNames, stepNamesList.toString(), "Era esperado valores iguais, mas  stepNames é diferente de " + result2448 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2449 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2450 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2451 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2452 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2453 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2454 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2455 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2456 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2457 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2458 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2459 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2460 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2461 + " <stepNamesList.size()>")
chamada antiga: assertEquals(stepNames, stepNamesList.toString())
nova chamada: assertEquals(stepNames, stepNamesList.toString(), "Era esperado valores iguais, mas  stepNames é diferente de " + result2462 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2463 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2464 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2465 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2466 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2467 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result2468 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2469 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2470 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2471 + " <stepNamesList.size()>")
chamada antiga: assertEquals("[s1]", stepNamesList.toString())
nova chamada: assertEquals("[s1]", stepNamesList.toString(), "Era esperado valores iguais, mas  '[s1]' é diferente de " + result2472 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2473 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2474 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2475 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2476 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2477 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result2478 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2479 + " <stepNamesList.size()>")
chamada antiga: assertEquals("[s2]", stepNamesList.toString())
nova chamada: assertEquals("[s2]", stepNamesList.toString(), "Era esperado valores iguais, mas  '[s2]' é diferente de " + result2480 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2481 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2482 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2483 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2484 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(validator)
nova chamada: assertNotNull(validator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(validator)
nova chamada: assertNotNull(validator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(job3)
nova chamada: assertNotNull(job3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(validator)
nova chamada: assertNotNull(validator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(job1 instanceof AbstractJob)
nova chamada: assertTrue(job1 instanceof AbstractJob, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(validator instanceof DefaultJobParametersValidator)
nova chamada: assertTrue(validator instanceof DefaultJobParametersValidator, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, keys.size())
nova chamada: assertEquals(2, keys.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2485 + " <keys.size()>")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2486 + " <list.size()>")
chamada antiga: assertTrue(a)
nova chamada: assertTrue(a, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b)
nova chamada: assertTrue(b, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(c)
nova chamada: assertTrue(c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2487 + " <list.size()>")
chamada antiga: assertTrue(a)
nova chamada: assertTrue(a, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b)
nova chamada: assertTrue(b, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2488 + " <list.size()>")
chamada antiga: assertTrue(a)
nova chamada: assertTrue(a, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b)
nova chamada: assertTrue(b, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2489 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2490 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2491 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2492 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2493 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2494 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2495 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2496 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s2"))
nova chamada: assertTrue(stepNamesList.contains("s2"), "Era esperado verdadeiro, mas " + result2497 + " <stepNamesList.contains('s2')> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2498 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2499 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2500 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2501 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.ABANDONED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.ABANDONED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.ABANDONED é diferente de " + result2502 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2503 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2504 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2505 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2506 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result2507 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(stepNames, stepNamesList.toString())
nova chamada: assertEquals(stepNames, stepNamesList.toString(), "Era esperado valores iguais, mas  stepNames é diferente de " + result2508 + " <stepNamesList.toString()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(job instanceof FlowJob)
nova chamada: assertTrue(job instanceof FlowJob, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(t1.isExecuted())
nova chamada: assertTrue(t1.isExecuted(), "Era esperado verdadeiro, mas " + result2509 + " <t1.isExecuted()> é falso")
chamada antiga: assertTrue(t2.isExecuted())
nova chamada: assertTrue(t2.isExecuted(), "Era esperado verdadeiro, mas " + result2510 + " <t2.isExecuted()> é falso")
chamada antiga: assertTrue(t3.isExecuted())
nova chamada: assertTrue(t3.isExecuted(), "Era esperado verdadeiro, mas " + result2511 + " <t3.isExecuted()> é falso")
chamada antiga: assertTrue(t4.isExecuted())
nova chamada: assertTrue(t4.isExecuted(), "Era esperado verdadeiro, mas " + result2512 + " <t4.isExecuted()> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2513 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(4, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(4, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  4 é diferente de " + result2514 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(listener.isExecuted())
nova chamada: assertTrue(listener.isExecuted(), "Era esperado verdadeiro, mas " + result2515 + " <listener.isExecuted()> é falso")
chamada antiga: assertTrue(tasklet instanceof TestTasklet)
nova chamada: assertTrue(tasklet instanceof TestTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(taskletName, testTasklet.getName())
nova chamada: assertEquals(taskletName, testTasklet.getName(), "Era esperado valores iguais, mas  taskletName é diferente de " + result2516 + " <testTasklet.getName()>")
chamada antiga: assertFalse(testTasklet.isExecuted())
nova chamada: assertFalse(testTasklet.isExecuted(), "Era esperado falso, mas " + result2517 + " <testTasklet.isExecuted()> é verdadeiro ")
chamada antiga: assertTrue(exception.getMessage().contains("The element [s2] is unreachable"))
nova chamada: assertTrue(exception.getMessage().contains("The element [s2] is unreachable"), "Era esperado verdadeiro, mas " + result2518 + " <exception.getMessage().contains('The element [s2] is unreachable')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("The element [s4] is unreachable"))
nova chamada: assertTrue(exception.getMessage().contains("The element [s4] is unreachable"), "Era esperado verdadeiro, mas " + result2519 + " <exception.getMessage().contains('The element [s4] is unreachable')> é falso")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2520 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2521 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2522 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2523 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("EARLY TERMINATION", jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'EARLY TERMINATION' é diferente de " + result2524 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2525 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2526 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2527 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2528 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2529 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2530 + " <stepNamesList.size()>")
chamada antiga: assertEquals("[s1, unknown]", stepNamesList.toString())
nova chamada: assertEquals("[s1, unknown]", stepNamesList.toString(), "Era esperado valores iguais, mas  '[s1, unknown]' é diferente de " + result2531 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result2532 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.UNKNOWN, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.UNKNOWN, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.UNKNOWN é diferente de " + result2533 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2534 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2535 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result2536 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.UNKNOWN, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.UNKNOWN é diferente de " + result2537 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertTrue(beforeCalled)
nova chamada: assertTrue(beforeCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(afterCalled)
nova chamada: assertTrue(afterCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: fail(pattern, "A execução falhou por uma causa deliberada")
nova chamada: fail(pattern, "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2538 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2539 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2540 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2541 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("FAILED", jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("FAILED", jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FAILED' é diferente de " + result2542 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2543 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2544 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2545 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2546 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2547 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2548 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2549 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2550 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("FAILED", jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("FAILED", jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FAILED' é diferente de " + result2551 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution3.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution3.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2552 + " <stepExecution3.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution3.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution3.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2553 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2554 + " <stepExecution3.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(2, applicationContext.getBeanNamesForType(Job.class).length)
nova chamada: assertEquals(2, applicationContext.getBeanNamesForType(Job.class).length, "Era esperado valores iguais, mas  2 é diferente de " + " applicationContext.getBeanNamesForType(Job.class).length")
chamada antiga: assertEquals(2, jobRegistry.getJobNames().size())
nova chamada: assertEquals(2, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2555 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(2, retryable.size())
nova chamada: assertEquals(2, retryable.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2556 + " <retryable.size()>")
chamada antiga: assertTrue(retryable.containsKey(NullPointerException.class))
nova chamada: assertTrue(retryable.containsKey(NullPointerException.class), "Era esperado verdadeiro, mas " + result2557 + " <retryable.containsKey(NullPointerException.class)> é falso")
chamada antiga: assertTrue(retryable.containsKey(ArithmeticException.class))
nova chamada: assertTrue(retryable.containsKey(ArithmeticException.class), "Era esperado verdadeiro, mas " + result2558 + " <retryable.containsKey(ArithmeticException.class)> é falso")
chamada antiga: assertEquals(2, policy.getMaxAttempts())
nova chamada: assertEquals(2, policy.getMaxAttempts(), "Era esperado valores iguais, mas  2 é diferente de " + result2559 + " <policy.getMaxAttempts()>")
chamada antiga: assertTrue(policy.shouldSkip(new NullPointerException(), 0))
nova chamada: assertTrue(policy.shouldSkip(new NullPointerException(), 0), "Era esperado verdadeiro, mas " + result2560 + " <policy.shouldSkip(new NullPointerException(), 0)> é falso")
chamada antiga: assertTrue(policy.shouldSkip(new ArithmeticException(), 0))
nova chamada: assertTrue(policy.shouldSkip(new ArithmeticException(), 0), "Era esperado verdadeiro, mas " + result2561 + " <policy.shouldSkip(new ArithmeticException(), 0)> é falso")
chamada antiga: assertFalse(policy.shouldSkip(new NullPointerException(), 0))
nova chamada: assertFalse(policy.shouldSkip(new NullPointerException(), 0), "Era esperado falso, mas " + result2562 + " <policy.shouldSkip(new NullPointerException(), 0)> é verdadeiro ")
chamada antiga: assertTrue(policy.shouldSkip(new ArithmeticException(), 0))
nova chamada: assertTrue(policy.shouldSkip(new ArithmeticException(), 0), "Era esperado verdadeiro, mas " + result2563 + " <policy.shouldSkip(new ArithmeticException(), 0)> é falso")
chamada antiga: assertTrue(chunkProcessor instanceof SimpleChunkProcessor<?, ?>)
nova chamada: assertTrue(chunkProcessor instanceof SimpleChunkProcessor<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(3, retryable.size())
nova chamada: assertEquals(3, retryable.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2564 + " <retryable.size()>")
chamada antiga: assertEquals(2, retryable.size())
nova chamada: assertEquals(2, retryable.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2565 + " <retryable.size()>")
chamada antiga: assertEquals(3, retryable.size())
nova chamada: assertEquals(3, retryable.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2566 + " <retryable.size()>")
chamada antiga: assertEquals(5, skippable.size())
nova chamada: assertEquals(5, skippable.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2567 + " <skippable.size()>")
chamada antiga: assertEquals(3, skippable.size())
nova chamada: assertEquals(3, skippable.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2568 + " <skippable.size()>")
chamada antiga: assertFalse(skippable.containsKey(ArithmeticException.class))
nova chamada: assertFalse(skippable.containsKey(ArithmeticException.class), "Era esperado falso, mas " + result2569 + " <skippable.containsKey(ArithmeticException.class)> é verdadeiro ")
chamada antiga: assertFalse(skippable.containsKey(DeadlockLoserDataAccessException.class))
nova chamada: assertFalse(skippable.containsKey(DeadlockLoserDataAccessException.class), "Era esperado falso, mas " + result2570 + " <skippable.containsKey(DeadlockLoserDataAccessException.class)> é verdadeiro ")
chamada antiga: assertEquals(2, streams.size())
nova chamada: assertEquals(2, streams.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2571 + " <streams.size()>")
chamada antiga: assertTrue(c)
nova chamada: assertTrue(c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, retryListeners.size())
nova chamada: assertEquals(2, retryListeners.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2572 + " <retryListeners.size()>")
chamada antiga: assertTrue(g)
nova chamada: assertTrue(g, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(h)
nova chamada: assertTrue(h, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, streams.size())
nova chamada: assertEquals(1, streams.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2573 + " <streams.size()>")
chamada antiga: assertTrue(c)
nova chamada: assertTrue(c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, retryListeners.size())
nova chamada: assertEquals(1, retryListeners.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2574 + " <retryListeners.size()>")
chamada antiga: assertTrue(h)
nova chamada: assertTrue(h, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(beans.containsKey(stepName))
nova chamada: assertTrue(beans.containsKey(stepName), "Era esperado verdadeiro, mas " + result2575 + " <beans.containsKey(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(classified.containsKey(cls))
nova chamada: assertTrue(classified.containsKey(cls), "Era esperado verdadeiro, mas " + result2576 + " <classified.containsKey(cls)> é falso")
chamada antiga: assertEquals(include, classified.get(cls))
nova chamada: assertEquals(include, classified.get(cls), "Era esperado valores iguais, mas  include é diferente de " + result2577 + " <classified.get(cls)>")
chamada antiga: assertTrue(beans.containsKey(stepName))
nova chamada: assertTrue(beans.containsKey(stepName), "Era esperado verdadeiro, mas " + result2578 + " <beans.containsKey(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(beans.containsKey(stepName))
nova chamada: assertTrue(beans.containsKey(stepName), "Era esperado verdadeiro, mas " + result2579 + " <beans.containsKey(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(jobRepository)
nova chamada: assertNotNull(jobRepository, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2580 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2581 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(reader.isExecuted())
nova chamada: assertTrue(reader.isExecuted(), "Era esperado verdadeiro, mas " + result2582 + " <reader.isExecuted()> é falso")
chamada antiga: assertTrue(reader.isOpened())
nova chamada: assertTrue(reader.isOpened(), "Era esperado verdadeiro, mas " + result2583 + " <reader.isOpened()> é falso")
chamada antiga: assertTrue(processor.isExecuted())
nova chamada: assertTrue(processor.isExecuted(), "Era esperado verdadeiro, mas " + result2584 + " <processor.isExecuted()> é falso")
chamada antiga: assertTrue(writer.isExecuted())
nova chamada: assertTrue(writer.isExecuted(), "Era esperado verdadeiro, mas " + result2585 + " <writer.isExecuted()> é falso")
chamada antiga: assertTrue(listener.isExecuted())
nova chamada: assertTrue(listener.isExecuted(), "Era esperado verdadeiro, mas " + result2586 + " <listener.isExecuted()> é falso")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2587 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2588 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2589 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tasklet instanceof DummyTasklet)
nova chamada: assertTrue(tasklet instanceof DummyTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(stepOperations instanceof TaskExecutorRepeatTemplate)
nova chamada: assertTrue(stepOperations instanceof TaskExecutorRepeatTemplate, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tasklet instanceof DummyTasklet)
nova chamada: assertTrue(tasklet instanceof DummyTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tasklet instanceof DummyTasklet)
nova chamada: assertTrue(tasklet instanceof DummyTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tasklet instanceof ChunkOrientedTasklet<?>)
nova chamada: assertTrue(tasklet instanceof ChunkOrientedTasklet<?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Integer.valueOf(10), throttleLimit)
nova chamada: assertEquals(Integer.valueOf(10), throttleLimit, "Era esperado valores iguais, mas " + result2590 + " <Integer.valueOf(10)> é diferente de " + " throttleLimit")
chamada antiga: assertTrue(tasklet instanceof ChunkOrientedTasklet<?>)
nova chamada: assertTrue(tasklet instanceof ChunkOrientedTasklet<?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"))
nova chamada: assertFalse((Boolean) ReflectionTestUtils.getField(tasklet, "buffering"), "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertTrue(completionPolicy instanceof DummyCompletionPolicy)
nova chamada: assertTrue(completionPolicy instanceof DummyCompletionPolicy, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof PartitionStep)
nova chamada: assertTrue(step instanceof PartitionStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(handler instanceof TaskExecutorPartitionHandler)
nova chamada: assertTrue(handler instanceof TaskExecutorPartitionHandler, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof PartitionStep)
nova chamada: assertTrue(step instanceof PartitionStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(handler instanceof Advised)
nova chamada: assertTrue(handler instanceof Advised, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(step instanceof FlowStep)
nova chamada: assertTrue(step instanceof FlowStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(handler instanceof SimpleFlow)
nova chamada: assertTrue(handler instanceof SimpleFlow, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2591 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(jobRepository)
nova chamada: assertNotNull(jobRepository, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2592 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(5, stepNames.size())
nova chamada: assertEquals(5, stepNames.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2593 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, job1.flow, s2, s3, s4]", stepNames.toString())
nova chamada: assertEquals("[s1, job1.flow, s2, s3, s4]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, job1.flow, s2, s3, s4]' é diferente de " + result2594 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2595 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(5, stepNames.size())
nova chamada: assertEquals(5, stepNames.size(), "Era esperado valores iguais, mas  5 é diferente de " + result2596 + " <stepNames.size()>")
chamada antiga: assertEquals("[job2.s1, job2.flow, s2, s3, job2.s4]", stepNames.toString())
nova chamada: assertEquals("[job2.s1, job2.flow, s2, s3, job2.s4]", stepNames.toString(), "Era esperado valores iguais, mas  '[job2.s1, job2.flow, s2, s3, job2.s4]' é diferente de " + result2597 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job3)
nova chamada: assertNotNull(job3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2598 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(6, stepNames.size())
nova chamada: assertEquals(6, stepNames.size(), "Era esperado valores iguais, mas  6 é diferente de " + result2599 + " <stepNames.size()>")
chamada antiga: assertEquals("[job3.flow, s2, s3, job3.flow, s2, s3]", stepNames.toString())
nova chamada: assertEquals("[job3.flow, s2, s3, job3.flow, s2, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[job3.flow, s2, s3, job3.flow, s2, s3]' é diferente de " + result2600 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job4)
nova chamada: assertNotNull(job4, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2601 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, stepNames.size())
nova chamada: assertEquals(3, stepNames.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2602 + " <stepNames.size()>")
chamada antiga: assertEquals("[job4.flow, s2, s3]", stepNames.toString())
nova chamada: assertEquals("[job4.flow, s2, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[job4.flow, s2, s3]' é diferente de " + result2603 + " <stepNames.toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2604 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, stepNames.size())
nova chamada: assertEquals(1, stepNames.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2605 + " <stepNames.size()>")
chamada antiga: assertEquals("[job4.flow]", stepNames.toString())
nova chamada: assertEquals("[job4.flow]", stepNames.toString(), "Era esperado valores iguais, mas  '[job4.flow]' é diferente de " + result2606 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2607 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2608 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals("[s1, s3]", names.toString())
nova chamada: assertEquals("[s1, s3]", names.toString(), "Era esperado valores iguais, mas  '[s1, s3]' é diferente de " + result2609 + " <names.toString()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2610 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, stepNames.size())
nova chamada: assertEquals(3, stepNames.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2611 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, job1.flow, s4]", stepNames.toString())
nova chamada: assertEquals("[s1, job1.flow, s4]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, job1.flow, s4]' é diferente de " + result2612 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2613 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, stepNames.size())
nova chamada: assertEquals(3, stepNames.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2614 + " <stepNames.size()>")
chamada antiga: assertEquals("[job2.s1, job2.flow, job2.s4]", stepNames.toString())
nova chamada: assertEquals("[job2.s1, job2.flow, job2.s4]", stepNames.toString(), "Era esperado valores iguais, mas  '[job2.s1, job2.flow, job2.s4]' é diferente de " + result2615 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2616 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2617 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2618 + " <list.size()>")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2619 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2620 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(reader.isExecuted())
nova chamada: assertTrue(reader.isExecuted(), "Era esperado verdadeiro, mas " + result2621 + " <reader.isExecuted()> é falso")
chamada antiga: assertTrue(reader.isOpened())
nova chamada: assertTrue(reader.isOpened(), "Era esperado verdadeiro, mas " + result2622 + " <reader.isOpened()> é falso")
chamada antiga: assertTrue(processor.isExecuted())
nova chamada: assertTrue(processor.isExecuted(), "Era esperado verdadeiro, mas " + result2623 + " <processor.isExecuted()> é falso")
chamada antiga: assertTrue(writer.isExecuted())
nova chamada: assertTrue(writer.isExecuted(), "Era esperado verdadeiro, mas " + result2624 + " <writer.isExecuted()> é falso")
chamada antiga: assertTrue(listener.isExecuted())
nova chamada: assertTrue(listener.isExecuted(), "Era esperado verdadeiro, mas " + result2625 + " <listener.isExecuted()> é falso")
chamada antiga: assertTrue(retryListener.isExecuted())
nova chamada: assertTrue(retryListener.isExecuted(), "Era esperado verdadeiro, mas " + result2626 + " <retryListener.isExecuted()> é falso")
chamada antiga: assertEquals(2, job1Listeners.size())
nova chamada: assertEquals(2, job1Listeners.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2627 + " <job1Listeners.size()>")
chamada antiga: assertTrue(a)
nova chamada: assertTrue(a, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b)
nova chamada: assertTrue(b, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, job2Listeners.size())
nova chamada: assertEquals(1, job2Listeners.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2628 + " <job2Listeners.size()>")
chamada antiga: assertTrue(c)
nova chamada: assertTrue(c, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(2, jobListeners.size())
nova chamada: assertEquals(2, jobListeners.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2629 + " <jobListeners.size()>")
chamada antiga: assertTrue(a)
nova chamada: assertTrue(a, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(b)
nova chamada: assertTrue(b, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository(defaultRepoJob) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository(defaultRepoJob) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository(specifiedRepoJob) instanceof DummyJobRepository)
nova chamada: assertTrue(getJobRepository(specifiedRepoJob) instanceof DummyJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository(inheritSpecifiedRepoJob) instanceof DummyJobRepository)
nova chamada: assertTrue(getJobRepository(inheritSpecifiedRepoJob) instanceof DummyJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository(overrideInheritedRepoJob) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository(overrideInheritedRepoJob) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, getListeners(listenerClearingJob).size())
nova chamada: assertEquals(0, getListeners(listenerClearingJob).size(), "Era esperado valores iguais, mas  0 é diferente de " + result2630 + " <getListeners(listenerClearingJob).size()>")
chamada antiga: assertTrue(job instanceof AbstractJob)
nova chamada: assertTrue(job instanceof AbstractJob, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(jobRepository instanceof JobRepository)
nova chamada: assertTrue(jobRepository instanceof JobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(job instanceof AbstractJob)
nova chamada: assertTrue(job instanceof AbstractJob, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(jobRepository)
nova chamada: assertNotNull(jobRepository, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2631 + " <stepNamesList.size()>")
chamada antiga: assertEquals("[s1, s2]", stepNamesList.toString())
nova chamada: assertEquals("[s1, s2]", stepNamesList.toString(), "Era esperado valores iguais, mas  '[s1, s2]' é diferente de " + result2632 + " <stepNamesList.toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2633 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2634 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2635 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2636 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2637 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2638 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2639 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(4, stepNames.size())
nova chamada: assertEquals(4, stepNames.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2640 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, s2, s3, s4]", stepNames.toString())
nova chamada: assertEquals("[s1, s2, s3, s4]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, s2, s3, s4]' é diferente de " + result2641 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job2)
nova chamada: assertNotNull(job2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2642 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result2643 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(3, stepNames.size())
nova chamada: assertEquals(3, stepNames.size(), "Era esperado valores iguais, mas  3 é diferente de " + result2644 + " <stepNames.size()>")
chamada antiga: assertEquals("[s2, s3, job2.s1]", stepNames.toString())
nova chamada: assertEquals("[s2, s3, job2.s1]", stepNames.toString(), "Era esperado valores iguais, mas  '[s2, s3, job2.s1]' é diferente de " + result2645 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job3)
nova chamada: assertNotNull(job3, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2646 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(2, stepNames.size())
nova chamada: assertEquals(2, stepNames.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2647 + " <stepNames.size()>")
chamada antiga: assertEquals("[s2, s3]", stepNames.toString())
nova chamada: assertEquals("[s2, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[s2, s3]' é diferente de " + result2648 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job4)
nova chamada: assertNotNull(job4, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2649 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(4, stepNames.size())
nova chamada: assertEquals(4, stepNames.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2650 + " <stepNames.size()>")
chamada antiga: assertEquals("[s2, s3, s2, s3]", stepNames.toString())
nova chamada: assertEquals("[s2, s3, s2, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[s2, s3, s2, s3]' é diferente de " + result2651 + " <stepNames.toString()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2652 + " <stepNamesList.size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result2653 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2654 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result2655 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.ABANDONED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.ABANDONED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.ABANDONED é diferente de " + result2656 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2657 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2658 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2659 + " <stepNamesList.size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2660 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2661 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2662 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution2.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2663 + " <stepExecution2.getExitStatus()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2664 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[s1:partition0]", savedStepNames.toString())
nova chamada: assertEquals("[s1:partition0]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[s1:partition0]' é diferente de " + result2665 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(2, stepNames.size())
nova chamada: assertEquals(2, stepNames.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2666 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, s1:partition0]", stepNames.toString())
nova chamada: assertEquals("[s1, s1:partition0]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, s1:partition0]' é diferente de " + result2667 + " <stepNames.toString()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2668 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2669 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2670 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2671 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2672 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result2673 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2674 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2675 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertTrue(abstractStep.isAllowStartIfComplete())
nova chamada: assertTrue(abstractStep.isAllowStartIfComplete(), "Era esperado verdadeiro, mas " + result2676 + " <abstractStep.isAllowStartIfComplete()> é falso")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(1, stepNamesList.size())
nova chamada: assertEquals(1, stepNamesList.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2677 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2678 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2679 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2680 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2681 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution1.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2682 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2683 + " <stepExecution1.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2684 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(4, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(4, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  4 é diferente de " + result2685 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals("[s1, s2, s3, s4]", names.toString())
nova chamada: assertEquals("[s1, s2, s3, s4]", names.toString(), "Era esperado valores iguais, mas  '[s1, s2, s3, s4]' é diferente de " + result2686 + " <names.toString()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2687 + " <jobExecution.getStatus()>")
chamada antiga: assertTrue(stepNamesList.contains("s3"))
nova chamada: assertTrue(stepNamesList.contains("s3"), "Era esperado verdadeiro, mas " + result2688 + " <stepNamesList.contains('s3')> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2689 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result2690 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2691 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2692 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2693 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2694 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2695 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution3.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution3.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2696 + " <stepExecution3.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution3.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution3.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2697 + " <stepExecution3.getExitStatus()>")
chamada antiga: assertTrue(reader instanceof TestReader)
nova chamada: assertTrue(reader instanceof TestReader, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(processor instanceof TestProcessor)
nova chamada: assertTrue(processor instanceof TestProcessor, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(writer instanceof TestWriter)
nova chamada: assertTrue(writer instanceof TestWriter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(reader instanceof ItemReaderAdapter<?>)
nova chamada: assertTrue(reader instanceof ItemReaderAdapter<?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(readerObject instanceof DummyItemHandlerAdapter)
nova chamada: assertTrue(readerObject instanceof DummyItemHandlerAdapter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("dummyRead", readerMethod)
nova chamada: assertEquals("dummyRead", readerMethod, "Era esperado valores iguais, mas  'dummyRead' é diferente de " + " readerMethod")
chamada antiga: assertTrue(processor instanceof ItemProcessorAdapter<?, ?>)
nova chamada: assertTrue(processor instanceof ItemProcessorAdapter<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(processorObject instanceof DummyItemHandlerAdapter)
nova chamada: assertTrue(processorObject instanceof DummyItemHandlerAdapter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("dummyProcess", processorMethod)
nova chamada: assertEquals("dummyProcess", processorMethod, "Era esperado valores iguais, mas  'dummyProcess' é diferente de " + " processorMethod")
chamada antiga: assertTrue(writer instanceof ItemWriterAdapter<?>)
nova chamada: assertTrue(writer instanceof ItemWriterAdapter<?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(writerObject instanceof DummyItemHandlerAdapter)
nova chamada: assertTrue(writerObject instanceof DummyItemHandlerAdapter, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("dummyWrite", writerMethod)
nova chamada: assertEquals("dummyWrite", writerMethod, "Era esperado valores iguais, mas  'dummyWrite' é diferente de " + " writerMethod")
chamada antiga: assertEquals(4, readers.size())
nova chamada: assertEquals(4, readers.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2698 + " <readers.size()>")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2699 + " <stepNamesList.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2700 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result2701 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2702 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2703 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2704 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2705 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2706 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(job1)
nova chamada: assertNotNull(job1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2707 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[s2, s2, s2, s2, s3, s3, s3, s3]", savedStepNames.toString())
nova chamada: assertEquals("[s2, s2, s2, s2, s3, s3, s3, s3]", savedStepNames.toString(), "Era esperado valores iguais, mas  '[s2, s2, s2, s2, s3, s3, s3, s3]' é diferente de " + result2708 + " <savedStepNames.toString()>")
chamada antiga: assertEquals(14, stepNames.size())
nova chamada: assertEquals(14, stepNames.size(), "Era esperado valores iguais, mas  14 é diferente de " + result2709 + " <stepNames.size()>")
chamada antiga: assertEquals("[s1, s1, s1:partition0, s1:partition0, s1:partition1, s1:partition1, s2, s2, s2, s2, s3, s3, s3, s3]", stepNames.toString())
nova chamada: assertEquals("[s1, s1, s1:partition0, s1:partition0, s1:partition1, s1:partition1, s2, s2, s2, s2, s3, s3, s3, s3]", stepNames.toString(), "Era esperado valores iguais, mas  '[s1, s1, s1:partition0, s1:partition0, s1:partition1, s1:partition1, s2, s2, s2, s2, s3, s3, s3, s3]' é diferente de " + result2710 + " <stepNames.toString()>")
chamada antiga: assertEquals(2, stepNamesList.size())
nova chamada: assertEquals(2, stepNamesList.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2711 + " <stepNamesList.size()>")
chamada antiga: assertTrue(stepNamesList.contains("s1"))
nova chamada: assertTrue(stepNamesList.contains("s1"), "Era esperado verdadeiro, mas " + result2712 + " <stepNamesList.contains('s1')> é falso")
chamada antiga: assertTrue(stepNamesList.contains("fail"))
nova chamada: assertTrue(stepNamesList.contains("fail"), "Era esperado verdadeiro, mas " + result2713 + " <stepNamesList.contains('fail')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2714 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), jobExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), jobExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2715 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2716 + " <jobExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2717 + " <stepExecution1.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution1.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2718 + " <stepExecution1.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2719 + " <stepExecution2.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution2.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result2720 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result2721 + " <stepExecution2.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2722 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2723 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertTrue(reader.isExecuted())
nova chamada: assertTrue(reader.isExecuted(), "Era esperado verdadeiro, mas " + result2724 + " <reader.isExecuted()> é falso")
chamada antiga: assertTrue(reader.isOpened())
nova chamada: assertTrue(reader.isOpened(), "Era esperado verdadeiro, mas " + result2725 + " <reader.isOpened()> é falso")
chamada antiga: assertTrue(writer.isExecuted())
nova chamada: assertTrue(writer.isExecuted(), "Era esperado verdadeiro, mas " + result2726 + " <writer.isExecuted()> é falso")
chamada antiga: assertTrue(listener.isExecuted())
nova chamada: assertTrue(listener.isExecuted(), "Era esperado verdadeiro, mas " + result2727 + " <listener.isExecuted()> é falso")
chamada antiga: assertNotNull(job)
nova chamada: assertNotNull(job, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2728 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2729 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(Integer.valueOf(10), throttleLimit)
nova chamada: assertEquals(Integer.valueOf(10), throttleLimit, "Era esperado valores iguais, mas " + result2730 + " <Integer.valueOf(10)> é diferente de " + " throttleLimit")
chamada antiga: assertTrue(completionPolicy instanceof SimpleCompletionPolicy)
nova chamada: assertTrue(completionPolicy instanceof SimpleCompletionPolicy, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(25, ReflectionTestUtils.getField(completionPolicy, "chunkSize"))
nova chamada: assertEquals(25, ReflectionTestUtils.getField(completionPolicy, "chunkSize"), "Era esperado valores iguais, mas  25 é diferente de " + result2731 + " <ReflectionTestUtils.getField(completionPolicy, 'chunkSize')>")
chamada antiga: assertTrue(completionPolicy instanceof DummyCompletionPolicy)
nova chamada: assertTrue(completionPolicy instanceof DummyCompletionPolicy, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getListener("s1", ctx) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(getListener("s1", ctx) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getListener("s2", ctx) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(getListener("s2", ctx) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getListener("s3", ctx) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(getListener("s3", ctx) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getListener("s4", ctx) instanceof DummyStepExecutionListener)
nova chamada: assertTrue(getListener("s4", ctx) instanceof DummyStepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(TransactionDefinition.PROPAGATION_REQUIRED, txa.getPropagationBehavior())
nova chamada: assertEquals(TransactionDefinition.PROPAGATION_REQUIRED, txa.getPropagationBehavior(), "Era esperado valores iguais, mas  TransactionDefinition.PROPAGATION_REQUIRED é diferente de " + result2732 + " <txa.getPropagationBehavior()>")
chamada antiga: assertEquals(TransactionDefinition.ISOLATION_DEFAULT, txa.getIsolationLevel())
nova chamada: assertEquals(TransactionDefinition.ISOLATION_DEFAULT, txa.getIsolationLevel(), "Era esperado valores iguais, mas  TransactionDefinition.ISOLATION_DEFAULT é diferente de " + result2733 + " <txa.getIsolationLevel()>")
chamada antiga: assertEquals(10, txa.getTimeout())
nova chamada: assertEquals(10, txa.getTimeout(), "Era esperado valores iguais, mas  10 é diferente de " + result2734 + " <txa.getTimeout()>")
chamada antiga: assertTrue(ctx.containsBean(stepName))
nova chamada: assertTrue(ctx.containsBean(stepName), "Era esperado verdadeiro, mas " + result2735 + " <ctx.containsBean(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2736 + " <list.size()>")
chamada antiga: assertTrue(ctx.containsBean(stepName))
nova chamada: assertTrue(ctx.containsBean(stepName), "Era esperado verdadeiro, mas " + result2737 + " <ctx.containsBean(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getTasklet("s9", ctx) instanceof DummyTasklet)
nova chamada: assertTrue(getTasklet("s9", ctx) instanceof DummyTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getTasklet("s10", ctx) instanceof DummyTasklet)
nova chamada: assertTrue(getTasklet("s10", ctx) instanceof DummyTasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean(stepName))
nova chamada: assertTrue(ctx.containsBean(stepName), "Era esperado verdadeiro, mas " + result2738 + " <ctx.containsBean(stepName)> é falso")
chamada antiga: assertTrue(step instanceof TaskletStep)
nova chamada: assertTrue(step instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(tasklet instanceof Tasklet)
nova chamada: assertTrue(tasklet instanceof Tasklet, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository("defaultRepoStep", ctx) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository("defaultRepoStep", ctx) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository("defaultRepoStepWithParent", ctx) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository("defaultRepoStepWithParent", ctx) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository("overrideRepoStep", ctx) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository("overrideRepoStep", ctx) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getJobRepository("defaultRepoStandaloneStep", ctx) instanceof SimpleJobRepository)
nova chamada: assertTrue(getJobRepository("defaultRepoStandaloneStep", ctx) instanceof SimpleJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(getTransactionManager("defaultTxMgrStep", ctx) instanceof JdbcTransactionManager)
nova chamada: assertTrue(getTransactionManager("defaultTxMgrStep", ctx) instanceof JdbcTransactionManager, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(jobRepository instanceof DummyJobRepository)
nova chamada: assertTrue(jobRepository instanceof DummyJobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(jobRepoName, ((DummyJobRepository) jobRepository).getName())
nova chamada: assertEquals(jobRepoName, ((DummyJobRepository) jobRepository).getName(), "Era esperado valores iguais, mas  jobRepoName é diferente de " + result2739 + " <((DummyJobRepository) jobRepository).getName()>")
chamada antiga: assertTrue(txMgr instanceof DummyPlatformTransactionManager)
nova chamada: assertTrue(txMgr instanceof DummyPlatformTransactionManager, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(txMgrName, ((DummyPlatformTransactionManager) txMgr).getName())
nova chamada: assertEquals(txMgrName, ((DummyPlatformTransactionManager) txMgr).getName(), "Era esperado valores iguais, mas  txMgrName é diferente de " + result2740 + " <((DummyPlatformTransactionManager) txMgr).getName()>")
chamada antiga: assertTrue(jobRepository instanceof JobRepository)
nova chamada: assertTrue(jobRepository instanceof JobRepository, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(jobRepository instanceof PlatformTransactionManager)
nova chamada: assertTrue(jobRepository instanceof PlatformTransactionManager, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean(beanName))
nova chamada: assertTrue(ctx.containsBean(beanName), "Era esperado verdadeiro, mas " + result2741 + " <ctx.containsBean(beanName)> é falso")
chamada antiga: assertTrue(bean instanceof AbstractStep || bean instanceof AbstractJob)
nova chamada: assertTrue(bean instanceof AbstractStep || bean instanceof AbstractJob, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("s11"))
nova chamada: assertTrue(ctx.containsBean("s11"), "Era esperado verdadeiro, mas " + result2742 + " <ctx.containsBean('s11')> é falso")
chamada antiga: assertTrue(bean instanceof DummyStep)
nova chamada: assertTrue(bean instanceof DummyStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&s12"))
nova chamada: assertTrue(ctx.containsBean("&s12"), "Era esperado verdadeiro, mas " + result2743 + " <ctx.containsBean('&s12')> é falso")
chamada antiga: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("dummyStep"))
nova chamada: assertTrue(ctx.containsBean("dummyStep"), "Era esperado verdadeiro, mas " + result2744 + " <ctx.containsBean('dummyStep')> é falso")
chamada antiga: assertTrue(dummyStep instanceof DummyStep)
nova chamada: assertTrue(dummyStep instanceof DummyStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("s12"))
nova chamada: assertTrue(ctx.containsBean("s12"), "Era esperado verdadeiro, mas " + result2745 + " <ctx.containsBean('s12')> é falso")
chamada antiga: assertTrue(bean instanceof TaskletStep)
nova chamada: assertTrue(bean instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&s13"))
nova chamada: assertTrue(ctx.containsBean("&s13"), "Era esperado verdadeiro, mas " + result2746 + " <ctx.containsBean('&s13')> é falso")
chamada antiga: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("s13"))
nova chamada: assertTrue(ctx.containsBean("s13"), "Era esperado verdadeiro, mas " + result2747 + " <ctx.containsBean('s13')> é falso")
chamada antiga: assertTrue(bean instanceof TaskletStep)
nova chamada: assertTrue(bean instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&dummyStepWithTaskletOnParent"))
nova chamada: assertTrue(ctx.containsBean("&dummyStepWithTaskletOnParent"), "Era esperado verdadeiro, mas " + result2748 + " <ctx.containsBean('&dummyStepWithTaskletOnParent')> é falso")
chamada antiga: assertTrue(dummyStepFb instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(dummyStepFb instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("dummyStepWithTaskletOnParent"))
nova chamada: assertTrue(ctx.containsBean("dummyStepWithTaskletOnParent"), "Era esperado verdadeiro, mas " + result2749 + " <ctx.containsBean('dummyStepWithTaskletOnParent')> é falso")
chamada antiga: assertTrue(dummyStep instanceof TaskletStep)
nova chamada: assertTrue(dummyStep instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&standaloneStepWithTasklet"))
nova chamada: assertTrue(ctx.containsBean("&standaloneStepWithTasklet"), "Era esperado verdadeiro, mas " + result2750 + " <ctx.containsBean('&standaloneStepWithTasklet')> é falso")
chamada antiga: assertTrue(standaloneStepFb instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(standaloneStepFb instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("standaloneStepWithTasklet"))
nova chamada: assertTrue(ctx.containsBean("standaloneStepWithTasklet"), "Era esperado verdadeiro, mas " + result2751 + " <ctx.containsBean('standaloneStepWithTasklet')> é falso")
chamada antiga: assertTrue(standaloneStep instanceof TaskletStep)
nova chamada: assertTrue(standaloneStep instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&s14"))
nova chamada: assertTrue(ctx.containsBean("&s14"), "Era esperado verdadeiro, mas " + result2752 + " <ctx.containsBean('&s14')> é falso")
chamada antiga: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(factoryBean instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("s12"))
nova chamada: assertTrue(ctx.containsBean("s12"), "Era esperado verdadeiro, mas " + result2753 + " <ctx.containsBean('s12')> é falso")
chamada antiga: assertTrue(bean instanceof TaskletStep)
nova chamada: assertTrue(bean instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("&standaloneStepWithTaskletAndDummyParent"))
nova chamada: assertTrue(ctx.containsBean("&standaloneStepWithTaskletAndDummyParent"), "Era esperado verdadeiro, mas " + result2754 + " <ctx.containsBean('&standaloneStepWithTaskletAndDummyParent')> é falso")
chamada antiga: assertTrue(standaloneWithTaskletFb instanceof StepParserStepFactoryBean<?, ?>)
nova chamada: assertTrue(standaloneWithTaskletFb instanceof StepParserStepFactoryBean<?, ?>, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("standaloneStepWithTaskletAndDummyParent"))
nova chamada: assertTrue(ctx.containsBean("standaloneStepWithTaskletAndDummyParent"), "Era esperado verdadeiro, mas " + result2755 + " <ctx.containsBean('standaloneStepWithTaskletAndDummyParent')> é falso")
chamada antiga: assertTrue(standaloneWithTasklet instanceof TaskletStep)
nova chamada: assertTrue(standaloneWithTasklet instanceof TaskletStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ctx.containsBean("dummyStep"))
nova chamada: assertTrue(ctx.containsBean("dummyStep"), "Era esperado verdadeiro, mas " + result2756 + " <ctx.containsBean('dummyStep')> é falso")
chamada antiga: assertTrue(dummyStep instanceof DummyStep)
nova chamada: assertTrue(dummyStep instanceof DummyStep, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, getExceptionMap(fb, "skippableExceptionClasses").size())
nova chamada: assertEquals(1, getExceptionMap(fb, "skippableExceptionClasses").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2757 + " <getExceptionMap(fb, 'skippableExceptionClasses').size()>")
chamada antiga: assertEquals(1, getExceptionMap(fb, "retryableExceptionClasses").size())
nova chamada: assertEquals(1, getExceptionMap(fb, "retryableExceptionClasses").size(), "Era esperado valores iguais, mas  1 é diferente de " + result2758 + " <getExceptionMap(fb, 'retryableExceptionClasses').size()>")
chamada antiga: assertEquals(0, ((ItemStream[]) ReflectionTestUtils.getField(fb, "streams")).length)
nova chamada: assertEquals(0, ((ItemStream[]) ReflectionTestUtils.getField(fb, "streams")).length, "Era esperado valores iguais, mas  0 é diferente de " + " ((ItemStream[]) ReflectionTestUtils.getField(fb, 'streams')).length")
chamada antiga: assertEquals(0, ((RetryListener[]) ReflectionTestUtils.getField(fb, "retryListeners")).length)
nova chamada: assertEquals(0, ((RetryListener[]) ReflectionTestUtils.getField(fb, "retryListeners")).length, "Era esperado valores iguais, mas  0 é diferente de " + " ((RetryListener[]) ReflectionTestUtils.getField(fb, 'retryListeners')).length")
chamada antiga: assertEquals(0, ((Set<StepExecutionListener>) ReflectionTestUtils.getField(fb, "stepExecutionListeners")).size())
nova chamada: assertEquals(0, ((Set<StepExecutionListener>) ReflectionTestUtils.getField(fb, "stepExecutionListeners")).size(), "Era esperado valores iguais, mas  0 é diferente de " + result2759 + " <((Set<StepExecutionListener>) ReflectionTestUtils.getField(fb, 'stepExecutionListeners')).size()>")
chamada antiga: assertEquals(0, getExceptionList(fb, "noRollbackExceptionClasses").size())
nova chamada: assertEquals(0, getExceptionList(fb, "noRollbackExceptionClasses").size(), "Era esperado valores iguais, mas  0 é diferente de " + result2760 + " <getExceptionList(fb, 'noRollbackExceptionClasses').size()>")
chamada antiga: assertEquals(expected.size(), actual.size())
nova chamada: assertEquals(expected.size(), actual.size(), "Era esperado valores iguais, mas " + result2761 + " <expected.size()> é diferente de " + result2762 + " <actual.size()>")
chamada antiga: assertTrue(expected.containsAll(actual))
nova chamada: assertTrue(expected.containsAll(actual), "Era esperado verdadeiro, mas " + result2763 + " <expected.containsAll(actual)> é falso")
chamada antiga: assertEquals(expected.size(), actual.size())
nova chamada: assertEquals(expected.size(), actual.size(), "Era esperado valores iguais, mas " + result2764 + " <expected.size()> é diferente de " + result2765 + " <actual.size()>")
chamada antiga: assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size())
nova chamada: assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size(), "Era esperado valores iguais, mas  1 é diferente de " + result2766 + " <((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, 'contexts')).size()>")
chamada antiga: assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size())
nova chamada: assertEquals(1, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size(), "Era esperado valores iguais, mas  1 é diferente de " + result2767 + " <((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, 'contextToJobNames')).size()>")
chamada antiga: assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size())
nova chamada: assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contexts")).size(), "Era esperado valores iguais, mas  0 é diferente de " + result2768 + " <((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, 'contexts')).size()>")
chamada antiga: assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size())
nova chamada: assertEquals(0, ((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, "contextToJobNames")).size(), "Era esperado valores iguais, mas  0 é diferente de " + result2769 + " <((Map<?, ?>) ReflectionTestUtils.getField(jobLoader, 'contextToJobNames')).size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2770 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2771 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2772 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(2, jobRegistry.getJobNames().size())
nova chamada: assertEquals(2, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2773 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(2, jobRegistry.getJobNames().size())
nova chamada: assertEquals(2, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2774 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(2, jobRegistry.getJobNames().size())
nova chamada: assertEquals(2, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2775 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertDoesNotThrow(() -> loader.load(factory))
nova chamada: assertDoesNotThrow(() -> loader.load(factory), "Era esperado que nenhuma exceção fosse lançada, mas  () - loader.load(factory) foi lançada")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2776 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2777 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2778 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2779 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals("foo", result.getName())
nova chamada: assertEquals("foo", result.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2780 + " <result.getName()>")
chamada antiga: assertEquals("jobs.foo", result.getName())
nova chamada: assertEquals("jobs.foo", result.getName(), "Era esperado valores iguais, mas  'jobs.foo' é diferente de " + result2781 + " <result.getName()>")
chamada antiga: assertEquals("JobSupport: [name=jobs.foo]", result.toString())
nova chamada: assertEquals("JobSupport: [name=jobs.foo]", result.toString(), "Era esperado valores iguais, mas  'JobSupport: [name=jobs.foo]' é diferente de " + result2782 + " <result.toString()>")
chamada antiga: assertNotNull(registry.getJob("foo"))
nova chamada: assertNotNull(registry.getJob("foo"), "Era esperado não nulo, mas " + result2783 + " <registry.getJob('foo')> é nulo")
chamada antiga: assertTrue(exception.getMessage().contains("foo"))
nova chamada: assertTrue(exception.getMessage().contains("foo"), "Era esperado verdadeiro, mas " + result2784 + " <exception.getMessage().contains('foo')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("foo"))
nova chamada: assertTrue(exception.getMessage().contains("foo"), "Era esperado verdadeiro, mas " + result2785 + " <exception.getMessage().contains('foo')> é falso")
chamada antiga: assertTrue(exception.getMessage().contains("foo"))
nova chamada: assertTrue(exception.getMessage().contains("foo"), "Era esperado verdadeiro, mas " + result2786 + " <exception.getMessage().contains('foo')> é falso")
chamada antiga: assertEquals(2, configurations.size())
nova chamada: assertEquals(2, configurations.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2787 + " <configurations.size()>")
chamada antiga: assertTrue(configurations.contains(jobFactory.getJobName()))
nova chamada: assertTrue(configurations.contains(jobFactory.getJobName()), "Era esperado verdadeiro, mas " + result2788 + " <configurations.contains(jobFactory.getJobName())> é falso")
chamada antiga: Assertions.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2789 + " <jobExecution.getExitStatus()>")
chamada antiga: Assertions.assertEquals(1, jobRepositories.size())
nova chamada: assertEquals(1, jobRepositories.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2790 + " <jobRepositories.size()>")
chamada antiga: assertTrue(registrar instanceof Ordered)
nova chamada: assertTrue(registrar instanceof Ordered, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(Ordered.LOWEST_PRECEDENCE, registrar.getOrder())
nova chamada: assertEquals(Ordered.LOWEST_PRECEDENCE, registrar.getOrder(), "Era esperado valores iguais, mas  Ordered.LOWEST_PRECEDENCE é diferente de " + result2791 + " <registrar.getOrder()>")
chamada antiga: assertEquals(1, registrar.getOrder())
nova chamada: assertEquals(1, registrar.getOrder(), "Era esperado valores iguais, mas  1 é diferente de " + result2792 + " <registrar.getOrder()>")
chamada antiga: assertTrue(registrar.isAutoStartup())
nova chamada: assertTrue(registrar.isAutoStartup(), "Era esperado verdadeiro, mas " + result2793 + " <registrar.isAutoStartup()> é falso")
chamada antiga: assertEquals(Integer.MIN_VALUE + 1000, registrar.getPhase())
nova chamada: assertEquals(Integer.MIN_VALUE + 1000, registrar.getPhase(), "Era esperado valores iguais, mas  Integer.MIN_VALUE + 1000 é diferente de " + result2794 + " <registrar.getPhase()>")
chamada antiga: assertEquals(2, names.size())
nova chamada: assertEquals(2, names.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2795 + " <names.size()>")
chamada antiga: assertTrue(names.contains("test-job"))
nova chamada: assertTrue(names.contains("test-job"), "Era esperado verdadeiro, mas " + result2796 + " <names.contains('test-job')> é falso")
chamada antiga: assertTrue(names.contains("test-job2"))
nova chamada: assertTrue(names.contains("test-job2"), "Era esperado verdadeiro, mas " + result2797 + " <names.contains('test-job2')> é falso")
chamada antiga: assertEquals("test-job", job.getName())
nova chamada: assertEquals("test-job", job.getName(), "Era esperado valores iguais, mas  'test-job' é diferente de " + result2798 + " <job.getName()>")
chamada antiga: assertEquals("test-job2", job.getName())
nova chamada: assertEquals("test-job2", job.getName(), "Era esperado valores iguais, mas  'test-job2' é diferente de " + result2799 + " <job.getName()>")
chamada antiga: assertEquals(2, registry.getJobNames().size())
nova chamada: assertEquals(2, registry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2800 + " <registry.getJobNames().size()>")
chamada antiga: assertEquals(2, registry.getJobNames().size())
nova chamada: assertEquals(2, registry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2801 + " <registry.getJobNames().size()>")
chamada antiga: assertEquals(2, registry.getJobNames().size())
nova chamada: assertEquals(2, registry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2802 + " <registry.getJobNames().size()>")
chamada antiga: assertEquals(0, registry.getJobNames().size())
nova chamada: assertEquals(0, registry.getJobNames().size(), "Era esperado valores iguais, mas  0 é diferente de " + result2803 + " <registry.getJobNames().size()>")
chamada antiga: assertTrue(registrar.isRunning())
nova chamada: assertTrue(registrar.isRunning(), "Era esperado verdadeiro, mas " + result2804 + " <registrar.isRunning()> é falso")
chamada antiga: assertEquals(2, registry.getJobNames().size())
nova chamada: assertEquals(2, registry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2805 + " <registry.getJobNames().size()>")
chamada antiga: assertFalse(registrar.isRunning())
nova chamada: assertFalse(registrar.isRunning(), "Era esperado falso, mas " + result2806 + " <registrar.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(registrar.isRunning())
nova chamada: assertTrue(registrar.isRunning(), "Era esperado verdadeiro, mas " + result2807 + " <registrar.isRunning()> é falso")
chamada antiga: assertEquals(2, registry.getJobNames().size())
nova chamada: assertEquals(2, registry.getJobNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result2808 + " <registry.getJobNames().size()>")
chamada antiga: assertFalse(registrar.isRunning())
nova chamada: assertFalse(registrar.isRunning(), "Era esperado falso, mas " + result2809 + " <registrar.isRunning()> é verdadeiro ")
chamada antiga: assertEquals(0, registry.getJobNames().size())
nova chamada: assertEquals(0, registry.getJobNames().size(), "Era esperado valores iguais, mas  0 é diferente de " + result2810 + " <registry.getJobNames().size()>")
chamada antiga: assertEquals("foo", factory.getJobName())
nova chamada: assertEquals("foo", factory.getJobName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2811 + " <factory.getJobName()>")
chamada antiga: assertEquals(2, names.size())
nova chamada: assertEquals(2, names.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2812 + " <names.size()>")
chamada antiga: assertTrue(names.contains("test-job"))
nova chamada: assertTrue(names.contains("test-job"), "Era esperado verdadeiro, mas " + result2813 + " <names.contains('test-job')> é falso")
chamada antiga: assertEquals("test-job", job.getName())
nova chamada: assertEquals("test-job", job.getName(), "Era esperado valores iguais, mas  'test-job' é diferente de " + result2814 + " <job.getName()>")
chamada antiga: assertEquals(1, jobRegistry.getJobNames().size())
nova chamada: assertEquals(1, jobRegistry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2815 + " <jobRegistry.getJobNames().size()>")
chamada antiga: assertEquals(job.getName(), jobRegistry.getJobNames().iterator().next())
nova chamada: assertEquals(job.getName(), jobRegistry.getJobNames().iterator().next(), "Era esperado valores iguais, mas " + result2816 + " <job.getName()> é diferente de " + result2817 + " <jobRegistry.getJobNames().iterator().next()>")
chamada antiga: Assertions.assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(jobRepository)
nova chamada: assertNotNull(jobRepository, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(jobExplorer)
nova chamada: assertNotNull(jobExplorer, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(jobRegistry)
nova chamada: assertNotNull(jobRegistry, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertNotNull(jobOperator)
nova chamada: assertNotNull(jobOperator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(exception.getMessage().contains("JobRegistry"))
nova chamada: assertTrue(exception.getMessage().contains("JobRegistry"), "Era esperado verdadeiro, mas " + result2818 + " <exception.getMessage().contains('JobRegistry')> é falso")
chamada antiga: assertEquals("foo", processor.postProcessBeforeInitialization("foo", "bar"))
nova chamada: assertEquals("foo", processor.postProcessBeforeInitialization("foo", "bar"), "Era esperado valores iguais, mas  'foo' é diferente de " + result2819 + " <processor.postProcessBeforeInitialization('foo', 'bar')>")
chamada antiga: assertEquals("foo", processor.postProcessAfterInitialization("foo", "bar"))
nova chamada: assertEquals("foo", processor.postProcessAfterInitialization("foo", "bar"), "Era esperado valores iguais, mas  'foo' é diferente de " + result2820 + " <processor.postProcessAfterInitialization('foo', 'bar')>")
chamada antiga: assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
nova chamada: assertNotNull(processor.postProcessAfterInitialization(job, "bar"), "Era esperado não nulo, mas " + result2821 + " <processor.postProcessAfterInitialization(job, 'bar')> é nulo")
chamada antiga: assertEquals("[foo]", registry.getJobNames().toString())
nova chamada: assertEquals("[foo]", registry.getJobNames().toString(), "Era esperado valores iguais, mas  '[foo]' é diferente de " + result2822 + " <registry.getJobNames().toString()>")
chamada antiga: assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
nova chamada: assertNotNull(processor.postProcessAfterInitialization(job, "bar"), "Era esperado não nulo, mas " + result2823 + " <processor.postProcessAfterInitialization(job, 'bar')> é nulo")
chamada antiga: assertEquals("[jobs.foo]", registry.getJobNames().toString())
nova chamada: assertEquals("[jobs.foo]", registry.getJobNames().toString(), "Era esperado valores iguais, mas  '[jobs.foo]' é diferente de " + result2824 + " <registry.getJobNames().toString()>")
chamada antiga: assertTrue(exception.getCause() instanceof DuplicateJobException)
nova chamada: assertTrue(exception.getCause() instanceof DuplicateJobException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(processor.postProcessAfterInitialization(job, "bar"))
nova chamada: assertNotNull(processor.postProcessAfterInitialization(job, "bar"), "Era esperado não nulo, mas " + result2825 + " <processor.postProcessAfterInitialization(job, 'bar')> é nulo")
chamada antiga: assertEquals("[]", registry.getJobNames().toString())
nova chamada: assertEquals("[]", registry.getJobNames().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result2826 + " <registry.getJobNames().toString()>")
chamada antiga: assertEquals(count, configurations.size())
nova chamada: assertEquals(count, configurations.size(), "Era esperado valores iguais, mas  count é diferente de " + result2827 + " <configurations.size()>")
chamada antiga: assertNotNull(registry.getJob("test-job"))
nova chamada: assertNotNull(registry.getJob("test-job"), "Era esperado não nulo, mas " + result2828 + " <registry.getJob('test-job')> é nulo")
chamada antiga: assertEquals(context.getBean("test-job-with-name"), registry.getJob("foo"))
nova chamada: assertEquals(context.getBean("test-job-with-name"), registry.getJob("foo"), "Era esperado valores iguais, mas " + result2829 + " <context.getBean('test-job-with-name')> é diferente de " + result2830 + " <registry.getJob('foo')>")
chamada antiga: assertEquals(context.getBean("test-job-with-bean-name"), registry.getJob("bar"))
nova chamada: assertEquals(context.getBean("test-job-with-bean-name"), registry.getJob("bar"), "Era esperado valores iguais, mas " + result2831 + " <context.getBean('test-job-with-bean-name')> é diferente de " + result2832 + " <registry.getJob('bar')>")
chamada antiga: assertEquals(context.getBean("test-job-with-parent-and-name"), registry.getJob("spam"))
nova chamada: assertEquals(context.getBean("test-job-with-parent-and-name"), registry.getJob("spam"), "Era esperado valores iguais, mas " + result2833 + " <context.getBean('test-job-with-parent-and-name')> é diferente de " + result2834 + " <registry.getJob('spam')>")
chamada antiga: assertEquals(context.getBean("test-job-with-parent-and-bean-name"), registry.getJob("bucket"))
nova chamada: assertEquals(context.getBean("test-job-with-parent-and-bean-name"), registry.getJob("bucket"), "Era esperado valores iguais, mas " + result2835 + " <context.getBean('test-job-with-parent-and-bean-name')> é diferente de " + result2836 + " <registry.getJob('bucket')>")
chamada antiga: assertEquals(context.getBean("test-job-with-concrete-parent"), registry.getJob("maps"))
nova chamada: assertEquals(context.getBean("test-job-with-concrete-parent"), registry.getJob("maps"), "Era esperado valores iguais, mas " + result2837 + " <context.getBean('test-job-with-concrete-parent')> é diferente de " + result2838 + " <registry.getJob('maps')>")
chamada antiga: assertEquals(context.getBean("test-job-with-concrete-parent-and-name"), registry.getJob("oof"))
nova chamada: assertEquals(context.getBean("test-job-with-concrete-parent-and-name"), registry.getJob("oof"), "Era esperado valores iguais, mas " + result2839 + " <context.getBean('test-job-with-concrete-parent-and-name')> é diferente de " + result2840 + " <registry.getJob('oof')>")
chamada antiga: assertEquals(context.getBean("test-job-with-concrete-parent-and-bean-name"), registry.getJob("rab"))
nova chamada: assertEquals(context.getBean("test-job-with-concrete-parent-and-bean-name"), registry.getJob("rab"), "Era esperado valores iguais, mas " + result2841 + " <context.getBean('test-job-with-concrete-parent-and-bean-name')> é diferente de " + result2842 + " <registry.getJob('rab')>")
chamada antiga: assertNotNull(factory.createJob())
nova chamada: assertNotNull(factory.createJob(), "Era esperado não nulo, mas " + result2843 + " <factory.createJob()> é nulo")
chamada antiga: assertEquals("bar", factory.getJobName())
nova chamada: assertEquals("bar", factory.getJobName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2844 + " <factory.getJobName()>")
chamada antiga: assertEquals(1, registry.getJobNames().size())
nova chamada: assertEquals(1, registry.getJobNames().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2845 + " <registry.getJobNames().size()>")
chamada antiga: assertEquals(0, registry.getJobNames().size())
nova chamada: assertEquals(0, registry.getJobNames().size(), "Era esperado valores iguais, mas  0 é diferente de " + result2846 + " <registry.getJobNames().size()>")
chamada antiga: assertNotNull(context)
nova chamada: assertNotNull(context, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("test-job", factory.createApplicationContext().getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", factory.createApplicationContext().getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " factory.createApplicationContext().getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("bar", context.getBean("test-job", Job.class).getName())
nova chamada: assertEquals("bar", context.getBean("test-job", Job.class).getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2847 + " <context.getBean('test-job', Job.class).getName()>")
chamada antiga: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("spam", context.getBean("test-job", Job.class).getName())
nova chamada: assertEquals("spam", context.getBean("test-job", Job.class).getName(), "Era esperado valores iguais, mas  'spam' é diferente de " + result2848 + " <context.getBean('test-job', Job.class).getName()>")
chamada antiga: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("spam", context.getBean("test-job", Job.class).getName())
nova chamada: assertEquals("spam", context.getBean("test-job", Job.class).getName(), "Era esperado valores iguais, mas  'spam' é diferente de " + result2849 + " <context.getBean('test-job', Job.class).getName()>")
chamada antiga: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("${foo}", context.getBean("test-job", Job.class).getName())
nova chamada: assertEquals("${foo}", context.getBean("test-job", Job.class).getName(), "Era esperado valores iguais, mas  '${foo}' é diferente de " + result2850 + " <context.getBean('test-job', Job.class).getName()>")
chamada antiga: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("test-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'test-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("bar", context.getBean("test-job", Job.class).getName())
nova chamada: assertEquals("bar", context.getBean("test-job", Job.class).getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2851 + " <context.getBean('test-job', Job.class).getName()>")
chamada antiga: assertEquals(other, factory)
nova chamada: assertEquals(other, factory, "Era esperado valores iguais, mas  other é diferente de " + " factory")
chamada antiga: assertEquals(other.hashCode(), factory.hashCode())
nova chamada: assertEquals(other.hashCode(), factory.hashCode(), "Era esperado valores iguais, mas " + result2852 + " <other.hashCode()> é diferente de " + result2853 + " <factory.hashCode()>")
chamada antiga: assertEquals(other, factory)
nova chamada: assertEquals(other, factory, "Era esperado valores iguais, mas  other é diferente de " + " factory")
chamada antiga: assertEquals(other.hashCode(), factory.hashCode())
nova chamada: assertEquals(other.hashCode(), factory.hashCode(), "Era esperado valores iguais, mas " + result2854 + " <other.hashCode()> é diferente de " + result2855 + " <factory.hashCode()>")
chamada antiga: assertEquals("concrete-job", context.getBeanNamesForType(Job.class)[0])
nova chamada: assertEquals("concrete-job", context.getBeanNamesForType(Job.class)[0], "Era esperado valores iguais, mas  'concrete-job' é diferente de " + " context.getBeanNamesForType(Job.class)[0]")
chamada antiga: assertEquals("bar", context.getBean("concrete-job", Job.class).getName())
nova chamada: assertEquals("bar", context.getBean("concrete-job", Job.class).getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2856 + " <context.getBean('concrete-job', Job.class).getName()>")
chamada antiga: assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step31"))
nova chamada: assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step31"), "Era esperado não nulo, mas " + result2857 + " <context.getBean('concrete-job', JobSupport.class).getStep('step31')> é nulo")
chamada antiga: assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step32"))
nova chamada: assertNotNull(context.getBean("concrete-job", JobSupport.class).getStep("step32"), "Era esperado não nulo, mas " + result2858 + " <context.getBean('concrete-job', JobSupport.class).getStep('step32')> é nulo")
chamada antiga: assertTrue(autowiredFound)
nova chamada: assertTrue(autowiredFound, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(context.getBean("bean1"), "bean1")
nova chamada: assertEquals(context.getBean("bean1"), "bean1", "Era esperado valores iguais, mas " + result2859 + " <context.getBean('bean1')> é diferente de " + " 'bean1'")
chamada antiga: assertEquals(context.getBean("bean2"), "bean2")
nova chamada: assertEquals(context.getBean("bean2"), "bean2", "Era esperado valores iguais, mas " + result2860 + " <context.getBean('bean2')> é diferente de " + " 'bean2'")
chamada antiga: assertEquals(context.getBean("bean3"), "bean3")
nova chamada: assertEquals(context.getBean("bean3"), "bean3", "Era esperado valores iguais, mas " + result2861 + " <context.getBean('bean3')> é diferente de " + " 'bean3'")
chamada antiga: assertEquals(context.getBean("bean4"), "bean4")
nova chamada: assertEquals(context.getBean("bean4"), "bean4", "Era esperado valores iguais, mas " + result2862 + " <context.getBean('bean4')> é diferente de " + " 'bean4'")
chamada antiga: assertEquals(context.getBean("bean1"), "bean1")
nova chamada: assertEquals(context.getBean("bean1"), "bean1", "Era esperado valores iguais, mas " + result2863 + " <context.getBean('bean1')> é diferente de " + " 'bean1'")
chamada antiga: assertEquals(context.getBean("bean2"), "bean2")
nova chamada: assertEquals(context.getBean("bean2"), "bean2", "Era esperado valores iguais, mas " + result2864 + " <context.getBean('bean2')> é diferente de " + " 'bean2'")
chamada antiga: assertEquals(context.getBean("bean3"), "bean3")
nova chamada: assertEquals(context.getBean("bean3"), "bean3", "Era esperado valores iguais, mas " + result2865 + " <context.getBean('bean3')> é diferente de " + " 'bean3'")
chamada antiga: assertEquals(context.getBean("bean4"), "bean4")
nova chamada: assertEquals(context.getBean("bean4"), "bean4", "Era esperado valores iguais, mas " + result2866 + " <context.getBean('bean4')> é diferente de " + " 'bean4'")
chamada antiga: assertEquals(1, bean.counter1)
nova chamada: assertEquals(1, bean.counter1, "Era esperado valores iguais, mas  1 é diferente de " + " bean.counter1")
chamada antiga: assertEquals(1, bean.counter2)
nova chamada: assertEquals(1, bean.counter2, "Era esperado valores iguais, mas  1 é diferente de " + " bean.counter2")
chamada antiga: assertNull(new StepExecution("step", null).getId())
nova chamada: assertNull(new StepExecution("step", null).getId(), "Era esperado nulo, mas " + result2867 + " <new StepExecution('step', null).getId()> não é nulo")
chamada antiga: assertNull(new StepExecution("stepName", new JobExecution(new JobInstance(null, "foo"), null)).getId())
nova chamada: assertNull(new StepExecution("stepName", new JobExecution(new JobInstance(null, "foo"), null)).getId(), "Era esperado nulo, mas " + result2868 + " <new StepExecution('stepName', new JobExecution(new JobInstance(null, 'foo'), null)).getId()> não é nulo")
chamada antiga: assertNull(execution.getEndTime())
nova chamada: assertNull(execution.getEndTime(), "Era esperado nulo, mas " + result2869 + " <execution.getEndTime()> não é nulo")
chamada antiga: assertEquals(now, execution.getEndTime())
nova chamada: assertEquals(now, execution.getEndTime(), "Era esperado valores iguais, mas  now é diferente de " + result2870 + " <execution.getEndTime()>")
chamada antiga: assertNotNull(execution.getCreateTime())
nova chamada: assertNotNull(execution.getCreateTime(), "Era esperado não nulo, mas " + result2871 + " <execution.getCreateTime()> é nulo")
chamada antiga: assertEquals(now, execution.getCreateTime())
nova chamada: assertEquals(now, execution.getCreateTime(), "Era esperado valores iguais, mas  now é diferente de " + result2872 + " <execution.getCreateTime()>")
chamada antiga: assertEquals(BatchStatus.STARTING, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STARTING, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTING é diferente de " + result2873 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2874 + " <execution.getStatus()>")
chamada antiga: assertEquals(23, execution.getJobExecutionId().longValue())
nova chamada: assertEquals(23, execution.getJobExecutionId().longValue(), "Era esperado valores iguais, mas  23 é diferente de " + result2875 + " <execution.getJobExecutionId().longValue()>")
chamada antiga: assertEquals(ExitStatus.EXECUTING, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.EXECUTING, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.EXECUTING é diferente de " + result2876 + " <execution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2877 + " <execution.getExitStatus()>")
chamada antiga: assertEquals(123, execution.getCommitCount())
nova chamada: assertEquals(123, execution.getCommitCount(), "Era esperado valores iguais, mas  123 é diferente de " + result2878 + " <execution.getCommitCount()>")
chamada antiga: assertEquals(123, execution.getFilterCount())
nova chamada: assertEquals(123, execution.getFilterCount(), "Era esperado valores iguais, mas  123 é diferente de " + result2879 + " <execution.getFilterCount()>")
chamada antiga: assertNotNull(execution.getJobExecution())
nova chamada: assertNotNull(execution.getJobExecution(), "Era esperado não nulo, mas " + result2880 + " <execution.getJobExecution()> é nulo")
chamada antiga: assertEquals(1, execution.getReadSkipCount())
nova chamada: assertEquals(1, execution.getReadSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2881 + " <execution.getReadSkipCount()>")
chamada antiga: assertEquals(1, execution.getWriteSkipCount())
nova chamada: assertEquals(1, execution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2882 + " <execution.getWriteSkipCount()>")
chamada antiga: assertEquals(1, execution.getReadCount())
nova chamada: assertEquals(1, execution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2883 + " <execution.getReadCount()>")
chamada antiga: assertEquals(7, execution.getWriteCount())
nova chamada: assertEquals(7, execution.getWriteCount(), "Era esperado valores iguais, mas  7 é diferente de " + result2884 + " <execution.getWriteCount()>")
chamada antiga: assertEquals(1, execution.getFilterCount())
nova chamada: assertEquals(1, execution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result2885 + " <execution.getFilterCount()>")
chamada antiga: assertFalse(execution.isTerminateOnly())
nova chamada: assertFalse(execution.isTerminateOnly(), "Era esperado falso, mas " + result2886 + " <execution.isTerminateOnly()> é verdadeiro ")
chamada antiga: assertTrue(execution.isTerminateOnly())
nova chamada: assertTrue(execution.isTerminateOnly(), "Era esperado verdadeiro, mas " + result2887 + " <execution.isTerminateOnly()> é falso")
chamada antiga: assertNotNull(execution.getExecutionContext())
nova chamada: assertNotNull(execution.getExecutionContext(), "Era esperado não nulo, mas " + result2888 + " <execution.getExecutionContext()> é nulo")
chamada antiga: assertEquals("bar", execution.getExecutionContext().getString("foo"))
nova chamada: assertEquals("bar", execution.getExecutionContext().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2889 + " <execution.getExecutionContext().getString('foo')>")
chamada antiga: assertNotEquals(stepExecution1, stepExecution2)
nova chamada: assertNotEquals(stepExecution1, stepExecution2, "Era esperado valores diferentes, mas  stepExecution1 é igual a " + " stepExecution2")
chamada antiga: assertEquals(stepExecution1, stepExecution2)
nova chamada: assertEquals(stepExecution1, stepExecution2, "Era esperado valores iguais, mas  stepExecution1 é diferente de " + " stepExecution2")
chamada antiga: assertNotEquals(null, stepExecution)
nova chamada: assertNotEquals(null, stepExecution, "Era esperado valores diferentes, mas  null é igual a " + " stepExecution")
chamada antiga: assertNotEquals(stepExecution, blankExecution)
nova chamada: assertNotEquals(stepExecution, blankExecution, "Era esperado valores diferentes, mas  stepExecution é igual a " + " blankExecution")
chamada antiga: assertNotEquals(stepExecution, blankExecution)
nova chamada: assertNotEquals(stepExecution, blankExecution, "Era esperado valores diferentes, mas  stepExecution é igual a " + " blankExecution")
chamada antiga: assertEquals(execution, execution)
nova chamada: assertEquals(execution, execution, "Era esperado valores iguais, mas  execution é diferente de " + " execution")
chamada antiga: assertNotEquals(execution, stepExecution)
nova chamada: assertNotEquals(execution, stepExecution, "Era esperado valores diferentes, mas  execution é igual a " + " stepExecution")
chamada antiga: assertEquals("name", execution.getStepName())
nova chamada: assertEquals("name", execution.getStepName(), "Era esperado valores iguais, mas  'name' é diferente de " + result2890 + " <execution.getStepName()>")
chamada antiga: assertEquals(stepExecution.getJobExecutionId(), execution.getJobExecutionId())
nova chamada: assertEquals(stepExecution.getJobExecutionId(), execution.getJobExecutionId(), "Era esperado valores iguais, mas " + result2891 + " <stepExecution.getJobExecutionId()> é diferente de " + result2892 + " <execution.getJobExecutionId()>")
chamada antiga: assertEquals(execution, stepExecution)
nova chamada: assertEquals(execution, stepExecution, "Era esperado valores iguais, mas  execution é diferente de " + " stepExecution")
chamada antiga: assertTrue(set.contains(execution))
nova chamada: assertTrue(set.contains(execution), "Era esperado verdadeiro, mas " + result2893 + " <set.contains(execution)> é falso")
chamada antiga: assertTrue(set.contains(execution))
nova chamada: assertTrue(set.contains(execution), "Era esperado verdadeiro, mas " + result2894 + " <set.contains(execution)> é falso")
chamada antiga: assertEquals(execution, clone)
nova chamada: assertEquals(execution, clone, "Era esperado valores iguais, mas  execution é diferente de " + " clone")
chamada antiga: assertEquals(status, clone.getExitStatus())
nova chamada: assertEquals(status, clone.getExitStatus(), "Era esperado valores iguais, mas  status é diferente de " + result2895 + " <clone.getExitStatus()>")
chamada antiga: assertNotNull(clone.getFailureExceptions())
nova chamada: assertNotNull(clone.getFailureExceptions(), "Era esperado não nulo, mas " + result2896 + " <clone.getFailureExceptions()> é nulo")
chamada antiga: assertEquals(0, execution.getFailureExceptions().size())
nova chamada: assertEquals(0, execution.getFailureExceptions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result2897 + " <execution.getFailureExceptions().size()>")
chamada antiga: assertEquals(1, execution.getFailureExceptions().size())
nova chamada: assertEquals(1, execution.getFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result2898 + " <execution.getFailureExceptions().size()>")
chamada antiga: assertEquals(exception, execution.getFailureExceptions().get(0))
nova chamada: assertEquals(exception, execution.getFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result2899 + " <execution.getFailureExceptions().get(0)>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2900 + " <execution.getStatus()>")
chamada antiga: assertEquals(expectedDuration, duration)
nova chamada: assertEquals(expectedDuration, duration, "Era esperado valores iguais, mas  expectedDuration é diferente de " + " duration")
chamada antiga: assertNull(duration)
nova chamada: assertNull(duration, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(duration)
nova chamada: assertNull(duration, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("2h31m12s42ms", formattedDuration)
nova chamada: assertEquals("2h31m12s42ms", formattedDuration, "Era esperado valores iguais, mas  '2h31m12s42ms' é diferente de " + " formattedDuration")
chamada antiga: assertEquals("31m12s42ms", formattedDuration)
nova chamada: assertEquals("31m12s42ms", formattedDuration, "Era esperado valores iguais, mas  '31m12s42ms' é diferente de " + " formattedDuration")
chamada antiga: assertEquals("12s42ms", formattedDuration)
nova chamada: assertEquals("12s42ms", formattedDuration, "Era esperado valores iguais, mas  '12s42ms' é diferente de " + " formattedDuration")
chamada antiga: assertEquals("42ms", formattedDuration)
nova chamada: assertEquals("42ms", formattedDuration, "Era esperado valores iguais, mas  '42ms' é diferente de " + " formattedDuration")
chamada antiga: assertTrue(formattedDuration.isEmpty())
nova chamada: assertTrue(formattedDuration.isEmpty(), "Era esperado verdadeiro, mas " + result2901 + " <formattedDuration.isEmpty()> é falso")
chamada antiga: assertTrue(formattedDuration.isEmpty())
nova chamada: assertTrue(formattedDuration.isEmpty(), "Era esperado verdadeiro, mas " + result2902 + " <formattedDuration.isEmpty()> é falso")
chamada antiga: assertTrue(formattedDuration.isEmpty())
nova chamada: assertTrue(formattedDuration.isEmpty(), "Era esperado verdadeiro, mas " + result2903 + " <formattedDuration.isEmpty()> é falso")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result2904 + " <jobExecution.getExitStatus()>")
chamada antiga: assertTrue(meters.size() >= EXPECTED_SPRING_BATCH_METRICS)
nova chamada: assertTrue(meters.size() >= EXPECTED_SPRING_BATCH_METRICS, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(proxied)
nova chamada: assertNotNull(proxied, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", parent.getName())
nova chamada: assertEquals("foo", parent.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2905 + " <parent.getName()>")
chamada antiga: assertNotNull(proxied)
nova chamada: assertNotNull(proxied, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", parent.getName())
nova chamada: assertEquals("foo", parent.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2906 + " <parent.getName()>")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2907 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(StepSynchronizationManager.getContext())
nova chamada: assertNotNull(StepSynchronizationManager.getContext(), "Era esperado não nulo, mas " + result2908 + " <StepSynchronizationManager.getContext()> é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2909 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2910 + " <list.size()>")
chamada antiga: assertEquals(context.attributeNames().length, task.get().attributeNames().length)
nova chamada: assertEquals(context.attributeNames().length, task.get().attributeNames().length, "Era esperado valores iguais, mas  context.attributeNames().length é diferente de " + " task.get().attributeNames().length")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2911 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2912 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2913 + " <list.size()>")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2914 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2915 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(StepSynchronizationManager.getContext())
nova chamada: assertNotNull(StepSynchronizationManager.getContext(), "Era esperado não nulo, mas " + result2916 + " <StepSynchronizationManager.getContext()> é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2917 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(stepContext)
nova chamada: assertNotNull(stepContext, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", context.getStepContext().getJobParameters().get("foo"))
nova chamada: assertEquals("bar", context.getStepContext().getJobParameters().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2918 + " <context.getStepContext().getJobParameters().get('foo')>")
chamada antiga: assertFalse(context.isComplete())
nova chamada: assertFalse(context.isComplete(), "Era esperado falso, mas " + result2919 + " <context.isComplete()> é verdadeiro ")
chamada antiga: assertTrue(context.isComplete())
nova chamada: assertTrue(context.isComplete(), "Era esperado verdadeiro, mas " + result2920 + " <context.isComplete()> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result2921 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().iterator().next().getReadCount())
nova chamada: assertEquals(2, execution.getStepExecutions().iterator().next().getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2922 + " <execution.getStepExecutions().iterator().next().getReadCount()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().iterator().next().getWriteCount())
nova chamada: assertEquals(2, execution.getStepExecutions().iterator().next().getWriteCount(), "Era esperado valores iguais, mas  2 é diferente de " + result2923 + " <execution.getStepExecutions().iterator().next().getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result2924 + " <execution.getStatus()>")
chamada antiga: assertNotNull(context.getJobExecution())
nova chamada: assertNotNull(context.getJobExecution(), "Era esperado não nulo, mas " + result2925 + " <context.getJobExecution()> é nulo")
chamada antiga: assertEquals(context, context)
nova chamada: assertEquals(context, context, "Era esperado valores iguais, mas  context é diferente de " + " context")
chamada antiga: assertFalse(context.equals(null))
nova chamada: assertFalse(context.equals(null), "Era esperado falso, mas " + result2926 + " <context.equals(null)> é verdadeiro ")
chamada antiga: assertEquals(new JobContext(jobExecution), context)
nova chamada: assertEquals(new JobContext(jobExecution), context, "Era esperado valores iguais, mas  new JobContext(jobExecution) é diferente de " + " context")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2927 + " <list.size()>")
chamada antiga: assertEquals("bar", list.get(0))
nova chamada: assertEquals("bar", list.get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result2928 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2929 + " <list.size()>")
chamada antiga: assertEquals("fail!", exception.getMessage())
nova chamada: assertEquals("fail!", exception.getMessage(), "Era esperado valores iguais, mas  'fail!' é diferente de " + result2930 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2931 + " <list.size()>")
chamada antiga: assertTrue(list.contains("bar"))
nova chamada: assertTrue(list.contains("bar"), "Era esperado verdadeiro, mas " + result2932 + " <list.contains('bar')> é falso")
chamada antiga: assertTrue(list.contains("spam"))
nova chamada: assertTrue(list.contains("spam"), "Era esperado verdadeiro, mas " + result2933 + " <list.contains('spam')> é falso")
chamada antiga: assertEquals("job", context.getJobName())
nova chamada: assertEquals("job", context.getJobName(), "Era esperado valores iguais, mas  'job' é diferente de " + result2934 + " <context.getJobName()>")
chamada antiga: assertEquals("bar", context.getJobExecutionContext().get("foo"))
nova chamada: assertEquals("bar", context.getJobExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2935 + " <context.getJobExecutionContext().get('foo')>")
chamada antiga: assertEquals("bar", context.getSystemProperties().getProperty("foo"))
nova chamada: assertEquals("bar", context.getSystemProperties().getProperty("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2936 + " <context.getSystemProperties().getProperty('foo')>")
chamada antiga: assertEquals("bar", context.getJobParameters().get("foo"))
nova chamada: assertEquals("bar", context.getJobParameters().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2937 + " <context.getJobParameters().get('foo')>")
chamada antiga: assertEquals("jobExecution#1", context.getId())
nova chamada: assertEquals("jobExecution#1", context.getId(), "Era esperado valores iguais, mas  'jobExecution#1' é diferente de " + result2938 + " <context.getId()>")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2939 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(JobSynchronizationManager.getContext())
nova chamada: assertNotNull(JobSynchronizationManager.getContext(), "Era esperado não nulo, mas " + result2940 + " <JobSynchronizationManager.getContext()> é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2941 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2942 + " <list.size()>")
chamada antiga: assertEquals(context.attributeNames().length, task.get().attributeNames().length)
nova chamada: assertEquals(context.attributeNames().length, task.get().attributeNames().length, "Era esperado valores iguais, mas  context.attributeNames().length é diferente de " + " task.get().attributeNames().length")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2943 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2944 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2945 + " <list.size()>")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2946 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2947 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertNotNull(JobSynchronizationManager.getContext())
nova chamada: assertNotNull(JobSynchronizationManager.getContext(), "Era esperado não nulo, mas " + result2948 + " <JobSynchronizationManager.getContext()> é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result2949 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertEquals(Long.valueOf(123), chunkContext.getStepContext().getStepExecution().getId())
nova chamada: assertEquals(Long.valueOf(123), chunkContext.getStepContext().getStepExecution().getId(), "Era esperado valores iguais, mas " + result2950 + " <Long.valueOf(123)> é diferente de " + result2951 + " <chunkContext.getStepContext().getStepExecution().getId()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null))
nova chamada: assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null), "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + result2952 + " <callback.doInIteration(null)>")
chamada antiga: assertEquals(ExitStatus.EXECUTING, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.EXECUTING, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.EXECUTING é diferente de " + result2953 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null))
nova chamada: assertEquals(RepeatStatus.FINISHED, callback.doInIteration(null), "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + result2954 + " <callback.doInIteration(null)>")
chamada antiga: assertTrue(addedAttribute)
nova chamada: assertTrue(addedAttribute, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(removedAttribute)
nova chamada: assertTrue(removedAttribute, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(removedAttribute)
nova chamada: assertFalse(removedAttribute, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertNotNull(context.getStepExecution())
nova chamada: assertNotNull(context.getStepExecution(), "Era esperado não nulo, mas " + result2955 + " <context.getStepExecution()> é nulo")
chamada antiga: assertEquals(context, context)
nova chamada: assertEquals(context, context, "Era esperado valores iguais, mas  context é diferente de " + " context")
chamada antiga: assertFalse(context.equals(null))
nova chamada: assertFalse(context.equals(null), "Era esperado falso, mas " + result2956 + " <context.equals(null)> é verdadeiro ")
chamada antiga: assertEquals(new StepContext(stepExecution), context)
nova chamada: assertEquals(new StepContext(stepExecution), context, "Era esperado valores iguais, mas  new StepContext(stepExecution) é diferente de " + " context")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2957 + " <list.size()>")
chamada antiga: assertEquals("bar", list.get(0))
nova chamada: assertEquals("bar", list.get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result2958 + " <list.get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2959 + " <list.size()>")
chamada antiga: assertEquals("fail!", exception.getMessage())
nova chamada: assertEquals("fail!", exception.getMessage(), "Era esperado valores iguais, mas  'fail!' é diferente de " + result2960 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2961 + " <list.size()>")
chamada antiga: assertTrue(list.contains("bar"))
nova chamada: assertTrue(list.contains("bar"), "Era esperado verdadeiro, mas " + result2962 + " <list.contains('bar')> é falso")
chamada antiga: assertTrue(list.contains("spam"))
nova chamada: assertTrue(list.contains("spam"), "Era esperado verdadeiro, mas " + result2963 + " <list.contains('spam')> é falso")
chamada antiga: assertEquals("step", context.getStepName())
nova chamada: assertEquals("step", context.getStepName(), "Era esperado valores iguais, mas  'step' é diferente de " + result2964 + " <context.getStepName()>")
chamada antiga: assertEquals("job", context.getJobName())
nova chamada: assertEquals("job", context.getJobName(), "Era esperado valores iguais, mas  'job' é diferente de " + result2965 + " <context.getJobName()>")
chamada antiga: assertEquals(2L, (long) context.getJobInstanceId())
nova chamada: assertEquals(2L, (long) context.getJobInstanceId(), "Era esperado valores iguais, mas  2L é diferente de " + " (long) context.getJobInstanceId()")
chamada antiga: assertEquals("bar", context.getStepExecutionContext().get("foo"))
nova chamada: assertEquals("bar", context.getStepExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2966 + " <context.getStepExecutionContext().get('foo')>")
chamada antiga: assertEquals("bar", context.getSystemProperties().getProperty("foo"))
nova chamada: assertEquals("bar", context.getSystemProperties().getProperty("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2967 + " <context.getSystemProperties().getProperty('foo')>")
chamada antiga: assertEquals("bar", context.getJobExecutionContext().get("foo"))
nova chamada: assertEquals("bar", context.getJobExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2968 + " <context.getJobExecutionContext().get('foo')>")
chamada antiga: assertEquals("bar", context.getJobParameters().get("foo"))
nova chamada: assertEquals("bar", context.getJobParameters().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result2969 + " <context.getJobParameters().get('foo')>")
chamada antiga: assertEquals("execution#1", context.getId())
nova chamada: assertEquals("execution#1", context.getId(), "Era esperado valores iguais, mas  'execution#1' é diferente de " + result2970 + " <context.getId()>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result2971 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2972 + " <simple.getName()>")
chamada antiga: assertEquals("foo", simple.getName())
nova chamada: assertEquals("foo", simple.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2973 + " <simple.getName()>")
chamada antiga: assertEquals(foo, value)
nova chamada: assertEquals(foo, value, "Era esperado valores iguais, mas  foo é diferente de " + " value")
chamada antiga: assertTrue(context.hasAttribute("foo"))
nova chamada: assertTrue(context.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result2974 + " <context.hasAttribute('foo')> é falso")
chamada antiga: assertEquals("bar", value)
nova chamada: assertEquals("bar", value, "Era esperado valores iguais, mas  'bar' é diferente de " + " value")
chamada antiga: assertTrue(context.hasAttribute("foo"))
nova chamada: assertTrue(context.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result2975 + " <context.hasAttribute('foo')> é falso")
chamada antiga: assertNotNull(id)
nova chamada: assertNotNull(id, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2976 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2977 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result2978 + " <list.size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result2979 + " <list.size()>")
chamada antiga: assertFalse(context.hasAttribute("foo"))
nova chamada: assertFalse(context.hasAttribute("foo"), "Era esperado falso, mas " + result2980 + " <context.hasAttribute('foo')> é verdadeiro ")
chamada antiga: assertEquals(Integer.MAX_VALUE, scope.getOrder())
nova chamada: assertEquals(Integer.MAX_VALUE, scope.getOrder(), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result2981 + " <scope.getOrder()>")
chamada antiga: assertEquals(11, scope.getOrder())
nova chamada: assertEquals(11, scope.getOrder(), "Era esperado valores iguais, mas  11 é diferente de " + result2982 + " <scope.getOrder()>")
chamada antiga: assertEquals(1, scopes.length)
nova chamada: assertEquals(1, scopes.length, "Era esperado valores iguais, mas  1 é diferente de " + " scopes.length")
chamada antiga: assertEquals("foo", scopes[0])
nova chamada: assertEquals("foo", scopes[0], "Era esperado valores iguais, mas  'foo' é diferente de " + " scopes[0]")
chamada antiga: assertNotNull(proxied)
nova chamada: assertNotNull(proxied, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result2983 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result2984 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, TestAdvice.names.size())
nova chamada: assertEquals(4, TestAdvice.names.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2985 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals("bar", TestAdvice.names.get(0))
nova chamada: assertEquals("bar", TestAdvice.names.get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result2986 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result2987 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(ref)
nova chamada: assertNotNull(ref, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, TestAdvice.names.size())
nova chamada: assertEquals(4, TestAdvice.names.size(), "Era esperado valores iguais, mas  4 é diferente de " + result2988 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals("spam", TestAdvice.names.get(0))
nova chamada: assertEquals("spam", TestAdvice.names.get(0), "Era esperado valores iguais, mas  'spam' é diferente de " + result2989 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  2 é diferente de " + result2990 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result2991 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'bar:destroyed')>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result2992 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'spam:destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, TestAdvice.names.size())
nova chamada: assertEquals(1, TestAdvice.names.size(), "Era esperado valores iguais, mas  1 é diferente de " + result2993 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals(name, TestAdvice.names.get(0))
nova chamada: assertEquals(name, TestAdvice.names.get(0), "Era esperado valores iguais, mas  name é diferente de " + result2994 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result2995 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("foo", value.getName())
nova chamada: assertEquals("foo", value.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result2996 + " <value.getName()>")
chamada antiga: assertEquals("bar", nested.getParent().getName())
nova chamada: assertEquals("bar", nested.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2997 + " <nested.getParent().getName()>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result2998 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result2999 + " <simple.getName()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3000 + " <simple.getName()>")
chamada antiga: assertEquals("bar-bar", compound.getName())
nova chamada: assertEquals("bar-bar", compound.getName(), "Era esperado valores iguais, mas  'bar-bar' é diferente de " + result3001 + " <compound.getName()>")
chamada antiga: assertEquals("bar-bar", compound.getName())
nova chamada: assertEquals("bar-bar", compound.getName(), "Era esperado valores iguais, mas  'bar-bar' é diferente de " + result3002 + " <compound.getName()>")
chamada antiga: assertEquals("spam-bar", compound.getName())
nova chamada: assertEquals("spam-bar", compound.getName(), "Era esperado valores iguais, mas  'spam-bar' é diferente de " + result3003 + " <compound.getName()>")
chamada antiga: assertEquals("bar", ref.getParent().getName())
nova chamada: assertEquals("bar", ref.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3004 + " <ref.getParent().getName()>")
chamada antiga: assertEquals("bar", value.getParent().getName())
nova chamada: assertEquals("bar", value.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3005 + " <value.getParent().getName()>")
chamada antiga: assertEquals("[bar]", list.getList().toString())
nova chamada: assertEquals("[bar]", list.getList().toString(), "Era esperado valores iguais, mas  '[bar]' é diferente de " + result3006 + " <list.getList().toString()>")
chamada antiga: assertEquals("bar", nested.getParent().getName())
nova chamada: assertEquals("bar", nested.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3007 + " <nested.getParent().getName()>")
chamada antiga: assertEquals("bar", scopedRef.getParent().getName())
nova chamada: assertEquals("bar", scopedRef.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3008 + " <scopedRef.getParent().getName()>")
chamada antiga: assertEquals("spam", scopedRef.getParent().getName())
nova chamada: assertEquals("spam", scopedRef.getParent().getName(), "Era esperado valores iguais, mas  'spam' é diferente de " + result3009 + " <scopedRef.getParent().getName()>")
chamada antiga: assertEquals(foo, value)
nova chamada: assertEquals(foo, value, "Era esperado valores iguais, mas  foo é diferente de " + " value")
chamada antiga: assertTrue(context.hasAttribute("foo"))
nova chamada: assertTrue(context.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result3010 + " <context.hasAttribute('foo')> é falso")
chamada antiga: assertEquals("bar", value)
nova chamada: assertEquals("bar", value, "Era esperado valores iguais, mas  'bar' é diferente de " + " value")
chamada antiga: assertTrue(context.hasAttribute("foo"))
nova chamada: assertTrue(context.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result3011 + " <context.hasAttribute('foo')> é falso")
chamada antiga: assertEquals("spam", value)
nova chamada: assertEquals("spam", value, "Era esperado valores iguais, mas  'spam' é diferente de " + " value")
chamada antiga: assertTrue(context.hasAttribute("foo"))
nova chamada: assertTrue(context.hasAttribute("foo"), "Era esperado verdadeiro, mas " + result3012 + " <context.hasAttribute('foo')> é falso")
chamada antiga: assertEquals("bar", scope.get("foo", null))
nova chamada: assertEquals("bar", scope.get("foo", null), "Era esperado valores iguais, mas  'bar' é diferente de " + result3013 + " <scope.get('foo', null)>")
chamada antiga: assertSame(other, context)
nova chamada: assertSame(other, context, "Era esperado objetos iguais, mas  other é diferente de " + " context")
chamada antiga: assertNotNull(id)
nova chamada: assertNotNull(id, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3014 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3015 + " <list.size()>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3016 + " <list.size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3017 + " <list.size()>")
chamada antiga: assertFalse(context.hasAttribute("foo"))
nova chamada: assertFalse(context.hasAttribute("foo"), "Era esperado falso, mas " + result3018 + " <context.hasAttribute('foo')> é verdadeiro ")
chamada antiga: assertEquals(Integer.MAX_VALUE, scope.getOrder())
nova chamada: assertEquals(Integer.MAX_VALUE, scope.getOrder(), "Era esperado valores iguais, mas  Integer.MAX_VALUE é diferente de " + result3019 + " <scope.getOrder()>")
chamada antiga: assertEquals(11, scope.getOrder())
nova chamada: assertEquals(11, scope.getOrder(), "Era esperado valores iguais, mas  11 é diferente de " + result3020 + " <scope.getOrder()>")
chamada antiga: assertEquals(1, scopes.length)
nova chamada: assertEquals(1, scopes.length, "Era esperado valores iguais, mas  1 é diferente de " + " scopes.length")
chamada antiga: assertEquals("foo", scopes[0])
nova chamada: assertEquals("foo", scopes[0], "Era esperado valores iguais, mas  'foo' é diferente de " + " scopes[0]")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result3021 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertTrue(AopUtils.isCglibProxy(simple))
nova chamada: assertTrue(AopUtils.isCglibProxy(simple), "Era esperado verdadeiro, mas " + result3022 + " <AopUtils.isCglibProxy(simple)> é falso")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3023 + " <simple.getName()>")
chamada antiga: assertTrue(AopUtils.isCglibProxy(simpleProxyTargetClassTrue))
nova chamada: assertTrue(AopUtils.isCglibProxy(simpleProxyTargetClassTrue), "Era esperado verdadeiro, mas " + result3024 + " <AopUtils.isCglibProxy(simpleProxyTargetClassTrue)> é falso")
chamada antiga: assertEquals("bar", simpleProxyTargetClassTrue.getName())
nova chamada: assertEquals("bar", simpleProxyTargetClassTrue.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3025 + " <simpleProxyTargetClassTrue.getName()>")
chamada antiga: assertTrue(AopUtils.isJdkDynamicProxy(simpleProxyTargetClassFalse))
nova chamada: assertTrue(AopUtils.isJdkDynamicProxy(simpleProxyTargetClassFalse), "Era esperado verdadeiro, mas " + result3026 + " <AopUtils.isJdkDynamicProxy(simpleProxyTargetClassFalse)> é falso")
chamada antiga: assertEquals("bar", simpleProxyTargetClassFalse.getName())
nova chamada: assertEquals("bar", simpleProxyTargetClassFalse.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3027 + " <simpleProxyTargetClassFalse.getName()>")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", collaborator)
nova chamada: assertEquals("foo", collaborator, "Era esperado valores iguais, mas  'foo' é diferente de " + " collaborator")
chamada antiga: assertNotNull(parent)
nova chamada: assertNotNull(parent, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", parent)
nova chamada: assertEquals("bar", parent, "Era esperado valores iguais, mas  'bar' é diferente de " + " parent")
chamada antiga: assertEquals("bar", parent)
nova chamada: assertEquals("bar", parent, "Era esperado valores iguais, mas  'bar' é diferente de " + " parent")
chamada antiga: assertEquals("bar", parent)
nova chamada: assertEquals("bar", parent, "Era esperado valores iguais, mas  'bar' é diferente de " + " parent")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result3028 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3029 + " <simple.getName()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3030 + " <simple.getName()>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result3031 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3032 + " <simple.getName()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3033 + " <simple.getName()>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result3034 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3035 + " <simple.getName()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3036 + " <simple.getName()>")
chamada antiga: assertEquals("bar-bar", compound.getName())
nova chamada: assertEquals("bar-bar", compound.getName(), "Era esperado valores iguais, mas  'bar-bar' é diferente de " + result3037 + " <compound.getName()>")
chamada antiga: assertEquals("bar-bar", compound.getName())
nova chamada: assertEquals("bar-bar", compound.getName(), "Era esperado valores iguais, mas  'bar-bar' é diferente de " + result3038 + " <compound.getName()>")
chamada antiga: assertEquals("spam-bar", compound.getName())
nova chamada: assertEquals("spam-bar", compound.getName(), "Era esperado valores iguais, mas  'spam-bar' é diferente de " + result3039 + " <compound.getName()>")
chamada antiga: assertEquals("bar", ref.getParent().getName())
nova chamada: assertEquals("bar", ref.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3040 + " <ref.getParent().getName()>")
chamada antiga: assertEquals("bar", value.getParent().getName())
nova chamada: assertEquals("bar", value.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3041 + " <value.getParent().getName()>")
chamada antiga: assertEquals("[bar]", list.getList().toString())
nova chamada: assertEquals("[bar]", list.getList().toString(), "Era esperado valores iguais, mas  '[bar]' é diferente de " + result3042 + " <list.getList().toString()>")
chamada antiga: assertEquals("bar", nested.getParent().getName())
nova chamada: assertEquals("bar", nested.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3043 + " <nested.getParent().getName()>")
chamada antiga: assertEquals("bar", scopedRef.getParent().getName())
nova chamada: assertEquals("bar", scopedRef.getParent().getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3044 + " <scopedRef.getParent().getName()>")
chamada antiga: assertEquals("spam", scopedRef.getParent().getName())
nova chamada: assertEquals("spam", scopedRef.getParent().getName(), "Era esperado valores iguais, mas  'spam' é diferente de " + result3045 + " <scopedRef.getParent().getName()>")
chamada antiga: assertNotNull(proxied)
nova chamada: assertNotNull(proxied, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result3046 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result3047 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, TestAdvice.names.size())
nova chamada: assertEquals(4, TestAdvice.names.size(), "Era esperado valores iguais, mas  4 é diferente de " + result3048 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals("bar", TestAdvice.names.get(0))
nova chamada: assertEquals("bar", TestAdvice.names.get(0), "Era esperado valores iguais, mas  'bar' é diferente de " + result3049 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result3050 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertNotNull(ref)
nova chamada: assertNotNull(ref, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(4, TestAdvice.names.size())
nova chamada: assertEquals(4, TestAdvice.names.size(), "Era esperado valores iguais, mas  4 é diferente de " + result3051 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals("spam", TestAdvice.names.get(0))
nova chamada: assertEquals("spam", TestAdvice.names.get(0), "Era esperado valores iguais, mas  'spam' é diferente de " + result3052 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"))
nova chamada: assertEquals(2, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "destroyed"), "Era esperado valores iguais, mas  2 é diferente de " + result3053 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'destroyed')>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "bar:destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result3054 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'bar:destroyed')>")
chamada antiga: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"))
nova chamada: assertEquals(1, StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, "spam:destroyed"), "Era esperado valores iguais, mas  1 é diferente de " + result3055 + " <StringUtils.countOccurrencesOf(TestDisposableCollaborator.message, 'spam:destroyed')>")
chamada antiga: assertNotNull(nested)
nova chamada: assertNotNull(nested, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(1, TestAdvice.names.size())
nova chamada: assertEquals(1, TestAdvice.names.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3056 + " <TestAdvice.names.size()>")
chamada antiga: assertEquals(name, TestAdvice.names.get(0))
nova chamada: assertEquals(name, TestAdvice.names.get(0), "Era esperado valores iguais, mas  name é diferente de " + result3057 + " <TestAdvice.names.get(0)>")
chamada antiga: assertEquals(beanCount, beanFactory.getBeanDefinitionCount())
nova chamada: assertEquals(beanCount, beanFactory.getBeanDefinitionCount(), "Era esperado valores iguais, mas  beanCount é diferente de " + result3058 + " <beanFactory.getBeanDefinitionCount()>")
chamada antiga: assertEquals("bar", simple.getName())
nova chamada: assertEquals("bar", simple.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3059 + " <simple.getName()>")
chamada antiga: assertEquals("foo", simple.getName())
nova chamada: assertEquals("foo", simple.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3060 + " <simple.getName()>")
chamada antiga: assertNotNull(TestStep.getContext())
nova chamada: assertNotNull(TestStep.getContext(), "Era esperado não nulo, mas " + result3061 + " <TestStep.getContext()> é nulo")
chamada antiga: assertNull(StepSynchronizationManager.getContext())
nova chamada: assertNull(StepSynchronizationManager.getContext(), "Era esperado nulo, mas " + result3062 + " <StepSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", collaborator)
nova chamada: assertEquals("foo", collaborator, "Era esperado valores iguais, mas  'foo' é diferente de " + " collaborator")
chamada antiga: assertNotNull(parent)
nova chamada: assertNotNull(parent, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", parent)
nova chamada: assertEquals("bar", parent, "Era esperado valores iguais, mas  'bar' é diferente de " + " parent")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestStep.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestStep.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertNotNull(TestJob.getContext())
nova chamada: assertNotNull(TestJob.getContext(), "Era esperado não nulo, mas " + result3063 + " <TestJob.getContext()> é nulo")
chamada antiga: assertNull(JobSynchronizationManager.getContext())
nova chamada: assertNull(JobSynchronizationManager.getContext(), "Era esperado nulo, mas " + result3064 + " <JobSynchronizationManager.getContext()> não é nulo")
chamada antiga: assertTrue(TestJob.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestJob.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestJob.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestJob.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("foo", collaborator)
nova chamada: assertEquals("foo", collaborator, "Era esperado valores iguais, mas  'foo' é diferente de " + " collaborator")
chamada antiga: assertNotNull(parent)
nova chamada: assertNotNull(parent, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", parent)
nova chamada: assertEquals("bar", parent, "Era esperado valores iguais, mas  'bar' é diferente de " + " parent")
chamada antiga: assertTrue(TestJob.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestJob.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestJob.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestJob.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertTrue(TestJob.getContext().attributeNames().length > 0)
nova chamada: assertTrue(TestJob.getContext().attributeNames().length > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(collaborator)
nova chamada: assertNotNull(collaborator, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("bar", collaborator)
nova chamada: assertEquals("bar", collaborator, "Era esperado valores iguais, mas  'bar' é diferente de " + " collaborator")
chamada antiga: assertEquals(finalParams.getString("foo"), "baz")
nova chamada: assertEquals(finalParams.getString("foo"), "baz", "Era esperado valores iguais, mas " + result3065 + " <finalParams.getString('foo')> é diferente de " + " 'baz'")
chamada antiga: assertEquals(finalParams.getString("bar"), "baz")
nova chamada: assertEquals(finalParams.getString("bar"), "baz", "Era esperado valores iguais, mas " + result3066 + " <finalParams.getString('bar')> é diferente de " + " 'baz'")
chamada antiga: assertEquals(finalParams.getString("baz"), "quix")
nova chamada: assertEquals(finalParams.getString("baz"), "quix", "Era esperado valores iguais, mas " + result3067 + " <finalParams.getString('baz')> é diferente de " + " 'quix'")
chamada antiga: assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
nova chamada: assertEquals(date, parameters.getDate("SCHEDULE_DATE"), "Era esperado valores iguais, mas  date é diferente de " + result3068 + " <parameters.getDate('SCHEDULE_DATE')>")
chamada antiga: assertEquals(1L, parameters.getLong("LONG").longValue())
nova chamada: assertEquals(1L, parameters.getLong("LONG").longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result3069 + " <parameters.getLong('LONG').longValue()>")
chamada antiga: assertEquals("string value", parameters.getString("STRING"))
nova chamada: assertEquals("string value", parameters.getString("STRING"), "Era esperado valores iguais, mas  'string value' é diferente de " + result3070 + " <parameters.getString('STRING')>")
chamada antiga: assertFalse(parameters.getParameters().get("SCHEDULE_DATE").isIdentifying())
nova chamada: assertFalse(parameters.getParameters().get("SCHEDULE_DATE").isIdentifying(), "Era esperado falso, mas " + result3071 + " <parameters.getParameters().get('SCHEDULE_DATE').isIdentifying()> é verdadeiro ")
chamada antiga: assertFalse(parameters.getParameters().get("LONG").isIdentifying())
nova chamada: assertFalse(parameters.getParameters().get("LONG").isIdentifying(), "Era esperado falso, mas " + result3072 + " <parameters.getParameters().get('LONG').isIdentifying()> é verdadeiro ")
chamada antiga: assertFalse(parameters.getParameters().get("STRING").isIdentifying())
nova chamada: assertFalse(parameters.getParameters().get("STRING").isIdentifying(), "Era esperado falso, mas " + result3073 + " <parameters.getParameters().get('STRING').isIdentifying()> é verdadeiro ")
chamada antiga: assertFalse(parameters.getParameters().get("DOUBLE").isIdentifying())
nova chamada: assertFalse(parameters.getParameters().get("DOUBLE").isIdentifying(), "Era esperado falso, mas " + result3074 + " <parameters.getParameters().get('DOUBLE').isIdentifying()> é verdadeiro ")
chamada antiga: assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
nova chamada: assertEquals(date, parameters.getDate("SCHEDULE_DATE"), "Era esperado valores iguais, mas  date é diferente de " + result3075 + " <parameters.getDate('SCHEDULE_DATE')>")
chamada antiga: assertEquals(1L, parameters.getLong("LONG").longValue())
nova chamada: assertEquals(1L, parameters.getLong("LONG").longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result3076 + " <parameters.getLong('LONG').longValue()>")
chamada antiga: assertEquals("string value", parameters.getString("STRING"))
nova chamada: assertEquals("string value", parameters.getString("STRING"), "Era esperado valores iguais, mas  'string value' é diferente de " + result3077 + " <parameters.getString('STRING')>")
chamada antiga: assertEquals("STRING", parameters.next())
nova chamada: assertEquals("STRING", parameters.next(), "Era esperado valores iguais, mas  'STRING' é diferente de " + result3078 + " <parameters.next()>")
chamada antiga: assertEquals("SCHEDULE_DATE", parameters.next())
nova chamada: assertEquals("SCHEDULE_DATE", parameters.next(), "Era esperado valores iguais, mas  'SCHEDULE_DATE' é diferente de " + result3079 + " <parameters.next()>")
chamada antiga: assertEquals("LONG", parameters.next())
nova chamada: assertEquals("LONG", parameters.next(), "Era esperado valores iguais, mas  'LONG' é diferente de " + result3080 + " <parameters.next()>")
chamada antiga: assertEquals("STRING", parameters.next())
nova chamada: assertEquals("STRING", parameters.next(), "Era esperado valores iguais, mas  'STRING' é diferente de " + result3081 + " <parameters.next()>")
chamada antiga: assertEquals("foo", parameters.next())
nova chamada: assertEquals("foo", parameters.next(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3082 + " <parameters.next()>")
chamada antiga: assertEquals("bar", parameters.next())
nova chamada: assertEquals("bar", parameters.next(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3083 + " <parameters.next()>")
chamada antiga: assertEquals("spam", parameters.next())
nova chamada: assertEquals("spam", parameters.next(), "Era esperado valores iguais, mas  'spam' é diferente de " + result3084 + " <parameters.next()>")
chamada antiga: assertEquals(1, parameters.size())
nova chamada: assertEquals(1, parameters.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3085 + " <parameters.size()>")
chamada antiga: assertEquals("bar", parameters.get("foo").getValue())
nova chamada: assertEquals("bar", parameters.get("foo").getValue(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3086 + " <parameters.get('foo').getValue()>")
chamada antiga: assertEquals("No job parameters incrementer found for job=simpleJob", expectedException.getMessage())
nova chamada: assertEquals("No job parameters incrementer found for job=simpleJob", expectedException.getMessage(), "Era esperado valores iguais, mas  'No job parameters incrementer found for job=simpleJob' é diferente de " + result3087 + " <expectedException.getMessage()>")
chamada antiga: assertEquals(1, parameters.getLong("run.id"))
nova chamada: assertEquals(1, parameters.getLong("run.id"), "Era esperado valores iguais, mas  1 é diferente de " + result3088 + " <parameters.getLong('run.id')>")
chamada antiga: assertEquals(date, parameters.getDate("SCHEDULE_DATE"))
nova chamada: assertEquals(date, parameters.getDate("SCHEDULE_DATE"), "Era esperado valores iguais, mas  date é diferente de " + result3089 + " <parameters.getDate('SCHEDULE_DATE')>")
chamada antiga: assertEquals(1L, parameters.getLong("LONG").longValue())
nova chamada: assertEquals(1L, parameters.getLong("LONG").longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result3090 + " <parameters.getLong('LONG').longValue()>")
chamada antiga: assertEquals("string value", parameters.getString("STRING"))
nova chamada: assertEquals("string value", parameters.getString("STRING"), "Era esperado valores iguais, mas  'string value' é diferente de " + result3091 + " <parameters.getString('STRING')>")
chamada antiga: assertEquals(paramCount, parameters.getParameters().size())
nova chamada: assertEquals(paramCount, parameters.getParameters().size(), "Era esperado valores iguais, mas  paramCount é diferente de " + result3092 + " <parameters.getParameters().size()>")
chamada antiga: assertEquals("test", jobParameter.getValue())
nova chamada: assertEquals("test", jobParameter.getValue(), "Era esperado valores iguais, mas  'test' é diferente de " + result3093 + " <jobParameter.getValue()>")
chamada antiga: assertEquals(String.class, jobParameter.getType())
nova chamada: assertEquals(String.class, jobParameter.getType(), "Era esperado valores iguais, mas  String.class é diferente de " + result3094 + " <jobParameter.getType()>")
chamada antiga: assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result3095 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: assertEquals(1L, jobParameter.getValue())
nova chamada: assertEquals(1L, jobParameter.getValue(), "Era esperado valores iguais, mas  1L é diferente de " + result3096 + " <jobParameter.getValue()>")
chamada antiga: assertEquals(Long.class, jobParameter.getType())
nova chamada: assertEquals(Long.class, jobParameter.getType(), "Era esperado valores iguais, mas  Long.class é diferente de " + result3097 + " <jobParameter.getType()>")
chamada antiga: assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result3098 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: assertEquals(1.1, jobParameter.getValue())
nova chamada: assertEquals(1.1, jobParameter.getValue(), "Era esperado valores iguais, mas  1.1 é diferente de " + result3099 + " <jobParameter.getValue()>")
chamada antiga: assertEquals(Double.class, jobParameter.getType())
nova chamada: assertEquals(Double.class, jobParameter.getType(), "Era esperado valores iguais, mas  Double.class é diferente de " + result3100 + " <jobParameter.getType()>")
chamada antiga: assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result3101 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: assertEquals(new Date(0L), jobParameter.getValue())
nova chamada: assertEquals(new Date(0L), jobParameter.getValue(), "Era esperado valores iguais, mas  new Date(0L) é diferente de " + result3102 + " <jobParameter.getValue()>")
chamada antiga: assertEquals(Date.class, jobParameter.getType())
nova chamada: assertEquals(Date.class, jobParameter.getType(), "Era esperado valores iguais, mas  Date.class é diferente de " + result3103 + " <jobParameter.getType()>")
chamada antiga: assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result3104 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: assertEquals(jobParameter, testParameter)
nova chamada: assertEquals(jobParameter, testParameter, "Era esperado valores iguais, mas  jobParameter é diferente de " + " testParameter")
chamada antiga: assertEquals(testParameter.hashCode(), jobParameter.hashCode())
nova chamada: assertEquals(testParameter.hashCode(), jobParameter.hashCode(), "Era esperado valores iguais, mas " + result3105 + " <testParameter.hashCode()> é diferente de " + result3106 + " <jobParameter.hashCode()>")
chamada antiga: assertEquals(jobExecution, lastJobExecution)
nova chamada: assertEquals(jobExecution, lastJobExecution, "Era esperado valores iguais, mas  jobExecution é diferente de " + " lastJobExecution")
chamada antiga: assertNull(jobExplorer.getJobExecution(123L))
nova chamada: assertNull(jobExplorer.getJobExecution(123L), "Era esperado nulo, mas " + result3107 + " <jobExplorer.getJobExecution(123L)> não é nulo")
chamada antiga: assertEquals(jobInstance, stepExecution.getJobExecution().getJobInstance())
nova chamada: assertEquals(jobInstance, stepExecution.getJobExecution().getJobInstance(), "Era esperado valores iguais, mas  jobInstance é diferente de " + result3108 + " <stepExecution.getJobExecution().getJobInstance()>")
chamada antiga: assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L))
nova chamada: assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L), "Era esperado nulo, mas " + result3109 + " <jobExplorer.getStepExecution(jobExecution.getId(), 123L)> não é nulo")
chamada antiga: assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L))
nova chamada: assertNull(jobExplorer.getStepExecution(jobExecution.getId(), 123L), "Era esperado nulo, mas " + result3110 + " <jobExplorer.getStepExecution(jobExecution.getId(), 123L)> não é nulo")
chamada antiga: assertEquals(this.jobInstance, jobInstance)
nova chamada: assertEquals(this.jobInstance, jobInstance, "Era esperado valores iguais, mas  this.jobInstance é diferente de " + " jobInstance")
chamada antiga: assertEquals(jobInstance, lastJobInstance)
nova chamada: assertEquals(jobInstance, lastJobInstance, "Era esperado valores iguais, mas  jobInstance é diferente de " + " lastJobInstance")
chamada antiga: assertEquals(4, jobExplorer.getJobInstanceCount("myJob"))
nova chamada: assertEquals(4, jobExplorer.getJobInstanceCount("myJob"), "Era esperado valores iguais, mas  4 é diferente de " + result3111 + " <jobExplorer.getJobInstanceCount('myJob')>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExplorerStepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExplorerStepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3112 + " <jobExplorerStepExecution.getStatus()>")
chamada antiga: assertEquals(1, lastJobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, lastJobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3113 + " <lastJobExecution.getStepExecutions().size()>")
chamada antiga: assertNotNull(stepExecution.getExecutionContext())
nova chamada: assertNotNull(stepExecution.getExecutionContext(), "Era esperado não nulo, mas " + result3114 + " <stepExecution.getExecutionContext()> é nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3115 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3116 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3117 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3118 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3119 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3120 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3121 + " <execution.getStatus()>")
chamada antiga: assertEquals(stepExecution, result)
nova chamada: assertEquals(stepExecution, result, "Era esperado valores iguais, mas  stepExecution é diferente de " + " result")
chamada antiga: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
nova chamada: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount(), "Era esperado valores iguais, mas  TOTAL_ITEMS é diferente de " + result3122 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(10, stepExecution.getFilterCount())
nova chamada: assertEquals(10, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  10 é diferente de " + result3123 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(19, stepExecution.getWriteCount())
nova chamada: assertEquals(19, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  19 é diferente de " + result3124 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3125 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
nova chamada: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount(), "Era esperado valores iguais, mas  TOTAL_ITEMS é diferente de " + result3126 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(10, stepExecution.getFilterCount())
nova chamada: assertEquals(10, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  10 é diferente de " + result3127 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(19, stepExecution.getWriteCount())
nova chamada: assertEquals(19, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  19 é diferente de " + result3128 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3129 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
nova chamada: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount(), "Era esperado valores iguais, mas  TOTAL_ITEMS é diferente de " + result3130 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(20, stepExecution.getFilterCount())
nova chamada: assertEquals(20, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  20 é diferente de " + result3131 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(19, stepExecution.getWriteCount())
nova chamada: assertEquals(19, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  19 é diferente de " + result3132 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3133 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount())
nova chamada: assertEquals(TOTAL_ITEMS, stepExecution.getReadCount(), "Era esperado valores iguais, mas  TOTAL_ITEMS é diferente de " + result3134 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(20, stepExecution.getFilterCount())
nova chamada: assertEquals(20, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  20 é diferente de " + result3135 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(19, stepExecution.getWriteCount())
nova chamada: assertEquals(19, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  19 é diferente de " + result3136 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3137 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3138 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3139 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(7, stepExecution.getReadCount())
nova chamada: assertEquals(7, stepExecution.getReadCount(), "Era esperado valores iguais, mas  7 é diferente de " + result3140 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(6, stepExecution.getWriteCount())
nova chamada: assertEquals(6, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  6 é diferente de " + result3141 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(1, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3142 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3143 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3144 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(3, stepExecution.getReadCount())
nova chamada: assertEquals(3, stepExecution.getReadCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3145 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteCount())
nova chamada: assertEquals(1, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3146 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3147 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(1, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3148 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(3, stepExecution.getRollbackCount())
nova chamada: assertEquals(3, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3149 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(2, stepExecution.getCommitCount())
nova chamada: assertEquals(2, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3150 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  3 é diferente de " + result3151 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  0 é diferente de " + result3152 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(3, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  3 é diferente de " + result3153 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "ERROR_LOG"), "Era esperado valores iguais, mas  0 é diferente de " + result3154 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'ERROR_LOG')>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3155 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3156 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3157 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3158 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3159 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(1, jobInstances.size())
nova chamada: assertEquals(1, jobInstances.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3160 + " <jobInstances.size()>")
chamada antiga: assertEquals(2, jobExecutions.size())
nova chamada: assertEquals(2, jobExecutions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3161 + " <jobExecutions.size()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3162 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(before + 1, after)
nova chamada: assertEquals(before + 1, after, "Era esperado valores iguais, mas  before + 1 é diferente de " + " after")
chamada antiga: assertNotNull(execution.getId())
nova chamada: assertNotNull(execution.getId(), "Era esperado não nulo, mas " + result3163 + " <execution.getId()> é nulo")
chamada antiga: assertEquals(before + 1, after)
nova chamada: assertEquals(before + 1, after, "Era esperado valores iguais, mas  before + 1 é diferente de " + " after")
chamada antiga: assertNotNull(execution.getId())
nova chamada: assertNotNull(execution.getId(), "Era esperado não nulo, mas " + result3164 + " <execution.getId()> é nulo")
chamada antiga: assertEquals(execution, last)
nova chamada: assertEquals(execution, last, "Era esperado valores iguais, mas  execution é diferente de " + " last")
chamada antiga: assertEquals(execution.getExecutionContext(), last.getExecutionContext())
nova chamada: assertEquals(execution.getExecutionContext(), last.getExecutionContext(), "Era esperado valores iguais, mas " + result3165 + " <execution.getExecutionContext()> é diferente de " + result3166 + " <last.getExecutionContext()>")
chamada antiga: assertEquals(0, before)
nova chamada: assertEquals(0, before, "Era esperado valores iguais, mas  0 é diferente de " + " before")
chamada antiga: assertNotNull(execution)
nova chamada: assertNotNull(execution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(execution.getId())
nova chamada: assertNotNull(execution.getId(), "Era esperado não nulo, mas " + result3167 + " <execution.getId()> é nulo")
chamada antiga: assertEquals(before + 1, after)
nova chamada: assertEquals(before + 1, after, "Era esperado valores iguais, mas  before + 1 é diferente de " + " after")
chamada antiga: assertEquals(1, before)
nova chamada: assertEquals(1, before, "Era esperado valores iguais, mas  1 é diferente de " + " before")
chamada antiga: assertNotNull(execution.getId())
nova chamada: assertNotNull(execution.getId(), "Era esperado não nulo, mas " + result3168 + " <execution.getId()> é nulo")
chamada antiga: assertEquals(before, after)
nova chamada: assertEquals(before, after, "Era esperado valores iguais, mas  before é diferente de " + " after")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3169 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3170 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3171 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3172 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3173 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3174 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3175 + " <jobExecution.getExitStatus()>")
chamada antiga: assertNotNull(configuration.getName())
nova chamada: assertNotNull(configuration.getName(), "Era esperado não nulo, mas " + result3176 + " <configuration.getName()> é nulo")
chamada antiga: assertEquals("bean", configuration.getName())
nova chamada: assertEquals("bean", configuration.getName(), "Era esperado valores iguais, mas  'bean' é diferente de " + result3177 + " <configuration.getName()>")
chamada antiga: assertNotNull(configuration.getName())
nova chamada: assertNotNull(configuration.getName(), "Era esperado não nulo, mas " + result3178 + " <configuration.getName()> é nulo")
chamada antiga: assertEquals("foo", configuration.getName())
nova chamada: assertEquals("foo", configuration.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3179 + " <configuration.getName()>")
chamada antiga: assertEquals("foo", configuration.getName())
nova chamada: assertEquals("foo", configuration.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3180 + " <configuration.getName()>")
chamada antiga: assertNotNull(configuration.getName())
nova chamada: assertNotNull(configuration.getName(), "Era esperado não nulo, mas " + result3181 + " <configuration.getName()> é nulo")
chamada antiga: assertEquals("bar", configuration.getName())
nova chamada: assertEquals("bar", configuration.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3182 + " <configuration.getName()>")
chamada antiga: assertEquals("bar", configuration.getName())
nova chamada: assertEquals("bar", configuration.getName(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3183 + " <configuration.getName()>")
chamada antiga: assertEquals("foo", configuration.getName())
nova chamada: assertEquals("foo", configuration.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3184 + " <configuration.getName()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3185 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result3186 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3187 + " <execution.getStepExecutions().size()>")
chamada antiga: assertNull(job.getName())
nova chamada: assertNull(job.getName(), "Era esperado nulo, mas " + result3188 + " <job.getName()> não é nulo")
chamada antiga: assertEquals("job", job.getName())
nova chamada: assertEquals("job", job.getName(), "Era esperado valores iguais, mas  'job' é diferente de " + result3189 + " <job.getName()>")
chamada antiga: assertEquals(null, job.getName())
nova chamada: assertEquals(null, job.getName(), "Era esperado valores iguais, mas  null é diferente de " + result3190 + " <job.getName()>")
chamada antiga: assertEquals("foo", job.getName())
nova chamada: assertEquals("foo", job.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3191 + " <job.getName()>")
chamada antiga: assertTrue(job.isRestartable())
nova chamada: assertTrue(job.isRestartable(), "Era esperado verdadeiro, mas " + result3192 + " <job.isRestartable()> é falso")
chamada antiga: assertFalse(job.isRestartable())
nova chamada: assertFalse(job.isRestartable(), "Era esperado falso, mas " + result3193 + " <job.isRestartable()> é verdadeiro ")
chamada antiga: assertTrue(exception.getMessage().contains("JobRepository"))
nova chamada: assertTrue(exception.getMessage().contains("JobRepository"), "Era esperado verdadeiro, mas " + result3194 + " <exception.getMessage().contains('JobRepository')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3195 + " <execution.getStatus()>")
chamada antiga: assertEquals("FOO", execution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("FOO", execution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result3196 + " <execution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(StubStep.value, execution.getExecutionContext().get(StubStep.key))
nova chamada: assertEquals(StubStep.value, execution.getExecutionContext().get(StubStep.key), "Era esperado valores iguais, mas  StubStep.value é diferente de " + result3197 + " <execution.getExecutionContext().get(StubStep.key)>")
chamada antiga: assertEquals(StubStep.value, restarted.getExecutionContext().get(StubStep.key))
nova chamada: assertEquals(StubStep.value, restarted.getExecutionContext().get(StubStep.key), "Era esperado valores iguais, mas  StubStep.value é diferente de " + result3198 + " <restarted.getExecutionContext().get(StubStep.key)>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3199 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result3200 + " <execution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3201 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3202 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3203 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3204 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result3205 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result3206 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3207 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3208 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3209 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals("bar", stepExecution.getExecutionContext().get("foo"))
nova chamada: assertEquals("bar", stepExecution.getExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result3210 + " <stepExecution.getExecutionContext().get('foo')>")
chamada antiga: assertEquals("foo", execution.getName())
nova chamada: assertEquals("foo", execution.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3211 + " <execution.getName()>")
chamada antiga: assertEquals("BAR", execution.getStatus().getName())
nova chamada: assertEquals("BAR", execution.getStatus().getName(), "Era esperado valores iguais, mas  'BAR' é diferente de " + result3212 + " <execution.getStatus().getName()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3213 + " <exception.getMessage()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3214 + " <exception.getMessage()>")
chamada antiga: assertEquals("bar", exception.getCause().getMessage())
nova chamada: assertEquals("bar", exception.getCause().getMessage(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3215 + " <exception.getCause().getMessage()>")
chamada antiga: assertTrue(transition.isEnd())
nova chamada: assertTrue(transition.isEnd(), "Era esperado verdadeiro, mas " + result3216 + " <transition.isEnd()> é falso")
chamada antiga: assertNull(transition.getNext())
nova chamada: assertNull(transition.getNext(), "Era esperado nulo, mas " + result3217 + " <transition.getNext()> não é nulo")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3218 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3219 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3220 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3221 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3222 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertTrue(transition.matches("CONTINUABLE"))
nova chamada: assertTrue(transition.matches("CONTINUABLE"), "Era esperado verdadeiro, mas " + result3223 + " <transition.matches('CONTINUABLE')> é falso")
chamada antiga: assertEquals(0, comparator.compare(transition, transition))
nova chamada: assertEquals(0, comparator.compare(transition, transition), "Era esperado valores iguais, mas  0 é diferente de " + result3224 + " <comparator.compare(transition, transition)>")
chamada antiga: assertEquals(1, comparator.compare(transition, other))
nova chamada: assertEquals(1, comparator.compare(transition, other), "Era esperado valores iguais, mas  1 é diferente de " + result3225 + " <comparator.compare(transition, other)>")
chamada antiga: assertEquals(-1, comparator.compare(other, transition))
nova chamada: assertEquals(-1, comparator.compare(other, transition), "Era esperado valores iguais, mas  -1 é diferente de " + result3226 + " <comparator.compare(other, transition)>")
chamada antiga: assertEquals(1, comparator.compare(transition, other))
nova chamada: assertEquals(1, comparator.compare(transition, other), "Era esperado valores iguais, mas  1 é diferente de " + result3227 + " <comparator.compare(transition, other)>")
chamada antiga: assertEquals(-1, comparator.compare(other, transition))
nova chamada: assertEquals(-1, comparator.compare(other, transition), "Era esperado valores iguais, mas  -1 é diferente de " + result3228 + " <comparator.compare(other, transition)>")
chamada antiga: assertEquals(1, comparator.compare(transition, other))
nova chamada: assertEquals(1, comparator.compare(transition, other), "Era esperado valores iguais, mas  1 é diferente de " + result3229 + " <comparator.compare(transition, other)>")
chamada antiga: assertEquals(-1, comparator.compare(other, transition))
nova chamada: assertEquals(-1, comparator.compare(other, transition), "Era esperado valores iguais, mas  -1 é diferente de " + result3230 + " <comparator.compare(other, transition)>")
chamada antiga: assertEquals(1, comparator.compare(transition, other))
nova chamada: assertEquals(1, comparator.compare(transition, other), "Era esperado valores iguais, mas  1 é diferente de " + result3231 + " <comparator.compare(transition, other)>")
chamada antiga: assertEquals(-1, comparator.compare(other, transition))
nova chamada: assertEquals(-1, comparator.compare(other, transition), "Era esperado valores iguais, mas  -1 é diferente de " + result3232 + " <comparator.compare(other, transition)>")
chamada antiga: assertEquals(1, comparator.compare(transition, other))
nova chamada: assertEquals(1, comparator.compare(transition, other), "Era esperado valores iguais, mas  1 é diferente de " + result3233 + " <comparator.compare(transition, other)>")
chamada antiga: assertEquals(-1, comparator.compare(other, transition))
nova chamada: assertEquals(-1, comparator.compare(other, transition), "Era esperado valores iguais, mas  -1 é diferente de " + result3234 + " <comparator.compare(other, transition)>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3235 + " <execution.getStatus()>")
chamada antiga: assertEquals("step", execution.getName())
nova chamada: assertEquals("step", execution.getName(), "Era esperado valores iguais, mas  'step' é diferente de " + result3236 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3237 + " <execution.getStatus()>")
chamada antiga: assertEquals("step1", execution.getName())
nova chamada: assertEquals("step1", execution.getName(), "Era esperado valores iguais, mas  'step1' é diferente de " + result3238 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3239 + " <execution.getStatus()>")
chamada antiga: assertEquals("step1", execution.getName())
nova chamada: assertEquals("step1", execution.getName(), "Era esperado valores iguais, mas  'step1' é diferente de " + result3240 + " <execution.getName()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3241 + " <list.size()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3242 + " <execution.getStatus()>")
chamada antiga: assertEquals("step1", execution.getName())
nova chamada: assertEquals("step1", execution.getName(), "Era esperado valores iguais, mas  'step1' é diferente de " + result3243 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3244 + " <execution.getStatus()>")
chamada antiga: assertEquals("step", execution.getName())
nova chamada: assertEquals("step", execution.getName(), "Era esperado valores iguais, mas  'step' é diferente de " + result3245 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3246 + " <execution.getStatus()>")
chamada antiga: assertEquals("step2", execution.getName())
nova chamada: assertEquals("step2", execution.getName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3247 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3248 + " <execution.getStatus()>")
chamada antiga: assertEquals("step2", execution.getName())
nova chamada: assertEquals("step2", execution.getName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3249 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3250 + " <execution.getStatus()>")
chamada antiga: assertEquals("step2", execution.getName())
nova chamada: assertEquals("step2", execution.getName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3251 + " <execution.getName()>")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + result3252 + " <execution.getStatus()>")
chamada antiga: assertEquals("step3", execution.getName())
nova chamada: assertEquals("step3", execution.getName(), "Era esperado valores iguais, mas  'step3' é diferente de " + result3253 + " <execution.getName()>")
chamada antiga: assertNotNull(state)
nova chamada: assertNotNull(state, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("step1", state.getName())
nova chamada: assertEquals("step1", state.getName(), "Era esperado valores iguais, mas  'step1' é diferente de " + result3254 + " <state.getName()>")
chamada antiga: assertNull(state)
nova chamada: assertNull(state, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, result)
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, result, "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + " result")
chamada antiga: assertEquals(FlowExecutionStatus.COMPLETED, result)
nova chamada: assertEquals(FlowExecutionStatus.COMPLETED, result, "Era esperado valores iguais, mas  FlowExecutionStatus.COMPLETED é diferente de " + " result")
chamada antiga: assertEquals(FlowExecutionStatus.FAILED, aggregator.aggregate(Arrays.asList(first, second)))
nova chamada: assertEquals(FlowExecutionStatus.FAILED, aggregator.aggregate(Arrays.asList(first, second)), "Era esperado valores iguais, mas  FlowExecutionStatus.FAILED é diferente de " + result3255 + " <aggregator.aggregate(Arrays.asList(first, second))>")
chamada antiga: assertEquals(FlowExecutionStatus.UNKNOWN, aggregator.aggregate(Collections.<FlowExecution>emptySet()))
nova chamada: assertEquals(FlowExecutionStatus.UNKNOWN, aggregator.aggregate(Collections.<FlowExecution>emptySet()), "Era esperado valores iguais, mas  FlowExecutionStatus.UNKNOWN é diferente de " + result3256 + " <aggregator.aggregate(Collections.<FlowExecution>emptySet())>")
chamada antiga: assertEquals(status, jobExecution.getStatus())
nova chamada: assertEquals(status, jobExecution.getStatus(), "Era esperado valores iguais, mas  status é diferente de " + result3257 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(FlowExecutionStatus.UNKNOWN, status)
nova chamada: assertEquals(FlowExecutionStatus.UNKNOWN, status, "Era esperado valores iguais, mas  FlowExecutionStatus.UNKNOWN é diferente de " + " status")
chamada antiga: assertEquals(2, job.getStepNames().size())
nova chamada: assertEquals(2, job.getStepNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3258 + " <job.getStepNames().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3259 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3260 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3261 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3262 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3263 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result3264 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3265 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3266 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3267 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3268 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3269 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3270 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3271 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
nova chamada: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass(), "Era esperado valores iguais, mas  JobInterruptedException.class é diferente de " + result3272 + " <jobExecution.getFailureExceptions().get(0).getClass()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result3273 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3274 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
nova chamada: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass(), "Era esperado valores iguais, mas  JobInterruptedException.class é diferente de " + result3275 + " <jobExecution.getFailureExceptions().get(0).getClass()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3276 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3277 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
nova chamada: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass(), "Era esperado valores iguais, mas  JobInterruptedException.class é diferente de " + result3278 + " <jobExecution.getFailureExceptions().get(0).getClass()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3279 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3280 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3281 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
nova chamada: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass(), "Era esperado valores iguais, mas  JobInterruptedException.class é diferente de " + result3282 + " <jobExecution.getFailureExceptions().get(0).getClass()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3283 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3284 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass())
nova chamada: assertEquals(JobInterruptedException.class, jobExecution.getFailureExceptions().get(0).getClass(), "Era esperado valores iguais, mas  JobInterruptedException.class é diferente de " + result3285 + " <jobExecution.getFailureExceptions().get(0).getClass()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3286 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3287 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3288 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3289 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3290 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3291 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3292 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3293 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3294 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3295 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3296 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(stepExecution)
nova chamada: assertNotNull(stepExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3297 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3298 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertNotNull(stepExecution)
nova chamada: assertNotNull(stepExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("step2", step.getName())
nova chamada: assertEquals("step2", step.getName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3299 + " <step.getName()>")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("step", step.getName())
nova chamada: assertEquals("step", step.getName(), "Era esperado valores iguais, mas  'step' é diferente de " + result3300 + " <step.getName()>")
chamada antiga: assertEquals("[step]", job.getStepNames().toString())
nova chamada: assertEquals("[step]", job.getStepNames().toString(), "Era esperado valores iguais, mas  '[step]' é diferente de " + result3301 + " <job.getStepNames().toString()>")
chamada antiga: assertNull(step)
nova chamada: assertNull(step, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNull(step)
nova chamada: assertNull(step, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals("[step1, step2]", names.toString())
nova chamada: assertEquals("[step1, step2]", names.toString(), "Era esperado valores iguais, mas  '[step1, step2]' é diferente de " + result3302 + " <names.toString()>")
chamada antiga: assertEquals("[step1, step2]", names.toString())
nova chamada: assertEquals("[step1, step2]", names.toString(), "Era esperado valores iguais, mas  '[step1, step2]' é diferente de " + result3303 + " <names.toString()>")
chamada antiga: fail("No stepExecution found with name: [" + stepName + "]")
nova chamada: fail("No stepExecution found with name: [" + stepName + "]", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(jobInstance.getId(), other.getJobId())
nova chamada: assertEquals(jobInstance.getId(), other.getJobId(), "Era esperado valores iguais, mas " + result3304 + " <jobInstance.getId()> é diferente de " + result3305 + " <other.getJobId()>")
chamada antiga: assertEquals(status, other.getStatus())
nova chamada: assertEquals(status, other.getStatus(), "Era esperado valores iguais, mas  status é diferente de " + result3306 + " <other.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3307 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3308 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3309 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3310 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3311 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3312 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3313 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3314 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3315 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3316 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3317 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3318 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3319 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3320 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3321 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3322 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3323 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3324 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3325 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3326 + " <execution.getStatus()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3327 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3328 + " <execution.getStatus()>")
chamada antiga: assertEquals("FOO", execution.getExitStatus().getExitCode())
nova chamada: assertEquals("FOO", execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result3329 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3330 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3331 + " <execution.getStatus()>")
chamada antiga: assertEquals("STOPPED", execution.getExitStatus().getExitCode())
nova chamada: assertEquals("STOPPED", execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'STOPPED' é diferente de " + result3332 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3333 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3334 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3335 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3336 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3337 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals("step2", execution.getStepExecutions().iterator().next().getStepName())
nova chamada: assertEquals("step2", execution.getStepExecutions().iterator().next().getStepName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3338 + " <execution.getStepExecutions().iterator().next().getStepName()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3339 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(stepExecutionA.getStepName(), "stepA")
nova chamada: assertEquals(stepExecutionA.getStepName(), "stepA", "Era esperado valores iguais, mas " + result3340 + " <stepExecutionA.getStepName()> é diferente de " + " 'stepA'")
chamada antiga: assertEquals(stepExecutionC.getStepName(), "stepC")
nova chamada: assertEquals(stepExecutionC.getStepName(), "stepC", "Era esperado valores iguais, mas " + result3341 + " <stepExecutionC.getStepName()> é diferente de " + " 'stepC'")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result3342 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(1, AnnotationBasedJobExecutionListener.beforeJobCount)
nova chamada: assertEquals(1, AnnotationBasedJobExecutionListener.beforeJobCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedJobExecutionListener.beforeJobCount")
chamada antiga: assertEquals(1, AnnotationBasedJobExecutionListener.afterJobCount)
nova chamada: assertEquals(1, AnnotationBasedJobExecutionListener.afterJobCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedJobExecutionListener.afterJobCount")
chamada antiga: assertEquals(1, InterfaceBasedJobExecutionListener.beforeJobCount)
nova chamada: assertEquals(1, InterfaceBasedJobExecutionListener.beforeJobCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedJobExecutionListener.beforeJobCount")
chamada antiga: assertEquals(1, InterfaceBasedJobExecutionListener.afterJobCount)
nova chamada: assertEquals(1, InterfaceBasedJobExecutionListener.afterJobCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedJobExecutionListener.afterJobCount")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3343 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(2, job.getStepNames().size())
nova chamada: assertEquals(2, job.getStepNames().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3344 + " <job.getStepNames().size()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3345 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(customStatus, jobExecution.getExitStatus())
nova chamada: assertEquals(customStatus, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  customStatus é diferente de " + result3346 + " <jobExecution.getExitStatus()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3347 + " <list.size()>")
chamada antiga: assertNotNull(jobExecution.getEndTime())
nova chamada: assertNotNull(jobExecution.getEndTime(), "Era esperado não nulo, mas " + result3348 + " <jobExecution.getEndTime()> é nulo")
chamada antiga: assertNotNull(jobExecution.getStartTime())
nova chamada: assertNotNull(jobExecution.getStartTime(), "Era esperado não nulo, mas " + result3349 + " <jobExecution.getStartTime()> é nulo")
chamada antiga: assertEquals(1, step1.passedInJobContext.size())
nova chamada: assertEquals(1, step1.passedInJobContext.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3350 + " <step1.passedInJobContext.size()>")
chamada antiga: assertFalse(step2.passedInJobContext.isEmpty())
nova chamada: assertFalse(step2.passedInJobContext.isEmpty(), "Era esperado falso, mas " + result3351 + " <step2.passedInJobContext.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(4, list.size())
nova chamada: assertEquals(4, list.size(), "Era esperado valores iguais, mas  4 é diferente de " + result3352 + " <list.size()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3353 + " <list.size()>")
chamada antiga: assertEquals(jobInstance, jobExecution.getJobInstance())
nova chamada: assertEquals(jobInstance, jobExecution.getJobInstance(), "Era esperado valores iguais, mas  jobInstance é diferente de " + result3354 + " <jobExecution.getJobInstance()>")
chamada antiga: assertEquals(2, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(2, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3355 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(step1.getName(), stepExecution1.getStepName())
nova chamada: assertEquals(step1.getName(), stepExecution1.getStepName(), "Era esperado valores iguais, mas " + result3356 + " <step1.getName()> é diferente de " + result3357 + " <stepExecution1.getStepName()>")
chamada antiga: assertEquals(step2.getName(), stepExecution2.getStepName())
nova chamada: assertEquals(step2.getName(), stepExecution2.getStepName(), "Era esperado valores iguais, mas " + result3358 + " <step2.getName()> é diferente de " + result3359 + " <stepExecution2.getStepName()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3360 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0))
nova chamada: assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3361 + " <jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0)>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3362 + " <list.size()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3363 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0))
nova chamada: assertEquals(exception, jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3364 + " <jobExecution.getStepExecutions().iterator().next().getFailureExceptions().get(0)>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3365 + " <list.size()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3366 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
nova chamada: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3367 + " <jobExecution.getAllFailureExceptions().get(0)>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3368 + " <list.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3369 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3370 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
nova chamada: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3371 + " <jobExecution.getAllFailureExceptions().get(0)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3372 + " <list.size()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3373 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0))
nova chamada: assertEquals(exception, jobExecution.getAllFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3374 + " <jobExecution.getAllFailureExceptions().get(0)>")
chamada antiga: assertEquals(0, list.size())
nova chamada: assertEquals(0, list.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3375 + " <list.size()>")
chamada antiga: assertEquals(1, jobExecution.getFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3376 + " <jobExecution.getFailureExceptions().size()>")
chamada antiga: assertEquals(0, jobExecution.getFailureExceptions().size())
nova chamada: assertEquals(0, jobExecution.getFailureExceptions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3377 + " <jobExecution.getFailureExceptions().size()>")
chamada antiga: assertEquals(1, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(1, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3378 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(stepExecution2.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName())
nova chamada: assertEquals(stepExecution2.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName(), "Era esperado valores iguais, mas " + result3379 + " <stepExecution2.getStepName()> é diferente de " + result3380 + " <jobExecution.getStepExecutions().iterator().next().getStepName()>")
chamada antiga: assertEquals(0, jobExecution.getFailureExceptions().size())
nova chamada: assertEquals(0, jobExecution.getFailureExceptions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3381 + " <jobExecution.getFailureExceptions().size()>")
chamada antiga: assertEquals(3, jobExecution.getStepExecutions().size())
nova chamada: assertEquals(3, jobExecution.getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3382 + " <jobExecution.getStepExecutions().size()>")
chamada antiga: assertEquals(stepExecution1.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName())
nova chamada: assertEquals(stepExecution1.getStepName(), jobExecution.getStepExecutions().iterator().next().getStepName(), "Era esperado valores iguais, mas " + result3383 + " <stepExecution1.getStepName()> é diferente de " + result3384 + " <jobExecution.getStepExecutions().iterator().next().getStepName()>")
chamada antiga: assertSame(exception, e)
nova chamada: assertSame(exception, e, "Era esperado objetos iguais, mas  exception é diferente de " + " e")
chamada antiga: assertSame(exception, e)
nova chamada: assertSame(exception, e, "Era esperado objetos iguais, mas  exception é diferente de " + " e")
chamada antiga: assertTrue(step1.passedInStepContext.isEmpty())
nova chamada: assertTrue(step1.passedInStepContext.isEmpty(), "Era esperado verdadeiro, mas " + result3385 + " <step1.passedInStepContext.isEmpty()> é falso")
chamada antiga: assertFalse(step2.passedInStepContext.isEmpty())
nova chamada: assertFalse(step2.passedInStepContext.isEmpty(), "Era esperado falso, mas " + result3386 + " <step2.passedInStepContext.isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3387 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3388 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertSame(exception, e)
nova chamada: assertSame(exception, e, "Era esperado objetos iguais, mas  exception é diferente de " + " e")
chamada antiga: assertEquals(1, step1.passedInJobContext.size())
nova chamada: assertEquals(1, step1.passedInJobContext.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3389 + " <step1.passedInJobContext.size()>")
chamada antiga: assertFalse(step2.passedInJobContext.isEmpty())
nova chamada: assertFalse(step2.passedInJobContext.isEmpty(), "Era esperado falso, mas " + result3390 + " <step2.passedInJobContext.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(jobExecution.getExecutionContext().isEmpty())
nova chamada: assertFalse(jobExecution.getExecutionContext().isEmpty(), "Era esperado falso, mas " + result3391 + " <jobExecution.getExecutionContext().isEmpty()> é verdadeiro ")
chamada antiga: assertEquals(1, jobExecution.getAllFailureExceptions().size())
nova chamada: assertEquals(1, jobExecution.getAllFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3392 + " <jobExecution.getAllFailureExceptions().size()>")
chamada antiga: assertSame(exception, e)
nova chamada: assertSame(exception, e, "Era esperado objetos iguais, mas  exception é diferente de " + " e")
chamada antiga: assertFalse(step1.passedInJobContext.isEmpty())
nova chamada: assertFalse(step1.passedInJobContext.isEmpty(), "Era esperado falso, mas " + result3393 + " <step1.passedInJobContext.isEmpty()> é verdadeiro ")
chamada antiga: assertFalse(step2.passedInJobContext.isEmpty())
nova chamada: assertFalse(step2.passedInJobContext.isEmpty(), "Era esperado falso, mas " + result3394 + " <step2.passedInJobContext.isEmpty()> é verdadeiro ")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("step2", step.getName())
nova chamada: assertEquals("step2", step.getName(), "Era esperado valores iguais, mas  'step2' é diferente de " + result3395 + " <step.getName()>")
chamada antiga: assertNull(step)
nova chamada: assertNull(step, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(jobInstance, this.jobRepository.getLastJobExecution(job.getName(), jobParameters).getJobInstance())
nova chamada: assertEquals(jobInstance, this.jobRepository.getLastJobExecution(job.getName(), jobParameters).getJobInstance(), "Era esperado valores iguais, mas  jobInstance é diferente de " + result3396 + " <this.jobRepository.getLastJobExecution(job.getName(), jobParameters).getJobInstance()>")
chamada antiga: assertEquals(jobInstance.getId(), jobExecution.getJobId())
nova chamada: assertEquals(jobInstance.getId(), jobExecution.getJobId(), "Era esperado valores iguais, mas " + result3397 + " <jobInstance.getId()> é diferente de " + result3398 + " <jobExecution.getJobId()>")
chamada antiga: assertEquals(status, jobExecution.getStatus())
nova chamada: assertEquals(status, jobExecution.getStatus(), "Era esperado valores iguais, mas  status é diferente de " + result3399 + " <jobExecution.getStatus()>")
chamada antiga: assertNull(new JobExecution(new JobInstance(null, "foo"), null).getId())
nova chamada: assertNull(new JobExecution(new JobInstance(null, "foo"), null).getId(), "Era esperado nulo, mas " + result3400 + " <new JobExecution(new JobInstance(null, 'foo'), null).getId()> não é nulo")
chamada antiga: assertNull(execution.getEndTime())
nova chamada: assertNull(execution.getEndTime(), "Era esperado nulo, mas " + result3401 + " <execution.getEndTime()> não é nulo")
chamada antiga: assertEquals(now, execution.getEndTime())
nova chamada: assertEquals(now, execution.getEndTime(), "Era esperado valores iguais, mas  now é diferente de " + result3402 + " <execution.getEndTime()>")
chamada antiga: assertTrue(execution.isRunning())
nova chamada: assertTrue(execution.isRunning(), "Era esperado verdadeiro, mas " + result3403 + " <execution.isRunning()> é falso")
chamada antiga: assertTrue(execution.isRunning())
nova chamada: assertTrue(execution.isRunning(), "Era esperado verdadeiro, mas " + result3404 + " <execution.isRunning()> é falso")
chamada antiga: assertTrue(execution.isRunning())
nova chamada: assertTrue(execution.isRunning(), "Era esperado verdadeiro, mas " + result3405 + " <execution.isRunning()> é falso")
chamada antiga: assertFalse(execution.isRunning())
nova chamada: assertFalse(execution.isRunning(), "Era esperado falso, mas " + result3406 + " <execution.isRunning()> é verdadeiro ")
chamada antiga: assertFalse(execution.isRunning())
nova chamada: assertFalse(execution.isRunning(), "Era esperado falso, mas " + result3407 + " <execution.isRunning()> é verdadeiro ")
chamada antiga: assertEquals(now, execution.getStartTime())
nova chamada: assertEquals(now, execution.getStartTime(), "Era esperado valores iguais, mas  now é diferente de " + result3408 + " <execution.getStartTime()>")
chamada antiga: assertEquals(BatchStatus.STARTING, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STARTING, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTING é diferente de " + result3409 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3410 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STARTING, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STARTING, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTING é diferente de " + result3411 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3412 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3413 + " <execution.getStatus()>")
chamada antiga: assertEquals(11, execution.getJobId().longValue())
nova chamada: assertEquals(11, execution.getJobId().longValue(), "Era esperado valores iguais, mas  11 é diferente de " + result3414 + " <execution.getJobId().longValue()>")
chamada antiga: assertEquals(23, execution.getJobId().longValue())
nova chamada: assertEquals(23, execution.getJobId().longValue(), "Era esperado valores iguais, mas  23 é diferente de " + result3415 + " <execution.getJobId().longValue()>")
chamada antiga: assertEquals(null, execution.getJobId())
nova chamada: assertEquals(null, execution.getJobId(), "Era esperado valores iguais, mas  null é diferente de " + result3416 + " <execution.getJobId()>")
chamada antiga: assertNotNull(execution.getJobInstance())
nova chamada: assertNotNull(execution.getJobInstance(), "Era esperado não nulo, mas " + result3417 + " <execution.getJobInstance()> é nulo")
chamada antiga: assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.UNKNOWN é diferente de " + result3418 + " <execution.getExitStatus()>")
chamada antiga: assertEquals("23", execution.getExitStatus().getExitCode())
nova chamada: assertEquals("23", execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  '23' é diferente de " + result3419 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals("foo", execution.getJobInstance().getJobName())
nova chamada: assertEquals("foo", execution.getJobInstance().getJobName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3420 + " <execution.getJobInstance().getJobName()>")
chamada antiga: assertEquals(0, execution.getStepExecutions().size())
nova chamada: assertEquals(0, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3421 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3422 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(0, execution.getStepExecutions().size())
nova chamada: assertEquals(0, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3423 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3424 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3425 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(0, execution.getStepExecutions().size())
nova chamada: assertEquals(0, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3426 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3427 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(0, execution.getStepExecutions().size())
nova chamada: assertEquals(0, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3428 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(1, execution.getStepExecutions().size())
nova chamada: assertEquals(1, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3429 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(2, execution.getStepExecutions().size())
nova chamada: assertEquals(2, execution.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3430 + " <execution.getStepExecutions().size()>")
chamada antiga: assertEquals(execution, clone)
nova chamada: assertEquals(execution, clone, "Era esperado valores iguais, mas  execution é diferente de " + " clone")
chamada antiga: assertNotNull(clone.createStepExecution("foo"))
nova chamada: assertNotNull(clone.createStepExecution("foo"), "Era esperado não nulo, mas " + result3431 + " <clone.createStepExecution('foo')> é nulo")
chamada antiga: assertNotNull(clone.getFailureExceptions())
nova chamada: assertNotNull(clone.getFailureExceptions(), "Era esperado não nulo, mas " + result3432 + " <clone.getFailureExceptions()> é nulo")
chamada antiga: assertEquals(0, execution.getFailureExceptions().size())
nova chamada: assertEquals(0, execution.getFailureExceptions().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3433 + " <execution.getFailureExceptions().size()>")
chamada antiga: assertEquals(1, execution.getFailureExceptions().size())
nova chamada: assertEquals(1, execution.getFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3434 + " <execution.getFailureExceptions().size()>")
chamada antiga: assertEquals(exception, execution.getFailureExceptions().get(0))
nova chamada: assertEquals(exception, execution.getFailureExceptions().get(0), "Era esperado valores iguais, mas  exception é diferente de " + result3435 + " <execution.getFailureExceptions().get(0)>")
chamada antiga: assertEquals(2, allExceptions.size())
nova chamada: assertEquals(2, allExceptions.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3436 + " <allExceptions.size()>")
chamada antiga: assertEquals(1, execution.getFailureExceptions().size())
nova chamada: assertEquals(1, execution.getFailureExceptions().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3437 + " <execution.getFailureExceptions().size()>")
chamada antiga: assertTrue(allExceptions.contains(exception))
nova chamada: assertTrue(allExceptions.contains(exception), "Era esperado verdadeiro, mas " + result3438 + " <allExceptions.contains(exception)> é falso")
chamada antiga: assertTrue(allExceptions.contains(stepException1))
nova chamada: assertTrue(allExceptions.contains(stepException1), "Era esperado verdadeiro, mas " + result3439 + " <allExceptions.contains(stepException1)> é falso")
chamada antiga: assertEquals(2, foo.getId())
nova chamada: assertEquals(2, foo.getId(), "Era esperado valores iguais, mas  2 é diferente de " + result3440 + " <foo.getId()>")
chamada antiga: assertEquals(3, foo.getId())
nova chamada: assertEquals(3, foo.getId(), "Era esperado valores iguais, mas  3 é diferente de " + result3441 + " <foo.getId()>")
chamada antiga: assertNull(itemReader.read())
nova chamada: assertNull(itemReader.read(), "Era esperado nulo, mas " + result3442 + " <itemReader.read()> não é nulo")
chamada antiga: assertFalse(policy.isComplete(context))
nova chamada: assertFalse(policy.isComplete(context), "Era esperado falso, mas " + result3443 + " <policy.isComplete(context)> é verdadeiro ")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3444 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(1, contribution.getFilterCount())
nova chamada: assertEquals(1, contribution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3445 + " <contribution.getFilterCount()>")
chamada antiga: assertNotEquals(null, contribution)
nova chamada: assertNotEquals(null, contribution, "Era esperado valores diferentes, mas  null é igual a " + " contribution")
chamada antiga: assertEquals(new StepExecution("foo", null).createStepContribution(), contribution)
nova chamada: assertEquals(new StepExecution("foo", null).createStepContribution(), contribution, "Era esperado valores iguais, mas " + result3446 + " <new StepExecution('foo', null).createStepContribution()> é diferente de " + " contribution")
chamada antiga: assertEquals(new StepExecution("foo", null).createStepContribution().hashCode(), contribution.hashCode())
nova chamada: assertEquals(new StepExecution("foo", null).createStepContribution().hashCode(), contribution.hashCode(), "Era esperado valores iguais, mas " + result3447 + " <new StepExecution('foo', null).createStepContribution().hashCode()> é diferente de " + result3448 + " <contribution.hashCode()>")
chamada antiga: Assertions.assertInstanceOf(DummyJobRepository.class, jobRepository)
nova chamada: assertInstanceOf(DummyJobRepository.class, jobRepository, "Era esperado que   DummyJobRepository.class fosse uma instancia de " + " jobRepository, mas não é")
chamada antiga: fail("No stepExecution found with name: [" + stepName + "]", "A execução falhou por uma causa deliberada")
nova chamada: fail("No stepExecution found with name: [" + stepName + "]", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals(8, count)
nova chamada: assertEquals(8, count, "Era esperado valores iguais, mas  8 é diferente de " + " count")
chamada antiga: assertEquals(4, count)
nova chamada: assertEquals(4, count, "Era esperado valores iguais, mas  4 é diferente de " + " count")
chamada antiga: assertEquals("Planned failure", exception.getMessage())
nova chamada: assertEquals("Planned failure", exception.getMessage(), "Era esperado valores iguais, mas  'Planned failure' é diferente de " + result3449 + " <exception.getMessage()>")
chamada antiga: assertEquals(4, count)
nova chamada: assertEquals(4, count, "Era esperado valores iguais, mas  4 é diferente de " + " count")
chamada antiga: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
nova chamada: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3450 + " <stepExecution.getJobExecution().getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3451 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
nova chamada: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3452 + " <stepExecution.getJobExecution().getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3453 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
nova chamada: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3454 + " <stepExecution.getJobExecution().getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3455 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size())
nova chamada: assertEquals(3, stepExecution.getJobExecution().getStepExecutions().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3456 + " <stepExecution.getJobExecution().getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result3457 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(true, stepExecution.getExecutionContext().get("aggregated"))
nova chamada: assertEquals(true, stepExecution.getExecutionContext().get("aggregated"), "Era esperado valores iguais, mas  true é diferente de " + result3458 + " <stepExecution.getExecutionContext().get('aggregated')>")
chamada antiga: assertEquals(2, execs.size())
nova chamada: assertEquals(2, execs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3459 + " <execs.size()>")
chamada antiga: assertEquals(2, execs.size())
nova chamada: assertEquals(2, execs.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3460 + " <execs.size()>")
chamada antiga: assertEquals(1, execs.size())
nova chamada: assertEquals(1, execs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3461 + " <execs.size()>")
chamada antiga: assertEquals(1, splitter.split(stepExecution, 2).size())
nova chamada: assertEquals(1, splitter.split(stepExecution, 2).size(), "Era esperado valores iguais, mas  1 é diferente de " + result3462 + " <splitter.split(stepExecution, 2).size()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3463 + " <split.size()>")
chamada antiga: assertEquals(2, provider.split(stepExecution, 3).size())
nova chamada: assertEquals(2, provider.split(stepExecution, 3).size(), "Era esperado valores iguais, mas  2 é diferente de " + result3464 + " <provider.split(stepExecution, 3).size()>")
chamada antiga: assertEquals(1, split.size())
nova chamada: assertEquals(1, split.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3465 + " <split.size()>")
chamada antiga: assertEquals("step:foo", split.iterator().next().getStepName())
nova chamada: assertEquals("step:foo", split.iterator().next().getStepName(), "Era esperado valores iguais, mas  'step:foo' é diferente de " + result3466 + " <split.iterator().next().getStepName()>")
chamada antiga: assertEquals("step:foo", split.iterator().next().getStepName())
nova chamada: assertEquals("step:foo", split.iterator().next().getStepName(), "Era esperado valores iguais, mas  'step:foo' é diferente de " + result3467 + " <split.iterator().next().getStepName()>")
chamada antiga: assertEquals("step", provider.getStepName())
nova chamada: assertEquals("step", provider.getStepName(), "Era esperado valores iguais, mas  'step' é diferente de " + result3468 + " <provider.getStepName()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3469 + " <split.size()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3470 + " <split.size()>")
chamada antiga: assertEquals(0, provider.split(nextExecution, 2).size())
nova chamada: assertEquals(0, provider.split(nextExecution, 2).size(), "Era esperado valores iguais, mas  0 é diferente de " + result3471 + " <provider.split(nextExecution, 2).size()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3472 + " <split.size()>")
chamada antiga: assertEquals(2, provider.split(stepExecution, 2).size())
nova chamada: assertEquals(2, provider.split(stepExecution, 2).size(), "Era esperado valores iguais, mas  2 é diferente de " + result3473 + " <provider.split(stepExecution, 2).size()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3474 + " <split.size()>")
chamada antiga: assertEquals(2, split.size())
nova chamada: assertEquals(2, split.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3475 + " <split.size()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.STARTING, result.getStatus())
nova chamada: assertEquals(BatchStatus.STARTING, result.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTING é diferente de " + result3476 + " <result.getStatus()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.STARTING, result.getStatus())
nova chamada: assertEquals(BatchStatus.STARTING, result.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STARTING é diferente de " + result3477 + " <result.getStatus()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.FAILED, result.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, result.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3478 + " <result.getStatus()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.FAILED, result.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, result.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3479 + " <result.getStatus()>")
chamada antiga: assertNotNull(result)
nova chamada: assertNotNull(result, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.FAILED.and(ExitStatus.EXECUTING), result.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED.and(ExitStatus.EXECUTING), result.getExitStatus(), "Era esperado valores iguais, mas " + result3480 + " <ExitStatus.FAILED.and(ExitStatus.EXECUTING)> é diferente de " + result3481 + " <result.getExitStatus()>")
chamada antiga: assertEquals(12, result.getCommitCount())
nova chamada: assertEquals(12, result.getCommitCount(), "Era esperado valores iguais, mas  12 é diferente de " + result3482 + " <result.getCommitCount()>")
chamada antiga: assertEquals(14, result.getFilterCount())
nova chamada: assertEquals(14, result.getFilterCount(), "Era esperado valores iguais, mas  14 é diferente de " + result3483 + " <result.getFilterCount()>")
chamada antiga: assertEquals(16, result.getProcessSkipCount())
nova chamada: assertEquals(16, result.getProcessSkipCount(), "Era esperado valores iguais, mas  16 é diferente de " + result3484 + " <result.getProcessSkipCount()>")
chamada antiga: assertEquals(18, result.getReadCount())
nova chamada: assertEquals(18, result.getReadCount(), "Era esperado valores iguais, mas  18 é diferente de " + result3485 + " <result.getReadCount()>")
chamada antiga: assertEquals(20, result.getReadSkipCount())
nova chamada: assertEquals(20, result.getReadSkipCount(), "Era esperado valores iguais, mas  20 é diferente de " + result3486 + " <result.getReadSkipCount()>")
chamada antiga: assertEquals(22, result.getRollbackCount())
nova chamada: assertEquals(22, result.getRollbackCount(), "Era esperado valores iguais, mas  22 é diferente de " + result3487 + " <result.getRollbackCount()>")
chamada antiga: assertEquals(24, result.getWriteCount())
nova chamada: assertEquals(24, result.getWriteCount(), "Era esperado valores iguais, mas  24 é diferente de " + result3488 + " <result.getWriteCount()>")
chamada antiga: assertEquals(26, result.getWriteSkipCount())
nova chamada: assertEquals(26, result.getWriteSkipCount(), "Era esperado valores iguais, mas  26 é diferente de " + result3489 + " <result.getWriteSkipCount()>")
chamada antiga: assertEquals(1, partition.size())
nova chamada: assertEquals(1, partition.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3490 + " <partition.size()>")
chamada antiga: assertTrue(partition.containsKey("partition0"))
nova chamada: assertTrue(partition.containsKey("partition0"), "Era esperado verdadeiro, mas " + result3491 + " <partition.containsKey('partition0')> é falso")
chamada antiga: assertTrue(new UrlResource(url).exists())
nova chamada: assertTrue(new UrlResource(url).exists(), "Era esperado verdadeiro, mas " + result3492 + " <new UrlResource(url).exists()> é falso")
chamada antiga: assertTrue(partition.get("partition0").containsKey("foo"))
nova chamada: assertTrue(partition.get("partition0").containsKey("foo"), "Era esperado verdadeiro, mas " + result3493 + " <partition.get('partition0').containsKey('foo')> é falso")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals("[foo0, foo1]", stepExecutions.toString())
nova chamada: assertEquals("[foo0, foo1]", stepExecutions.toString(), "Era esperado valores iguais, mas  '[foo0, foo1]' é diferente de " + result3494 + " <stepExecutions.toString()>")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3495 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result3496 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertNotNull(partitions)
nova chamada: assertNotNull(partitions, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(3, partitions.size())
nova chamada: assertEquals(3, partitions.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3497 + " <partitions.size()>")
chamada antiga: assertNotNull(partitions.get("partition0"))
nova chamada: assertNotNull(partitions.get("partition0"), "Era esperado não nulo, mas " + result3498 + " <partitions.get('partition0')> é nulo")
chamada antiga: assertNotNull(partitions.get("partition1"))
nova chamada: assertNotNull(partitions.get("partition1"), "Era esperado não nulo, mas " + result3499 + " <partitions.get('partition1')> é nulo")
chamada antiga: assertNotNull(partitions.get("partition2"))
nova chamada: assertNotNull(partitions.get("partition2"), "Era esperado não nulo, mas " + result3500 + " <partitions.get('partition2')> é nulo")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobLauncher.run(job, new JobParameters()))
nova chamada: assertNotNull(jobLauncher.run(job, new JobParameters()), "Era esperado não nulo, mas " + result3501 + " <jobLauncher.run(job, new JobParameters())> é nulo")
chamada antiga: assertEquals(1, afterManager - beforeManager)
nova chamada: assertEquals(1, afterManager - beforeManager, "Era esperado valores iguais, mas  1 é diferente de " + " afterManager - beforeManager")
chamada antiga: assertEquals(2, afterPartition - beforePartition)
nova chamada: assertEquals(2, afterPartition - beforePartition, "Era esperado valores iguais, mas  2 é diferente de " + " afterPartition - beforePartition")
chamada antiga: assertNotNull(jobLauncher)
nova chamada: assertNotNull(jobLauncher, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3502 + " <execution.getStatus()>")
chamada antiga: assertEquals(4, ExampleItemWriter.getItems().size())
nova chamada: assertEquals(4, ExampleItemWriter.getItems().size(), "Era esperado valores iguais, mas  4 é diferente de " + result3503 + " <ExampleItemWriter.getItems().size()>")
chamada antiga: assertNotNull(jobLauncher.run(job, jobParameters))
nova chamada: assertNotNull(jobLauncher.run(job, jobParameters), "Era esperado não nulo, mas " + result3504 + " <jobLauncher.run(job, jobParameters)> é nulo")
chamada antiga: assertEquals(4, ExampleItemWriter.getItems().size())
nova chamada: assertEquals(4, ExampleItemWriter.getItems().size(), "Era esperado valores iguais, mas  4 é diferente de " + result3505 + " <ExampleItemWriter.getItems().size()>")
chamada antiga: assertEquals(2, afterManager - beforeManager)
nova chamada: assertEquals(2, afterManager - beforeManager, "Era esperado valores iguais, mas  2 é diferente de " + " afterManager - beforeManager")
chamada antiga: assertEquals(3, afterPartition - beforePartition)
nova chamada: assertEquals(3, afterPartition - beforePartition, "Era esperado valores iguais, mas  3 é diferente de " + " afterPartition - beforePartition")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3506 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3507 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3508 + " <list.size()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3509 + " <exception.getMessage()>")
chamada antiga: assertEquals("foo", error.getMessage())
nova chamada: assertEquals("foo", error.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3510 + " <error.getMessage()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3511 + " <exception.getMessage()>")
chamada antiga: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
nova chamada: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3512 + " <JobRegistryBackgroundJobRunner.getErrors().size()>")
chamada antiga: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
nova chamada: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3513 + " <JobRegistryBackgroundJobRunner.getErrors().size()>")
chamada antiga: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size())
nova chamada: assertEquals(0, JobRegistryBackgroundJobRunner.getErrors().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3514 + " <JobRegistryBackgroundJobRunner.getErrors().size()>")
chamada antiga: assertEquals(999, value.longValue())
nova chamada: assertEquals(999, value.longValue(), "Era esperado valores iguais, mas  999 é diferente de " + result3515 + " <value.longValue()>")
chamada antiga: assertEquals(999, value.longValue())
nova chamada: assertEquals(999, value.longValue(), "Era esperado valores iguais, mas  999 é diferente de " + result3516 + " <value.longValue()>")
chamada antiga: assertEquals(999, value.longValue())
nova chamada: assertEquals(999, value.longValue(), "Era esperado valores iguais, mas  999 é diferente de " + result3517 + " <value.longValue()>")
chamada antiga: assertEquals(jobExecution.toString(), value)
nova chamada: assertEquals(jobExecution.toString(), value, "Era esperado valores iguais, mas " + result3518 + " <jobExecution.toString()> é diferente de " + " value")
chamada antiga: assertEquals(2, value.size())
nova chamada: assertEquals(2, value.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3519 + " <value.size()>")
chamada antiga: assertEquals(111L, value.iterator().next().longValue())
nova chamada: assertEquals(111L, value.iterator().next().longValue(), "Era esperado valores iguais, mas  111L é diferente de " + result3520 + " <value.iterator().next().longValue()>")
chamada antiga: assertEquals("a=b", value)
nova chamada: assertEquals("a=b", value, "Era esperado valores iguais, mas  'a=b' é diferente de " + " value")
chamada antiga: assertEquals(123L, value.get(0).longValue())
nova chamada: assertEquals(123L, value.get(0).longValue(), "Era esperado valores iguais, mas  123L é diferente de " + result3521 + " <value.get(0).longValue()>")
chamada antiga: assertEquals(jobInstance, actualJobInstance)
nova chamada: assertEquals(jobInstance, actualJobInstance, "Era esperado valores iguais, mas  jobInstance é diferente de " + " actualJobInstance")
chamada antiga: assertEquals(2, names.size())
nova chamada: assertEquals(2, names.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3522 + " <names.size()>")
chamada antiga: assertEquals(111L, value.iterator().next().longValue())
nova chamada: assertEquals(111L, value.iterator().next().longValue(), "Era esperado valores iguais, mas  111L é diferente de " + result3523 + " <value.iterator().next().longValue()>")
chamada antiga: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPING é diferente de " + result3524 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPING é diferente de " + result3525 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPING é diferente de " + result3526 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPING, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPING é diferente de " + result3527 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.ABANDONED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.ABANDONED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.ABANDONED é diferente de " + result3528 + " <jobExecution.getStatus()>")
chamada antiga: assertNotNull(jobExecution.getEndTime())
nova chamada: assertNotNull(jobExecution.getEndTime(), "Era esperado não nulo, mas " + result3529 + " <jobExecution.getEndTime()> é nulo")
chamada antiga: assertEquals(0, StubSystemExiter.getStatus())
nova chamada: assertEquals(0, StubSystemExiter.getStatus(), "Era esperado valores iguais, mas  0 é diferente de " + result3530 + " <StubSystemExiter.getStatus()>")
chamada antiga: assertEquals(0, StubSystemExiter.getStatus())
nova chamada: assertEquals(0, StubSystemExiter.getStatus(), "Era esperado valores iguais, mas  0 é diferente de " + result3531 + " <StubSystemExiter.getStatus()>")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(new JobParameters(), StubJobLauncher.jobParameters)
nova chamada: assertEquals(new JobParameters(), StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  new JobParameters() é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(0, StubJobLauncher.jobParameters.getParameters().size())
nova chamada: assertEquals(0, StubJobLauncher.jobParameters.getParameters().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3532 + " <StubJobLauncher.jobParameters.getParameters().size()>")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
nova chamada: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3533 + " <StubJobLauncher.jobParameters.getParameters().size()>")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
nova chamada: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3534 + " <StubJobLauncher.jobParameters.getParameters().size()>")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size())
nova chamada: assertEquals(2, StubJobLauncher.jobParameters.getParameters().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3535 + " <StubJobLauncher.jobParameters.getParameters().size()>")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(jobParameters, StubJobLauncher.jobParameters)
nova chamada: assertEquals(jobParameters, StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  jobParameters é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(jobParameters, StubJobLauncher.jobParameters)
nova chamada: assertEquals(jobParameters, StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  jobParameters é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(null, StubJobLauncher.jobParameters)
nova chamada: assertEquals(null, StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  null é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(jobParameters, StubJobLauncher.jobParameters)
nova chamada: assertEquals(jobParameters, StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  jobParameters é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(0, StubSystemExiter.status)
nova chamada: assertEquals(0, StubSystemExiter.status, "Era esperado valores iguais, mas  0 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals(jobParameters, StubJobLauncher.jobParameters)
nova chamada: assertEquals(jobParameters, StubJobLauncher.jobParameters, "Era esperado valores iguais, mas  jobParameters é diferente de " + " StubJobLauncher.jobParameters")
chamada antiga: assertEquals(1, StubSystemExiter.getStatus())
nova chamada: assertEquals(1, StubSystemExiter.getStatus(), "Era esperado valores iguais, mas  1 é diferente de " + result3536 + " <StubSystemExiter.getStatus()>")
chamada antiga: assertTrue(StubJobLauncher.destroyed)
nova chamada: assertTrue(StubJobLauncher.destroyed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, StubSystemExiter.status)
nova chamada: assertEquals(1, StubSystemExiter.status, "Era esperado valores iguais, mas  1 é diferente de " + " StubSystemExiter.status")
chamada antiga: assertEquals("key must not be null or empty", exception.getMessage())
nova chamada: assertEquals("key must not be null or empty", exception.getMessage(), "Era esperado valores iguais, mas  'key must not be null or empty' é diferente de " + result3537 + " <exception.getMessage()>")
chamada antiga: assertEquals("dataFieldMaxValueIncrementer must not be null", exception.getMessage())
nova chamada: assertEquals("dataFieldMaxValueIncrementer must not be null", exception.getMessage(), "Era esperado valores iguais, mas  'dataFieldMaxValueIncrementer must not be null' é diferente de " + result3538 + " <exception.getMessage()>")
chamada antiga: assertEquals(Long.valueOf(10L), runId)
nova chamada: assertEquals(Long.valueOf(10L), runId, "Era esperado valores iguais, mas " + result3539 + " <Long.valueOf(10L)> é diferente de " + " runId")
chamada antiga: assertEquals(Long.valueOf(10L), runId)
nova chamada: assertEquals(Long.valueOf(10L), runId, "Era esperado valores iguais, mas " + result3540 + " <Long.valueOf(10L)> é diferente de " + " runId")
chamada antiga: assertEquals("bar", foo)
nova chamada: assertEquals("bar", foo, "Era esperado valores iguais, mas  'bar' é diferente de " + " foo")
chamada antiga: assertEquals(Long.valueOf(10L), runId)
nova chamada: assertEquals(Long.valueOf(10L), runId, "Era esperado valores iguais, mas " + result3541 + " <Long.valueOf(10L)> é diferente de " + " runId")
chamada antiga: assertEquals(1, next.getLong("run.id").intValue())
nova chamada: assertEquals(1, next.getLong("run.id").intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result3542 + " <next.getLong('run.id').intValue()>")
chamada antiga: assertEquals(2, incrementer.getNext(next).getLong("run.id").intValue())
nova chamada: assertEquals(2, incrementer.getNext(next).getLong("run.id").intValue(), "Era esperado valores iguais, mas  2 é diferente de " + result3543 + " <incrementer.getNext(next).getLong('run.id').intValue()>")
chamada antiga: assertEquals(1, next.getLong("run.id").intValue())
nova chamada: assertEquals(1, next.getLong("run.id").intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result3544 + " <next.getLong('run.id').intValue()>")
chamada antiga: assertEquals("bar", next.getString("foo"))
nova chamada: assertEquals("bar", next.getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result3545 + " <next.getString('foo')>")
chamada antiga: assertEquals(1, next.getLong("foo").intValue())
nova chamada: assertEquals(1, next.getLong("foo").intValue(), "Era esperado valores iguais, mas  1 é diferente de " + result3546 + " <next.getLong('foo').intValue()>")
chamada antiga: assertEquals(Long.valueOf(6), next.getLong("run.id"))
nova chamada: assertEquals(Long.valueOf(6), next.getLong("run.id"), "Era esperado valores iguais, mas " + result3547 + " <Long.valueOf(6)> é diferente de " + result3548 + " <next.getLong('run.id')>")
chamada antiga: assertEquals(ecm.intValue(ExitStatus.COMPLETED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_COMPLETED)
nova chamada: assertEquals(ecm.intValue(ExitStatus.COMPLETED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_COMPLETED, "Era esperado valores iguais, mas " + result3549 + " <ecm.intValue(ExitStatus.COMPLETED.getExitCode())> é diferente de " + " ExitCodeMapper.JVM_EXITCODE_COMPLETED")
chamada antiga: assertEquals(ecm.intValue(ExitStatus.FAILED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR)
nova chamada: assertEquals(ecm.intValue(ExitStatus.FAILED.getExitCode()), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR, "Era esperado valores iguais, mas " + result3550 + " <ecm.intValue(ExitStatus.FAILED.getExitCode())> é diferente de " + " ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR")
chamada antiga: assertEquals(ecm.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR)
nova chamada: assertEquals(ecm.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR, "Era esperado valores iguais, mas " + result3551 + " <ecm.intValue(ExitCodeMapper.JOB_NOT_PROVIDED)> é diferente de " + " ExitCodeMapper.JVM_EXITCODE_JOB_ERROR")
chamada antiga: assertEquals(ecm.intValue(ExitCodeMapper.NO_SUCH_JOB), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR)
nova chamada: assertEquals(ecm.intValue(ExitCodeMapper.NO_SUCH_JOB), ExitCodeMapper.JVM_EXITCODE_JOB_ERROR, "Era esperado valores iguais, mas " + result3552 + " <ecm.intValue(ExitCodeMapper.NO_SUCH_JOB)> é diferente de " + " ExitCodeMapper.JVM_EXITCODE_JOB_ERROR")
chamada antiga: assertEquals(ecm2.intValue(ExitStatus.COMPLETED.getExitCode()), -1)
nova chamada: assertEquals(ecm2.intValue(ExitStatus.COMPLETED.getExitCode()), -1, "Era esperado valores iguais, mas " + result3553 + " <ecm2.intValue(ExitStatus.COMPLETED.getExitCode())> é diferente de " + " -1")
chamada antiga: assertEquals(ecm2.intValue(ExitStatus.FAILED.getExitCode()), -2)
nova chamada: assertEquals(ecm2.intValue(ExitStatus.FAILED.getExitCode()), -2, "Era esperado valores iguais, mas " + result3554 + " <ecm2.intValue(ExitStatus.FAILED.getExitCode())> é diferente de " + " -2")
chamada antiga: assertEquals(ecm2.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), -3)
nova chamada: assertEquals(ecm2.intValue(ExitCodeMapper.JOB_NOT_PROVIDED), -3, "Era esperado valores iguais, mas " + result3555 + " <ecm2.intValue(ExitCodeMapper.JOB_NOT_PROVIDED)> é diferente de " + " -3")
chamada antiga: assertEquals(ecm2.intValue(ExitCodeMapper.NO_SUCH_JOB), -3)
nova chamada: assertEquals(ecm2.intValue(ExitCodeMapper.NO_SUCH_JOB), -3, "Era esperado valores iguais, mas " + result3556 + " <ecm2.intValue(ExitCodeMapper.NO_SUCH_JOB)> é diferente de " + " -3")
chamada antiga: assertEquals(ecm.intValue("MY_CUSTOM_CODE"), 3)
nova chamada: assertEquals(ecm.intValue("MY_CUSTOM_CODE"), 3, "Era esperado valores iguais, mas " + result3557 + " <ecm.intValue('MY_CUSTOM_CODE')> é diferente de " + " 3")
chamada antiga: assertEquals(ecm.intValue("UNDEFINED_CUSTOM_CODE"), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR)
nova chamada: assertEquals(ecm.intValue("UNDEFINED_CUSTOM_CODE"), ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR, "Era esperado valores iguais, mas " + result3558 + " <ecm.intValue('UNDEFINED_CUSTOM_CODE')> é diferente de " + " ExitCodeMapper.JVM_EXITCODE_GENERIC_ERROR")
chamada antiga: assertEquals(before + 1, after)
nova chamada: assertEquals(before + 1, after, "Era esperado valores iguais, mas  before + 1 é diferente de " + " after")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3559 + " <exception.getMessage()>")
chamada antiga: assertDoesNotThrow(() -> policy.checkInterrupted(context))
nova chamada: assertDoesNotThrow(() -> policy.checkInterrupted(context), "Era esperado que nenhuma exceção fosse lançada, mas  () - policy.checkInterrupted(context) foi lançada")
chamada antiga: assertTrue(exception.getMessage().contains("interrupt"))
nova chamada: assertTrue(exception.getMessage().contains("interrupt"), "Era esperado verdadeiro, mas " + result3560 + " <exception.getMessage().contains('interrupt')> é falso")
chamada antiga: assertEquals(testStep2, stepLocatorStepFactoryBean.getObject())
nova chamada: assertEquals(testStep2, stepLocatorStepFactoryBean.getObject(), "Era esperado valores iguais, mas  testStep2 é diferente de " + result3561 + " <stepLocatorStepFactoryBean.getObject()>")
chamada antiga: assertTrue((new StepLocatorStepFactoryBean()).getObjectType().isAssignableFrom(Step.class))
nova chamada: assertTrue((new StepLocatorStepFactoryBean()).getObjectType().isAssignableFrom(Step.class), "Era esperado verdadeiro, mas " + result3562 + " <(new StepLocatorStepFactoryBean()).getObjectType().isAssignableFrom(Step.class)> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3563 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result3564 + " <writer.getCommitted().toString()>")
chamada antiga: assertTrue(Step.class.isAssignableFrom(factory.getObjectType()))
nova chamada: assertTrue(Step.class.isAssignableFrom(factory.getObjectType()), "Era esperado verdadeiro, mas " + result3565 + " <Step.class.isAssignableFrom(factory.getObjectType())> é falso")
chamada antiga: assertTrue(factory.getObject() instanceof Step)
nova chamada: assertTrue(factory.getObject() instanceof Step, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size())
nova chamada: assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size(), "Era esperado valores iguais, mas  (RETRY_LIMIT + 1) * ITEM_LIST.size() é diferente de " + result3566 + " <processed.size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3567 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result3568 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size())
nova chamada: assertEquals((RETRY_LIMIT + 1) * ITEM_LIST.size(), processed.size(), "Era esperado valores iguais, mas  (RETRY_LIMIT + 1) * ITEM_LIST.size() é diferente de " + result3569 + " <processed.size()>")
chamada antiga: assertEquals(3, processed.size())
nova chamada: assertEquals(3, processed.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3570 + " <processed.size()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3571 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, provided.size())
nova chamada: assertEquals(2, provided.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3572 + " <provided.size()>")
chamada antiga: assertEquals(1, processed.size())
nova chamada: assertEquals(1, processed.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3573 + " <processed.size()>")
chamada antiga: assertEquals(0, recovered.size())
nova chamada: assertEquals(0, recovered.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3574 + " <recovered.size()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3575 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3576 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3577 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(4, stepExecution.getWriteCount())
nova chamada: assertEquals(4, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3578 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(6, stepExecution.getReadCount())
nova chamada: assertEquals(6, stepExecution.getReadCount(), "Era esperado valores iguais, mas  6 é diferente de " + result3579 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3580 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getWriteCount())
nova chamada: assertEquals(2, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3581 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(2, stepExecution.getReadCount())
nova chamada: assertEquals(2, stepExecution.getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3582 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3583 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(7, count)
nova chamada: assertEquals(7, count, "Era esperado valores iguais, mas  7 é diferente de " + " count")
chamada antiga: assertEquals(4, stepExecution.getReadCount())
nova chamada: assertEquals(4, stepExecution.getReadCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3584 + " <stepExecution.getReadCount()>")
chamada antiga: assertTrue(TransactionSynchronizationManager.isActualTransactionActive())
nova chamada: assertTrue(TransactionSynchronizationManager.isActualTransactionActive(), "Era esperado verdadeiro, mas " + result3585 + " <TransactionSynchronizationManager.isActualTransactionActive()> é falso")
chamada antiga: assertEquals(2, recovered.size())
nova chamada: assertEquals(2, recovered.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3586 + " <recovered.size()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3587 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3588 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(expectedOutput, written)
nova chamada: assertEquals(expectedOutput, written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " written")
chamada antiga: assertEquals("[a, b, c, d, e, f, null]", provided.toString())
nova chamada: assertEquals("[a, b, c, d, e, f, null]", provided.toString(), "Era esperado valores iguais, mas  '[a, b, c, d, e, f, null]' é diferente de " + result3589 + " <provided.toString()>")
chamada antiga: assertEquals("[a, b, b, b, b, b, b, c, d, d, d, d, d, d, e, f]", processed.toString())
nova chamada: assertEquals("[a, b, b, b, b, b, b, c, d, d, d, d, d, d, e, f]", processed.toString(), "Era esperado valores iguais, mas  '[a, b, b, b, b, b, b, c, d, d, d, d, d, d, e, f]' é diferente de " + result3590 + " <processed.toString()>")
chamada antiga: assertEquals("[b, d]", recovered.toString())
nova chamada: assertEquals("[b, d]", recovered.toString(), "Era esperado valores iguais, mas  '[b, d]' é diferente de " + result3591 + " <recovered.toString()>")
chamada antiga: assertEquals(2, recovered.size())
nova chamada: assertEquals(2, recovered.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3592 + " <recovered.size()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3593 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3594 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(expectedOutput, written)
nova chamada: assertEquals(expectedOutput, written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " written")
chamada antiga: assertEquals(7, provided.size())
nova chamada: assertEquals(7, provided.size(), "Era esperado valores iguais, mas  7 é diferente de " + result3595 + " <provided.size()>")
chamada antiga: assertEquals(36, processed.size())
nova chamada: assertEquals(36, processed.size(), "Era esperado valores iguais, mas  36 é diferente de " + result3596 + " <processed.size()>")
chamada antiga: assertEquals(2, recovered.size())
nova chamada: assertEquals(2, recovered.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3597 + " <recovered.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3598 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(expectedOutput, written)
nova chamada: assertEquals(expectedOutput, written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " written")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3599 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(1, provided.size())
nova chamada: assertEquals(1, provided.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3600 + " <provided.size()>")
chamada antiga: assertEquals("[b, b, b, b, b]", processed.toString())
nova chamada: assertEquals("[b, b, b, b, b]", processed.toString(), "Era esperado valores iguais, mas  '[b, b, b, b, b]' é diferente de " + result3601 + " <processed.toString()>")
chamada antiga: assertEquals(0, recovered.size())
nova chamada: assertEquals(0, recovered.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3602 + " <recovered.size()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3603 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(expectedOutput, written)
nova chamada: assertEquals(expectedOutput, written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " written")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3604 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals("[b]", provided.toString())
nova chamada: assertEquals("[b]", provided.toString(), "Era esperado valores iguais, mas  '[b]' é diferente de " + result3605 + " <provided.toString()>")
chamada antiga: assertEquals("[b]", processed.toString())
nova chamada: assertEquals("[b]", processed.toString(), "Era esperado valores iguais, mas  '[b]' é diferente de " + result3606 + " <processed.toString()>")
chamada antiga: assertEquals(0, recovered.size())
nova chamada: assertEquals(0, recovered.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3607 + " <recovered.size()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3608 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3609 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(expectedOutput, written)
nova chamada: assertEquals(expectedOutput, written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " written")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3610 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(1, provided.size())
nova chamada: assertEquals(1, provided.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3611 + " <provided.size()>")
chamada antiga: assertEquals("[b, b, b, b, b]", processed.toString())
nova chamada: assertEquals("[b, b, b, b, b]", processed.toString(), "Era esperado valores iguais, mas  '[b, b, b, b, b]' é diferente de " + result3612 + " <processed.toString()>")
chamada antiga: assertEquals(0, recovered.size())
nova chamada: assertEquals(0, recovered.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3613 + " <recovered.size()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3614 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3615 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3616 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(3, provided.size())
nova chamada: assertEquals(3, provided.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3617 + " <provided.size()>")
chamada antiga: assertEquals(3, processed.size())
nova chamada: assertEquals(3, processed.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3618 + " <processed.size()>")
chamada antiga: assertEquals(0, recovered.size())
nova chamada: assertEquals(0, recovered.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3619 + " <recovered.size()>")
chamada antiga: assertFalse(ExampleItemReader.fail)
nova chamada: assertFalse(ExampleItemReader.fail, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3620 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3621 + " <FAILED.toString()> é diferente de " + result3622 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(stepExecution.getCommitCount() == 0)
nova chamada: assertTrue(stepExecution.getCommitCount() == 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3623 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3624 + " <FAILED.toString()> é diferente de " + result3625 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(stepExecution.getCommitCount() > 0)
nova chamada: assertTrue(stepExecution.getCommitCount() > 0, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(attr.rollbackOn(new RuntimeException("")))
nova chamada: assertTrue(attr.rollbackOn(new RuntimeException("")), "Era esperado verdadeiro, mas " + result3626 + " <attr.rollbackOn(new RuntimeException(''))> é falso")
chamada antiga: assertFalse(attr.rollbackOn(new Exception("")))
nova chamada: assertFalse(attr.rollbackOn(new Exception("")), "Era esperado falso, mas " + result3627 + " <attr.rollbackOn(new Exception(''))> é verdadeiro ")
chamada antiga: assertFalse(attr.rollbackOn(new RuntimeException("")))
nova chamada: assertFalse(attr.rollbackOn(new RuntimeException("")), "Era esperado falso, mas " + result3628 + " <attr.rollbackOn(new RuntimeException(''))> é verdadeiro ")
chamada antiga: assertFalse(attr.rollbackOn(new Exception("")))
nova chamada: assertFalse(attr.rollbackOn(new Exception("")), "Era esperado falso, mas " + result3629 + " <attr.rollbackOn(new Exception(''))> é verdadeiro ")
chamada antiga: assertTrue(attr.rollbackOn(new Exception("")))
nova chamada: assertTrue(attr.rollbackOn(new Exception("")), "Era esperado verdadeiro, mas " + result3630 + " <attr.rollbackOn(new Exception(''))> é falso")
chamada antiga: assertFalse(attr.rollbackOn(new RuntimeException("")))
nova chamada: assertFalse(attr.rollbackOn(new RuntimeException("")), "Era esperado falso, mas " + result3631 + " <attr.rollbackOn(new RuntimeException(''))> é verdadeiro ")
chamada antiga: assertFalse(attr.rollbackOn(new SkippableException("")))
nova chamada: assertFalse(attr.rollbackOn(new SkippableException("")), "Era esperado falso, mas " + result3632 + " <attr.rollbackOn(new SkippableException(''))> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3633 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3634 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3635 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3636 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3637 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3638 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3639 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3640 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3641 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3642 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3643 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3644 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3645 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 3, 4, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 4, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 4, 5]' é diferente de " + result3646 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3647 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processed.toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processed.toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3648 + " <processed.toString()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3649 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3650 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3651 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3652 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3653 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(1, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3654 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3655 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3656 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(writer.getCommitted().contains("4"))
nova chamada: assertFalse(writer.getCommitted().contains("4"), "Era esperado falso, mas " + result3657 + " <writer.getCommitted().contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3658 + " <writer.getCommitted()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3659 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3660 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(4, stepExecution.getRollbackCount())
nova chamada: assertEquals(4, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3661 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3662 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3663 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getRollbackCount())
nova chamada: assertEquals(1, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3664 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3665 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3666 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(4, stepExecution.getRollbackCount())
nova chamada: assertEquals(4, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3667 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3668 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3669 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3670 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3671 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3672 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3673 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3674 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 1, 2, 3, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 1, 2, 3, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 1, 2, 3, 5]' é diferente de " + result3675 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3676 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3677 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3678 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3679 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 3, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3680 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3681 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3682 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 1, 3, 4, 1, 3, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 1, 3, 4, 1, 3, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 1, 3, 4, 1, 3, 5]' é diferente de " + result3683 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3684 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3685 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3686 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3687 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3688 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3689 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3690 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3691 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3692 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3693 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3694 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3695 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 1, 2, 3, 4, 5]' é diferente de " + result3696 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]' é diferente de " + result3697 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3698 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3699 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(4, stepExecution.getWriteCount())
nova chamada: assertEquals(4, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3700 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(0, stepExecution.getFilterCount())
nova chamada: assertEquals(0, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3701 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3702 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 5]' é diferente de " + result3703 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 1, 2, 3, 4, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 1, 2, 3, 4, 5]' é diferente de " + result3704 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3705 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3706 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result3707 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4]' é diferente de " + result3708 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]' é diferente de " + result3709 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3710 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result3711 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[]", processor.getCommitted().toString())
nova chamada: assertEquals("[]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result3712 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals(5, stepExecution.getSkipCount())
nova chamada: assertEquals(5, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3713 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3714 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3715 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 1, 2, 3, 4, 5]' é diferente de " + result3716 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 3, 5]", processor.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", processor.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3717 + " <processor.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]' é diferente de " + result3718 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3719 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3720 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(3, stepExecution.getWriteCount())
nova chamada: assertEquals(3, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3721 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(0, stepExecution.getFilterCount())
nova chamada: assertEquals(0, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3722 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3723 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 3, 5]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 3, 5]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 3, 5]' é diferente de " + result3724 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 1, 2, 3, 4, 5]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 1, 2, 3, 4, 5]' é diferente de " + result3725 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result3726 + " <processor.getProcessed().toString()>")
chamada antiga: assertNotNull(chunk)
nova chamada: assertNotNull(chunk, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, chunk.getItems().size())
nova chamada: assertEquals(2, chunk.getItems().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3727 + " <chunk.getItems().size()>")
chamada antiga: assertNotNull(chunk)
nova chamada: assertNotNull(chunk, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, chunk.getItems().size())
nova chamada: assertEquals(0, chunk.getItems().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3728 + " <chunk.getItems().size()>")
chamada antiga: assertEquals(1, chunk.getErrors().size())
nova chamada: assertEquals(1, chunk.getErrors().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3729 + " <chunk.getErrors().size()>")
chamada antiga: assertEquals("ItemReader must be provided", expectedException.getMessage())
nova chamada: assertEquals("ItemReader must be provided", expectedException.getMessage(), "Era esperado valores iguais, mas  'ItemReader must be provided' é diferente de " + result3730 + " <expectedException.getMessage()>")
chamada antiga: assertEquals("ItemWriter must be provided", expectedException.getMessage())
nova chamada: assertEquals("ItemWriter must be provided", expectedException.getMessage(), "Era esperado valores iguais, mas  'ItemWriter must be provided' é diferente de " + result3731 + " <expectedException.getMessage()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3732 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(3, written.size())
nova chamada: assertEquals(3, written.size(), "Era esperado valores iguais, mas  3 é diferente de " + result3733 + " <written.size()>")
chamada antiga: assertTrue(written.contains("foo"))
nova chamada: assertTrue(written.contains("foo"), "Era esperado verdadeiro, mas " + result3734 + " <written.contains('foo')> é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3735 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, written.size())
nova chamada: assertEquals(2, written.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3736 + " <written.size()>")
chamada antiga: assertTrue(written.contains("foo"))
nova chamada: assertTrue(written.contains("foo"), "Era esperado verdadeiro, mas " + result3737 + " <written.contains('foo')> é falso")
chamada antiga: assertEquals("Error!", jobExecution.getAllFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Error!", jobExecution.getAllFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Error!' é diferente de " + result3738 + " <jobExecution.getAllFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3739 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(0, written.size())
nova chamada: assertEquals(0, written.size(), "Era esperado valores iguais, mas  0 é diferente de " + result3740 + " <written.size()>")
chamada antiga: assertEquals("bar", reader.read())
nova chamada: assertEquals("bar", reader.read(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3741 + " <reader.read()>")
chamada antiga: assertEquals(1, listened.size())
nova chamada: assertEquals(1, listened.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3742 + " <listened.size()>")
chamada antiga: assertEquals("Foo", jobExecution.getAllFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Foo", jobExecution.getAllFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result3743 + " <jobExecution.getAllFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3744 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3745 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3746 + " <jobExecution.getStatus()>")
chamada antiga: assertNull(reader.read())
nova chamada: assertNull(reader.read(), "Era esperado nulo, mas " + result3747 + " <reader.read()> não é nulo")
chamada antiga: assertEquals(6, written.size())
nova chamada: assertEquals(6, written.size(), "Era esperado valores iguais, mas  6 é diferente de " + result3748 + " <written.size()>")
chamada antiga: assertEquals(expectedListenerCallCount - 1, chunkListener.afterCount)
nova chamada: assertEquals(expectedListenerCallCount - 1, chunkListener.afterCount, "Era esperado valores iguais, mas  expectedListenerCallCount - 1 é diferente de " + " chunkListener.afterCount")
chamada antiga: assertEquals(expectedListenerCallCount, chunkListener.beforeCount)
nova chamada: assertEquals(expectedListenerCallCount, chunkListener.beforeCount, "Era esperado valores iguais, mas  expectedListenerCallCount é diferente de " + " chunkListener.beforeCount")
chamada antiga: assertEquals(1, chunkListener.failedCount)
nova chamada: assertEquals(1, chunkListener.failedCount, "Era esperado valores iguais, mas  1 é diferente de " + " chunkListener.failedCount")
chamada antiga: assertEquals("1234123415", writeListener.trail)
nova chamada: assertEquals("1234123415", writeListener.trail, "Era esperado valores iguais, mas  '1234123415' é diferente de " + " writeListener.trail")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3749 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3750 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals("[write, write, write]", listenerCalls.toString())
nova chamada: assertEquals("[write, write, write]", listenerCalls.toString(), "Era esperado valores iguais, mas  '[write, write, write]' é diferente de " + result3751 + " <listenerCalls.toString()>")
chamada antiga: assertTrue(Step.class.isAssignableFrom(factory.getObjectType()))
nova chamada: assertTrue(Step.class.isAssignableFrom(factory.getObjectType()), "Era esperado verdadeiro, mas " + result3752 + " <Step.class.isAssignableFrom(factory.getObjectType())> é falso")
chamada antiga: assertTrue(factory.getObject() instanceof Step)
nova chamada: assertTrue(factory.getObject() instanceof Step, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3753 + " <list.size()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3754 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(FAILED.toString(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3755 + " <FAILED.toString()> é diferente de " + result3756 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  STOPPED é diferente de " + result3757 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(STOPPED.toString(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(STOPPED.toString(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3758 + " <STOPPED.toString()> é diferente de " + result3759 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  STOPPED é diferente de " + result3760 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("FUNNY", stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("FUNNY", stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FUNNY' é diferente de " + result3761 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3762 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(exception), "Era esperado verdadeiro, mas " + result3763 + " <stepExecution.getFailureExceptions().contains(exception)> é falso")
chamada antiga: assertEquals(2, jobRepository.getUpdateCount())
nova chamada: assertEquals(2, jobRepository.getUpdateCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3764 + " <jobRepository.getUpdateCount()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3765 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(exception), "Era esperado verdadeiro, mas " + result3766 + " <stepExecution.getFailureExceptions().contains(exception)> é falso")
chamada antiga: assertEquals(2, jobRepository.getUpdateCount())
nova chamada: assertEquals(2, jobRepository.getUpdateCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3767 + " <jobRepository.getUpdateCount()>")
chamada antiga: assertEquals(COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  COMPLETED é diferente de " + result3768 + " <stepExecution.getStatus()>")
chamada antiga: assertFalse(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertFalse(stepExecution.getFailureExceptions().contains(exception), "Era esperado falso, mas " + result3769 + " <stepExecution.getFailureExceptions().contains(exception)> é verdadeiro ")
chamada antiga: assertEquals(3, jobRepository.getUpdateCount())
nova chamada: assertEquals(3, jobRepository.getUpdateCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3770 + " <jobRepository.getUpdateCount()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3771 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(taskletException), "Era esperado verdadeiro, mas " + result3772 + " <stepExecution.getFailureExceptions().contains(taskletException)> é falso")
chamada antiga: assertFalse(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertFalse(stepExecution.getFailureExceptions().contains(exception), "Era esperado falso, mas " + result3773 + " <stepExecution.getFailureExceptions().contains(exception)> é verdadeiro ")
chamada antiga: assertEquals(2, jobRepository.getUpdateCount())
nova chamada: assertEquals(2, jobRepository.getUpdateCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3774 + " <jobRepository.getUpdateCount()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3775 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(taskletException), "Era esperado verdadeiro, mas " + result3776 + " <stepExecution.getFailureExceptions().contains(taskletException)> é falso")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(exception), "Era esperado verdadeiro, mas " + result3777 + " <stepExecution.getFailureExceptions().contains(exception)> é falso")
chamada antiga: assertEquals(2, jobRepository.getUpdateCount())
nova chamada: assertEquals(2, jobRepository.getUpdateCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3778 + " <jobRepository.getUpdateCount()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3779 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("foo", e.getMessage())
nova chamada: assertEquals("foo", e.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3780 + " <e.getMessage()>")
chamada antiga: assertEquals(0, stepExecution.getCommitCount())
nova chamada: assertEquals(0, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3781 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(1, stepExecution.getRollbackCount())
nova chamada: assertEquals(1, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3782 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(3, stepExecution.getExecutionContext().size())
nova chamada: assertEquals(3, stepExecution.getExecutionContext().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3783 + " <stepExecution.getExecutionContext().size()>")
chamada antiga: assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY))
nova chamada: assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY), "Era esperado verdadeiro, mas " + result3784 + " <stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY)> é falso")
chamada antiga: assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY))
nova chamada: assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY), "Era esperado verdadeiro, mas " + result3785 + " <stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY)> é falso")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3786 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("bar", e.getMessage())
nova chamada: assertEquals("bar", e.getMessage(), "Era esperado valores iguais, mas  'bar' é diferente de " + result3787 + " <e.getMessage()>")
chamada antiga: assertEquals(0, stepExecution.getCommitCount())
nova chamada: assertEquals(0, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3788 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(1, stepExecution.getRollbackCount())
nova chamada: assertEquals(1, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3789 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(3, stepExecution.getExecutionContext().size())
nova chamada: assertEquals(3, stepExecution.getExecutionContext().size(), "Era esperado valores iguais, mas  3 é diferente de " + result3790 + " <stepExecution.getExecutionContext().size()>")
chamada antiga: assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY))
nova chamada: assertTrue(stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY), "Era esperado verdadeiro, mas " + result3791 + " <stepExecution.getExecutionContext().containsKey(Step.STEP_TYPE_KEY)> é falso")
chamada antiga: assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY))
nova chamada: assertTrue(stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY), "Era esperado verdadeiro, mas " + result3792 + " <stepExecution.getExecutionContext().containsKey(TaskletStep.TASKLET_TYPE_KEY)> é falso")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3793 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Expected exception in step execution context persistence", e.getMessage())
nova chamada: assertEquals("Expected exception in step execution context persistence", e.getMessage(), "Era esperado valores iguais, mas  'Expected exception in step execution context persistence' é diferente de " + result3794 + " <e.getMessage()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3795 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("JobRepository failure forcing rollback", e.getMessage())
nova chamada: assertEquals("JobRepository failure forcing rollback", e.getMessage(), "Era esperado valores iguais, mas  'JobRepository failure forcing rollback' é diferente de " + result3796 + " <e.getMessage()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3797 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Expected exception in rollback", e.getMessage())
nova chamada: assertEquals("Expected exception in rollback", e.getMessage(), "Era esperado valores iguais, mas  'Expected exception in rollback' é diferente de " + result3798 + " <e.getMessage()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3799 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Expected exception in step execution persistence", e.getMessage())
nova chamada: assertEquals("Expected exception in step execution persistence", e.getMessage(), "Era esperado valores iguais, mas  'Expected exception in step execution persistence' é diferente de " + result3800 + " <e.getMessage()>")
chamada antiga: assertEquals(FAILED, stepExecution.getStatus())
nova chamada: assertEquals(FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  FAILED é diferente de " + result3801 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("JobRepository failure forcing rollback", e.getMessage())
nova chamada: assertEquals("JobRepository failure forcing rollback", e.getMessage(), "Era esperado valores iguais, mas  'JobRepository failure forcing rollback' é diferente de " + result3802 + " <e.getMessage()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3803 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Expected exception in rollback", e.getMessage())
nova chamada: assertEquals("Expected exception in rollback", e.getMessage(), "Era esperado valores iguais, mas  'Expected exception in rollback' é diferente de " + result3804 + " <e.getMessage()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3805 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Expected exception in step execution context persistence", e.getMessage())
nova chamada: assertEquals("Expected exception in step execution context persistence", e.getMessage(), "Era esperado valores iguais, mas  'Expected exception in step execution context persistence' é diferente de " + result3806 + " <e.getMessage()>")
chamada antiga: assertEquals(UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  UNKNOWN é diferente de " + result3807 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(exception))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(exception), "Era esperado verdadeiro, mas " + result3808 + " <stepExecution.getFailureExceptions().contains(exception)> é falso")
chamada antiga: assertTrue(stepExecution.getFailureExceptions().contains(taskletException))
nova chamada: assertTrue(stepExecution.getFailureExceptions().contains(taskletException), "Era esperado verdadeiro, mas " + result3809 + " <stepExecution.getFailureExceptions().contains(taskletException)> é falso")
chamada antiga: assertNotNull(chunk)
nova chamada: assertNotNull(chunk, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(2, chunk.getItems().size())
nova chamada: assertEquals(2, chunk.getItems().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3810 + " <chunk.getItems().size()>")
chamada antiga: assertNotNull(chunk)
nova chamada: assertNotNull(chunk, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(0, chunk.getItems().size())
nova chamada: assertEquals(0, chunk.getItems().size(), "Era esperado valores iguais, mas  0 é diferente de " + result3811 + " <chunk.getItems().size()>")
chamada antiga: assertEquals(10, chunk.getErrors().size())
nova chamada: assertEquals(10, chunk.getErrors().size(), "Era esperado valores iguais, mas  10 é diferente de " + result3812 + " <chunk.getErrors().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3813 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3814 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3815 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3816 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getRollbackCount())
nova chamada: assertEquals(1, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3817 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertFalse(writer.written.contains("4"))
nova chamada: assertFalse(writer.written.contains("4"), "Era esperado falso, mas " + result3818 + " <writer.written.contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.written)
nova chamada: assertEquals(expectedOutput, writer.written, "Era esperado valores iguais, mas  expectedOutput é diferente de " + " writer.written")
chamada antiga: assertEquals(7, stepExecution.getReadCount())
nova chamada: assertEquals(7, stepExecution.getReadCount(), "Era esperado valores iguais, mas  7 é diferente de " + result3819 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals("ItemReader must be provided", expectedException.getMessage())
nova chamada: assertEquals("ItemReader must be provided", expectedException.getMessage(), "Era esperado valores iguais, mas  'ItemReader must be provided' é diferente de " + result3820 + " <expectedException.getMessage()>")
chamada antiga: assertEquals("ItemWriter must be provided", expectedException.getMessage())
nova chamada: assertEquals("ItemWriter must be provided", expectedException.getMessage(), "Era esperado valores iguais, mas  'ItemWriter must be provided' é diferente de " + result3821 + " <expectedException.getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3822 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3823 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result3824 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Non-skippable exception during read"))
nova chamada: assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Non-skippable exception during read"), "Era esperado verdadeiro, mas " + result3825 + " <stepExecution.getExitStatus().getExitDescription().contains('Non-skippable exception during read')> é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3826 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, reader.getRead().size())
nova chamada: assertEquals(1, reader.getRead().size(), "Era esperado valores iguais, mas  1 é diferente de " + result3827 + " <reader.getRead().size()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result3828 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result3829 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Intended Failure"))
nova chamada: assertTrue(stepExecution.getExitStatus().getExitDescription().contains("Intended Failure"), "Era esperado verdadeiro, mas " + result3830 + " <stepExecution.getExitStatus().getExitDescription().contains('Intended Failure')> é falso")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3831 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getReadSkipCount())
nova chamada: assertEquals(1, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3832 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(4, stepExecution.getReadCount())
nova chamada: assertEquals(4, stepExecution.getReadCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3833 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3834 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3835 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3836 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(reader.getRead().contains("2"))
nova chamada: assertFalse(reader.getRead().contains("2"), "Era esperado falso, mas " + result3837 + " <reader.getRead().contains('2')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getWritten())
nova chamada: assertEquals(expectedOutput, writer.getWritten(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3838 + " <writer.getWritten()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3839 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3840 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3841 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3842 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3843 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3844 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getReadCount())
nova chamada: assertEquals(2, stepExecution.getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3845 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3846 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getReadSkipCount())
nova chamada: assertEquals(1, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3847 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(4, stepExecution.getReadCount())
nova chamada: assertEquals(4, stepExecution.getReadCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3848 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3849 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3850 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3851 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(reader.getRead().contains("2"))
nova chamada: assertFalse(reader.getRead().contains("2"), "Era esperado falso, mas " + result3852 + " <reader.getRead().contains('2')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getWritten())
nova chamada: assertEquals(expectedOutput, writer.getWritten(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3853 + " <writer.getWritten()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3854 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3855 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3856 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3857 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getProcessSkipCount())
nova chamada: assertEquals(1, stepExecution.getProcessSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3858 + " <stepExecution.getProcessSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getRollbackCount())
nova chamada: assertEquals(1, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3859 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3860 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(writer.getWritten().contains("4"))
nova chamada: assertFalse(writer.getWritten().contains("4"), "Era esperado falso, mas " + result3861 + " <writer.getWritten().contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getWritten())
nova chamada: assertEquals(expectedOutput, writer.getWritten(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3862 + " <writer.getWritten()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3863 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getSkipCount())
nova chamada: assertEquals(0, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3864 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3865 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3866 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getFilterCount())
nova chamada: assertEquals(1, stepExecution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3867 + " <stepExecution.getFilterCount()>")
chamada antiga: assertEquals(0, stepExecution.getRollbackCount())
nova chamada: assertEquals(0, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3868 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(listenerStub.isFilterEncountered())
nova chamada: assertTrue(listenerStub.isFilterEncountered(), "Era esperado verdadeiro, mas " + result3869 + " <listenerStub.isFilterEncountered()> é falso")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3870 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(writer.getWritten().contains("4"))
nova chamada: assertFalse(writer.getWritten().contains("4"), "Era esperado falso, mas " + result3871 + " <writer.getWritten().contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getWritten())
nova chamada: assertEquals(expectedOutput, writer.getWritten(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3872 + " <writer.getWritten()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3873 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3874 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3875 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(5, stepExecution.getReadCount())
nova chamada: assertEquals(5, stepExecution.getReadCount(), "Era esperado valores iguais, mas  5 é diferente de " + result3876 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3877 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3878 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3879 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(writer.getCommitted().contains("4"))
nova chamada: assertFalse(writer.getCommitted().contains("4"), "Era esperado falso, mas " + result3880 + " <writer.getCommitted().contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3881 + " <writer.getCommitted()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3882 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3883 + " <stepExecution.getSkipCount()>")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3884 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertFalse(writer.getCommitted().contains("4"))
nova chamada: assertFalse(writer.getCommitted().contains("4"), "Era esperado falso, mas " + result3885 + " <writer.getCommitted().contains('4')> é verdadeiro ")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3886 + " <writer.getCommitted()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3887 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(3, stepExecution.getSkipCount())
nova chamada: assertEquals(3, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3888 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getReadSkipCount())
nova chamada: assertEquals(2, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3889 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3890 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getReadCount())
nova chamada: assertEquals(2, stepExecution.getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3891 + " <stepExecution.getReadCount()>")
chamada antiga: assertFalse(reader.getRead().contains("2"))
nova chamada: assertFalse(reader.getRead().contains("2"), "Era esperado falso, mas " + result3892 + " <reader.getRead().contains('2')> é verdadeiro ")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3893 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3894 + " <writer.getCommitted()>")
chamada antiga: assertEquals(2, listenerCalls.size())
nova chamada: assertEquals(2, listenerCalls.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3895 + " <listenerCalls.size()>")
chamada antiga: assertEquals(2, stepExecution.getReadSkipCount())
nova chamada: assertEquals(2, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3896 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3897 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3898 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage())
nova chamada: assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage(), "Era esperado valores iguais, mas  'oops' é diferente de " + result3899 + " <stepExecution.getFailureExceptions().get(0).getCause().getMessage()>")
chamada antiga: assertEquals(2, stepExecution.getReadSkipCount())
nova chamada: assertEquals(2, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3900 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3901 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getSkipCount())
nova chamada: assertEquals(2, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3902 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3903 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage())
nova chamada: assertEquals("oops", stepExecution.getFailureExceptions().get(0).getCause().getMessage(), "Era esperado valores iguais, mas  'oops' é diferente de " + result3904 + " <stepExecution.getFailureExceptions().get(0).getCause().getMessage()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3905 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(0, stepExecution.getReadSkipCount())
nova chamada: assertEquals(0, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3906 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3907 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(4, stepExecution.getSkipCount())
nova chamada: assertEquals(4, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3908 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(3, stepExecution.getReadSkipCount())
nova chamada: assertEquals(3, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3909 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3910 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3911 + " <writer.getCommitted()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3912 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals(4, stepExecution.getSkipCount())
nova chamada: assertEquals(4, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  4 é diferente de " + result3913 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getReadSkipCount())
nova chamada: assertEquals(2, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3914 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(2, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3915 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3916 + " <writer.getCommitted()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3917 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals("[a, c]", reader.getRead().toString())
nova chamada: assertEquals("[a, c]", reader.getRead().toString(), "Era esperado valores iguais, mas  '[a, c]' é diferente de " + result3918 + " <reader.getRead().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result3919 + " <stepExecution.getStatus()>")
chamada antiga: assertFalse(reader.getRead().contains("6"))
nova chamada: assertFalse(reader.getRead().contains("6"), "Era esperado falso, mas " + result3920 + " <reader.getRead().contains('6')> é verdadeiro ")
chamada antiga: assertTrue(reader.getRead().contains("4"))
nova chamada: assertTrue(reader.getRead().contains("4"), "Era esperado verdadeiro, mas " + result3921 + " <reader.getRead().contains('4')> é falso")
chamada antiga: assertEquals(expectedOutput, writer.getCommitted())
nova chamada: assertEquals(expectedOutput, writer.getCommitted(), "Era esperado valores iguais, mas  expectedOutput é diferente de " + result3922 + " <writer.getCommitted()>")
chamada antiga: assertEquals(1, stepExecution.getSkipCount())
nova chamada: assertEquals(1, stepExecution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3923 + " <stepExecution.getSkipCount()>")
chamada antiga: assertEquals(2, stepExecution.getRollbackCount())
nova chamada: assertEquals(2, stepExecution.getRollbackCount(), "Era esperado valores iguais, mas  2 é diferente de " + result3924 + " <stepExecution.getRollbackCount()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 3, 4]", processor.getProcessed().toString())
nova chamada: assertEquals("[1, 2, 3, 4, 3, 4]", processor.getProcessed().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 3, 4]' é diferente de " + result3925 + " <processor.getProcessed().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3926 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(opened)
nova chamada: assertTrue(opened, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(closed)
nova chamada: assertTrue(closed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3927 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(opened)
nova chamada: assertTrue(opened, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(closed)
nova chamada: assertTrue(closed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3928 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(opened)
nova chamada: assertTrue(opened, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(closed)
nova chamada: assertTrue(closed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result3929 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(expected.getId(), actual.getId())
nova chamada: assertEquals(expected.getId(), actual.getId(), "Era esperado valores iguais, mas " + result3930 + " <expected.getId()> é diferente de " + result3931 + " <actual.getId()>")
chamada antiga: assertEquals(expected.getStartTime(), actual.getStartTime())
nova chamada: assertEquals(expected.getStartTime(), actual.getStartTime(), "Era esperado valores iguais, mas " + result3932 + " <expected.getStartTime()> é diferente de " + result3933 + " <actual.getStartTime()>")
chamada antiga: assertEquals(expected.getEndTime(), actual.getEndTime())
nova chamada: assertEquals(expected.getEndTime(), actual.getEndTime(), "Era esperado valores iguais, mas " + result3934 + " <expected.getEndTime()> é diferente de " + result3935 + " <actual.getEndTime()>")
chamada antiga: assertEquals(expected.getSkipCount(), actual.getSkipCount())
nova chamada: assertEquals(expected.getSkipCount(), actual.getSkipCount(), "Era esperado valores iguais, mas " + result3936 + " <expected.getSkipCount()> é diferente de " + result3937 + " <actual.getSkipCount()>")
chamada antiga: assertEquals(expected.getCommitCount(), actual.getCommitCount())
nova chamada: assertEquals(expected.getCommitCount(), actual.getCommitCount(), "Era esperado valores iguais, mas " + result3938 + " <expected.getCommitCount()> é diferente de " + result3939 + " <actual.getCommitCount()>")
chamada antiga: assertEquals(expected.getReadCount(), actual.getReadCount())
nova chamada: assertEquals(expected.getReadCount(), actual.getReadCount(), "Era esperado valores iguais, mas " + result3940 + " <expected.getReadCount()> é diferente de " + result3941 + " <actual.getReadCount()>")
chamada antiga: assertEquals(expected.getWriteCount(), actual.getWriteCount())
nova chamada: assertEquals(expected.getWriteCount(), actual.getWriteCount(), "Era esperado valores iguais, mas " + result3942 + " <expected.getWriteCount()> é diferente de " + result3943 + " <actual.getWriteCount()>")
chamada antiga: assertEquals(expected.getFilterCount(), actual.getFilterCount())
nova chamada: assertEquals(expected.getFilterCount(), actual.getFilterCount(), "Era esperado valores iguais, mas " + result3944 + " <expected.getFilterCount()> é diferente de " + result3945 + " <actual.getFilterCount()>")
chamada antiga: assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount())
nova chamada: assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount(), "Era esperado valores iguais, mas " + result3946 + " <expected.getWriteSkipCount()> é diferente de " + result3947 + " <actual.getWriteSkipCount()>")
chamada antiga: assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount())
nova chamada: assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount(), "Era esperado valores iguais, mas " + result3948 + " <expected.getReadSkipCount()> é diferente de " + result3949 + " <actual.getReadSkipCount()>")
chamada antiga: assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount())
nova chamada: assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount(), "Era esperado valores iguais, mas " + result3950 + " <expected.getProcessSkipCount()> é diferente de " + result3951 + " <actual.getProcessSkipCount()>")
chamada antiga: assertEquals(expected.getRollbackCount(), actual.getRollbackCount())
nova chamada: assertEquals(expected.getRollbackCount(), actual.getRollbackCount(), "Era esperado valores iguais, mas " + result3952 + " <expected.getRollbackCount()> é diferente de " + result3953 + " <actual.getRollbackCount()>")
chamada antiga: assertEquals(expected.getExitStatus(), actual.getExitStatus())
nova chamada: assertEquals(expected.getExitStatus(), actual.getExitStatus(), "Era esperado valores iguais, mas " + result3954 + " <expected.getExitStatus()> é diferente de " + result3955 + " <actual.getExitStatus()>")
chamada antiga: assertEquals(expected.getLastUpdated(), actual.getLastUpdated())
nova chamada: assertEquals(expected.getLastUpdated(), actual.getLastUpdated(), "Era esperado valores iguais, mas " + result3956 + " <expected.getLastUpdated()> é diferente de " + result3957 + " <actual.getLastUpdated()>")
chamada antiga: assertEquals(expected.getExitStatus(), actual.getExitStatus())
nova chamada: assertEquals(expected.getExitStatus(), actual.getExitStatus(), "Era esperado valores iguais, mas " + result3958 + " <expected.getExitStatus()> é diferente de " + result3959 + " <actual.getExitStatus()>")
chamada antiga: assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId())
nova chamada: assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId(), "Era esperado valores iguais, mas " + result3960 + " <expected.getJobExecutionId()> é diferente de " + result3961 + " <actual.getJobExecutionId()>")
chamada antiga: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
nova chamada: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0), "Era esperado falso, mas " + result3962 + " <getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0)> é verdadeiro ")
chamada antiga: assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
nova chamada: assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0), "Era esperado verdadeiro, mas " + result3963 + " <getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(''), 0)> é falso")
chamada antiga: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
nova chamada: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0), "Era esperado falso, mas " + result3964 + " <getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(''), 0)> é verdadeiro ")
chamada antiga: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
nova chamada: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0), "Era esperado falso, mas " + result3965 + " <getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0)> é verdadeiro ")
chamada antiga: assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
nova chamada: assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0), "Era esperado verdadeiro, mas " + result3966 + " <getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(''), 0)> é falso")
chamada antiga: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
nova chamada: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0), "Era esperado falso, mas " + result3967 + " <getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(''), 0)> é verdadeiro ")
chamada antiga: assertEquals(ex, exception)
nova chamada: assertEquals(ex, exception, "Era esperado valores iguais, mas  ex é diferente de " + " exception")
chamada antiga: assertEquals(0, context.attributeNames().length)
nova chamada: assertEquals(0, context.attributeNames().length, "Era esperado valores iguais, mas  0 é diferente de " + " context.attributeNames().length")
chamada antiga: assertEquals(2, context.getParent().attributeNames().length)
nova chamada: assertEquals(2, context.getParent().attributeNames().length, "Era esperado valores iguais, mas  2 é diferente de " + " context.getParent().attributeNames().length")
chamada antiga: assertEquals(0, context.attributeNames().length)
nova chamada: assertEquals(0, context.attributeNames().length, "Era esperado valores iguais, mas  0 é diferente de " + " context.attributeNames().length")
chamada antiga: assertEquals(0, context.getParent().attributeNames().length)
nova chamada: assertEquals(0, context.getParent().attributeNames().length, "Era esperado valores iguais, mas  0 é diferente de " + " context.getParent().attributeNames().length")
chamada antiga: assertEquals(ex, exception)
nova chamada: assertEquals(ex, exception, "Era esperado valores iguais, mas  ex é diferente de " + " exception")
chamada antiga: assertEquals(0, context.attributeNames().length)
nova chamada: assertEquals(0, context.attributeNames().length, "Era esperado valores iguais, mas  0 é diferente de " + " context.attributeNames().length")
chamada antiga: assertEquals(1, context.getParent().attributeNames().length)
nova chamada: assertEquals(1, context.getParent().attributeNames().length, "Era esperado valores iguais, mas  1 é diferente de " + " context.getParent().attributeNames().length")
chamada antiga: assertEquals("foo", wrapper.getItem())
nova chamada: assertEquals("foo", wrapper.getItem(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3968 + " <wrapper.getItem()>")
chamada antiga: assertNull(wrapper.getException())
nova chamada: assertNull(wrapper.getException(), "Era esperado nulo, mas " + result3969 + " <wrapper.getException()> não é nulo")
chamada antiga: assertEquals("foo", wrapper.getItem())
nova chamada: assertEquals("foo", wrapper.getItem(), "Era esperado valores iguais, mas  'foo' é diferente de " + result3970 + " <wrapper.getItem()>")
chamada antiga: assertEquals(exception, wrapper.getException())
nova chamada: assertEquals(exception, wrapper.getException(), "Era esperado valores iguais, mas  exception é diferente de " + result3971 + " <wrapper.getException()>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result3972 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3973 + " <list.size()>")
chamada antiga: assertEquals(1, contribution.getFilterCount())
nova chamada: assertEquals(1, contribution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3974 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Skippable", exception.getMessage())
nova chamada: assertEquals("Skippable", exception.getMessage(), "Era esperado valores iguais, mas  'Skippable' é diferente de " + result3975 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3976 + " <list.size()>")
chamada antiga: assertEquals(1, contribution.getSkipCount())
nova chamada: assertEquals(1, contribution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3977 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(1, contribution.getFilterCount())
nova chamada: assertEquals(1, contribution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3978 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3979 + " <list.size()>")
chamada antiga: assertEquals("[2]", list.toString())
nova chamada: assertEquals("[2]", list.toString(), "Era esperado valores iguais, mas  '[2]' é diferente de " + result3980 + " <list.toString()>")
chamada antiga: assertEquals(1, contribution.getWriteSkipCount())
nova chamada: assertEquals(1, contribution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3981 + " <contribution.getWriteSkipCount()>")
chamada antiga: assertEquals(1, contribution.getFilterCount())
nova chamada: assertEquals(1, contribution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3982 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3983 + " <list.size()>")
chamada antiga: assertEquals("[2]", list.toString())
nova chamada: assertEquals("[2]", list.toString(), "Era esperado valores iguais, mas  '[2]' é diferente de " + result3984 + " <list.toString()>")
chamada antiga: assertEquals(1, contribution.getWriteSkipCount())
nova chamada: assertEquals(1, contribution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3985 + " <contribution.getWriteSkipCount()>")
chamada antiga: assertEquals(3, contribution.getFilterCount())
nova chamada: assertEquals(3, contribution.getFilterCount(), "Era esperado valores iguais, mas  3 é diferente de " + result3986 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Expected Error!", error.getMessage())
nova chamada: assertEquals("Expected Error!", error.getMessage(), "Era esperado valores iguais, mas  'Expected Error!' é diferente de " + result3987 + " <error.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result3988 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result3989 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, contribution.getSkipCount())
nova chamada: assertEquals(1, contribution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3990 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(1, contribution.getWriteCount())
nova chamada: assertEquals(1, contribution.getWriteCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3991 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3992 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result3993 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result3994 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, contribution.getSkipCount())
nova chamada: assertEquals(1, contribution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result3995 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(0, contribution.getWriteCount())
nova chamada: assertEquals(0, contribution.getWriteCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3996 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result3997 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result3998 + " <list.size()>")
chamada antiga: assertEquals(2, chunk.getItems().size())
nova chamada: assertEquals(2, chunk.getItems().size(), "Era esperado valores iguais, mas  2 é diferente de " + result3999 + " <chunk.getItems().size()>")
chamada antiga: assertEquals(1, chunk.getItems().size())
nova chamada: assertEquals(1, chunk.getItems().size(), "Era esperado valores iguais, mas  1 é diferente de " + result4000 + " <chunk.getItems().size()>")
chamada antiga: assertEquals(0, chunk.getItems().size())
nova chamada: assertEquals(0, chunk.getItems().size(), "Era esperado valores iguais, mas  0 é diferente de " + result4001 + " <chunk.getItems().size()>")
chamada antiga: assertEquals("[foo, bar]", list.toString())
nova chamada: assertEquals("[foo, bar]", list.toString(), "Era esperado valores iguais, mas  '[foo, bar]' é diferente de " + result4002 + " <list.toString()>")
chamada antiga: assertEquals("[foo, bar]", after.toString())
nova chamada: assertEquals("[foo, bar]", after.toString(), "Era esperado valores iguais, mas  '[foo, bar]' é diferente de " + result4003 + " <after.toString()>")
chamada antiga: assertEquals("[foo, bar]", list.toString())
nova chamada: assertEquals("[foo, bar]", list.toString(), "Era esperado valores iguais, mas  '[foo, bar]' é diferente de " + result4004 + " <list.toString()>")
chamada antiga: assertEquals("[foo, bar]", after.toString())
nova chamada: assertEquals("[foo, bar]", after.toString(), "Era esperado valores iguais, mas  '[foo, bar]' é diferente de " + result4005 + " <after.toString()>")
chamada antiga: assertEquals("[foo, fail, fail]", writeError.toString())
nova chamada: assertEquals("[foo, fail, fail]", writeError.toString(), "Era esperado valores iguais, mas  '[foo, fail, fail]' é diferente de " + result4006 + " <writeError.toString()>")
chamada antiga: assertEquals("[foo, bar, foo, bar]", writeError.toString())
nova chamada: assertEquals("[foo, bar, foo, bar]", writeError.toString(), "Era esperado valores iguais, mas  '[foo, bar, foo, bar]' é diferente de " + result4007 + " <writeError.toString()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4008 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4009 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4010 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, contribution.getSkipCount())
nova chamada: assertEquals(1, contribution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4011 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(2, contribution.getWriteCount())
nova chamada: assertEquals(2, contribution.getWriteCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4012 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4013 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4014 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4015 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4016 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4017 + " <exception.getMessage()>")
chamada antiga: assertEquals(2, contribution.getSkipCount())
nova chamada: assertEquals(2, contribution.getSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4018 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(2, contribution.getWriteCount())
nova chamada: assertEquals(2, contribution.getWriteCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4019 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4020 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4021 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4022 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Exception!' é diferente de " + result4023 + " <exception.getMessage()>")
chamada antiga: assertFalse(exception instanceof RetryException)
nova chamada: assertFalse(exception instanceof RetryException, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals("Expected Non-Skippable Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Non-Skippable Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Non-Skippable Exception!' é diferente de " + result4024 + " <exception.getMessage()>")
chamada antiga: assertEquals(1, contribution.getSkipCount())
nova chamada: assertEquals(1, contribution.getSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4025 + " <contribution.getSkipCount()>")
chamada antiga: assertEquals(1, contribution.getWriteCount())
nova chamada: assertEquals(1, contribution.getWriteCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4026 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, contribution.getFilterCount())
nova chamada: assertEquals(0, contribution.getFilterCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4027 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals("Expected Skippable Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Skippable Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Skippable Exception!' é diferente de " + result4028 + " <exception.getMessage()>")
chamada antiga: assertEquals("Expected Skippable Exception!", exception.getMessage())
nova chamada: assertEquals("Expected Skippable Exception!", exception.getMessage(), "Era esperado valores iguais, mas  'Expected Skippable Exception!' é diferente de " + result4029 + " <exception.getMessage()>")
chamada antiga: assertEquals(5, list.size())
nova chamada: assertEquals(5, list.size(), "Era esperado valores iguais, mas  5 é diferente de " + result4030 + " <list.size()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", list.toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", list.toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result4031 + " <list.toString()>")
chamada antiga: assertEquals(2, contribution.getFilterCount())
nova chamada: assertEquals(2, contribution.getFilterCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4032 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(2, contribution.getProcessSkipCount())
nova chamada: assertEquals(2, contribution.getProcessSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4033 + " <contribution.getProcessSkipCount()>")
chamada antiga: assertEquals(9, processedItems.size())
nova chamada: assertEquals(9, processedItems.size(), "Era esperado valores iguais, mas  9 é diferente de " + result4034 + " <processedItems.size()>")
chamada antiga: assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString())
nova chamada: assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString(), "Era esperado valores iguais, mas  '[1, 2, skip, skip, 3, fail, fail, 4, 5]' é diferente de " + result4035 + " <processedItems.toString()>")
chamada antiga: assertEquals(5, list.size())
nova chamada: assertEquals(5, list.size(), "Era esperado valores iguais, mas  5 é diferente de " + result4036 + " <list.size()>")
chamada antiga: assertEquals("[1, 2, 3, 4, 5]", list.toString())
nova chamada: assertEquals("[1, 2, 3, 4, 5]", list.toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4, 5]' é diferente de " + result4037 + " <list.toString()>")
chamada antiga: assertEquals(2, contribution.getFilterCount())
nova chamada: assertEquals(2, contribution.getFilterCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4038 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(2, contribution.getProcessSkipCount())
nova chamada: assertEquals(2, contribution.getProcessSkipCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4039 + " <contribution.getProcessSkipCount()>")
chamada antiga: assertEquals(9, processedItems.size())
nova chamada: assertEquals(9, processedItems.size(), "Era esperado valores iguais, mas  9 é diferente de " + result4040 + " <processedItems.size()>")
chamada antiga: assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString())
nova chamada: assertEquals("[1, 2, skip, skip, 3, fail, fail, 4, 5]", processedItems.toString(), "Era esperado valores iguais, mas  '[1, 2, skip, skip, 3, fail, fail, 4, 5]' é diferente de " + result4041 + " <processedItems.toString()>")
chamada antiga: assertEquals("Planned failure!", exception.getMessage())
nova chamada: assertEquals("Planned failure!", exception.getMessage(), "Era esperado valores iguais, mas  'Planned failure!' é diferente de " + result4042 + " <exception.getMessage()>")
chamada antiga: assertEquals("2", result)
nova chamada: assertEquals("2", result, "Era esperado valores iguais, mas  '2' é diferente de " + " result")
chamada antiga: assertEquals(count, context.getRetryCount())
nova chamada: assertEquals(count, context.getRetryCount(), "Era esperado valores iguais, mas  count é diferente de " + result4043 + " <context.getRetryCount()>")
chamada antiga: assertEquals("Recoverable", exception.getMessage())
nova chamada: assertEquals("Recoverable", exception.getMessage(), "Era esperado valores iguais, mas  'Recoverable' é diferente de " + result4044 + " <exception.getMessage()>")
chamada antiga: assertEquals("[a, b]", Arrays.toString(result))
nova chamada: assertEquals("[a, b]", Arrays.toString(result), "Era esperado valores iguais, mas  '[a, b]' é diferente de " + result4045 + " <Arrays.toString(result)>")
chamada antiga: assertEquals("Recoverable", exception.getMessage())
nova chamada: assertEquals("Recoverable", exception.getMessage(), "Era esperado valores iguais, mas  'Recoverable' é diferente de " + result4046 + " <exception.getMessage()>")
chamada antiga: assertEquals("Recoverable", exception.getMessage())
nova chamada: assertEquals("Recoverable", exception.getMessage(), "Era esperado valores iguais, mas  'Recoverable' é diferente de " + result4047 + " <exception.getMessage()>")
chamada antiga: assertEquals("[d, c]", Arrays.toString(result))
nova chamada: assertEquals("[d, c]", Arrays.toString(result), "Era esperado valores iguais, mas  '[d, c]' é diferente de " + result4048 + " <Arrays.toString(result)>")
chamada antiga: assertEquals("[e, f]", Arrays.toString(result))
nova chamada: assertEquals("[e, f]", Arrays.toString(result), "Era esperado valores iguais, mas  '[e, f]' é diferente de " + result4049 + " <Arrays.toString(result)>")
chamada antiga: assertEquals("Recoverable", exception.getMessage())
nova chamada: assertEquals("Recoverable", exception.getMessage(), "Era esperado valores iguais, mas  'Recoverable' é diferente de " + result4050 + " <exception.getMessage()>")
chamada antiga: assertEquals("[r:b, r:c]", Arrays.toString(result))
nova chamada: assertEquals("[r:b, r:c]", Arrays.toString(result), "Era esperado valores iguais, mas  '[r:b, r:c]' é diferente de " + result4051 + " <Arrays.toString(result)>")
chamada antiga: assertFalse(chunk.getItems().contains("fail"))
nova chamada: assertFalse(chunk.getItems().contains("fail"), "Era esperado falso, mas " + result4052 + " <chunk.getItems().contains('fail')> é verdadeiro ")
chamada antiga: assertEquals(items, chunk.getItems())
nova chamada: assertEquals(items, chunk.getItems(), "Era esperado valores iguais, mas  items é diferente de " + result4053 + " <chunk.getItems()>")
chamada antiga: assertEquals(before - chunk.getItems().size(), chunk.getSkips().size())
nova chamada: assertEquals(before - chunk.getItems().size(), chunk.getSkips().size(), "Era esperado valores iguais, mas  before - chunk.getItems().size() é diferente de " + result4054 + " <chunk.getSkips().size()>")
chamada antiga: assertEquals(1, contribution.getReadCount())
nova chamada: assertEquals(1, contribution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4055 + " <contribution.getReadCount()>")
chamada antiga: assertEquals(1, contribution.getWriteCount())
nova chamada: assertEquals(1, contribution.getWriteCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4056 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(0, context.attributeNames().length)
nova chamada: assertEquals(0, context.attributeNames().length, "Era esperado valores iguais, mas  0 é diferente de " + " context.attributeNames().length")
chamada antiga: fail("Not expecting to get this far")
nova chamada: fail("Not expecting to get this far", "A execução falhou por uma causa deliberada")
chamada antiga: assertEquals("Foo!", exception.getMessage())
nova chamada: assertEquals("Foo!", exception.getMessage(), "Era esperado valores iguais, mas  'Foo!' é diferente de " + result4057 + " <exception.getMessage()>")
chamada antiga: assertEquals(0, contribution.getReadCount())
nova chamada: assertEquals(0, contribution.getReadCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4058 + " <contribution.getReadCount()>")
chamada antiga: assertEquals(expected, contribution.getExitStatus())
nova chamada: assertEquals(expected, contribution.getExitStatus(), "Era esperado valores iguais, mas  expected é diferente de " + result4059 + " <contribution.getExitStatus()>")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4060 + " <monitor.getOffset()>")
chamada antiga: assertEquals(1, monitor.getOffset())
nova chamada: assertEquals(1, monitor.getOffset(), "Era esperado valores iguais, mas  1 é diferente de " + result4061 + " <monitor.getOffset()>")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4062 + " <monitor.getOffset()>")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4063 + " <monitor.getOffset()>")
chamada antiga: assertTrue(closed)
nova chamada: assertTrue(closed, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4064 + " <monitor.getOffset()>")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4065 + " <monitor.getOffset()>")
chamada antiga: assertEquals(0, monitor.getOffset())
nova chamada: assertEquals(0, monitor.getOffset(), "Era esperado valores iguais, mas  0 é diferente de " + result4066 + " <monitor.getOffset()>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4067 + " <executionContext.size()>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4068 + " <executionContext.size()>")
chamada antiga: assertEquals(1, executionContext.size())
nova chamada: assertEquals(1, executionContext.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4069 + " <executionContext.size()>")
chamada antiga: assertEquals(0, executionContext.size())
nova chamada: assertEquals(0, executionContext.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4070 + " <executionContext.size()>")
chamada antiga: assertEquals(Arrays.asList("foo", "bar"), list)
nova chamada: assertEquals(Arrays.asList("foo", "bar"), list, "Era esperado valores iguais, mas " + result4071 + " <Arrays.asList('foo', 'bar')> é diferente de " + " list")
chamada antiga: assertEquals(1, contribution.getFilterCount())
nova chamada: assertEquals(1, contribution.getFilterCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4072 + " <contribution.getFilterCount()>")
chamada antiga: assertEquals(2, contribution.getWriteCount())
nova chamada: assertEquals(2, contribution.getWriteCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4073 + " <contribution.getWriteCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4074 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4075 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4076 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4077 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4078 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4079 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4080 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4081 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 4]' é diferente de " + result4082 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4083 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4084 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4085 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4086 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4087 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4088 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4089 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4090 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4091 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4092 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4093 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 4]' é diferente de " + result4094 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4095 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4096 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4097 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4098 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4099 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4100 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4101 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3]' é diferente de " + result4102 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4103 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4104 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4105 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 4]' é diferente de " + result4106 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4107 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3]' é diferente de " + result4108 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4109 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4110 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3]' é diferente de " + result4111 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4112 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4113 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4114 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 4]' é diferente de " + result4115 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4116 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3]' é diferente de " + result4117 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4118 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4119 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4120 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4121 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4122 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4123 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertNotNull(stepExecution)
nova chamada: assertNotNull(stepExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4124 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4125 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4]' é diferente de " + result4126 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(0, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(0, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4127 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4128 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4129 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4130 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4131 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4132 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 4]' é diferente de " + result4133 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4134 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4135 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4]' é diferente de " + result4136 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(1, stepExecution.getWriteSkipCount())
nova chamada: assertEquals(1, stepExecution.getWriteSkipCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4137 + " <stepExecution.getWriteSkipCount()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4138 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3]' é diferente de " + result4139 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[]", writer.getCommitted().toString())
nova chamada: assertEquals("[]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4140 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4141 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString())
nova chamada: assertEquals("[1, 2, 3, 1, 2, 3, 4]", writer.getWritten().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 1, 2, 3, 4]' é diferente de " + result4142 + " <writer.getWritten().toString()>")
chamada antiga: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString())
nova chamada: assertEquals("[1, 2, 3, 4]", writer.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 2, 3, 4]' é diferente de " + result4143 + " <writer.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4144 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[]", tasklet.getCommitted().toString())
nova chamada: assertEquals("[]", tasklet.getCommitted().toString(), "Era esperado valores iguais, mas  '[]' é diferente de " + result4145 + " <tasklet.getCommitted().toString()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4146 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("[1, 1, 1, 1]", tasklet.getCommitted().toString())
nova chamada: assertEquals("[1, 1, 1, 1]", tasklet.getCommitted().toString(), "Era esperado valores iguais, mas  '[1, 1, 1, 1]' é diferente de " + result4147 + " <tasklet.getCommitted().toString()>")
chamada antiga: assertEquals(1, processed.size())
nova chamada: assertEquals(1, processed.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4148 + " <processed.size()>")
chamada antiga: assertEquals(1, stepExecution.getReadCount())
nova chamada: assertEquals(1, stepExecution.getReadCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4149 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getCommitCount())
nova chamada: assertEquals(1, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4150 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(4, processed.size())
nova chamada: assertEquals(4, processed.size(), "Era esperado valores iguais, mas  4 é diferente de " + result4151 + " <processed.size()>")
chamada antiga: assertEquals(4, stepExecution.getReadCount())
nova chamada: assertEquals(4, stepExecution.getReadCount(), "Era esperado valores iguais, mas  4 é diferente de " + result4152 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(4, stepExecution.getWriteCount())
nova chamada: assertEquals(4, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  4 é diferente de " + result4153 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(3, stepExecution.getCommitCount())
nova chamada: assertEquals(3, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  3 é diferente de " + result4154 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(3, processed.size())
nova chamada: assertEquals(3, processed.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4155 + " <processed.size()>")
chamada antiga: assertEquals(3, stepExecution.getReadCount())
nova chamada: assertEquals(3, stepExecution.getReadCount(), "Era esperado valores iguais, mas  3 é diferente de " + result4156 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(3, stepExecution.getWriteCount())
nova chamada: assertEquals(3, stepExecution.getWriteCount(), "Era esperado valores iguais, mas  3 é diferente de " + result4157 + " <stepExecution.getWriteCount()>")
chamada antiga: assertEquals(2, stepExecution.getCommitCount())
nova chamada: assertEquals(2, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4158 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(0, processed.size())
nova chamada: assertEquals(0, processed.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4159 + " <processed.size()>")
chamada antiga: assertEquals(0, stepExecution.getReadCount())
nova chamada: assertEquals(0, stepExecution.getReadCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4160 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(1, stepExecution.getCommitCount())
nova chamada: assertEquals(1, stepExecution.getCommitCount(), "Era esperado valores iguais, mas  1 é diferente de " + result4161 + " <stepExecution.getCommitCount()>")
chamada antiga: assertEquals(3, processed.size())
nova chamada: assertEquals(3, processed.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4162 + " <processed.size()>")
chamada antiga: assertEquals(3, stepExecution.getReadCount())
nova chamada: assertEquals(3, stepExecution.getReadCount(), "Era esperado valores iguais, mas  3 é diferente de " + result4163 + " <stepExecution.getReadCount()>")
chamada antiga: assertTrue(3 <= jobRepository.updateCount)
nova chamada: assertTrue(3 <= jobRepository.updateCount, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4164 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(1, processed.size())
nova chamada: assertEquals(1, processed.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4165 + " <processed.size()>")
chamada antiga: assertFalse(tasklet.isRestoreFromCalled())
nova chamada: assertFalse(tasklet.isRestoreFromCalled(), "Era esperado falso, mas " + result4166 + " <tasklet.isRestoreFromCalled()> é verdadeiro ")
chamada antiga: assertTrue(tasklet.isGetExecutionAttributesCalled())
nova chamada: assertTrue(tasklet.isGetExecutionAttributesCalled(), "Era esperado verdadeiro, mas " + result4167 + " <tasklet.isGetExecutionAttributesCalled()> é falso")
chamada antiga: assertEquals(3, list.size())
nova chamada: assertEquals(3, list.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4168 + " <list.size()>")
chamada antiga: assertEquals("foo", e.getCause().getMessage())
nova chamada: assertEquals("foo", e.getCause().getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4169 + " <e.getCause().getMessage()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4170 + " <stepExecution.getStatus()>")
chamada antiga: assertDoesNotThrow(() -> step.execute(stepExecution))
nova chamada: assertDoesNotThrow(() -> step.execute(stepExecution), "Era esperado que nenhuma exceção fosse lançada, mas  () - step.execute(stepExecution) foi lançada")
chamada antiga: assertFalse(tasklet.isRestoreFromCalled())
nova chamada: assertFalse(tasklet.isRestoreFromCalled(), "Era esperado falso, mas " + result4171 + " <tasklet.isRestoreFromCalled()> é verdadeiro ")
chamada antiga: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
nova chamada: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"), "Era esperado valores iguais, mas  false é diferente de " + result4172 + " <stepExecution.getExecutionContext().containsKey('foo')>")
chamada antiga: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
nova chamada: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4173 + " <stepExecution.getExecutionContext().getString('foo')>")
chamada antiga: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
nova chamada: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"), "Era esperado valores iguais, mas  false é diferente de " + result4174 + " <stepExecution.getExecutionContext().containsKey('foo')>")
chamada antiga: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
nova chamada: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4175 + " <stepExecution.getExecutionContext().getString('foo')>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4176 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4177 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4178 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4179 + " <list.size()>")
chamada antiga: assertEquals(customStatus.getExitCode(), returnedStatus.getExitCode())
nova chamada: assertEquals(customStatus.getExitCode(), returnedStatus.getExitCode(), "Era esperado valores iguais, mas " + result4180 + " <customStatus.getExitCode()> é diferente de " + result4181 + " <returnedStatus.getExitCode()>")
chamada antiga: assertEquals(customStatus.getExitDescription(), returnedStatus.getExitDescription())
nova chamada: assertEquals(customStatus.getExitDescription(), returnedStatus.getExitDescription(), "Era esperado valores iguais, mas " + result4182 + " <customStatus.getExitDescription()> é diferente de " + result4183 + " <returnedStatus.getExitDescription()>")
chamada antiga: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4184 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4185 + " <list.size()>")
chamada antiga: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"))
nova chamada: assertEquals(false, stepExecution.getExecutionContext().containsKey("foo"), "Era esperado valores iguais, mas  false é diferente de " + result4186 + " <stepExecution.getExecutionContext().containsKey('foo')>")
chamada antiga: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"))
nova chamada: assertEquals("bar", stepExecution.getExecutionContext().getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4187 + " <stepExecution.getExecutionContext().getString('foo')>")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4188 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4189 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4190 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4191 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Foo", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4192 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4193 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Bar", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Bar", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result4194 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4195 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Bar", ex.getMessage())
nova chamada: assertEquals("Bar", ex.getMessage(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result4196 + " <ex.getMessage()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4197 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("", msg)
nova chamada: assertEquals("", msg, "Era esperado valores iguais, mas  '' é diferente de " + " msg")
chamada antiga: assertEquals("Bar", ex.getMessage())
nova chamada: assertEquals("Bar", ex.getMessage(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result4198 + " <ex.getMessage()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4199 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("", msg)
nova chamada: assertEquals("", msg, "Era esperado valores iguais, mas  '' é diferente de " + " msg")
chamada antiga: assertEquals("Bar", ex.getMessage())
nova chamada: assertEquals("Bar", ex.getMessage(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result4200 + " <ex.getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4201 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("CRASH!", expected.getMessage())
nova chamada: assertEquals("CRASH!", expected.getMessage(), "Era esperado valores iguais, mas  'CRASH!' é diferente de " + result4202 + " <expected.getMessage()>")
chamada antiga: assertFalse(stepExecution.getExecutionContext().isEmpty())
nova chamada: assertFalse(stepExecution.getExecutionContext().isEmpty(), "Era esperado falso, mas " + result4203 + " <stepExecution.getExecutionContext().isEmpty()> é verdadeiro ")
chamada antiga: assertEquals("bucket", stepExecution.getExecutionContext().getString("spam"))
nova chamada: assertEquals("bucket", stepExecution.getExecutionContext().getString("spam"), "Era esperado valores iguais, mas  'bucket' é diferente de " + result4204 + " <stepExecution.getExecutionContext().getString('spam')>")
chamada antiga: assertEquals(3, processed.size())
nova chamada: assertEquals(3, processed.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4205 + " <processed.size()>")
chamada antiga: assertEquals(3, stepExecution.getReadCount())
nova chamada: assertEquals(3, stepExecution.getReadCount(), "Era esperado valores iguais, mas  3 é diferente de " + result4206 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4207 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4208 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4209 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, mapper.getExitStatus(0))
nova chamada: assertEquals(ExitStatus.COMPLETED, mapper.getExitStatus(0), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4210 + " <mapper.getExitStatus(0)>")
chamada antiga: assertEquals(ExitStatus.FAILED, mapper.getExitStatus(1))
nova chamada: assertEquals(ExitStatus.FAILED, mapper.getExitStatus(1), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result4211 + " <mapper.getExitStatus(1)>")
chamada antiga: assertEquals(ExitStatus.FAILED, mapper.getExitStatus(-1))
nova chamada: assertEquals(ExitStatus.FAILED, mapper.getExitStatus(-1), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result4212 + " <mapper.getExitStatus(-1)>")
chamada antiga: assertFalse(processingThread.isAlive())
nova chamada: assertFalse(processingThread.isAlive(), "Era esperado falso, mas " + result4213 + " <processingThread.isAlive()> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4214 + " <stepExecution.getStatus()>")
chamada antiga: assertFalse(processingThread.isAlive())
nova chamada: assertFalse(processingThread.isAlive(), "Era esperado falso, mas " + result4215 + " <processingThread.isAlive()> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4216 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("Planned!", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Planned!", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Planned!' é diferente de " + result4217 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4218 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4219 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(lastStepExecution, stepExecution)
nova chamada: assertEquals(lastStepExecution, stepExecution, "Era esperado valores iguais, mas  lastStepExecution é diferente de " + " stepExecution")
chamada antiga: assertNotSame(lastStepExecution, stepExecution)
nova chamada: assertNotSame(lastStepExecution, stepExecution, "Era esperado objetos diferentes, mas  lastStepExecution é igual a " + " stepExecution")
chamada antiga: assertEquals(BatchStatus.FAILED, lastStepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, lastStepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4220 + " <lastStepExecution.getStatus()>")
chamada antiga: assertEquals("Simulate commit failure", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("Simulate commit failure", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'Simulate commit failure' é diferente de " + result4221 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, adapter.execute(null, null))
nova chamada: assertEquals(RepeatStatus.FINISHED, adapter.execute(null, null), "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + result4222 + " <adapter.execute(null, null)>")
chamada antiga: assertSame(mappings.get(ConfigurableSystemProcessExitCodeMapper.ELSE_KEY), mapper.getExitStatus(5))
nova chamada: assertSame(mappings.get(ConfigurableSystemProcessExitCodeMapper.ELSE_KEY), mapper.getExitStatus(5), "Era esperado objetos iguais, mas " + result4223 + " <mappings.get(ConfigurableSystemProcessExitCodeMapper.ELSE_KEY)> é diferente de " + result4224 + " <mapper.getExitStatus(5)>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, exitStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, exitStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " exitStatus")
chamada antiga: assertEquals(RepeatStatus.FINISHED, exitStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, exitStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " exitStatus")
chamada antiga: assertTrue(exception.getMessage().contains("did not finish within the timeout"))
nova chamada: assertTrue(exception.getMessage().contains("did not finish within the timeout"), "Era esperado verdadeiro, mas " + result4225 + " <exception.getMessage().contains('did not finish within the timeout')> é falso")
chamada antiga: assertTrue(message.contains("Job interrupted while executing system command"))
nova chamada: assertTrue(message.contains("Job interrupted while executing system command"), "Era esperado verdadeiro, mas " + result4226 + " <message.contains('Job interrupted while executing system command')> é falso")
chamada antiga: assertTrue(message.contains(command[0]))
nova chamada: assertTrue(message.contains(command[0]), "Era esperado verdadeiro, mas " + result4227 + " <message.contains(command[0])> é falso")
chamada antiga: assertEquals(ExitStatus.STOPPED.getExitCode(), contribution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.STOPPED.getExitCode(), contribution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result4228 + " <ExitStatus.STOPPED.getExitCode()> é diferente de " + result4229 + " <contribution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, exitStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, exitStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " exitStatus")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4230 + " <stepContribution.getExitStatus()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, exitStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, exitStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " exitStatus")
chamada antiga: assertEquals(ExitStatus.FAILED, stepContribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.FAILED, stepContribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result4231 + " <stepContribution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4232 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(lastStepExecution, stepExecution)
nova chamada: assertEquals(lastStepExecution, stepExecution, "Era esperado valores iguais, mas  lastStepExecution é diferente de " + " stepExecution")
chamada antiga: assertNotSame(lastStepExecution, stepExecution)
nova chamada: assertNotSame(lastStepExecution, stepExecution, "Era esperado objetos diferentes, mas  lastStepExecution é igual a " + " stepExecution")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4233 + " <stepExecution.getStatus()>")
chamada antiga: assertTrue(stepExecution.getReadCount() >= 25)
nova chamada: assertTrue(stepExecution.getReadCount() >= 25, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(processed.size() >= 25)
nova chamada: assertTrue(processed.size() >= 25, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4234 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getReadCount())
nova chamada: assertEquals(2, stepExecution.getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4235 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(2, processed.size())
nova chamada: assertEquals(2, processed.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4236 + " <processed.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4237 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(2, stepExecution.getReadCount())
nova chamada: assertEquals(2, stepExecution.getReadCount(), "Era esperado valores iguais, mas  2 é diferente de " + result4238 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(2, processed.size())
nova chamada: assertEquals(2, processed.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4239 + " <processed.size()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4240 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(4, stepExecution.getReadCount())
nova chamada: assertEquals(4, stepExecution.getReadCount(), "Era esperado valores iguais, mas  4 é diferente de " + result4241 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(4, processed.size())
nova chamada: assertEquals(4, processed.size(), "Era esperado valores iguais, mas  4 é diferente de " + result4242 + " <processed.size()>")
chamada antiga: assertEquals(ExitStatus.NOOP, contribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.NOOP, contribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.NOOP é diferente de " + result4243 + " <contribution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4244 + " <contribution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, contribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4245 + " <contribution.getExitStatus()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getStepContribution(), stepContribution)
nova chamada: assertEquals(tasklet.getStepContribution(), stepContribution, "Era esperado valores iguais, mas " + result4246 + " <tasklet.getStepContribution()> é diferente de " + " stepContribution")
chamada antiga: assertEquals(tasklet.getChunkContext(), chunkContext)
nova chamada: assertEquals(tasklet.getChunkContext(), chunkContext, "Era esperado valores iguais, mas " + result4247 + " <tasklet.getChunkContext()> é diferente de " + " chunkContext")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getStepContribution(), stepContribution)
nova chamada: assertEquals(tasklet.getStepContribution(), stepContribution, "Era esperado valores iguais, mas " + result4248 + " <tasklet.getStepContribution()> é diferente de " + " stepContribution")
chamada antiga: assertEquals(tasklet.getChunkContext(), chunkContext)
nova chamada: assertEquals(tasklet.getChunkContext(), chunkContext, "Era esperado valores iguais, mas " + result4249 + " <tasklet.getChunkContext()> é diferente de " + " chunkContext")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getStepContribution(), stepContribution)
nova chamada: assertEquals(tasklet.getStepContribution(), stepContribution, "Era esperado valores iguais, mas " + result4250 + " <tasklet.getStepContribution()> é diferente de " + " stepContribution")
chamada antiga: assertEquals(tasklet.getChunkContext(), chunkContext)
nova chamada: assertEquals(tasklet.getChunkContext(), chunkContext, "Era esperado valores iguais, mas " + result4251 + " <tasklet.getChunkContext()> é diferente de " + " chunkContext")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getChunkContext(), chunkContext)
nova chamada: assertEquals(tasklet.getChunkContext(), chunkContext, "Era esperado valores iguais, mas " + result4252 + " <tasklet.getChunkContext()> é diferente de " + " chunkContext")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getStepContribution(), stepContribution)
nova chamada: assertEquals(tasklet.getStepContribution(), stepContribution, "Era esperado valores iguais, mas " + result4253 + " <tasklet.getStepContribution()> é diferente de " + " stepContribution")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getStepContribution(), stepContribution)
nova chamada: assertEquals(tasklet.getStepContribution(), stepContribution, "Era esperado valores iguais, mas " + result4254 + " <tasklet.getStepContribution()> é diferente de " + " stepContribution")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(tasklet.getChunkContext(), chunkContext)
nova chamada: assertEquals(tasklet.getChunkContext(), chunkContext, "Era esperado valores iguais, mas " + result4255 + " <tasklet.getChunkContext()> é diferente de " + " chunkContext")
chamada antiga: assertEquals(new ExitStatus("DONE"), stepContribution.getExitStatus())
nova chamada: assertEquals(new ExitStatus("DONE"), stepContribution.getExitStatus(), "Era esperado valores iguais, mas  new ExitStatus('DONE') é diferente de " + result4256 + " <stepContribution.getExitStatus()>")
chamada antiga: assertEquals(RepeatStatus.FINISHED, repeatStatus)
nova chamada: assertEquals(RepeatStatus.FINISHED, repeatStatus, "Era esperado valores iguais, mas  RepeatStatus.FINISHED é diferente de " + " repeatStatus")
chamada antiga: assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, stepContribution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4257 + " <stepContribution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4258 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4259 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4260 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4261 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(1, execution.getJobParameters().getParameters().size())
nova chamada: assertEquals(1, execution.getJobParameters().getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result4262 + " <execution.getJobParameters().getParameters().size()>")
chamada antiga: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4263 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage())
nova chamada: assertEquals("FOO", stepExecution.getFailureExceptions().get(0).getMessage(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4264 + " <stepExecution.getFailureExceptions().get(0).getMessage()>")
chamada antiga: assertEquals(1, execution.getJobParameters().getParameters().size())
nova chamada: assertEquals(1, execution.getJobParameters().getParameters().size(), "Era esperado valores iguais, mas  1 é diferente de " + result4265 + " <execution.getJobParameters().getParameters().size()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, stepExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4266 + " <stepExecution.getStatus()>")
chamada antiga: assertEquals("CUSTOM", stepExecution.getExitStatus().getExitCode())
nova chamada: assertEquals("CUSTOM", stepExecution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'CUSTOM' é diferente de " + result4267 + " <stepExecution.getExitStatus().getExitCode()>")
chamada antiga: assertTrue(jobParameters.getParameters().containsKey("foo"))
nova chamada: assertTrue(jobParameters.getParameters().containsKey("foo"), "Era esperado verdadeiro, mas " + result4268 + " <jobParameters.getParameters().containsKey('foo')> é falso")
chamada antiga: assertEquals("bar", jobParameters.getString("foo"))
nova chamada: assertEquals("bar", jobParameters.getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4269 + " <jobParameters.getString('foo')>")
chamada antiga: assertFalse(jobParameters.getParameters().containsKey("bar"))
nova chamada: assertFalse(jobParameters.getParameters().containsKey("bar"), "Era esperado falso, mas " + result4270 + " <jobParameters.getParameters().containsKey('bar')> é verdadeiro ")
chamada antiga: assertEquals("bar", jobParameters.getString("foo"))
nova chamada: assertEquals("bar", jobParameters.getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4271 + " <jobParameters.getString('foo')>")
chamada antiga: assertEquals("bucket", jobParameters.getString("spam"))
nova chamada: assertEquals("bucket", jobParameters.getString("spam"), "Era esperado valores iguais, mas  'bucket' é diferente de " + result4272 + " <jobParameters.getString('spam')>")
chamada antiga: assertFalse(jobParameters.getParameters().containsKey("bar"))
nova chamada: assertFalse(jobParameters.getParameters().containsKey("bar"), "Era esperado falso, mas " + result4273 + " <jobParameters.getParameters().containsKey('bar')> é verdadeiro ")
chamada antiga: assertEquals("bar", jobParameters.getString("foo"))
nova chamada: assertEquals("bar", jobParameters.getString("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4274 + " <jobParameters.getString('foo')>")
chamada antiga: assertEquals(11L, jobParameters.getLong("foo"))
nova chamada: assertEquals(11L, jobParameters.getLong("foo"), "Era esperado valores iguais, mas  11L é diferente de " + result4275 + " <jobParameters.getLong('foo')>")
chamada antiga: assertEquals(11.1, jobParameters.getDouble("foo"))
nova chamada: assertEquals(11.1, jobParameters.getDouble("foo"), "Era esperado valores iguais, mas  11.1 é diferente de " + result4276 + " <jobParameters.getDouble('foo')>")
chamada antiga: assertEquals(LocalDate.of(2012, 12, 12), jobParameters.getParameter("foo").getValue())
nova chamada: assertEquals(LocalDate.of(2012, 12, 12), jobParameters.getParameter("foo").getValue(), "Era esperado valores iguais, mas " + result4277 + " <LocalDate.of(2012, 12, 12)> é diferente de " + result4278 + " <jobParameters.getParameter('foo').getValue()>")
chamada antiga: fail("Not expecting to get this far", "A execução falhou por uma causa deliberada")
nova chamada: fail("Not expecting to get this far", "A execução falhou por uma causa deliberada", "A execução falhou por uma causa deliberada")
chamada antiga: assertTrue(jobParameters.isEmpty())
nova chamada: assertTrue(jobParameters.isEmpty(), "Era esperado verdadeiro, mas " + result4279 + " <jobParameters.isEmpty()> é falso")
chamada antiga: assertNotNull(jobParameters.getParameter("foo"))
nova chamada: assertNotNull(jobParameters.getParameter("foo"), "Era esperado não nulo, mas " + result4280 + " <jobParameters.getParameter('foo')> é nulo")
chamada antiga: assertNotNull(jobParameters.getParameter("foo"))
nova chamada: assertNotNull(jobParameters.getParameter("foo"), "Era esperado não nulo, mas " + result4281 + " <jobParameters.getParameter('foo')> é nulo")
chamada antiga: assertEquals(11L, jobParameters.getParameter("foo").getValue())
nova chamada: assertEquals(11L, jobParameters.getParameter("foo").getValue(), "Era esperado valores iguais, mas  11L é diferente de " + result4282 + " <jobParameters.getParameter('foo').getValue()>")
chamada antiga: assertEquals(11.1, jobParameters.getParameter("foo").getValue())
nova chamada: assertEquals(11.1, jobParameters.getParameter("foo").getValue(), "Era esperado valores iguais, mas  11.1 é diferente de " + result4283 + " <jobParameters.getParameter('foo').getValue()>")
chamada antiga: assertNotNull(jobParameters.getParameter("parentParam").getValue())
nova chamada: assertNotNull(jobParameters.getParameter("parentParam").getValue(), "Era esperado não nulo, mas " + result4284 + " <jobParameters.getParameter('parentParam').getValue()> é nulo")
chamada antiga: assertNotNull(jobParameters.getParameter("foo").getValue())
nova chamada: assertNotNull(jobParameters.getParameter("foo").getValue(), "Era esperado não nulo, mas " + result4285 + " <jobParameters.getParameter('foo').getValue()> é nulo")
chamada antiga: assertNull(jobParameters.getParameter("parentParam"))
nova chamada: assertNull(jobParameters.getParameter("parentParam"), "Era esperado nulo, mas " + result4286 + " <jobParameters.getParameter('parentParam')> não é nulo")
chamada antiga: assertNotNull(jobParameters.getParameter("foo").getValue())
nova chamada: assertNotNull(jobParameters.getParameter("foo").getValue(), "Era esperado não nulo, mas " + result4287 + " <jobParameters.getParameter('foo').getValue()> é nulo")
chamada antiga: assertEquals(BatchStatus.STOPPED, run1.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, run1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4288 + " <run1.getStatus()>")
chamada antiga: assertEquals(2, run1.getStepExecutions().size())
nova chamada: assertEquals(2, run1.getStepExecutions().size(), "Era esperado valores iguais, mas  2 é diferente de " + result4289 + " <run1.getStepExecutions().size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, run2.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, run2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4290 + " <run2.getStatus()>")
chamada antiga: assertEquals(6, run2.getStepExecutions().size())
nova chamada: assertEquals(6, run2.getStepExecutions().size(), "Era esperado valores iguais, mas  6 é diferente de " + result4291 + " <run2.getStepExecutions().size()>")
chamada antiga: assertSame(execution, context)
nova chamada: assertSame(execution, context, "Era esperado objetos iguais, mas  execution é diferente de " + " context")
chamada antiga: assertSame(execution, stepExecution)
nova chamada: assertSame(execution, stepExecution, "Era esperado objetos iguais, mas  execution é diferente de " + " stepExecution")
chamada antiga: assertSame(execution, stepExecution)
nova chamada: assertSame(execution, stepExecution, "Era esperado objetos iguais, mas  execution é diferente de " + " stepExecution")
chamada antiga: assertNull(step.getName())
nova chamada: assertNull(step.getName(), "Era esperado nulo, mas " + result4292 + " <step.getName()> não é nulo")
chamada antiga: assertEquals("foo", step.getName())
nova chamada: assertEquals("foo", step.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4293 + " <step.getName()>")
chamada antiga: assertNull(step.getName())
nova chamada: assertNull(step.getName(), "Era esperado nulo, mas " + result4294 + " <step.getName()> não é nulo")
chamada antiga: assertEquals("foo", step.getName())
nova chamada: assertEquals("foo", step.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4295 + " <step.getName()>")
chamada antiga: assertEquals("foo", step.getName())
nova chamada: assertEquals("foo", step.getName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4296 + " <step.getName()>")
chamada antiga: assertEquals("listener1#beforeStep", events.get(i++))
nova chamada: assertEquals("listener1#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener1#beforeStep' é diferente de " + result4297 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#beforeStep", events.get(i++))
nova chamada: assertEquals("listener2#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener2#beforeStep' é diferente de " + result4298 + " <events.get(i++)>")
chamada antiga: assertEquals("open", events.get(i++))
nova chamada: assertEquals("open", events.get(i++), "Era esperado valores iguais, mas  'open' é diferente de " + result4299 + " <events.get(i++)>")
chamada antiga: assertEquals("doExecute", events.get(i++))
nova chamada: assertEquals("doExecute", events.get(i++), "Era esperado valores iguais, mas  'doExecute' é diferente de " + result4300 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#afterStep(COMPLETED)", events.get(i++))
nova chamada: assertEquals("listener2#afterStep(COMPLETED)", events.get(i++), "Era esperado valores iguais, mas  'listener2#afterStep(COMPLETED)' é diferente de " + result4301 + " <events.get(i++)>")
chamada antiga: assertEquals("listener1#afterStep(COMPLETED)", events.get(i++))
nova chamada: assertEquals("listener1#afterStep(COMPLETED)", events.get(i++), "Era esperado valores iguais, mas  'listener1#afterStep(COMPLETED)' é diferente de " + result4302 + " <events.get(i++)>")
chamada antiga: assertEquals("close", events.get(i++))
nova chamada: assertEquals("close", events.get(i++), "Era esperado valores iguais, mas  'close' é diferente de " + result4303 + " <events.get(i++)>")
chamada antiga: assertEquals(7, events.size())
nova chamada: assertEquals(7, events.size(), "Era esperado valores iguais, mas  7 é diferente de " + result4304 + " <events.size()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4305 + " <execution.getExitStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4306 + " <execution.getStatus()>")
chamada antiga: assertEquals("crash!", expected.getMessage())
nova chamada: assertEquals("crash!", expected.getMessage(), "Era esperado valores iguais, mas  'crash!' é diferente de " + result4307 + " <expected.getMessage()>")
chamada antiga: assertEquals("listener1#beforeStep", events.get(i++))
nova chamada: assertEquals("listener1#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener1#beforeStep' é diferente de " + result4308 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#beforeStep", events.get(i++))
nova chamada: assertEquals("listener2#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener2#beforeStep' é diferente de " + result4309 + " <events.get(i++)>")
chamada antiga: assertEquals("open", events.get(i++))
nova chamada: assertEquals("open", events.get(i++), "Era esperado valores iguais, mas  'open' é diferente de " + result4310 + " <events.get(i++)>")
chamada antiga: assertEquals("doExecute", events.get(i++))
nova chamada: assertEquals("doExecute", events.get(i++), "Era esperado valores iguais, mas  'doExecute' é diferente de " + result4311 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#afterStep(FAILED)", events.get(i++))
nova chamada: assertEquals("listener2#afterStep(FAILED)", events.get(i++), "Era esperado valores iguais, mas  'listener2#afterStep(FAILED)' é diferente de " + result4312 + " <events.get(i++)>")
chamada antiga: assertEquals("listener1#afterStep(FAILED)", events.get(i++))
nova chamada: assertEquals("listener1#afterStep(FAILED)", events.get(i++), "Era esperado valores iguais, mas  'listener1#afterStep(FAILED)' é diferente de " + result4313 + " <events.get(i++)>")
chamada antiga: assertEquals("close", events.get(i++))
nova chamada: assertEquals("close", events.get(i++), "Era esperado valores iguais, mas  'close' é diferente de " + result4314 + " <events.get(i++)>")
chamada antiga: assertEquals(7, events.size())
nova chamada: assertEquals(7, events.size(), "Era esperado valores iguais, mas  7 é diferente de " + result4315 + " <events.size()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas " + result4316 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result4317 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4318 + " <execution.getStatus()>")
chamada antiga: assertEquals("JobExecution interrupted.", expected.getMessage())
nova chamada: assertEquals("JobExecution interrupted.", expected.getMessage(), "Era esperado valores iguais, mas  'JobExecution interrupted.' é diferente de " + result4319 + " <expected.getMessage()>")
chamada antiga: assertEquals("listener1#beforeStep", events.get(i++))
nova chamada: assertEquals("listener1#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener1#beforeStep' é diferente de " + result4320 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#beforeStep", events.get(i++))
nova chamada: assertEquals("listener2#beforeStep", events.get(i++), "Era esperado valores iguais, mas  'listener2#beforeStep' é diferente de " + result4321 + " <events.get(i++)>")
chamada antiga: assertEquals("open", events.get(i++))
nova chamada: assertEquals("open", events.get(i++), "Era esperado valores iguais, mas  'open' é diferente de " + result4322 + " <events.get(i++)>")
chamada antiga: assertEquals("doExecute", events.get(i++))
nova chamada: assertEquals("doExecute", events.get(i++), "Era esperado valores iguais, mas  'doExecute' é diferente de " + result4323 + " <events.get(i++)>")
chamada antiga: assertEquals("listener2#afterStep(STOPPED)", events.get(i++))
nova chamada: assertEquals("listener2#afterStep(STOPPED)", events.get(i++), "Era esperado valores iguais, mas  'listener2#afterStep(STOPPED)' é diferente de " + result4324 + " <events.get(i++)>")
chamada antiga: assertEquals("listener1#afterStep(STOPPED)", events.get(i++))
nova chamada: assertEquals("listener1#afterStep(STOPPED)", events.get(i++), "Era esperado valores iguais, mas  'listener1#afterStep(STOPPED)' é diferente de " + result4325 + " <events.get(i++)>")
chamada antiga: assertEquals("close", events.get(i++))
nova chamada: assertEquals("close", events.get(i++), "Era esperado valores iguais, mas  'close' é diferente de " + result4326 + " <events.get(i++)>")
chamada antiga: assertEquals(7, events.size())
nova chamada: assertEquals(7, events.size(), "Era esperado valores iguais, mas  7 é diferente de " + result4327 + " <events.size()>")
chamada antiga: assertEquals("STOPPED", execution.getExitStatus().getExitCode())
nova chamada: assertEquals("STOPPED", execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'STOPPED' é diferente de " + result4328 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4329 + " <execution.getStatus()>")
chamada antiga: assertEquals("JobExecution interrupted.", expected.getMessage())
nova chamada: assertEquals("JobExecution interrupted.", expected.getMessage(), "Era esperado valores iguais, mas  'JobExecution interrupted.' é diferente de " + result4330 + " <expected.getMessage()>")
chamada antiga: assertEquals("FUNNY", execution.getExitStatus().getExitCode())
nova chamada: assertEquals("FUNNY", execution.getExitStatus().getExitCode(), "Era esperado valores iguais, mas  'FUNNY' é diferente de " + result4331 + " <execution.getExitStatus().getExitCode()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, execution.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4332 + " <execution.getStatus()>")
chamada antiga: assertEquals("Bad context!", expected.getMessage())
nova chamada: assertEquals("Bad context!", expected.getMessage(), "Era esperado valores iguais, mas  'Bad context!' é diferente de " + result4333 + " <expected.getMessage()>")
chamada antiga: assertEquals("open", events.get(i++))
nova chamada: assertEquals("open", events.get(i++), "Era esperado valores iguais, mas  'open' é diferente de " + result4334 + " <events.get(i++)>")
chamada antiga: assertEquals("doExecute", events.get(i++))
nova chamada: assertEquals("doExecute", events.get(i++), "Era esperado valores iguais, mas  'doExecute' é diferente de " + result4335 + " <events.get(i++)>")
chamada antiga: assertEquals("close", events.get(i++))
nova chamada: assertEquals("close", events.get(i++), "Era esperado valores iguais, mas  'close' é diferente de " + result4336 + " <events.get(i++)>")
chamada antiga: assertEquals(3, events.size())
nova chamada: assertEquals(3, events.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4337 + " <events.size()>")
chamada antiga: assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus())
nova chamada: assertEquals(ExitStatus.UNKNOWN, execution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.UNKNOWN é diferente de " + result4338 + " <execution.getExitStatus()>")
chamada antiga: assertEquals("foo", exception.getMessage())
nova chamada: assertEquals("foo", exception.getMessage(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4339 + " <exception.getMessage()>")
chamada antiga: assertEquals(ExitStatus.FAILED.getExitCode(), exitStatus.getExitCode())
nova chamada: assertEquals(ExitStatus.FAILED.getExitCode(), exitStatus.getExitCode(), "Era esperado valores iguais, mas " + result4340 + " <ExitStatus.FAILED.getExitCode()> é diferente de " + result4341 + " <exitStatus.getExitCode()>")
chamada antiga: assertNull(exitStatus)
nova chamada: assertNull(exitStatus, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution1.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution1.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4342 + " <jobExecution1.getStatus()>")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution2.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4343 + " <jobExecution2.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4344 + " <execution.getStatus()>")
chamada antiga: assertFalse(failurePolicy.shouldSkip(new FileNotFoundException(), 2))
nova chamada: assertFalse(failurePolicy.shouldSkip(new FileNotFoundException(), 2), "Era esperado falso, mas " + result4345 + " <failurePolicy.shouldSkip(new FileNotFoundException(), 2)> é verdadeiro ")
chamada antiga: assertTrue(failurePolicy.shouldSkip(new FlatFileParseException("", ""), 0))
nova chamada: assertTrue(failurePolicy.shouldSkip(new FlatFileParseException("", ""), 0), "Era esperado verdadeiro, mas " + result4346 + " <failurePolicy.shouldSkip(new FlatFileParseException('', ''), 0)> é falso")
chamada antiga: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
nova chamada: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0), "Era esperado falso, mas " + result4347 + " <getSkippableSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0)> é verdadeiro ")
chamada antiga: assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
nova chamada: assertTrue(getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0), "Era esperado verdadeiro, mas " + result4348 + " <getSkippableSubsetSkipPolicy().shouldSkip(new WriteFailedException(''), 0)> é falso")
chamada antiga: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
nova chamada: assertFalse(getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0), "Era esperado falso, mas " + result4349 + " <getSkippableSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(''), 0)> é verdadeiro ")
chamada antiga: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0))
nova chamada: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0), "Era esperado falso, mas " + result4350 + " <getFatalSubsetSkipPolicy().shouldSkip(new RuntimeException(), 0)> é verdadeiro ")
chamada antiga: assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0))
nova chamada: assertTrue(getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(""), 0), "Era esperado verdadeiro, mas " + result4351 + " <getFatalSubsetSkipPolicy().shouldSkip(new WriterNotOpenException(''), 0)> é falso")
chamada antiga: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0))
nova chamada: assertFalse(getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(""), 0), "Era esperado falso, mas " + result4352 + " <getFatalSubsetSkipPolicy().shouldSkip(new WriteFailedException(''), 0)> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4353 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4354 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount)
nova chamada: assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedStepExecutionListener.beforeStepCount")
chamada antiga: assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount)
nova chamada: assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedStepExecutionListener.afterStepCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.beforeStepCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.afterStepCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.beforeChunkCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.beforeChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.beforeChunkCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.afterChunkCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.afterChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4355 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.beforeChunkCount")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4356 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.beforeChunkCount")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4357 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.beforeChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.beforeChunkCount")
chamada antiga: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount)
nova chamada: assertEquals(1, AnnotationBasedChunkListener.afterChunkCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedChunkListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4358 + " <execution.getStatus()>")
chamada antiga: assertEquals(0, AnnotationBasedChunkListener.beforeChunkCount)
nova chamada: assertEquals(0, AnnotationBasedChunkListener.beforeChunkCount, "Era esperado valores iguais, mas  0 é diferente de " + " AnnotationBasedChunkListener.beforeChunkCount")
chamada antiga: assertEquals(0, AnnotationBasedChunkListener.afterChunkCount)
nova chamada: assertEquals(0, AnnotationBasedChunkListener.afterChunkCount, "Era esperado valores iguais, mas  0 é diferente de " + " AnnotationBasedChunkListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4359 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.beforeStepCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.afterStepCount")
chamada antiga: assertEquals(4, AnnotationBasedStepExecutionListener.beforeReadCount)
nova chamada: assertEquals(4, AnnotationBasedStepExecutionListener.beforeReadCount, "Era esperado valores iguais, mas  4 é diferente de " + " AnnotationBasedStepExecutionListener.beforeReadCount")
chamada antiga: assertEquals(3, AnnotationBasedStepExecutionListener.afterReadCount)
nova chamada: assertEquals(3, AnnotationBasedStepExecutionListener.afterReadCount, "Era esperado valores iguais, mas  3 é diferente de " + " AnnotationBasedStepExecutionListener.afterReadCount")
chamada antiga: assertEquals(3, AnnotationBasedStepExecutionListener.beforeProcessCount)
nova chamada: assertEquals(3, AnnotationBasedStepExecutionListener.beforeProcessCount, "Era esperado valores iguais, mas  3 é diferente de " + " AnnotationBasedStepExecutionListener.beforeProcessCount")
chamada antiga: assertEquals(3, AnnotationBasedStepExecutionListener.afterProcessCount)
nova chamada: assertEquals(3, AnnotationBasedStepExecutionListener.afterProcessCount, "Era esperado valores iguais, mas  3 é diferente de " + " AnnotationBasedStepExecutionListener.afterProcessCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.beforeWriteCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.beforeWriteCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.beforeWriteCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.afterWriteCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.afterWriteCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.afterWriteCount")
chamada antiga: assertEquals(2, AnnotationBasedStepExecutionListener.beforeChunkCount)
nova chamada: assertEquals(2, AnnotationBasedStepExecutionListener.beforeChunkCount, "Era esperado valores iguais, mas  2 é diferente de " + " AnnotationBasedStepExecutionListener.beforeChunkCount")
chamada antiga: assertEquals(2, AnnotationBasedStepExecutionListener.afterChunkCount)
nova chamada: assertEquals(2, AnnotationBasedStepExecutionListener.afterChunkCount, "Era esperado valores iguais, mas  2 é diferente de " + " AnnotationBasedStepExecutionListener.afterChunkCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4360 + " <execution.getStatus()>")
chamada antiga: assertEquals("1", writtenItems.get(0))
nova chamada: assertEquals("1", writtenItems.get(0), "Era esperado valores iguais, mas  '1' é diferente de " + result4361 + " <writtenItems.get(0)>")
chamada antiga: assertEquals("2", writtenItems.get(1))
nova chamada: assertEquals("2", writtenItems.get(1), "Era esperado valores iguais, mas  '2' é diferente de " + result4362 + " <writtenItems.get(1)>")
chamada antiga: assertEquals("3", writtenItems.get(2))
nova chamada: assertEquals("3", writtenItems.get(2), "Era esperado valores iguais, mas  '3' é diferente de " + result4363 + " <writtenItems.get(2)>")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.beforeStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.beforeStepCount")
chamada antiga: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount)
nova chamada: assertEquals(1, AnnotationBasedStepExecutionListener.afterStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " AnnotationBasedStepExecutionListener.afterStepCount")
chamada antiga: assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount)
nova chamada: assertEquals(1, InterfaceBasedStepExecutionListener.beforeStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedStepExecutionListener.beforeStepCount")
chamada antiga: assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount)
nova chamada: assertEquals(1, InterfaceBasedStepExecutionListener.afterStepCount, "Era esperado valores iguais, mas  1 é diferente de " + " InterfaceBasedStepExecutionListener.afterStepCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4364 + " <execution.getStatus()>")
chamada antiga: assertEquals(4, InterfaceBasedItemReadListenerListener.beforeReadCount)
nova chamada: assertEquals(4, InterfaceBasedItemReadListenerListener.beforeReadCount, "Era esperado valores iguais, mas  4 é diferente de " + " InterfaceBasedItemReadListenerListener.beforeReadCount")
chamada antiga: assertEquals(3, InterfaceBasedItemReadListenerListener.afterReadCount)
nova chamada: assertEquals(3, InterfaceBasedItemReadListenerListener.afterReadCount, "Era esperado valores iguais, mas  3 é diferente de " + " InterfaceBasedItemReadListenerListener.afterReadCount")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4365 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, callChecker.beforeStepCalled)
nova chamada: assertEquals(1, callChecker.beforeStepCalled, "Era esperado valores iguais, mas  1 é diferente de " + " callChecker.beforeStepCalled")
chamada antiga: assertEquals(6, callChecker.beforeChunkCalled)
nova chamada: assertEquals(6, callChecker.beforeChunkCalled, "Era esperado valores iguais, mas  6 é diferente de " + " callChecker.beforeChunkCalled")
chamada antiga: assertEquals(2, callChecker.beforeWriteCalled)
nova chamada: assertEquals(2, callChecker.beforeWriteCalled, "Era esperado valores iguais, mas  2 é diferente de " + " callChecker.beforeWriteCalled")
chamada antiga: assertEquals(1, callChecker.skipInWriteCalled)
nova chamada: assertEquals(1, callChecker.skipInWriteCalled, "Era esperado valores iguais, mas  1 é diferente de " + " callChecker.skipInWriteCalled")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4366 + " <execution.getStatus()>")
chamada antiga: assertEquals(1, callChecker.beforeStepCalled)
nova chamada: assertEquals(1, callChecker.beforeStepCalled, "Era esperado valores iguais, mas  1 é diferente de " + " callChecker.beforeStepCalled")
chamada antiga: assertEquals(1, callChecker.beforeChunkCalled)
nova chamada: assertEquals(1, callChecker.beforeChunkCalled, "Era esperado valores iguais, mas  1 é diferente de " + " callChecker.beforeChunkCalled")
chamada antiga: assertEquals(1, callChecker.beforeWriteCalled)
nova chamada: assertEquals(1, callChecker.beforeWriteCalled, "Era esperado valores iguais, mas  1 é diferente de " + " callChecker.beforeWriteCalled")
chamada antiga: assertEquals(0, callChecker.skipInWriteCalled)
nova chamada: assertEquals(0, callChecker.skipInWriteCalled, "Era esperado valores iguais, mas  0 é diferente de " + " callChecker.skipInWriteCalled")
chamada antiga: assertEquals(builder, builder.faultTolerant())
nova chamada: assertEquals(builder, builder.faultTolerant(), "Era esperado valores iguais, mas  builder é diferente de " + result4367 + " <builder.faultTolerant()>")
chamada antiga: assertNotNull(step)
nova chamada: assertNotNull(step, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(key1, key2)
nova chamada: assertEquals(key1, key2, "Era esperado valores iguais, mas  key1 é diferente de " + " key2")
chamada antiga: assertEquals(32, key.length())
nova chamada: assertEquals(32, key.length(), "Era esperado valores iguais, mas  32 é diferente de " + result4368 + " <key.length()>")
chamada antiga: assertEquals(key1, key2)
nova chamada: assertEquals(key1, key2, "Era esperado valores iguais, mas  key1 é diferente de " + " key2")
chamada antiga: assertFalse(advice.invoked)
nova chamada: assertFalse(advice.invoked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertFalse(advice.invoked)
nova chamada: assertFalse(advice.invoked, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(advice.invoked)
nova chamada: assertTrue(advice.invoked, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNotNull(firstExecution.getLastUpdated())
nova chamada: assertNotNull(firstExecution.getLastUpdated(), "Era esperado não nulo, mas " + result4369 + " <firstExecution.getLastUpdated()> é nulo")
chamada antiga: assertEquals(job.getName(), firstExecution.getJobInstance().getJobName())
nova chamada: assertEquals(job.getName(), firstExecution.getJobInstance().getJobName(), "Era esperado valores iguais, mas " + result4370 + " <job.getName()> é diferente de " + result4371 + " <firstExecution.getJobInstance().getJobName()>")
chamada antiga: assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance())
nova chamada: assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance(), "Era esperado valores iguais, mas " + result4372 + " <firstExecution.getJobInstance()> é diferente de " + result4373 + " <secondExecution.getJobInstance()>")
chamada antiga: assertEquals(job.getName(), secondExecution.getJobInstance().getJobName())
nova chamada: assertEquals(job.getName(), secondExecution.getJobInstance().getJobName(), "Era esperado valores iguais, mas " + result4374 + " <job.getName()> é diferente de " + result4375 + " <secondExecution.getJobInstance().getJobName()>")
chamada antiga: assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance())
nova chamada: assertEquals(firstExecution.getJobInstance(), secondExecution.getJobInstance(), "Era esperado valores iguais, mas " + result4376 + " <firstExecution.getJobInstance()> é diferente de " + result4377 + " <secondExecution.getJobInstance()>")
chamada antiga: assertEquals(job.getName(), secondExecution.getJobInstance().getJobName())
nova chamada: assertEquals(job.getName(), secondExecution.getJobInstance().getJobName(), "Era esperado valores iguais, mas " + result4378 + " <job.getName()> é diferente de " + result4379 + " <secondExecution.getJobInstance().getJobName()>")
chamada antiga: assertEquals(1, jobRepository.getStepExecutionCount(firstJobExec.getJobInstance(), step.getName()))
nova chamada: assertEquals(1, jobRepository.getStepExecutionCount(firstJobExec.getJobInstance(), step.getName()), "Era esperado valores iguais, mas  1 é diferente de " + result4380 + " <jobRepository.getStepExecutionCount(firstJobExec.getJobInstance(), step.getName())>")
chamada antiga: assertEquals(firstStepExec, jobRepository.getLastStepExecution(firstJobExec.getJobInstance(), step.getName()))
nova chamada: assertEquals(firstStepExec, jobRepository.getLastStepExecution(firstJobExec.getJobInstance(), step.getName()), "Era esperado valores iguais, mas  firstStepExec é diferente de " + result4381 + " <jobRepository.getLastStepExecution(firstJobExec.getJobInstance(), step.getName())>")
chamada antiga: assertEquals(2, jobRepository.getStepExecutionCount(secondJobExec.getJobInstance(), step.getName()))
nova chamada: assertEquals(2, jobRepository.getStepExecutionCount(secondJobExec.getJobInstance(), step.getName()), "Era esperado valores iguais, mas  2 é diferente de " + result4382 + " <jobRepository.getStepExecutionCount(secondJobExec.getJobInstance(), step.getName())>")
chamada antiga: assertEquals(secondStepExec, jobRepository.getLastStepExecution(secondJobExec.getJobInstance(), step.getName()))
nova chamada: assertEquals(secondStepExec, jobRepository.getLastStepExecution(secondJobExec.getJobInstance(), step.getName()), "Era esperado valores iguais, mas  secondStepExec é diferente de " + result4383 + " <jobRepository.getLastStepExecution(secondJobExec.getJobInstance(), step.getName())>")
chamada antiga: assertEquals(stepExec, retrievedStepExec)
nova chamada: assertEquals(stepExec, retrievedStepExec, "Era esperado valores iguais, mas  stepExec é diferente de " + " retrievedStepExec")
chamada antiga: assertEquals(ctx, retrievedStepExec.getExecutionContext())
nova chamada: assertEquals(ctx, retrievedStepExec.getExecutionContext(), "Era esperado valores iguais, mas  ctx é diferente de " + result4384 + " <retrievedStepExec.getExecutionContext()>")
chamada antiga: assertEquals(jobExecution, jobRepository.getLastJobExecution(job.getName(), jobParameters))
nova chamada: assertEquals(jobExecution, jobRepository.getLastJobExecution(job.getName(), jobParameters), "Era esperado valores iguais, mas  jobExecution é diferente de " + result4385 + " <jobRepository.getLastJobExecution(job.getName(), jobParameters)>")
chamada antiga: assertEquals(stepExecution, jobExecution.getStepExecutions().iterator().next())
nova chamada: assertEquals(stepExecution, jobExecution.getStepExecutions().iterator().next(), "Era esperado valores iguais, mas  stepExecution é diferente de " + result4386 + " <jobExecution.getStepExecutions().iterator().next()>")
chamada antiga: assertNotNull(jobExecution1)
nova chamada: assertNotNull(jobExecution1, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobExecution2)
nova chamada: assertNotNull(jobExecution2, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(jobExecution.getLastUpdated())
nova chamada: assertNotNull(jobExecution.getLastUpdated(), "Era esperado não nulo, mas " + result4387 + " <jobExecution.getLastUpdated()> é nulo")
chamada antiga: assertNotNull(stepExecution.getLastUpdated())
nova chamada: assertNotNull(stepExecution.getLastUpdated(), "Era esperado não nulo, mas " + result4388 + " <stepExecution.getLastUpdated()> é nulo")
chamada antiga: assertTrue(lastUpdated.isAfter(before))
nova chamada: assertTrue(lastUpdated.isAfter(before), "Era esperado verdadeiro, mas " + result4389 + " <lastUpdated.isAfter(before)> é falso")
chamada antiga: assertNotNull(stepExecution.getLastUpdated())
nova chamada: assertNotNull(stepExecution.getLastUpdated(), "Era esperado não nulo, mas " + result4390 + " <stepExecution.getLastUpdated()> é nulo")
chamada antiga: assertTrue(lastUpdated.isAfter(before))
nova chamada: assertTrue(lastUpdated.isAfter(before), "Era esperado verdadeiro, mas " + result4391 + " <lastUpdated.isAfter(before)> é falso")
chamada antiga: assertTrue(stepExecution.isTerminateOnly())
nova chamada: assertTrue(stepExecution.isTerminateOnly(), "Era esperado verdadeiro, mas " + result4392 + " <stepExecution.isTerminateOnly()> é falso")
chamada antiga: assertFalse(jobRepository.isJobInstanceExists("foo", new JobParameters()))
nova chamada: assertFalse(jobRepository.isJobInstanceExists("foo", new JobParameters()), "Era esperado falso, mas " + result4393 + " <jobRepository.isJobInstanceExists('foo', new JobParameters())> é verdadeiro ")
chamada antiga: assertTrue(jobRepository.isJobInstanceExists("foo", new JobParameters()))
nova chamada: assertTrue(jobRepository.isJobInstanceExists("foo", new JobParameters()), "Era esperado verdadeiro, mas " + result4394 + " <jobRepository.isJobInstanceExists('foo', new JobParameters())> é falso")
chamada antiga: assertEquals(expectedResult, actualResult)
nova chamada: assertEquals(expectedResult, actualResult, "Era esperado valores iguais, mas  expectedResult é diferente de " + " actualResult")
chamada antiga: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.STOPPED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.STOPPED é diferente de " + result4395 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(this.jobInstance, jobInstance)
nova chamada: assertEquals(this.jobInstance, jobInstance, "Era esperado valores iguais, mas  this.jobInstance é diferente de " + " jobInstance")
chamada antiga: assertEquals(0, version)
nova chamada: assertEquals(0, version, "Era esperado valores iguais, mas  0 é diferente de " + " version")
chamada antiga: assertEquals(0, version)
nova chamada: assertEquals(0, version, "Era esperado valores iguais, mas  0 é diferente de " + " version")
chamada antiga: assertNull(jobInstance)
nova chamada: assertNull(jobInstance, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertNotNull(instance)
nova chamada: assertNotNull(instance, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(jobInstance, instance)
nova chamada: assertEquals(jobInstance, instance, "Era esperado valores iguais, mas  jobInstance é diferente de " + " instance")
chamada antiga: assertNotNull(instance)
nova chamada: assertNotNull(instance, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(instance)
nova chamada: assertNull(instance, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(executions.size(), 1)
nova chamada: assertEquals(executions.size(), 1, "Era esperado valores iguais, mas " + result4396 + " <executions.size()> é diferente de " + " 1")
chamada antiga: assertEquals(executions.size(), 1)
nova chamada: assertEquals(executions.size(), 1, "Era esperado valores iguais, mas " + result4397 + " <executions.size()> é diferente de " + " 1")
chamada antiga: assertEquals(1, jobs.size())
nova chamada: assertEquals(1, jobs.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4398 + " <jobs.size()>")
chamada antiga: assertEquals("test", jobs.get(0).get("JOB_NAME"))
nova chamada: assertEquals("test", jobs.get(0).get("JOB_NAME"), "Era esperado valores iguais, mas  'test' é diferente de " + result4399 + " <jobs.get(0).get('JOB_NAME')>")
chamada antiga: assertNotNull(instance)
nova chamada: assertNotNull(instance, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(results.size(), 1)
nova chamada: assertEquals(results.size(), 1, "Era esperado valores iguais, mas " + result4400 + " <results.size()> é diferente de " + " 1")
chamada antiga: assertEquals(lhs, rhs)
nova chamada: assertEquals(lhs, rhs, "Era esperado valores iguais, mas  lhs é diferente de " + " rhs")
chamada antiga: assertEquals(lhs.getStartTime(), rhs.getStartTime())
nova chamada: assertEquals(lhs.getStartTime(), rhs.getStartTime(), "Era esperado valores iguais, mas " + result4401 + " <lhs.getStartTime()> é diferente de " + result4402 + " <rhs.getStartTime()>")
chamada antiga: assertEquals(lhs.getEndTime(), rhs.getEndTime())
nova chamada: assertEquals(lhs.getEndTime(), rhs.getEndTime(), "Era esperado valores iguais, mas " + result4403 + " <lhs.getEndTime()> é diferente de " + result4404 + " <rhs.getEndTime()>")
chamada antiga: assertEquals(lhs.getStatus(), rhs.getStatus())
nova chamada: assertEquals(lhs.getStatus(), rhs.getStatus(), "Era esperado valores iguais, mas " + result4405 + " <lhs.getStatus()> é diferente de " + result4406 + " <rhs.getStatus()>")
chamada antiga: assertEquals(lhs.getExitStatus(), rhs.getExitStatus())
nova chamada: assertEquals(lhs.getExitStatus(), rhs.getExitStatus(), "Era esperado valores iguais, mas " + result4407 + " <lhs.getExitStatus()> é diferente de " + result4408 + " <rhs.getExitStatus()>")
chamada antiga: assertEquals(lastExecution, jobExecutionDao.getLastJobExecution(jobInstance))
nova chamada: assertEquals(lastExecution, jobExecutionDao.getLastJobExecution(jobInstance), "Era esperado valores iguais, mas  lastExecution é diferente de " + result4409 + " <jobExecutionDao.getLastJobExecution(jobInstance)>")
chamada antiga: assertNotNull(lastExecution.getJobParameters())
nova chamada: assertNotNull(lastExecution.getJobParameters(), "Era esperado não nulo, mas " + result4410 + " <lastExecution.getJobParameters()> é nulo")
chamada antiga: assertEquals("jobKey", lastExecution.getJobParameters().getString("job.key"))
nova chamada: assertEquals("jobKey", lastExecution.getJobParameters().getString("job.key"), "Era esperado valores iguais, mas  'jobKey' é diferente de " + result4411 + " <lastExecution.getJobParameters().getString('job.key')>")
chamada antiga: assertNotNull(jobInstance.getVersion())
nova chamada: assertNotNull(jobInstance.getVersion(), "Era esperado não nulo, mas " + result4412 + " <jobInstance.getVersion()> é nulo")
chamada antiga: assertNull(jobExecution.getId())
nova chamada: assertNull(jobExecution.getId(), "Era esperado nulo, mas " + result4413 + " <jobExecution.getId()> não é nulo")
chamada antiga: assertNull(jobExecution.getVersion())
nova chamada: assertNull(jobExecution.getVersion(), "Era esperado nulo, mas " + result4414 + " <jobExecution.getVersion()> não é nulo")
chamada antiga: assertNotNull(jobExecution.getId())
nova chamada: assertNotNull(jobExecution.getId(), "Era esperado não nulo, mas " + result4415 + " <jobExecution.getId()> é nulo")
chamada antiga: assertNotNull(jobExecution.getVersion())
nova chamada: assertNotNull(jobExecution.getVersion(), "Era esperado não nulo, mas " + result4416 + " <jobExecution.getVersion()> é nulo")
chamada antiga: assertEquals(version + 1, jobExecution.getVersion().intValue())
nova chamada: assertEquals(version + 1, jobExecution.getVersion().intValue(), "Era esperado valores iguais, mas  version + 1 é diferente de " + result4417 + " <jobExecution.getVersion().intValue()>")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(7, retrieved.getLong("longKey"))
nova chamada: assertEquals(7, retrieved.getLong("longKey"), "Era esperado valores iguais, mas  7 é diferente de " + result4418 + " <retrieved.getLong('longKey')>")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(ctx, retrieved)
nova chamada: assertEquals(ctx, retrieved, "Era esperado valores iguais, mas  ctx é diferente de " + " retrieved")
chamada antiga: assertEquals(7, retrieved.getLong("longKey"))
nova chamada: assertEquals(7, retrieved.getLong("longKey"), "Era esperado valores iguais, mas  7 é diferente de " + result4419 + " <retrieved.getLong('longKey')>")
chamada antiga: assertEquals(ec, restoredEc)
nova chamada: assertEquals(ec, restoredEc, "Era esperado valores iguais, mas  ec é diferente de " + " restoredEc")
chamada antiga: assertEquals(new ExecutionContext(), restoredEc)
nova chamada: assertEquals(new ExecutionContext(), restoredEc, "Era esperado valores iguais, mas  new ExecutionContext() é diferente de " + " restoredEc")
chamada antiga: assertEquals(new ExecutionContext(), restoredEc)
nova chamada: assertEquals(new ExecutionContext(), restoredEc, "Era esperado valores iguais, mas  new ExecutionContext() é diferente de " + " restoredEc")
chamada antiga: assertEquals(jobInstance, returnedInstance)
nova chamada: assertEquals(jobInstance, returnedInstance, "Era esperado valores iguais, mas  jobInstance é diferente de " + " returnedInstance")
chamada antiga: assertEquals(value, output.toString())
nova chamada: assertEquals(value, output.toString(), "Era esperado valores iguais, mas  value é diferente de " + result4420 + " <output.toString()>")
chamada antiga: assertEquals(2, jobInstances.size())
nova chamada: assertEquals(2, jobInstances.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4421 + " <jobInstances.size()>")
chamada antiga: assertTrue(jobInstances.isEmpty())
nova chamada: assertTrue(jobInstances.isEmpty(), "Era esperado verdadeiro, mas " + result4422 + " <jobInstances.isEmpty()> é falso")
chamada antiga: Assertions.assertNull(dao.getJobInstance(jobInstance.getId()))
nova chamada: assertNull(dao.getJobInstance(jobInstance.getId()), "Era esperado nulo, mas " + result4423 + " <dao.getJobInstance(jobInstance.getId())> não é nulo")
chamada antiga: assertEquals(1, result)
nova chamada: assertEquals(1, result, "Era esperado valores iguais, mas  1 é diferente de " + " result")
chamada antiga: assertNull(dao.getStepExecution(jobExecution, stepExecution.getId()))
nova chamada: assertNull(dao.getStepExecution(jobExecution, stepExecution.getId()), "Era esperado nulo, mas " + result4424 + " <dao.getStepExecution(jobExecution, stepExecution.getId())> não é nulo")
chamada antiga: assertDoesNotThrow(() -> j.deserialize(in))
nova chamada: assertDoesNotThrow(() -> j.deserialize(in), "Era esperado que nenhuma exceção fosse lançada, mas  () - j.deserialize(in) foi lançada")
chamada antiga: assertNotNull(locale)
nova chamada: assertNotNull(locale, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(List.class.isAssignableFrom(deserializedValue.getClass()))
nova chamada: assertTrue(List.class.isAssignableFrom(deserializedValue.getClass()), "Era esperado verdadeiro, mas " + result4425 + " <List.class.isAssignableFrom(deserializedValue.getClass())> é falso")
chamada antiga: assertTrue(((List<String>) deserializedValue).containsAll(list))
nova chamada: assertTrue(((List<String>) deserializedValue).containsAll(list), "Era esperado verdadeiro, mas " + result4426 + " <((List<String>) deserializedValue).containsAll(list)> é falso")
chamada antiga: assertEquals(timestamp, deserializedTimestamp)
nova chamada: assertEquals(timestamp, deserializedTimestamp, "Era esperado valores iguais, mas  timestamp é diferente de " + " deserializedTimestamp")
chamada antiga: assertNotNull(fooInstance.getId())
nova chamada: assertNotNull(fooInstance.getId(), "Era esperado não nulo, mas " + result4427 + " <fooInstance.getId()> é nulo")
chamada antiga: assertEquals(fooJob, fooInstance.getJobName())
nova chamada: assertEquals(fooJob, fooInstance.getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4428 + " <fooInstance.getJobName()>")
chamada antiga: assertEquals(fooInstance, retrievedInstance)
nova chamada: assertEquals(fooInstance, retrievedInstance, "Era esperado valores iguais, mas  fooInstance é diferente de " + " retrievedInstance")
chamada antiga: assertEquals(fooJob, retrievedInstance.getJobName())
nova chamada: assertEquals(fooJob, retrievedInstance.getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4429 + " <retrievedInstance.getJobName()>")
chamada antiga: assertNotNull(fooInstance.getId())
nova chamada: assertNotNull(fooInstance.getId(), "Era esperado não nulo, mas " + result4430 + " <fooInstance.getId()> é nulo")
chamada antiga: assertEquals(fooJob, fooInstance.getJobName())
nova chamada: assertEquals(fooJob, fooInstance.getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4431 + " <fooInstance.getJobName()>")
chamada antiga: assertEquals(fooInstance, retrievedInstance)
nova chamada: assertEquals(fooInstance, retrievedInstance, "Era esperado valores iguais, mas  fooInstance é diferente de " + " retrievedInstance")
chamada antiga: assertEquals(fooJob, retrievedInstance.getJobName())
nova chamada: assertEquals(fooJob, retrievedInstance.getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4432 + " <retrievedInstance.getJobName()>")
chamada antiga: assertNull(retrievedInstance)
nova chamada: assertNull(retrievedInstance, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertFalse(jobNames.isEmpty())
nova chamada: assertFalse(jobNames.isEmpty(), "Era esperado falso, mas " + result4433 + " <jobNames.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(jobNames.contains(fooJob))
nova chamada: assertTrue(jobNames.contains(fooJob), "Era esperado verdadeiro, mas " + result4434 + " <jobNames.contains(fooJob)> é falso")
chamada antiga: assertEquals(2, jobInstances.size())
nova chamada: assertEquals(2, jobInstances.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4435 + " <jobInstances.size()>")
chamada antiga: assertEquals(fooJob, jobInstances.get(0).getJobName())
nova chamada: assertEquals(fooJob, jobInstances.get(0).getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4436 + " <jobInstances.get(0).getJobName()>")
chamada antiga: assertEquals(fooJob, jobInstances.get(1).getJobName())
nova chamada: assertEquals(fooJob, jobInstances.get(1).getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4437 + " <jobInstances.get(1).getJobName()>")
chamada antiga: assertEquals(Integer.valueOf(0), jobInstances.get(0).getVersion())
nova chamada: assertEquals(Integer.valueOf(0), jobInstances.get(0).getVersion(), "Era esperado valores iguais, mas " + result4438 + " <Integer.valueOf(0)> é diferente de " + result4439 + " <jobInstances.get(0).getVersion()>")
chamada antiga: assertEquals(Integer.valueOf(0), jobInstances.get(1).getVersion())
nova chamada: assertEquals(Integer.valueOf(0), jobInstances.get(1).getVersion(), "Era esperado valores iguais, mas " + result4440 + " <Integer.valueOf(0)> é diferente de " + result4441 + " <jobInstances.get(1).getVersion()>")
chamada antiga: assertEquals(2, jobInstances.size())
nova chamada: assertEquals(2, jobInstances.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4442 + " <jobInstances.size()>")
chamada antiga: assertNotNull(lastJobInstance)
nova chamada: assertNotNull(lastJobInstance, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(fooJob, lastJobInstance.getJobName())
nova chamada: assertEquals(fooJob, lastJobInstance.getJobName(), "Era esperado valores iguais, mas  fooJob é diferente de " + result4443 + " <lastJobInstance.getJobName()>")
chamada antiga: assertNull(lastJobInstance)
nova chamada: assertNull(lastJobInstance, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(queryCount, jobInstances.size())
nova chamada: assertEquals(queryCount, jobInstances.size(), "Era esperado valores iguais, mas  queryCount é diferente de " + result4444 + " <jobInstances.size()>")
chamada antiga: assertEquals(0, jobInstances.size())
nova chamada: assertEquals(0, jobInstances.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4445 + " <jobInstances.size()>")
chamada antiga: assertNull(jobInstance.getVersion())
nova chamada: assertNull(jobInstance.getVersion(), "Era esperado nulo, mas " + result4446 + " <jobInstance.getVersion()> não é nulo")
chamada antiga: assertNotNull(jobInstance.getVersion())
nova chamada: assertNotNull(jobInstance.getVersion(), "Era esperado não nulo, mas " + result4447 + " <jobInstance.getVersion()> é nulo")
chamada antiga: assertEquals(1, executions.size())
nova chamada: assertEquals(1, executions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4448 + " <executions.size()>")
chamada antiga: assertEquals(execution, executions.get(0))
nova chamada: assertEquals(execution, executions.get(0), "Era esperado valores iguais, mas  execution é diferente de " + result4449 + " <executions.get(0)>")
chamada antiga: assertEquals(0, executions.size())
nova chamada: assertEquals(0, executions.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4450 + " <executions.size()>")
chamada antiga: assertNull(execution.getId())
nova chamada: assertNull(execution.getId(), "Era esperado nulo, mas " + result4451 + " <execution.getId()> não é nulo")
chamada antiga: assertNull(execution.getVersion())
nova chamada: assertNull(execution.getVersion(), "Era esperado nulo, mas " + result4452 + " <execution.getVersion()> não é nulo")
chamada antiga: assertNotNull(execution.getId())
nova chamada: assertNotNull(execution.getId(), "Era esperado não nulo, mas " + result4453 + " <execution.getId()> é nulo")
chamada antiga: assertNotNull(execution.getVersion())
nova chamada: assertNotNull(execution.getVersion(), "Era esperado não nulo, mas " + result4454 + " <execution.getVersion()> é nulo")
chamada antiga: assertEquals(execution, updated)
nova chamada: assertEquals(execution, updated, "Era esperado valores iguais, mas  execution é diferente de " + " updated")
chamada antiga: assertEquals(BatchStatus.COMPLETED, updated.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, updated.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4455 + " <updated.getStatus()>")
chamada antiga: assertEquals(exec2, last)
nova chamada: assertEquals(exec2, last, "Era esperado valores iguais, mas  exec2 é diferente de " + " last")
chamada antiga: assertNull(value)
nova chamada: assertNull(value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals(3, values.size())
nova chamada: assertEquals(3, values.size(), "Era esperado valores iguais, mas  3 é diferente de " + result4456 + " <values.size()>")
chamada antiga: assertEquals(now.plus(3, ChronoUnit.SECONDS), value.getLastUpdated())
nova chamada: assertEquals(now.plus(3, ChronoUnit.SECONDS), value.getLastUpdated(), "Era esperado valores iguais, mas " + result4457 + " <now.plus(3, ChronoUnit.SECONDS)> é diferente de " + result4458 + " <value.getLastUpdated()>")
chamada antiga: assertEquals(0, values.size())
nova chamada: assertEquals(0, values.size(), "Era esperado valores iguais, mas  0 é diferente de " + result4459 + " <values.size()>")
chamada antiga: assertEquals(exec, value)
nova chamada: assertEquals(exec, value, "Era esperado valores iguais, mas  exec é diferente de " + " value")
chamada antiga: assertNull(value)
nova chamada: assertNull(value, "Era esperado nulo, mas o valor obtido não é nulo")
chamada antiga: assertEquals((Integer) 0, exec1.getVersion())
nova chamada: assertEquals((Integer) 0, exec1.getVersion(), "Era esperado valores iguais, mas  (Integer) 0 é diferente de " + result4460 + " <exec1.getVersion()>")
chamada antiga: assertEquals(exec1.getVersion(), exec2.getVersion())
nova chamada: assertEquals(exec1.getVersion(), exec2.getVersion(), "Era esperado valores iguais, mas " + result4461 + " <exec1.getVersion()> é diferente de " + result4462 + " <exec2.getVersion()>")
chamada antiga: assertEquals((Integer) 1, exec1.getVersion())
nova chamada: assertEquals((Integer) 1, exec1.getVersion(), "Era esperado valores iguais, mas  (Integer) 1 é diferente de " + result4463 + " <exec1.getVersion()>")
chamada antiga: assertTrue(exec1.getId() != null)
nova chamada: assertTrue(exec1.getId() != null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exec1.getVersion() != exec2.getVersion())
nova chamada: assertTrue(exec1.getVersion() != exec2.getVersion(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exec1.getStatus() != exec2.getStatus())
nova chamada: assertTrue(exec1.getStatus() != exec2.getStatus(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(exec1.getVersion(), exec2.getVersion())
nova chamada: assertEquals(exec1.getVersion(), exec2.getVersion(), "Era esperado valores iguais, mas " + result4464 + " <exec1.getVersion()> é diferente de " + result4465 + " <exec2.getVersion()>")
chamada antiga: assertEquals(exec1.getStatus(), exec2.getStatus())
nova chamada: assertEquals(exec1.getStatus(), exec2.getStatus(), "Era esperado valores iguais, mas " + result4466 + " <exec1.getStatus()> é diferente de " + result4467 + " <exec2.getStatus()>")
chamada antiga: assertTrue(exec1.getId() != null)
nova chamada: assertTrue(exec1.getId() != null, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exec1.getVersion() != exec2.getVersion())
nova chamada: assertTrue(exec1.getVersion() != exec2.getVersion(), "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(exec1.getStatus().isLessThan(exec2.getStatus()))
nova chamada: assertTrue(exec1.getStatus().isLessThan(exec2.getStatus()), "Era esperado verdadeiro, mas " + result4468 + " <exec1.getStatus().isLessThan(exec2.getStatus())> é falso")
chamada antiga: assertEquals(exec1.getVersion(), exec2.getVersion())
nova chamada: assertEquals(exec1.getVersion(), exec2.getVersion(), "Era esperado valores iguais, mas " + result4469 + " <exec1.getVersion()> é diferente de " + result4470 + " <exec2.getVersion()>")
chamada antiga: assertEquals(BatchStatus.UNKNOWN, exec2.getStatus())
nova chamada: assertEquals(BatchStatus.UNKNOWN, exec2.getStatus(), "Era esperado valores iguais, mas  BatchStatus.UNKNOWN é diferente de " + result4471 + " <exec2.getStatus()>")
chamada antiga: assertEquals(lhs.getId(), rhs.getId())
nova chamada: assertEquals(lhs.getId(), rhs.getId(), "Era esperado valores iguais, mas " + result4472 + " <lhs.getId()> é diferente de " + result4473 + " <rhs.getId()>")
chamada antiga: assertEquals(lhs.getStartTime(), rhs.getStartTime())
nova chamada: assertEquals(lhs.getStartTime(), rhs.getStartTime(), "Era esperado valores iguais, mas " + result4474 + " <lhs.getStartTime()> é diferente de " + result4475 + " <rhs.getStartTime()>")
chamada antiga: assertEquals(lhs.getStatus(), rhs.getStatus())
nova chamada: assertEquals(lhs.getStatus(), rhs.getStatus(), "Era esperado valores iguais, mas " + result4476 + " <lhs.getStatus()> é diferente de " + result4477 + " <rhs.getStatus()>")
chamada antiga: assertEquals(lhs.getEndTime(), rhs.getEndTime())
nova chamada: assertEquals(lhs.getEndTime(), rhs.getEndTime(), "Era esperado valores iguais, mas " + result4478 + " <lhs.getEndTime()> é diferente de " + result4479 + " <rhs.getEndTime()>")
chamada antiga: assertEquals(lhs.getCreateTime(), rhs.getCreateTime())
nova chamada: assertEquals(lhs.getCreateTime(), rhs.getCreateTime(), "Era esperado valores iguais, mas " + result4480 + " <lhs.getCreateTime()> é diferente de " + result4481 + " <rhs.getCreateTime()>")
chamada antiga: assertEquals(lhs.getLastUpdated(), rhs.getLastUpdated())
nova chamada: assertEquals(lhs.getLastUpdated(), rhs.getLastUpdated(), "Era esperado valores iguais, mas " + result4482 + " <lhs.getLastUpdated()> é diferente de " + result4483 + " <rhs.getLastUpdated()>")
chamada antiga: assertEquals(lhs.getVersion(), rhs.getVersion())
nova chamada: assertEquals(lhs.getVersion(), rhs.getVersion(), "Era esperado valores iguais, mas " + result4484 + " <lhs.getVersion()> é diferente de " + result4485 + " <rhs.getVersion()>")
chamada antiga: Assertions.assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION_PARAMS"))
nova chamada: assertEquals(0, JdbcTestUtils.countRowsInTable(jdbcTemplate, "BATCH_JOB_EXECUTION_PARAMS"), "Era esperado valores iguais, mas  0 é diferente de " + result4486 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'BATCH_JOB_EXECUTION_PARAMS')>")
chamada antiga: Assertions.assertEquals(dateParameter, parameters.getDate("date"))
nova chamada: assertEquals(dateParameter, parameters.getDate("date"), "Era esperado valores iguais, mas  dateParameter é diferente de " + result4487 + " <parameters.getDate('date')>")
chamada antiga: Assertions.assertEquals(localDateParameter, parameters.getLocalDate("localDate"))
nova chamada: assertEquals(localDateParameter, parameters.getLocalDate("localDate"), "Era esperado valores iguais, mas  localDateParameter é diferente de " + result4488 + " <parameters.getLocalDate('localDate')>")
chamada antiga: Assertions.assertEquals(localTimeParameter, parameters.getLocalTime("localTime"))
nova chamada: assertEquals(localTimeParameter, parameters.getLocalTime("localTime"), "Era esperado valores iguais, mas  localTimeParameter é diferente de " + result4489 + " <parameters.getLocalTime('localTime')>")
chamada antiga: Assertions.assertEquals(localDateTimeParameter, parameters.getLocalDateTime("localDateTime"))
nova chamada: assertEquals(localDateTimeParameter, parameters.getLocalDateTime("localDateTime"), "Era esperado valores iguais, mas  localDateTimeParameter é diferente de " + result4490 + " <parameters.getLocalDateTime('localDateTime')>")
chamada antiga: Assertions.assertEquals(stringParameter, parameters.getString("string"))
nova chamada: assertEquals(stringParameter, parameters.getString("string"), "Era esperado valores iguais, mas  stringParameter é diferente de " + result4491 + " <parameters.getString('string')>")
chamada antiga: Assertions.assertEquals(longParameter, parameters.getLong("long"))
nova chamada: assertEquals(longParameter, parameters.getLong("long"), "Era esperado valores iguais, mas  longParameter é diferente de " + result4492 + " <parameters.getLong('long')>")
chamada antiga: Assertions.assertEquals(doubleParameter, parameters.getDouble("double"))
nova chamada: assertEquals(doubleParameter, parameters.getDouble("double"), "Era esperado valores iguais, mas  doubleParameter é diferente de " + result4493 + " <parameters.getDouble('double')>")
chamada antiga: assertEquals("Foo", e.getMessage())
nova chamada: assertEquals("Foo", e.getMessage(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4494 + " <e.getMessage()>")
chamada antiga: assertEquals(hour, calendar.get(Calendar.HOUR_OF_DAY))
nova chamada: assertEquals(hour, calendar.get(Calendar.HOUR_OF_DAY), "Era esperado valores iguais, mas  hour é diferente de " + result4495 + " <calendar.get(Calendar.HOUR_OF_DAY)>")
chamada antiga: assertEquals(output, format.format(date))
nova chamada: assertEquals(output, format.format(date), "Era esperado valores iguais, mas  output é diferente de " + result4496 + " <format.format(date)>")
chamada antiga: assertEquals("Serializer must not be null", exception.getMessage())
nova chamada: assertEquals("Serializer must not be null", exception.getMessage(), "Era esperado valores iguais, mas  'Serializer must not be null' é diferente de " + result4497 + " <exception.getMessage()>")
chamada antiga: assertTrue(LONG_STRING.length() > 250)
nova chamada: assertTrue(LONG_STRING.length() > 250, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, executions.size())
nova chamada: assertEquals(1, executions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4498 + " <executions.size()>")
chamada antiga: assertEquals(LONG_STRING.substring(0, 250), executions.get(0).get("EXIT_MESSAGE"))
nova chamada: assertEquals(LONG_STRING.substring(0, 250), executions.get(0).get("EXIT_MESSAGE"), "Era esperado valores iguais, mas " + result4499 + " <LONG_STRING.substring(0, 250)> é diferente de " + result4500 + " <executions.get(0).get('EXIT_MESSAGE')>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4501 + " <list.size()>")
chamada antiga: Assertions.assertNull(dao.getJobExecution(execution.getId()))
nova chamada: assertNull(dao.getJobExecution(execution.getId()), "Era esperado nulo, mas " + result4502 + " <dao.getJobExecution(execution.getId())> não é nulo")
chamada antiga: Assertions.assertNotNull(parameters)
nova chamada: assertNotNull(parameters, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNull(stepExecution.getId())
nova chamada: assertNull(stepExecution.getId(), "Era esperado nulo, mas " + result4503 + " <stepExecution.getId()> não é nulo")
chamada antiga: assertNull(stepExecution.getVersion())
nova chamada: assertNull(stepExecution.getVersion(), "Era esperado nulo, mas " + result4504 + " <stepExecution.getVersion()> não é nulo")
chamada antiga: assertNotNull(stepExecution.getId())
nova chamada: assertNotNull(stepExecution.getId(), "Era esperado não nulo, mas " + result4505 + " <stepExecution.getId()> é nulo")
chamada antiga: assertNotNull(stepExecution.getVersion())
nova chamada: assertNotNull(stepExecution.getVersion(), "Era esperado não nulo, mas " + result4506 + " <stepExecution.getVersion()> é nulo")
chamada antiga: assertNotNull(retrieved.getVersion())
nova chamada: assertNotNull(retrieved.getVersion(), "Era esperado não nulo, mas " + result4507 + " <retrieved.getVersion()> é nulo")
chamada antiga: assertNotNull(retrieved.getJobExecution())
nova chamada: assertNotNull(retrieved.getJobExecution(), "Era esperado não nulo, mas " + result4508 + " <retrieved.getJobExecution()> é nulo")
chamada antiga: assertNotNull(retrieved.getJobExecution().getId())
nova chamada: assertNotNull(retrieved.getJobExecution().getId(), "Era esperado não nulo, mas " + result4509 + " <retrieved.getJobExecution().getId()> é nulo")
chamada antiga: assertNotNull(retrieved.getJobExecution().getJobId())
nova chamada: assertNotNull(retrieved.getJobExecution().getJobId(), "Era esperado não nulo, mas " + result4510 + " <retrieved.getJobExecution().getJobId()> é nulo")
chamada antiga: assertNotNull(retrieved.getJobExecution().getJobInstance())
nova chamada: assertNotNull(retrieved.getJobExecution().getJobInstance(), "Era esperado não nulo, mas " + result4511 + " <retrieved.getJobExecution().getJobInstance()> é nulo")
chamada antiga: assertNotNull(lastStepExecution)
nova chamada: assertNotNull(lastStepExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(stepExecution2.getId(), lastStepExecution.getId())
nova chamada: assertEquals(stepExecution2.getId(), lastStepExecution.getId(), "Era esperado valores iguais, mas " + result4512 + " <stepExecution2.getId()> é diferente de " + result4513 + " <lastStepExecution.getId()>")
chamada antiga: assertNotNull(retrieved)
nova chamada: assertNotNull(retrieved, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(lastStepExecution.getId(), retrieved.getId())
nova chamada: assertEquals(lastStepExecution.getId(), retrieved.getId(), "Era esperado valores iguais, mas " + result4514 + " <lastStepExecution.getId()> é diferente de " + result4515 + " <retrieved.getId()>")
chamada antiga: assertNull(dao.getStepExecution(jobExecution, 45677L))
nova chamada: assertNull(dao.getStepExecution(jobExecution, 45677L), "Era esperado nulo, mas " + result4516 + " <dao.getStepExecution(jobExecution, 45677L)> não é nulo")
chamada antiga: assertNull(dao.getStepExecution(new JobExecution(jobInstance, (long) 777, new JobParameters()), 11L))
nova chamada: assertNull(dao.getStepExecution(new JobExecution(jobInstance, (long) 777, new JobParameters()), 11L), "Era esperado nulo, mas " + result4517 + " <dao.getStepExecution(new JobExecution(jobInstance, (long) 777, new JobParameters()), 11L)> não é nulo")
chamada antiga: assertEquals(versionAfterSave + 1, stepExecution.getVersion().intValue())
nova chamada: assertEquals(versionAfterSave + 1, stepExecution.getVersion().intValue(), "Era esperado valores iguais, mas  versionAfterSave + 1 é diferente de " + result4518 + " <stepExecution.getVersion().intValue()>")
chamada antiga: assertEquals(stepExecution, retrieved)
nova chamada: assertEquals(stepExecution, retrieved, "Era esperado valores iguais, mas  stepExecution é diferente de " + " retrieved")
chamada antiga: assertEquals(stepExecution.getLastUpdated(), retrieved.getLastUpdated())
nova chamada: assertEquals(stepExecution.getLastUpdated(), retrieved.getLastUpdated(), "Era esperado valores iguais, mas " + result4519 + " <stepExecution.getLastUpdated()> é diferente de " + result4520 + " <retrieved.getLastUpdated()>")
chamada antiga: assertEquals(BatchStatus.ABANDONED, retrieved.getStatus())
nova chamada: assertEquals(BatchStatus.ABANDONED, retrieved.getStatus(), "Era esperado valores iguais, mas  BatchStatus.ABANDONED é diferente de " + result4521 + " <retrieved.getStatus()>")
chamada antiga: assertEquals(Integer.valueOf(0), exec1.getVersion())
nova chamada: assertEquals(Integer.valueOf(0), exec1.getVersion(), "Era esperado valores iguais, mas " + result4522 + " <Integer.valueOf(0)> é diferente de " + result4523 + " <exec1.getVersion()>")
chamada antiga: assertEquals(exec1.getVersion(), exec2.getVersion())
nova chamada: assertEquals(exec1.getVersion(), exec2.getVersion(), "Era esperado valores iguais, mas " + result4524 + " <exec1.getVersion()> é diferente de " + result4525 + " <exec2.getVersion()>")
chamada antiga: assertEquals(Integer.valueOf(1), exec1.getVersion())
nova chamada: assertEquals(Integer.valueOf(1), exec1.getVersion(), "Era esperado valores iguais, mas " + result4526 + " <Integer.valueOf(1)> é diferente de " + result4527 + " <exec1.getVersion()>")
chamada antiga: assertEquals(expected.getId(), actual.getId())
nova chamada: assertEquals(expected.getId(), actual.getId(), "Era esperado valores iguais, mas " + result4528 + " <expected.getId()> é diferente de " + result4529 + " <actual.getId()>")
chamada antiga: assertEquals(expected.getStartTime(), actual.getStartTime())
nova chamada: assertEquals(expected.getStartTime(), actual.getStartTime(), "Era esperado valores iguais, mas " + result4530 + " <expected.getStartTime()> é diferente de " + result4531 + " <actual.getStartTime()>")
chamada antiga: assertEquals(expected.getEndTime(), actual.getEndTime())
nova chamada: assertEquals(expected.getEndTime(), actual.getEndTime(), "Era esperado valores iguais, mas " + result4532 + " <expected.getEndTime()> é diferente de " + result4533 + " <actual.getEndTime()>")
chamada antiga: assertEquals(expected.getSkipCount(), actual.getSkipCount())
nova chamada: assertEquals(expected.getSkipCount(), actual.getSkipCount(), "Era esperado valores iguais, mas " + result4534 + " <expected.getSkipCount()> é diferente de " + result4535 + " <actual.getSkipCount()>")
chamada antiga: assertEquals(expected.getCommitCount(), actual.getCommitCount())
nova chamada: assertEquals(expected.getCommitCount(), actual.getCommitCount(), "Era esperado valores iguais, mas " + result4536 + " <expected.getCommitCount()> é diferente de " + result4537 + " <actual.getCommitCount()>")
chamada antiga: assertEquals(expected.getReadCount(), actual.getReadCount())
nova chamada: assertEquals(expected.getReadCount(), actual.getReadCount(), "Era esperado valores iguais, mas " + result4538 + " <expected.getReadCount()> é diferente de " + result4539 + " <actual.getReadCount()>")
chamada antiga: assertEquals(expected.getWriteCount(), actual.getWriteCount())
nova chamada: assertEquals(expected.getWriteCount(), actual.getWriteCount(), "Era esperado valores iguais, mas " + result4540 + " <expected.getWriteCount()> é diferente de " + result4541 + " <actual.getWriteCount()>")
chamada antiga: assertEquals(expected.getFilterCount(), actual.getFilterCount())
nova chamada: assertEquals(expected.getFilterCount(), actual.getFilterCount(), "Era esperado valores iguais, mas " + result4542 + " <expected.getFilterCount()> é diferente de " + result4543 + " <actual.getFilterCount()>")
chamada antiga: assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount())
nova chamada: assertEquals(expected.getWriteSkipCount(), actual.getWriteSkipCount(), "Era esperado valores iguais, mas " + result4544 + " <expected.getWriteSkipCount()> é diferente de " + result4545 + " <actual.getWriteSkipCount()>")
chamada antiga: assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount())
nova chamada: assertEquals(expected.getReadSkipCount(), actual.getReadSkipCount(), "Era esperado valores iguais, mas " + result4546 + " <expected.getReadSkipCount()> é diferente de " + result4547 + " <actual.getReadSkipCount()>")
chamada antiga: assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount())
nova chamada: assertEquals(expected.getProcessSkipCount(), actual.getProcessSkipCount(), "Era esperado valores iguais, mas " + result4548 + " <expected.getProcessSkipCount()> é diferente de " + result4549 + " <actual.getProcessSkipCount()>")
chamada antiga: assertEquals(expected.getRollbackCount(), actual.getRollbackCount())
nova chamada: assertEquals(expected.getRollbackCount(), actual.getRollbackCount(), "Era esperado valores iguais, mas " + result4550 + " <expected.getRollbackCount()> é diferente de " + result4551 + " <actual.getRollbackCount()>")
chamada antiga: assertEquals(expected.getExitStatus(), actual.getExitStatus())
nova chamada: assertEquals(expected.getExitStatus(), actual.getExitStatus(), "Era esperado valores iguais, mas " + result4552 + " <expected.getExitStatus()> é diferente de " + result4553 + " <actual.getExitStatus()>")
chamada antiga: assertEquals(expected.getLastUpdated(), actual.getLastUpdated())
nova chamada: assertEquals(expected.getLastUpdated(), actual.getLastUpdated(), "Era esperado valores iguais, mas " + result4554 + " <expected.getLastUpdated()> é diferente de " + result4555 + " <actual.getLastUpdated()>")
chamada antiga: assertEquals(expected.getExitStatus(), actual.getExitStatus())
nova chamada: assertEquals(expected.getExitStatus(), actual.getExitStatus(), "Era esperado valores iguais, mas " + result4556 + " <expected.getExitStatus()> é diferente de " + result4557 + " <actual.getExitStatus()>")
chamada antiga: assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId())
nova chamada: assertEquals(expected.getJobExecutionId(), actual.getJobExecutionId(), "Era esperado valores iguais, mas " + result4558 + " <expected.getJobExecutionId()> é diferente de " + result4559 + " <actual.getJobExecutionId()>")
chamada antiga: assertEquals(expected.getCreateTime(), actual.getCreateTime())
nova chamada: assertEquals(expected.getCreateTime(), actual.getCreateTime(), "Era esperado valores iguais, mas " + result4560 + " <expected.getCreateTime()> é diferente de " + result4561 + " <actual.getCreateTime()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, jobExecution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4562 + " <jobExecution.getStatus()>")
chamada antiga: assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "PREFIX_JOB_INSTANCE"))
nova chamada: assertEquals(1, JdbcTestUtils.countRowsInTable(jdbcTemplate, "PREFIX_JOB_INSTANCE"), "Era esperado valores iguais, mas  1 é diferente de " + result4563 + " <JdbcTestUtils.countRowsInTable(jdbcTemplate, 'PREFIX_JOB_INSTANCE')>")
chamada antiga: assertEquals("foo", exception.getMessage().substring(0, 3))
nova chamada: assertEquals("foo", exception.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'foo' é diferente de " + result4564 + " <exception.getMessage().substring(0, 3)>")
chamada antiga: Assertions.assertEquals("1970-01-01", converted)
nova chamada: assertEquals("1970-01-01", converted, "Era esperado valores iguais, mas  '1970-01-01' é diferente de " + " converted")
chamada antiga: Assertions.assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"false\"}", encodedJobParameter)
nova chamada: assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"false\"}", encodedJobParameter, "Era esperado valores iguais, mas  '{\'value\':\'foo\',\'type\':\'java.lang.String\',\'identifying\':\'false\'}' é diferente de " + " encodedJobParameter")
chamada antiga: Assertions.assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"true\"}", encodedJobParameter)
nova chamada: assertEquals("{\"value\":\"foo\",\"type\":\"java.lang.String\",\"identifying\":\"true\"}", encodedJobParameter, "Era esperado valores iguais, mas  '{\'value\':\'foo\',\'type\':\'java.lang.String\',\'identifying\':\'true\'}' é diferente de " + " encodedJobParameter")
chamada antiga: Assertions.assertNotNull(jobParameter)
nova chamada: assertNotNull(jobParameter, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("foo", jobParameter.getValue())
nova chamada: assertEquals("foo", jobParameter.getValue(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4565 + " <jobParameter.getValue()>")
chamada antiga: Assertions.assertEquals(String.class, jobParameter.getType())
nova chamada: assertEquals(String.class, jobParameter.getType(), "Era esperado valores iguais, mas  String.class é diferente de " + result4566 + " <jobParameter.getType()>")
chamada antiga: Assertions.assertFalse(jobParameter.isIdentifying())
nova chamada: assertFalse(jobParameter.isIdentifying(), "Era esperado falso, mas " + result4567 + " <jobParameter.isIdentifying()> é verdadeiro ")
chamada antiga: Assertions.assertNotNull(jobParameter)
nova chamada: assertNotNull(jobParameter, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("foo", jobParameter.getValue())
nova chamada: assertEquals("foo", jobParameter.getValue(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4568 + " <jobParameter.getValue()>")
chamada antiga: Assertions.assertEquals(String.class, jobParameter.getType())
nova chamada: assertEquals(String.class, jobParameter.getType(), "Era esperado valores iguais, mas  String.class é diferente de " + result4569 + " <jobParameter.getType()>")
chamada antiga: Assertions.assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result4570 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: Assertions.assertNotNull(jobParameter)
nova chamada: assertNotNull(jobParameter, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: Assertions.assertEquals("foo", jobParameter.getValue())
nova chamada: assertEquals("foo", jobParameter.getValue(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4571 + " <jobParameter.getValue()>")
chamada antiga: Assertions.assertEquals(String.class, jobParameter.getType())
nova chamada: assertEquals(String.class, jobParameter.getType(), "Era esperado valores iguais, mas  String.class é diferente de " + result4572 + " <jobParameter.getType()>")
chamada antiga: Assertions.assertTrue(jobParameter.isIdentifying())
nova chamada: assertTrue(jobParameter.isIdentifying(), "Era esperado verdadeiro, mas " + result4573 + " <jobParameter.isIdentifying()> é falso")
chamada antiga: Assertions.assertEquals(LocalTime.NOON, converted)
nova chamada: assertEquals(LocalTime.NOON, converted, "Era esperado valores iguais, mas  LocalTime.NOON é diferente de " + " converted")
chamada antiga: Assertions.assertEquals("1970-01-01T00:00:00Z", converted)
nova chamada: assertEquals("1970-01-01T00:00:00Z", converted, "Era esperado valores iguais, mas  '1970-01-01T00:00:00Z' é diferente de " + " converted")
chamada antiga: Assertions.assertEquals(Date.from(Instant.EPOCH), converted)
nova chamada: assertEquals(Date.from(Instant.EPOCH), converted, "Era esperado valores iguais, mas " + result4574 + " <Date.from(Instant.EPOCH)> é diferente de " + " converted")
chamada antiga: Assertions.assertEquals(LocalDate.EPOCH, converted)
nova chamada: assertEquals(LocalDate.EPOCH, converted, "Era esperado valores iguais, mas  LocalDate.EPOCH é diferente de " + " converted")
chamada antiga: Assertions.assertEquals("12:00:00", converted)
nova chamada: assertEquals("12:00:00", converted, "Era esperado valores iguais, mas  '12:00:00' é diferente de " + " converted")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(props.getParameters().get("job.key").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("job.key").isIdentifying(), "Era esperado verdadeiro, mas " + result4575 + " <props.getParameters().get('job.key').isIdentifying()> é falso")
chamada antiga: assertTrue(props.getParameters().get("schedule.date").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("schedule.date").isIdentifying(), "Era esperado verdadeiro, mas " + result4576 + " <props.getParameters().get('schedule.date').isIdentifying()> é falso")
chamada antiga: assertTrue(props.getParameters().get("vendor.id").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("vendor.id").isIdentifying(), "Era esperado verdadeiro, mas " + result4577 + " <props.getParameters().get('vendor.id').isIdentifying()> é falso")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(props.getParameters().get("job.key").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("job.key").isIdentifying(), "Era esperado verdadeiro, mas " + result4578 + " <props.getParameters().get('job.key').isIdentifying()> é falso")
chamada antiga: assertTrue(props.getParameters().get("schedule.date").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("schedule.date").isIdentifying(), "Era esperado verdadeiro, mas " + result4579 + " <props.getParameters().get('schedule.date').isIdentifying()> é falso")
chamada antiga: assertTrue(props.getParameters().get("vendor.id").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("vendor.id").isIdentifying(), "Era esperado verdadeiro, mas " + result4580 + " <props.getParameters().get('vendor.id').isIdentifying()> é falso")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertFalse(props.getParameters().get("job.key").isIdentifying())
nova chamada: assertFalse(props.getParameters().get("job.key").isIdentifying(), "Era esperado falso, mas " + result4581 + " <props.getParameters().get('job.key').isIdentifying()> é verdadeiro ")
chamada antiga: assertFalse(props.getParameters().get("schedule.date").isIdentifying())
nova chamada: assertFalse(props.getParameters().get("schedule.date").isIdentifying(), "Era esperado falso, mas " + result4582 + " <props.getParameters().get('schedule.date').isIdentifying()> é verdadeiro ")
chamada antiga: assertFalse(props.getParameters().get("vendor.id").isIdentifying())
nova chamada: assertFalse(props.getParameters().get("vendor.id").isIdentifying(), "Era esperado falso, mas " + result4583 + " <props.getParameters().get('vendor.id').isIdentifying()> é verdadeiro ")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertTrue(props.getParameters().get("job.key").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("job.key").isIdentifying(), "Era esperado verdadeiro, mas " + result4584 + " <props.getParameters().get('job.key').isIdentifying()> é falso")
chamada antiga: assertTrue(props.getParameters().get("schedule.date").isIdentifying())
nova chamada: assertTrue(props.getParameters().get("schedule.date").isIdentifying(), "Era esperado verdadeiro, mas " + result4585 + " <props.getParameters().get('schedule.date').isIdentifying()> é falso")
chamada antiga: assertFalse(props.getParameters().get("vendor.id").isIdentifying())
nova chamada: assertFalse(props.getParameters().get("vendor.id").isIdentifying(), "Era esperado falso, mas " + result4586 + " <props.getParameters().get('vendor.id').isIdentifying()> é verdadeiro ")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("myKey", props.getString("job.key"))
nova chamada: assertEquals("myKey", props.getString("job.key"), "Era esperado valores iguais, mas  'myKey' é diferente de " + result4587 + " <props.getString('job.key')>")
chamada antiga: assertEquals(33243243L, props.getLong("vendor.id").longValue())
nova chamada: assertEquals(33243243L, props.getLong("vendor.id").longValue(), "Era esperado valores iguais, mas  33243243L é diferente de " + result4588 + " <props.getLong('vendor.id').longValue()>")
chamada antiga: assertEquals(expectedDate, props.getParameter("schedule.date").getValue())
nova chamada: assertEquals(expectedDate, props.getParameter("schedule.date").getValue(), "Era esperado valores iguais, mas  expectedDate é diferente de " + result4589 + " <props.getParameter('schedule.date').getValue()>")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
nova chamada: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"), "Era esperado valores iguais, mas  'myKey,java.lang.String,true' é diferente de " + result4590 + " <props.getProperty('job.key')>")
chamada antiga: assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"))
nova chamada: assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"), "Era esperado valores iguais, mas  '33243243,java.lang.Long,true' é diferente de " + result4591 + " <props.getProperty('vendor.id')>")
chamada antiga: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
nova chamada: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"), "Era esperado valores iguais, mas  '2008-01-23,java.time.LocalDate,true' é diferente de " + result4592 + " <props.getProperty('schedule.date')>")
chamada antiga: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
nova chamada: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"), "Era esperado valores iguais, mas  '1.23,java.lang.Double,true' é diferente de " + result4593 + " <props.getProperty('double.key')>")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
nova chamada: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"), "Era esperado valores iguais, mas  'myKey,java.lang.String,true' é diferente de " + result4594 + " <props.getProperty('job.key')>")
chamada antiga: assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"))
nova chamada: assertEquals("33243243,java.lang.Long,true", props.getProperty("vendor.id"), "Era esperado valores iguais, mas  '33243243,java.lang.Long,true' é diferente de " + result4595 + " <props.getProperty('vendor.id')>")
chamada antiga: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
nova chamada: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"), "Era esperado valores iguais, mas  '2008-01-23,java.time.LocalDate,true' é diferente de " + result4596 + " <props.getProperty('schedule.date')>")
chamada antiga: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
nova chamada: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"), "Era esperado valores iguais, mas  '1.23,java.lang.Double,true' é diferente de " + result4597 + " <props.getProperty('double.key')>")
chamada antiga: assertNotNull(props)
nova chamada: assertNotNull(props, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"))
nova chamada: assertEquals("myKey,java.lang.String,true", props.getProperty("job.key"), "Era esperado valores iguais, mas  'myKey,java.lang.String,true' é diferente de " + result4598 + " <props.getProperty('job.key')>")
chamada antiga: assertEquals("33243243,java.lang.Long,false", props.getProperty("vendor.id"))
nova chamada: assertEquals("33243243,java.lang.Long,false", props.getProperty("vendor.id"), "Era esperado valores iguais, mas  '33243243,java.lang.Long,false' é diferente de " + result4599 + " <props.getProperty('vendor.id')>")
chamada antiga: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"))
nova chamada: assertEquals("2008-01-23,java.time.LocalDate,true", props.getProperty("schedule.date"), "Era esperado valores iguais, mas  '2008-01-23,java.time.LocalDate,true' é diferente de " + result4600 + " <props.getProperty('schedule.date')>")
chamada antiga: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"))
nova chamada: assertEquals("1.23,java.lang.Double,true", props.getProperty("double.key"), "Era esperado valores iguais, mas  '1.23,java.lang.Double,true' é diferente de " + result4601 + " <props.getProperty('double.key')>")
chamada antiga: assertTrue(props.getParameters().isEmpty())
nova chamada: assertTrue(props.getParameters().isEmpty(), "Era esperado verdadeiro, mas " + result4602 + " <props.getParameters().isEmpty()> é falso")
chamada antiga: assertEquals(new JobParameters(), factory.getJobParameters(null))
nova chamada: assertEquals(new JobParameters(), factory.getJobParameters(null), "Era esperado valores iguais, mas  new JobParameters() é diferente de " + result4603 + " <factory.getJobParameters(null)>")
chamada antiga: assertEquals(new Properties(), factory.getProperties(null))
nova chamada: assertEquals(new Properties(), factory.getProperties(null), "Era esperado valores iguais, mas  new Properties() é diferente de " + result4604 + " <factory.getProperties(null)>")
chamada antiga: Assertions.assertEquals("1970-01-01T12:00:00", converted)
nova chamada: assertEquals("1970-01-01T12:00:00", converted, "Era esperado valores iguais, mas  '1970-01-01T12:00:00' é diferente de " + " converted")
chamada antiga: Assertions.assertEquals(LocalDateTime.of(LocalDate.EPOCH, LocalTime.NOON), converted)
nova chamada: assertEquals(LocalDateTime.of(LocalDate.EPOCH, LocalTime.NOON), converted, "Era esperado valores iguais, mas " + result4605 + " <LocalDateTime.of(LocalDate.EPOCH, LocalTime.NOON)> é diferente de " + " converted")
chamada antiga: assertEquals("", status.getExitDescription())
nova chamada: assertEquals("", status.getExitDescription(), "Era esperado valores iguais, mas  '' é diferente de " + result4606 + " <status.getExitDescription()>")
chamada antiga: assertEquals("10", status.getExitCode())
nova chamada: assertEquals("10", status.getExitCode(), "Era esperado valores iguais, mas  '10' é diferente de " + result4607 + " <status.getExitCode()>")
chamada antiga: assertEquals("EXECUTING", status.getExitCode())
nova chamada: assertEquals("EXECUTING", status.getExitCode(), "Era esperado valores iguais, mas  'EXECUTING' é diferente de " + result4608 + " <status.getExitCode()>")
chamada antiga: assertEquals("COMPLETED", status.getExitCode())
nova chamada: assertEquals("COMPLETED", status.getExitCode(), "Era esperado valores iguais, mas  'COMPLETED' é diferente de " + result4609 + " <status.getExitCode()>")
chamada antiga: assertEquals(ExitStatus.EXECUTING, new ExitStatus("EXECUTING"))
nova chamada: assertEquals(ExitStatus.EXECUTING, new ExitStatus("EXECUTING"), "Era esperado valores iguais, mas  ExitStatus.EXECUTING é diferente de " + " new ExitStatus('EXECUTING')")
chamada antiga: assertEquals(status, status)
nova chamada: assertEquals(status, status, "Era esperado valores iguais, mas  status é diferente de " + " status")
chamada antiga: assertEquals(new ExitStatus("test"), new ExitStatus("test"))
nova chamada: assertEquals(new ExitStatus("test"), new ExitStatus("test"), "Era esperado valores iguais, mas  new ExitStatus('test') é diferente de " + " new ExitStatus('test')")
chamada antiga: assertFalse(ExitStatus.EXECUTING.equals(null))
nova chamada: assertFalse(ExitStatus.EXECUTING.equals(null), "Era esperado falso, mas " + result4610 + " <ExitStatus.EXECUTING.equals(null)> é verdadeiro ")
chamada antiga: assertEquals(ExitStatus.EXECUTING.toString().hashCode(), ExitStatus.EXECUTING.hashCode())
nova chamada: assertEquals(ExitStatus.EXECUTING.toString().hashCode(), ExitStatus.EXECUTING.hashCode(), "Era esperado valores iguais, mas " + result4611 + " <ExitStatus.EXECUTING.toString().hashCode()> é diferente de " + result4612 + " <ExitStatus.EXECUTING.hashCode()>")
chamada antiga: assertEquals(ExitStatus.EXECUTING.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.EXECUTING).getExitCode())
nova chamada: assertEquals(ExitStatus.EXECUTING.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.EXECUTING).getExitCode(), "Era esperado valores iguais, mas " + result4613 + " <ExitStatus.EXECUTING.getExitCode()> é diferente de " + result4614 + " <ExitStatus.EXECUTING.and(ExitStatus.EXECUTING).getExitCode()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.COMPLETED).getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.EXECUTING.and(ExitStatus.COMPLETED).getExitCode(), "Era esperado valores iguais, mas " + result4615 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result4616 + " <ExitStatus.EXECUTING.and(ExitStatus.COMPLETED).getExitCode()>")
chamada antiga: assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.COMPLETED.and(ExitStatus.EXECUTING).getExitCode())
nova chamada: assertEquals(ExitStatus.COMPLETED.getExitCode(), ExitStatus.COMPLETED.and(ExitStatus.EXECUTING).getExitCode(), "Era esperado valores iguais, mas " + result4617 + " <ExitStatus.COMPLETED.getExitCode()> é diferente de " + result4618 + " <ExitStatus.COMPLETED.and(ExitStatus.EXECUTING).getExitCode()>")
chamada antiga: assertEquals("CUSTOM", ExitStatus.EXECUTING.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode())
nova chamada: assertEquals("CUSTOM", ExitStatus.EXECUTING.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode(), "Era esperado valores iguais, mas  'CUSTOM' é diferente de " + result4619 + " <ExitStatus.EXECUTING.and(ExitStatus.EXECUTING.replaceExitCode('CUSTOM')).getExitCode()>")
chamada antiga: assertEquals("COMPLETED_CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("COMPLETED_CUSTOM")).getExitCode())
nova chamada: assertEquals("COMPLETED_CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("COMPLETED_CUSTOM")).getExitCode(), "Era esperado valores iguais, mas  'COMPLETED_CUSTOM' é diferente de " + result4620 + " <ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode('COMPLETED_CUSTOM')).getExitCode()>")
chamada antiga: assertEquals("FAILED", ExitStatus.COMPLETED.and(ExitStatus.FAILED).getExitCode())
nova chamada: assertEquals("FAILED", ExitStatus.COMPLETED.and(ExitStatus.FAILED).getExitCode(), "Era esperado valores iguais, mas  'FAILED' é diferente de " + result4621 + " <ExitStatus.COMPLETED.and(ExitStatus.FAILED).getExitCode()>")
chamada antiga: assertEquals("FAILED", ExitStatus.FAILED.and(ExitStatus.COMPLETED).getExitCode())
nova chamada: assertEquals("FAILED", ExitStatus.FAILED.and(ExitStatus.COMPLETED).getExitCode(), "Era esperado valores iguais, mas  'FAILED' é diferente de " + result4622 + " <ExitStatus.FAILED.and(ExitStatus.COMPLETED).getExitCode()>")
chamada antiga: assertEquals("CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode())
nova chamada: assertEquals("CUSTOM", ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode("CUSTOM")).getExitCode(), "Era esperado valores iguais, mas  'CUSTOM' é diferente de " + result4623 + " <ExitStatus.COMPLETED.and(ExitStatus.EXECUTING.replaceExitCode('CUSTOM')).getExitCode()>")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("FOO", status.getExitCode())
nova chamada: assertEquals("FOO", status.getExitCode(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4624 + " <status.getExitCode()>")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("BAR", status.getExitCode())
nova chamada: assertEquals("BAR", status.getExitCode(), "Era esperado valores iguais, mas  'BAR' é diferente de " + result4625 + " <status.getExitCode()>")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(ExitStatus.EXECUTING.getExitCode(), status.getExitCode())
nova chamada: assertEquals(ExitStatus.EXECUTING.getExitCode(), status.getExitCode(), "Era esperado valores iguais, mas " + result4626 + " <ExitStatus.EXECUTING.getExitCode()> é diferente de " + result4627 + " <status.getExitCode()>")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Foo", status.getExitDescription())
nova chamada: assertEquals("Foo", status.getExitDescription(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4628 + " <status.getExitDescription()>")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(ExitStatus.EXECUTING != status)
nova chamada: assertTrue(ExitStatus.EXECUTING != status, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals("Foo", status.getExitDescription())
nova chamada: assertEquals("Foo", status.getExitDescription(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4629 + " <status.getExitDescription()>")
chamada antiga: assertEquals("Foo", status.getExitDescription())
nova chamada: assertEquals("Foo", status.getExitDescription(), "Era esperado valores iguais, mas  'Foo' é diferente de " + result4630 + " <status.getExitDescription()>")
chamada antiga: assertEquals("FOO", status.getExitCode())
nova chamada: assertEquals("FOO", status.getExitCode(), "Era esperado valores iguais, mas  'FOO' é diferente de " + result4631 + " <status.getExitCode()>")
chamada antiga: assertEquals("Bar", status.getExitDescription())
nova chamada: assertEquals("Bar", status.getExitDescription(), "Era esperado valores iguais, mas  'Bar' é diferente de " + result4632 + " <status.getExitDescription()>")
chamada antiga: assertTrue(ExitStatus.UNKNOWN.isRunning())
nova chamada: assertTrue(ExitStatus.UNKNOWN.isRunning(), "Era esperado verdadeiro, mas " + result4633 + " <ExitStatus.UNKNOWN.isRunning()> é falso")
chamada antiga: assertEquals(status.getExitCode(), clone.getExitCode())
nova chamada: assertEquals(status.getExitCode(), clone.getExitCode(), "Era esperado valores iguais, mas " + result4634 + " <status.getExitCode()> é diferente de " + result4635 + " <clone.getExitCode()>")
chamada antiga: assertEquals("value1", parameters.getString("string.key1"))
nova chamada: assertEquals("value1", parameters.getString("string.key1"), "Era esperado valores iguais, mas  'value1' é diferente de " + result4636 + " <parameters.getString('string.key1')>")
chamada antiga: assertEquals("value2", parameters.getString("string.key2"))
nova chamada: assertEquals("value2", parameters.getString("string.key2"), "Era esperado valores iguais, mas  'value2' é diferente de " + result4637 + " <parameters.getString('string.key2')>")
chamada antiga: assertEquals(1L, parameters.getLong("long.key1").longValue())
nova chamada: assertEquals(1L, parameters.getLong("long.key1").longValue(), "Era esperado valores iguais, mas  1L é diferente de " + result4638 + " <parameters.getLong('long.key1').longValue()>")
chamada antiga: assertEquals(2L, parameters.getLong("long.key2").longValue())
nova chamada: assertEquals(2L, parameters.getLong("long.key2").longValue(), "Era esperado valores iguais, mas  2L é diferente de " + result4639 + " <parameters.getLong('long.key2').longValue()>")
chamada antiga: assertEquals(Double.valueOf(1.1d), parameters.getDouble("double.key1"))
nova chamada: assertEquals(Double.valueOf(1.1d), parameters.getDouble("double.key1"), "Era esperado valores iguais, mas " + result4640 + " <Double.valueOf(1.1d)> é diferente de " + result4641 + " <parameters.getDouble('double.key1')>")
chamada antiga: assertEquals(Double.valueOf(2.2d), parameters.getDouble("double.key2"))
nova chamada: assertEquals(Double.valueOf(2.2d), parameters.getDouble("double.key2"), "Era esperado valores iguais, mas " + result4642 + " <Double.valueOf(2.2d)> é diferente de " + result4643 + " <parameters.getDouble('double.key2')>")
chamada antiga: assertEquals(date1, parameters.getDate("date.key1"))
nova chamada: assertEquals(date1, parameters.getDate("date.key1"), "Era esperado valores iguais, mas  date1 é diferente de " + result4644 + " <parameters.getDate('date.key1')>")
chamada antiga: assertEquals(date2, parameters.getDate("date.key2"))
nova chamada: assertEquals(date2, parameters.getDate("date.key2"), "Era esperado valores iguais, mas  date2 é diferente de " + result4645 + " <parameters.getDate('date.key2')>")
chamada antiga: assertNull(parameters.getLong("missing.long1"))
nova chamada: assertNull(parameters.getLong("missing.long1"), "Era esperado nulo, mas " + result4646 + " <parameters.getLong('missing.long1')> não é nulo")
chamada antiga: assertNull(parameters.getDouble("missing.double1"))
nova chamada: assertNull(parameters.getDouble("missing.double1"), "Era esperado nulo, mas " + result4647 + " <parameters.getDouble('missing.double1')> não é nulo")
chamada antiga: assertTrue(new JobParameters().isEmpty())
nova chamada: assertTrue(new JobParameters().isEmpty(), "Era esperado verdadeiro, mas " + result4648 + " <new JobParameters().isEmpty()> é falso")
chamada antiga: assertFalse(parameters.isEmpty())
nova chamada: assertFalse(parameters.isEmpty(), "Era esperado falso, mas " + result4649 + " <parameters.isEmpty()> é verdadeiro ")
chamada antiga: assertTrue(testParameters.equals(parameters))
nova chamada: assertTrue(testParameters.equals(parameters), "Era esperado verdadeiro, mas " + result4650 + " <testParameters.equals(parameters)> é falso")
chamada antiga: assertTrue(parameters.equals(parameters))
nova chamada: assertTrue(parameters.equals(parameters), "Era esperado verdadeiro, mas " + result4651 + " <parameters.equals(parameters)> é falso")
chamada antiga: assertFalse(parameters.equals(new JobParameters()))
nova chamada: assertFalse(parameters.equals(new JobParameters()), "Era esperado falso, mas " + result4652 + " <parameters.equals(new JobParameters())> é verdadeiro ")
chamada antiga: assertFalse(parameters.equals("foo"))
nova chamada: assertFalse(parameters.equals("foo"), "Era esperado falso, mas " + result4653 + " <parameters.equals('foo')> é verdadeiro ")
chamada antiga: assertFalse(parameters.equals(null))
nova chamada: assertFalse(parameters.equals(null), "Era esperado falso, mas " + result4654 + " <parameters.equals(null)> é verdadeiro ")
chamada antiga: assertEquals(string1, string2)
nova chamada: assertEquals(string1, string2, "Era esperado valores iguais, mas  string1 é diferente de " + " string2")
chamada antiga: assertEquals(code, new JobParameters().hashCode())
nova chamada: assertEquals(code, new JobParameters().hashCode(), "Era esperado valores iguais, mas  code é diferente de " + result4655 + " <new JobParameters().hashCode()>")
chamada antiga: assertEquals(code, parameters.hashCode())
nova chamada: assertEquals(code, parameters.hashCode(), "Era esperado valores iguais, mas  code é diferente de " + result4656 + " <parameters.hashCode()>")
chamada antiga: assertEquals(params, SerializationUtils.clone(params))
nova chamada: assertEquals(params, SerializationUtils.clone(params), "Era esperado valores iguais, mas  params é diferente de " + result4657 + " <SerializationUtils.clone(params)>")
chamada antiga: assertNull(new JobParameters().getLong("keythatdoesntexist"))
nova chamada: assertNull(new JobParameters().getLong("keythatdoesntexist"), "Era esperado nulo, mas " + result4658 + " <new JobParameters().getLong('keythatdoesntexist')> não é nulo")
chamada antiga: assertNull(new JobParameters().getString("keythatdoesntexist"))
nova chamada: assertNull(new JobParameters().getString("keythatdoesntexist"), "Era esperado nulo, mas " + result4659 + " <new JobParameters().getString('keythatdoesntexist')> não é nulo")
chamada antiga: assertNull(new JobParameters().getDouble("keythatdoesntexist"))
nova chamada: assertNull(new JobParameters().getDouble("keythatdoesntexist"), "Era esperado nulo, mas " + result4660 + " <new JobParameters().getDouble('keythatdoesntexist')> não é nulo")
chamada antiga: assertNull(new JobParameters().getDate("keythatdoesntexist"))
nova chamada: assertNull(new JobParameters().getDate("keythatdoesntexist"), "Era esperado nulo, mas " + result4661 + " <new JobParameters().getDate('keythatdoesntexist')> não é nulo")
chamada antiga: assertEquals(entity.hashCode(), new Entity(entity.getId()).hashCode())
nova chamada: assertEquals(entity.hashCode(), new Entity(entity.getId()).hashCode(), "Era esperado valores iguais, mas " + result4662 + " <entity.hashCode()> é diferente de " + result4663 + " <new Entity(entity.getId()).hashCode()>")
chamada antiga: assertTrue(withoutNull != withNull)
nova chamada: assertTrue(withoutNull != withNull, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertNull(entity.getVersion())
nova chamada: assertNull(entity.getVersion(), "Era esperado nulo, mas " + result4664 + " <entity.getVersion()> não é nulo")
chamada antiga: assertEquals(Integer.valueOf(0), entity.getVersion())
nova chamada: assertEquals(Integer.valueOf(0), entity.getVersion(), "Era esperado valores iguais, mas " + result4665 + " <Integer.valueOf(0)> é diferente de " + result4666 + " <entity.getVersion()>")
chamada antiga: assertEquals(Integer.valueOf(1), entity.getVersion())
nova chamada: assertEquals(Integer.valueOf(1), entity.getVersion(), "Era esperado valores iguais, mas " + result4667 + " <Integer.valueOf(1)> é diferente de " + result4668 + " <entity.getVersion()>")
chamada antiga: assertTrue(job.toString().contains("id=null"))
nova chamada: assertTrue(job.toString().contains("id=null"), "Era esperado verdadeiro, mas " + result4669 + " <job.toString().contains('id=null')> é falso")
chamada antiga: assertEquals(entity, entity)
nova chamada: assertEquals(entity, entity, "Era esperado valores iguais, mas  entity é diferente de " + " entity")
chamada antiga: assertEquals(entity, entity)
nova chamada: assertEquals(entity, entity, "Era esperado valores iguais, mas  entity é diferente de " + " entity")
chamada antiga: assertNotSame(entity, new Entity(null))
nova chamada: assertNotSame(entity, new Entity(null), "Era esperado objetos diferentes, mas  entity é igual a " + " new Entity(null)")
chamada antiga: assertEquals(entity, new Entity(entity.getId()))
nova chamada: assertEquals(entity, new Entity(entity.getId()), "Era esperado valores iguais, mas  entity é diferente de " + " new Entity(entity.getId())")
chamada antiga: assertNotEquals(entity, new Entity())
nova chamada: assertNotEquals(entity, new Entity(), "Era esperado valores diferentes, mas  entity é igual a " + " new Entity()")
chamada antiga: assertNotEquals(entity, new Object())
nova chamada: assertNotEquals(entity, new Object(), "Era esperado valores diferentes, mas  entity é igual a " + " new Object()")
chamada antiga: assertNotEquals(null, entity)
nova chamada: assertNotEquals(null, entity, "Era esperado valores diferentes, mas  null é igual a " + " entity")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(2, count)
nova chamada: assertEquals(2, count, "Era esperado valores iguais, mas  2 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertEquals(1, count)
nova chamada: assertEquals(1, count, "Era esperado valores iguais, mas  1 é diferente de " + " count")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(cause instanceof IllegalStateException)
nova chamada: assertTrue(cause instanceof IllegalStateException, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(ExitStatus.STOPPED, stepExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.STOPPED, stepExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.STOPPED é diferente de " + result4670 + " <stepExecution.getExitStatus()>")
chamada antiga: assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution))
nova chamada: assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result4671 + " <listener.afterStep(stepExecution)>")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4672 + " <list.size()>")
chamada antiga: assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution))
nova chamada: assertEquals(ExitStatus.FAILED, listener.afterStep(stepExecution), "Era esperado valores iguais, mas  ExitStatus.FAILED é diferente de " + result4673 + " <listener.afterStep(stepExecution)>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4674 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4675 + " <list.size()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4676 + " <execution.getStatus()>")
chamada antiga: assertEquals(BatchStatus.FAILED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.FAILED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4677 + " <execution.getStatus()>")
chamada antiga: assertEquals(0, stepExecution.getReadCount())
nova chamada: assertEquals(0, stepExecution.getReadCount(), "Era esperado valores iguais, mas  0 é diferente de " + result4678 + " <stepExecution.getReadCount()>")
chamada antiga: assertEquals(50, stepExecution.getReadSkipCount())
nova chamada: assertEquals(50, stepExecution.getReadSkipCount(), "Era esperado valores iguais, mas  50 é diferente de " + result4679 + " <stepExecution.getReadSkipCount()>")
chamada antiga: assertEquals(1, failureExceptions.size())
nova chamada: assertEquals(1, failureExceptions.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4680 + " <failureExceptions.size()>")
chamada antiga: assertEquals("Skip limit of '50' exceeded", failureException.getMessage())
nova chamada: assertEquals("Skip limit of '50' exceeded", failureException.getMessage(), "Era esperado valores iguais, mas  'Skip limit of '50' exceeded' é diferente de " + result4681 + " <failureException.getMessage()>")
chamada antiga: assertEquals("Error in onReadError.", failureException.getCause().getMessage())
nova chamada: assertEquals("Error in onReadError.", failureException.getCause().getMessage(), "Era esperado valores iguais, mas  'Error in onReadError.' é diferente de " + result4682 + " <failureException.getCause().getMessage()>")
chamada antiga: assertEquals("onReadError caused this Exception", failureException.getCause().getCause().getMessage())
nova chamada: assertEquals("onReadError caused this Exception", failureException.getCause().getCause().getMessage(), "Era esperado valores iguais, mas  'onReadError caused this Exception' é diferente de " + result4683 + " <failureException.getCause().getCause().getMessage()>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, execution.getStatus())
nova chamada: assertEquals(BatchStatus.COMPLETED, execution.getStatus(), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4684 + " <execution.getStatus()>")
chamada antiga: assertEquals("foo", exception.getMessage().substring(0, 3))
nova chamada: assertEquals("foo", exception.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'foo' é diferente de " + result4685 + " <exception.getMessage().substring(0, 3)>")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4686 + " <iterator.next()>")
chamada antiga: assertEquals("2", iterator.next())
nova chamada: assertEquals("2", iterator.next(), "Era esperado valores iguais, mas  '2' é diferente de " + result4687 + " <iterator.next()>")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4688 + " <iterator.next()>")
chamada antiga: assertFalse(iterator.hasNext())
nova chamada: assertFalse(iterator.hasNext(), "Era esperado falso, mas " + result4689 + " <iterator.hasNext()> é verdadeiro ")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4690 + " <iterator.next()>")
chamada antiga: assertEquals("3", iterator.next())
nova chamada: assertEquals("3", iterator.next(), "Era esperado valores iguais, mas  '3' é diferente de " + result4691 + " <iterator.next()>")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4692 + " <iterator.next()>")
chamada antiga: assertEquals(0, ((Ordered) iterator.next()).getOrder())
nova chamada: assertEquals(0, ((Ordered) iterator.next()).getOrder(), "Era esperado valores iguais, mas  0 é diferente de " + result4693 + " <((Ordered) iterator.next()).getOrder()>")
chamada antiga: assertEquals(1, ((Ordered) iterator.next()).getOrder())
nova chamada: assertEquals(1, ((Ordered) iterator.next()).getOrder(), "Era esperado valores iguais, mas  1 é diferente de " + result4694 + " <((Ordered) iterator.next()).getOrder()>")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4695 + " <iterator.next()>")
chamada antiga: assertEquals(1, ((Ordered) iterator.next()).getOrder())
nova chamada: assertEquals(1, ((Ordered) iterator.next()).getOrder(), "Era esperado valores iguais, mas  1 é diferente de " + result4696 + " <((Ordered) iterator.next()).getOrder()>")
chamada antiga: assertEquals(1, ((Ordered) iterator.next()).getOrder())
nova chamada: assertEquals(1, ((Ordered) iterator.next()).getOrder(), "Era esperado valores iguais, mas  1 é diferente de " + result4697 + " <((Ordered) iterator.next()).getOrder()>")
chamada antiga: assertEquals("1", iterator.next())
nova chamada: assertEquals("1", iterator.next(), "Era esperado valores iguais, mas  '1' é diferente de " + result4698 + " <iterator.next()>")
chamada antiga: assertEquals(item, iterator.next())
nova chamada: assertEquals(item, iterator.next(), "Era esperado valores iguais, mas  item é diferente de " + result4699 + " <iterator.next()>")
chamada antiga: assertTrue(delegate.beforeJobCalled)
nova chamada: assertTrue(delegate.beforeJobCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(delegate.afterJobCalled)
nova chamada: assertTrue(delegate.afterJobCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(delegate.beforeJobCalled)
nova chamada: assertTrue(delegate.beforeJobCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(delegate.afterJobCalled)
nova chamada: assertTrue(delegate.afterJobCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listener instanceof JobExecutionListener)
nova chamada: assertTrue(listener instanceof JobExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(delegate.afterJobCalled)
nova chamada: assertTrue(delegate.afterJobCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listener instanceof JobExecutionListener)
nova chamada: assertTrue(listener instanceof JobExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listener instanceof JobExecutionListener)
nova chamada: assertTrue(listener instanceof JobExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(listeners.contains(listener))
nova chamada: assertTrue(listeners.contains(listener), "Era esperado verdadeiro, mas " + result4700 + " <listeners.contains(listener)> é falso")
chamada antiga: assertEquals(1, listeners.size())
nova chamada: assertEquals(1, listeners.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4701 + " <listeners.size()>")
chamada antiga: assertTrue(JobListenerFactoryBean.isListener(new Object() {

    @BeforeJob
    public void foo(JobExecution execution) {
    }
}))
nova chamada: assertTrue(JobListenerFactoryBean.isListener(new Object() {

    @BeforeJob
    public void foo(JobExecution execution) {
    }
}), "Era esperado verdadeiro, mas " + result4702 + " <JobListenerFactoryBean.isListener(new Object() {\n\n    @BeforeJob\n    public void foo(JobExecution execution) {\n    }\n})> é falso")
chamada antiga: assertTrue(JobListenerFactoryBean.isListener(new JobListenerWithInterface()))
nova chamada: assertTrue(JobListenerFactoryBean.isListener(new JobListenerWithInterface()), "Era esperado verdadeiro, mas " + result4703 + " <JobListenerFactoryBean.isListener(new JobListenerWithInterface())> é falso")
chamada antiga: assertEquals(3, ((Ordered) listener).getOrder())
nova chamada: assertEquals(3, ((Ordered) listener).getOrder(), "Era esperado valores iguais, mas  3 é diferente de " + result4704 + " <((Ordered) listener).getOrder()>")
chamada antiga: assertEquals(listener1, listener2)
nova chamada: assertEquals(listener1, listener2, "Era esperado valores iguais, mas  listener1 é diferente de " + " listener2")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4705 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals(Long.valueOf(25L), jobExecution.getId())
nova chamada: assertEquals(Long.valueOf(25L), jobExecution.getId(), "Era esperado valores iguais, mas " + result4706 + " <Long.valueOf(25L)> é diferente de " + result4707 + " <jobExecution.getId()>")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4708 + " <delegate.isExecuted()> é falso")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4709 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals(Long.valueOf(25L), jobExecution.getId())
nova chamada: assertEquals(Long.valueOf(25L), jobExecution.getId(), "Era esperado valores iguais, mas " + result4710 + " <Long.valueOf(25L)> é diferente de " + result4711 + " <jobExecution.getId()>")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4712 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals(2, list.size())
nova chamada: assertEquals(2, list.size(), "Era esperado valores iguais, mas  2 é diferente de " + result4713 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4714 + " <list.size()>")
chamada antiga: assertEquals(1, list.size())
nova chamada: assertEquals(1, list.size(), "Era esperado valores iguais, mas  1 é diferente de " + result4715 + " <list.size()>")
chamada antiga: assertTrue(testListener.beforeStepCalled)
nova chamada: assertTrue(testListener.beforeStepCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.beforeChunkCalled)
nova chamada: assertTrue(testListener.beforeChunkCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.afterChunkCalled)
nova chamada: assertTrue(testListener.afterChunkCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.afterChunkErrorCalled)
nova chamada: assertTrue(testListener.afterChunkErrorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.beforeReadCalled)
nova chamada: assertTrue(testListener.beforeReadCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.afterReadCalled)
nova chamada: assertTrue(testListener.afterReadCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onReadErrorCalled)
nova chamada: assertTrue(testListener.onReadErrorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.beforeProcessCalled)
nova chamada: assertTrue(testListener.beforeProcessCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.afterProcessCalled)
nova chamada: assertTrue(testListener.afterProcessCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onProcessErrorCalled)
nova chamada: assertTrue(testListener.onProcessErrorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.beforeWriteCalled)
nova chamada: assertTrue(testListener.beforeWriteCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.afterWriteCalled)
nova chamada: assertTrue(testListener.afterWriteCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onWriteErrorCalled)
nova chamada: assertTrue(testListener.onWriteErrorCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onSkipInReadCalled)
nova chamada: assertTrue(testListener.onSkipInReadCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onSkipInProcessCalled)
nova chamada: assertTrue(testListener.onSkipInProcessCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(testListener.onSkipInWriteCalled)
nova chamada: assertTrue(testListener.onSkipInWriteCalled, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(3, delegate.callcount)
nova chamada: assertEquals(3, delegate.callcount, "Era esperado valores iguais, mas  3 é diferente de " + " delegate.callcount")
chamada antiga: assertEquals(1, delegate.callcount)
nova chamada: assertEquals(1, delegate.callcount, "Era esperado valores iguais, mas  1 é diferente de " + " delegate.callcount")
chamada antiga: assertTrue(listener instanceof StepExecutionListener)
nova chamada: assertTrue(listener instanceof StepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, delegate.callcount)
nova chamada: assertEquals(1, delegate.callcount, "Era esperado valores iguais, mas  1 é diferente de " + " delegate.callcount")
chamada antiga: assertTrue(listener instanceof StepExecutionListener)
nova chamada: assertTrue(listener instanceof StepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertEquals(1, delegate.callcount)
nova chamada: assertEquals(1, delegate.callcount, "Era esperado valores iguais, mas  1 é diferente de " + " delegate.callcount")
chamada antiga: assertTrue(listener instanceof StepExecutionListener)
nova chamada: assertTrue(listener instanceof StepExecutionListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertFalse(listener instanceof ChunkListener)
nova chamada: assertFalse(listener instanceof ChunkListener, "Era esperado falso, mas o valor é verdadeiro")
chamada antiga: assertEquals(1, delegate.callcount)
nova chamada: assertEquals(1, delegate.callcount, "Era esperado valores iguais, mas  1 é diferente de " + " delegate.callcount")
chamada antiga: assertEquals(3, ((Ordered) listener).getOrder())
nova chamada: assertEquals(3, ((Ordered) listener).getOrder(), "Era esperado valores iguais, mas  3 é diferente de " + result4716 + " <((Ordered) listener).getOrder()>")
chamada antiga: assertTrue(StepListenerFactoryBean.isListener(new ThreeStepExecutionListener()))
nova chamada: assertTrue(StepListenerFactoryBean.isListener(new ThreeStepExecutionListener()), "Era esperado verdadeiro, mas " + result4717 + " <StepListenerFactoryBean.isListener(new ThreeStepExecutionListener())> é falso")
chamada antiga: assertTrue(StepListenerFactoryBean.isListener(new Object() {

    @BeforeStep
    public void foo(StepExecution execution) {
    }
}))
nova chamada: assertTrue(StepListenerFactoryBean.isListener(new Object() {

    @BeforeStep
    public void foo(StepExecution execution) {
    }
}), "Era esperado verdadeiro, mas " + result4718 + " <StepListenerFactoryBean.isListener(new Object() {\n\n    @BeforeStep\n    public void foo(StepExecution execution) {\n    }\n})> é falso")
chamada antiga: assertFalse(StepListenerFactoryBean.isListener(proxy))
nova chamada: assertFalse(StepListenerFactoryBean.isListener(proxy), "Era esperado falso, mas " + result4719 + " <StepListenerFactoryBean.isListener(proxy)> é verdadeiro ")
chamada antiga: assertTrue(StepListenerFactoryBean.isListener(proxy))
nova chamada: assertTrue(StepListenerFactoryBean.isListener(proxy), "Era esperado verdadeiro, mas " + result4720 + " <StepListenerFactoryBean.isListener(proxy)> é falso")
chamada antiga: assertTrue(StepListenerFactoryBean.isListener(new MultipleAfterStep()))
nova chamada: assertTrue(StepListenerFactoryBean.isListener(new MultipleAfterStep()), "Era esperado verdadeiro, mas " + result4721 + " <StepListenerFactoryBean.isListener(new MultipleAfterStep())> é falso")
chamada antiga: assertTrue(factoryBean.getObject() instanceof StepListener)
nova chamada: assertTrue(factoryBean.getObject() instanceof StepListener, "Era esperado verdadeiro, mas o valor obtido é falso")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4722 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals("foo", chunk.getItems().get(0))
nova chamada: assertEquals("foo", chunk.getItems().get(0), "Era esperado valores iguais, mas  'foo' é diferente de " + result4723 + " <chunk.getItems().get(0)>")
chamada antiga: assertEquals("bar", chunk.getItems().get(1))
nova chamada: assertEquals("bar", chunk.getItems().get(1), "Era esperado valores iguais, mas  'bar' é diferente de " + result4724 + " <chunk.getItems().get(1)>")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4725 + " <delegate.isExecuted()> é falso")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4726 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals("foo", chunk.getItems().get(0))
nova chamada: assertEquals("foo", chunk.getItems().get(0), "Era esperado valores iguais, mas  'foo' é diferente de " + result4727 + " <chunk.getItems().get(0)>")
chamada antiga: assertEquals("bar", chunk.getItems().get(1))
nova chamada: assertEquals("bar", chunk.getItems().get(1), "Era esperado valores iguais, mas  'bar' é diferente de " + result4728 + " <chunk.getItems().get(1)>")
chamada antiga: assertTrue(delegate.isExecuted())
nova chamada: assertTrue(delegate.isExecuted(), "Era esperado verdadeiro, mas " + result4729 + " <delegate.isExecuted()> é falso")
chamada antiga: assertEquals("foo", exception.getMessage().substring(0, 3))
nova chamada: assertEquals("foo", exception.getMessage().substring(0, 3), "Era esperado valores iguais, mas  'foo' é diferente de " + result4730 + " <exception.getMessage().substring(0, 3)>")
chamada antiga: assertEquals(value, jobExecution.getExecutionContext().getString(key))
nova chamada: assertEquals(value, jobExecution.getExecutionContext().getString(key), "Era esperado valores iguais, mas  value é diferente de " + result4731 + " <jobExecution.getExecutionContext().getString(key)>")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key2))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key2), "Era esperado falso, mas " + result4732 + " <jobExecution.getExecutionContext().containsKey(key2)> é verdadeiro ")
chamada antiga: assertEquals(value, jobExecution.getExecutionContext().getString(key))
nova chamada: assertEquals(value, jobExecution.getExecutionContext().getString(key), "Era esperado valores iguais, mas  value é diferente de " + result4733 + " <jobExecution.getExecutionContext().getString(key)>")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key2))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key2), "Era esperado falso, mas " + result4734 + " <jobExecution.getExecutionContext().containsKey(key2)> é verdadeiro ")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key), "Era esperado falso, mas " + result4735 + " <jobExecution.getExecutionContext().containsKey(key)> é verdadeiro ")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key2))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key2), "Era esperado falso, mas " + result4736 + " <jobExecution.getExecutionContext().containsKey(key2)> é verdadeiro ")
chamada antiga: assertEquals(value, jobExecution.getExecutionContext().getString(key))
nova chamada: assertEquals(value, jobExecution.getExecutionContext().getString(key), "Era esperado valores iguais, mas  value é diferente de " + result4737 + " <jobExecution.getExecutionContext().getString(key)>")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key2))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key2), "Era esperado falso, mas " + result4738 + " <jobExecution.getExecutionContext().containsKey(key2)> é verdadeiro ")
chamada antiga: assertEquals(value, jobExecution.getExecutionContext().getString(key))
nova chamada: assertEquals(value, jobExecution.getExecutionContext().getString(key), "Era esperado valores iguais, mas  value é diferente de " + result4739 + " <jobExecution.getExecutionContext().getString(key)>")
chamada antiga: assertFalse(jobExecution.getExecutionContext().containsKey(key2))
nova chamada: assertFalse(jobExecution.getExecutionContext().containsKey(key2), "Era esperado falso, mas " + result4740 + " <jobExecution.getExecutionContext().containsKey(key2)> é verdadeiro ")
chamada antiga: assertEquals(value, jobExecution.getExecutionContext().getString(key))
nova chamada: assertEquals(value, jobExecution.getExecutionContext().getString(key), "Era esperado valores iguais, mas  value é diferente de " + result4741 + " <jobExecution.getExecutionContext().getString(key)>")
chamada antiga: assertEquals("bar", stepExecution.getExecutionContext().get("foo"))
nova chamada: assertEquals("bar", stepExecution.getExecutionContext().get("foo"), "Era esperado valores iguais, mas  'bar' é diferente de " + result4742 + " <stepExecution.getExecutionContext().get('foo')>")
chamada antiga: assertFalse(stepExecution.getExecutionContext().containsKey("foo"))
nova chamada: assertFalse(stepExecution.getExecutionContext().containsKey("foo"), "Era esperado falso, mas " + result4743 + " <stepExecution.getExecutionContext().containsKey('foo')> é verdadeiro ")
chamada antiga: assertEquals(1, testClass.method1Count)
nova chamada: assertEquals(1, testClass.method1Count, "Era esperado valores iguais, mas  1 é diferente de " + " testClass.method1Count")
chamada antiga: assertEquals(1, testClass.method2Count)
nova chamada: assertEquals(1, testClass.method2Count, "Era esperado valores iguais, mas  1 é diferente de " + " testClass.method2Count")
chamada antiga: assertEquals(1, testClass.method1Count)
nova chamada: assertEquals(1, testClass.method1Count, "Era esperado valores iguais, mas  1 é diferente de " + " testClass.method1Count")
chamada antiga: assertEquals(1, testClass.method2Count)
nova chamada: assertEquals(1, testClass.method2Count, "Era esperado valores iguais, mas  1 é diferente de " + " testClass.method2Count")
chamada antiga: assertEquals(ExitStatus.COMPLETED, interceptor.invoke(new StubMethodInvocation(TestClass.class.getMethod("method3"))))
nova chamada: assertEquals(ExitStatus.COMPLETED, interceptor.invoke(new StubMethodInvocation(TestClass.class.getMethod("method3"))), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4744 + " <interceptor.invoke(new StubMethodInvocation(TestClass.class.getMethod('method3')))>")
chamada antiga: assertEquals("foo", instance.getJobName())
nova chamada: assertEquals("foo", instance.getJobName(), "Era esperado valores iguais, mas  'foo' é diferente de " + result4745 + " <instance.getJobName()>")
chamada antiga: assertEquals("job", instance.getJobName())
nova chamada: assertEquals("job", instance.getJobName(), "Era esperado valores iguais, mas  'job' é diferente de " + result4746 + " <instance.getJobName()>")
chamada antiga: assertEquals("testJob", instance.getJobName())
nova chamada: assertEquals("testJob", instance.getJobName(), "Era esperado valores iguais, mas  'testJob' é diferente de " + result4747 + " <instance.getJobName()>")
chamada antiga: assertEquals(instance, SerializationUtils.clone(instance))
nova chamada: assertEquals(instance, SerializationUtils.clone(instance), "Era esperado valores iguais, mas  instance é diferente de " + result4748 + " <SerializationUtils.clone(instance)>")
chamada antiga: assertEquals(11, instance.getInstanceId())
nova chamada: assertEquals(11, instance.getInstanceId(), "Era esperado valores iguais, mas  11 é diferente de " + result4749 + " <instance.getInstanceId()>")
chamada antiga: assertNotNull(jobExecution)
nova chamada: assertNotNull(jobExecution, "Era esperado não nulo, mas  o valor obtido foi nulo")
chamada antiga: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus())
nova chamada: assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus(), "Era esperado valores iguais, mas  ExitStatus.COMPLETED é diferente de " + result4750 + " <jobExecution.getExitStatus()>")
chamada antiga: assertTrue(jobExecution.getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY))
nova chamada: assertTrue(jobExecution.getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY), "Era esperado verdadeiro, mas " + result4751 + " <jobExecution.getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY)> é falso")
chamada antiga: assertTrue(jobExecution.getStepExecutions().iterator().next().getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY))
nova chamada: assertTrue(jobExecution.getStepExecutions().iterator().next().getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY), "Era esperado verdadeiro, mas " + result4752 + " <jobExecution.getStepExecutions().iterator().next().getExecutionContext().containsKey(SpringBatchVersion.BATCH_VERSION_KEY)> é falso")
chamada antiga: assertEquals("ABANDONED", BatchStatus.ABANDONED.toString())
nova chamada: assertEquals("ABANDONED", BatchStatus.ABANDONED.toString(), "Era esperado valores iguais, mas  'ABANDONED' é diferente de " + result4753 + " <BatchStatus.ABANDONED.toString()>")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.COMPLETED))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.COMPLETED), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4754 + " <BatchStatus.max(BatchStatus.FAILED, BatchStatus.COMPLETED)>")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.FAILED))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.FAILED), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4755 + " <BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.FAILED)>")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.FAILED))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.max(BatchStatus.FAILED, BatchStatus.FAILED), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4756 + " <BatchStatus.max(BatchStatus.FAILED, BatchStatus.FAILED)>")
chamada antiga: assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.STARTED, BatchStatus.STARTING))
nova chamada: assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.STARTED, BatchStatus.STARTING), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result4757 + " <BatchStatus.max(BatchStatus.STARTED, BatchStatus.STARTING)>")
chamada antiga: assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.STARTED))
nova chamada: assertEquals(BatchStatus.STARTED, BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.STARTED), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result4758 + " <BatchStatus.max(BatchStatus.COMPLETED, BatchStatus.STARTED)>")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.FAILED.upgradeTo(BatchStatus.COMPLETED))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.FAILED.upgradeTo(BatchStatus.COMPLETED), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4759 + " <BatchStatus.FAILED.upgradeTo(BatchStatus.COMPLETED)>")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.FAILED))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.FAILED), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4760 + " <BatchStatus.COMPLETED.upgradeTo(BatchStatus.FAILED)>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, BatchStatus.STARTING.upgradeTo(BatchStatus.COMPLETED))
nova chamada: assertEquals(BatchStatus.COMPLETED, BatchStatus.STARTING.upgradeTo(BatchStatus.COMPLETED), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4761 + " <BatchStatus.STARTING.upgradeTo(BatchStatus.COMPLETED)>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.STARTING))
nova chamada: assertEquals(BatchStatus.COMPLETED, BatchStatus.COMPLETED.upgradeTo(BatchStatus.STARTING), "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + result4762 + " <BatchStatus.COMPLETED.upgradeTo(BatchStatus.STARTING)>")
chamada antiga: assertEquals(BatchStatus.STARTED, BatchStatus.STARTING.upgradeTo(BatchStatus.STARTED))
nova chamada: assertEquals(BatchStatus.STARTED, BatchStatus.STARTING.upgradeTo(BatchStatus.STARTED), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result4763 + " <BatchStatus.STARTING.upgradeTo(BatchStatus.STARTED)>")
chamada antiga: assertEquals(BatchStatus.STARTED, BatchStatus.STARTED.upgradeTo(BatchStatus.STARTING))
nova chamada: assertEquals(BatchStatus.STARTED, BatchStatus.STARTED.upgradeTo(BatchStatus.STARTING), "Era esperado valores iguais, mas  BatchStatus.STARTED é diferente de " + result4764 + " <BatchStatus.STARTED.upgradeTo(BatchStatus.STARTING)>")
chamada antiga: assertFalse(BatchStatus.FAILED.isRunning())
nova chamada: assertFalse(BatchStatus.FAILED.isRunning(), "Era esperado falso, mas " + result4765 + " <BatchStatus.FAILED.isRunning()> é verdadeiro ")
chamada antiga: assertFalse(BatchStatus.COMPLETED.isRunning())
nova chamada: assertFalse(BatchStatus.COMPLETED.isRunning(), "Era esperado falso, mas " + result4766 + " <BatchStatus.COMPLETED.isRunning()> é verdadeiro ")
chamada antiga: assertTrue(BatchStatus.STARTED.isRunning())
nova chamada: assertTrue(BatchStatus.STARTED.isRunning(), "Era esperado verdadeiro, mas " + result4767 + " <BatchStatus.STARTED.isRunning()> é falso")
chamada antiga: assertTrue(BatchStatus.STARTING.isRunning())
nova chamada: assertTrue(BatchStatus.STARTING.isRunning(), "Era esperado verdadeiro, mas " + result4768 + " <BatchStatus.STARTING.isRunning()> é falso")
chamada antiga: assertTrue(BatchStatus.STOPPING.isRunning())
nova chamada: assertTrue(BatchStatus.STOPPING.isRunning(), "Era esperado verdadeiro, mas " + result4769 + " <BatchStatus.STOPPING.isRunning()> é falso")
chamada antiga: assertTrue(BatchStatus.FAILED.isUnsuccessful())
nova chamada: assertTrue(BatchStatus.FAILED.isUnsuccessful(), "Era esperado verdadeiro, mas " + result4770 + " <BatchStatus.FAILED.isUnsuccessful()> é falso")
chamada antiga: assertFalse(BatchStatus.COMPLETED.isUnsuccessful())
nova chamada: assertFalse(BatchStatus.COMPLETED.isUnsuccessful(), "Era esperado falso, mas " + result4771 + " <BatchStatus.COMPLETED.isUnsuccessful()> é verdadeiro ")
chamada antiga: assertFalse(BatchStatus.STARTED.isUnsuccessful())
nova chamada: assertFalse(BatchStatus.STARTED.isUnsuccessful(), "Era esperado falso, mas " + result4772 + " <BatchStatus.STARTED.isUnsuccessful()> é verdadeiro ")
chamada antiga: assertFalse(BatchStatus.STARTING.isUnsuccessful())
nova chamada: assertFalse(BatchStatus.STARTING.isUnsuccessful(), "Era esperado falso, mas " + result4773 + " <BatchStatus.STARTING.isUnsuccessful()> é verdadeiro ")
chamada antiga: assertEquals(BatchStatus.FAILED, BatchStatus.valueOf(BatchStatus.FAILED.toString()))
nova chamada: assertEquals(BatchStatus.FAILED, BatchStatus.valueOf(BatchStatus.FAILED.toString()), "Era esperado valores iguais, mas  BatchStatus.FAILED é diferente de " + result4774 + " <BatchStatus.valueOf(BatchStatus.FAILED.toString())>")
chamada antiga: assertEquals(BatchStatus.COMPLETED, status)
nova chamada: assertEquals(BatchStatus.COMPLETED, status, "Era esperado valores iguais, mas  BatchStatus.COMPLETED é diferente de " + " status")
Total asserts: 7126
Asserts sem descrição: 5974
Asserts com descrição: 1152
Assertion Roulette: 4934
