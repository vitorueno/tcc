Antes do refactor: 


Projeto: /home/vitor-otto/opensource/jasypt-spring-boot-jasypt-spring-boot-parent-3.0.5

Total asserts: 68
Asserts sem descrição: 62
Asserts com descrição: 6
Assertion Roulette: 20

Após o refactor: 


Projeto: /home/vitor-otto/opensource/jasypt-spring-boot-jasypt-spring-boot-parent-3.0.5

chamada antiga: assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class))
nova chamada: assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class), "Era esperado verdadeiro, mas " + result0 + " <ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {\n}, EncryptableConfigurationPropertySourcesPropertySource.class)> é falso")
chamada antiga: assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class))
nova chamada: assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableConfigurationPropertySourcesPropertySource.class), "Era esperado falso, mas " + result1 + " <ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {\n}, EncryptableConfigurationPropertySourcesPropertySource.class)> é verdadeiro ")
chamada antiga: assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableMapPropertySourceWrapper.class))
nova chamada: assertTrue(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {
}, EncryptableMapPropertySourceWrapper.class), "Era esperado verdadeiro, mas " + result2 + " <ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Map<String, Object>>>() {\n}, EncryptableMapPropertySourceWrapper.class)> é falso")
chamada antiga: assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableMapPropertySourceWrapper.class))
nova chamada: assertFalse(ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {
}, EncryptableMapPropertySourceWrapper.class), "Era esperado falso, mas " + result3 + " <ClassUtils.isAssignable(new ParameterizedTypeReference<PropertySource<Iterable<ConfigurationPropertySource>>>() {\n}, EncryptableMapPropertySourceWrapper.class)> é verdadeiro ")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result4 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result5 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result6 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result7 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result8 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result9 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result10 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result11 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result12 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result13 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result14 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result15 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertTrue(filter.shouldInclude(source, "some.property"))
nova chamada: assertTrue(filter.shouldInclude(source, "some.property"), "Era esperado verdadeiro, mas " + result16 + " <filter.shouldInclude(source, 'some.property')> é falso")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result17 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result18 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result19 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result20 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result21 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result22 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result23 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result24 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result25 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result26 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result27 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result28 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertFalse(filter.shouldInclude(source, "some.property"))
nova chamada: assertFalse(filter.shouldInclude(source, "some.property"), "Era esperado falso, mas " + result29 + " <filter.shouldInclude(source, 'some.property')> é verdadeiro ")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(decrypted, message)
nova chamada: assertEquals(decrypted, message, "Era esperado valores iguais, mas  decrypted é diferente de " + " message")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertEquals(message, decrypted)
nova chamada: assertEquals(message, decrypted, "Era esperado valores iguais, mas  message é diferente de " + " decrypted")
chamada antiga: assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
nova chamada: assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class), "Era esperado não nulo, mas " + result30 + " <this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class)> é nulo")
chamada antiga: assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class))
nova chamada: assertNotNull(this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class), "Era esperado não nulo, mas " + result31 + " <this.context.getBean(EnableEncryptablePropertiesBeanFactoryPostProcessor.class)> é nulo")
chamada antiga: assertEquals("test1", myProperties.getFooString())
nova chamada: assertEquals("test1", myProperties.getFooString(), "Era esperado valores iguais, mas  'test1' é diferente de " + result32 + " <myProperties.getFooString()>")
chamada antiga: assertEquals("test2", myProperties.getBarString())
nova chamada: assertEquals("test2", myProperties.getBarString(), "Era esperado valores iguais, mas  'test2' é diferente de " + result33 + " <myProperties.getBarString()>")
chamada antiga: assertNotNull(myProperties.getFooList())
nova chamada: assertNotNull(myProperties.getFooList(), "Era esperado não nulo, mas " + result34 + " <myProperties.getFooList()> é nulo")
chamada antiga: assertEquals("[a1, b1]", myProperties.getFooList().toString())
nova chamada: assertEquals("[a1, b1]", myProperties.getFooList().toString(), "Era esperado valores iguais, mas  '[a1, b1]' é diferente de " + result35 + " <myProperties.getFooList().toString()>")
chamada antiga: assertNotNull(myProperties.getBarList())
nova chamada: assertNotNull(myProperties.getBarList(), "Era esperado não nulo, mas " + result36 + " <myProperties.getBarList()> é nulo")
chamada antiga: assertEquals("[a2, b2]", myProperties.getBarList().toString())
nova chamada: assertEquals("[a2, b2]", myProperties.getBarList().toString(), "Era esperado valores iguais, mas  '[a2, b2]' é diferente de " + result37 + " <myProperties.getBarList().toString()>")
chamada antiga: assertNotNull(myProperties.getStringMap())
nova chamada: assertNotNull(myProperties.getStringMap(), "Era esperado não nulo, mas " + result38 + " <myProperties.getStringMap()> é nulo")
chamada antiga: assertEquals("{k1=v1}", myProperties.getStringMap().toString())
nova chamada: assertEquals("{k1=v1}", myProperties.getStringMap().toString(), "Era esperado valores iguais, mas  '{k1=v1}' é diferente de " + result39 + " <myProperties.getStringMap().toString()>")
chamada antiga: assertNotNull(myProperties.getListMap())
nova chamada: assertNotNull(myProperties.getListMap(), "Era esperado não nulo, mas " + result40 + " <myProperties.getListMap()> é nulo")
chamada antiga: assertEquals("{k2=[v2]}", myProperties.getListMap().toString())
nova chamada: assertEquals("{k2=[v2]}", myProperties.getListMap().toString(), "Era esperado valores iguais, mas  '{k2=[v2]}' é diferente de " + result41 + " <myProperties.getListMap().toString()>")
Total asserts: 68
Asserts sem descrição: 62
Asserts com descrição: 6
Assertion Roulette: 20
