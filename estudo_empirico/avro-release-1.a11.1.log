
Projeto: /home/vitor-otto/opensource/avro-release-1.a11.1

Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileTools.java linha: 174 Método: assertTrue(output, output.contains("avro.schema\t" + schema.toString() + "\n"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileTools.java linha: 175 Método: assertTrue(output, output.contains(ESCAPED_KEY + "\t\n"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestSpecificCompilerTool.java linha: 226 Método: Assert.assertEquals("Found file: " + found + " does not match expected file: " + expected, readFile(expected), readFile(found))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestTetherTool.java linha: 104 Método: assertEquals(wc.key().toString(), WordCountUtil.COUNTS.get(wc.key().toString()), wc.value())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 124 Método: assertTrue(output, output.contains("Number of blocks: 2 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 125 Método: assertTrue(output, output.contains("Number of records: 5 Number of corrupt records: 0"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 131 Método: assertTrue(output, output.contains("Number of blocks: 3 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 132 Método: assertTrue(output, output.contains("Number of records: 8 Number of corrupt records: 2"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 138 Método: assertTrue(output, output.contains("Number of blocks: 2 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 139 Método: assertTrue(output, output.contains("Number of records: 5 Number of corrupt records: 0"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 146 Método: assertTrue(output, output.contains("Number of blocks: 3 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 147 Método: assertTrue(output, output.contains("Number of records: 8 Number of corrupt records: 2"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 154 Método: assertTrue(output, output.contains("Number of blocks: 2 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 155 Método: assertTrue(output, output.contains("Number of records: 5 Number of corrupt records: 0"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 162 Método: assertTrue(output, output.contains("Number of blocks: 3 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 163 Método: assertTrue(output, output.contains("Number of records: 8 Number of corrupt records: 2"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 170 Método: assertTrue(output, output.contains("Number of blocks: 2 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 171 Método: assertTrue(output, output.contains("Number of records: 5 Number of corrupt records: 0"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 178 Método: assertTrue(output, output.contains("Number of blocks: 3 Number of corrupt blocks: 1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestDataFileRepairTool.java linha: 179 Método: assertTrue(output, output.contains("Number of records: 8 Number of corrupt records: 2"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestRpcProtocolTool.java linha: 89 Método: assertEquals("Expected the simple.avpr protocol to be echoed to standout", simpleProtocol, Protocol.parse(baos2.toString("UTF-8")))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 203 Método: assertTrue("Outputsize is not roughly (Inputsize - Offset) * samplerate", (ROWS_IN_INPUT_FILES - OFFSET) * SAMPLERATE - numRowsInFile(output) < 2)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 205 Método: assertTrue("", (ROWS_IN_INPUT_FILES - OFFSET) * SAMPLERATE - numRowsInFile(output) > -2)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 222 Método: assertEquals("output does not start at offset", OFFSET, getFirstIntDatum(output))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 238 Método: assertEquals("output is not empty", 0, numRowsInFile(output))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 255 Método: assertEquals("output should only contain the record at offset", OFFSET, getFirstIntDatum(output))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestCatTool.java linha: 282 Método: assertTrue("should have lots of help", buffer.toString().trim().length() > 200)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/tools/src/test/java/org/apache/avro/tool/TestConcatTool.java linha: 226 Método: assertTrue("should have lots of help", buffer.toString().trim().length() > 200)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/trevni/core/src/test/java/org/apache/trevni/TestIOBuffers.java linha: 136 Método: Assert.assertEquals(random.nextFloat(), in.readFloat(), 0)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/trevni/core/src/test/java/org/apache/trevni/TestIOBuffers.java linha: 148 Método: Assert.assertEquals(Double.MIN_VALUE, in.readDouble(), 0)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/WordCountUtil.java linha: 95 Método: assertEquals(wc.key(), COUNTS.get(wc.key()), wc.value())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/trevni/avro/src/test/java/org/apache/trevni/avro/WordCountUtil.java linha: 107 Método: assertEquals((String) wc.get("key"), COUNTS.get(wc.get("key")), wc.get("value"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/specific/TestSpecificData.java linha: 97 Método: Assert.assertTrue(accept.stream().collect(Collectors.joining("\n\t")), accept.isEmpty())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/specific/TestGeneratedCode.java linha: 54 Método: Assert.assertTrue("Test schema must allow for custom coders.", ((SpecificRecordBase) src).hasCustomCoders())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/specific/TestGeneratedCode.java linha: 74 Método: Assert.assertTrue("Test schema must allow for custom coders.", ((SpecificRecordBase) src).hasCustomCoders())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 142 Método: assertEquals("Warnings produced when compiling generated code with -Xlint:all", 0, warnings.size())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 189 Método: assertFalse("Line started with a deprecated field declaration: " + line, line.startsWith("@Deprecated public int value"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 267 Método: assertFalse("Line started with a public field declaration: " + line, line.startsWith("public int value"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 268 Método: assertFalse("Line started with a deprecated field declaration: " + line, line.startsWith("@Deprecated public int value"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 291 Método: assertEquals("Found the wrong number of setters", 1, foundSetters)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 306 Método: assertFalse("No line should include the setter: " + line, line.startsWith("public void setValue("))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 335 Método: assertThat("Generated file should contain different bytes after setting non-default encoding", fileInDefaultEncoding, not(equalTo(fileInDifferentEncoding)))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 338 Método: assertThat("Generated files should contain the same characters in the proper encodings", new String(fileInDefaultEncoding), equalTo(new String(fileInDifferentEncoding, differentEncoding)))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 358 Método: Assert.assertEquals("Should use LocalDate for date type", "java.time.LocalDate", compiler.javaType(dateSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 359 Método: Assert.assertEquals("Should use LocalTime for time-millis type", "java.time.LocalTime", compiler.javaType(timeSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 361 Método: Assert.assertEquals("Should use DateTime for timestamp-millis type", "java.time.Instant", compiler.javaType(timestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 363 Método: Assert.assertEquals("Should use LocalDateTime for local-timestamp-millis type", "java.time.LocalDateTime", compiler.javaType(localTimestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 365 Método: Assert.assertEquals("Should use Java BigDecimal type", "java.math.BigDecimal", compiler.javaType(decimalSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 366 Método: Assert.assertEquals("Should use org.apache.avro.Conversions.UUIDConversion() type", "new org.apache.avro.Conversions.UUIDConversion()", compiler.conversionInstance(uuidSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 385 Método: Assert.assertEquals("Should use LocalDate for date type", "java.time.LocalDate", compiler.javaType(dateSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 386 Método: Assert.assertEquals("Should use LocalTime for time-millis type", "java.time.LocalTime", compiler.javaType(timeSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 388 Método: Assert.assertEquals("Should use DateTime for timestamp-millis type", "java.time.Instant", compiler.javaType(timestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 390 Método: Assert.assertEquals("Should use ByteBuffer type", "java.nio.ByteBuffer", compiler.javaType(decimalSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 391 Método: Assert.assertEquals("Should use org.apache.avro.Conversions.UUIDConversion() type", "new org.apache.avro.Conversions.UUIDConversion()", compiler.conversionInstance(uuidSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 406 Método: Assert.assertEquals("Should use java.time.LocalDate for date type", "java.time.LocalDate", compiler.javaType(dateSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 408 Método: Assert.assertEquals("Should use java.time.LocalTime for time-millis type", "java.time.LocalTime", compiler.javaType(timeSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 410 Método: Assert.assertEquals("Should use java.time.Instant for timestamp-millis type", "java.time.Instant", compiler.javaType(timestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 412 Método: Assert.assertEquals("Should use java.time.LocalTime for time-micros type", "java.time.LocalTime", compiler.javaType(timeMicrosSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 414 Método: Assert.assertEquals("Should use java.time.Instant for timestamp-micros type", "java.time.Instant", compiler.javaType(timestampMicrosSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 428 Método: Assert.assertEquals("Should use int for Type.INT", "int", compiler.javaUnbox(intSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 429 Método: Assert.assertEquals("Should use long for Type.LONG", "long", compiler.javaUnbox(longSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 430 Método: Assert.assertEquals("Should use float for Type.FLOAT", "float", compiler.javaUnbox(floatSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 431 Método: Assert.assertEquals("Should use double for Type.DOUBLE", "double", compiler.javaUnbox(doubleSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 432 Método: Assert.assertEquals("Should use boolean for Type.BOOLEAN", "boolean", compiler.javaUnbox(boolSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 436 Método: Assert.assertEquals("Should use void for Type.NULL", "void", compiler.javaUnbox(nullSchema, true))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 443 Método: Assert.assertEquals("Should use LocalDate for date type", "java.time.LocalDate", compiler.javaUnbox(dateSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 445 Método: Assert.assertEquals("Should use LocalTime for time-millis type", "java.time.LocalTime", compiler.javaUnbox(timeSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 447 Método: Assert.assertEquals("Should use DateTime for timestamp-millis type", "java.time.Instant", compiler.javaUnbox(timestampSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 460 Método: Assert.assertEquals("Should use java.time.LocalDate for date type", "java.time.LocalDate", compiler.javaUnbox(dateSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 462 Método: Assert.assertEquals("Should use java.time.LocalTime for time-millis type", "java.time.LocalTime", compiler.javaUnbox(timeSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 464 Método: Assert.assertEquals("Should use java.time.Instant for timestamp-millis type", "java.time.Instant", compiler.javaUnbox(timestampSchema, false))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 478 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDecimalSchema1, false), "java.math.BigDecimal")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 480 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDecimalSchema2, false), "java.math.BigDecimal")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 494 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDecimalSchema1, false), "java.nio.ByteBuffer")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 496 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDecimalSchema2, false), "java.nio.ByteBuffer")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 508 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableIntSchema1, false), "java.lang.Integer")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 509 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableIntSchema2, false), "java.lang.Integer")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 513 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableLongSchema1, false), "java.lang.Long")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 514 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableLongSchema2, false), "java.lang.Long")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 518 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableFloatSchema1, false), "java.lang.Float")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 519 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableFloatSchema2, false), "java.lang.Float")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 525 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDoubleSchema1, false), "java.lang.Double")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 527 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableDoubleSchema2, false), "java.lang.Double")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 534 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableBooleanSchema1, false), "java.lang.Boolean")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 536 Método: Assert.assertEquals("Should return boxed type", compiler.javaUnbox(nullableBooleanSchema2, false), "java.lang.Boolean")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 779 Método: Assert.assertEquals("Should use date conversion for date type", "new org.apache.avro.data.TimeConversions.DateConversion()", compiler.conversionInstance(dateSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 781 Método: Assert.assertEquals("Should use time conversion for time type", "new org.apache.avro.data.TimeConversions.TimeMillisConversion()", compiler.conversionInstance(timeSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 783 Método: Assert.assertEquals("Should use timestamp conversion for date type", "new org.apache.avro.data.TimeConversions.TimestampMillisConversion()", compiler.conversionInstance(timestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 786 Método: Assert.assertEquals("Should use null for decimal if the flag is off", "null", compiler.conversionInstance(decimalSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 788 Método: Assert.assertEquals("Should use org.apache.avro.Conversions.UUIDConversion() for uuid if the flag is off", "new org.apache.avro.Conversions.UUIDConversion()", compiler.conversionInstance(uuidSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 803 Método: Assert.assertEquals("Should use date conversion for date type", "new org.apache.avro.data.TimeConversions.DateConversion()", compiler.conversionInstance(dateSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 805 Método: Assert.assertEquals("Should use time conversion for time type", "new org.apache.avro.data.TimeConversions.TimeMillisConversion()", compiler.conversionInstance(timeSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 807 Método: Assert.assertEquals("Should use timestamp conversion for date type", "new org.apache.avro.data.TimeConversions.TimestampMillisConversion()", compiler.conversionInstance(timestampSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 810 Método: Assert.assertEquals("Should use null for decimal if the flag is off", "new org.apache.avro.Conversions.DecimalConversion()", compiler.conversionInstance(decimalSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 812 Método: Assert.assertEquals("Should use org.apache.avro.Conversions.UUIDConversion() for uuid if the flag is off", "new org.apache.avro.Conversions.UUIDConversion()", compiler.conversionInstance(uuidSchema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/idl/DocCommentHelperTest.java linha: 32 Método: assertEquals("There should be no warnings", emptyList(), DocCommentHelper.getAndClearWarnings())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/idl/DocCommentHelperTest.java linha: 59 Método: assertEquals("There should be a warning", singletonList("Found documentation comment at line 5, column 4. Ignoring previous one at line 3, column 2: \"This is the first token.\"\n" + "Did you mean to use a multiline comment ( /* ... */ ) instead?"), DocCommentHelper.getAndClearWarnings())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/compiler/src/test/java/org/apache/avro/compiler/idl/DocCommentHelperTest.java linha: 71 Método: assertEquals("There should be a warning", singletonList("Ignoring out-of-place documentation comment at line 3, column 2: \"This is a token.\"\n" + "Did you mean to use a multiline comment ( /* ... */ ) instead?"), DocCommentHelper.getAndClearWarnings())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-jetty/src/test/java/org/apache/avro/ipc/jetty/TestProtocolHttp.java linha: 70 Método: assertTrue("Got unwanted exception: " + e.getCause(), e.getCause() instanceof SocketTimeoutException)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 68 Método: Assert.assertEquals("partial string mismatch", "ap", partialstr)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 92 Método: Assert.assertEquals("partial string mismatch", "apac", partialstr)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 127 Método: Assert.assertEquals("partial string mismatch", "ap", partialstr)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 150 Método: Assert.assertEquals("partial string mismatch", "apa", partialstr)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 171 Método: Assert.assertEquals("partial string mismatch", "apac", partialstr)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 182 Método: Assert.assertTrue("key not present in map", rpcMeta.containsKey(key))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/RPCMetaTestPlugin.java linha: 186 Método: Assert.assertTrue("key BB had nothing remaining", keybuf.remaining() > 0)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificRecordBuilder.java linha: 129 Método: Assert.assertEquals(interop.getDoubleField(), copy.getDoubleField(), 0.001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificRecordBuilder.java linha: 132 Método: Assert.assertEquals(interop.getFloatField(), copy.getFloatField(), 0.001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 98 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField[\"a\"].strField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 111 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("custom coders were used"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 125 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("null key in map at RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 139 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("custom coders were used"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 152 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField[\"a\"].enumField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/specific/TestSpecificDatumWriter.java linha: 166 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("custom coders were used"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestProtocolSpecific.java linha: 318 Método: assertEquals("Expected number of handshakes did not take place.", expected, handshakes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 637 Método: assertEquals("Induced schema does not match.", schema, induced)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 640 Método: assertTrue("Datum does not validate against schema " + datum, GenericData.get().validate(schema, datum))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 688 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 705 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 721 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 737 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 740 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 753 Método: assertEquals("Encoded data does not match.", json, encoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 759 Método: assertEquals("Decoded data does not match.", datum, decoded)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 777 Método: assertEquals("Decoded json does not match.", Json.toString(node), Json.toString(decoded))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 790 Método: assertEquals("Wrong default.", defaultValue, record.get("f"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 791 Método: assertEquals("Wrong toString", expected, new Schema.Parser().parse(expected.toString()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/TestSchema.java linha: 826 Método: assertEquals("Wrong value", new GenericData.EnumSymbol(expected, "Y"), in.read(null, decoder))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/generic/TestDeepCopy.java linha: 93 Método: assertFalse("Field " + field.name() + " is same instance in deep copy", interop.get(field.pos()) == GenericData.get().deepCopy(field.schema(), interop.get(field.pos())))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/compiler/specific/TestSpecificCompiler.java linha: 218 Método: assertEquals("Missed generated protocol!", 1, count)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestHistogram.java linha: 138 Método: assertEquals(14.0f, h.getMean(), 0.0001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestHistogram.java linha: 139 Método: assertEquals(5.291f, h.getUnbiasedStdDev(), 0.001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 70 Método: Assert.assertEquals("Round-trip conversion should work", instant, roundTrip)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 71 Método: Assert.assertEquals("Known timestamp should be correct", May_28_2015_21_46_53_221_ts, conversion.fromLong(instant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 73 Método: Assert.assertEquals("Known timestamp should be correct", instant, (long) conversion.toLong(May_28_2015_21_46_53_221_ts, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 80 Método: Assert.assertEquals("Round-trip conversion should work", instant, roundTrip)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 81 Método: Assert.assertEquals("Known timestamp should be correct", Jan_2_1900_3_4_5_678_ts, conversion.fromLong(instant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 83 Método: Assert.assertEquals("Known timestamp should be correct", instant, (long) conversion.toLong(Jan_2_1900_3_4_5_678_ts, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 98 Método: Assert.assertEquals("Round-trip conversion should work", instant, roundTrip)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 99 Método: Assert.assertEquals("Known timestamp should be correct", May_28_2015_21_46_53_221_843_ts, conversion.fromLong(instant, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 101 Método: Assert.assertEquals("Known timestamp should be correct", instant, (long) conversion.toLong(May_28_2015_21_46_53_221_843_ts, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 108 Método: Assert.assertEquals("Round-trip conversion should work", instant, roundTrip)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 109 Método: Assert.assertEquals("Known timestamp should be correct", Jan_2_1900_3_4_5_678_901_ts, conversion.fromLong(instant, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 111 Método: Assert.assertEquals("Known timestamp should be correct", instant, (long) conversion.toLong(Jan_2_1900_3_4_5_678_901_ts, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 151 Método: Assert.assertEquals("Reflected schema should be logicalType timestampMillis", TIMESTAMP_MILLIS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/protobuf/src/test/java/org/apache/avro/protobuf/TestProtoConversions.java linha: 157 Método: Assert.assertEquals("Reflected schema should be logicalType timestampMicros", TIMESTAMP_MICROS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 814 Método: Assert.assertEquals("int field default type or value mismatch", intDef, schema.getField("int").defaultVal())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 815 Método: Assert.assertEquals("long field default type or value mismatch", longDef, schema.getField("long").defaultVal())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 816 Método: Assert.assertEquals("float field default type or value mismatch", floatDef, schema.getField("float").defaultVal())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 817 Método: Assert.assertEquals("double field default type or value mismatch", doubleDef, schema.getField("double").defaultVal())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 827 Método: Assert.assertEquals("Default behavior is to raise an exception due to record having an invalid default", "Invalid default for field IntegerField: \"Invalid\" not a \"int\"", e.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 840 Método: Assert.assertNull("Differing types, so this returns null", schema.getField(fieldName).defaultVal())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaBuilder.java linha: 841 Método: Assert.assertEquals("Schema is able to be successfully created as is without validation", defaultValue, schema.getField(fieldName).defaultValue().asText())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 42 Método: Assert.assertTrue("Should be a Decimal", logicalType instanceof LogicalTypes.Decimal)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 44 Método: Assert.assertEquals("Should have correct precision", 9, decimal.getPrecision())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 45 Método: Assert.assertEquals("Should have correct scale", 2, decimal.getScale())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 55 Método: Assert.assertNull("Should ignore invalid logical type", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 70 Método: assertThrows("Should reject type: " + schema.getType(), IllegalArgumentException.class, "Logical type decimal must be backed by fixed or bytes", () -> {
    decimal.addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 84 Método: Assert.assertNull("Should not return a LogicalType instance", logicalType)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 92 Método: Assert.assertEquals("Precision should be an Integer.MAX_VALUE", Integer.MAX_VALUE, ((LogicalTypes.Decimal) LogicalTypes.fromSchemaIgnoreInvalid(schema)).getPrecision())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 100 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "fixed(4) cannot store 10 digits (max 9)", () -> {
    LogicalTypes.decimal(10).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 105 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 109 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "fixed(129) cannot store 311 digits (max 310)", () -> {
    LogicalTypes.decimal(311).addToSchema(schema129);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 114 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema129))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 121 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "Invalid decimal precision: 0 (must be positive)", () -> {
    LogicalTypes.decimal(0).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 126 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 132 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "Invalid decimal precision: -9 (must be positive)", () -> {
    LogicalTypes.decimal(-9).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 137 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 143 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "Invalid decimal scale: 10 (greater than precision: 9)", () -> {
    LogicalTypes.decimal(9, 10).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 148 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 154 Método: assertThrows("Should reject precision", IllegalArgumentException.class, "Invalid decimal scale: -2 (must be positive)", () -> {
    LogicalTypes.decimal(9, -2).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 159 Método: Assert.assertNull("Invalid logical type should not be set on schema", LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 166 Método: assertThrows("Should reject second logical type", AvroRuntimeException.class, "Can't overwrite property: scale", () -> {
    LogicalTypes.decimal(9, 2).addToSchema(schema);
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 171 Método: Assert.assertEquals("First logical type should still be set on schema", LogicalTypes.decimal(9), LogicalTypes.fromSchemaIgnoreInvalid(schema))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 180 Método: Assert.assertEquals("Scale should be a 0", 0, ((LogicalTypes.Decimal) LogicalTypes.fromSchemaIgnoreInvalid(schema)).getScale())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 189 Método: Assert.assertEquals("Constructed and parsed schemas should match", schema, parsed)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 197 Método: Assert.assertEquals("Constructed and parsed schemas should match", schema, parsed)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 236 Método: assertThrows("Should error if type name was not provided", UnsupportedOperationException.class, "LogicalTypeFactory TypeName has not been provided", () -> {
    LogicalTypes.register(schema -> LogicalTypes.date());
    return null;
})
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 298 Método: Assert.assertEquals("Should be equal (forward): " + message, o1, o2)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 299 Método: Assert.assertEquals("Should be equal (reverse): " + message, o2, o1)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 303 Método: Assert.assertNotEquals("Should be equal (forward): " + message, o1, o2)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 304 Método: Assert.assertNotEquals("Should be equal (reverse): " + message, o2, o1)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 322 Método: Assert.assertEquals(message, expected, actual.getClass())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestLogicalType.java linha: 323 Método: Assert.assertTrue("Expected exception message (" + containedInMessage + ") missing: " + actual.getMessage(), actual.getMessage().contains(containedInMessage))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 65 Método: Assert.assertEquals("6 Jan 1970 should be 5", 5, (int) conversion.toInt(Jan_6_1970, DATE_SCHEMA, LogicalTypes.date()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 67 Método: Assert.assertEquals("1 Jan 1970 should be 0", 0, (int) conversion.toInt(Jan_1_1970, DATE_SCHEMA, LogicalTypes.date()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 69 Método: Assert.assertEquals("27 Dec 1969 should be -5", -5, (int) conversion.toInt(Dec_27_1969, DATE_SCHEMA, LogicalTypes.date()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 72 Método: Assert.assertEquals("6 Jan 1970 should be 5", conversion.fromInt(5, DATE_SCHEMA, LogicalTypes.date()), Jan_6_1970)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 73 Método: Assert.assertEquals("1 Jan 1970 should be 0", conversion.fromInt(0, DATE_SCHEMA, LogicalTypes.date()), Jan_1_1970)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 74 Método: Assert.assertEquals("27 Dec 1969 should be -5", conversion.fromInt(-5, DATE_SCHEMA, LogicalTypes.date()), Dec_27_1969)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 85 Método: Assert.assertEquals("Midnight should be 0", 0, (int) conversion.toInt(LocalTime.MIDNIGHT, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 87 Método: Assert.assertEquals("01:00 should be 3,600,000", 3_600_000, (int) conversion.toInt(oneAM, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 89 Método: Assert.assertEquals("15:14:15.926 should be " + afternoonMillis, afternoonMillis, (int) conversion.toInt(afternoon, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 92 Método: Assert.assertEquals("Midnight should be 0", LocalTime.MIDNIGHT, conversion.fromInt(0, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 94 Método: Assert.assertEquals("01:00 should be 3,600,000", oneAM, conversion.fromInt(3600000, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 96 Método: Assert.assertEquals("15:14:15.926 should be " + afternoonMillis, afternoon, conversion.fromInt(afternoonMillis, TIME_MILLIS_SCHEMA, LogicalTypes.timeMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 107 Método: Assert.assertEquals("Midnight should be 0", LocalTime.MIDNIGHT, conversion.fromLong(0L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 109 Método: Assert.assertEquals("01:00 should be 3,600,000,000", oneAM, conversion.fromLong(3_600_000_000L, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 111 Método: Assert.assertEquals("15:14:15.926551 should be " + afternoonMicros, afternoon, conversion.fromLong(afternoonMicros, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 114 Método: Assert.assertEquals("Midnight should be 0", 0, (long) conversion.toLong(LocalTime.MIDNIGHT, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 116 Método: Assert.assertEquals("01:00 should be 3,600,000,000", 3_600_000_000L, (long) conversion.toLong(oneAM, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 118 Método: Assert.assertEquals("15:14:15.926551 should be " + afternoonMicros, afternoonMicros, (long) conversion.toLong(afternoon, TIME_MICROS_SCHEMA, LogicalTypes.timeMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 130 Método: Assert.assertEquals("Round-trip conversion should work", nowInstant, roundTrip)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 138 Método: Assert.assertEquals("Known date should be correct", May_28_2015_21_46_53_221, conversion.fromLong(May_28_2015_21_46_53_221_instant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 140 Método: Assert.assertEquals("Known date should be correct", May_28_2015_21_46_53_221_instant, (long) conversion.toLong(May_28_2015_21_46_53_221, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 144 Método: Assert.assertEquals("1970-01-01 should be 0", Instant.EPOCH, conversion.fromLong(0L, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 146 Método: Assert.assertEquals("1970-01-01 should be 0", 0L, (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(), TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 154 Método: Assert.assertEquals("Pre 1970 date should be correct", Jul_01_1969_12_00_00_123, conversion.fromLong(Jul_01_1969_12_00_00_123_instant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 156 Método: Assert.assertEquals("Pre 1970 date should be correct", Jul_01_1969_12_00_00_123_instant, (long) conversion.toLong(Jul_01_1969_12_00_00_123, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 170 Método: Assert.assertEquals("Known date should be correct", May_28_2015_21_46_53_221_843, conversion.fromLong(May_28_2015_21_46_53_221_843_instant, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMicros()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 173 Método: Assert.assertEquals("Known date should be correct", May_28_2015_21_46_53_221_843_instant, (long) conversion.toLong(May_28_2015_21_46_53_221_843, TIMESTAMP_MICROS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 177 Método: Assert.assertEquals("1970-01-01 should be 0", Instant.EPOCH, conversion.fromLong(0L, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 179 Método: Assert.assertEquals("1970-01-01 should be 0", 0L, (long) conversion.toLong(ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC).toInstant(), TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 187 Método: Assert.assertEquals("Pre 1970 date should be correct", Jul_01_1969_12_00_00_000_123, conversion.fromLong(Jul_01_1969_12_00_00_000_123_instant, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 189 Método: Assert.assertEquals("Pre 1970 date should be correct", Jul_01_1969_12_00_00_000_123_instant, (long) conversion.toLong(Jul_01_1969_12_00_00_000_123, TIMESTAMP_MILLIS_SCHEMA, LogicalTypes.timestampMillis()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 196 Método: Assert.assertEquals("Reflected schema should be logicalType date", DATE_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 202 Método: Assert.assertEquals("Reflected schema should be logicalType timeMillis", TIME_MILLIS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 208 Método: Assert.assertEquals("Reflected schema should be logicalType timeMicros", TIME_MICROS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 214 Método: Assert.assertEquals("Reflected schema should be logicalType timestampMillis", TIMESTAMP_MILLIS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/data/TestTimeConversions.java linha: 220 Método: Assert.assertEquals("Reflected schema should be logicalType timestampMicros", TIMESTAMP_MICROS_SCHEMA, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java linha: 131 Método: assertTrue(threwProperly, "failed to throw when expected")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java linha: 147 Método: assertNull(doubleCloseEx, "Double close() threw an unexpected exception")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java linha: 248 Método: assertNotNull(readerTrue.next(), "Should be able to reopen from arbitrary point")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java linha: 254 Método: assertEquals(validPos, sin.tell(), "Should not move from sync point on reopen")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFile.java linha: 255 Método: assertNotNull(readerFalse.next(), "Should be able to reopen at sync point")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/message/TestBinaryMessageEncoding.java linha: 65 Método: Assert.assertNotSame("Copy should not be the same object", copy, V2_RECORDS.get(0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/message/TestBinaryMessageEncoding.java linha: 66 Método: Assert.assertEquals("Record should be identical after round-trip", V2_RECORDS.get(0), copy)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/message/TestBinaryMessageEncoding.java linha: 174 Método: Assert.assertEquals("Buffer was reused, decode(b0) should be record 1", V1_RECORDS.get(1), decoder.decode(b0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/message/TestBinaryMessageEncoding.java linha: 189 Método: Assert.assertEquals("Buffer was copied, decode(b0) should be record 0", V1_RECORDS.get(0), decoder.decode(b0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java linha: 389 Método: assertNotNull("field 's' should not be null", field)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java linha: 480 Método: assertNotNull("field 's' should not be null", field)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java linha: 546 Método: assertNotNull("field 'detailMessage' should not be null", message)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflect.java linha: 587 Método: assertEquals("setField", object, copy)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectAllowNulls.java linha: 99 Método: Assert.assertEquals("Should produce a nullable double", nullableSchema(double.class), withNullable.getField("aDouble").schema())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectAllowNulls.java linha: 105 Método: Assert.assertEquals("Should add null to a non-null union", nullableDoubleOrLong, withNullable.getField("doubleOrLong").schema())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectAllowNulls.java linha: 108 Método: Assert.assertEquals("Should add null to a non-null union", nullableDoubleOrLong, withNullable.getField("doubleOrLongOrNull1").schema())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectAllowNulls.java linha: 114 Método: Assert.assertEquals("Should add null to a non-null union", doubleOrLongOrNull, withNullable.getField("doubleOrLongOrNull2").schema())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectAllowNulls.java linha: 117 Método: Assert.assertEquals("Should add null to a non-null union", doubleOrLongOrNull, withNullable.getField("doubleOrLongOrNull3").schema())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 80 Método: Assert.assertEquals("Should use the UUID logical type", expected, actual)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 117 Método: Assert.assertEquals("Should have the correct record name", "org.apache.avro.reflect.TestReflectLogicalTypes", schema.getNamespace())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 119 Método: Assert.assertEquals("Should have the correct record name", "DecimalRecordBytes", schema.getName())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 120 Método: Assert.assertEquals("Should have the correct logical type", LogicalTypes.decimal(9, 2), LogicalTypes.fromSchema(schema.getField("decimal").schema()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 127 Método: Assert.assertEquals("Should match the decimal after round trip", Collections.singletonList(record), read(REFLECT.createDatumReader(schema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 165 Método: Assert.assertEquals("Should have the correct record name", "org.apache.avro.reflect.TestReflectLogicalTypes", schema.getNamespace())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 167 Método: Assert.assertEquals("Should have the correct record name", "DecimalRecordFixed", schema.getName())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 168 Método: Assert.assertEquals("Should have the correct logical type", LogicalTypes.decimal(9, 2), LogicalTypes.fromSchema(schema.getField("decimal").schema()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 175 Método: Assert.assertEquals("Should match the decimal after round trip", Collections.singletonList(record), read(REFLECT.createDatumReader(schema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 275 Método: Assert.assertEquals("Should have the correct record name", "org.apache.avro.reflect.TestReflectLogicalTypes", schema.getNamespace())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 277 Método: Assert.assertEquals("Should have the correct record name", "PairRecord", schema.getName())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 278 Método: Assert.assertEquals("Should have the correct logical type", "pair", LogicalTypes.fromSchema(schema.getField("pair").schema()).getName())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 289 Método: Assert.assertEquals("Data should match after serialization round-trip", 34L, (long) actual.first)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 290 Método: Assert.assertEquals("Data should match after serialization round-trip", 35L, (long) actual.second)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 313 Método: Assert.assertEquals("Should convert Strings to UUIDs", expected, read(REFLECT.createDatumReader(uuidSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 320 Método: Assert.assertEquals("Should not convert to UUID if accessor is String", Arrays.asList(r1, r2), read(REFLECT.createDatumReader(uuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 348 Método: Assert.assertEquals("Should read uuid as String without UUID conversion", expected, read(REFLECT.createDatumReader(uuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 352 Método: Assert.assertEquals("Should read uuid as String without UUID logical type", expected, read(ReflectData.get().createDatumReader(uuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 380 Método: Assert.assertEquals("Should read uuid as String without UUID conversion", expected, read(ReflectData.get().createDatumReader(nullableUuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 408 Método: Assert.assertEquals("Should read uuid as String without UUID conversion", expected, read(REFLECT.createDatumReader(uuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 433 Método: Assert.assertTrue("UUID should be a String (unsafe)", uuid instanceof String)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 514 Método: Assert.assertEquals("Should convert Strings to UUIDs", expected, read(REFLECT.createDatumReader(uuidSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 521 Método: Assert.assertEquals("Should not convert to UUID if accessor is String", Arrays.asList(r1, r2), read(REFLECT.createDatumReader(uuidStringSchema), test))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 542 Método: Assert.assertEquals("Should convert Strings to UUIDs", expected, read(REFLECT.createDatumReader(uuidArraySchema), test).get(0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 570 Método: Assert.assertEquals("Should read UUIDs as Strings", expected, read(ReflectData.get().createDatumReader(stringArraySchema), test).get(0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 592 Método: Assert.assertEquals("Should convert Strings to UUIDs", expected, read(REFLECT.createDatumReader(uuidListSchema), test).get(0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 618 Método: Assert.assertEquals("Should read UUIDs as Strings", expected, read(REFLECT.createDatumReader(stringArraySchema), test).get(0))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 626 Método: Assert.assertEquals("Should have the correct record name", "org.apache.avro.reflect", actual.getNamespace())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 627 Método: Assert.assertEquals("Should have the correct record name", "RecordWithTimestamps", actual.getName())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 628 Método: Assert.assertEquals("Should have the correct physical type", Schema.Type.LONG, actual.getField("localDateTime").schema().getType())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectLogicalTypes.java linha: 630 Método: Assert.assertEquals("Should have the correct logical type", LogicalTypes.localTimestampMillis(), LogicalTypes.fromSchema(actual.getField("localDateTime").schema()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestByteBuffer.java linha: 80 Método: assertEquals("md5 for result differed from input", expected, actual)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestByteBuffer.java linha: 88 Método: assertTrue("missing first record", it.hasNext())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestByteBuffer.java linha: 90 Método: assertFalse("should be no more records - only wrote one out", it.hasNext())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 68 Método: assertTrue("Unable to read 'employees' map", employees instanceof GenericArray)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 93 Método: assertNotNull("Unable to serialize using jsonEncoder", jsonBytes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 95 Método: assertEquals("JSON decoder output not same as Binary Decoder", record, jsonRecord)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 110 Método: assertTrue("Unable to read 'employees' map", employees instanceof GenericArray)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 149 Método: assertNotNull("Unable to serialize using jsonEncoder", jsonBytes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 151 Método: assertEquals("JSON decoder output not same as Binary Decoder", record, jsonRecord)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 166 Método: assertTrue("Unable to read map1", map1obj instanceof GenericArray)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 210 Método: assertNotNull("Unable to serialize using jsonEncoder", jsonBytes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 212 Método: assertEquals("JSON decoder output not same as Binary Decoder", record.get("map1"), jsonRecord.get("map1"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 213 Método: assertEquals("JSON decoder output not same as Binary Decoder", record.get("map2"), jsonRecord.get("map2"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 226 Método: assertNotNull("Unable to get schema for " + testType, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestNonStringMapKeys.java linha: 255 Método: assertNotNull("Unable to get schema for " + testType, schema)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectData.java linha: 53 Método: assertThat("ReflectData cache should release references", classData.bySchema.size(), lessThan(numSchemas))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/reflect/TestReflectData.java linha: 130 Método: assertEquals("Invalid field " + field.name(), field.defaultVal(), testCases.get(field.name()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 351 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField[\"a\"].strField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 367 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("null key in map at RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 378 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("null value for (non-nullable) string"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 394 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField[\"a\"].strField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 405 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("value 42 (a java.lang.Integer) cannot be cast to expected type string"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 421 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("RecordWithRequiredFields.unionField[UnionRecord].arrayField[0].mapField[\"a\"].enumField"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericDatumWriter.java linha: 423 Método: Assert.assertTrue("unexpected message " + expected.getMessage(), expected.getMessage().contains("42 (a java.lang.Integer) is not a MapRecordEnum"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 78 Método: Assertions.assertEquals(expected, read(GENERIC.createDatumReader(uuidSchema), test), "Should convert Strings to UUIDs")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 94 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(stringSchema), test), "Should read UUIDs as Strings")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 113 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(nullableStringSchema), test), "Should read UUIDs as Strings")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 134 Método: Assertions.assertEquals(expected, read(GENERIC.createDatumReader(decimalSchema), test), "Should convert fixed to BigDecimals")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 154 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(fixedSchema), test), "Should read BigDecimals as fixed")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 175 Método: assertThat("Ensure ByteBuffer not consumed by conversion", conversion.fromBytes(d1bytes, bytesSchema, decimal), is(d1))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 213 Método: Assertions.assertEquals(expected, read(GENERIC.createDatumReader(decimalSchema), test), "Should convert bytes to BigDecimals")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 234 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(bytesSchema), test), "Should read BigDecimals as bytes")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 343 Método: Assertions.assertEquals(expected, read(GENERIC.createDatumReader(timestampSchema), test), "Should convert long to LocalDateTime")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 363 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(timestampSchema), test), "Should read LocalDateTime as longs")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 384 Método: Assertions.assertEquals(expected, read(GENERIC.createDatumReader(timestampSchema), test), "Should convert long to LocalDateTime")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericLogicalTypes.java linha: 404 Método: Assertions.assertEquals(expected, read(GenericData.get().createDatumReader(timestampSchema), test), "Should read LocalDateTime as longs")
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericData.java linha: 557 Método: assertFalse("We don't expect GenericData to allow a String datum for an enum schema", gd.validate(schema, "ONE"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericData.java linha: 558 Método: assertFalse("We don't expect GenericData to allow a Java Enum for an enum schema", gd.validate(schema, anEnum.ONE))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericData.java linha: 670 Método: assertFalse("Record with duplicated values results in wrong 'toString()'", testString.contains("CIRCULAR REFERENCE"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericRecordBuilder.java linha: 44 Método: Assert.assertFalse("RecordBuilder should not have field " + field.name(), builder.has(field.name()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericRecordBuilder.java linha: 45 Método: Assert.assertNull("Field " + field.name() + " should be null", builder.get(field.name()))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericRecordBuilder.java linha: 52 Método: Assert.assertTrue("anArray should be set", builder.has("anArray"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/generic/TestGenericRecordBuilder.java linha: 54 Método: Assert.assertFalse("id should not be set", builder.has("id"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java linha: 378 Método: assertEquals(String.format("Expecting reader %s to be compatible with writer %s, but tested incompatible.", reader, writer), SchemaCompatibilityType.COMPATIBLE, result.getType())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaCompatibility.java linha: 493 Método: assertEquals(String.format("Expecting decoded value %s when decoding value %s whose writer schema is %s " + "using reader schema %s, but value was %s.", expectedDecodedDatum, datum, writerSchema, readerSchema, decodedDatum), expectedDecodedDatum, decodedDatum)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 351 Método: Assert.assertEquals("Should correctly read back the parent id", 1L, actual.get("id"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 352 Método: Assert.assertEquals("Should correctly read back the parent data", new Utf8("parent data!"), actual.get("p"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 355 Método: Assert.assertEquals("Should correctly read back the child data", new Utf8("child data!"), actualChild.get("c"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 357 Método: Assert.assertTrue("Should have a parent Record object", childParent instanceof Record)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 360 Método: Assert.assertEquals("Should have the right parent id", 1L, childParentRecord.get("id"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestCircularReferences.java linha: 361 Método: Assert.assertEquals("Should have the right parent data", new Utf8("parent data!"), childParentRecord.get("p"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/parsing/TestResolvingGrammarGenerator.java linha: 84 Método: Assert.assertEquals("Incorrect exception message", "Found ns.MyRecord, expecting ns.MyRecord, missing required field field2", typeException.getMessage())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 327 Método: assertEquals(msg, values[p++], vi.readBoolean())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 330 Método: assertEquals(msg, values[p++], vi.readInt())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 333 Método: assertEquals(msg, values[p++], vi.readLong())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 339 Método: assertEquals(msg, f, vi.readFloat(), Math.abs(f / 1000))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 345 Método: assertEquals(msg, d, vi.readDouble(), Math.abs(d / 1000))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 354 Método: assertEquals(msg, new Utf8(s), vi.readString(null))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 364 Método: assertEquals(msg, new Utf8(s), vi.readString(null))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 377 Método: assertArrayEquals(msg, bb, actBytes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 389 Método: assertArrayEquals(msg, bb, actBytes)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 398 Método: assertEquals(msg, e, vi.readEnum())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 425 Método: assertEquals(msg, 0, counts[level])
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 427 Método: assertEquals(msg, 0, vi.arrayNext())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 434 Método: assertEquals(msg, 0, vi.mapNext())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 453 Método: assertEquals(msg, idx, vi.readIndex())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 466 Método: assertEquals(msg, values.length, p)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 474 Método: assertEquals(msg, 0, vi.skipMap())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestValidatingIO.java linha: 472 Método: assertEquals(msg, 0, vi.skipArray())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 206 Método: Assert.assertEquals("InputStream based BinaryDecoder result does not match", datum, reader.read(null, fromInputStream))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 208 Método: Assert.assertEquals("Array based BinaryDecoder result does not match", datum, reader.read(null, fromArray))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 209 Método: Assert.assertEquals("offset Array based BinaryDecoder result does not match", datum, reader.read(null, fromOffsetArray))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 211 Método: Assert.assertEquals("InputStream initialized BinaryDecoder result does not match", datum, reader.read(null, initOnInputStream))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 213 Método: Assert.assertEquals("Array initialized BinaryDecoder result does not match", datum, reader.read(null, initOnArray))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 349 Método: Assert.assertThrows("Malformed data. Length is negative: -1", AvroRuntimeException.class, bd::readString)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 358 Método: Assert.assertThrows("Cannot read strings longer than " + BinaryDecoder.MAX_ARRAY_SIZE + " bytes", UnsupportedOperationException.class, bd::readString)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 367 Método: Assert.assertThrows("Malformed data. Length is negative: -1", AvroRuntimeException.class, () -> bd.readBytes(null))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 376 Método: Assert.assertThrows("Cannot read arrays longer than " + BinaryDecoder.MAX_ARRAY_SIZE + " bytes", UnsupportedOperationException.class, () -> bd.readBytes(null))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/io/TestBinaryDecoder.java linha: 389 Método: Assert.assertThrows("Bytes length " + (maxLength + 1) + " exceeds maximum allowed", AvroRuntimeException.class, () -> bd.readBytes(null))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemaNormalization.java linha: 156 Método: assertTrue(m, expected == actual)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java linha: 140 Método: assertEquals("at " + count++, expected, datum)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java linha: 144 Método: assertEquals("at " + count++, expected, datum)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestDataFileConcat.java linha: 148 Método: assertEquals("at " + count++, expected, datum)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/TestSchemas.java linha: 191 Método: assertTrue(String.format("Subset '%s' not found in '%s'", subset, whole), whole.contains(subset))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/avro/src/test/java/org/apache/avro/util/TestCaseFinder.java linha: 77 Método: assertTrue(pr(result), eq(result, expectedOutput))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/hadoop/io/TestAvroDatumConverterFactory.java linha: 100 Método: assertEquals(2.0, converter.convert(new DoubleWritable(2.0)), 0.00001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/hadoop/io/TestAvroDatumConverterFactory.java linha: 106 Método: assertEquals(2.2f, converter.convert(new FloatWritable(2.2f)), 0.00001)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/hadoop/io/TestAvroSequenceFile.java linha: 82 Método: assertNull("Should be no more records.", reader.next(key))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/hadoop/io/TestAvroSequenceFile.java linha: 123 Método: assertNull("Should be no more records.", reader.next(key))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/hadoop/io/TestAvroSequenceFile.java linha: 158 Método: assertFalse("Should be no more records.", reader.next(key))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 95 Método: assertEquals("Progress should be zero before any records are read", 0.0f, recordReader.getProgress(), 0.0f)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 102 Método: assertTrue("Expected at least one record", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 106 Método: assertNotNull("First record had null key", key)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 107 Método: assertNotNull("First record had null value", value)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 112 Método: assertTrue("getCurrentKey() returned different keys for the same record", key == recordReader.getCurrentKey())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 113 Método: assertTrue("getCurrentValue() returned different values for the same record", value == recordReader.getCurrentValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 117 Método: assertTrue("Expected to read a second record", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 121 Método: assertNotNull("Second record had null key", key)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 122 Método: assertNotNull("Second record had null value", value)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 127 Método: assertEquals("Progress should be complete (2 out of 2 records processed)", 1.0f, recordReader.getProgress(), 0.0f)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyValueRecordReader.java linha: 130 Método: assertFalse("Expected only 2 records", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 83 Método: assertEquals("Progress should be zero before any records are read", 0.0f, recordReader.getProgress(), 0.0f)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 90 Método: assertTrue("Expected at least one record", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 94 Método: assertNotNull("First record had null key", key)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 95 Método: assertNotNull("First record had null value", value)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 100 Método: assertTrue("getCurrentKey() returned different keys for the same record", key == recordReader.getCurrentKey())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 101 Método: assertTrue("getCurrentValue() returned different values for the same record", value == recordReader.getCurrentValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 105 Método: assertTrue("Expected to read a second record", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 109 Método: assertNotNull("Second record had null key", key)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 110 Método: assertNotNull("Second record had null value", value)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 115 Método: assertEquals("Progress should be complete (2 out of 2 records processed)", 1.0f, recordReader.getProgress(), 0.0f)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapreduce/TestAvroKeyRecordReader.java linha: 118 Método: assertFalse("Expected only 2 records", recordReader.nextKeyValue())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapred/TestReflectJob.java linha: 160 Método: assertEquals(wc.word, WordCountUtil.COUNTS.get(wc.word), (Long) wc.count)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapred/TestAvroTextOutputFormat.java linha: 80 Método: assertFalse("End", fileReader.hasNext())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapred/WordCountUtil.java linha: 120 Método: assertEquals(wc.key().toString(), COUNTS.get(wc.key().toString()), wc.value())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/mapred/src/test/java/org/apache/avro/mapred/tether/TestWordCountTether.java linha: 101 Método: assertEquals(wc.key().toString(), WordCountUtil.COUNTS.get(wc.key().toString()), wc.value())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 223 Método: Assert.assertTrue("Expected " + TestError.class.getCanonicalName(), e.getCause() instanceof TestError)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 226 Método: Assert.assertTrue("Expected " + TestError.class.getCanonicalName(), future.getError() instanceof TestError)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 244 Método: Assert.assertTrue("Timed out waiting for error", latch.await(2, TimeUnit.SECONDS))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 253 Método: Assert.assertTrue("Expected ack flag to be set", ackFlag.get())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 258 Método: Assert.assertFalse("Expected ack flag to be cleared", ackFlag.get())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 295 Método: Assert.assertTrue("Expected IOException", ioeCaught)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 300 Método: Assert.assertTrue("Expected IOException", ioeCaught)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 316 Método: Assert.assertTrue("Expected IOException", ioeCaught)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 358 Método: Assert.assertTrue("Expected IOException to be thrown", ioeThrown)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServerWithCallbacks.java linha: 504 Método: Assert.assertTrue("Timed out shutting down thread pool", threadPool.awaitTermination(2, TimeUnit.SECONDS))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyTransceiverWhenFailsToConnect.java linha: 47 Método: Assert.assertTrue("Channel not shut down", channel == null || channel.isShutdown())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/ipc-netty/src/test/java/org/apache/avro/ipc/netty/TestNettyServer.java linha: 186 Método: Assert.assertTrue("Connection should have been closed: " + bytesRead, bytesRead == -1)
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestSchemaMojo.java linha: 68 Método: assertTrue("Got " + schemaUserContent + " instead", schemaUserContent.contains("It works!"))
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/AbstractAvroMojoTest.java linha: 50 Método: assertTrue("Directory " + directory.toString() + " does not exists", directory.exists())
Assert com mensagem: /home/vitor-otto/opensource/avro-release-1.a11.1/lang/java/maven-plugin/src/test/java/org/apache/avro/mojo/TestProtocolMojo.java linha: 51 Método: assertTrue("Got " + protocolUserContent + " instead", protocolUserContent.contains("java.time.Instant"))
Total asserts: 2618
Asserts sem descrição: 2218
Asserts com descrição: 400
Assertion Roulette: 1859
